; Listing generated by Microsoft (R) Optimizing Compiler Version 19.43.34808.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\GameLib\Distribute\SnowParticle.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??0CSnowParticle@@QAE@XZ			; CSnowParticle::CSnowParticle
PUBLIC	??1CSnowParticle@@QAE@XZ			; CSnowParticle::~CSnowParticle
PUBLIC	?New@CSnowParticle@@SAPAV1@XZ			; CSnowParticle::New
PUBLIC	?Delete@CSnowParticle@@SAXPAV1@@Z		; CSnowParticle::Delete
PUBLIC	?DestroyPool@CSnowParticle@@SAXXZ		; CSnowParticle::DestroyPool
PUBLIC	?Init@CSnowParticle@@QAEXABUD3DXVECTOR3@@@Z	; CSnowParticle::Init
PUBLIC	?SetCameraVertex@CSnowParticle@@QAEXABUD3DXVECTOR3@@0@Z ; CSnowParticle::SetCameraVertex
PUBLIC	?IsActivate@CSnowParticle@@QAE_NXZ		; CSnowParticle::IsActivate
PUBLIC	?Update@CSnowParticle@@QAEXMABUD3DXVECTOR3@@@Z	; CSnowParticle::Update
PUBLIC	?GetVerticies@CSnowParticle@@QAEXAAUSParticleVertex@@000@Z ; CSnowParticle::GetVerticies
PUBLIC	?_Xlength@?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@CAXXZ ; std::vector<CSnowParticle *,std::allocator<CSnowParticle *> >::_Xlength
PUBLIC	??$_Emplace_reallocate@ABQAVCSnowParticle@@@?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@AAEPAPAVCSnowParticle@@QAPAV2@ABQAV2@@Z ; std::vector<CSnowParticle *,std::allocator<CSnowParticle *> >::_Emplace_reallocate<CSnowParticle * const &>
PUBLIC	??$_Copy_memmove@PAPAVCSnowParticle@@PAPAV1@@std@@YAPAPAVCSnowParticle@@PAPAV1@00@Z ; std::_Copy_memmove<CSnowParticle * *,CSnowParticle * *>
PUBLIC	??$_Copy_memmove_tail@PAPAVCSnowParticle@@@std@@YAPAPAVCSnowParticle@@QBDQAPAV1@II@Z ; std::_Copy_memmove_tail<CSnowParticle * *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A ; CSnowParticle::ms_kVct_SnowParticlePool
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	__real@3c8efa35
PUBLIC	__real@41200000
PUBLIC	__real@42c80000
PUBLIC	__real@43fa0000
PUBLIC	__real@4788b800
PUBLIC	__xmm@7fffffff7fffffff7fffffff7fffffff
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?frandom@@YAMMM@Z:PROC				; frandom
EXTRN	__CxxThrowException@8:PROC
EXTRN	__libm_sse2_cos_precise:PROC
EXTRN	__libm_sse2_sin_precise:PROC
EXTRN	_memmove:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A DB 0cH DUP (?) ; CSnowParticle::ms_kVct_SnowParticlePool
_BSS	ENDS
CRT$XCU	SEGMENT
??ms_kVct_SnowParticlePool$initializer$@CSnowParticle@@2P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A@@YAXXZ ; ??ms_kVct_SnowParticlePool$initializer$@CSnowParticle@@2P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT __xmm@7fffffff7fffffff7fffffff7fffffff
CONST	SEGMENT
__xmm@7fffffff7fffffff7fffffff7fffffff DB 0ffH, 0ffH, 0ffH, 07fH, 0ffH, 0ffH
	DB	0ffH, 07fH, 0ffH, 0ffH, 0ffH, 07fH, 0ffH, 0ffH, 0ffH, 07fH
CONST	ENDS
;	COMDAT __real@4788b800
CONST	SEGMENT
__real@4788b800 DD 04788b800r			; 70000
CONST	ENDS
;	COMDAT __real@43fa0000
CONST	SEGMENT
__real@43fa0000 DD 043fa0000r			; 500
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@3c8efa35
CONST	SEGMENT
__real@3c8efa35 DD 03c8efa35r			; 0.0174533
CONST	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove_tail@PAPAVCSnowParticle@@@std@@YAPAPAVCSnowParticle@@QBDQAPAV1@II@Z
_TEXT	SEGMENT
__First_ch$ = 8						; size = 4
__Dest$ = 12						; size = 4
__Byte_count$ = 16					; size = 4
__Object_count$ = 20					; size = 4
??$_Copy_memmove_tail@PAPAVCSnowParticle@@@std@@YAPAPAVCSnowParticle@@QBDQAPAV1@II@Z PROC ; std::_Copy_memmove_tail<CSnowParticle * *>, COMDAT

; 4763 :     const char* const _First_ch, const _OutCtgIt _Dest, const size_t _Byte_count, const size_t _Object_count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4764 :     _STL_INTERNAL_CHECK(_Byte_count == _Object_count * sizeof(*_Dest));
; 4765 :     const auto _Dest_ptr = _STD _To_address(_Dest);
; 4766 :     const auto _Dest_ch  = const_cast<char*>(reinterpret_cast<const volatile char*>(_Dest_ptr));
; 4767 :     _CSTD memmove(_Dest_ch, _First_ch, _Byte_count);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 10	 mov	 edi, DWORD PTR __Byte_count$[ebp]
  0000b	57		 push	 edi
  0000c	ff 75 08	 push	 DWORD PTR __First_ch$[ebp]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memmove
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4768 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4769 :         (void) _Object_count;
; 4770 :         // CodeQL [SM02986] This cast is correct: we're bypassing pointer arithmetic for performance.
; 4771 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Byte_count);

  00018	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi

; 4772 :     } else {
; 4773 :         return _Dest + static_cast<_Iter_diff_t<_OutCtgIt>>(_Object_count);
; 4774 :     }
; 4775 : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Copy_memmove_tail@PAPAVCSnowParticle@@@std@@YAPAPAVCSnowParticle@@QBDQAPAV1@II@Z ENDP ; std::_Copy_memmove_tail<CSnowParticle * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCSnowParticle@@PAPAV1@@std@@YAPAPAVCSnowParticle@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCSnowParticle@@PAPAV1@@std@@YAPAPAVCSnowParticle@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CSnowParticle * *,CSnowParticle * *>, COMDAT

; 4778 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4779 :     _STL_INTERNAL_CHECK(_First <= _Last);
; 4780 :     const auto _First_ptr    = _STD _To_address(_First);
; 4781 :     const auto _Last_ptr     = _STD _To_address(_Last);
; 4782 :     const auto _Object_count = static_cast<size_t>(_Last_ptr - _First_ptr);

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	8b c1		 mov	 eax, ecx
  0000d	c1 f8 02	 sar	 eax, 2

; 4783 :     const auto _First_ch     = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 4784 :     const auto _Last_ch      = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last_ptr));
; 4785 :     const auto _Byte_count   = static_cast<size_t>(_Last_ch - _First_ch);
; 4786 :     return _STD _Copy_memmove_tail(_First_ch, _STD move(_Dest), _Byte_count, _Object_count);

  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00015	52		 push	 edx
  00016	e8 00 00 00 00	 call	 ??$_Copy_memmove_tail@PAPAVCSnowParticle@@@std@@YAPAPAVCSnowParticle@@QBDQAPAV1@II@Z ; std::_Copy_memmove_tail<CSnowParticle * *>
  0001b	83 c4 10	 add	 esp, 16			; 00000010H

; 4787 : }

  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??$_Copy_memmove@PAPAVCSnowParticle@@PAPAV1@@std@@YAPAPAVCSnowParticle@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CSnowParticle * *,CSnowParticle * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCSnowParticle@@@?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@AAEPAPAVCSnowParticle@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
__Newsize$1$ = -12					; size = 4
tv652 = -8						; size = 4
tv650 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCSnowParticle@@@?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@AAEPAPAVCSnowParticle@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CSnowParticle *,std::allocator<CSnowParticle *> >::_Emplace_reallocate<CSnowParticle * const &>, COMDAT
; _this$ = ecx

; 860  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 861  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 862  :         _Alty& _Al        = _Getal();
; 863  :         auto& _My_data    = _Mypair._Myval2;
; 864  :         pointer& _Myfirst = _My_data._Myfirst;
; 865  :         pointer& _Mylast  = _My_data._Mylast;
; 866  : 
; 867  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 868  : 
; 869  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	2b d9		 sub	 ebx, ecx

; 870  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c1		 sub	 eax, ecx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 871  : 
; 872  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 09 01 00
	00		 je	 $LN123@Emplace_re

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 874  :         }
; 875  : 
; 876  :         const size_type _Newsize = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b d1		 sub	 edx, ecx

; 874  :         }
; 875  : 
; 876  :         const size_type _Newsize = _Oldsize + 1;

  00030	89 7d f4	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 fa 02	 sar	 edx, 2

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b ca		 mov	 ecx, edx
  0003d	d1 e9		 shr	 ecx, 1
  0003f	2b c1		 sub	 eax, ecx
  00041	3b d0		 cmp	 edx, eax
  00043	76 14		 jbe	 SHORT $LN8@Emplace_re

; 1997 :             return _Max; // geometric growth would overflow

  00045	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  0004a	c7 45 f8 fc ff
	ff ff		 mov	 DWORD PTR tv652[ebp], -4 ; fffffffcH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00057	eb 3d		 jmp	 SHORT $LN121@Emplace_re
$LN8@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00059	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  0005c	8b cf		 mov	 ecx, edi
  0005e	3b c7		 cmp	 eax, edi
  00060	0f 43 c8	 cmovae	 ecx, eax
  00063	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00069	0f 87 c7 00 00
	00		 ja	 $LN124@Emplace_re

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  0006f	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  00076	89 45 f8	 mov	 DWORD PTR tv652[ebp], eax

; 227  :     if (_Bytes == 0) {

  00079	85 c0		 test	 eax, eax
  0007b	75 04		 jne	 SHORT $LN23@Emplace_re

; 228  :         return nullptr;

  0007d	33 ff		 xor	 edi, edi
  0007f	eb 1a		 jmp	 SHORT $LN22@Emplace_re
$LN23@Emplace_re:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00081	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00086	72 08		 jb	 SHORT $LN24@Emplace_re

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0008e	eb 06		 jmp	 SHORT $LN121@Emplace_re
$LN24@Emplace_re:

; 136  :         return ::operator new(_Bytes);

  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN121@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 885  :         _Alty_traits::construct(_Al, _STD _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00096	8b f8		 mov	 edi, eax
  00098	83 c4 04	 add	 esp, 4
$LN22@Emplace_re:
  0009b	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0009e	8d 0c 9f	 lea	 ecx, DWORD PTR [edi+ebx*4]

; 886  :         _Constructed_first = _Newvec + _Whereoff;
; 887  : 
; 888  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000a1	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  000a4	89 4d fc	 mov	 DWORD PTR tv650[ebp], ecx
  000a7	8b 00		 mov	 eax, DWORD PTR [eax]
  000a9	89 01		 mov	 DWORD PTR [ecx], eax
  000ab	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000ae	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000b0	3b d8		 cmp	 ebx, eax
  000b2	75 07		 jne	 SHORT $LN3@Emplace_re

; 894  :         } else { // provide basic guarantee

  000b4	8b 5d fc	 mov	 ebx, DWORD PTR tv650[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000b7	8b d7		 mov	 edx, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 894  :         } else { // provide basic guarantee

  000b9	eb 16		 jmp	 SHORT $LN52@Emplace_re
$LN3@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000bb	57		 push	 edi
  000bc	53		 push	 ebx
  000bd	51		 push	 ecx
  000be	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCSnowParticle@@PAPAV1@@std@@YAPAPAVCSnowParticle@@PAPAV1@00@Z ; std::_Copy_memmove<CSnowParticle * *,CSnowParticle * *>
  000c3	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000c6	8b cb		 mov	 ecx, ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000c8	8b 5d fc	 mov	 ebx, DWORD PTR tv650[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000cb	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000ce	8d 53 04	 lea	 edx, DWORD PTR [ebx+4]
$LN52@Emplace_re:

; 898  :         }
; 899  : 
; 900  :         _Guard._New_begin = nullptr;

  000d1	52		 push	 edx
  000d2	50		 push	 eax
  000d3	51		 push	 ecx
  000d4	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCSnowParticle@@PAPAV1@@std@@YAPAPAVCSnowParticle@@PAPAV1@00@Z ; std::_Copy_memmove<CSnowParticle * *,CSnowParticle * *>

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  000d9	8b 06		 mov	 eax, DWORD PTR [esi]

; 898  :         }
; 899  : 
; 900  :         _Guard._New_begin = nullptr;

  000db	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  000de	85 c0		 test	 eax, eax
  000e0	74 2c		 je	 SHORT $LN72@Emplace_re

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2056 :             _ASAN_VECTOR_REMOVE;
; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e2	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000e5	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e7	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000ea	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f0	72 12		 jb	 SHORT $LN83@Emplace_re

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f2	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f5	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f8	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fa	83 c0 fc	 add	 eax, -4			; fffffffcH
  000fd	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00100	77 2a		 ja	 SHORT $LN80@Emplace_re

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00102	8b c2		 mov	 eax, edx
$LN83@Emplace_re:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00104	51		 push	 ecx
  00105	50		 push	 eax
  00106	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0010b	83 c4 08	 add	 esp, 8
$LN72@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2061 :         _Mylast  = _Newvec + _Newsize;

  0010e	8b 45 f4	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  00111	89 3e		 mov	 DWORD PTR [esi], edi
  00113	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]

; 901  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 902  :         return _Newvec + _Whereoff;

  00116	8b c3		 mov	 eax, ebx

; 2061 :         _Mylast  = _Newvec + _Newsize;

  00118	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  0011b	8b 4d f8	 mov	 ecx, DWORD PTR tv652[ebp]
  0011e	03 cf		 add	 ecx, edi

; 903  :     }

  00120	5f		 pop	 edi

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  00121	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 903  :     }

  00124	5e		 pop	 esi
  00125	5b		 pop	 ebx
  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c2 08 00	 ret	 8
$LN80@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0012c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN123@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 873  :             _Xlength();

  00131	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@CAXXZ ; std::vector<CSnowParticle *,std::allocator<CSnowParticle *> >::_Xlength
$LN124@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  00136	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN120@Emplace_re:
  0013b	cc		 int	 3
??$_Emplace_reallocate@ABQAVCSnowParticle@@@?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@AAEPAPAVCSnowParticle@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CSnowParticle *,std::allocator<CSnowParticle *> >::_Emplace_reallocate<CSnowParticle * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??__F?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CSnowParticle::ms_kVct_SnowParticlePool'', COMDAT
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A
  00005	85 c0		 test	 eax, eax
  00007	74 4d		 je	 SHORT $LN7@ms_kVct_Sn

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A+8
  0000f	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00011	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00014	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001a	72 12		 jb	 SHORT $LN26@ms_kVct_Sn

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001f	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00022	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00024	83 c0 fc	 add	 eax, -4			; fffffffcH
  00027	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002a	77 2b		 ja	 SHORT $LN23@ms_kVct_Sn

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002c	8b c2		 mov	 eax, edx
$LN26@ms_kVct_Sn:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0002e	51		 push	 ecx
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00035	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00038	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A, 0

; 2081 :             _Mylast  = nullptr;

  00042	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A+4, 0

; 2082 :             _Myend   = nullptr;

  0004c	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A+8, 0
$LN7@ms_kVct_Sn:
  00056	c3		 ret	 0
$LN23@ms_kVct_Sn:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00057	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??__F?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CSnowParticle::ms_kVct_SnowParticlePool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp
;	COMDAT ??__E?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A@@YAXXZ PROC ; `dynamic initializer for 'CSnowParticle::ms_kVct_SnowParticlePool'', COMDAT

; 6    : std::vector<CSnowParticle*> CSnowParticle::ms_kVct_SnowParticlePool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A@@YAXXZ ; `dynamic atexit destructor for 'CSnowParticle::ms_kVct_SnowParticlePool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A@@YAXXZ ENDP ; `dynamic initializer for 'CSnowParticle::ms_kVct_SnowParticlePool''
text$di	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@CAXXZ PROC ; std::vector<CSnowParticle *,std::allocator<CSnowParticle *> >::_Xlength, COMDAT

; 2169 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@CAXXZ ENDP ; std::vector<CSnowParticle *,std::allocator<CSnowParticle *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp
;	COMDAT ?GetVerticies@CSnowParticle@@QAEXAAUSParticleVertex@@000@Z
_TEXT	SEGMENT
_rv3Vertex1$ = 8					; size = 4
_rv3Vertex2$ = 12					; size = 4
_rv3Vertex3$ = 16					; size = 4
_rv3Vertex4$ = 20					; size = 4
?GetVerticies@CSnowParticle@@QAEXAAUSParticleVertex@@000@Z PROC ; CSnowParticle::GetVerticies, COMDAT
; _this$ = ecx

; 37   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00003	f3 0f 10 41 18	 movss	 xmm0, DWORD PTR [ecx+24]
  00008	f3 0f 5c 41 30	 subss	 xmm0, DWORD PTR [ecx+48]
  0000d	f3 0f 10 51 1c	 movss	 xmm2, DWORD PTR [ecx+28]
  00012	f3 0f 5c 51 34	 subss	 xmm2, DWORD PTR [ecx+52]
  00017	f3 0f 10 49 20	 movss	 xmm1, DWORD PTR [ecx+32]
  0001c	f3 0f 5c 49 38	 subss	 xmm1, DWORD PTR [ecx+56]
  00021	f3 0f 5c 41 24	 subss	 xmm0, DWORD PTR [ecx+36]
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp

; 38   : 	rv3Vertex1.v3Pos = m_v3Position - m_v3Cross - m_v3Up;

  00026	8b 45 08	 mov	 eax, DWORD PTR _rv3Vertex1$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00029	f3 0f 5c 51 28	 subss	 xmm2, DWORD PTR [ecx+40]
  0002e	f3 0f 5c 49 2c	 subss	 xmm1, DWORD PTR [ecx+44]
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp

; 38   : 	rv3Vertex1.v3Pos = m_v3Position - m_v3Cross - m_v3Up;

  00033	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00037	f3 0f 11 50 04	 movss	 DWORD PTR [eax+4], xmm2
  0003c	f3 0f 11 48 08	 movss	 DWORD PTR [eax+8], xmm1

; 39   : 	rv3Vertex1.u = 0.0f;

  00041	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 40   : 	rv3Vertex1.v = 0.0f;

  00048	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0004f	f3 0f 10 41 18	 movss	 xmm0, DWORD PTR [ecx+24]
  00054	f3 0f 58 41 30	 addss	 xmm0, DWORD PTR [ecx+48]
  00059	f3 0f 10 51 34	 movss	 xmm2, DWORD PTR [ecx+52]
  0005e	f3 0f 58 51 1c	 addss	 xmm2, DWORD PTR [ecx+28]
  00063	f3 0f 10 49 20	 movss	 xmm1, DWORD PTR [ecx+32]
  00068	f3 0f 58 49 38	 addss	 xmm1, DWORD PTR [ecx+56]

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0006d	f3 0f 5c 41 24	 subss	 xmm0, DWORD PTR [ecx+36]
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp

; 42   : 	rv3Vertex2.v3Pos = m_v3Position + m_v3Cross - m_v3Up;

  00072	8b 45 0c	 mov	 eax, DWORD PTR _rv3Vertex2$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00075	f3 0f 5c 51 28	 subss	 xmm2, DWORD PTR [ecx+40]
  0007a	f3 0f 5c 49 2c	 subss	 xmm1, DWORD PTR [ecx+44]
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp

; 42   : 	rv3Vertex2.v3Pos = m_v3Position + m_v3Cross - m_v3Up;

  0007f	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00083	f3 0f 11 50 04	 movss	 DWORD PTR [eax+4], xmm2
  00088	f3 0f 11 48 08	 movss	 DWORD PTR [eax+8], xmm1

; 43   : 	rv3Vertex2.u = 1.0f;

  0008d	c7 40 0c 00 00
	80 3f		 mov	 DWORD PTR [eax+12], 1065353216 ; 3f800000H

; 44   : 	rv3Vertex2.v = 0.0f;

  00094	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0009b	f3 0f 10 41 18	 movss	 xmm0, DWORD PTR [ecx+24]
  000a0	f3 0f 5c 41 30	 subss	 xmm0, DWORD PTR [ecx+48]
  000a5	f3 0f 10 51 1c	 movss	 xmm2, DWORD PTR [ecx+28]
  000aa	f3 0f 5c 51 34	 subss	 xmm2, DWORD PTR [ecx+52]
  000af	f3 0f 10 49 20	 movss	 xmm1, DWORD PTR [ecx+32]
  000b4	f3 0f 5c 49 38	 subss	 xmm1, DWORD PTR [ecx+56]

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  000b9	f3 0f 58 41 24	 addss	 xmm0, DWORD PTR [ecx+36]
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp

; 46   : 	rv3Vertex3.v3Pos = m_v3Position - m_v3Cross + m_v3Up;

  000be	8b 45 10	 mov	 eax, DWORD PTR _rv3Vertex3$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  000c1	f3 0f 58 51 28	 addss	 xmm2, DWORD PTR [ecx+40]
  000c6	f3 0f 58 49 2c	 addss	 xmm1, DWORD PTR [ecx+44]
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp

; 46   : 	rv3Vertex3.v3Pos = m_v3Position - m_v3Cross + m_v3Up;

  000cb	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  000cf	f3 0f 11 50 04	 movss	 DWORD PTR [eax+4], xmm2
  000d4	f3 0f 11 48 08	 movss	 DWORD PTR [eax+8], xmm1

; 47   : 	rv3Vertex3.u = 0.0f;

  000d9	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 48   : 	rv3Vertex3.v = 1.0f;

  000e0	c7 40 10 00 00
	80 3f		 mov	 DWORD PTR [eax+16], 1065353216 ; 3f800000H
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  000e7	f3 0f 10 41 18	 movss	 xmm0, DWORD PTR [ecx+24]
  000ec	f3 0f 10 51 34	 movss	 xmm2, DWORD PTR [ecx+52]
  000f1	f3 0f 10 49 20	 movss	 xmm1, DWORD PTR [ecx+32]
  000f6	f3 0f 58 41 30	 addss	 xmm0, DWORD PTR [ecx+48]
  000fb	f3 0f 58 51 1c	 addss	 xmm2, DWORD PTR [ecx+28]
  00100	f3 0f 58 49 38	 addss	 xmm1, DWORD PTR [ecx+56]
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp

; 50   : 	rv3Vertex4.v3Pos = m_v3Position + m_v3Cross + m_v3Up;

  00105	8b 45 14	 mov	 eax, DWORD PTR _rv3Vertex4$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00108	f3 0f 58 41 24	 addss	 xmm0, DWORD PTR [ecx+36]
  0010d	f3 0f 58 51 28	 addss	 xmm2, DWORD PTR [ecx+40]
  00112	f3 0f 58 49 2c	 addss	 xmm1, DWORD PTR [ecx+44]
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp

; 50   : 	rv3Vertex4.v3Pos = m_v3Position + m_v3Cross + m_v3Up;

  00117	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  0011b	f3 0f 11 50 04	 movss	 DWORD PTR [eax+4], xmm2
  00120	f3 0f 11 48 08	 movss	 DWORD PTR [eax+8], xmm1

; 51   : 	rv3Vertex4.u = 1.0f;

  00125	c7 40 0c 00 00
	80 3f		 mov	 DWORD PTR [eax+12], 1065353216 ; 3f800000H

; 52   : 	rv3Vertex4.v = 1.0f;

  0012c	c7 40 10 00 00
	80 3f		 mov	 DWORD PTR [eax+16], 1065353216 ; 3f800000H

; 53   : }

  00133	5d		 pop	 ebp
  00134	c2 10 00	 ret	 16			; 00000010H
?GetVerticies@CSnowParticle@@QAEXAAUSParticleVertex@@000@Z ENDP ; CSnowParticle::GetVerticies
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp
;	COMDAT ?Update@CSnowParticle@@QAEXMABUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
tv381 = -4						; size = 4
_fElapsedTime$ = 8					; size = 4
_c_rv3Pos$ = 12						; size = 4
?Update@CSnowParticle@@QAEXMABUD3DXVECTOR3@@@Z PROC	; CSnowParticle::Update, COMDAT
; _this$ = ecx

; 20   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00004	f3 0f 10 55 08	 movss	 xmm2, DWORD PTR _fElapsedTime$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp

; 20   : {

  00009	56		 push	 esi
  0000a	8b f1		 mov	 esi, ecx
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  0000c	0f 28 c2	 movaps	 xmm0, xmm2
  0000f	0f 28 ca	 movaps	 xmm1, xmm2
  00012	f3 0f 59 46 10	 mulss	 xmm0, DWORD PTR [esi+16]
  00017	f3 0f 59 4e 14	 mulss	 xmm1, DWORD PTR [esi+20]
  0001c	f3 0f 59 56 0c	 mulss	 xmm2, DWORD PTR [esi+12]

; 205  :     y += v.y;

  00021	f3 0f 58 46 1c	 addss	 xmm0, DWORD PTR [esi+28]

; 206  :     z += v.z;

  00026	f3 0f 58 4e 20	 addss	 xmm1, DWORD PTR [esi+32]
  0002b	f3 0f 58 56 18	 addss	 xmm2, DWORD PTR [esi+24]
  00030	f3 0f 11 46 1c	 movss	 DWORD PTR [esi+28], xmm0
  00035	f3 0f 11 4e 20	 movss	 DWORD PTR [esi+32], xmm1
  0003a	f3 0f 11 56 18	 movss	 DWORD PTR [esi+24], xmm2
  0003f	f3 0f 10 46 40	 movss	 xmm0, DWORD PTR [esi+64]
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 798  :             return (float)sin(_X);

  00044	0f 5a c0	 cvtps2pd xmm0, xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  00047	f3 0f 11 55 fc	 movss	 DWORD PTR tv381[ebp], xmm2
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 798  :             return (float)sin(_X);

  0004c	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
  00051	0f 57 c9	 xorps	 xmm1, xmm1
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp

; 27   : 	if (m_v3Position.z < c_rv3Pos.z - 500.0f)

  00054	8b 45 0c	 mov	 eax, DWORD PTR _c_rv3Pos$[ebp]
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 798  :             return (float)sin(_X);

  00057	f2 0f 5a c8	 cvtsd2ss xmm1, xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp

; 25   : 	m_fcurRadian += m_fPeriod * fElapsedTime;

  0005b	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fElapsedTime$[ebp]
  00060	0f 28 d1	 movaps	 xmm2, xmm1
  00063	f3 0f 59 46 3c	 mulss	 xmm0, DWORD PTR [esi+60]
  00068	f3 0f 59 56 30	 mulss	 xmm2, DWORD PTR [esi+48]
  0006d	f3 0f 59 4e 34	 mulss	 xmm1, DWORD PTR [esi+52]
  00072	f3 0f 5e 15 00
	00 00 00	 divss	 xmm2, DWORD PTR __real@41200000
  0007a	f3 0f 5e 0d 00
	00 00 00	 divss	 xmm1, DWORD PTR __real@41200000
  00082	f3 0f 58 46 40	 addss	 xmm0, DWORD PTR [esi+64]
  00087	f3 0f 58 55 fc	 addss	 xmm2, DWORD PTR tv381[ebp]
  0008c	f3 0f 58 4e 1c	 addss	 xmm1, DWORD PTR [esi+28]
  00091	f3 0f 11 46 40	 movss	 DWORD PTR [esi+64], xmm0
  00096	f3 0f 11 56 18	 movss	 DWORD PTR [esi+24], xmm2
  0009b	f3 0f 11 4e 1c	 movss	 DWORD PTR [esi+28], xmm1

; 27   : 	if (m_v3Position.z < c_rv3Pos.z - 500.0f)

  000a0	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  000a5	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@43fa0000
  000ad	0f 2f 46 20	 comiss	 xmm0, DWORD PTR [esi+32]
  000b1	77 29		 ja	 SHORT $LN34@Update

; 29   : 	else if (abs(m_v3Position.x - c_rv3Pos.x) > c_fSnowDistance)

  000b3	f3 0f 5c 10	 subss	 xmm2, DWORD PTR [eax]
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 720  :             return (float)fabs(_X);

  000b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp

; 29   : 	else if (abs(m_v3Position.x - c_rv3Pos.x) > c_fSnowDistance)

  000bf	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@4788b800
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 720  :             return (float)fabs(_X);

  000c7	0f 54 d0	 andps	 xmm2, xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp

; 29   : 	else if (abs(m_v3Position.x - c_rv3Pos.x) > c_fSnowDistance)

  000ca	0f 2f d3	 comiss	 xmm2, xmm3
  000cd	77 0d		 ja	 SHORT $LN34@Update

; 31   : 	else if (abs(m_v3Position.y - c_rv3Pos.y) > c_fSnowDistance)

  000cf	f3 0f 5c 48 04	 subss	 xmm1, DWORD PTR [eax+4]
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 720  :             return (float)fabs(_X);

  000d4	0f 54 c8	 andps	 xmm1, xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp

; 31   : 	else if (abs(m_v3Position.y - c_rv3Pos.y) > c_fSnowDistance)

  000d7	0f 2f cb	 comiss	 xmm1, xmm3
  000da	76 03		 jbe	 SHORT $LN6@Update
$LN34@Update:

; 32   : 		m_bActivate = false;

  000dc	c6 06 00	 mov	 BYTE PTR [esi], 0
$LN6@Update:
  000df	5e		 pop	 esi

; 33   : }

  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c2 08 00	 ret	 8
?Update@CSnowParticle@@QAEXMABUD3DXVECTOR3@@@Z ENDP	; CSnowParticle::Update
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp
;	COMDAT ?IsActivate@CSnowParticle@@QAE_NXZ
_TEXT	SEGMENT
?IsActivate@CSnowParticle@@QAE_NXZ PROC			; CSnowParticle::IsActivate, COMDAT
; _this$ = ecx

; 16   : 	return m_bActivate;

  00000	8a 01		 mov	 al, BYTE PTR [ecx]

; 17   : }

  00002	c3		 ret	 0
?IsActivate@CSnowParticle@@QAE_NXZ ENDP			; CSnowParticle::IsActivate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp
;	COMDAT ?SetCameraVertex@CSnowParticle@@QAEXABUD3DXVECTOR3@@0@Z
_TEXT	SEGMENT
_rv3Up$ = 8						; size = 4
_rv3Cross$ = 12						; size = 4
?SetCameraVertex@CSnowParticle@@QAEXABUD3DXVECTOR3@@0@Z PROC ; CSnowParticle::SetCameraVertex, COMDAT
; _this$ = ecx

; 9    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 10   : 	m_v3Up = rv3Up*m_fHalfWidth;

  00003	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00008	8b 45 08	 mov	 eax, DWORD PTR _rv3Up$[ebp]
  0000b	0f 28 d1	 movaps	 xmm2, xmm1
  0000e	0f 28 c1	 movaps	 xmm0, xmm1
  00011	f3 0f 59 08	 mulss	 xmm1, DWORD PTR [eax]
  00015	f3 0f 59 50 04	 mulss	 xmm2, DWORD PTR [eax+4]
  0001a	f3 0f 59 40 08	 mulss	 xmm0, DWORD PTR [eax+8]
  0001f	8b 45 0c	 mov	 eax, DWORD PTR _rv3Cross$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp

; 10   : 	m_v3Up = rv3Up*m_fHalfWidth;

  00022	f3 0f 11 49 24	 movss	 DWORD PTR [ecx+36], xmm1
  00027	f3 0f 11 51 28	 movss	 DWORD PTR [ecx+40], xmm2
  0002c	f3 0f 11 41 2c	 movss	 DWORD PTR [ecx+44], xmm0

; 11   : 	m_v3Cross = rv3Cross*m_fHalfHeight;

  00031	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00036	0f 28 d1	 movaps	 xmm2, xmm1
  00039	0f 28 c1	 movaps	 xmm0, xmm1
  0003c	f3 0f 59 08	 mulss	 xmm1, DWORD PTR [eax]
  00040	f3 0f 59 50 04	 mulss	 xmm2, DWORD PTR [eax+4]
  00045	f3 0f 59 40 08	 mulss	 xmm0, DWORD PTR [eax+8]
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp

; 11   : 	m_v3Cross = rv3Cross*m_fHalfHeight;

  0004a	f3 0f 11 49 30	 movss	 DWORD PTR [ecx+48], xmm1
  0004f	f3 0f 11 51 34	 movss	 DWORD PTR [ecx+52], xmm2
  00054	f3 0f 11 41 38	 movss	 DWORD PTR [ecx+56], xmm0

; 12   : }

  00059	5d		 pop	 ebp
  0005a	c2 08 00	 ret	 8
?SetCameraVertex@CSnowParticle@@QAEXABUD3DXVECTOR3@@0@Z ENDP ; CSnowParticle::SetCameraVertex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp
;	COMDAT ?Init@CSnowParticle@@QAEXABUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
tv231 = -16						; size = 8
tv241 = -8						; size = 8
_fRot$ = -4						; size = 4
_c_rv3Pos$ = 8						; size = 4
tv152 = 8						; size = 4
tv183 = 8						; size = 4
?Init@CSnowParticle@@QAEXABUD3DXVECTOR3@@@Z PROC	; CSnowParticle::Init, COMDAT
; _this$ = ecx

; 56   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	57		 push	 edi

; 57   : 	float fRot = frandom(0.0f, 36000.0f) / 100.0f;

  00008	83 ec 08	 sub	 esp, 8
  0000b	8b f9		 mov	 edi, ecx
  0000d	c7 44 24 04 00
	a0 0c 47	 mov	 DWORD PTR [esp+4], 1192009728 ; 470ca000H
  00015	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  0001c	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  00021	d8 35 00 00 00
	00		 fdiv	 DWORD PTR __real@42c80000

; 58   : 	float fDistance = frandom(0.0f, c_fSnowDistance) / 10.0f;

  00027	c7 44 24 04 00
	b8 88 47	 mov	 DWORD PTR [esp+4], 1200142336 ; 4788b800H
  0002f	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  00036	d9 5d fc	 fstp	 DWORD PTR _fRot$[ebp]

; 59   : 
; 60   : 	m_v3Position.x = c_rv3Pos.x + fDistance*sin((double)D3DXToRadian(fRot));

  00039	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _fRot$[ebp]
  0003e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  00046	0f 5a c0	 cvtps2pd xmm0, xmm0
  00049	f2 0f 11 45 f8	 movsd	 QWORD PTR tv241[ebp], xmm0
  0004e	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  00053	d8 35 00 00 00
	00		 fdiv	 DWORD PTR __real@41200000
  00059	f2 0f 10 45 f8	 movsd	 xmm0, QWORD PTR tv241[ebp]
  0005e	dd 5d f0	 fstp	 QWORD PTR tv231[ebp]
  00061	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
  00066	8b 75 08	 mov	 esi, DWORD PTR _c_rv3Pos$[ebp]
  00069	f2 0f 59 45 f0	 mulsd	 xmm0, QWORD PTR tv231[ebp]
  0006e	f3 0f 10 0e	 movss	 xmm1, DWORD PTR [esi]
  00072	0f 5a c9	 cvtps2pd xmm1, xmm1
  00075	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00079	0f 57 c9	 xorps	 xmm1, xmm1
  0007c	f2 0f 5a c8	 cvtsd2ss xmm1, xmm0

; 61   : 	m_v3Position.y = c_rv3Pos.y + fDistance*cos((double)D3DXToRadian(fRot));

  00080	f2 0f 10 45 f8	 movsd	 xmm0, QWORD PTR tv241[ebp]
  00085	f3 0f 11 4f 18	 movss	 DWORD PTR [edi+24], xmm1
  0008a	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
  0008f	f3 0f 10 4e 04	 movss	 xmm1, DWORD PTR [esi+4]
  00094	f2 0f 59 45 f0	 mulsd	 xmm0, QWORD PTR tv231[ebp]

; 62   : 	m_v3Position.z = c_rv3Pos.z + frandom(1500.0f, 2000.0f);

  00099	c7 44 24 04 00
	00 fa 44	 mov	 DWORD PTR [esp+4], 1157234688 ; 44fa0000H
  000a1	0f 5a c9	 cvtps2pd xmm1, xmm1
  000a4	c7 04 24 00 80
	bb 44		 mov	 DWORD PTR [esp], 1153138688 ; 44bb8000H
  000ab	f2 0f 58 c1	 addsd	 xmm0, xmm1
  000af	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000b3	f3 0f 11 47 1c	 movss	 DWORD PTR [edi+28], xmm0
  000b8	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  000bd	f3 0f 11 45 08	 movss	 DWORD PTR tv152[ebp], xmm0
  000c2	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  000c7	d8 45 08	 fadd	 DWORD PTR tv152[ebp]

; 63   : 	m_v3Velocity.x = 0.0f;
; 64   : 	m_v3Velocity.y = 0.0f;
; 65   : 	m_v3Velocity.z = frandom(-50.0f, -200.0f);

  000ca	c7 44 24 04 00
	00 48 c3	 mov	 DWORD PTR [esp+4], -1018691584 ; c3480000H
  000d2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
  000d9	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  000e0	c7 04 24 00 00
	48 c2		 mov	 DWORD PTR [esp], -1035468800 ; c2480000H
  000e7	d9 5f 20	 fstp	 DWORD PTR [edi+32]
  000ea	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  000ef	d9 5f 14	 fstp	 DWORD PTR [edi+20]

; 66   : 	m_fHalfWidth = frandom(2.0f, 7.0f);

  000f2	c7 44 24 04 00
	00 e0 40	 mov	 DWORD PTR [esp+4], 1088421888 ; 40e00000H
  000fa	c7 04 24 00 00
	00 40		 mov	 DWORD PTR [esp], 1073741824 ; 40000000H
  00101	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  00106	d9 5d 08	 fstp	 DWORD PTR tv183[ebp]
  00109	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR tv183[ebp]

; 67   : 	m_fHalfHeight = m_fHalfWidth;
; 68   : 	m_bActivate = true;
; 69   : 	m_bChangedSize = false;
; 70   : 
; 71   : 	m_fPeriod = frandom(1.5f, 5.0f);

  0010e	c7 44 24 04 00
	00 a0 40	 mov	 DWORD PTR [esp+4], 1084227584 ; 40a00000H
  00116	f3 0f 11 47 04	 movss	 DWORD PTR [edi+4], xmm0
  0011b	f3 0f 11 47 08	 movss	 DWORD PTR [edi+8], xmm0
  00120	66 c7 07 01 00	 mov	 WORD PTR [edi], 1
  00125	c7 04 24 00 00
	c0 3f		 mov	 DWORD PTR [esp], 1069547520 ; 3fc00000H
  0012c	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  00131	d9 5f 3c	 fstp	 DWORD PTR [edi+60]

; 72   : 	m_fcurRadian = frandom(-1.6f, 1.6f);

  00134	c7 44 24 04 cd
	cc cc 3f	 mov	 DWORD PTR [esp+4], 1070386381 ; 3fcccccdH
  0013c	c7 04 24 cd cc
	cc bf		 mov	 DWORD PTR [esp], -1077097267 ; bfcccccdH
  00143	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  00148	d9 5f 40	 fstp	 DWORD PTR [edi+64]

; 73   : 	m_fAmplitude = frandom(1.0f, 3.0f);

  0014b	c7 44 24 04 00
	00 40 40	 mov	 DWORD PTR [esp+4], 1077936128 ; 40400000H
  00153	c7 04 24 00 00
	80 3f		 mov	 DWORD PTR [esp], 1065353216 ; 3f800000H
  0015a	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  0015f	83 c4 08	 add	 esp, 8
  00162	d9 5f 44	 fstp	 DWORD PTR [edi+68]
  00165	5f		 pop	 edi
  00166	5e		 pop	 esi

; 74   : }

  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c2 04 00	 ret	 4
?Init@CSnowParticle@@QAEXABUD3DXVECTOR3@@@Z ENDP	; CSnowParticle::Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp
;	COMDAT ?DestroyPool@CSnowParticle@@SAXXZ
_TEXT	SEGMENT
?DestroyPool@CSnowParticle@@SAXXZ PROC			; CSnowParticle::DestroyPool, COMDAT
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00000	a1 04 00 00 00	 mov	 eax, DWORD PTR ?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A+4
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp

; 94   : {

  00005	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00006	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A
  0000c	3b f0		 cmp	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h

; 113  : 	for (auto i = container.begin(); i != container.end(); ++i)

  0000e	74 33		 je	 SHORT $LN44@DestroyPoo
$LL6@DestroyPoo:

; 114  : 	{
; 115  : 		delete* i;

  00010	8b 06		 mov	 eax, DWORD PTR [esi]
  00012	85 c0		 test	 eax, eax
  00014	74 0b		 je	 SHORT $LN41@DestroyPoo
  00016	6a 48		 push	 72			; 00000048H
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001e	83 c4 08	 add	 esp, 8
$LN41@DestroyPoo:

; 116  : 		*i = NULL;

  00021	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 82   :         ++_Ptr;

  00027	83 c6 04	 add	 esi, 4

; 166  :         return _Ptr == _Right._Ptr;

  0002a	a1 04 00 00 00	 mov	 eax, DWORD PTR ?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A+4
  0002f	3b f0		 cmp	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h

; 113  : 	for (auto i = container.begin(); i != container.end(); ++i)

  00031	75 dd		 jne	 SHORT $LL6@DestroyPoo
  00033	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00039	3b f0		 cmp	 esi, eax
  0003b	74 06		 je	 SHORT $LN44@DestroyPoo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0003d	89 35 04 00 00
	00		 mov	 DWORD PTR ?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A+4, esi
$LN44@DestroyPoo:
  00043	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp

; 96   : }

  00044	c3		 ret	 0
?DestroyPool@CSnowParticle@@SAXXZ ENDP			; CSnowParticle::DestroyPool
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp
;	COMDAT ?Delete@CSnowParticle@@SAXPAV1@@Z
_TEXT	SEGMENT
_pSnowParticle$ = 8					; size = 4
?Delete@CSnowParticle@@SAXPAV1@@Z PROC			; CSnowParticle::Delete, COMDAT

; 89   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  00003	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A+4
  00009	3b 0d 08 00 00
	00		 cmp	 ecx, DWORD PTR ?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A+8
  0000f	74 0e		 je	 SHORT $LN6@Delete

; 845  :             _STD _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00011	8b 45 08	 mov	 eax, DWORD PTR _pSnowParticle$[ebp]
  00014	89 01		 mov	 DWORD PTR [ecx], eax

; 846  :         } else {
; 847  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 848  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 849  :             _ASAN_VECTOR_RELEASE_GUARD;
; 850  :         }
; 851  : 
; 852  :         _Orphan_range(_Mylast, _Mylast);
; 853  :         _Ty& _Result = *_Mylast;
; 854  :         ++_Mylast;

  00016	83 05 04 00 00
	00 04		 add	 DWORD PTR ?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A+4, 4
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp

; 91   : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
$LN6@Delete:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 833  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0001f	8d 45 08	 lea	 eax, DWORD PTR _pSnowParticle$[ebp]
  00022	50		 push	 eax
  00023	51		 push	 ecx
  00024	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A ; CSnowParticle::ms_kVct_SnowParticlePool
  00029	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCSnowParticle@@@?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@AAEPAPAVCSnowParticle@@QAPAV2@ABQAV2@@Z ; std::vector<CSnowParticle *,std::allocator<CSnowParticle *> >::_Emplace_reallocate<CSnowParticle * const &>
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp

; 91   : }

  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
?Delete@CSnowParticle@@SAXPAV1@@Z ENDP			; CSnowParticle::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp
;	COMDAT ?New@CSnowParticle@@SAPAV1@XZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
?New@CSnowParticle@@SAPAV1@XZ PROC			; CSnowParticle::New, COMDAT

; 77   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  00004	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A+4
  0000a	39 0d 00 00 00
	00		 cmp	 DWORD PTR ?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A, ecx
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp

; 78   : 	if (ms_kVct_SnowParticlePool.empty())

  00010	75 22		 jne	 SHORT $LN2@New

; 79   : 	{
; 80   : 		return new CSnowParticle;

  00012	6a 48		 push	 72			; 00000048H
  00014	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00019	83 c4 04	 add	 esp, 4
  0001c	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  0001f	85 c0		 test	 eax, eax
  00021	74 0b		 je	 SHORT $LN4@New
  00023	8b c8		 mov	 ecx, eax
  00025	e8 00 00 00 00	 call	 ??0CSnowParticle@@QAE@XZ ; CSnowParticle::CSnowParticle

; 86   : }

  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
$LN4@New:

; 79   : 	{
; 80   : 		return new CSnowParticle;

  0002e	33 c0		 xor	 eax, eax

; 86   : }

  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
$LN2@New:

; 81   : 	}
; 82   : 
; 83   : 	CSnowParticle * pParticle = ms_kVct_SnowParticlePool.back();

  00034	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1744 :         --_Mylast;

  00037	83 c1 fc	 add	 ecx, -4			; fffffffcH
  0003a	89 0d 04 00 00
	00		 mov	 DWORD PTR ?ms_kVct_SnowParticlePool@CSnowParticle@@2V?$vector@PAVCSnowParticle@@V?$allocator@PAVCSnowParticle@@@std@@@std@@A+4, ecx
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp

; 86   : }

  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
?New@CSnowParticle@@SAPAV1@XZ ENDP			; CSnowParticle::New
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp
;	COMDAT ??1CSnowParticle@@QAE@XZ
_TEXT	SEGMENT
??1CSnowParticle@@QAE@XZ PROC				; CSnowParticle::~CSnowParticle, COMDAT
; _this$ = ecx

; 103  : }

  00000	c2 00 00	 ret	 0
??1CSnowParticle@@QAE@XZ ENDP				; CSnowParticle::~CSnowParticle
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\SnowParticle.cpp
;	COMDAT ??0CSnowParticle@@QAE@XZ
_TEXT	SEGMENT
??0CSnowParticle@@QAE@XZ PROC				; CSnowParticle::CSnowParticle, COMDAT
; _this$ = ecx

; 100  : }

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0CSnowParticle@@QAE@XZ ENDP				; CSnowParticle::CSnowParticle
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 182  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 183  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 184  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 185  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 136  :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 186  :         _Throw_bad_array_new_length(); // add overflow
; 187  :     }
; 188  : 
; 189  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 136  :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 191  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 192  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 193  : 
; 194  : #ifdef _DEBUG
; 195  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 196  : #endif // defined(_DEBUG)
; 197  :     return _Ptr;
; 198  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 107  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 108  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN18@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN18@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 144  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 145  :     }

  00003	8b c1		 mov	 eax, ecx

; 66   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 67   :     {
; 68   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 144  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 145  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN13@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN8@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 96   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 97   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 92   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 73   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 75   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
