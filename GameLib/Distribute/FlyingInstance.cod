; Listing generated by Microsoft (R) Optimizing Compiler Version 19.37.32822.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\GameLib\Distribute\FlyingInstance.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPool@VCFlyingInstance@@@@6B@	; CDynamicPool<CFlyingInstance>::`vftable'
PUBLIC	??_G?$CDynamicPool@VCFlyingInstance@@@@UAEPAXI@Z ; CDynamicPool<CFlyingInstance>::`scalar deleting destructor'
PUBLIC	??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`scalar deleting destructor'
PUBLIC	??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPool@VCFlyingInstance@@@@6B@	; CDynamicPool<CFlyingInstance>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPool@VCFlyingInstance@@@@@8	; CDynamicPool<CFlyingInstance> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPool@VCFlyingInstance@@@@8	; CDynamicPool<CFlyingInstance>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPool@VCFlyingInstance@@@@8	; CDynamicPool<CFlyingInstance>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPool@VCFlyingInstance@@@@8 ; CDynamicPool<CFlyingInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`scalar deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPool@VCFlyingInstance@@@@UAEPAXI@Z:PROC ; CDynamicPool<CFlyingInstance>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_E?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`vector deleting destructor'
;	COMDAT ??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPool@VCFlyingInstance@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPool@VCFlyingInstance@@@@8 DD FLAT:??_R0?AV?$CDynamicPool@VCFlyingInstance@@@@@8 ; CDynamicPool<CFlyingInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPool@VCFlyingInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPool@VCFlyingInstance@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPool@VCFlyingInstance@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPool@VCFlyingInstance@@@@8 ; CDynamicPool<CFlyingInstance>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPool@VCFlyingInstance@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPool@VCFlyingInstance@@@@8 DD 00H	; CDynamicPool<CFlyingInstance>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPool@VCFlyingInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPool@VCFlyingInstance@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPool@VCFlyingInstance@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPool<CFlyingInstance> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPool@VCFlyingInstance@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPool@VCFlyingInstance@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPool@VCFlyingInstance@@@@6B@ DD 00H	; CDynamicPool<CFlyingInstance>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPool@VCFlyingInstance@@@@@8
	DD	FLAT:??_R3?$CDynamicPool@VCFlyingInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDe'
	DB	'corator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDec'
	DB	'orator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpd'
	DB	'ateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@N'
	DB	'EffectUpdateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEff'
	DB	'ectUpdateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffe'
	DB	'ctUpdateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecora'
	DB	'tor@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDeco'
	DB	'rator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
;	COMDAT ??_7?$CDynamicPool@VCFlyingInstance@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPool@VCFlyingInstance@@@@6B@ DD FLAT:??_R4?$CDynamicPool@VCFlyingInstance@@@@6B@ ; CDynamicPool<CFlyingInstance>::`vftable'
	DD	FLAT:??_E?$CDynamicPool@VCFlyingInstance@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0D3DXMATRIX@@QAE@XZ				; D3DXMATRIX::D3DXMATRIX
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Throw_tree_length_error@std@@YAXXZ		; std::_Throw_tree_length_error
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?SafeRotationNormalizedArc@@YA?AUD3DXQUATERNION@@ABUD3DXVECTOR3@@0@Z ; SafeRotationNormalizedArc
PUBLIC	?square_distance_between_linesegment_and_point@@YAMABUD3DXVECTOR3@@00@Z ; square_distance_between_linesegment_and_point
PUBLIC	??1SpherePackCallback@@UAE@XZ			; SpherePackCallback::~SpherePackCallback
PUBLIC	?VisibilityCallback@SpherePackCallback@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z ; SpherePackCallback::VisibilityCallback
PUBLIC	?RayTraceCallback@SpherePackCallback@@UAEXABVVector3d@@0M0PAVSpherePack@@@Z ; SpherePackCallback::RayTraceCallback
PUBLIC	?RangeTestCallback@SpherePackCallback@@UAEXABVVector3d@@MPAVSpherePack@@W4ViewState@@@Z ; SpherePackCallback::RangeTestCallback
PUBLIC	?PointTest2dCallback@SpherePackCallback@@UAEXABVVector3d@@PAVSpherePack@@W4ViewState@@@Z ; SpherePackCallback::PointTest2dCallback
PUBLIC	??_GSpherePackCallback@@UAEPAXI@Z		; SpherePackCallback::`scalar deleting destructor'
PUBLIC	?Clear@CFlyingInstance@@QAEXXZ			; CFlyingInstance::Clear
PUBLIC	?SetDataPointer@CFlyingInstance@@QAEXPAVCFlyingData@@ABUD3DXVECTOR3@@@Z ; CFlyingInstance::SetDataPointer
PUBLIC	?SetFlyTarget@CFlyingInstance@@QAEXABVCFlyTarget@@@Z ; CFlyingInstance::SetFlyTarget
PUBLIC	??0CFlyingInstance@@QAE@XZ			; CFlyingInstance::CFlyingInstance
PUBLIC	??1CFlyingInstance@@UAE@XZ			; CFlyingInstance::~CFlyingInstance
PUBLIC	?Destroy@CFlyingInstance@@QAEXXZ		; CFlyingInstance::Destroy
PUBLIC	?Create@CFlyingInstance@@QAEXPAVCFlyingData@@ABUD3DXVECTOR3@@ABVCFlyTarget@@_N@Z ; CFlyingInstance::Create
PUBLIC	?Update@CFlyingInstance@@QAE_NXZ		; CFlyingInstance::Update
PUBLIC	?Render@CFlyingInstance@@QAEXXZ			; CFlyingInstance::Render
PUBLIC	?AdjustDirectionForHoming@CFlyingInstance@@QAEXABUD3DXVECTOR3@@@Z ; CFlyingInstance::AdjustDirectionForHoming
PUBLIC	?BuildAttachInstance@CFlyingInstance@@QAEXXZ	; CFlyingInstance::BuildAttachInstance
PUBLIC	?UpdateAttachInstance@CFlyingInstance@@QAEXXZ	; CFlyingInstance::UpdateAttachInstance
PUBLIC	?RenderAttachInstance@CFlyingInstance@@QAEXXZ	; CFlyingInstance::RenderAttachInstance
PUBLIC	?ClearAttachInstance@CFlyingInstance@@QAEXXZ	; CFlyingInstance::ClearAttachInstance
PUBLIC	?__Explode@CFlyingInstance@@QAEX_N@Z		; CFlyingInstance::__Explode
PUBLIC	?__Bomb@CFlyingInstance@@QAEXXZ			; CFlyingInstance::__Bomb
PUBLIC	?__Initialize@CFlyingInstance@@IAEXXZ		; CFlyingInstance::__Initialize
PUBLIC	?__SetDataPointer@CFlyingInstance@@IAEXPAVCFlyingData@@ABUD3DXVECTOR3@@@Z ; CFlyingInstance::__SetDataPointer
PUBLIC	?__SetTargetDirection@CFlyingInstance@@IAEXABVCFlyTarget@@@Z ; CFlyingInstance::__SetTargetDirection
PUBLIC	?__SetTargetNormalizedDirection@CFlyingInstance@@IAEXABUD3DXVECTOR3@@@Z ; CFlyingInstance::__SetTargetNormalizedDirection
PUBLIC	??1?$vector@UTAttachEffectInstance@CFlyingInstance@@V?$allocator@UTAttachEffectInstance@CFlyingInstance@@@std@@@std@@QAE@XZ ; std::vector<CFlyingInstance::TAttachEffectInstance,std::allocator<CFlyingInstance::TAttachEffectInstance> >::~vector<CFlyingInstance::TAttachEffectInstance,std::allocator<CFlyingInstance::TAttachEffectInstance> >
PUBLIC	?_Xlength@?$vector@UTAttachEffectInstance@CFlyingInstance@@V?$allocator@UTAttachEffectInstance@CFlyingInstance@@@std@@@std@@CAXXZ ; std::vector<CFlyingInstance::TAttachEffectInstance,std::allocator<CFlyingInstance::TAttachEffectInstance> >::_Xlength
PUBLIC	??1?$_Tree@V?$_Tset_traits@PAVIActorInstance@@U?$less@PAVIActorInstance@@@std@@V?$allocator@PAVIActorInstance@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tset_traits<IActorInstance *,std::less<IActorInstance *>,std::allocator<IActorInstance *>,0> >::~_Tree<std::_Tset_traits<IActorInstance *,std::less<IActorInstance *>,std::allocator<IActorInstance *>,0> >
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@PAVIActorInstance@@@std@@@std@@QAEPAU?$_Tree_node@PAVIActorInstance@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@PAVIActorInstance@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<IActorInstance *> >::_Insert_node
PUBLIC	??_GCFlyingInstance@@UAEPAXI@Z			; CFlyingInstance::`scalar deleting destructor'
PUBLIC	??1?$CDynamicPool@VCFlyingInstance@@@@UAE@XZ	; CDynamicPool<CFlyingInstance>::~CDynamicPool<CFlyingInstance>
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@PAVIActorInstance@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@1@PAU?$_Tree_node@PAVIActorInstance@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<IActorInstance *> >::_Erase_tree<std::allocator<std::_Tree_node<IActorInstance *,void *> > >
PUBLIC	??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@KAXPAVCRotationDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@KAXPAVCGravityDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@KAXPAVCAirResistanceDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@KAXPAVCNullDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@KAXPAVCHeaderDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::Delete
PUBLIC	??1?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAE@XZ ; RangeTester<FCheckAnotherMonsterDuringFlying>::~RangeTester<FCheckAnotherMonsterDuringFlying>
PUBLIC	?RayTraceCallback@?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEXABVVector3d@@0M0PAVSpherePack@@@Z ; RangeTester<FCheckAnotherMonsterDuringFlying>::RayTraceCallback
PUBLIC	?VisibilityCallback@?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z ; RangeTester<FCheckAnotherMonsterDuringFlying>::VisibilityCallback
PUBLIC	?RangeTestCallback@?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEXABVVector3d@@MPAVSpherePack@@W4ViewState@@@Z ; RangeTester<FCheckAnotherMonsterDuringFlying>::RangeTestCallback
PUBLIC	?PointTest2dCallback@?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEXABVVector3d@@PAVSpherePack@@W4ViewState@@@Z ; RangeTester<FCheckAnotherMonsterDuringFlying>::PointTest2dCallback
PUBLIC	??_G?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEPAXI@Z ; RangeTester<FCheckAnotherMonsterDuringFlying>::`scalar deleting destructor'
PUBLIC	??1?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAE@XZ ; RangeTester<FCheckBackgroundDuringFlying>::~RangeTester<FCheckBackgroundDuringFlying>
PUBLIC	?RayTraceCallback@?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEXABVVector3d@@0M0PAVSpherePack@@@Z ; RangeTester<FCheckBackgroundDuringFlying>::RayTraceCallback
PUBLIC	?VisibilityCallback@?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z ; RangeTester<FCheckBackgroundDuringFlying>::VisibilityCallback
PUBLIC	?RangeTestCallback@?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEXABVVector3d@@MPAVSpherePack@@W4ViewState@@@Z ; RangeTester<FCheckBackgroundDuringFlying>::RangeTestCallback
PUBLIC	?PointTest2dCallback@?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEXABVVector3d@@PAVSpherePack@@W4ViewState@@@Z ; RangeTester<FCheckBackgroundDuringFlying>::PointTest2dCallback
PUBLIC	??_G?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEPAXI@Z ; RangeTester<FCheckBackgroundDuringFlying>::`scalar deleting destructor'
PUBLIC	??$_Find_lower_bound@PAVIActorInstance@@@?$_Tree@V?$_Tset_traits@PAVIActorInstance@@U?$less@PAVIActorInstance@@@std@@V?$allocator@PAVIActorInstance@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@PAVIActorInstance@@PAX@std@@@1@ABQAVIActorInstance@@@Z ; std::_Tree<std::_Tset_traits<IActorInstance *,std::less<IActorInstance *>,std::allocator<IActorInstance *>,0> >::_Find_lower_bound<IActorInstance *>
PUBLIC	??$_Emplace_reallocate@ABUTAttachEffectInstance@CFlyingInstance@@@?$vector@UTAttachEffectInstance@CFlyingInstance@@V?$allocator@UTAttachEffectInstance@CFlyingInstance@@@std@@@std@@AAEPAUTAttachEffectInstance@CFlyingInstance@@QAU23@ABU23@@Z ; std::vector<CFlyingInstance::TAttachEffectInstance,std::allocator<CFlyingInstance::TAttachEffectInstance> >::_Emplace_reallocate<CFlyingInstance::TAttachEffectInstance const &>
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<IActorInstance *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<IActorInstance *,void *> > >
PUBLIC	??$_Copy_memmove@PAUTAttachEffectInstance@CFlyingInstance@@PAU12@@std@@YAPAUTAttachEffectInstance@CFlyingInstance@@PAU12@00@Z ; std::_Copy_memmove<CFlyingInstance::TAttachEffectInstance *,CFlyingInstance::TAttachEffectInstance *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BB@GCADKGJO@map?1set?5too?5long@		; `string'
PUBLIC	?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7SpherePackCallback@@6B@			; SpherePackCallback::`vftable'
PUBLIC	?ms_singleton@?$CSingleton@VCCullingManager@@@@0PAVCCullingManager@@A ; CSingleton<CCullingManager>::ms_singleton
PUBLIC	?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool
PUBLIC	?ms_singleton@?$CSingleton@VCEffectManager@@@@0PAVCEffectManager@@A ; CSingleton<CEffectManager>::ms_singleton
PUBLIC	?ms_kPool@CFlyingInstance@@2V?$CDynamicPool@VCFlyingInstance@@@@A ; CFlyingInstance::ms_kPool
PUBLIC	??_7CFlyingInstance@@6B@			; CFlyingInstance::`vftable'
PUBLIC	?ms_singleton@?$CSingleton@VCFlyingManager@@@@0PAVCFlyingManager@@A ; CSingleton<CFlyingManager>::ms_singleton
PUBLIC	??_7?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@6B@ ; RangeTester<FCheckAnotherMonsterDuringFlying>::`vftable'
PUBLIC	??_7?$RangeTester@UFCheckBackgroundDuringFlying@@@@6B@ ; RangeTester<FCheckBackgroundDuringFlying>::`vftable'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4SpherePackCallback@@6B@			; SpherePackCallback::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVSpherePackCallback@@@8			; SpherePackCallback `RTTI Type Descriptor'
PUBLIC	??_R3SpherePackCallback@@8			; SpherePackCallback::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SpherePackCallback@@8			; SpherePackCallback::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SpherePackCallback@@8		; SpherePackCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CFlyingInstance@@6B@			; CFlyingInstance::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCFlyingInstance@@@8			; CFlyingInstance `RTTI Type Descriptor'
PUBLIC	??_R3CFlyingInstance@@8				; CFlyingInstance::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CFlyingInstance@@8				; CFlyingInstance::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CFlyingInstance@@8		; CFlyingInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@6B@ ; RangeTester<FCheckAnotherMonsterDuringFlying>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AU?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@@8 ; RangeTester<FCheckAnotherMonsterDuringFlying> `RTTI Type Descriptor'
PUBLIC	??_R3?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@8 ; RangeTester<FCheckAnotherMonsterDuringFlying>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@8 ; RangeTester<FCheckAnotherMonsterDuringFlying>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@8 ; RangeTester<FCheckAnotherMonsterDuringFlying>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$RangeTester@UFCheckBackgroundDuringFlying@@@@6B@ ; RangeTester<FCheckBackgroundDuringFlying>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AU?$RangeTester@UFCheckBackgroundDuringFlying@@@@@8 ; RangeTester<FCheckBackgroundDuringFlying> `RTTI Type Descriptor'
PUBLIC	??_R3?$RangeTester@UFCheckBackgroundDuringFlying@@@@8 ; RangeTester<FCheckBackgroundDuringFlying>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$RangeTester@UFCheckBackgroundDuringFlying@@@@8 ; RangeTester<FCheckBackgroundDuringFlying>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$RangeTester@UFCheckBackgroundDuringFlying@@@@8 ; RangeTester<FCheckBackgroundDuringFlying>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@3a83126f
PUBLIC	__real@3c8efa35
PUBLIC	__real@3f000000
PUBLIC	__real@3f7ff972
PUBLIC	__real@3f800000
PUBLIC	__real@40490fdb
PUBLIC	__real@42480000
PUBLIC	__real@42b40000
PUBLIC	__real@43340000
PUBLIC	__real@bf7ff972
PUBLIC	__real@c0000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_D3DXVec3Normalize@8:PROC
EXTRN	_D3DXMatrixRotationQuaternion@8:PROC
EXTRN	_D3DXQuaternionRotationAxis@12:PROC
EXTRN	_D3DXQuaternionRotationYawPitchRoll@16:PROC
EXTRN	_D3DXQuaternionMultiply@12:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?GetCaseCRC32@@YAKPBDI@Z:PROC			; GetCaseCRC32
EXTRN	?GetCurrentSecond@CTimer@@QAEMXZ:PROC		; CTimer::GetCurrentSecond
EXTRN	?GetElapsedSecond@CTimer@@QAEMXZ:PROC		; CTimer::GetElapsedSecond
EXTRN	?frandom@@YAMMM@Z:PROC				; frandom
EXTRN	??_ESpherePackCallback@@UAEPAXI@Z:PROC		; SpherePackCallback::`vector deleting destructor'
EXTRN	?RangeTest@SpherePackFactory@@QAEXABVVector3d@@MPAVSpherePackCallback@@@Z:PROC ; SpherePackFactory::RangeTest
EXTRN	?CollisionDynamicSphere@CGraphicObjectInstance@@QBE_NABUCDynamicSphereInstance@@@Z:PROC ; CGraphicObjectInstance::CollisionDynamicSphere
EXTRN	?CreateEffectInstance@CEffectManager@@QAEXKK@Z:PROC ; CEffectManager::CreateEffectInstance
EXTRN	?SelectEffectInstance@CEffectManager@@QAEHK@Z:PROC ; CEffectManager::SelectEffectInstance
EXTRN	?DestroyEffectInstance@CEffectManager@@QAE_NK@Z:PROC ; CEffectManager::DestroyEffectInstance
EXTRN	?SetEffectInstanceGlobalMatrix@CEffectManager@@QAEXABUD3DXMATRIX@@@Z:PROC ; CEffectManager::SetEffectInstanceGlobalMatrix
EXTRN	?GetEmptyIndex@CEffectManager@@QAEHXZ:PROC	; CEffectManager::GetEmptyIndex
EXTRN	?GetTerrainHeight@CMapManager@@QAEMMM@Z:PROC	; CMapManager::GetTerrainHeight
EXTRN	?GetAttachDataReference@CFlyingData@@QAEAAUTFlyingAttachData@1@H@Z:PROC ; CFlyingData::GetAttachDataReference
EXTRN	?Create@CFlyTrace@@QAEXABUTFlyingAttachData@CFlyingData@@@Z:PROC ; CFlyTrace::Create
EXTRN	?UpdateNewPosition@CFlyTrace@@QAEXABUD3DXVECTOR3@@@Z:PROC ; CFlyTrace::UpdateNewPosition
EXTRN	?Render@CFlyTrace@@QAEXXZ:PROC			; CFlyTrace::Render
EXTRN	?New@CFlyTrace@@SAPAV1@XZ:PROC			; CFlyTrace::New
EXTRN	?Delete@CFlyTrace@@SAXPAV1@@Z:PROC		; CFlyTrace::Delete
EXTRN	??0CFlyTarget@@QAE@XZ:PROC			; CFlyTarget::CFlyTarget
EXTRN	??1CFlyTarget@@UAE@XZ:PROC			; CFlyTarget::~CFlyTarget
EXTRN	?Clear@CFlyTarget@@QAEXXZ:PROC			; CFlyTarget::Clear
EXTRN	?IsObject@CFlyTarget@@QAE_NXZ:PROC		; CFlyTarget::IsObject
EXTRN	?IsPosition@CFlyTarget@@QAE_NXZ:PROC		; CFlyTarget::IsPosition
EXTRN	?GetFlyTargetPosition@CFlyTarget@@QBEABUD3DXVECTOR3@@XZ:PROC ; CFlyTarget::GetFlyTargetPosition
EXTRN	?GetFlyTarget@CFlyTarget@@QAEPAVIFlyTargetableObject@@XZ:PROC ; CFlyTarget::GetFlyTarget
EXTRN	??4CFlyTarget@@QAEAAV0@ABV0@@Z:PROC		; CFlyTarget::operator=
EXTRN	??_ECFlyingInstance@@UAEPAXI@Z:PROC		; CFlyingInstance::`vector deleting destructor'
EXTRN	??_E?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEPAXI@Z:PROC ; RangeTester<FCheckAnotherMonsterDuringFlying>::`vector deleting destructor'
EXTRN	??_E?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEPAXI@Z:PROC ; RangeTester<FCheckBackgroundDuringFlying>::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__libm_sse2_cos_precise:PROC
EXTRN	__libm_sse2_exp_precise:PROC
EXTRN	__libm_sse2_sin_precise:PROC
EXTRN	__libm_sse2_sqrt_precise:PROC
EXTRN	_memmove:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A DD 01H DUP (?) ; CSingleton<CTimer>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCCullingManager@@@@0PAVCCullingManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCCullingManager@@@@0PAVCCullingManager@@A DD 01H DUP (?) ; CSingleton<CCullingManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCEffectManager@@@@0PAVCEffectManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCEffectManager@@@@0PAVCEffectManager@@A DD 01H DUP (?) ; CSingleton<CEffectManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCFlyingManager@@@@0PAVCFlyingManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCFlyingManager@@@@0PAVCFlyingManager@@A DD 01H DUP (?) ; CSingleton<CFlyingManager>::ms_singleton
_BSS	ENDS
CRT$XCU	SEGMENT
??ms_kPool$initializer$@CFlyingInstance@@2P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@CFlyingInstance@@2V?$CDynamicPool@VCFlyingInstance@@@@A@@YAXXZ ; ??ms_kPool$initializer$@CFlyingInstance@@2P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c0000000
CONST	SEGMENT
__real@c0000000 DD 0c0000000r			; -2
CONST	ENDS
;	COMDAT __real@bf7ff972
CONST	SEGMENT
__real@bf7ff972 DD 0bf7ff972r			; -0.9999
CONST	ENDS
;	COMDAT __real@43340000
CONST	SEGMENT
__real@43340000 DD 043340000r			; 180
CONST	ENDS
;	COMDAT __real@42b40000
CONST	SEGMENT
__real@42b40000 DD 042b40000r			; 90
CONST	ENDS
;	COMDAT __real@42480000
CONST	SEGMENT
__real@42480000 DD 042480000r			; 50
CONST	ENDS
;	COMDAT __real@40490fdb
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f7ff972
CONST	SEGMENT
__real@3f7ff972 DD 03f7ff972r			; 0.9999
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3c8efa35
CONST	SEGMENT
__real@3c8efa35 DD 03c8efa35r			; 0.0174533
CONST	ENDS
;	COMDAT __real@3a83126f
CONST	SEGMENT
__real@3a83126f DD 03a83126fr			; 0.001
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$RangeTester@UFCheckBackgroundDuringFlying@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$RangeTester@UFCheckBackgroundDuringFlying@@@@8 DD FLAT:??_R0?AU?$RangeTester@UFCheckBackgroundDuringFlying@@@@@8 ; RangeTester<FCheckBackgroundDuringFlying>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$RangeTester@UFCheckBackgroundDuringFlying@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$RangeTester@UFCheckBackgroundDuringFlying@@@@8
rdata$r	SEGMENT
??_R2?$RangeTester@UFCheckBackgroundDuringFlying@@@@8 DD FLAT:??_R1A@?0A@EA@?$RangeTester@UFCheckBackgroundDuringFlying@@@@8 ; RangeTester<FCheckBackgroundDuringFlying>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@SpherePackCallback@@8
rdata$r	ENDS
;	COMDAT ??_R3?$RangeTester@UFCheckBackgroundDuringFlying@@@@8
rdata$r	SEGMENT
??_R3?$RangeTester@UFCheckBackgroundDuringFlying@@@@8 DD 00H ; RangeTester<FCheckBackgroundDuringFlying>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$RangeTester@UFCheckBackgroundDuringFlying@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU?$RangeTester@UFCheckBackgroundDuringFlying@@@@@8
data$rs	SEGMENT
??_R0?AU?$RangeTester@UFCheckBackgroundDuringFlying@@@@@8 DD FLAT:??_7type_info@@6B@ ; RangeTester<FCheckBackgroundDuringFlying> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU?$RangeTester@UFCheckBackgroundDuringFlying@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$RangeTester@UFCheckBackgroundDuringFlying@@@@6B@
rdata$r	SEGMENT
??_R4?$RangeTester@UFCheckBackgroundDuringFlying@@@@6B@ DD 00H ; RangeTester<FCheckBackgroundDuringFlying>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AU?$RangeTester@UFCheckBackgroundDuringFlying@@@@@8
	DD	FLAT:??_R3?$RangeTester@UFCheckBackgroundDuringFlying@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@8 DD FLAT:??_R0?AU?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@@8 ; RangeTester<FCheckAnotherMonsterDuringFlying>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@8
rdata$r	SEGMENT
??_R2?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@8 DD FLAT:??_R1A@?0A@EA@?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@8 ; RangeTester<FCheckAnotherMonsterDuringFlying>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@SpherePackCallback@@8
rdata$r	ENDS
;	COMDAT ??_R3?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@8
rdata$r	SEGMENT
??_R3?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@8 DD 00H ; RangeTester<FCheckAnotherMonsterDuringFlying>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@@8
data$rs	SEGMENT
??_R0?AU?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@@8 DD FLAT:??_7type_info@@6B@ ; RangeTester<FCheckAnotherMonsterDuringFlying> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@6B@
rdata$r	SEGMENT
??_R4?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@6B@ DD 00H ; RangeTester<FCheckAnotherMonsterDuringFlying>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AU?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@@8
	DD	FLAT:??_R3?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CFlyingInstance@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CFlyingInstance@@8 DD FLAT:??_R0?AVCFlyingInstance@@@8 ; CFlyingInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CFlyingInstance@@8
rdata$r	ENDS
;	COMDAT ??_R2CFlyingInstance@@8
rdata$r	SEGMENT
??_R2CFlyingInstance@@8 DD FLAT:??_R1A@?0A@EA@CFlyingInstance@@8 ; CFlyingInstance::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CFlyingInstance@@8
rdata$r	SEGMENT
??_R3CFlyingInstance@@8 DD 00H				; CFlyingInstance::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CFlyingInstance@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCFlyingInstance@@@8
data$rs	SEGMENT
??_R0?AVCFlyingInstance@@@8 DD FLAT:??_7type_info@@6B@	; CFlyingInstance `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCFlyingInstance@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CFlyingInstance@@6B@
rdata$r	SEGMENT
??_R4CFlyingInstance@@6B@ DD 00H			; CFlyingInstance::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCFlyingInstance@@@8
	DD	FLAT:??_R3CFlyingInstance@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@SpherePackCallback@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SpherePackCallback@@8 DD FLAT:??_R0?AVSpherePackCallback@@@8 ; SpherePackCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SpherePackCallback@@8
rdata$r	ENDS
;	COMDAT ??_R2SpherePackCallback@@8
rdata$r	SEGMENT
??_R2SpherePackCallback@@8 DD FLAT:??_R1A@?0A@EA@SpherePackCallback@@8 ; SpherePackCallback::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3SpherePackCallback@@8
rdata$r	SEGMENT
??_R3SpherePackCallback@@8 DD 00H			; SpherePackCallback::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2SpherePackCallback@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSpherePackCallback@@@8
data$rs	SEGMENT
??_R0?AVSpherePackCallback@@@8 DD FLAT:??_7type_info@@6B@ ; SpherePackCallback `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSpherePackCallback@@', 00H
data$rs	ENDS
;	COMDAT ??_R4SpherePackCallback@@6B@
rdata$r	SEGMENT
??_R4SpherePackCallback@@6B@ DD 00H			; SpherePackCallback::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVSpherePackCallback@@@8
	DD	FLAT:??_R3SpherePackCallback@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7?$RangeTester@UFCheckBackgroundDuringFlying@@@@6B@
CONST	SEGMENT
??_7?$RangeTester@UFCheckBackgroundDuringFlying@@@@6B@ DD FLAT:??_R4?$RangeTester@UFCheckBackgroundDuringFlying@@@@6B@ ; RangeTester<FCheckBackgroundDuringFlying>::`vftable'
	DD	FLAT:??_E?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEPAXI@Z
	DD	FLAT:?VisibilityCallback@?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z
	DD	FLAT:?RayTraceCallback@?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEXABVVector3d@@0M0PAVSpherePack@@@Z
	DD	FLAT:?RangeTestCallback@?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEXABVVector3d@@MPAVSpherePack@@W4ViewState@@@Z
	DD	FLAT:?PointTest2dCallback@?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEXABVVector3d@@PAVSpherePack@@W4ViewState@@@Z
CONST	ENDS
;	COMDAT ??_7?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@6B@
CONST	SEGMENT
??_7?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@6B@ DD FLAT:??_R4?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@6B@ ; RangeTester<FCheckAnotherMonsterDuringFlying>::`vftable'
	DD	FLAT:??_E?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEPAXI@Z
	DD	FLAT:?VisibilityCallback@?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z
	DD	FLAT:?RayTraceCallback@?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEXABVVector3d@@0M0PAVSpherePack@@@Z
	DD	FLAT:?RangeTestCallback@?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEXABVVector3d@@MPAVSpherePack@@W4ViewState@@@Z
	DD	FLAT:?PointTest2dCallback@?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEXABVVector3d@@PAVSpherePack@@W4ViewState@@@Z
CONST	ENDS
;	COMDAT ??_7CFlyingInstance@@6B@
CONST	SEGMENT
??_7CFlyingInstance@@6B@ DD FLAT:??_R4CFlyingInstance@@6B@ ; CFlyingInstance::`vftable'
	DD	FLAT:??_ECFlyingInstance@@UAEPAXI@Z
CONST	ENDS
_DATA	SEGMENT
?ms_kPool@CFlyingInstance@@2V?$CDynamicPool@VCFlyingInstance@@@@A DD FLAT:??_7?$CDynamicPool@VCFlyingInstance@@@@6B@ ; CFlyingInstance::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ??_7SpherePackCallback@@6B@
CONST	SEGMENT
??_7SpherePackCallback@@6B@ DD FLAT:??_R4SpherePackCallback@@6B@ ; SpherePackCallback::`vftable'
	DD	FLAT:??_ESpherePackCallback@@UAEPAXI@Z
	DD	FLAT:?VisibilityCallback@SpherePackCallback@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z
	DD	FLAT:?RayTraceCallback@SpherePackCallback@@UAEXABVVector3d@@0M0PAVSpherePack@@@Z
	DD	FLAT:?RangeTestCallback@SpherePackCallback@@UAEXABVVector3d@@MPAVSpherePack@@W4ViewState@@@Z
	DD	FLAT:?PointTest2dCallback@SpherePackCallback@@UAEXABVVector3d@@PAVSpherePack@@W4ViewState@@@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
CONST	SEGMENT
??_C@_0BB@GCADKGJO@map?1set?5too?5long@ DB 'map/set too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABQAVIActorInstance@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@1@PAU?$_Tree_node@PAVIActorInstance@@PAX@1@ABQAVIActorInstance@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABQAVIActorInstance@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@1@PAU?$_Tree_node@PAVIActorInstance@@PAX@1@ABQAVIActorInstance@@@Z$1
__ehfuncinfo$??$?0ABQAVIActorInstance@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@1@PAU?$_Tree_node@PAVIActorInstance@@PAX@1@ABQAVIActorInstance@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0ABQAVIActorInstance@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@1@PAU?$_Tree_node@PAVIActorInstance@@PAX@1@ABQAVIActorInstance@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@ABQAVIActorInstance@@@?$_Tree@V?$_Tset_traits@PAVIActorInstance@@U?$less@PAVIActorInstance@@@std@@V?$allocator@PAVIActorInstance@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@PAVIActorInstance@@PAX@std@@_N@1@ABQAVIActorInstance@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@ABQAVIActorInstance@@@?$_Tree@V?$_Tset_traits@PAVIActorInstance@@U?$less@PAVIActorInstance@@@std@@V?$allocator@PAVIActorInstance@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@PAVIActorInstance@@PAX@std@@_N@1@ABQAVIActorInstance@@@Z$2
__ehfuncinfo$??$_Emplace@ABQAVIActorInstance@@@?$_Tree@V?$_Tset_traits@PAVIActorInstance@@U?$less@PAVIActorInstance@@@std@@V?$allocator@PAVIActorInstance@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@PAVIActorInstance@@PAX@std@@_N@1@ABQAVIActorInstance@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@ABQAVIActorInstance@@@?$_Tree@V?$_Tset_traits@PAVIActorInstance@@U?$less@PAVIActorInstance@@@std@@V?$allocator@PAVIActorInstance@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@PAVIActorInstance@@PAX@std@@_N@1@ABQAVIActorInstance@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$ForInRange@UFCheckBackgroundDuringFlying@@@CCullingManager@@QAEXABVVector3d@@MPAUFCheckBackgroundDuringFlying@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$ForInRange@UFCheckBackgroundDuringFlying@@@CCullingManager@@QAEXABVVector3d@@MPAUFCheckBackgroundDuringFlying@@@Z$0
__ehfuncinfo$??$ForInRange@UFCheckBackgroundDuringFlying@@@CCullingManager@@QAEXABVVector3d@@MPAUFCheckBackgroundDuringFlying@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$ForInRange@UFCheckBackgroundDuringFlying@@@CCullingManager@@QAEXABVVector3d@@MPAUFCheckBackgroundDuringFlying@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@PAVIActorInstance@@U?$less@PAVIActorInstance@@@std@@V?$allocator@PAVIActorInstance@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVIActorInstance@@@std@@@std@@@std@@_N@1@ABQAVIActorInstance@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@PAVIActorInstance@@U?$less@PAVIActorInstance@@@std@@V?$allocator@PAVIActorInstance@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVIActorInstance@@@std@@@std@@@std@@_N@1@ABQAVIActorInstance@@@Z$2
__ehfuncinfo$??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@PAVIActorInstance@@U?$less@PAVIActorInstance@@@std@@V?$allocator@PAVIActorInstance@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVIActorInstance@@@std@@@std@@@std@@_N@1@ABQAVIActorInstance@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@PAVIActorInstance@@U?$less@PAVIActorInstance@@@std@@V?$allocator@PAVIActorInstance@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVIActorInstance@@@std@@@std@@@std@@_N@1@ABQAVIActorInstance@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$ForInRange@UFCheckAnotherMonsterDuringFlying@@@CCullingManager@@QAEXABVVector3d@@MPAUFCheckAnotherMonsterDuringFlying@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$ForInRange@UFCheckAnotherMonsterDuringFlying@@@CCullingManager@@QAEXABVVector3d@@MPAUFCheckAnotherMonsterDuringFlying@@@Z$0
__ehfuncinfo$??$ForInRange@UFCheckAnotherMonsterDuringFlying@@@CCullingManager@@QAEXABVVector3d@@MPAUFCheckAnotherMonsterDuringFlying@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$ForInRange@UFCheckAnotherMonsterDuringFlying@@@CCullingManager@@QAEXABVVector3d@@MPAUFCheckAnotherMonsterDuringFlying@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Update@CFlyingInstance@@QAE_NXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Update@CFlyingInstance@@QAE_NXZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Update@CFlyingInstance@@QAE_NXZ$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Update@CFlyingInstance@@QAE_NXZ$1
__ehfuncinfo$?Update@CFlyingInstance@@QAE_NXZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?Update@CFlyingInstance@@QAE_NXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CFlyingInstance@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CFlyingInstance@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CFlyingInstance@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CFlyingInstance@@QAE@XZ$1
__ehfuncinfo$??0CFlyingInstance@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CFlyingInstance@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$_Copy_memmove@PAUTAttachEffectInstance@CFlyingInstance@@PAU12@@std@@YAPAUTAttachEffectInstance@CFlyingInstance@@PAU12@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAUTAttachEffectInstance@CFlyingInstance@@PAU12@@std@@YAPAUTAttachEffectInstance@CFlyingInstance@@PAU12@00@Z PROC ; std::_Copy_memmove<CFlyingInstance::TAttachEffectInstance *,CFlyingInstance::TAttachEffectInstance *>, COMDAT

; 4526 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4527 :     auto _FirstPtr              = _To_address(_First);
; 4528 :     auto _LastPtr               = _To_address(_Last);
; 4529 :     auto _DestPtr               = _To_address(_Dest);
; 4530 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4531 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4532 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4533 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4535 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4536 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4537 :     } else {
; 4538 :         return _Dest + (_LastPtr - _FirstPtr);
; 4539 :     }
; 4540 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAUTAttachEffectInstance@CFlyingInstance@@PAU12@@std@@YAPAUTAttachEffectInstance@CFlyingInstance@@PAU12@00@Z ENDP ; std::_Copy_memmove<CFlyingInstance::TAttachEffectInstance *,CFlyingInstance::TAttachEffectInstance *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<IActorInstance *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<IActorInstance *,void *> > >, COMDAT
; _this$ = ecx

; 1156 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 265  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 14		 push	 20			; 00000014H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 1157 :             _Al.deallocate(_Ptr, 1);
; 1158 :         }
; 1159 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<IActorInstance *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<IActorInstance *,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??$_Emplace_reallocate@ABUTAttachEffectInstance@CFlyingInstance@@@?$vector@UTAttachEffectInstance@CFlyingInstance@@V?$allocator@UTAttachEffectInstance@CFlyingInstance@@@std@@@std@@AAEPAUTAttachEffectInstance@CFlyingInstance@@QAU23@ABU23@@Z
_TEXT	SEGMENT
__Oldsize$1$ = -12					; size = 4
tv557 = -8						; size = 4
__Whereoff$1$ = -8					; size = 4
tv574 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABUTAttachEffectInstance@CFlyingInstance@@@?$vector@UTAttachEffectInstance@CFlyingInstance@@V?$allocator@UTAttachEffectInstance@CFlyingInstance@@@std@@@std@@AAEPAUTAttachEffectInstance@CFlyingInstance@@QAU23@ABU23@@Z PROC ; std::vector<CFlyingInstance::TAttachEffectInstance,std::allocator<CFlyingInstance::TAttachEffectInstance> >::_Emplace_reallocate<CFlyingInstance::TAttachEffectInstance const &>, COMDAT
; _this$ = ecx

; 812  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 813  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 814  :         _Alty& _Al        = _Getal();
; 815  :         auto& _My_data    = _Mypair._Myval2;
; 816  :         pointer& _Myfirst = _My_data._Myfirst;
; 817  :         pointer& _Mylast  = _My_data._Mylast;
; 818  : 
; 819  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 820  : 
; 821  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00006	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  00009	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000e	53		 push	 ebx
  0000f	8b d9		 mov	 ebx, ecx
  00011	57		 push	 edi
  00012	8b 3b		 mov	 edi, DWORD PTR [ebx]
  00014	2b d7		 sub	 edx, edi

; 822  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00016	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00019	f7 ea		 imul	 edx
  0001b	2b cf		 sub	 ecx, edi
  0001d	d1 fa		 sar	 edx, 1
  0001f	8b c2		 mov	 eax, edx
  00021	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00024	03 c2		 add	 eax, edx
  00026	89 45 f8	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  00029	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0002e	f7 e9		 imul	 ecx
  00030	d1 fa		 sar	 edx, 1
  00032	8b c2		 mov	 eax, edx
  00034	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00037	03 c2		 add	 eax, edx
  00039	89 45 f4	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 823  : 
; 824  :         if (_Oldsize == max_size()) {

  0003c	3d 55 55 55 15	 cmp	 eax, 357913941		; 15555555H
  00041	0f 84 3c 01 00
	00		 je	 $LN104@Emplace_re

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00047	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  0004a	2b cf		 sub	 ecx, edi
  0004c	56		 push	 esi

; 826  :         }
; 827  : 
; 828  :         const size_type _Newsize     = _Oldsize + 1;

  0004d	8d 70 01	 lea	 esi, DWORD PTR [eax+1]

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00050	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00055	f7 e9		 imul	 ecx

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00057	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0005c	d1 fa		 sar	 edx, 1
  0005e	8b ca		 mov	 ecx, edx
  00060	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00063	03 ca		 add	 ecx, edx

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00065	8b d1		 mov	 edx, ecx
  00067	d1 ea		 shr	 edx, 1
  00069	2b c2		 sub	 eax, edx
  0006b	3b c8		 cmp	 ecx, eax
  0006d	76 15		 jbe	 SHORT $LN12@Emplace_re

; 1967 :             return _Max; // geometric growth would overflow

  0006f	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00074	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1967 :             return _Max; // geometric growth would overflow

  00075	89 45 fc	 mov	 DWORD PTR tv574[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00078	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0007d	83 c4 04	 add	 esp, 4
  00080	8b f8		 mov	 edi, eax
  00082	eb 46		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1970 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00084	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 70   :         if (_Count > _Max_possible) {

  00087	8b ce		 mov	 ecx, esi
  00089	3b c6		 cmp	 eax, esi
  0008b	0f 43 c8	 cmovae	 ecx, eax
  0008e	81 f9 55 55 55
	15		 cmp	 ecx, 357913941		; 15555555H
  00094	0f 87 ee 00 00
	00		 ja	 $LN105@Emplace_re

; 72   :         }
; 73   :     }
; 74   : 
; 75   :     return _Count * _Ty_size;

  0009a	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
  0009d	c1 e0 02	 shl	 eax, 2
  000a0	89 45 fc	 mov	 DWORD PTR tv574[ebp], eax

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000a3	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000a8	72 0d		 jb	 SHORT $LN24@Emplace_re

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000aa	50		 push	 eax
  000ab	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000b0	83 c4 04	 add	 esp, 4
  000b3	8b f8		 mov	 edi, eax
  000b5	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  000b7	85 c0		 test	 eax, eax
  000b9	74 0d		 je	 SHORT $LN25@Emplace_re

; 87   :         return ::operator new(_Bytes);

  000bb	50		 push	 eax
  000bc	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000c1	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  000c4	8b f8		 mov	 edi, eax
  000c6	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  000c8	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 836  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000ca	8b 45 f8	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]

; 839  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000cd	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  000d0	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000d3	8d 34 87	 lea	 esi, DWORD PTR [edi+eax*4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 719  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  000d6	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 836  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000d9	89 75 f8	 mov	 DWORD PTR tv557[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 719  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  000dc	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  000e0	66 0f d6 06	 movq	 QWORD PTR [esi], xmm0
  000e4	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000e7	89 46 08	 mov	 DWORD PTR [esi+8], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 839  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000ea	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  000ed	8b 03		 mov	 eax, DWORD PTR [ebx]
  000ef	3b d1		 cmp	 edx, ecx
  000f1	75 04		 jne	 SHORT $LN4@Emplace_re
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000f3	8b f7		 mov	 esi, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 845  :         } else { // provide basic guarantee

  000f5	eb 14		 jmp	 SHORT $LN58@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000f7	57		 push	 edi
  000f8	52		 push	 edx
  000f9	50		 push	 eax
  000fa	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAUTAttachEffectInstance@CFlyingInstance@@PAU12@@std@@YAPAUTAttachEffectInstance@CFlyingInstance@@PAU12@00@Z ; std::_Copy_memmove<CFlyingInstance::TAttachEffectInstance *,CFlyingInstance::TAttachEffectInstance *>
  000ff	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00102	83 c4 0c	 add	 esp, 12			; 0000000cH
  00105	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  00108	83 c6 0c	 add	 esi, 12			; 0000000cH
$LN58@Emplace_re:
  0010b	56		 push	 esi
  0010c	51		 push	 ecx
  0010d	50		 push	 eax
  0010e	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAUTAttachEffectInstance@CFlyingInstance@@PAU12@@std@@YAPAUTAttachEffectInstance@CFlyingInstance@@PAU12@00@Z ; std::_Copy_memmove<CFlyingInstance::TAttachEffectInstance *,CFlyingInstance::TAttachEffectInstance *>

; 2023 :         if (_Myfirst) { // destroy and deallocate old array

  00113	8b 33		 mov	 esi, DWORD PTR [ebx]

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  00115	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2023 :         if (_Myfirst) { // destroy and deallocate old array

  00118	85 f6		 test	 esi, esi
  0011a	74 3f		 je	 SHORT $LN78@Emplace_re

; 2024 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2025 :             _ASAN_VECTOR_REMOVE;
; 2026 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0011c	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  0011f	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00124	2b ce		 sub	 ecx, esi
  00126	f7 e9		 imul	 ecx
  00128	d1 fa		 sar	 edx, 1
  0012a	8b c2		 mov	 eax, edx
  0012c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0012f	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00131	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00134	c1 e1 02	 shl	 ecx, 2

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00137	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0013d	72 12		 jb	 SHORT $LN88@Emplace_re

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0013f	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00142	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00145	2b f2		 sub	 esi, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00147	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  0014a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0014d	77 2f		 ja	 SHORT $LN85@Emplace_re

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0014f	8b f2		 mov	 esi, edx
$LN88@Emplace_re:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00151	51		 push	 ecx
  00152	56		 push	 esi
  00153	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00158	83 c4 08	 add	 esp, 8
$LN78@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2030 :         _Mylast  = _Newvec + _Newsize;

  0015b	8b 45 f4	 mov	 eax, DWORD PTR __Oldsize$1$[ebp]
  0015e	40		 inc	 eax
  0015f	89 3b		 mov	 DWORD PTR [ebx], edi

; 849  :         }
; 850  :         _CATCH_ALL
; 851  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 852  :         _Al.deallocate(_Newvec, _Newcapacity);
; 853  :         _RERAISE;
; 854  :         _CATCH_END
; 855  : 
; 856  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 857  :         return _Newvec + _Whereoff;

  00161	5e		 pop	 esi

; 2030 :         _Mylast  = _Newvec + _Newsize;

  00162	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]

; 849  :         }
; 850  :         _CATCH_ALL
; 851  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 852  :         _Al.deallocate(_Newvec, _Newcapacity);
; 853  :         _RERAISE;
; 854  :         _CATCH_END
; 855  : 
; 856  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 857  :         return _Newvec + _Whereoff;

  00165	8b 45 f8	 mov	 eax, DWORD PTR tv557[ebp]

; 2030 :         _Mylast  = _Newvec + _Newsize;

  00168	8d 0c 8f	 lea	 ecx, DWORD PTR [edi+ecx*4]
  0016b	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx

; 2031 :         _Myend   = _Newvec + _Newcapacity;

  0016e	8b 4d fc	 mov	 ecx, DWORD PTR tv574[ebp]
  00171	03 cf		 add	 ecx, edi

; 858  :     }

  00173	5f		 pop	 edi

; 2031 :         _Myend   = _Newvec + _Newcapacity;

  00174	89 4b 08	 mov	 DWORD PTR [ebx+8], ecx

; 858  :     }

  00177	5b		 pop	 ebx
  00178	8b e5		 mov	 esp, ebp
  0017a	5d		 pop	 ebp
  0017b	c2 08 00	 ret	 8
$LN85@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0017e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN104@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 825  :             _Xlength();

  00183	e8 00 00 00 00	 call	 ?_Xlength@?$vector@UTAttachEffectInstance@CFlyingInstance@@V?$allocator@UTAttachEffectInstance@CFlyingInstance@@@std@@@std@@CAXXZ ; std::vector<CFlyingInstance::TAttachEffectInstance,std::allocator<CFlyingInstance::TAttachEffectInstance> >::_Xlength
$LN105@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 71   :             _Throw_bad_array_new_length(); // multiply overflow

  00188	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN102@Emplace_re:
  0018d	cc		 int	 3
??$_Emplace_reallocate@ABUTAttachEffectInstance@CFlyingInstance@@@?$vector@UTAttachEffectInstance@CFlyingInstance@@V?$allocator@UTAttachEffectInstance@CFlyingInstance@@@std@@@std@@AAEPAUTAttachEffectInstance@CFlyingInstance@@QAU23@ABU23@@Z ENDP ; std::vector<CFlyingInstance::TAttachEffectInstance,std::allocator<CFlyingInstance::TAttachEffectInstance> >::_Emplace_reallocate<CFlyingInstance::TAttachEffectInstance const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??$_Find_lower_bound@PAVIActorInstance@@@?$_Tree@V?$_Tset_traits@PAVIActorInstance@@U?$less@PAVIActorInstance@@@std@@V?$allocator@PAVIActorInstance@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@PAVIActorInstance@@PAX@std@@@1@ABQAVIActorInstance@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@PAVIActorInstance@@@?$_Tree@V?$_Tset_traits@PAVIActorInstance@@U?$less@PAVIActorInstance@@@std@@V?$allocator@PAVIActorInstance@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@PAVIActorInstance@@PAX@std@@@1@ABQAVIActorInstance@@@Z PROC ; std::_Tree<std::_Tset_traits<IActorInstance *,std::less<IActorInstance *>,std::allocator<IActorInstance *>,0> >::_Find_lower_bound<IActorInstance *>, COMDAT
; _this$ = ecx

; 1611 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1612 :         const auto _Scary = _Get_scary();
; 1613 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000b	89 02		 mov	 DWORD PTR [edx], eax
  0000d	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00014	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1614 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1615 :         while (!_Trynode->_Isnil) {

  00017	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001b	75 28		 jne	 SHORT $LN12@Find_lower
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00020	56		 push	 esi
  00021	8b 31		 mov	 esi, DWORD PTR [ecx]
$LL2@Find_lower:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1616 :             _Result._Location._Parent = _Trynode;

  00023	89 02		 mov	 DWORD PTR [edx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  00025	39 70 10	 cmp	 DWORD PTR [eax+16], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1617 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00028	73 07		 jae	 SHORT $LN4@Find_lower

; 1618 :                 _Result._Location._Child = _Tree_child::_Right;
; 1619 :                 _Trynode                 = _Trynode->_Right;

  0002a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002d	33 c9		 xor	 ecx, ecx

; 1620 :             } else {

  0002f	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1621 :                 _Result._Location._Child = _Tree_child::_Left;
; 1622 :                 _Result._Bound           = _Trynode;

  00031	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1623 :                 _Trynode                 = _Trynode->_Left;

  00034	b9 01 00 00 00	 mov	 ecx, 1
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Find_lower:

; 1614 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1615 :         while (!_Trynode->_Isnil) {

  0003b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00042	74 df		 je	 SHORT $LL2@Find_lower
  00044	5e		 pop	 esi
$LN12@Find_lower:

; 1624 :             }
; 1625 :         }
; 1626 : 
; 1627 :         return _Result;
; 1628 :     }

  00045	8b c2		 mov	 eax, edx
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
??$_Find_lower_bound@PAVIActorInstance@@@?$_Tree@V?$_Tset_traits@PAVIActorInstance@@U?$less@PAVIActorInstance@@@std@@V?$allocator@PAVIActorInstance@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@PAVIActorInstance@@PAX@std@@@1@ABQAVIActorInstance@@@Z ENDP ; std::_Tree<std::_Tset_traits<IActorInstance *,std::less<IActorInstance *>,std::allocator<IActorInstance *>,0> >::_Find_lower_bound<IActorInstance *>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEPAXI@Z PROC ; RangeTester<FCheckBackgroundDuringFlying>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SpherePackCallback@@6B@
  00010	74 0b		 je	 SHORT $LN4@scalar
  00012	6a 0c		 push	 12			; 0000000cH
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_G?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEPAXI@Z ENDP ; RangeTester<FCheckBackgroundDuringFlying>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterlib\CullingManager.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\eterlib\CullingManager.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\eterlib\CullingManager.h
;	COMDAT ?PointTest2dCallback@?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEXABVVector3d@@PAVSpherePack@@W4ViewState@@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_sphere$ = 12						; size = 4
_state$ = 16						; size = 4
?PointTest2dCallback@?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEXABVVector3d@@PAVSpherePack@@W4ViewState@@@Z PROC ; RangeTester<FCheckBackgroundDuringFlying>::PointTest2dCallback, COMDAT
; _this$ = ecx

; 50   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 51   : #ifdef SPHERELIB_STRICT
; 52   : 		if (sphere->IS_SPHERE)
; 53   : 			puts("RangeTester::PointTest2dCallback");
; 54   : #endif
; 55   : 		if (state!=VS_OUTSIDE)

  00003	83 7d 10 02	 cmp	 DWORD PTR _state$[ebp], 2
  00007	74 35		 je	 SHORT $LN7@PointTest2

; 60   : 			(*f)((CGraphicObjectInstance *)sphere->GetUserData());

  00009	8b 45 0c	 mov	 eax, DWORD PTR _sphere$[ebp]
  0000c	56		 push	 esi
  0000d	8b 70 44	 mov	 esi, DWORD PTR [eax+68]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 289  : 		if (!p)

  00010	85 f6		 test	 esi, esi
  00012	74 29		 je	 SHORT $LN14@PointTest2
; File C:\Marty 5.5\Src-Client\Client\eterlib\CullingManager.h

; 60   : 			(*f)((CGraphicObjectInstance *)sphere->GetUserData());

  00014	57		 push	 edi
  00015	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 292  : 		if (!bHit && p->GetType() != ACTOR_OBJECT)

  00018	80 7f 1c 00	 cmp	 BYTE PTR [edi+28], 0
  0001c	75 1e		 jne	 SHORT $LN15@PointTest2
  0001e	8b 06		 mov	 eax, DWORD PTR [esi]
  00020	8b ce		 mov	 ecx, esi
  00022	ff 50 04	 call	 DWORD PTR [eax+4]
  00025	3d 24 6c a7 29	 cmp	 eax, 698838052		; 29a76c24H
  0002a	74 10		 je	 SHORT $LN15@PointTest2

; 293  : 		{
; 294  : 			if (p->CollisionDynamicSphere(s))

  0002c	57		 push	 edi
  0002d	8b ce		 mov	 ecx, esi
  0002f	e8 00 00 00 00	 call	 ?CollisionDynamicSphere@CGraphicObjectInstance@@QBE_NABUCDynamicSphereInstance@@@Z ; CGraphicObjectInstance::CollisionDynamicSphere
  00034	84 c0		 test	 al, al
  00036	74 04		 je	 SHORT $LN15@PointTest2

; 295  : 			{
; 296  : 				bHit = true;

  00038	c6 47 1c 01	 mov	 BYTE PTR [edi+28], 1
$LN15@PointTest2:
  0003c	5f		 pop	 edi
$LN14@PointTest2:
  0003d	5e		 pop	 esi
$LN7@PointTest2:
; File C:\Marty 5.5\Src-Client\Client\eterlib\CullingManager.h

; 62   : 	}

  0003e	5d		 pop	 ebp
  0003f	c2 0c 00	 ret	 12			; 0000000cH
?PointTest2dCallback@?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEXABVVector3d@@PAVSpherePack@@W4ViewState@@@Z ENDP ; RangeTester<FCheckBackgroundDuringFlying>::PointTest2dCallback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterlib\CullingManager.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\eterlib\CullingManager.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\eterlib\CullingManager.h
;	COMDAT ?RangeTestCallback@?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEXABVVector3d@@MPAVSpherePack@@W4ViewState@@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_distance$ = 12						; size = 4
_sphere$ = 16						; size = 4
_state$ = 20						; size = 4
?RangeTestCallback@?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEXABVVector3d@@MPAVSpherePack@@W4ViewState@@@Z PROC ; RangeTester<FCheckBackgroundDuringFlying>::RangeTestCallback, COMDAT
; _this$ = ecx

; 40   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 41   : #ifdef SPHERELIB_STRICT
; 42   : 		if (sphere->IS_SPHERE)
; 43   : 			puts("RangeTester::RangeTestCallback");
; 44   : #endif
; 45   : 		if (state!=VS_OUTSIDE)

  00003	83 7d 14 02	 cmp	 DWORD PTR _state$[ebp], 2
  00007	74 35		 je	 SHORT $LN7@RangeTestC

; 46   : 			(*f)((CGraphicObjectInstance *)sphere->GetUserData());

  00009	8b 45 10	 mov	 eax, DWORD PTR _sphere$[ebp]
  0000c	56		 push	 esi
  0000d	8b 70 44	 mov	 esi, DWORD PTR [eax+68]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 289  : 		if (!p)

  00010	85 f6		 test	 esi, esi
  00012	74 29		 je	 SHORT $LN14@RangeTestC
; File C:\Marty 5.5\Src-Client\Client\eterlib\CullingManager.h

; 46   : 			(*f)((CGraphicObjectInstance *)sphere->GetUserData());

  00014	57		 push	 edi
  00015	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 292  : 		if (!bHit && p->GetType() != ACTOR_OBJECT)

  00018	80 7f 1c 00	 cmp	 BYTE PTR [edi+28], 0
  0001c	75 1e		 jne	 SHORT $LN15@RangeTestC
  0001e	8b 06		 mov	 eax, DWORD PTR [esi]
  00020	8b ce		 mov	 ecx, esi
  00022	ff 50 04	 call	 DWORD PTR [eax+4]
  00025	3d 24 6c a7 29	 cmp	 eax, 698838052		; 29a76c24H
  0002a	74 10		 je	 SHORT $LN15@RangeTestC

; 293  : 		{
; 294  : 			if (p->CollisionDynamicSphere(s))

  0002c	57		 push	 edi
  0002d	8b ce		 mov	 ecx, esi
  0002f	e8 00 00 00 00	 call	 ?CollisionDynamicSphere@CGraphicObjectInstance@@QBE_NABUCDynamicSphereInstance@@@Z ; CGraphicObjectInstance::CollisionDynamicSphere
  00034	84 c0		 test	 al, al
  00036	74 04		 je	 SHORT $LN15@RangeTestC

; 295  : 			{
; 296  : 				bHit = true;

  00038	c6 47 1c 01	 mov	 BYTE PTR [edi+28], 1
$LN15@RangeTestC:
  0003c	5f		 pop	 edi
$LN14@RangeTestC:
  0003d	5e		 pop	 esi
$LN7@RangeTestC:
; File C:\Marty 5.5\Src-Client\Client\eterlib\CullingManager.h

; 47   : 	}

  0003e	5d		 pop	 ebp
  0003f	c2 10 00	 ret	 16			; 00000010H
?RangeTestCallback@?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEXABVVector3d@@MPAVSpherePack@@W4ViewState@@@Z ENDP ; RangeTester<FCheckBackgroundDuringFlying>::RangeTestCallback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterlib\CullingManager.h
;	COMDAT ?VisibilityCallback@?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z
_TEXT	SEGMENT
_f$ = 8							; size = 4
_sphere$ = 12						; size = 4
_state$ = 16						; size = 4
?VisibilityCallback@?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z PROC ; RangeTester<FCheckBackgroundDuringFlying>::VisibilityCallback, COMDAT
; _this$ = ecx

; 37   : 	virtual void VisibilityCallback(const Frustum &f,SpherePack *sphere,ViewState state){};

  00000	c2 0c 00	 ret	 12			; 0000000cH
?VisibilityCallback@?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z ENDP ; RangeTester<FCheckBackgroundDuringFlying>::VisibilityCallback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterlib\CullingManager.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\eterlib\CullingManager.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\eterlib\CullingManager.h
;	COMDAT ?RayTraceCallback@?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEXABVVector3d@@0M0PAVSpherePack@@@Z
_TEXT	SEGMENT
_p1$ = 8						; size = 4
_dir$ = 12						; size = 4
_distance$ = 16						; size = 4
_sect$ = 20						; size = 4
_sphere$ = 24						; size = 4
?RayTraceCallback@?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEXABVVector3d@@0M0PAVSpherePack@@@Z PROC ; RangeTester<FCheckBackgroundDuringFlying>::RayTraceCallback, COMDAT
; _this$ = ecx

; 27   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 28   : #ifdef SPHERELIB_STRICT
; 29   : 		if (sphere->IS_SPHERE)
; 30   : 			puts("RangeTester::RayTraceCallback");
; 31   : #endif
; 32   : 		if (dist<=0.0f || dist>=distance)

  00003	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  00008	0f 57 c0	 xorps	 xmm0, xmm0
  0000b	0f 2f c1	 comiss	 xmm0, xmm1
  0000e	73 06		 jae	 SHORT $LN3@RayTraceCa
  00010	0f 2f 4d 10	 comiss	 xmm1, DWORD PTR _distance$[ebp]
  00014	72 35		 jb	 SHORT $LN8@RayTraceCa
$LN3@RayTraceCa:

; 33   : 			(*f)((CGraphicObjectInstance *)sphere->GetUserData());

  00016	8b 45 18	 mov	 eax, DWORD PTR _sphere$[ebp]
  00019	56		 push	 esi
  0001a	8b 70 44	 mov	 esi, DWORD PTR [eax+68]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 289  : 		if (!p)

  0001d	85 f6		 test	 esi, esi
  0001f	74 29		 je	 SHORT $LN15@RayTraceCa
; File C:\Marty 5.5\Src-Client\Client\eterlib\CullingManager.h

; 33   : 			(*f)((CGraphicObjectInstance *)sphere->GetUserData());

  00021	57		 push	 edi
  00022	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 292  : 		if (!bHit && p->GetType() != ACTOR_OBJECT)

  00025	80 7f 1c 00	 cmp	 BYTE PTR [edi+28], 0
  00029	75 1e		 jne	 SHORT $LN16@RayTraceCa
  0002b	8b 06		 mov	 eax, DWORD PTR [esi]
  0002d	8b ce		 mov	 ecx, esi
  0002f	ff 50 04	 call	 DWORD PTR [eax+4]
  00032	3d 24 6c a7 29	 cmp	 eax, 698838052		; 29a76c24H
  00037	74 10		 je	 SHORT $LN16@RayTraceCa

; 293  : 		{
; 294  : 			if (p->CollisionDynamicSphere(s))

  00039	57		 push	 edi
  0003a	8b ce		 mov	 ecx, esi
  0003c	e8 00 00 00 00	 call	 ?CollisionDynamicSphere@CGraphicObjectInstance@@QBE_NABUCDynamicSphereInstance@@@Z ; CGraphicObjectInstance::CollisionDynamicSphere
  00041	84 c0		 test	 al, al
  00043	74 04		 je	 SHORT $LN16@RayTraceCa

; 295  : 			{
; 296  : 				bHit = true;

  00045	c6 47 1c 01	 mov	 BYTE PTR [edi+28], 1
$LN16@RayTraceCa:
  00049	5f		 pop	 edi
$LN15@RayTraceCa:
  0004a	5e		 pop	 esi
$LN8@RayTraceCa:
; File C:\Marty 5.5\Src-Client\Client\eterlib\CullingManager.h

; 34   : 	};

  0004b	5d		 pop	 ebp
  0004c	c2 14 00	 ret	 20			; 00000014H
?RayTraceCallback@?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEXABVVector3d@@0M0PAVSpherePack@@@Z ENDP ; RangeTester<FCheckBackgroundDuringFlying>::RayTraceCallback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterlib\CullingManager.h
;	COMDAT ??1?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAE@XZ
_TEXT	SEGMENT
??1?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAE@XZ PROC ; RangeTester<FCheckBackgroundDuringFlying>::~RangeTester<FCheckBackgroundDuringFlying>, COMDAT
; _this$ = ecx

; 19   : 	{}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7SpherePackCallback@@6B@
  00006	c3		 ret	 0
??1?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAE@XZ ENDP ; RangeTester<FCheckBackgroundDuringFlying>::~RangeTester<FCheckBackgroundDuringFlying>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEPAXI@Z PROC ; RangeTester<FCheckAnotherMonsterDuringFlying>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SpherePackCallback@@6B@
  00010	74 0b		 je	 SHORT $LN4@scalar
  00012	6a 0c		 push	 12			; 0000000cH
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_G?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEPAXI@Z ENDP ; RangeTester<FCheckAnotherMonsterDuringFlying>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterlib\CullingManager.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\eterlib\CullingManager.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\eterlib\CullingManager.h
;	COMDAT ?PointTest2dCallback@?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEXABVVector3d@@PAVSpherePack@@W4ViewState@@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_sphere$ = 12						; size = 4
_state$ = 16						; size = 4
?PointTest2dCallback@?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEXABVVector3d@@PAVSpherePack@@W4ViewState@@@Z PROC ; RangeTester<FCheckAnotherMonsterDuringFlying>::PointTest2dCallback, COMDAT
; _this$ = ecx

; 50   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 51   : #ifdef SPHERELIB_STRICT
; 52   : 		if (sphere->IS_SPHERE)
; 53   : 			puts("RangeTester::PointTest2dCallback");
; 54   : #endif
; 55   : 		if (state!=VS_OUTSIDE)

  00003	83 7d 10 02	 cmp	 DWORD PTR _state$[ebp], 2
  00007	74 3b		 je	 SHORT $LN7@PointTest2

; 60   : 			(*f)((CGraphicObjectInstance *)sphere->GetUserData());

  00009	8b 45 0c	 mov	 eax, DWORD PTR _sphere$[ebp]
  0000c	56		 push	 esi
  0000d	8b 70 44	 mov	 esi, DWORD PTR [eax+68]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 320  : 		if (!p)

  00010	85 f6		 test	 esi, esi
  00012	74 2f		 je	 SHORT $LN15@PointTest2
; File C:\Marty 5.5\Src-Client\Client\eterlib\CullingManager.h

; 60   : 			(*f)((CGraphicObjectInstance *)sphere->GetUserData());

  00014	57		 push	 edi
  00015	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 323  : 		if (!pInst && p->GetType() == ACTOR_OBJECT)

  00018	83 7f 1c 00	 cmp	 DWORD PTR [edi+28], 0
  0001c	75 24		 jne	 SHORT $LN16@PointTest2
  0001e	8b 06		 mov	 eax, DWORD PTR [esi]
  00020	8b ce		 mov	 ecx, esi
  00022	ff 50 04	 call	 DWORD PTR [eax+4]
  00025	3d 24 6c a7 29	 cmp	 eax, 698838052		; 29a76c24H
  0002a	75 16		 jne	 SHORT $LN16@PointTest2

; 324  : 		{
; 325  : 			IActorInstance * pa = (IActorInstance*) p;
; 326  : 			if (pa != pOwner && pa->TestCollisionWithDynamicSphere(s))

  0002c	3b 77 20	 cmp	 esi, DWORD PTR [edi+32]
  0002f	74 11		 je	 SHORT $LN16@PointTest2
  00031	8b 06		 mov	 eax, DWORD PTR [esi]
  00033	8b ce		 mov	 ecx, esi
  00035	57		 push	 edi
  00036	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00039	ff d0		 call	 eax
  0003b	84 c0		 test	 al, al
  0003d	74 03		 je	 SHORT $LN16@PointTest2

; 327  : 			{
; 328  : 				pInst = p;

  0003f	89 77 1c	 mov	 DWORD PTR [edi+28], esi
$LN16@PointTest2:
  00042	5f		 pop	 edi
$LN15@PointTest2:
  00043	5e		 pop	 esi
$LN7@PointTest2:
; File C:\Marty 5.5\Src-Client\Client\eterlib\CullingManager.h

; 62   : 	}

  00044	5d		 pop	 ebp
  00045	c2 0c 00	 ret	 12			; 0000000cH
?PointTest2dCallback@?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEXABVVector3d@@PAVSpherePack@@W4ViewState@@@Z ENDP ; RangeTester<FCheckAnotherMonsterDuringFlying>::PointTest2dCallback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterlib\CullingManager.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\eterlib\CullingManager.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\eterlib\CullingManager.h
;	COMDAT ?RangeTestCallback@?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEXABVVector3d@@MPAVSpherePack@@W4ViewState@@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_distance$ = 12						; size = 4
_sphere$ = 16						; size = 4
_state$ = 20						; size = 4
?RangeTestCallback@?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEXABVVector3d@@MPAVSpherePack@@W4ViewState@@@Z PROC ; RangeTester<FCheckAnotherMonsterDuringFlying>::RangeTestCallback, COMDAT
; _this$ = ecx

; 40   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 41   : #ifdef SPHERELIB_STRICT
; 42   : 		if (sphere->IS_SPHERE)
; 43   : 			puts("RangeTester::RangeTestCallback");
; 44   : #endif
; 45   : 		if (state!=VS_OUTSIDE)

  00003	83 7d 14 02	 cmp	 DWORD PTR _state$[ebp], 2
  00007	74 3b		 je	 SHORT $LN7@RangeTestC

; 46   : 			(*f)((CGraphicObjectInstance *)sphere->GetUserData());

  00009	8b 45 10	 mov	 eax, DWORD PTR _sphere$[ebp]
  0000c	56		 push	 esi
  0000d	8b 70 44	 mov	 esi, DWORD PTR [eax+68]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 320  : 		if (!p)

  00010	85 f6		 test	 esi, esi
  00012	74 2f		 je	 SHORT $LN15@RangeTestC
; File C:\Marty 5.5\Src-Client\Client\eterlib\CullingManager.h

; 46   : 			(*f)((CGraphicObjectInstance *)sphere->GetUserData());

  00014	57		 push	 edi
  00015	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 323  : 		if (!pInst && p->GetType() == ACTOR_OBJECT)

  00018	83 7f 1c 00	 cmp	 DWORD PTR [edi+28], 0
  0001c	75 24		 jne	 SHORT $LN16@RangeTestC
  0001e	8b 06		 mov	 eax, DWORD PTR [esi]
  00020	8b ce		 mov	 ecx, esi
  00022	ff 50 04	 call	 DWORD PTR [eax+4]
  00025	3d 24 6c a7 29	 cmp	 eax, 698838052		; 29a76c24H
  0002a	75 16		 jne	 SHORT $LN16@RangeTestC

; 324  : 		{
; 325  : 			IActorInstance * pa = (IActorInstance*) p;
; 326  : 			if (pa != pOwner && pa->TestCollisionWithDynamicSphere(s))

  0002c	3b 77 20	 cmp	 esi, DWORD PTR [edi+32]
  0002f	74 11		 je	 SHORT $LN16@RangeTestC
  00031	8b 06		 mov	 eax, DWORD PTR [esi]
  00033	8b ce		 mov	 ecx, esi
  00035	57		 push	 edi
  00036	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00039	ff d0		 call	 eax
  0003b	84 c0		 test	 al, al
  0003d	74 03		 je	 SHORT $LN16@RangeTestC

; 327  : 			{
; 328  : 				pInst = p;

  0003f	89 77 1c	 mov	 DWORD PTR [edi+28], esi
$LN16@RangeTestC:
  00042	5f		 pop	 edi
$LN15@RangeTestC:
  00043	5e		 pop	 esi
$LN7@RangeTestC:
; File C:\Marty 5.5\Src-Client\Client\eterlib\CullingManager.h

; 47   : 	}

  00044	5d		 pop	 ebp
  00045	c2 10 00	 ret	 16			; 00000010H
?RangeTestCallback@?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEXABVVector3d@@MPAVSpherePack@@W4ViewState@@@Z ENDP ; RangeTester<FCheckAnotherMonsterDuringFlying>::RangeTestCallback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterlib\CullingManager.h
;	COMDAT ?VisibilityCallback@?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z
_TEXT	SEGMENT
_f$ = 8							; size = 4
_sphere$ = 12						; size = 4
_state$ = 16						; size = 4
?VisibilityCallback@?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z PROC ; RangeTester<FCheckAnotherMonsterDuringFlying>::VisibilityCallback, COMDAT
; _this$ = ecx

; 37   : 	virtual void VisibilityCallback(const Frustum &f,SpherePack *sphere,ViewState state){};

  00000	c2 0c 00	 ret	 12			; 0000000cH
?VisibilityCallback@?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z ENDP ; RangeTester<FCheckAnotherMonsterDuringFlying>::VisibilityCallback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterlib\CullingManager.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\eterlib\CullingManager.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\eterlib\CullingManager.h
;	COMDAT ?RayTraceCallback@?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEXABVVector3d@@0M0PAVSpherePack@@@Z
_TEXT	SEGMENT
_p1$ = 8						; size = 4
_dir$ = 12						; size = 4
_distance$ = 16						; size = 4
_sect$ = 20						; size = 4
_sphere$ = 24						; size = 4
?RayTraceCallback@?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEXABVVector3d@@0M0PAVSpherePack@@@Z PROC ; RangeTester<FCheckAnotherMonsterDuringFlying>::RayTraceCallback, COMDAT
; _this$ = ecx

; 27   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 28   : #ifdef SPHERELIB_STRICT
; 29   : 		if (sphere->IS_SPHERE)
; 30   : 			puts("RangeTester::RayTraceCallback");
; 31   : #endif
; 32   : 		if (dist<=0.0f || dist>=distance)

  00003	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  00008	0f 57 c0	 xorps	 xmm0, xmm0
  0000b	0f 2f c1	 comiss	 xmm0, xmm1
  0000e	73 06		 jae	 SHORT $LN3@RayTraceCa
  00010	0f 2f 4d 10	 comiss	 xmm1, DWORD PTR _distance$[ebp]
  00014	72 3b		 jb	 SHORT $LN8@RayTraceCa
$LN3@RayTraceCa:

; 33   : 			(*f)((CGraphicObjectInstance *)sphere->GetUserData());

  00016	8b 45 18	 mov	 eax, DWORD PTR _sphere$[ebp]
  00019	56		 push	 esi
  0001a	8b 70 44	 mov	 esi, DWORD PTR [eax+68]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 320  : 		if (!p)

  0001d	85 f6		 test	 esi, esi
  0001f	74 2f		 je	 SHORT $LN16@RayTraceCa
; File C:\Marty 5.5\Src-Client\Client\eterlib\CullingManager.h

; 33   : 			(*f)((CGraphicObjectInstance *)sphere->GetUserData());

  00021	57		 push	 edi
  00022	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 323  : 		if (!pInst && p->GetType() == ACTOR_OBJECT)

  00025	83 7f 1c 00	 cmp	 DWORD PTR [edi+28], 0
  00029	75 24		 jne	 SHORT $LN17@RayTraceCa
  0002b	8b 06		 mov	 eax, DWORD PTR [esi]
  0002d	8b ce		 mov	 ecx, esi
  0002f	ff 50 04	 call	 DWORD PTR [eax+4]
  00032	3d 24 6c a7 29	 cmp	 eax, 698838052		; 29a76c24H
  00037	75 16		 jne	 SHORT $LN17@RayTraceCa

; 324  : 		{
; 325  : 			IActorInstance * pa = (IActorInstance*) p;
; 326  : 			if (pa != pOwner && pa->TestCollisionWithDynamicSphere(s))

  00039	3b 77 20	 cmp	 esi, DWORD PTR [edi+32]
  0003c	74 11		 je	 SHORT $LN17@RayTraceCa
  0003e	8b 06		 mov	 eax, DWORD PTR [esi]
  00040	8b ce		 mov	 ecx, esi
  00042	57		 push	 edi
  00043	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00046	ff d0		 call	 eax
  00048	84 c0		 test	 al, al
  0004a	74 03		 je	 SHORT $LN17@RayTraceCa

; 327  : 			{
; 328  : 				pInst = p;

  0004c	89 77 1c	 mov	 DWORD PTR [edi+28], esi
$LN17@RayTraceCa:
  0004f	5f		 pop	 edi
$LN16@RayTraceCa:
  00050	5e		 pop	 esi
$LN8@RayTraceCa:
; File C:\Marty 5.5\Src-Client\Client\eterlib\CullingManager.h

; 34   : 	};

  00051	5d		 pop	 ebp
  00052	c2 14 00	 ret	 20			; 00000014H
?RayTraceCallback@?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEXABVVector3d@@0M0PAVSpherePack@@@Z ENDP ; RangeTester<FCheckAnotherMonsterDuringFlying>::RayTraceCallback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterlib\CullingManager.h
;	COMDAT ??1?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAE@XZ
_TEXT	SEGMENT
??1?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAE@XZ PROC ; RangeTester<FCheckAnotherMonsterDuringFlying>::~RangeTester<FCheckAnotherMonsterDuringFlying>, COMDAT
; _this$ = ecx

; 19   : 	{}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7SpherePackCallback@@6B@
  00006	c3		 ret	 0
??1?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAE@XZ ENDP ; RangeTester<FCheckAnotherMonsterDuringFlying>::~RangeTester<FCheckAnotherMonsterDuringFlying>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@KAXPAVCHeaderDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@KAXPAVCHeaderDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@KAXPAVCHeaderDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN24@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN24@CDynamicPo:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN27@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN27@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN33@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN49@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN49@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2051 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN33@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN58@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN74@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN74@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2051 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN58@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 142  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN71@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN92@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@KAXPAVCNullDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@KAXPAVCNullDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@KAXPAVCNullDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN24@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN24@CDynamicPo:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN27@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN27@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN33@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN49@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN49@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2051 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN33@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN58@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN74@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN74@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2051 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN58@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 142  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN71@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN92@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN24@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN24@CDynamicPo:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN27@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN27@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN33@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN49@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN49@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2051 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN33@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN58@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN74@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN74@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2051 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN58@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 142  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN71@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN92@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN24@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN24@CDynamicPo:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN27@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN27@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN33@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN49@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN49@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2051 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN33@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN58@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN74@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN74@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2051 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN58@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 142  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN71@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN92@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN24@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN24@CDynamicPo:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN27@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN27@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN33@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN49@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN49@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2051 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN33@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN58@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN74@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN74@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2051 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN58@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 142  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN71@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN92@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@KAXPAVCAirResistanceDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@KAXPAVCAirResistanceDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@KAXPAVCAirResistanceDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN24@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN24@CDynamicPo:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN27@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN27@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN33@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN49@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN49@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2051 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN33@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN58@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN74@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN74@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2051 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN58@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 142  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN71@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN92@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@KAXPAVCGravityDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@KAXPAVCGravityDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@KAXPAVCGravityDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN24@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN24@CDynamicPo:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN27@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN27@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN33@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN49@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN49@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2051 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN33@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN58@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN74@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN74@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2051 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN58@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 142  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN71@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN92@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@KAXPAVCRotationDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@KAXPAVCRotationDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@KAXPAVCRotationDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN24@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN24@CDynamicPo:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN27@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN27@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN33@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN49@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN49@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2051 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN33@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN58@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN74@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN74@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2051 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN58@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 142  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN71@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN92@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@PAVIActorInstance@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@1@PAU?$_Tree_node@PAVIActorInstance@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@PAVIActorInstance@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@1@PAU?$_Tree_node@PAVIActorInstance@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<IActorInstance *> >::_Erase_tree<std::allocator<std::_Tree_node<IActorInstance *,void *> > >, COMDAT
; _this$ = ecx

; 744  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000e	75 25		 jne	 SHORT $LN3@Erase_tree
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR __Al$[ebp]
$LL2@Erase_tree:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00014	ff 76 08	 push	 DWORD PTR [esi+8]
  00017	8b cb		 mov	 ecx, ebx
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@PAVIActorInstance@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@1@PAU?$_Tree_node@PAVIActorInstance@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<IActorInstance *> >::_Erase_tree<std::allocator<std::_Tree_node<IActorInstance *,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 754  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001f	8b c6		 mov	 eax, esi

; 755  :     _Val         = static_cast<_Other&&>(_New_val);

  00021	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00023	6a 14		 push	 20			; 00000014H
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00032	74 e0		 je	 SHORT $LL2@Erase_tree
  00034	5f		 pop	 edi
$LN3@Erase_tree:
  00035	5e		 pop	 esi

; 747  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 748  :         }
; 749  :     }

  00036	5b		 pop	 ebx
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@PAVIActorInstance@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@1@PAU?$_Tree_node@PAVIActorInstance@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<IActorInstance *> >::_Erase_tree<std::allocator<std::_Tree_node<IActorInstance *,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@CFlyingInstance@@2V?$CDynamicPool@VCFlyingInstance@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@CFlyingInstance@@2V?$CDynamicPool@VCFlyingInstance@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CFlyingInstance::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CFlyingInstance@@2V?$CDynamicPool@VCFlyingInstance@@@@A ; CFlyingInstance::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPool@VCFlyingInstance@@@@UAE@XZ ; CDynamicPool<CFlyingInstance>::~CDynamicPool<CFlyingInstance>
??__F?ms_kPool@CFlyingInstance@@2V?$CDynamicPool@VCFlyingInstance@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CFlyingInstance::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
;	COMDAT ??__E?ms_kPool@CFlyingInstance@@2V?$CDynamicPool@VCFlyingInstance@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@CFlyingInstance@@2V?$CDynamicPool@VCFlyingInstance@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CFlyingInstance::ms_kPool'', COMDAT

; 14   : CDynamicPool<CFlyingInstance> CFlyingInstance::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@CFlyingInstance@@2V?$CDynamicPool@VCFlyingInstance@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CFlyingInstance::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@CFlyingInstance@@2V?$CDynamicPool@VCFlyingInstance@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CFlyingInstance::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPool@VCFlyingInstance@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPool@VCFlyingInstance@@@@UAEPAXI@Z PROC	; CDynamicPool<CFlyingInstance>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPool@VCFlyingInstance@@@@UAE@XZ ; CDynamicPool<CFlyingInstance>::~CDynamicPool<CFlyingInstance>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPool@VCFlyingInstance@@@@UAEPAXI@Z ENDP	; CDynamicPool<CFlyingInstance>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPool@VCFlyingInstance@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPool@VCFlyingInstance@@@@UAE@XZ PROC	; CDynamicPool<CFlyingInstance>::~CDynamicPool<CFlyingInstance>, COMDAT
; _this$ = ecx

; 18   : 		{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDynamicPool@VCFlyingInstance@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000c	85 c0		 test	 eax, eax
  0000e	74 41		 je	 SHORT $LN6@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00013	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 12		 jb	 SHORT $LN22@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00020	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00023	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00026	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00028	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002e	77 6b		 ja	 SHORT $LN44@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b c2		 mov	 eax, edx
$LN22@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00039	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00040	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  00043	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 2051 :             _Myend   = nullptr;

  0004a	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN6@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00051	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00054	85 c0		 test	 eax, eax
  00056	74 41		 je	 SHORT $LN31@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00058	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0005b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0005d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00060	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00066	72 12		 jb	 SHORT $LN47@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00068	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0006b	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0006e	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00070	83 c0 fc	 add	 eax, -4			; fffffffcH
  00073	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00076	77 23		 ja	 SHORT $LN44@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00078	8b c2		 mov	 eax, edx
$LN47@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0007a	51		 push	 ecx
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00081	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00088	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  0008b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 2051 :             _Myend   = nullptr;

  00092	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN31@CDynamicPo:
  00099	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 26   : 		}

  0009a	c3		 ret	 0
$LN44@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0009b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN58@CDynamicPo:
  000a0	cc		 int	 3
??1?$CDynamicPool@VCFlyingInstance@@@@UAE@XZ ENDP	; CDynamicPool<CFlyingInstance>::~CDynamicPool<CFlyingInstance>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCFlyingInstance@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCFlyingInstance@@UAEPAXI@Z PROC			; CFlyingInstance::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CFlyingInstance@@UAE@XZ ; CFlyingInstance::~CFlyingInstance
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 a8 00 00 00	 push	 168			; 000000a8H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCFlyingInstance@@UAEPAXI@Z ENDP			; CFlyingInstance::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@PAVIActorInstance@@@std@@@std@@QAEPAU?$_Tree_node@PAVIActorInstance@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@PAVIActorInstance@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@PAVIActorInstance@@@std@@@std@@QAEPAU?$_Tree_node@PAVIActorInstance@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@PAVIActorInstance@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<IActorInstance *> >::_Insert_node, COMDAT
; _this$ = ecx

; 646  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 647  :         ++_Mysize;
; 648  :         const auto _Head  = _Myhead;
; 649  :         _Newnode->_Parent = _Loc._Parent;

  00004	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0000e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00010	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00013	89 45 fc	 mov	 DWORD PTR __Head$1$[ebp], eax
  00016	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 650  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  00019	3b d0		 cmp	 edx, eax
  0001b	75 16		 jne	 SHORT $LN5@Insert_nod

; 651  :             _Head->_Left     = _Newnode;

  0001d	89 38		 mov	 DWORD PTR [eax], edi

; 652  :             _Head->_Parent   = _Newnode;

  0001f	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 653  :             _Head->_Right    = _Newnode;

  00022	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 712  :         return _Newnode;
; 713  :     }

  00025	8b c7		 mov	 eax, edi
  00027	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
  0002b	5f		 pop	 edi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 654  :             _Newnode->_Color = _Black; // the root is black
; 655  :             return _Newnode;
; 656  :         }
; 657  : 
; 658  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 659  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00033	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00037	75 0d		 jne	 SHORT $LN6@Insert_nod

; 660  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 661  :             _Loc._Parent->_Right = _Newnode;

  00039	89 7a 08	 mov	 DWORD PTR [edx+8], edi

; 662  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003c	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003f	75 0d		 jne	 SHORT $LN9@Insert_nod

; 663  :                 _Head->_Right = _Newnode;

  00041	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 664  :             }
; 665  :         } else { // add to left of _Loc._Parent

  00044	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 666  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 667  :             _Loc._Parent->_Left = _Newnode;

  00046	89 3a		 mov	 DWORD PTR [edx], edi

; 668  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00048	3b 10		 cmp	 edx, DWORD PTR [eax]
  0004a	75 02		 jne	 SHORT $LN9@Insert_nod

; 669  :                 _Head->_Left = _Newnode;

  0004c	89 38		 mov	 DWORD PTR [eax], edi
$LN9@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00051	8b c7		 mov	 eax, edi
  00053	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00057	0f 85 7d 01 00
	00		 jne	 $LN3@Insert_nod
  0005d	56		 push	 esi
  0005e	66 90		 npad	 2
$LL2@Insert_nod:

; 674  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00063	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	3b d1		 cmp	 edx, ecx
  0006a	0f 85 aa 00 00
	00		 jne	 $LN10@Insert_nod

; 675  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00070	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 676  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00073	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00077	0f 84 a3 00 00
	00		 je	 $LN76@Insert_nod

; 677  :                     _Pnode->_Parent->_Color          = _Black;
; 678  :                     _Parent_sibling->_Color          = _Black;
; 679  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 680  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 681  :                 } else { // parent's sibling has red and black children
; 682  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  0007d	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00080	3b c6		 cmp	 eax, esi
  00082	75 37		 jne	 SHORT $LN51@Insert_nod

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00084	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 683  :                         _Pnode = _Pnode->_Parent;

  00086	8b c2		 mov	 eax, edx

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00088	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0008b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00091	75 03		 jne	 SHORT $LN20@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  00093	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN20@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  00096	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00099	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  0009c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0009e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000a1	75 05		 jne	 SHORT $LN21@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  000a3	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  000a6	eb 0e		 jmp	 SHORT $LN24@Insert_nod
$LN21@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000a8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ab	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000ad	75 04		 jne	 SHORT $LN23@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  000af	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  000b1	eb 03		 jmp	 SHORT $LN24@Insert_nod
$LN23@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  000b3	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN24@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 479  :         _Wherenode->_Parent = _Pnode;

  000b8	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN51@Insert_nod:

; 684  :                         _Lrotate(_Pnode);
; 685  :                     }
; 686  : 
; 687  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 688  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c8	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 689  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 483  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000d2	8b 32		 mov	 esi, DWORD PTR [edx]

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  000d4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000d7	89 0a		 mov	 DWORD PTR [edx], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  000d9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000dc	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000e0	75 03		 jne	 SHORT $LN27@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  000e2	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN27@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  000e5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000e8	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  000eb	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000ed	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000f0	75 0b		 jne	 SHORT $LN28@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  000f2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  000f5	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  000f8	e9 cc 00 00 00	 jmp	 $LN75@Insert_nod
$LN28@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  000fd	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00100	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00103	75 0b		 jne	 SHORT $LN30@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00105	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00108	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  0010b	e9 b9 00 00 00	 jmp	 $LN75@Insert_nod
$LN30@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00110	89 31		 mov	 DWORD PTR [ecx], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00112	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  00115	e9 af 00 00 00	 jmp	 $LN75@Insert_nod
$LN10@Insert_nod:

; 692  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 693  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  0011a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0011e	75 1d		 jne	 SHORT $LN15@Insert_nod
$LN76@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00120	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1
  00124	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  00128	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0012e	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00132	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00135	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00138	e9 8f 00 00 00	 jmp	 $LN46@Insert_nod
$LN15@Insert_nod:

; 694  :                     _Pnode->_Parent->_Color          = _Black;
; 695  :                     _Parent_sibling->_Color          = _Black;
; 696  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 697  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 698  :                 } else { // parent's sibling has red and black children
; 699  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  0013d	8b 32		 mov	 esi, DWORD PTR [edx]
  0013f	3b c6		 cmp	 eax, esi
  00141	75 3a		 jne	 SHORT $LN39@Insert_nod

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00143	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 700  :                         _Pnode = _Pnode->_Parent;

  00146	8b c2		 mov	 eax, edx

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00148	89 08		 mov	 DWORD PTR [eax], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  0014a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0014d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00151	75 03		 jne	 SHORT $LN34@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  00153	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN34@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  00156	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00159	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  0015c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0015e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00161	75 05		 jne	 SHORT $LN35@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  00163	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00166	eb 0f		 jmp	 SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00168	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0016b	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0016e	75 05		 jne	 SHORT $LN37@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00170	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 496  :         } else {

  00173	eb 02		 jmp	 SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00175	89 31		 mov	 DWORD PTR [ecx], esi
$LN38@Insert_nod:

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00177	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 501  :         _Wherenode->_Parent = _Pnode;

  0017a	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN39@Insert_nod:

; 701  :                         _Rrotate(_Pnode);
; 702  :                     }
; 703  : 
; 704  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  0017d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 705  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00184	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00187	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0018a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 706  :                     _Lrotate(_Pnode->_Parent->_Parent);

  0018e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00191	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 461  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00194	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00197	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00199	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0019c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0019e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a2	75 03		 jne	 SHORT $LN41@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  001a4	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN41@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  001a7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001aa	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  001ad	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001af	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  001b2	75 05		 jne	 SHORT $LN42@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  001b4	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  001b7	eb 0e		 jmp	 SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001b9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001bc	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001be	75 04		 jne	 SHORT $LN44@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  001c2	eb 03		 jmp	 SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  001c4	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN45@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  001c7	89 16		 mov	 DWORD PTR [esi], edx
$LN75@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001c9	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN46@Insert_nod:
  001cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001cf	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001d3	0f 84 87 fe ff
	ff		 je	 $LL2@Insert_nod
  001d9	5e		 pop	 esi
$LN3@Insert_nod:

; 707  :                 }
; 708  :             }
; 709  :         }
; 710  : 
; 711  :         _Head->_Parent->_Color = _Black; // root is always black

  001da	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]
  001dd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e0	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 712  :         return _Newnode;
; 713  :     }

  001e4	8b c7		 mov	 eax, edi
  001e6	5f		 pop	 edi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@PAVIActorInstance@@@std@@@std@@QAEPAU?$_Tree_node@PAVIActorInstance@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@PAVIActorInstance@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<IActorInstance *> >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tset_traits@PAVIActorInstance@@U?$less@PAVIActorInstance@@@std@@V?$allocator@PAVIActorInstance@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree@V?$_Tset_traits@PAVIActorInstance@@U?$less@PAVIActorInstance@@@std@@V?$allocator@PAVIActorInstance@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tset_traits<IActorInstance *,std::less<IActorInstance *>,std::allocator<IActorInstance *>,0> >::~_Tree<std::_Tset_traits<IActorInstance *,std::less<IActorInstance *>,std::allocator<IActorInstance *>,0> >, COMDAT
; _this$ = ecx

; 1080 :     ~_Tree() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00009	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000d	75 21		 jne	 SHORT $LN7@Tree
  0000f	90		 npad	 1
$LL6@Tree:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00010	ff 76 08	 push	 DWORD PTR [esi+8]
  00013	8b cf		 mov	 ecx, edi
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@PAVIActorInstance@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@1@PAU?$_Tree_node@PAVIActorInstance@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<IActorInstance *> >::_Erase_tree<std::allocator<std::_Tree_node<IActorInstance *,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 754  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001b	8b c6		 mov	 eax, esi

; 755  :     _Val         = static_cast<_Other&&>(_New_val);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  0001f	6a 14		 push	 20			; 00000014H
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0002e	74 e0		 je	 SHORT $LL6@Tree
$LN7@Tree:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00030	6a 14		 push	 20			; 00000014H
  00032	ff 37		 push	 DWORD PTR [edi]
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00039	83 c4 08	 add	 esp, 8
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1087 :     }

  0003e	c3		 ret	 0
??1?$_Tree@V?$_Tset_traits@PAVIActorInstance@@U?$less@PAVIActorInstance@@@std@@V?$allocator@PAVIActorInstance@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tset_traits<IActorInstance *,std::less<IActorInstance *>,std::allocator<IActorInstance *>,0> >::~_Tree<std::_Tset_traits<IActorInstance *,std::less<IActorInstance *>,std::allocator<IActorInstance *>,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?_Xlength@?$vector@UTAttachEffectInstance@CFlyingInstance@@V?$allocator@UTAttachEffectInstance@CFlyingInstance@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@UTAttachEffectInstance@CFlyingInstance@@V?$allocator@UTAttachEffectInstance@CFlyingInstance@@@std@@@std@@CAXXZ PROC ; std::vector<CFlyingInstance::TAttachEffectInstance,std::allocator<CFlyingInstance::TAttachEffectInstance> >::_Xlength, COMDAT

; 2138 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@UTAttachEffectInstance@CFlyingInstance@@V?$allocator@UTAttachEffectInstance@CFlyingInstance@@@std@@@std@@CAXXZ ENDP ; std::vector<CFlyingInstance::TAttachEffectInstance,std::allocator<CFlyingInstance::TAttachEffectInstance> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??1?$vector@UTAttachEffectInstance@CFlyingInstance@@V?$allocator@UTAttachEffectInstance@CFlyingInstance@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UTAttachEffectInstance@CFlyingInstance@@V?$allocator@UTAttachEffectInstance@CFlyingInstance@@@std@@@std@@QAE@XZ PROC ; std::vector<CFlyingInstance::TAttachEffectInstance,std::allocator<CFlyingInstance::TAttachEffectInstance> >::~vector<CFlyingInstance::TAttachEffectInstance,std::allocator<CFlyingInstance::TAttachEffectInstance> >, COMDAT
; _this$ = ecx

; 766  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	85 f6		 test	 esi, esi
  00008	74 53		 je	 SHORT $LN4@vector

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000a	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0000d	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00012	2b ce		 sub	 ecx, esi
  00014	f7 e9		 imul	 ecx
  00016	d1 fa		 sar	 edx, 1
  00018	8b c2		 mov	 eax, edx
  0001a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001d	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0001f	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00022	c1 e1 02	 shl	 ecx, 2

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00025	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002b	72 12		 jb	 SHORT $LN20@vector

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0002d	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00030	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00033	2b f2		 sub	 esi, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00035	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00038	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0003b	77 23		 ja	 SHORT $LN17@vector

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0003d	8b f2		 mov	 esi, edx
$LN20@vector:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0003f	51		 push	 ecx
  00040	56		 push	 esi
  00041	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00046	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  0004c	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  0004f	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 2051 :             _Myend   = nullptr;

  00056	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN4@vector:
  0005d	5f		 pop	 edi

; 772  :     }

  0005e	5e		 pop	 esi
  0005f	c3		 ret	 0
$LN17@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00060	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN28@vector:
  00065	cc		 int	 3
??1?$vector@UTAttachEffectInstance@CFlyingInstance@@V?$allocator@UTAttachEffectInstance@CFlyingInstance@@@std@@@std@@QAE@XZ ENDP ; std::vector<CFlyingInstance::TAttachEffectInstance,std::allocator<CFlyingInstance::TAttachEffectInstance> >::~vector<CFlyingInstance::TAttachEffectInstance,std::allocator<CFlyingInstance::TAttachEffectInstance> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
;	COMDAT ?__SetTargetNormalizedDirection@CFlyingInstance@@IAEXABUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
_q$ = -28						; size = 16
$T1 = -12						; size = 12
_f$1$ = 8						; size = 4
_f$1$ = 8						; size = 4
tv1233 = 8						; size = 4
tv1184 = 8						; size = 4
_v3NomalizedDirection$ = 8				; size = 4
?__SetTargetNormalizedDirection@CFlyingInstance@@IAEXABUD3DXVECTOR3@@@Z PROC ; CFlyingInstance::__SetTargetNormalizedDirection, COMDAT
; _this$ = ecx

; 126  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	56		 push	 esi
  00007	57		 push	 edi

; 127  : 	D3DXQUATERNION q = SafeRotationNormalizedArc(D3DXVECTOR3(0.0f,-1.0f,0.0f),v3NomalizedDirection);

  00008	ff 75 08	 push	 DWORD PTR _v3NomalizedDirection$[ebp]
  0000b	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 180  :     x = fx;

  0000e	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 127  : 	D3DXQUATERNION q = SafeRotationNormalizedArc(D3DXVECTOR3(0.0f,-1.0f,0.0f),v3NomalizedDirection);

  00015	50		 push	 eax
  00016	8d 45 e4	 lea	 eax, DWORD PTR _q$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 181  :     y = fy;

  00019	c7 45 f8 00 00
	80 bf		 mov	 DWORD PTR $T1[ebp+4], -1082130432 ; bf800000H
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 127  : 	D3DXQUATERNION q = SafeRotationNormalizedArc(D3DXVECTOR3(0.0f,-1.0f,0.0f),v3NomalizedDirection);

  00020	50		 push	 eax
  00021	8b f9		 mov	 edi, ecx
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00023	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T1[ebp+8], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 127  : 	D3DXQUATERNION q = SafeRotationNormalizedArc(D3DXVECTOR3(0.0f,-1.0f,0.0f),v3NomalizedDirection);

  0002a	e8 00 00 00 00	 call	 ?SafeRotationNormalizedArc@@YA?AUD3DXQUATERNION@@ABUD3DXVECTOR3@@0@Z ; SafeRotationNormalizedArc
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 128  : 	D3DXQuaternionMultiply(&m_qRot,&m_qRot,&q);

  00032	8d 45 e4	 lea	 eax, DWORD PTR _q$[ebp]
  00035	8d 77 0c	 lea	 esi, DWORD PTR [edi+12]
  00038	50		 push	 eax
  00039	56		 push	 esi
  0003a	56		 push	 esi
  0003b	e8 00 00 00 00	 call	 _D3DXQuaternionMultiply@12
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00040	f3 0f 10 0e	 movss	 xmm1, DWORD PTR [esi]
  00044	f3 0f 10 7f 48	 movss	 xmm7, DWORD PTR [edi+72]
  00049	0f 28 d1	 movaps	 xmm2, xmm1
  0004c	f3 0f 10 5f 4c	 movss	 xmm3, DWORD PTR [edi+76]
  00051	f3 0f 10 6f 44	 movss	 xmm5, DWORD PTR [edi+68]
  00056	f3 0f 59 d3	 mulss	 xmm2, xmm3
  0005a	0f 28 c5	 movaps	 xmm0, xmm5
  0005d	f3 0f 59 46 08	 mulss	 xmm0, DWORD PTR [esi+8]
  00062	f3 0f 59 5e 04	 mulss	 xmm3, DWORD PTR [esi+4]

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  00067	f3 0f 59 6e 04	 mulss	 xmm5, DWORD PTR [esi+4]
  0006c	f3 0f 5c d0	 subss	 xmm2, xmm0
  00070	f3 0f 59 cf	 mulss	 xmm1, xmm7
  00074	f3 0f 59 7e 08	 mulss	 xmm7, DWORD PTR [esi+8]
  00079	f3 0f 5c e9	 subss	 xmm5, xmm1
  0007d	f3 0f 5c fb	 subss	 xmm7, xmm3

; 1280 : 
; 1281 :     *pOut = v;

  00081	f3 0f 11 7f 38	 movss	 DWORD PTR [edi+56], xmm7
  00086	f3 0f 11 57 3c	 movss	 DWORD PTR [edi+60], xmm2
  0008b	f3 0f 11 6f 40	 movss	 DWORD PTR [edi+64], xmm5
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 113  : 	*pvout *= -2*pq->w;

  00090	f3 0f 10 46 0c	 movss	 xmm0, DWORD PTR [esi+12]
  00095	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@c0000000
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 222  :     x *= f;

  0009d	0f 28 e0	 movaps	 xmm4, xmm0

; 223  :     y *= f;

  000a0	0f 28 f0	 movaps	 xmm6, xmm0

; 224  :     z *= f;

  000a3	f3 0f 59 47 40	 mulss	 xmm0, DWORD PTR [edi+64]
  000a8	f3 0f 59 67 38	 mulss	 xmm4, DWORD PTR [edi+56]
  000ad	f3 0f 59 77 3c	 mulss	 xmm6, DWORD PTR [edi+60]
  000b2	f3 0f 11 47 40	 movss	 DWORD PTR [edi+64], xmm0
  000b7	f3 0f 11 67 38	 movss	 DWORD PTR [edi+56], xmm4
  000bc	f3 0f 11 77 3c	 movss	 DWORD PTR [edi+60], xmm6

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  000c1	f3 0f 10 56 04	 movss	 xmm2, DWORD PTR [esi+4]
  000c6	f3 0f 10 4e 08	 movss	 xmm1, DWORD PTR [esi+8]
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 114  : 	*pvout += (pq->w*pq->w - D3DXVec3LengthSq((D3DXVECTOR3*)pq))*(*pv);

  000cb	f3 0f 10 5e 0c	 movss	 xmm3, DWORD PTR [esi+12]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  000d0	f3 0f 10 7f 48	 movss	 xmm7, DWORD PTR [edi+72]

; 224  :     z *= f;

  000d5	f3 0f 11 45 08	 movss	 DWORD PTR _f$1$[ebp], xmm0

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  000da	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  000de	f3 0f 59 c0	 mulss	 xmm0, xmm0
  000e2	f3 0f 59 d2	 mulss	 xmm2, xmm2
  000e6	f3 0f 59 c9	 mulss	 xmm1, xmm1
  000ea	f3 0f 58 d0	 addss	 xmm2, xmm0
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 114  : 	*pvout += (pq->w*pq->w - D3DXVec3LengthSq((D3DXVECTOR3*)pq))*(*pv);

  000ee	f3 0f 59 db	 mulss	 xmm3, xmm3
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  000f2	f3 0f 10 47 4c	 movss	 xmm0, DWORD PTR [edi+76]

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  000f7	f3 0f 58 d1	 addss	 xmm2, xmm1
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 114  : 	*pvout += (pq->w*pq->w - D3DXVec3LengthSq((D3DXVECTOR3*)pq))*(*pv);

  000fb	f3 0f 5c da	 subss	 xmm3, xmm2
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  000ff	f3 0f 59 c3	 mulss	 xmm0, xmm3
  00103	0f 28 eb	 movaps	 xmm5, xmm3
  00106	f3 0f 59 6f 44	 mulss	 xmm5, DWORD PTR [edi+68]

; 205  :     y += v.y;

  0010b	f3 0f 58 45 08	 addss	 xmm0, DWORD PTR _f$1$[ebp]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00110	f3 0f 59 fb	 mulss	 xmm7, xmm3

; 182  :     z = fz;

  00114	f3 0f 58 ec	 addss	 xmm5, xmm4

; 204  :     x += v.x;

  00118	f3 0f 58 fe	 addss	 xmm7, xmm6

; 206  :     z += v.z;

  0011c	f3 0f 11 47 40	 movss	 DWORD PTR [edi+64], xmm0
  00121	f3 0f 11 45 08	 movss	 DWORD PTR tv1184[ebp], xmm0
  00126	f3 0f 11 6f 38	 movss	 DWORD PTR [edi+56], xmm5
  0012b	f3 0f 11 7f 3c	 movss	 DWORD PTR [edi+60], xmm7

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00130	f3 0f 10 5e 04	 movss	 xmm3, DWORD PTR [esi+4]
  00135	f3 0f 10 0e	 movss	 xmm1, DWORD PTR [esi]
  00139	0f 28 c3	 movaps	 xmm0, xmm3
  0013c	f3 0f 59 47 48	 mulss	 xmm0, DWORD PTR [edi+72]
  00141	0f 28 d1	 movaps	 xmm2, xmm1
  00144	f3 0f 59 57 44	 mulss	 xmm2, DWORD PTR [edi+68]
  00149	f3 0f 10 66 08	 movss	 xmm4, DWORD PTR [esi+8]
  0014e	f3 0f 58 d0	 addss	 xmm2, xmm0
  00152	0f 28 c4	 movaps	 xmm0, xmm4
  00155	f3 0f 59 47 4c	 mulss	 xmm0, DWORD PTR [edi+76]
  0015a	f3 0f 58 d0	 addss	 xmm2, xmm0
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 115  : 	*pvout += 2*D3DXVec3Dot((D3DXVECTOR3*)pq,pv)*(*(D3DXVECTOR3*)pq);

  0015e	f3 0f 58 d2	 addss	 xmm2, xmm2
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00162	f3 0f 59 ca	 mulss	 xmm1, xmm2
  00166	f3 0f 59 da	 mulss	 xmm3, xmm2
  0016a	f3 0f 59 e2	 mulss	 xmm4, xmm2

; 182  :     z = fz;

  0016e	f3 0f 58 cd	 addss	 xmm1, xmm5

; 204  :     x += v.x;

  00172	f3 0f 58 df	 addss	 xmm3, xmm7

; 205  :     y += v.y;

  00176	f3 0f 58 65 08	 addss	 xmm4, DWORD PTR tv1184[ebp]
  0017b	f3 0f 11 4f 38	 movss	 DWORD PTR [edi+56], xmm1
  00180	f3 0f 11 5f 3c	 movss	 DWORD PTR [edi+60], xmm3

; 206  :     z += v.z;

  00185	f3 0f 11 67 40	 movss	 DWORD PTR [edi+64], xmm4
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 130  : 	Vec3TransformQuaternion(&m_v3Accel, &m_pData->m_v3Accel, &m_qRot);

  0018a	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  0018d	f3 0f 10 7e 08	 movss	 xmm7, DWORD PTR [esi+8]
  00192	f3 0f 10 5e 04	 movss	 xmm3, DWORD PTR [esi+4]

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00197	f3 0f 10 0e	 movss	 xmm1, DWORD PTR [esi]
  0019b	f3 0f 10 70 78	 movss	 xmm6, DWORD PTR [eax+120]
  001a0	0f 28 d1	 movaps	 xmm2, xmm1
  001a3	f3 0f 59 90 80
	00 00 00	 mulss	 xmm2, DWORD PTR [eax+128]
  001ab	0f 28 c6	 movaps	 xmm0, xmm6

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  001ae	f3 0f 59 48 7c	 mulss	 xmm1, DWORD PTR [eax+124]
  001b3	f3 0f 59 c7	 mulss	 xmm0, xmm7
  001b7	f3 0f 59 78 7c	 mulss	 xmm7, DWORD PTR [eax+124]
  001bc	f3 0f 5c d0	 subss	 xmm2, xmm0
  001c0	f3 0f 59 f3	 mulss	 xmm6, xmm3
  001c4	f3 0f 59 98 80
	00 00 00	 mulss	 xmm3, DWORD PTR [eax+128]
  001cc	f3 0f 5c f1	 subss	 xmm6, xmm1
  001d0	f3 0f 5c fb	 subss	 xmm7, xmm3

; 1280 : 
; 1281 :     *pOut = v;

  001d4	f3 0f 11 7f 50	 movss	 DWORD PTR [edi+80], xmm7
  001d9	f3 0f 11 57 54	 movss	 DWORD PTR [edi+84], xmm2
  001de	f3 0f 11 77 58	 movss	 DWORD PTR [edi+88], xmm6
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 113  : 	*pvout *= -2*pq->w;

  001e3	f3 0f 10 46 0c	 movss	 xmm0, DWORD PTR [esi+12]
  001e8	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@c0000000
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 222  :     x *= f;

  001f0	0f 28 e0	 movaps	 xmm4, xmm0

; 223  :     y *= f;

  001f3	0f 28 f0	 movaps	 xmm6, xmm0

; 224  :     z *= f;

  001f6	f3 0f 59 47 58	 mulss	 xmm0, DWORD PTR [edi+88]
  001fb	f3 0f 59 67 50	 mulss	 xmm4, DWORD PTR [edi+80]
  00200	f3 0f 59 77 54	 mulss	 xmm6, DWORD PTR [edi+84]
  00205	f3 0f 11 47 58	 movss	 DWORD PTR [edi+88], xmm0
  0020a	f3 0f 11 67 50	 movss	 DWORD PTR [edi+80], xmm4
  0020f	f3 0f 11 77 54	 movss	 DWORD PTR [edi+84], xmm6

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00214	f3 0f 10 56 04	 movss	 xmm2, DWORD PTR [esi+4]
  00219	f3 0f 10 4e 08	 movss	 xmm1, DWORD PTR [esi+8]
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 114  : 	*pvout += (pq->w*pq->w - D3DXVec3LengthSq((D3DXVECTOR3*)pq))*(*pv);

  0021e	f3 0f 10 5e 0c	 movss	 xmm3, DWORD PTR [esi+12]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00223	f3 0f 10 78 7c	 movss	 xmm7, DWORD PTR [eax+124]

; 224  :     z *= f;

  00228	f3 0f 11 45 08	 movss	 DWORD PTR _f$1$[ebp], xmm0

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0022d	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  00231	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00235	f3 0f 59 d2	 mulss	 xmm2, xmm2
  00239	f3 0f 59 c9	 mulss	 xmm1, xmm1
  0023d	f3 0f 58 d0	 addss	 xmm2, xmm0
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 114  : 	*pvout += (pq->w*pq->w - D3DXVec3LengthSq((D3DXVECTOR3*)pq))*(*pv);

  00241	f3 0f 59 db	 mulss	 xmm3, xmm3
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00245	f3 0f 10 80 80
	00 00 00	 movss	 xmm0, DWORD PTR [eax+128]

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0024d	f3 0f 58 d1	 addss	 xmm2, xmm1
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 114  : 	*pvout += (pq->w*pq->w - D3DXVec3LengthSq((D3DXVECTOR3*)pq))*(*pv);

  00251	f3 0f 5c da	 subss	 xmm3, xmm2
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00255	f3 0f 59 c3	 mulss	 xmm0, xmm3
  00259	0f 28 eb	 movaps	 xmm5, xmm3
  0025c	f3 0f 59 68 78	 mulss	 xmm5, DWORD PTR [eax+120]

; 205  :     y += v.y;

  00261	f3 0f 58 45 08	 addss	 xmm0, DWORD PTR _f$1$[ebp]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00266	f3 0f 59 fb	 mulss	 xmm7, xmm3

; 182  :     z = fz;

  0026a	f3 0f 58 ec	 addss	 xmm5, xmm4

; 206  :     z += v.z;

  0026e	f3 0f 11 47 58	 movss	 DWORD PTR [edi+88], xmm0
  00273	f3 0f 58 fe	 addss	 xmm7, xmm6
  00277	f3 0f 11 45 08	 movss	 DWORD PTR tv1233[ebp], xmm0
  0027c	f3 0f 11 6f 50	 movss	 DWORD PTR [edi+80], xmm5
  00281	f3 0f 11 7f 54	 movss	 DWORD PTR [edi+84], xmm7

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00286	f3 0f 10 0e	 movss	 xmm1, DWORD PTR [esi]
  0028a	f3 0f 10 5e 04	 movss	 xmm3, DWORD PTR [esi+4]
  0028f	0f 28 c1	 movaps	 xmm0, xmm1
  00292	f3 0f 59 40 78	 mulss	 xmm0, DWORD PTR [eax+120]
  00297	0f 28 d3	 movaps	 xmm2, xmm3
  0029a	f3 0f 59 50 7c	 mulss	 xmm2, DWORD PTR [eax+124]
  0029f	f3 0f 10 66 08	 movss	 xmm4, DWORD PTR [esi+8]
  002a4	f3 0f 58 d0	 addss	 xmm2, xmm0
  002a8	0f 28 c4	 movaps	 xmm0, xmm4
  002ab	f3 0f 59 80 80
	00 00 00	 mulss	 xmm0, DWORD PTR [eax+128]
  002b3	f3 0f 58 d0	 addss	 xmm2, xmm0
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 115  : 	*pvout += 2*D3DXVec3Dot((D3DXVECTOR3*)pq,pv)*(*(D3DXVECTOR3*)pq);

  002b7	f3 0f 58 d2	 addss	 xmm2, xmm2
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  002bb	f3 0f 59 ca	 mulss	 xmm1, xmm2

; 182  :     z = fz;

  002bf	f3 0f 58 cd	 addss	 xmm1, xmm5

; 204  :     x += v.x;

  002c3	f3 0f 11 4f 50	 movss	 DWORD PTR [edi+80], xmm1

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  002c8	f3 0f 59 da	 mulss	 xmm3, xmm2
  002cc	f3 0f 59 e2	 mulss	 xmm4, xmm2

; 204  :     x += v.x;

  002d0	f3 0f 58 df	 addss	 xmm3, xmm7

; 205  :     y += v.y;

  002d4	f3 0f 58 65 08	 addss	 xmm4, DWORD PTR tv1233[ebp]
  002d9	f3 0f 11 5f 54	 movss	 DWORD PTR [edi+84], xmm3

; 206  :     z += v.z;

  002de	f3 0f 11 67 58	 movss	 DWORD PTR [edi+88], xmm4
  002e3	5f		 pop	 edi
  002e4	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 131  : }

  002e5	8b e5		 mov	 esp, ebp
  002e7	5d		 pop	 ebp
  002e8	c2 04 00	 ret	 4
?__SetTargetNormalizedDirection@CFlyingInstance@@IAEXABUD3DXVECTOR3@@@Z ENDP ; CFlyingInstance::__SetTargetNormalizedDirection
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
;	COMDAT ?__SetTargetDirection@CFlyingInstance@@IAEXABVCFlyTarget@@@Z
_TEXT	SEGMENT
_v3TargetPos$ = -28					; size = 12
_v3TargetDir$ = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_c_rkTarget$ = 8					; size = 4
?__SetTargetDirection@CFlyingInstance@@IAEXABVCFlyTarget@@@Z PROC ; CFlyingInstance::__SetTargetDirection, COMDAT
; _this$ = ecx

; 111  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b f1		 mov	 esi, ecx
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _c_rkTarget$[ebp]

; 112  : 	D3DXVECTOR3 v3TargetPos=c_rkTarget.GetFlyTargetPosition();

  00016	e8 00 00 00 00	 call	 ?GetFlyTargetPosition@CFlyTarget@@QBEABUD3DXVECTOR3@@XZ ; CFlyTarget::GetFlyTargetPosition
  0001b	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0001f	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00022	89 45 ec	 mov	 DWORD PTR _v3TargetPos$[ebp+8], eax

; 113  : 
; 114  : 	if (m_pData->m_bMaintainParallel)

  00025	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00028	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _v3TargetPos$[ebp+8]
  0002d	66 0f d6 45 e4	 movq	 QWORD PTR _v3TargetPos$[ebp], xmm0
  00032	80 78 1d 00	 cmp	 BYTE PTR [eax+29], 0
  00036	74 08		 je	 SHORT $LN2@SetTargetD

; 115  : 	{
; 116  : 		v3TargetPos.z += 50.0f;

  00038	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@42480000
$LN2@SetTargetD:
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00040	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _v3TargetPos$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 121  : 	D3DXVec3Normalize(&v3TargetDir, &v3TargetDir);

  00045	8d 45 f0	 lea	 eax, DWORD PTR _v3TargetDir$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00048	f3 0f 5c 46 2c	 subss	 xmm0, DWORD PTR [esi+44]
  0004d	f3 0f 5c 4e 34	 subss	 xmm1, DWORD PTR [esi+52]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 121  : 	D3DXVec3Normalize(&v3TargetDir, &v3TargetDir);

  00052	50		 push	 eax
  00053	50		 push	 eax
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00054	f3 0f 11 45 f0	 movss	 DWORD PTR _v3TargetDir$[ebp], xmm0

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00059	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _v3TargetPos$[ebp+4]
  0005e	f3 0f 5c 46 30	 subss	 xmm0, DWORD PTR [esi+48]

; 182  :     z = fz;

  00063	f3 0f 11 4d f8	 movss	 DWORD PTR _v3TargetDir$[ebp+8], xmm1
  00068	f3 0f 11 45 f4	 movss	 DWORD PTR _v3TargetDir$[ebp+4], xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 121  : 	D3DXVec3Normalize(&v3TargetDir, &v3TargetDir);

  0006d	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 122  : 	__SetTargetNormalizedDirection(v3TargetDir);

  00072	8d 45 f0	 lea	 eax, DWORD PTR _v3TargetDir$[ebp]
  00075	8b ce		 mov	 ecx, esi
  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 ?__SetTargetNormalizedDirection@CFlyingInstance@@IAEXABUD3DXVECTOR3@@@Z ; CFlyingInstance::__SetTargetNormalizedDirection

; 123  : }

  0007d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00080	33 cd		 xor	 ecx, ebp
  00082	5e		 pop	 esi
  00083	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00088	8b e5		 mov	 esp, ebp
  0008a	5d		 pop	 ebp
  0008b	c2 04 00	 ret	 4
?__SetTargetDirection@CFlyingInstance@@IAEXABVCFlyTarget@@@Z ENDP ; CFlyingInstance::__SetTargetDirection
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
;	COMDAT ?__SetDataPointer@CFlyingInstance@@IAEXPAVCFlyingData@@ABUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
_q2$1 = -56						; size = 16
_q1$2 = -40						; size = 16
tv444 = -24						; size = 4
tv452 = -20						; size = 4
$T3 = -16						; size = 12
$T4 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_pData$ = 8						; size = 4
_v3StartPosition$ = 12					; size = 4
?__SetDataPointer@CFlyingInstance@@IAEXPAVCFlyingData@@ABUD3DXVECTOR3@@@Z PROC ; CFlyingInstance::__SetDataPointer, COMDAT
; _this$ = ecx

; 565  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 566  : 	m_pData = pData;
; 567  : 	m_qRot = D3DXQUATERNION(0.0f,0.0f,0.0f,1.0f),

  00010	8b 45 0c	 mov	 eax, DWORD PTR _v3StartPosition$[ebp]
  00013	56		 push	 esi
  00014	8b f1		 mov	 esi, ecx
  00016	57		 push	 edi
  00017	8b 7d 08	 mov	 edi, DWORD PTR _pData$[ebp]
  0001a	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  0001d	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00024	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0002b	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00032	c7 46 18 00 00
	80 3f		 mov	 DWORD PTR [esi+24], 1065353216 ; 3f800000H
  00039	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0003d	66 0f d6 46 2c	 movq	 QWORD PTR [esi+44], xmm0
  00042	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00045	89 46 34	 mov	 DWORD PTR [esi+52], eax

; 568  : 	m_v3Position = (v3StartPosition);
; 569  : 	m_bAlive = (true);

  00048	c6 46 20 01	 mov	 BYTE PTR [esi+32], 1

; 570  : 
; 571  : 	m_fStartTime = CTimer::Instance().GetCurrentSecond();

  0004c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  00052	e8 00 00 00 00	 call	 ?GetCurrentSecond@CTimer@@QAEMXZ ; CTimer::GetCurrentSecond
  00057	d9 5e 1c	 fstp	 DWORD PTR [esi+28]

; 572  : 
; 573  : 	D3DXQuaternionRotationYawPitchRoll(&m_qRot,D3DXToRadian(pData->m_fRollAngle-90.0f),0.0f,D3DXToRadian(pData->m_fConeAngle));

  0005a	f3 0f 10 47 24	 movss	 xmm0, DWORD PTR [edi+36]
  0005f	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00062	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  0006a	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0006d	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00073	f3 0f 10 47 28	 movss	 xmm0, DWORD PTR [edi+40]
  00078	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@42b40000
  00080	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR [esp+4], 0
  00088	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  00090	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00095	50		 push	 eax
  00096	e8 00 00 00 00	 call	 _D3DXQuaternionRotationYawPitchRoll@16

; 574  : 	if (pData->m_bSpreading)

  0009b	80 7f 1c 00	 cmp	 BYTE PTR [edi+28], 0
  0009f	0f 84 cb 00 00
	00		 je	 $LN2@SetDataPoi

; 577  : 		D3DXQuaternionRotationAxis(&q2, &D3DXVECTOR3(0.0f,0.0f,1.0f),(frandom(-3.141592f/3,+3.141592f/3)+frandom(-3.141592f/3,+3.141592f/3))/2);

  000a5	83 ec 08	 sub	 esp, 8
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 180  :     x = fx;

  000a8	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T4[ebp], 0

; 181  :     y = fy;

  000af	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+4], 0

; 182  :     z = fz;

  000b6	c7 45 f8 00 00
	80 3f		 mov	 DWORD PTR $T4[ebp+8], 1065353216 ; 3f800000H
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 577  : 		D3DXQuaternionRotationAxis(&q2, &D3DXVECTOR3(0.0f,0.0f,1.0f),(frandom(-3.141592f/3,+3.141592f/3)+frandom(-3.141592f/3,+3.141592f/3))/2);

  000bd	c7 44 24 04 90
	0a 86 3f	 mov	 DWORD PTR [esp+4], 1065749136 ; 3f860a90H
  000c5	c7 04 24 90 0a
	86 bf		 mov	 DWORD PTR [esp], -1081734512 ; bf860a90H
  000cc	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  000d1	d9 5d ec	 fstp	 DWORD PTR tv452[ebp]
  000d4	c7 44 24 04 90
	0a 86 3f	 mov	 DWORD PTR [esp+4], 1065749136 ; 3f860a90H
  000dc	c7 04 24 90 0a
	86 bf		 mov	 DWORD PTR [esp], -1081734512 ; bf860a90H
  000e3	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  000e8	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR tv452[ebp]
  000ed	8d 45 f0	 lea	 eax, DWORD PTR $T4[ebp]
  000f0	d9 5d e8	 fstp	 DWORD PTR tv444[ebp]
  000f3	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR tv444[ebp]
  000f8	83 c4 04	 add	 esp, 4
  000fb	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00103	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00108	50		 push	 eax
  00109	8d 45 c8	 lea	 eax, DWORD PTR _q2$1[ebp]
  0010c	50		 push	 eax
  0010d	e8 00 00 00 00	 call	 _D3DXQuaternionRotationAxis@12

; 578  : 		D3DXQuaternionRotationAxis(&q1, &D3DXVECTOR3(0.0f,-1.0f,0.0f), frandom(0,2*3.1415926535897931f));

  00112	83 ec 08	 sub	 esp, 8
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00115	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], 0

; 181  :     y = fy;

  0011c	c7 45 f4 00 00
	80 bf		 mov	 DWORD PTR $T3[ebp+4], -1082130432 ; bf800000H

; 182  :     z = fz;

  00123	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+8], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 578  : 		D3DXQuaternionRotationAxis(&q1, &D3DXVECTOR3(0.0f,-1.0f,0.0f), frandom(0,2*3.1415926535897931f));

  0012a	c7 44 24 04 db
	0f c9 40	 mov	 DWORD PTR [esp+4], 1086918619 ; 40c90fdbH
  00132	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  00139	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  0013e	83 c4 04	 add	 esp, 4
  00141	8d 45 f0	 lea	 eax, DWORD PTR $T3[ebp]
  00144	d9 1c 24	 fstp	 DWORD PTR [esp]
  00147	50		 push	 eax
  00148	8d 45 d8	 lea	 eax, DWORD PTR _q1$2[ebp]
  0014b	50		 push	 eax
  0014c	e8 00 00 00 00	 call	 _D3DXQuaternionRotationAxis@12

; 579  : 		D3DXQuaternionMultiply(&q1,&q2,&q1);

  00151	8d 45 d8	 lea	 eax, DWORD PTR _q1$2[ebp]
  00154	50		 push	 eax
  00155	8d 45 c8	 lea	 eax, DWORD PTR _q2$1[ebp]
  00158	50		 push	 eax
  00159	8d 45 d8	 lea	 eax, DWORD PTR _q1$2[ebp]
  0015c	50		 push	 eax
  0015d	e8 00 00 00 00	 call	 _D3DXQuaternionMultiply@12

; 580  : 		D3DXQuaternionMultiply(&m_qRot,&q1,&m_qRot);

  00162	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00165	50		 push	 eax
  00166	8d 4d d8	 lea	 ecx, DWORD PTR _q1$2[ebp]
  00169	51		 push	 ecx
  0016a	50		 push	 eax
  0016b	e8 00 00 00 00	 call	 _D3DXQuaternionMultiply@12
$LN2@SetDataPoi:

; 581  : 	}
; 582  : 	m_v3Velocity = m_v3LocalVelocity = D3DXVECTOR3(0.0f,-pData->m_fInitVel,0.0f);

  00170	f3 0f 10 47 20	 movss	 xmm0, DWORD PTR [edi+32]

; 583  : 	m_v3Accel = pData->m_v3Accel;
; 584  : 	m_fRemainRange = pData->m_fRange;
; 585  : 	m_qAttachRotation = D3DXQUATERNION(0.0f,0.0f,0.0f,1.0f);
; 586  : 
; 587  : 	BuildAttachInstance();

  00175	8b ce		 mov	 ecx, esi
  00177	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0017e	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0
  00185	f3 0f 11 46 48	 movss	 DWORD PTR [esi+72], xmm0
  0018a	c7 46 4c 00 00
	00 00		 mov	 DWORD PTR [esi+76], 0
  00191	f3 0f 7e 46 44	 movq	 xmm0, QWORD PTR [esi+68]
  00196	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  00199	66 0f d6 46 38	 movq	 QWORD PTR [esi+56], xmm0
  0019e	89 46 40	 mov	 DWORD PTR [esi+64], eax
  001a1	f3 0f 7e 47 78	 movq	 xmm0, QWORD PTR [edi+120]
  001a6	66 0f d6 46 50	 movq	 QWORD PTR [esi+80], xmm0
  001ab	8b 87 80 00 00
	00		 mov	 eax, DWORD PTR [edi+128]
  001b1	89 46 58	 mov	 DWORD PTR [esi+88], eax
  001b4	8b 47 74	 mov	 eax, DWORD PTR [edi+116]
  001b7	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  001ba	c7 46 78 00 00
	00 00		 mov	 DWORD PTR [esi+120], 0
  001c1	c7 46 7c 00 00
	00 00		 mov	 DWORD PTR [esi+124], 0
  001c8	c7 86 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+128], 0
  001d2	c7 86 84 00 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+132], 1065353216 ; 3f800000H
  001dc	e8 00 00 00 00	 call	 ?BuildAttachInstance@CFlyingInstance@@QAEXXZ ; CFlyingInstance::BuildAttachInstance

; 588  : 	UpdateAttachInstance();

  001e1	8b ce		 mov	 ecx, esi
  001e3	e8 00 00 00 00	 call	 ?UpdateAttachInstance@CFlyingInstance@@QAEXXZ ; CFlyingInstance::UpdateAttachInstance

; 589  : 
; 590  : 	m_iPierceCount = pData->m_iPierceCount;

  001e8	8b 47 6c	 mov	 eax, DWORD PTR [edi+108]

; 591  : }

  001eb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ee	5f		 pop	 edi
  001ef	89 46 24	 mov	 DWORD PTR [esi+36], eax
  001f2	33 cd		 xor	 ecx, ebp
  001f4	5e		 pop	 esi
  001f5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001fa	8b e5		 mov	 esp, ebp
  001fc	5d		 pop	 ebp
  001fd	c2 08 00	 ret	 8
?__SetDataPointer@CFlyingInstance@@IAEXPAVCFlyingData@@ABUD3DXVECTOR3@@@Z ENDP ; CFlyingInstance::__SetDataPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
;	COMDAT ?__Initialize@CFlyingInstance@@IAEXXZ
_TEXT	SEGMENT
?__Initialize@CFlyingInstance@@IAEXXZ PROC		; CFlyingInstance::__Initialize, COMDAT
; _this$ = ecx

; 28   : 	m_qAttachRotation=m_qRot=D3DXQUATERNION(0.0f, 0.0f, 0.0f, 0.0f);

  00000	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  00007	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  0000e	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00015	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
  0001c	0f 10 41 0c	 movups	 xmm0, XMMWORD PTR [ecx+12]
  00020	53		 push	 ebx
  00021	56		 push	 esi
  00022	0f 11 41 78	 movups	 XMMWORD PTR [ecx+120], xmm0

; 29   : 	m_v3Accel=m_v3LocalVelocity=m_v3Velocity=m_v3Position=D3DXVECTOR3(0.0f, 0.0f, 0.0f);

  00026	c7 41 2c 00 00
	00 00		 mov	 DWORD PTR [ecx+44], 0
  0002d	c7 41 30 00 00
	00 00		 mov	 DWORD PTR [ecx+48], 0
  00034	c7 41 34 00 00
	00 00		 mov	 DWORD PTR [ecx+52], 0
  0003b	f3 0f 7e 41 2c	 movq	 xmm0, QWORD PTR [ecx+44]
  00040	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00043	66 0f d6 41 38	 movq	 QWORD PTR [ecx+56], xmm0
  00048	f3 0f 7e c0	 movq	 xmm0, xmm0
  0004c	66 0f d6 41 44	 movq	 QWORD PTR [ecx+68], xmm0
  00051	f3 0f 7e 41 2c	 movq	 xmm0, QWORD PTR [ecx+44]
  00056	66 0f d6 41 50	 movq	 QWORD PTR [ecx+80], xmm0
  0005b	57		 push	 edi
  0005c	89 41 40	 mov	 DWORD PTR [ecx+64], eax

; 30   : 
; 31   : 	m_pHandler=NULL;
; 32   : 	m_pData=NULL;
; 33   : 	m_pOwner=NULL;
; 34   : 
; 35   : 	m_bAlive=false;
; 36   : 	m_canAttack=false;
; 37   : 
; 38   : 	m_dwSkillIndex = 0;
; 39   : 
; 40   : 	m_iPierceCount=0;
; 41   : 
; 42   : 	m_fStartTime=0.0f;
; 43   : 	m_fRemainRange=0.0f;
; 44   : 
; 45   : 	m_bTargetHitted = FALSE;
; 46   : 	m_HittedObjectSet.clear();

  0005f	8d b9 a0 00 00
	00		 lea	 edi, DWORD PTR [ecx+160]
  00065	89 41 4c	 mov	 DWORD PTR [ecx+76], eax
  00068	89 41 58	 mov	 DWORD PTR [ecx+88], eax
  0006b	c7 81 94 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+148], 0
  00075	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  0007c	c7 81 98 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+152], 0
  00086	66 c7 41 20 00
	00		 mov	 WORD PTR [ecx+32], 0
  0008c	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0
  00093	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0
  0009a	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0
  000a1	c7 41 5c 00 00
	00 00		 mov	 DWORD PTR [ecx+92], 0
  000a8	c7 81 9c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+156], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1357 :         auto _Head = _Scary->_Myhead;

  000b2	8b 1f		 mov	 ebx, DWORD PTR [edi]

; 1358 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  000b4	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  000b7	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  000bb	75 23		 jne	 SHORT $LN11@Initialize
  000bd	0f 1f 00	 npad	 3
$LL10@Initialize:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  000c0	ff 76 08	 push	 DWORD PTR [esi+8]
  000c3	8b cf		 mov	 ecx, edi
  000c5	57		 push	 edi
  000c6	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@PAVIActorInstance@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@1@PAU?$_Tree_node@PAVIActorInstance@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<IActorInstance *> >::_Erase_tree<std::allocator<std::_Tree_node<IActorInstance *,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 754  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  000cb	8b c6		 mov	 eax, esi

; 755  :     _Val         = static_cast<_Other&&>(_New_val);

  000cd	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  000cf	6a 14		 push	 20			; 00000014H
  000d1	50		 push	 eax
  000d2	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000d7	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  000da	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  000de	74 e0		 je	 SHORT $LL10@Initialize
$LN11@Initialize:

; 1359 :         _Head->_Parent  = _Head;

  000e0	89 5b 04	 mov	 DWORD PTR [ebx+4], ebx

; 1360 :         _Head->_Left    = _Head;

  000e3	89 1b		 mov	 DWORD PTR [ebx], ebx

; 1361 :         _Head->_Right   = _Head;

  000e5	89 5b 08	 mov	 DWORD PTR [ebx+8], ebx

; 1362 :         _Scary->_Mysize = 0;

  000e8	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  000ef	5f		 pop	 edi
  000f0	5e		 pop	 esi
  000f1	5b		 pop	 ebx
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 47   : }

  000f2	c3		 ret	 0
?__Initialize@CFlyingInstance@@IAEXXZ ENDP		; CFlyingInstance::__Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
;	COMDAT ?__Bomb@CFlyingInstance@@QAEXXZ
_TEXT	SEGMENT
_m$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
?__Bomb@CFlyingInstance@@QAEXXZ PROC			; CFlyingInstance::__Bomb, COMDAT
; _this$ = ecx

; 524  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx

; 525  : 	CEffectManager & rkEftMgr = CEffectManager::Instance();

  00011	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?ms_singleton@?$CSingleton@VCEffectManager@@@@0PAVCEffectManager@@A ; CSingleton<CEffectManager>::ms_singleton
  00017	57		 push	 edi
  00018	8b f9		 mov	 edi, ecx

; 526  : 	if (!m_pData->m_dwBombEffectID)

  0001a	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0001d	83 78 58 00	 cmp	 DWORD PTR [eax+88], 0
  00021	0f 84 a5 00 00
	00		 je	 $LN1@Bomb

; 527  : 		return;
; 528  : 
; 529  : 	DWORD dwEmptyIndex = rkEftMgr.GetEmptyIndex();

  00027	56		 push	 esi
  00028	8b cb		 mov	 ecx, ebx
  0002a	e8 00 00 00 00	 call	 ?GetEmptyIndex@CEffectManager@@QAEHXZ ; CEffectManager::GetEmptyIndex

; 530  : 	rkEftMgr.CreateEffectInstance(dwEmptyIndex,m_pData->m_dwBombEffectID);

  0002f	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00032	8b f0		 mov	 esi, eax
  00034	ff 71 58	 push	 DWORD PTR [ecx+88]
  00037	8b cb		 mov	 ecx, ebx
  00039	56		 push	 esi
  0003a	e8 00 00 00 00	 call	 ?CreateEffectInstance@CEffectManager@@QAEXKK@Z ; CEffectManager::CreateEffectInstance

; 531  : 
; 532  : 	D3DXMATRIX m;
; 533  : //	D3DXMatrixRotationQuaternion(&m,&m_qRot);
; 534  : 	D3DXMatrixIdentity(&m);
; 535  : 	m._41 = m_v3Position.x;

  0003f	f3 0f 10 47 2c	 movss	 xmm0, DWORD PTR [edi+44]

; 538  : 	rkEftMgr.SelectEffectInstance(dwEmptyIndex);

  00044	8b cb		 mov	 ecx, ebx
  00046	f3 0f 11 45 ec	 movss	 DWORD PTR _m$[ebp+48], xmm0
  0004b	f3 0f 10 47 30	 movss	 xmm0, DWORD PTR [edi+48]
  00050	f3 0f 11 45 f0	 movss	 DWORD PTR _m$[ebp+52], xmm0
  00055	f3 0f 10 47 34	 movss	 xmm0, DWORD PTR [edi+52]
  0005a	56		 push	 esi
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  0005b	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _m$[ebp+44], 0
  00062	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _m$[ebp+36], 0
  00069	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _m$[ebp+32], 0
  00070	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _m$[ebp+28], 0
  00077	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _m$[ebp+24], 0
  0007e	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _m$[ebp+16], 0
  00085	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _m$[ebp+12], 0
  0008c	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _m$[ebp+8], 0
  00093	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _m$[ebp+4], 0

; 1517 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 1518 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 1519 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;
; 1520 : 
; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  0009a	c7 45 f8 00 00
	80 3f		 mov	 DWORD PTR _m$[ebp+60], 1065353216 ; 3f800000H
  000a1	c7 45 e4 00 00
	80 3f		 mov	 DWORD PTR _m$[ebp+40], 1065353216 ; 3f800000H
  000a8	c7 45 d0 00 00
	80 3f		 mov	 DWORD PTR _m$[ebp+20], 1065353216 ; 3f800000H
  000af	c7 45 bc 00 00
	80 3f		 mov	 DWORD PTR _m$[ebp], 1065353216 ; 3f800000H
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 537  : 	m._43 = m_v3Position.z;

  000b6	f3 0f 11 45 f4	 movss	 DWORD PTR _m$[ebp+56], xmm0

; 538  : 	rkEftMgr.SelectEffectInstance(dwEmptyIndex);

  000bb	e8 00 00 00 00	 call	 ?SelectEffectInstance@CEffectManager@@QAEHK@Z ; CEffectManager::SelectEffectInstance

; 539  : 	rkEftMgr.SetEffectInstanceGlobalMatrix(m);

  000c0	8d 45 bc	 lea	 eax, DWORD PTR _m$[ebp]
  000c3	8b cb		 mov	 ecx, ebx
  000c5	50		 push	 eax
  000c6	e8 00 00 00 00	 call	 ?SetEffectInstanceGlobalMatrix@CEffectManager@@QAEXABUD3DXMATRIX@@@Z ; CEffectManager::SetEffectInstanceGlobalMatrix
  000cb	5e		 pop	 esi
$LN1@Bomb:

; 540  : }

  000cc	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000cf	5f		 pop	 edi
  000d0	33 cd		 xor	 ecx, ebp
  000d2	5b		 pop	 ebx
  000d3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d8	8b e5		 mov	 esp, ebp
  000da	5d		 pop	 ebp
  000db	c3		 ret	 0
?__Bomb@CFlyingInstance@@QAEXXZ ENDP			; CFlyingInstance::__Bomb
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
;	COMDAT ?__Explode@CFlyingInstance@@QAEX_N@Z
_TEXT	SEGMENT
_bBomb$ = 8						; size = 1
?__Explode@CFlyingInstance@@QAEX_N@Z PROC		; CFlyingInstance::__Explode, COMDAT
; _this$ = ecx

; 513  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 514  : 	if (!m_bAlive)

  00003	80 79 20 00	 cmp	 BYTE PTR [ecx+32], 0
  00007	74 0f		 je	 SHORT $LN3@Explode

; 515  : 		return;
; 516  : 
; 517  : 	m_bAlive = false;
; 518  : 
; 519  : 	if (bBomb)

  00009	80 7d 08 00	 cmp	 BYTE PTR _bBomb$[ebp], 0
  0000d	c6 41 20 00	 mov	 BYTE PTR [ecx+32], 0
  00011	74 05		 je	 SHORT $LN3@Explode

; 520  : 		__Bomb();

  00013	e8 00 00 00 00	 call	 ?__Bomb@CFlyingInstance@@QAEXXZ ; CFlyingInstance::__Bomb
$LN3@Explode:

; 521  : }

  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?__Explode@CFlyingInstance@@QAEX_N@Z ENDP		; CFlyingInstance::__Explode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
;	COMDAT ?ClearAttachInstance@CFlyingInstance@@QAEXXZ
_TEXT	SEGMENT
?ClearAttachInstance@CFlyingInstance@@QAEXXZ PROC	; CFlyingInstance::ClearAttachInstance, COMDAT
; _this$ = ecx

; 494  : {

  00000	53		 push	 ebx

; 495  : 	CEffectManager & rkEftMgr = CEffectManager::Instance();

  00001	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?ms_singleton@?$CSingleton@VCEffectManager@@@@0PAVCEffectManager@@A ; CSingleton<CEffectManager>::ms_singleton
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b b7 88 00 00
	00		 mov	 esi, DWORD PTR [edi+136]
  00011	3b b7 8c 00 00
	00		 cmp	 esi, DWORD PTR [edi+140]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 498  : 	for(i = m_vecAttachEffectInstance.begin();i!=m_vecAttachEffectInstance.end();++i)

  00017	74 40		 je	 SHORT $LN3@ClearAttac
  00019	0f 1f 80 00 00
	00 00		 npad	 7
$LL20@ClearAttac:

; 499  : 	{
; 500  : 		rkEftMgr.DestroyEffectInstance(i->dwEffectInstanceIndex);

  00020	ff 76 04	 push	 DWORD PTR [esi+4]
  00023	8b cb		 mov	 ecx, ebx
  00025	e8 00 00 00 00	 call	 ?DestroyEffectInstance@CEffectManager@@QAE_NK@Z ; CEffectManager::DestroyEffectInstance

; 501  : 
; 502  : 		if (i->pFlyTrace)

  0002a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0002d	85 c0		 test	 eax, eax
  0002f	74 09		 je	 SHORT $LN5@ClearAttac

; 503  : 			CFlyTrace::Delete(i->pFlyTrace);

  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ?Delete@CFlyTrace@@SAXPAV1@@Z ; CFlyTrace::Delete
  00037	83 c4 04	 add	 esp, 4
$LN5@ClearAttac:

; 504  : 
; 505  : 		i->iAttachIndex=0;

  0003a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 506  : 		i->dwEffectInstanceIndex=0;

  00040	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 507  : 		i->pFlyTrace=NULL;

  00047	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 79   :         ++_Ptr;

  0004e	83 c6 0c	 add	 esi, 12			; 0000000cH

; 163  :         return _Ptr == _Right._Ptr;

  00051	3b b7 8c 00 00
	00		 cmp	 esi, DWORD PTR [edi+140]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 498  : 	for(i = m_vecAttachEffectInstance.begin();i!=m_vecAttachEffectInstance.end();++i)

  00057	75 c7		 jne	 SHORT $LL20@ClearAttac
$LN3@ClearAttac:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00059	8b 87 88 00 00
	00		 mov	 eax, DWORD PTR [edi+136]
  0005f	3b 87 8c 00 00
	00		 cmp	 eax, DWORD PTR [edi+140]
  00065	74 06		 je	 SHORT $LN31@ClearAttac

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00067	89 87 8c 00 00
	00		 mov	 DWORD PTR [edi+140], eax
$LN31@ClearAttac:
  0006d	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 510  : }

  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx
  00070	c3		 ret	 0
?ClearAttachInstance@CFlyingInstance@@QAEXXZ ENDP	; CFlyingInstance::ClearAttachInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
;	COMDAT ?RenderAttachInstance@CFlyingInstance@@QAEXXZ
_TEXT	SEGMENT
?RenderAttachInstance@CFlyingInstance@@QAEXXZ PROC	; CFlyingInstance::RenderAttachInstance, COMDAT
; _this$ = ecx

; 550  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00004	8b b7 88 00 00
	00		 mov	 esi, DWORD PTR [edi+136]
  0000a	3b b7 8c 00 00
	00		 cmp	 esi, DWORD PTR [edi+140]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 552  : 	for(it = m_vecAttachEffectInstance.begin();it!=m_vecAttachEffectInstance.end();++it)

  00010	74 17		 je	 SHORT $LN3@RenderAtta
$LL20@RenderAtta:

; 553  : 	{
; 554  : 		if (it->pFlyTrace)

  00012	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00015	85 c9		 test	 ecx, ecx
  00017	74 05		 je	 SHORT $LN2@RenderAtta

; 555  : 			it->pFlyTrace->Render();

  00019	e8 00 00 00 00	 call	 ?Render@CFlyTrace@@QAEXXZ ; CFlyTrace::Render
$LN2@RenderAtta:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 79   :         ++_Ptr;

  0001e	83 c6 0c	 add	 esi, 12			; 0000000cH

; 163  :         return _Ptr == _Right._Ptr;

  00021	3b b7 8c 00 00
	00		 cmp	 esi, DWORD PTR [edi+140]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 552  : 	for(it = m_vecAttachEffectInstance.begin();it!=m_vecAttachEffectInstance.end();++it)

  00027	75 e9		 jne	 SHORT $LL20@RenderAtta
$LN3@RenderAtta:
  00029	5f		 pop	 edi

; 556  : 	}
; 557  : }

  0002a	5e		 pop	 esi
  0002b	c3		 ret	 0
?RenderAttachInstance@CFlyingInstance@@QAEXXZ ENDP	; CFlyingInstance::RenderAttachInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
;	COMDAT ?UpdateAttachInstance@CFlyingInstance@@QAEXXZ
_TEXT	SEGMENT
tv2595 = -124						; size = 8
tv2594 = -124						; size = 8
tv2593 = -124						; size = 8
_q$ = -116						; size = 16
_rem$1$ = -100						; size = 4
tv2450 = -100						; size = 4
_p$3$sroa$1447$1$ = -96					; size = 4
_p$2$sroa$1463$1$ = -96					; size = 4
_p$1$sroa$1507$1$ = -96					; size = 4
tv2615 = -96						; size = 4
tv2610 = -96						; size = 4
tv2451 = -96						; size = 4
_p$3$sroa$1457$1$ = -92					; size = 4
_angle$1$ = -92						; size = 4
_p$2$sroa$1503$1$ = -92					; size = 4
_p$1$sroa$1389$1$ = -92					; size = 4
tv2067 = -92						; size = 4
tv76 = -92						; size = 4
_dt$4 = -92						; size = 4
_p$3$sroa$1411$1$ = -88					; size = 4
tv2611 = -88						; size = 4
tv2597 = -88						; size = 4
tv89 = -88						; size = 4
_p$2$sroa$1500$1$ = -84					; size = 4
_p$1$sroa$1469$1$ = -84					; size = 4
_rfad$1$ = -84						; size = 4
tv2617 = -84						; size = 4
tv134 = -84						; size = 4
_m$5 = -80						; size = 64
$T6 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
?UpdateAttachInstance@CFlyingInstance@@QAEXXZ PROC	; CFlyingInstance::UpdateAttachInstance, COMDAT
; _this$ = ecx

; 190  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h

; 27   : 		return (*ms_singleton);

  00011	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 190  : {

  00017	57		 push	 edi
  00018	8b f9		 mov	 edi, ecx

; 191  : 	// Update Attach Rotation
; 192  : 	D3DXQUATERNION q;
; 193  : 	D3DXQuaternionRotationYawPitchRoll(&q,

  0001a	8b ce		 mov	 ecx, esi
  0001c	e8 00 00 00 00	 call	 ?GetElapsedSecond@CTimer@@QAEMXZ ; CTimer::GetElapsedSecond
  00021	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00024	8b ce		 mov	 ecx, esi
  00026	d9 5d a4	 fstp	 DWORD PTR tv76[ebp]
  00029	f3 0f 10 40 34	 movss	 xmm0, DWORD PTR [eax+52]
  0002e	f3 0f 11 45 9c	 movss	 DWORD PTR tv2450[ebp], xmm0
  00033	e8 00 00 00 00	 call	 ?GetElapsedSecond@CTimer@@QAEMXZ ; CTimer::GetElapsedSecond
  00038	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0003b	8b ce		 mov	 ecx, esi
  0003d	d9 5d a8	 fstp	 DWORD PTR tv89[ebp]
  00040	f3 0f 10 40 2c	 movss	 xmm0, DWORD PTR [eax+44]
  00045	f3 0f 11 45 a0	 movss	 DWORD PTR tv2451[ebp], xmm0
  0004a	e8 00 00 00 00	 call	 ?GetElapsedSecond@CTimer@@QAEMXZ ; CTimer::GetElapsedSecond
  0004f	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3c8efa35
  00057	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0005a	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR tv2450[ebp]
  0005f	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00062	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00066	d9 5d ac	 fstp	 DWORD PTR tv134[ebp]
  00069	f3 0f 59 45 a4	 mulss	 xmm0, DWORD PTR tv76[ebp]
  0006e	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00074	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR tv2451[ebp]
  00079	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0007d	f3 0f 59 45 a8	 mulss	 xmm0, DWORD PTR tv89[ebp]
  00082	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00088	f3 0f 10 40 30	 movss	 xmm0, DWORD PTR [eax+48]
  0008d	8d 45 8c	 lea	 eax, DWORD PTR _q$[ebp]
  00090	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00094	f3 0f 59 45 ac	 mulss	 xmm0, DWORD PTR tv134[ebp]
  00099	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 _D3DXQuaternionRotationYawPitchRoll@16

; 194  : 		D3DXToRadian(m_pData->m_v3AngVel.y)*CTimer::Instance().GetElapsedSecond(),
; 195  : 		D3DXToRadian(m_pData->m_v3AngVel.x)*CTimer::Instance().GetElapsedSecond(),
; 196  : 		D3DXToRadian(m_pData->m_v3AngVel.z)*CTimer::Instance().GetElapsedSecond());
; 197  : 
; 198  : 	D3DXQuaternionMultiply(&m_qAttachRotation, &m_qAttachRotation, &q);

  000a4	8d 45 8c	 lea	 eax, DWORD PTR _q$[ebp]
  000a7	50		 push	 eax
  000a8	8d 77 78	 lea	 esi, DWORD PTR [edi+120]
  000ab	56		 push	 esi
  000ac	56		 push	 esi
  000ad	e8 00 00 00 00	 call	 _D3DXQuaternionMultiply@12

; 199  : 	D3DXQuaternionMultiply(&q, &m_qAttachRotation, &m_qRot);

  000b2	8d 47 0c	 lea	 eax, DWORD PTR [edi+12]
  000b5	50		 push	 eax
  000b6	56		 push	 esi
  000b7	8d 45 8c	 lea	 eax, DWORD PTR _q$[ebp]
  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 _D3DXQuaternionMultiply@12
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  000c0	8b b7 88 00 00
	00		 mov	 esi, DWORD PTR [edi+136]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 201  : 	CEffectManager & rem = CEffectManager::Instance();

  000c6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_singleton@?$CSingleton@VCEffectManager@@@@0PAVCEffectManager@@A ; CSingleton<CEffectManager>::ms_singleton
  000cb	89 45 9c	 mov	 DWORD PTR _rem$1$[ebp], eax

; 204  : 	{

  000ce	3b b7 8c 00 00
	00		 cmp	 esi, DWORD PTR [edi+140]
  000d4	0f 84 e8 05 00
	00		 je	 $LN3@UpdateAtta
  000da	66 0f 1f 44 00
	00		 npad	 6
$LL156@UpdateAtta:

; 205  : 		CFlyingData::TFlyingAttachData & rfad = m_pData->GetAttachDataReference(it->iAttachIndex);

  000e0	ff 36		 push	 DWORD PTR [esi]
  000e2	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  000e5	e8 00 00 00 00	 call	 ?GetAttachDataReference@CFlyingData@@QAEAAUTFlyingAttachData@1@H@Z ; CFlyingData::GetAttachDataReference

; 206  : 		assert(rfad.iType == CFlyingData::FLY_ATTACH_EFFECT);
; 207  : 		rem.SelectEffectInstance(it->dwEffectInstanceIndex);

  000ea	ff 76 04	 push	 DWORD PTR [esi+4]
  000ed	8b 4d 9c	 mov	 ecx, DWORD PTR _rem$1$[ebp]
  000f0	89 45 ac	 mov	 DWORD PTR _rfad$1$[ebp], eax
  000f3	e8 00 00 00 00	 call	 ?SelectEffectInstance@CEffectManager@@QAEHK@Z ; CEffectManager::SelectEffectInstance

; 208  : 		D3DXMATRIX m;
; 209  : 		switch(rfad.iFlyType)

  000f8	8b 45 ac	 mov	 eax, DWORD PTR _rfad$1$[ebp]
  000fb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000fe	49		 dec	 ecx
  000ff	83 f9 03	 cmp	 ecx, 3
  00102	0f 87 71 05 00
	00		 ja	 $LN5@UpdateAtta
  00108	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN153@UpdateAtta[ecx*4]
$LN7@UpdateAtta:

; 210  : 		{
; 211  : 			case CFlyingData::FLY_ATTACH_TYPE_LINE:
; 212  : 				D3DXMatrixRotationQuaternion(&m,&m_qRot);

  0010f	8d 47 0c	 lea	 eax, DWORD PTR [edi+12]
  00112	50		 push	 eax
  00113	8d 45 b0	 lea	 eax, DWORD PTR _m$5[ebp]
  00116	50		 push	 eax
  00117	e8 00 00 00 00	 call	 _D3DXMatrixRotationQuaternion@8

; 213  : 				//D3DXMatrixRotationQuaternion(&m,&q);
; 214  : 				m._41=m_v3Position.x;

  0011c	f3 0f 10 47 2c	 movss	 xmm0, DWORD PTR [edi+44]
  00121	f3 0f 11 45 e0	 movss	 DWORD PTR _m$5[ebp+48], xmm0

; 215  : 				m._42=m_v3Position.y;

  00126	f3 0f 10 47 30	 movss	 xmm0, DWORD PTR [edi+48]
  0012b	f3 0f 11 45 e4	 movss	 DWORD PTR _m$5[ebp+52], xmm0

; 216  : 				m._43=m_v3Position.z;

  00130	f3 0f 10 47 34	 movss	 xmm0, DWORD PTR [edi+52]

; 217  : 				break;

  00135	e9 3a 05 00 00	 jmp	 $LN157@UpdateAtta
$LN8@UpdateAtta:

; 220  : 					D3DXVECTOR3 p(

  0013a	f3 0f 10 40 34	 movss	 xmm0, DWORD PTR [eax+52]
  0013f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 758  :             return (float)sin(_X);

  00147	0f 5a c0	 cvtps2pd xmm0, xmm0
  0014a	f2 0f 11 45 84	 movsd	 QWORD PTR tv2595[ebp], xmm0
  0014f	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 220  : 					D3DXVECTOR3 p(

  00154	8b 45 ac	 mov	 eax, DWORD PTR _rfad$1$[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 758  :             return (float)sin(_X);

  00157	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 220  : 					D3DXVECTOR3 p(

  0015b	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00162	f3 0f 59 40 38	 mulss	 xmm0, DWORD PTR [eax+56]
  00167	f3 0f 11 45 a8	 movss	 DWORD PTR tv2597[ebp], xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 653  :             return (float)cos(_X);

  0016c	f2 0f 10 45 84	 movsd	 xmm0, QWORD PTR tv2595[ebp]
  00171	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00176	f3 0f 10 65 8c	 movss	 xmm4, DWORD PTR _q$[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 653  :             return (float)cos(_X);

  0017b	0f 57 ff	 xorps	 xmm7, xmm7
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0017e	f3 0f 10 55 90	 movss	 xmm2, DWORD PTR _q$[ebp+4]
  00183	0f 28 cc	 movaps	 xmm1, xmm4
  00186	f3 0f 10 5d 94	 movss	 xmm3, DWORD PTR _q$[ebp+8]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 653  :             return (float)cos(_X);

  0018b	f2 0f 5a f8	 cvtsd2ss xmm7, xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 220  : 					D3DXVECTOR3 p(

  0018f	8b 45 ac	 mov	 eax, DWORD PTR _rfad$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 103  : 	v *= -2*pq->w;

  00192	f3 0f 10 75 98	 movss	 xmm6, DWORD PTR _q$[ebp+12]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00197	0f 28 c2	 movaps	 xmm0, xmm2
  0019a	f3 0f 59 c2	 mulss	 xmm0, xmm2
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 103  : 	v *= -2*pq->w;

  0019e	0f 28 ee	 movaps	 xmm5, xmm6
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  001a1	f3 0f 59 cc	 mulss	 xmm1, xmm4
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 220  : 					D3DXVECTOR3 p(

  001a5	0f 57 3d 00 00
	00 00		 xorps	 xmm7, DWORD PTR __xmm@80000000800000008000000080000000
  001ac	f3 0f 59 78 38	 mulss	 xmm7, DWORD PTR [eax+56]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  001b1	f3 0f 58 c8	 addss	 xmm1, xmm0
  001b5	f3 0f 11 55 ac	 movss	 DWORD PTR _p$1$sroa$1469$1$[ebp], xmm2

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  001ba	f3 0f 10 55 a8	 movss	 xmm2, DWORD PTR tv2597[ebp]

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  001bf	0f 28 c3	 movaps	 xmm0, xmm3
  001c2	f3 0f 59 c3	 mulss	 xmm0, xmm3
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 104  : 	v += (pq->w*pq->w - D3DXVec3LengthSq((D3DXVECTOR3*)pq))*(*pv);

  001c6	f3 0f 59 f6	 mulss	 xmm6, xmm6
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  001ca	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 103  : 	v *= -2*pq->w;

  001ce	f3 0f 59 2d 00
	00 00 00	 mulss	 xmm5, DWORD PTR __real@c0000000
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 206  :     z += v.z;

  001d6	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _p$1$sroa$1469$1$[ebp]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  001db	f3 0f 59 d4	 mulss	 xmm2, xmm4
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 104  : 	v += (pq->w*pq->w - D3DXVec3LengthSq((D3DXVECTOR3*)pq))*(*pv);

  001df	f3 0f 5c f1	 subss	 xmm6, xmm1
  001e3	0f 57 c9	 xorps	 xmm1, xmm1
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 206  :     z += v.z;

  001e6	f3 0f 59 c1	 mulss	 xmm0, xmm1

; 182  :     z = fz;

  001ea	0f 28 cb	 movaps	 xmm1, xmm3

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  001ed	f3 0f 58 d0	 addss	 xmm2, xmm0
  001f1	0f 28 c7	 movaps	 xmm0, xmm7
  001f4	f3 0f 59 c3	 mulss	 xmm0, xmm3
  001f8	f3 0f 58 d0	 addss	 xmm2, xmm0
  001fc	0f 57 c0	 xorps	 xmm0, xmm0

; 182  :     z = fz;

  001ff	f3 0f 59 c8	 mulss	 xmm1, xmm0

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00203	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _p$1$sroa$1469$1$[ebp]
  00208	f3 0f 59 c7	 mulss	 xmm0, xmm7
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 105  : 	v += 2*D3DXVec3Dot((D3DXVECTOR3*)pq,pv)*(*(D3DXVECTOR3*)pq);

  0020c	f3 0f 58 d2	 addss	 xmm2, xmm2
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00210	f3 0f 5c c8	 subss	 xmm1, xmm0
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 104  : 	v += (pq->w*pq->w - D3DXVec3LengthSq((D3DXVECTOR3*)pq))*(*pv);

  00214	0f 28 c6	 movaps	 xmm0, xmm6
  00217	f3 0f 59 45 a8	 mulss	 xmm0, DWORD PTR tv2597[ebp]
  0021c	f3 0f 59 cd	 mulss	 xmm1, xmm5
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00220	f3 0f 58 c8	 addss	 xmm1, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00224	0f 28 c2	 movaps	 xmm0, xmm2
  00227	f3 0f 59 c4	 mulss	 xmm0, xmm4

; 182  :     z = fz;

  0022b	f3 0f 58 c8	 addss	 xmm1, xmm0

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  0022f	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR tv2597[ebp]
  00234	f3 0f 59 c3	 mulss	 xmm0, xmm3

; 204  :     x += v.x;

  00238	f3 0f 58 4f 2c	 addss	 xmm1, DWORD PTR [edi+44]
  0023d	f3 0f 11 4d a4	 movss	 DWORD PTR _p$1$sroa$1389$1$[ebp], xmm1

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00242	0f 28 cf	 movaps	 xmm1, xmm7
  00245	f3 0f 59 cc	 mulss	 xmm1, xmm4

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00249	f3 0f 5c c8	 subss	 xmm1, xmm0

; 180  :     x = fx;

  0024d	0f 28 c6	 movaps	 xmm0, xmm6
  00250	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@00000000

; 181  :     y = fy;

  00258	f3 0f 59 f7	 mulss	 xmm6, xmm7

; 222  :     x *= f;

  0025c	f3 0f 59 cd	 mulss	 xmm1, xmm5

; 204  :     x += v.x;

  00260	f3 0f 58 c8	 addss	 xmm1, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00264	0f 28 c2	 movaps	 xmm0, xmm2
  00267	f3 0f 59 45 ac	 mulss	 xmm0, DWORD PTR _p$1$sroa$1469$1$[ebp]

; 204  :     x += v.x;

  0026c	f3 0f 58 c8	 addss	 xmm1, xmm0

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00270	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _p$1$sroa$1469$1$[ebp]
  00275	f3 0f 59 45 a8	 mulss	 xmm0, DWORD PTR tv2597[ebp]

; 205  :     y += v.y;

  0027a	f3 0f 58 4f 30	 addss	 xmm1, DWORD PTR [edi+48]
  0027f	f3 0f 11 4d a0	 movss	 DWORD PTR _p$1$sroa$1507$1$[ebp], xmm1
  00284	0f 57 c9	 xorps	 xmm1, xmm1

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  00287	f3 0f 59 e1	 mulss	 xmm4, xmm1
  0028b	f3 0f 5c c4	 subss	 xmm0, xmm4

; 223  :     y *= f;

  0028f	f3 0f 59 c5	 mulss	 xmm0, xmm5

; 205  :     y += v.y;

  00293	f3 0f 58 c6	 addss	 xmm0, xmm6

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00297	f3 0f 59 d3	 mulss	 xmm2, xmm3

; 205  :     y += v.y;

  0029b	f3 0f 58 c2	 addss	 xmm0, xmm2
$LN158@UpdateAtta:
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 272  : 		rem.SetEffectInstanceGlobalMatrix(m);

  0029f	f3 0f 58 47 34	 addss	 xmm0, DWORD PTR [edi+52]
  002a4	8d 45 8c	 lea	 eax, DWORD PTR _q$[ebp]
  002a7	50		 push	 eax
  002a8	8d 45 b0	 lea	 eax, DWORD PTR _m$5[ebp]
  002ab	50		 push	 eax
  002ac	f3 0f 11 45 ac	 movss	 DWORD PTR _p$1$sroa$1469$1$[ebp], xmm0
  002b1	e8 00 00 00 00	 call	 _D3DXMatrixRotationQuaternion@8
  002b6	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _p$1$sroa$1389$1$[ebp]
  002bb	f3 0f 11 45 e0	 movss	 DWORD PTR _m$5[ebp+48], xmm0
  002c0	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _p$1$sroa$1507$1$[ebp]
  002c5	f3 0f 11 45 e4	 movss	 DWORD PTR _m$5[ebp+52], xmm0
  002ca	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _p$1$sroa$1469$1$[ebp]
  002cf	e9 a0 03 00 00	 jmp	 $LN157@UpdateAtta
$LN9@UpdateAtta:

; 236  : 					float angle = (CTimer::Instance().GetCurrentSecond() - m_fStartTime)*2*3.1415926535897931f/rfad.fPeriod;

  002d4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  002da	e8 00 00 00 00	 call	 ?GetCurrentSecond@CTimer@@QAEMXZ ; CTimer::GetCurrentSecond

; 237  : 					D3DXVECTOR3 p(

  002df	8b 45 ac	 mov	 eax, DWORD PTR _rfad$1$[ebp]
  002e2	d8 67 1c	 fsub	 DWORD PTR [edi+28]
  002e5	f3 0f 10 40 34	 movss	 xmm0, DWORD PTR [eax+52]
  002ea	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  002f2	d9 5d a4	 fstp	 DWORD PTR tv2067[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 758  :             return (float)sin(_X);

  002f5	0f 5a c0	 cvtps2pd xmm0, xmm0
  002f8	f2 0f 11 45 84	 movsd	 QWORD PTR tv2594[ebp], xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 236  : 					float angle = (CTimer::Instance().GetCurrentSecond() - m_fStartTime)*2*3.1415926535897931f/rfad.fPeriod;

  002fd	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR tv2067[ebp]
  00302	f3 0f 58 c0	 addss	 xmm0, xmm0
  00306	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40490fdb
  0030e	f3 0f 5e 40 3c	 divss	 xmm0, DWORD PTR [eax+60]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 758  :             return (float)sin(_X);

  00313	0f 5a c0	 cvtps2pd xmm0, xmm0
  00316	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
  0031b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0031f	f3 0f 11 45 a0	 movss	 DWORD PTR tv2610[ebp], xmm0
  00324	f2 0f 10 45 84	 movsd	 xmm0, QWORD PTR tv2594[ebp]
  00329	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 237  : 					D3DXVECTOR3 p(

  0032e	8b 45 ac	 mov	 eax, DWORD PTR _rfad$1$[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 758  :             return (float)sin(_X);

  00331	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 237  : 					D3DXVECTOR3 p(

  00335	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0033c	f3 0f 59 40 40	 mulss	 xmm0, DWORD PTR [eax+64]
  00341	f3 0f 59 45 a0	 mulss	 xmm0, DWORD PTR tv2610[ebp]
  00346	f3 0f 11 45 a8	 movss	 DWORD PTR tv2611[ebp], xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 653  :             return (float)cos(_X);

  0034b	f2 0f 10 45 84	 movsd	 xmm0, QWORD PTR tv2594[ebp]
  00350	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00355	f3 0f 10 5d 8c	 movss	 xmm3, DWORD PTR _q$[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 653  :             return (float)cos(_X);

  0035a	0f 57 ff	 xorps	 xmm7, xmm7
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0035d	f3 0f 10 55 90	 movss	 xmm2, DWORD PTR _q$[ebp+4]
  00362	0f 28 cb	 movaps	 xmm1, xmm3
  00365	f3 0f 10 65 94	 movss	 xmm4, DWORD PTR _q$[ebp+8]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 653  :             return (float)cos(_X);

  0036a	f2 0f 5a f8	 cvtsd2ss xmm7, xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 237  : 					D3DXVECTOR3 p(

  0036e	8b 45 ac	 mov	 eax, DWORD PTR _rfad$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 103  : 	v *= -2*pq->w;

  00371	f3 0f 10 75 98	 movss	 xmm6, DWORD PTR _q$[ebp+12]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00376	0f 28 c2	 movaps	 xmm0, xmm2
  00379	f3 0f 59 c2	 mulss	 xmm0, xmm2
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 103  : 	v *= -2*pq->w;

  0037d	0f 28 ee	 movaps	 xmm5, xmm6
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 237  : 					D3DXVECTOR3 p(

  00380	0f 57 3d 00 00
	00 00		 xorps	 xmm7, DWORD PTR __xmm@80000000800000008000000080000000
  00387	f3 0f 59 78 40	 mulss	 xmm7, DWORD PTR [eax+64]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0038c	f3 0f 59 cb	 mulss	 xmm1, xmm3
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 237  : 					D3DXVECTOR3 p(

  00390	f3 0f 59 7d a0	 mulss	 xmm7, DWORD PTR tv2610[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00395	f3 0f 58 c8	 addss	 xmm1, xmm0
  00399	f3 0f 11 55 ac	 movss	 DWORD PTR _p$2$sroa$1500$1$[ebp], xmm2

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0039e	f3 0f 10 55 a8	 movss	 xmm2, DWORD PTR tv2611[ebp]

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  003a3	0f 28 c4	 movaps	 xmm0, xmm4
  003a6	f3 0f 59 c4	 mulss	 xmm0, xmm4
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 104  : 	v += (pq->w*pq->w - D3DXVec3LengthSq((D3DXVECTOR3*)pq))*(*pv);

  003aa	f3 0f 59 f6	 mulss	 xmm6, xmm6
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  003ae	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 103  : 	v *= -2*pq->w;

  003b2	f3 0f 59 2d 00
	00 00 00	 mulss	 xmm5, DWORD PTR __real@c0000000
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 206  :     z += v.z;

  003ba	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _p$2$sroa$1500$1$[ebp]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  003bf	f3 0f 59 d3	 mulss	 xmm2, xmm3
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 104  : 	v += (pq->w*pq->w - D3DXVec3LengthSq((D3DXVECTOR3*)pq))*(*pv);

  003c3	f3 0f 5c f1	 subss	 xmm6, xmm1
  003c7	0f 57 c9	 xorps	 xmm1, xmm1
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 206  :     z += v.z;

  003ca	f3 0f 59 c1	 mulss	 xmm0, xmm1

; 182  :     z = fz;

  003ce	0f 28 cc	 movaps	 xmm1, xmm4

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  003d1	f3 0f 58 d0	 addss	 xmm2, xmm0
  003d5	0f 28 c7	 movaps	 xmm0, xmm7
  003d8	f3 0f 59 c4	 mulss	 xmm0, xmm4
  003dc	f3 0f 58 d0	 addss	 xmm2, xmm0
  003e0	0f 57 c0	 xorps	 xmm0, xmm0

; 182  :     z = fz;

  003e3	f3 0f 59 c8	 mulss	 xmm1, xmm0

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  003e7	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _p$2$sroa$1500$1$[ebp]
  003ec	f3 0f 59 c7	 mulss	 xmm0, xmm7
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 105  : 	v += 2*D3DXVec3Dot((D3DXVECTOR3*)pq,pv)*(*(D3DXVECTOR3*)pq);

  003f0	f3 0f 58 d2	 addss	 xmm2, xmm2
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  003f4	f3 0f 5c c8	 subss	 xmm1, xmm0
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 104  : 	v += (pq->w*pq->w - D3DXVec3LengthSq((D3DXVECTOR3*)pq))*(*pv);

  003f8	0f 28 c6	 movaps	 xmm0, xmm6
  003fb	f3 0f 59 45 a8	 mulss	 xmm0, DWORD PTR tv2611[ebp]
  00400	f3 0f 59 cd	 mulss	 xmm1, xmm5
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00404	f3 0f 58 c8	 addss	 xmm1, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00408	0f 28 c2	 movaps	 xmm0, xmm2
  0040b	f3 0f 59 c3	 mulss	 xmm0, xmm3

; 182  :     z = fz;

  0040f	f3 0f 58 c8	 addss	 xmm1, xmm0

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00413	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR tv2611[ebp]
  00418	f3 0f 59 c4	 mulss	 xmm0, xmm4

; 204  :     x += v.x;

  0041c	f3 0f 58 4f 2c	 addss	 xmm1, DWORD PTR [edi+44]
  00421	f3 0f 11 4d a4	 movss	 DWORD PTR _p$2$sroa$1503$1$[ebp], xmm1

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00426	0f 28 cf	 movaps	 xmm1, xmm7
  00429	f3 0f 59 cb	 mulss	 xmm1, xmm3

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  0042d	f3 0f 5c c8	 subss	 xmm1, xmm0

; 222  :     x *= f;

  00431	f3 0f 59 cd	 mulss	 xmm1, xmm5

; 180  :     x = fx;

  00435	0f 28 c6	 movaps	 xmm0, xmm6

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00438	f3 0f 59 e2	 mulss	 xmm4, xmm2

; 180  :     x = fx;

  0043c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@00000000

; 181  :     y = fy;

  00444	f3 0f 59 f7	 mulss	 xmm6, xmm7

; 204  :     x += v.x;

  00448	f3 0f 58 c8	 addss	 xmm1, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0044c	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _p$2$sroa$1500$1$[ebp]
  00451	f3 0f 59 c2	 mulss	 xmm0, xmm2

; 204  :     x += v.x;

  00455	f3 0f 58 c8	 addss	 xmm1, xmm0

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00459	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _p$2$sroa$1500$1$[ebp]
  0045e	f3 0f 59 45 a8	 mulss	 xmm0, DWORD PTR tv2611[ebp]

; 205  :     y += v.y;

  00463	f3 0f 58 4f 30	 addss	 xmm1, DWORD PTR [edi+48]
  00468	f3 0f 11 4d a0	 movss	 DWORD PTR _p$2$sroa$1463$1$[ebp], xmm1
  0046d	0f 57 c9	 xorps	 xmm1, xmm1

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  00470	f3 0f 59 d9	 mulss	 xmm3, xmm1
  00474	f3 0f 5c c3	 subss	 xmm0, xmm3

; 223  :     y *= f;

  00478	f3 0f 59 c5	 mulss	 xmm0, xmm5

; 205  :     y += v.y;

  0047c	f3 0f 58 c6	 addss	 xmm0, xmm6
  00480	f3 0f 58 c4	 addss	 xmm0, xmm4
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 251  : 				break;

  00484	e9 16 fe ff ff	 jmp	 $LN158@UpdateAtta
$LN10@UpdateAtta:

; 252  : 			case CFlyingData::FLY_ATTACH_TYPE_EXP:
; 253  : 				{
; 254  : 					float dt = CTimer::Instance().GetCurrentSecond() - m_fStartTime;

  00489	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  0048f	e8 00 00 00 00	 call	 ?GetCurrentSecond@CTimer@@QAEMXZ ; CTimer::GetCurrentSecond
  00494	d8 67 1c	 fsub	 DWORD PTR [edi+28]

; 255  : 					float angle = dt/rfad.fPeriod;

  00497	8b 45 ac	 mov	 eax, DWORD PTR _rfad$1$[ebp]

; 256  : 					D3DXVECTOR3 p(

  0049a	f3 0f 10 40 34	 movss	 xmm0, DWORD PTR [eax+52]
  0049f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  004a7	d9 5d a4	 fstp	 DWORD PTR _dt$4[ebp]
  004aa	f3 0f 10 4d a4	 movss	 xmm1, DWORD PTR _dt$4[ebp]
  004af	f3 0f 5e 48 3c	 divss	 xmm1, DWORD PTR [eax+60]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 758  :             return (float)sin(_X);

  004b4	0f 5a c0	 cvtps2pd xmm0, xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 255  : 					float angle = dt/rfad.fPeriod;

  004b7	f3 0f 11 4d a4	 movss	 DWORD PTR _angle$1$[ebp], xmm1
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 758  :             return (float)sin(_X);

  004bc	f2 0f 11 45 84	 movsd	 QWORD PTR tv2593[ebp], xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 256  : 					D3DXVECTOR3 p(

  004c1	0f 28 c1	 movaps	 xmm0, xmm1
  004c4	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 663  :             return (float)exp(_X);

  004cb	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  004cf	e8 00 00 00 00	 call	 __libm_sse2_exp_precise
  004d4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004d8	f3 0f 11 45 a0	 movss	 DWORD PTR tv2615[ebp], xmm0

; 758  :             return (float)sin(_X);

  004dd	f2 0f 10 45 84	 movsd	 xmm0, QWORD PTR tv2593[ebp]
  004e2	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 256  : 					D3DXVECTOR3 p(

  004e7	8b 45 ac	 mov	 eax, DWORD PTR _rfad$1$[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 758  :             return (float)sin(_X);

  004ea	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 256  : 					D3DXVECTOR3 p(

  004ee	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  004f5	f3 0f 59 40 40	 mulss	 xmm0, DWORD PTR [eax+64]
  004fa	f3 0f 59 45 a0	 mulss	 xmm0, DWORD PTR tv2615[ebp]
  004ff	f3 0f 59 45 a4	 mulss	 xmm0, DWORD PTR _angle$1$[ebp]
  00504	f3 0f 11 45 a8	 movss	 DWORD PTR _p$3$sroa$1411$1$[ebp], xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 653  :             return (float)cos(_X);

  00509	f2 0f 10 45 84	 movsd	 xmm0, QWORD PTR tv2593[ebp]
  0050e	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 256  : 					D3DXVECTOR3 p(

  00513	8b 45 ac	 mov	 eax, DWORD PTR _rfad$1$[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 653  :             return (float)cos(_X);

  00516	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0051a	f3 0f 10 6d 8c	 movss	 xmm5, DWORD PTR _q$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 256  : 					D3DXVECTOR3 p(

  0051f	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00526	0f 28 cd	 movaps	 xmm1, xmm5
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 256  : 					D3DXVECTOR3 p(

  00529	f3 0f 59 40 40	 mulss	 xmm0, DWORD PTR [eax+64]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0052e	f3 0f 10 55 90	 movss	 xmm2, DWORD PTR _q$[ebp+4]
  00533	f3 0f 10 65 94	 movss	 xmm4, DWORD PTR _q$[ebp+8]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 256  : 					D3DXVECTOR3 p(

  00538	f3 0f 59 45 a0	 mulss	 xmm0, DWORD PTR tv2615[ebp]
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 103  : 	v *= -2*pq->w;

  0053d	f3 0f 10 7d 98	 movss	 xmm7, DWORD PTR _q$[ebp+12]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00542	f3 0f 10 5d a8	 movss	 xmm3, DWORD PTR _p$3$sroa$1411$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 103  : 	v *= -2*pq->w;

  00547	0f 28 f7	 movaps	 xmm6, xmm7
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 256  : 					D3DXVECTOR3 p(

  0054a	f3 0f 59 45 a4	 mulss	 xmm0, DWORD PTR _angle$1$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0054f	f3 0f 59 cd	 mulss	 xmm1, xmm5
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 256  : 					D3DXVECTOR3 p(

  00553	f3 0f 11 45 ac	 movss	 DWORD PTR tv2617[ebp], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00558	0f 28 c2	 movaps	 xmm0, xmm2
  0055b	f3 0f 59 c2	 mulss	 xmm0, xmm2
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 104  : 	v += (pq->w*pq->w - D3DXVec3LengthSq((D3DXVECTOR3*)pq))*(*pv);

  0055f	f3 0f 59 ff	 mulss	 xmm7, xmm7
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00563	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 103  : 	v *= -2*pq->w;

  00567	f3 0f 59 35 00
	00 00 00	 mulss	 xmm6, DWORD PTR __real@c0000000
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0056f	0f 28 c4	 movaps	 xmm0, xmm4

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00572	f3 0f 59 dd	 mulss	 xmm3, xmm5

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00576	f3 0f 59 c4	 mulss	 xmm0, xmm4
  0057a	f3 0f 58 c8	 addss	 xmm1, xmm0

; 206  :     z += v.z;

  0057e	0f 28 c2	 movaps	 xmm0, xmm2
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 104  : 	v += (pq->w*pq->w - D3DXVec3LengthSq((D3DXVECTOR3*)pq))*(*pv);

  00581	f3 0f 5c f9	 subss	 xmm7, xmm1
  00585	0f 57 c9	 xorps	 xmm1, xmm1
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 206  :     z += v.z;

  00588	f3 0f 59 c1	 mulss	 xmm0, xmm1

; 182  :     z = fz;

  0058c	0f 28 cc	 movaps	 xmm1, xmm4

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0058f	f3 0f 58 d8	 addss	 xmm3, xmm0
  00593	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR tv2617[ebp]
  00598	f3 0f 59 c4	 mulss	 xmm0, xmm4
  0059c	f3 0f 58 d8	 addss	 xmm3, xmm0
  005a0	0f 57 c0	 xorps	 xmm0, xmm0

; 182  :     z = fz;

  005a3	f3 0f 59 c8	 mulss	 xmm1, xmm0

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  005a7	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR tv2617[ebp]
  005ac	f3 0f 59 c2	 mulss	 xmm0, xmm2
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 105  : 	v += 2*D3DXVec3Dot((D3DXVECTOR3*)pq,pv)*(*(D3DXVECTOR3*)pq);

  005b0	f3 0f 58 db	 addss	 xmm3, xmm3
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  005b4	f3 0f 5c c8	 subss	 xmm1, xmm0
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 104  : 	v += (pq->w*pq->w - D3DXVec3LengthSq((D3DXVECTOR3*)pq))*(*pv);

  005b8	0f 28 c7	 movaps	 xmm0, xmm7
  005bb	f3 0f 59 45 a8	 mulss	 xmm0, DWORD PTR _p$3$sroa$1411$1$[ebp]
  005c0	f3 0f 59 ce	 mulss	 xmm1, xmm6
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  005c4	f3 0f 58 c8	 addss	 xmm1, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  005c8	0f 28 c3	 movaps	 xmm0, xmm3
  005cb	f3 0f 59 c5	 mulss	 xmm0, xmm5

; 182  :     z = fz;

  005cf	f3 0f 58 c8	 addss	 xmm1, xmm0

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  005d3	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _p$3$sroa$1411$1$[ebp]
  005d8	f3 0f 59 c4	 mulss	 xmm0, xmm4

; 204  :     x += v.x;

  005dc	f3 0f 58 4f 2c	 addss	 xmm1, DWORD PTR [edi+44]
  005e1	f3 0f 11 4d a4	 movss	 DWORD PTR _p$3$sroa$1457$1$[ebp], xmm1

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  005e6	f3 0f 10 4d ac	 movss	 xmm1, DWORD PTR tv2617[ebp]
  005eb	f3 0f 59 cd	 mulss	 xmm1, xmm5

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  005ef	f3 0f 5c c8	 subss	 xmm1, xmm0

; 180  :     x = fx;

  005f3	0f 28 c7	 movaps	 xmm0, xmm7
  005f6	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@00000000
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 263  : 					D3DXMatrixRotationQuaternion(&m,&q);

  005fe	8d 45 8c	 lea	 eax, DWORD PTR _q$[ebp]
  00601	50		 push	 eax
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 181  :     y = fy;

  00602	f3 0f 59 7d ac	 mulss	 xmm7, DWORD PTR tv2617[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 263  : 					D3DXMatrixRotationQuaternion(&m,&q);

  00607	8d 45 b0	 lea	 eax, DWORD PTR _m$5[ebp]
  0060a	50		 push	 eax
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 222  :     x *= f;

  0060b	f3 0f 59 ce	 mulss	 xmm1, xmm6

; 204  :     x += v.x;

  0060f	f3 0f 58 c8	 addss	 xmm1, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00613	0f 28 c2	 movaps	 xmm0, xmm2
  00616	f3 0f 59 c3	 mulss	 xmm0, xmm3
  0061a	f3 0f 59 dc	 mulss	 xmm3, xmm4

; 204  :     x += v.x;

  0061e	f3 0f 58 c8	 addss	 xmm1, xmm0

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00622	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _p$3$sroa$1411$1$[ebp]
  00627	f3 0f 59 c2	 mulss	 xmm0, xmm2

; 205  :     y += v.y;

  0062b	f3 0f 58 4f 30	 addss	 xmm1, DWORD PTR [edi+48]
  00630	f3 0f 11 4d a0	 movss	 DWORD PTR _p$3$sroa$1447$1$[ebp], xmm1
  00635	0f 57 c9	 xorps	 xmm1, xmm1

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  00638	f3 0f 59 e9	 mulss	 xmm5, xmm1
  0063c	f3 0f 5c c5	 subss	 xmm0, xmm5

; 223  :     y *= f;

  00640	f3 0f 59 c6	 mulss	 xmm0, xmm6

; 205  :     y += v.y;

  00644	f3 0f 58 c7	 addss	 xmm0, xmm7
  00648	f3 0f 58 c3	 addss	 xmm0, xmm3

; 206  :     z += v.z;

  0064c	f3 0f 58 47 34	 addss	 xmm0, DWORD PTR [edi+52]
  00651	f3 0f 11 45 a8	 movss	 DWORD PTR _p$3$sroa$1411$1$[ebp], xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 263  : 					D3DXMatrixRotationQuaternion(&m,&q);

  00656	e8 00 00 00 00	 call	 _D3DXMatrixRotationQuaternion@8

; 264  : 					//D3DXMatrixRotationQuaternion(&m,&m_qRot);
; 265  : 					m._41=p.x;

  0065b	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _p$3$sroa$1457$1$[ebp]
  00660	f3 0f 11 45 e0	 movss	 DWORD PTR _m$5[ebp+48], xmm0

; 266  : 					m._42=p.y;

  00665	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _p$3$sroa$1447$1$[ebp]
  0066a	f3 0f 11 45 e4	 movss	 DWORD PTR _m$5[ebp+52], xmm0

; 267  : 					m._43=p.z;

  0066f	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _p$3$sroa$1411$1$[ebp]
$LN157@UpdateAtta:

; 272  : 		rem.SetEffectInstanceGlobalMatrix(m);

  00674	f3 0f 11 45 e8	 movss	 DWORD PTR _m$5[ebp+56], xmm0
$LN5@UpdateAtta:
  00679	8b 4d 9c	 mov	 ecx, DWORD PTR _rem$1$[ebp]
  0067c	8d 45 b0	 lea	 eax, DWORD PTR _m$5[ebp]
  0067f	50		 push	 eax
  00680	e8 00 00 00 00	 call	 ?SetEffectInstanceGlobalMatrix@CEffectManager@@QAEXABUD3DXMATRIX@@@Z ; CEffectManager::SetEffectInstanceGlobalMatrix

; 273  : 		if (it->pFlyTrace)

  00685	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00688	85 c9		 test	 ecx, ecx
  0068a	74 27		 je	 SHORT $LN2@UpdateAtta
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 180  :     x = fx;

  0068c	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _m$5[ebp+48]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 274  : 			it->pFlyTrace->UpdateNewPosition(D3DXVECTOR3(m._41,m._42,m._43));

  00691	8d 45 f0	 lea	 eax, DWORD PTR $T6[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00694	f3 0f 11 45 f0	 movss	 DWORD PTR $T6[ebp], xmm0

; 181  :     y = fy;

  00699	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _m$5[ebp+52]
  0069e	f3 0f 11 45 f4	 movss	 DWORD PTR $T6[ebp+4], xmm0

; 182  :     z = fz;

  006a3	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _m$5[ebp+56]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 274  : 			it->pFlyTrace->UpdateNewPosition(D3DXVECTOR3(m._41,m._42,m._43));

  006a8	50		 push	 eax
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  006a9	f3 0f 11 45 f8	 movss	 DWORD PTR $T6[ebp+8], xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 274  : 			it->pFlyTrace->UpdateNewPosition(D3DXVECTOR3(m._41,m._42,m._43));

  006ae	e8 00 00 00 00	 call	 ?UpdateNewPosition@CFlyTrace@@QAEXABUD3DXVECTOR3@@@Z ; CFlyTrace::UpdateNewPosition
$LN2@UpdateAtta:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 79   :         ++_Ptr;

  006b3	83 c6 0c	 add	 esi, 12			; 0000000cH

; 163  :         return _Ptr == _Right._Ptr;

  006b6	3b b7 8c 00 00
	00		 cmp	 esi, DWORD PTR [edi+140]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 203  : 	for(it = m_vecAttachEffectInstance.begin();it!=m_vecAttachEffectInstance.end();++it)

  006bc	0f 85 1e fa ff
	ff		 jne	 $LL156@UpdateAtta
$LN3@UpdateAtta:

; 275  : 	}
; 276  : }

  006c2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  006c5	5f		 pop	 edi
  006c6	33 cd		 xor	 ecx, ebp
  006c8	5e		 pop	 esi
  006c9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  006ce	8b e5		 mov	 esp, ebp
  006d0	5d		 pop	 ebp
  006d1	c3		 ret	 0
  006d2	66 90		 npad	 2
$LN153@UpdateAtta:
  006d4	00 00 00 00	 DD	 $LN7@UpdateAtta
  006d8	00 00 00 00	 DD	 $LN8@UpdateAtta
  006dc	00 00 00 00	 DD	 $LN9@UpdateAtta
  006e0	00 00 00 00	 DD	 $LN10@UpdateAtta
?UpdateAttachInstance@CFlyingInstance@@QAEXXZ ENDP	; CFlyingInstance::UpdateAttachInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
;	COMDAT ?BuildAttachInstance@CFlyingInstance@@QAEXXZ
_TEXT	SEGMENT
_aei$1 = -28						; size = 12
_rem$1$ = -16						; size = 4
_dwCRC$1$ = -12						; size = 4
_this$1$ = -8						; size = 4
_aei$1$ = -4						; size = 4
?BuildAttachInstance@CFlyingInstance@@QAEXXZ PROC	; CFlyingInstance::BuildAttachInstance, COMDAT
; _this$ = ecx

; 65   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	8b c1		 mov	 eax, ecx
  00008	56		 push	 esi
  00009	89 45 f8	 mov	 DWORD PTR _this$1$[ebp], eax
  0000c	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1868 :         auto& _My_data = _Mypair._Myval2;

  0000d	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 66   : 	for(int i=0;i<m_pData->GetAttachDataCount();i++)

  00010	33 ff		 xor	 edi, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00012	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00017	8b 96 88 00 00
	00		 mov	 edx, DWORD PTR [esi+136]
  0001d	2b 96 84 00 00
	00		 sub	 edx, DWORD PTR [esi+132]
  00023	f7 ea		 imul	 edx
  00025	c1 fa 05	 sar	 edx, 5
  00028	8b c2		 mov	 eax, edx
  0002a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0002d	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 66   : 	for(int i=0;i<m_pData->GetAttachDataCount();i++)

  0002f	85 c0		 test	 eax, eax
  00031	0f 8e d1 00 00
	00		 jle	 $LN3@BuildAttac
  00037	53		 push	 ebx
$LL4@BuildAttac:

; 67   : 	{
; 68   : 		CFlyingData::TFlyingAttachData & rfad = m_pData->GetAttachDataReference(i);

  00038	57		 push	 edi
  00039	8b ce		 mov	 ecx, esi
  0003b	e8 00 00 00 00	 call	 ?GetAttachDataReference@CFlyingData@@QAEAAUTFlyingAttachData@1@H@Z ; CFlyingData::GetAttachDataReference
  00040	8b f0		 mov	 esi, eax

; 69   : 
; 70   : 		switch(rfad.iType)

  00042	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00044	83 e9 01	 sub	 ecx, 1
  00047	0f 85 8e 00 00
	00		 jne	 $LN2@BuildAttac
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  0004d	83 7e 1c 10	 cmp	 DWORD PTR [esi+28], 16	; 00000010H

; 4107 :         return _Mypair._Myval2._Myptr();

  00051	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 78   : 					CEffectManager & rem = CEffectManager::Instance();

  00054	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?ms_singleton@?$CSingleton@VCEffectManager@@@@0PAVCEffectManager@@A ; CSingleton<CEffectManager>::ms_singleton
  0005a	89 5d f0	 mov	 DWORD PTR _rem$1$[ebp], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  0005d	72 02		 jb	 SHORT $LN18@BuildAttac

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  0005f	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN18@BuildAttac:
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 81   : 					DWORD dwCRC = GetCaseCRC32(rfad.strFilename.c_str(),rfad.strFilename.size());

  00061	ff 76 18	 push	 DWORD PTR [esi+24]
  00064	51		 push	 ecx
  00065	e8 00 00 00 00	 call	 ?GetCaseCRC32@@YAKPBDI@Z ; GetCaseCRC32
  0006a	83 c4 08	 add	 esp, 8
  0006d	89 45 f4	 mov	 DWORD PTR _dwCRC$1$[ebp], eax

; 82   : 
; 83   : 					aei.iAttachIndex = i;
; 84   : 					aei.dwEffectInstanceIndex = rem.GetEmptyIndex();

  00070	8b cb		 mov	 ecx, ebx
  00072	89 7d e4	 mov	 DWORD PTR _aei$1[ebp], edi
  00075	e8 00 00 00 00	 call	 ?GetEmptyIndex@CEffectManager@@QAEHXZ ; CEffectManager::GetEmptyIndex

; 85   : 
; 86   : 					aei.pFlyTrace = NULL;
; 87   : 					if (rfad.bHasTail)

  0007a	33 db		 xor	 ebx, ebx
  0007c	89 45 fc	 mov	 DWORD PTR _aei$1$[ebp], eax
  0007f	89 45 e8	 mov	 DWORD PTR _aei$1[ebp+4], eax
  00082	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _aei$1[ebp+8], 0
  00089	38 5e 20	 cmp	 BYTE PTR [esi+32], bl
  0008c	74 15		 je	 SHORT $LN9@BuildAttac

; 88   : 					{
; 89   : 						aei.pFlyTrace = CFlyTrace::New();

  0008e	e8 00 00 00 00	 call	 ?New@CFlyTrace@@SAPAV1@XZ ; CFlyTrace::New
  00093	8b d8		 mov	 ebx, eax

; 90   : 						aei.pFlyTrace->Create(rfad);

  00095	56		 push	 esi
  00096	8b cb		 mov	 ecx, ebx
  00098	89 5d ec	 mov	 DWORD PTR _aei$1[ebp+8], ebx
  0009b	e8 00 00 00 00	 call	 ?Create@CFlyTrace@@QAEXABUTFlyingAttachData@CFlyingData@@@Z ; CFlyTrace::Create
  000a0	8b 45 fc	 mov	 eax, DWORD PTR _aei$1$[ebp]
$LN9@BuildAttac:

; 91   : 					}
; 92   : 					rem.CreateEffectInstance(aei.dwEffectInstanceIndex,dwCRC);

  000a3	ff 75 f4	 push	 DWORD PTR _dwCRC$1$[ebp]
  000a6	8b 4d f0	 mov	 ecx, DWORD PTR _rem$1$[ebp]
  000a9	50		 push	 eax
  000aa	e8 00 00 00 00	 call	 ?CreateEffectInstance@CEffectManager@@QAEXKK@Z ; CEffectManager::CreateEffectInstance

; 93   : 
; 94   : 					m_vecAttachEffectInstance.push_back(aei);

  000af	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000b2	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  000b8	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000bb	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  000be	74 11		 je	 SHORT $LN25@BuildAttac
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 254  :         ::new (static_cast<void*>(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

  000c0	89 38		 mov	 DWORD PTR [eax], edi
  000c2	8b 55 fc	 mov	 edx, DWORD PTR _aei$1$[ebp]
  000c5	89 50 04	 mov	 DWORD PTR [eax+4], edx
  000c8	89 58 08	 mov	 DWORD PTR [eax+8], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 806  :         ++_Mylast;

  000cb	83 41 04 0c	 add	 DWORD PTR [ecx+4], 12	; 0000000cH

; 782  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  000cf	eb 0a		 jmp	 SHORT $LN2@BuildAttac
$LN25@BuildAttac:

; 783  :         }
; 784  : 
; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  000d1	8d 55 e4	 lea	 edx, DWORD PTR _aei$1[ebp]
  000d4	52		 push	 edx
  000d5	50		 push	 eax
  000d6	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABUTAttachEffectInstance@CFlyingInstance@@@?$vector@UTAttachEffectInstance@CFlyingInstance@@V?$allocator@UTAttachEffectInstance@CFlyingInstance@@@std@@@std@@AAEPAUTAttachEffectInstance@CFlyingInstance@@QAU23@ABU23@@Z ; std::vector<CFlyingInstance::TAttachEffectInstance,std::allocator<CFlyingInstance::TAttachEffectInstance> >::_Emplace_reallocate<CFlyingInstance::TAttachEffectInstance const &>
$LN2@BuildAttac:

; 1868 :         auto& _My_data = _Mypair._Myval2;

  000db	8b 45 f8	 mov	 eax, DWORD PTR _this$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 66   : 	for(int i=0;i<m_pData->GetAttachDataCount();i++)

  000de	47		 inc	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1868 :         auto& _My_data = _Mypair._Myval2;

  000df	8b 70 08	 mov	 esi, DWORD PTR [eax+8]

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000e2	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  000e7	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  000ed	2b 8e 84 00 00
	00		 sub	 ecx, DWORD PTR [esi+132]
  000f3	f7 e9		 imul	 ecx
  000f5	c1 fa 05	 sar	 edx, 5
  000f8	8b c2		 mov	 eax, edx
  000fa	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000fd	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 66   : 	for(int i=0;i<m_pData->GetAttachDataCount();i++)

  000ff	3b f8		 cmp	 edi, eax
  00101	0f 8c 31 ff ff
	ff		 jl	 $LL4@BuildAttac
  00107	5b		 pop	 ebx
$LN3@BuildAttac:
  00108	5f		 pop	 edi

; 95   : 				}
; 96   : 				break;
; 97   : 		}
; 98   : 	}
; 99   : }

  00109	5e		 pop	 esi
  0010a	8b e5		 mov	 esp, ebp
  0010c	5d		 pop	 ebp
  0010d	c3		 ret	 0
?BuildAttachInstance@CFlyingInstance@@QAEXXZ ENDP	; CFlyingInstance::BuildAttachInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
;	COMDAT ?AdjustDirectionForHoming@CFlyingInstance@@QAEXABUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
_f$1$ = -60						; size = 4
_q$8$ = -60						; size = 4
tv2332 = -60						; size = 4
_q$4$ = -56						; size = 4
tv2418 = -56						; size = 4
_q$6$ = -52						; size = 4
_q$3$ = -52						; size = 4
_f$1$ = -48						; size = 4
_c$1$ = -48						; size = 4
_q$5$ = -48						; size = 4
_q$ = -44						; size = 16
_vTargetDir$ = -28					; size = 12
_vVel$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_v3TargetPosition$ = 8					; size = 4
?AdjustDirectionForHoming@CFlyingInstance@@QAEXABUD3DXVECTOR3@@@Z PROC ; CFlyingInstance::AdjustDirectionForHoming, COMDAT
; _this$ = ecx

; 143  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 40	 sub	 esp, 64			; 00000040H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c4		 xor	 eax, esp
  00010	89 44 24 3c	 mov	 DWORD PTR __$ArrayPad$[esp+64], eax
  00014	8b 45 08	 mov	 eax, DWORD PTR _v3TargetPosition$[ebp]
  00017	56		 push	 esi
  00018	8b f1		 mov	 esi, ecx
  0001a	57		 push	 edi

; 144  : 	D3DXVECTOR3 vTargetDir(v3TargetPosition);

  0001b	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0001f	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00022	66 0f d6 44 24
	2c		 movq	 QWORD PTR _vTargetDir$[esp+72], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 213  :     x -= v.x;

  00028	f3 0f 10 44 24
	2c		 movss	 xmm0, DWORD PTR _vTargetDir$[esp+72]
  0002e	f3 0f 5c 46 2c	 subss	 xmm0, DWORD PTR [esi+44]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 144  : 	D3DXVECTOR3 vTargetDir(v3TargetPosition);

  00033	89 44 24 34	 mov	 DWORD PTR _vTargetDir$[esp+80], eax

; 146  : 	D3DXVec3Normalize(&vTargetDir,&vTargetDir);

  00037	8d 44 24 2c	 lea	 eax, DWORD PTR _vTargetDir$[esp+72]
  0003b	50		 push	 eax
  0003c	50		 push	 eax
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 213  :     x -= v.x;

  0003d	f3 0f 11 44 24
	34		 movss	 DWORD PTR _vTargetDir$[esp+80], xmm0

; 214  :     y -= v.y;

  00043	f3 0f 10 44 24
	38		 movss	 xmm0, DWORD PTR _vTargetDir$[esp+84]
  00049	f3 0f 5c 46 30	 subss	 xmm0, DWORD PTR [esi+48]
  0004e	f3 0f 11 44 24
	38		 movss	 DWORD PTR _vTargetDir$[esp+84], xmm0

; 215  :     z -= v.z;

  00054	f3 0f 10 44 24
	3c		 movss	 xmm0, DWORD PTR _vTargetDir$[esp+88]
  0005a	f3 0f 5c 46 34	 subss	 xmm0, DWORD PTR [esi+52]
  0005f	f3 0f 11 44 24
	3c		 movss	 DWORD PTR _vTargetDir$[esp+88], xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 146  : 	D3DXVec3Normalize(&vTargetDir,&vTargetDir);

  00065	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 147  : 	D3DXVECTOR3 vVel;
; 148  : 	D3DXVec3Normalize(&vVel, &m_v3Velocity);

  0006a	8d 7e 38	 lea	 edi, DWORD PTR [esi+56]
  0006d	57		 push	 edi
  0006e	8d 44 24 3c	 lea	 eax, DWORD PTR _vVel$[esp+76]
  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00078	f3 0f 10 4c 24
	38		 movss	 xmm1, DWORD PTR _vVel$[esp+72]
  0007e	f3 0f 10 54 24
	3c		 movss	 xmm2, DWORD PTR _vVel$[esp+76]
  00084	f3 0f 5c 54 24
	30		 subss	 xmm2, DWORD PTR _vTargetDir$[esp+76]
  0008a	f3 0f 5c 4c 24
	2c		 subss	 xmm1, DWORD PTR _vTargetDir$[esp+72]
  00090	f3 0f 10 44 24
	40		 movss	 xmm0, DWORD PTR _vVel$[esp+80]
  00096	f3 0f 5c 44 24
	34		 subss	 xmm0, DWORD PTR _vTargetDir$[esp+80]

; 182  :     z = fz;

  0009c	f3 0f 59 d2	 mulss	 xmm2, xmm2

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  000a0	f3 0f 59 c9	 mulss	 xmm1, xmm1
  000a4	f3 0f 59 c0	 mulss	 xmm0, xmm0
  000a8	f3 0f 58 d1	 addss	 xmm2, xmm1
  000ac	f3 0f 58 d0	 addss	 xmm2, xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 150  : 	if (D3DXVec3LengthSq(&(vVel - vTargetDir)) < 0.001f)

  000b0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3a83126f
  000b8	0f 2f c2	 comiss	 xmm0, xmm2
  000bb	0f 87 38 05 00
	00		 ja	 $LN1@AdjustDire

; 151  : 		return;
; 152  : 
; 153  : 	D3DXQUATERNION q = SafeRotationNormalizedArc(vVel,vTargetDir);

  000c1	8d 44 24 2c	 lea	 eax, DWORD PTR _vTargetDir$[esp+72]
  000c5	50		 push	 eax
  000c6	8d 44 24 3c	 lea	 eax, DWORD PTR _vVel$[esp+76]
  000ca	50		 push	 eax
  000cb	8d 44 24 24	 lea	 eax, DWORD PTR _q$[esp+80]
  000cf	50		 push	 eax
  000d0	e8 00 00 00 00	 call	 ?SafeRotationNormalizedArc@@YA?AUD3DXQUATERNION@@ABUD3DXVECTOR3@@0@Z ; SafeRotationNormalizedArc

; 154  : 
; 155  : 	if (m_pData->m_fHomingMaxAngle > 180)

  000d5	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000d8	83 c4 0c	 add	 esp, 12			; 0000000cH
  000db	f3 0f 10 40 60	 movss	 xmm0, DWORD PTR [eax+96]
  000e0	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@43340000
  000e7	0f 86 03 02 00
	00		 jbe	 $LN3@AdjustDire
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 103  : 	v *= -2*pq->w;

  000ed	f3 0f 10 4c 24
	28		 movss	 xmm1, DWORD PTR _q$[esp+84]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  000f3	f3 0f 10 54 24
	20		 movss	 xmm2, DWORD PTR _q$[esp+76]
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 103  : 	v *= -2*pq->w;

  000f9	0f 28 c1	 movaps	 xmm0, xmm1
  000fc	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@c0000000
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00104	f3 0f 10 5c 24
	1c		 movss	 xmm3, DWORD PTR _q$[esp+72]
  0010a	f3 0f 10 7c 24
	24		 movss	 xmm7, DWORD PTR _q$[esp+80]
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 103  : 	v *= -2*pq->w;

  00110	f3 0f 11 44 24
	10		 movss	 DWORD PTR tv2418[esp+72], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00116	0f 28 c3	 movaps	 xmm0, xmm3
  00119	f3 0f 59 c3	 mulss	 xmm0, xmm3
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 104  : 	v += (pq->w*pq->w - D3DXVec3LengthSq((D3DXVECTOR3*)pq))*(*pv);

  0011d	f3 0f 59 c9	 mulss	 xmm1, xmm1
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00121	f3 0f 10 77 04	 movss	 xmm6, DWORD PTR [edi+4]

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00126	f3 0f 10 2f	 movss	 xmm5, DWORD PTR [edi]
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 104  : 	v += (pq->w*pq->w - D3DXVec3LengthSq((D3DXVECTOR3*)pq))*(*pv);

  0012a	f3 0f 11 4c 24
	0c		 movss	 DWORD PTR _f$1$[esp+72], xmm1
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00130	0f 28 ca	 movaps	 xmm1, xmm2
  00133	f3 0f 59 ca	 mulss	 xmm1, xmm2

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00137	f3 0f 10 67 08	 movss	 xmm4, DWORD PTR [edi+8]

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0013c	f3 0f 11 5c 24
	18		 movss	 DWORD PTR _q$5$[esp+72], xmm3

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00142	0f 28 dd	 movaps	 xmm3, xmm5

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00145	f3 0f 58 c8	 addss	 xmm1, xmm0

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00149	f3 0f 59 5c 24
	18		 mulss	 xmm3, DWORD PTR _q$5$[esp+72]

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0014f	0f 28 c7	 movaps	 xmm0, xmm7
  00152	f3 0f 11 54 24
	14		 movss	 DWORD PTR _q$3$[esp+72], xmm2
  00158	f3 0f 59 c7	 mulss	 xmm0, xmm7
  0015c	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 104  : 	v += (pq->w*pq->w - D3DXVec3LengthSq((D3DXVECTOR3*)pq))*(*pv);

  00160	f3 0f 10 44 24
	0c		 movss	 xmm0, DWORD PTR _f$1$[esp+72]
  00166	f3 0f 5c c1	 subss	 xmm0, xmm1
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  0016a	0f 28 cd	 movaps	 xmm1, xmm5
  0016d	f3 0f 59 4c 24
	14		 mulss	 xmm1, DWORD PTR _q$3$[esp+72]
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 104  : 	v += (pq->w*pq->w - D3DXVec3LengthSq((D3DXVECTOR3*)pq))*(*pv);

  00173	f3 0f 11 44 24
	0c		 movss	 DWORD PTR _f$1$[esp+72], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00179	0f 28 c6	 movaps	 xmm0, xmm6
  0017c	f3 0f 59 c2	 mulss	 xmm0, xmm2

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00180	0f 28 d4	 movaps	 xmm2, xmm4
  00183	f3 0f 59 54 24
	18		 mulss	 xmm2, DWORD PTR _q$5$[esp+72]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00189	f3 0f 58 d8	 addss	 xmm3, xmm0
  0018d	0f 28 c4	 movaps	 xmm0, xmm4
  00190	f3 0f 59 c7	 mulss	 xmm0, xmm7
  00194	f3 0f 58 d8	 addss	 xmm3, xmm0

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00198	0f 28 c5	 movaps	 xmm0, xmm5
  0019b	f3 0f 59 c7	 mulss	 xmm0, xmm7

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0019f	f3 0f 59 6c 24
	0c		 mulss	 xmm5, DWORD PTR _f$1$[esp+72]

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  001a5	f3 0f 5c d0	 subss	 xmm2, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  001a9	0f 28 c6	 movaps	 xmm0, xmm6
  001ac	f3 0f 59 44 24
	0c		 mulss	 xmm0, DWORD PTR _f$1$[esp+72]
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 105  : 	v += 2*D3DXVec3Dot((D3DXVECTOR3*)pq,pv)*(*(D3DXVECTOR3*)pq);

  001b2	f3 0f 58 db	 addss	 xmm3, xmm3
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 222  :     x *= f;

  001b6	f3 0f 59 54 24
	10		 mulss	 xmm2, DWORD PTR tv2418[esp+72]

; 204  :     x += v.x;

  001bc	f3 0f 58 d0	 addss	 xmm2, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  001c0	0f 28 c3	 movaps	 xmm0, xmm3
  001c3	f3 0f 59 44 24
	14		 mulss	 xmm0, DWORD PTR _q$3$[esp+72]

; 204  :     x += v.x;

  001c9	f3 0f 58 d0	 addss	 xmm2, xmm0

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  001cd	0f 28 c6	 movaps	 xmm0, xmm6
  001d0	f3 0f 59 44 24
	18		 mulss	 xmm0, DWORD PTR _q$5$[esp+72]
  001d6	f3 0f 59 f7	 mulss	 xmm6, xmm7
  001da	f3 0f 5c c8	 subss	 xmm1, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  001de	0f 28 c4	 movaps	 xmm0, xmm4
  001e1	f3 0f 59 44 24
	0c		 mulss	 xmm0, DWORD PTR _f$1$[esp+72]

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  001e7	f3 0f 59 64 24
	14		 mulss	 xmm4, DWORD PTR _q$3$[esp+72]

; 223  :     y *= f;

  001ed	f3 0f 59 4c 24
	10		 mulss	 xmm1, DWORD PTR tv2418[esp+72]

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  001f3	f3 0f 5c f4	 subss	 xmm6, xmm4

; 205  :     y += v.y;

  001f7	f3 0f 58 c8	 addss	 xmm1, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  001fb	0f 28 c3	 movaps	 xmm0, xmm3
  001fe	f3 0f 59 c7	 mulss	 xmm0, xmm7
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 103  : 	v *= -2*pq->w;

  00202	f3 0f 59 74 24
	10		 mulss	 xmm6, DWORD PTR tv2418[esp+72]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 205  :     y += v.y;

  00208	f3 0f 58 c8	 addss	 xmm1, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0020c	f3 0f 10 44 24
	18		 movss	 xmm0, DWORD PTR _q$5$[esp+72]
  00212	f3 0f 59 d8	 mulss	 xmm3, xmm0

; 182  :     z = fz;

  00216	f3 0f 58 f5	 addss	 xmm6, xmm5
  0021a	f3 0f 58 f3	 addss	 xmm6, xmm3
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 106  : 	*pvout = v;

  0021e	f3 0f 11 37	 movss	 DWORD PTR [edi], xmm6
  00222	f3 0f 11 57 04	 movss	 DWORD PTR [edi+4], xmm2
  00227	f3 0f 11 4f 08	 movss	 DWORD PTR [edi+8], xmm1
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  0022c	f3 0f 10 6e 50	 movss	 xmm5, DWORD PTR [esi+80]
  00231	f3 0f 10 76 54	 movss	 xmm6, DWORD PTR [esi+84]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00236	0f 28 e5	 movaps	 xmm4, xmm5

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00239	f3 0f 10 5e 58	 movss	 xmm3, DWORD PTR [esi+88]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0023e	f3 0f 59 e0	 mulss	 xmm4, xmm0
  00242	0f 28 c6	 movaps	 xmm0, xmm6
  00245	f3 0f 59 44 24
	14		 mulss	 xmm0, DWORD PTR _q$3$[esp+72]
  0024b	f3 0f 58 e0	 addss	 xmm4, xmm0
  0024f	0f 28 c3	 movaps	 xmm0, xmm3
  00252	f3 0f 59 c7	 mulss	 xmm0, xmm7
  00256	f3 0f 58 e0	 addss	 xmm4, xmm0

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  0025a	0f 28 c5	 movaps	 xmm0, xmm5
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 105  : 	v += 2*D3DXVec3Dot((D3DXVECTOR3*)pq,pv)*(*(D3DXVECTOR3*)pq);

  0025d	f3 0f 58 e4	 addss	 xmm4, xmm4
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00261	f3 0f 59 c7	 mulss	 xmm0, xmm7
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 159  : 		D3DXQuaternionMultiply(&m_qRot, &q, &m_qRot);

  00265	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00268	8d 4c 24 1c	 lea	 ecx, DWORD PTR _q$[esp+72]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  0026c	0f 28 d3	 movaps	 xmm2, xmm3

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  0026f	0f 28 cd	 movaps	 xmm1, xmm5
  00272	f3 0f 59 54 24
	18		 mulss	 xmm2, DWORD PTR _q$5$[esp+72]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 159  : 		D3DXQuaternionMultiply(&m_qRot, &q, &m_qRot);

  00278	50		 push	 eax
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  00279	f3 0f 59 4c 24
	18		 mulss	 xmm1, DWORD PTR _q$3$[esp+76]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 159  : 		D3DXQuaternionMultiply(&m_qRot, &q, &m_qRot);

  0027f	51		 push	 ecx
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00280	f3 0f 5c d0	 subss	 xmm2, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00284	f3 0f 59 6c 24
	14		 mulss	 xmm5, DWORD PTR _f$1$[esp+80]
  0028a	0f 28 c6	 movaps	 xmm0, xmm6
  0028d	f3 0f 59 44 24
	14		 mulss	 xmm0, DWORD PTR _f$1$[esp+80]

; 222  :     x *= f;

  00293	f3 0f 59 54 24
	18		 mulss	 xmm2, DWORD PTR tv2418[esp+80]

; 204  :     x += v.x;

  00299	f3 0f 58 d0	 addss	 xmm2, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0029d	0f 28 c4	 movaps	 xmm0, xmm4
  002a0	f3 0f 59 44 24
	1c		 mulss	 xmm0, DWORD PTR _q$3$[esp+80]

; 204  :     x += v.x;

  002a6	f3 0f 58 d0	 addss	 xmm2, xmm0

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  002aa	0f 28 c6	 movaps	 xmm0, xmm6
  002ad	f3 0f 59 44 24
	20		 mulss	 xmm0, DWORD PTR _q$5$[esp+80]
  002b3	f3 0f 59 f7	 mulss	 xmm6, xmm7
  002b7	f3 0f 5c c8	 subss	 xmm1, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  002bb	0f 28 c3	 movaps	 xmm0, xmm3

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  002be	f3 0f 59 5c 24
	1c		 mulss	 xmm3, DWORD PTR _q$3$[esp+80]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  002c4	f3 0f 59 44 24
	14		 mulss	 xmm0, DWORD PTR _f$1$[esp+80]

; 223  :     y *= f;

  002ca	f3 0f 59 4c 24
	18		 mulss	 xmm1, DWORD PTR tv2418[esp+80]

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  002d0	f3 0f 5c f3	 subss	 xmm6, xmm3

; 205  :     y += v.y;

  002d4	f3 0f 58 c8	 addss	 xmm1, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  002d8	0f 28 c4	 movaps	 xmm0, xmm4
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 103  : 	v *= -2*pq->w;

  002db	f3 0f 59 74 24
	18		 mulss	 xmm6, DWORD PTR tv2418[esp+80]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  002e1	f3 0f 59 64 24
	20		 mulss	 xmm4, DWORD PTR _q$5$[esp+80]
  002e7	f3 0f 59 c7	 mulss	 xmm0, xmm7
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 160  : 		return;

  002eb	e9 e8 02 00 00	 jmp	 $LN113@AdjustDire
$LN3@AdjustDire:

; 161  : 	}
; 162  : 
; 163  : 	float c = cosf(D3DXToRadian(m_pData->m_fHomingMaxAngle));

  002f0	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  002f8	f3 0f 11 44 24
	0c		 movss	 DWORD PTR tv2332[esp+72], xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 653  :             return (float)cos(_X);

  002fe	0f 5a c0	 cvtps2pd xmm0, xmm0
  00301	e8 00 00 00 00	 call	 __libm_sse2_cos_precise

; 758  :             return (float)sin(_X);

  00306	f3 0f 10 4c 24
	0c		 movss	 xmm1, DWORD PTR tv2332[esp+72]

; 653  :             return (float)cos(_X);

  0030c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00310	f3 0f 11 44 24
	18		 movss	 DWORD PTR _c$1$[esp+72], xmm0

; 758  :             return (float)sin(_X);

  00316	0f 5a c1	 cvtps2pd xmm0, xmm1
  00319	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 166  : 	if (q.w <= -1.0f + 0.0001f)

  0031e	f3 0f 10 54 24
	28		 movss	 xmm2, DWORD PTR _q$[esp+84]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 758  :             return (float)sin(_X);

  00324	0f 57 db	 xorps	 xmm3, xmm3
  00327	f2 0f 5a d8	 cvtsd2ss xmm3, xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 166  : 	if (q.w <= -1.0f + 0.0001f)

  0032b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ff972
  00333	0f 2f c2	 comiss	 xmm0, xmm2
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 758  :             return (float)sin(_X);

  00336	f3 0f 11 5c 24
	0c		 movss	 DWORD PTR _q$8$[esp+72], xmm3
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 166  : 	if (q.w <= -1.0f + 0.0001f)

  0033c	72 29		 jb	 SHORT $LN4@AdjustDire

; 167  : 	{
; 168  : 		q.x = 0;
; 169  : 		q.y = 0;
; 170  : 		q.z = s;
; 171  : 		q.w = c;

  0033e	f3 0f 10 54 24
	18		 movss	 xmm2, DWORD PTR _c$1$[esp+72]
  00344	0f 57 c0	 xorps	 xmm0, xmm0
  00347	0f 57 c9	 xorps	 xmm1, xmm1
  0034a	f3 0f 11 44 24
	1c		 movss	 DWORD PTR _q$[esp+72], xmm0
  00350	f3 0f 11 4c 24
	20		 movss	 DWORD PTR _q$[esp+76], xmm1
  00356	f3 0f 11 5c 24
	24		 movss	 DWORD PTR _q$[esp+80], xmm3
  0035c	f3 0f 11 54 24
	28		 movss	 DWORD PTR _q$[esp+84], xmm2

; 172  : 	}

  00362	e9 9d 00 00 00	 jmp	 $LN114@AdjustDire
$LN4@AdjustDire:

; 173  : 	else if (q.w <= c && q.w <= 1.0f - 0.0001f)

  00367	f3 0f 10 44 24
	18		 movss	 xmm0, DWORD PTR _c$1$[esp+72]
  0036d	0f 2f c2	 comiss	 xmm0, xmm2
  00370	72 7a		 jb	 SHORT $LN110@AdjustDire
  00372	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7ff972
  0037a	0f 2f c2	 comiss	 xmm0, xmm2
  0037d	72 6d		 jb	 SHORT $LN110@AdjustDire

; 175  : 		float factor = s / sqrtf(1.0f - q.w * q.w);

  0037f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00387	0f 57 c9	 xorps	 xmm1, xmm1
  0038a	f3 0f 59 d2	 mulss	 xmm2, xmm2
  0038e	f3 0f 5c c2	 subss	 xmm0, xmm2
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  00392	0f 5a c0	 cvtps2pd xmm0, xmm0
  00395	66 0f 2e c8	 ucomisd xmm1, xmm0
  00399	77 06		 ja	 SHORT $LN111@AdjustDire
  0039b	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  0039f	eb 05		 jmp	 SHORT $LN112@AdjustDire
$LN111@AdjustDire:
  003a1	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN112@AdjustDire:
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 175  : 		float factor = s / sqrtf(1.0f - q.w * q.w);

  003a6	f3 0f 10 5c 24
	0c		 movss	 xmm3, DWORD PTR _q$8$[esp+72]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  003ac	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 179  : 		q.w = c;

  003b0	f3 0f 10 54 24
	18		 movss	 xmm2, DWORD PTR _c$1$[esp+72]
  003b6	f3 0f 5e d8	 divss	 xmm3, xmm0
  003ba	f3 0f 11 54 24
	28		 movss	 DWORD PTR _q$[esp+84], xmm2
  003c0	0f 28 c3	 movaps	 xmm0, xmm3
  003c3	0f 28 cb	 movaps	 xmm1, xmm3
  003c6	f3 0f 59 44 24
	1c		 mulss	 xmm0, DWORD PTR _q$[esp+72]
  003cc	f3 0f 59 4c 24
	20		 mulss	 xmm1, DWORD PTR _q$[esp+76]
  003d2	f3 0f 59 5c 24
	24		 mulss	 xmm3, DWORD PTR _q$[esp+80]
  003d8	f3 0f 11 44 24
	1c		 movss	 DWORD PTR _q$[esp+72], xmm0
  003de	f3 0f 11 4c 24
	20		 movss	 DWORD PTR _q$[esp+76], xmm1
  003e4	f3 0f 11 5c 24
	24		 movss	 DWORD PTR _q$[esp+80], xmm3
  003ea	eb 12		 jmp	 SHORT $LN115@AdjustDire
$LN110@AdjustDire:

; 173  : 	else if (q.w <= c && q.w <= 1.0f - 0.0001f)

  003ec	f3 0f 10 5c 24
	24		 movss	 xmm3, DWORD PTR _q$[esp+80]
  003f2	f3 0f 10 4c 24
	20		 movss	 xmm1, DWORD PTR _q$[esp+76]
  003f8	f3 0f 10 44 24
	1c		 movss	 xmm0, DWORD PTR _q$[esp+72]
$LN115@AdjustDire:
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  003fe	f3 0f 11 5c 24
	0c		 movss	 DWORD PTR _q$8$[esp+72], xmm3
$LN114@AdjustDire:
  00404	f3 0f 11 44 24
	14		 movss	 DWORD PTR _q$6$[esp+72], xmm0
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 103  : 	v *= -2*pq->w;

  0040a	0f 28 fa	 movaps	 xmm7, xmm2
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  0040d	f3 0f 10 77 04	 movss	 xmm6, DWORD PTR [edi+4]

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00412	f3 0f 10 2f	 movss	 xmm5, DWORD PTR [edi]

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00416	f3 0f 59 c0	 mulss	 xmm0, xmm0

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  0041a	f3 0f 10 67 08	 movss	 xmm4, DWORD PTR [edi+8]
  0041f	f3 0f 11 4c 24
	10		 movss	 DWORD PTR _q$4$[esp+72], xmm1

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00425	f3 0f 59 c9	 mulss	 xmm1, xmm1
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 103  : 	v *= -2*pq->w;

  00429	f3 0f 59 3d 00
	00 00 00	 mulss	 xmm7, DWORD PTR __real@c0000000
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00431	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 104  : 	v += (pq->w*pq->w - D3DXVec3LengthSq((D3DXVECTOR3*)pq))*(*pv);

  00435	f3 0f 59 d2	 mulss	 xmm2, xmm2
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00439	0f 28 c3	 movaps	 xmm0, xmm3
  0043c	f3 0f 59 c3	 mulss	 xmm0, xmm3

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00440	0f 28 dd	 movaps	 xmm3, xmm5
  00443	f3 0f 59 5c 24
	14		 mulss	 xmm3, DWORD PTR _q$6$[esp+72]

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00449	f3 0f 58 c8	 addss	 xmm1, xmm0

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0044d	0f 28 c6	 movaps	 xmm0, xmm6
  00450	f3 0f 59 44 24
	10		 mulss	 xmm0, DWORD PTR _q$4$[esp+72]
  00456	f3 0f 58 d8	 addss	 xmm3, xmm0
  0045a	0f 28 c4	 movaps	 xmm0, xmm4
  0045d	f3 0f 59 44 24
	0c		 mulss	 xmm0, DWORD PTR _q$8$[esp+72]
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 104  : 	v += (pq->w*pq->w - D3DXVec3LengthSq((D3DXVECTOR3*)pq))*(*pv);

  00463	f3 0f 5c d1	 subss	 xmm2, xmm1
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  00467	0f 28 cd	 movaps	 xmm1, xmm5
  0046a	f3 0f 59 4c 24
	10		 mulss	 xmm1, DWORD PTR _q$4$[esp+72]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00470	f3 0f 58 d8	 addss	 xmm3, xmm0
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 104  : 	v += (pq->w*pq->w - D3DXVec3LengthSq((D3DXVECTOR3*)pq))*(*pv);

  00474	f3 0f 11 54 24
	18		 movss	 DWORD PTR _f$1$[esp+72], xmm2
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  0047a	0f 28 d4	 movaps	 xmm2, xmm4
  0047d	0f 28 c5	 movaps	 xmm0, xmm5
  00480	f3 0f 59 44 24
	0c		 mulss	 xmm0, DWORD PTR _q$8$[esp+72]
  00486	f3 0f 59 54 24
	14		 mulss	 xmm2, DWORD PTR _q$6$[esp+72]
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 105  : 	v += 2*D3DXVec3Dot((D3DXVECTOR3*)pq,pv)*(*(D3DXVECTOR3*)pq);

  0048c	f3 0f 58 db	 addss	 xmm3, xmm3
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00490	f3 0f 59 6c 24
	18		 mulss	 xmm5, DWORD PTR _f$1$[esp+72]

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00496	f3 0f 5c d0	 subss	 xmm2, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0049a	0f 28 c6	 movaps	 xmm0, xmm6
  0049d	f3 0f 59 44 24
	18		 mulss	 xmm0, DWORD PTR _f$1$[esp+72]

; 222  :     x *= f;

  004a3	f3 0f 59 d7	 mulss	 xmm2, xmm7

; 204  :     x += v.x;

  004a7	f3 0f 58 d0	 addss	 xmm2, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  004ab	0f 28 c3	 movaps	 xmm0, xmm3
  004ae	f3 0f 59 44 24
	10		 mulss	 xmm0, DWORD PTR _q$4$[esp+72]

; 204  :     x += v.x;

  004b4	f3 0f 58 d0	 addss	 xmm2, xmm0

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  004b8	0f 28 c6	 movaps	 xmm0, xmm6
  004bb	f3 0f 59 44 24
	14		 mulss	 xmm0, DWORD PTR _q$6$[esp+72]
  004c1	f3 0f 59 74 24
	0c		 mulss	 xmm6, DWORD PTR _q$8$[esp+72]
  004c7	f3 0f 5c c8	 subss	 xmm1, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  004cb	0f 28 c4	 movaps	 xmm0, xmm4
  004ce	f3 0f 59 44 24
	18		 mulss	 xmm0, DWORD PTR _f$1$[esp+72]

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  004d4	f3 0f 59 64 24
	10		 mulss	 xmm4, DWORD PTR _q$4$[esp+72]

; 223  :     y *= f;

  004da	f3 0f 59 cf	 mulss	 xmm1, xmm7

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  004de	f3 0f 5c f4	 subss	 xmm6, xmm4

; 205  :     y += v.y;

  004e2	f3 0f 58 c8	 addss	 xmm1, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  004e6	0f 28 c3	 movaps	 xmm0, xmm3
  004e9	f3 0f 59 44 24
	0c		 mulss	 xmm0, DWORD PTR _q$8$[esp+72]
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 103  : 	v *= -2*pq->w;

  004ef	f3 0f 59 f7	 mulss	 xmm6, xmm7
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 205  :     y += v.y;

  004f3	f3 0f 58 c8	 addss	 xmm1, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  004f7	f3 0f 10 44 24
	14		 movss	 xmm0, DWORD PTR _q$6$[esp+72]
  004fd	f3 0f 59 d8	 mulss	 xmm3, xmm0

; 182  :     z = fz;

  00501	f3 0f 58 f5	 addss	 xmm6, xmm5
  00505	f3 0f 58 f3	 addss	 xmm6, xmm3
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 106  : 	*pvout = v;

  00509	f3 0f 11 37	 movss	 DWORD PTR [edi], xmm6
  0050d	f3 0f 11 57 04	 movss	 DWORD PTR [edi+4], xmm2
  00512	f3 0f 11 4f 08	 movss	 DWORD PTR [edi+8], xmm1
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00517	f3 0f 10 6e 50	 movss	 xmm5, DWORD PTR [esi+80]
  0051c	f3 0f 10 76 54	 movss	 xmm6, DWORD PTR [esi+84]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00521	0f 28 e5	 movaps	 xmm4, xmm5

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00524	f3 0f 10 5e 58	 movss	 xmm3, DWORD PTR [esi+88]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00529	f3 0f 59 e0	 mulss	 xmm4, xmm0

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  0052d	0f 28 d3	 movaps	 xmm2, xmm3
  00530	f3 0f 59 54 24
	14		 mulss	 xmm2, DWORD PTR _q$6$[esp+72]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00536	0f 28 c6	 movaps	 xmm0, xmm6
  00539	f3 0f 59 44 24
	10		 mulss	 xmm0, DWORD PTR _q$4$[esp+72]
  0053f	f3 0f 58 e0	 addss	 xmm4, xmm0
  00543	0f 28 c3	 movaps	 xmm0, xmm3
  00546	f3 0f 59 44 24
	0c		 mulss	 xmm0, DWORD PTR _q$8$[esp+72]
  0054c	f3 0f 58 e0	 addss	 xmm4, xmm0

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00550	0f 28 c5	 movaps	 xmm0, xmm5
  00553	f3 0f 59 44 24
	0c		 mulss	 xmm0, DWORD PTR _q$8$[esp+72]
  00559	f3 0f 5c d0	 subss	 xmm2, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0055d	0f 28 c6	 movaps	 xmm0, xmm6
  00560	f3 0f 59 44 24
	18		 mulss	 xmm0, DWORD PTR _f$1$[esp+72]
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 105  : 	v += 2*D3DXVec3Dot((D3DXVECTOR3*)pq,pv)*(*(D3DXVECTOR3*)pq);

  00566	f3 0f 58 e4	 addss	 xmm4, xmm4
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 222  :     x *= f;

  0056a	f3 0f 59 d7	 mulss	 xmm2, xmm7

; 204  :     x += v.x;

  0056e	f3 0f 58 d0	 addss	 xmm2, xmm0

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  00572	0f 28 cd	 movaps	 xmm1, xmm5
  00575	f3 0f 59 4c 24
	10		 mulss	 xmm1, DWORD PTR _q$4$[esp+72]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 186  : 	D3DXQuaternionMultiply(&m_qRot, &m_qRot, &q);

  0057b	8d 4c 24 1c	 lea	 ecx, DWORD PTR _q$[esp+72]
  0057f	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00582	f3 0f 59 6c 24
	18		 mulss	 xmm5, DWORD PTR _f$1$[esp+72]
  00588	0f 28 c4	 movaps	 xmm0, xmm4
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 186  : 	D3DXQuaternionMultiply(&m_qRot, &m_qRot, &q);

  0058b	51		 push	 ecx
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0058c	f3 0f 59 44 24
	14		 mulss	 xmm0, DWORD PTR _q$4$[esp+76]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 186  : 	D3DXQuaternionMultiply(&m_qRot, &m_qRot, &q);

  00592	50		 push	 eax
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  00593	f3 0f 58 d0	 addss	 xmm2, xmm0

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  00597	0f 28 c6	 movaps	 xmm0, xmm6
  0059a	f3 0f 59 44 24
	1c		 mulss	 xmm0, DWORD PTR _q$6$[esp+80]
  005a0	f3 0f 59 74 24
	14		 mulss	 xmm6, DWORD PTR _q$8$[esp+80]
  005a6	f3 0f 5c c8	 subss	 xmm1, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  005aa	0f 28 c3	 movaps	 xmm0, xmm3

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  005ad	f3 0f 59 5c 24
	18		 mulss	 xmm3, DWORD PTR _q$4$[esp+80]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  005b3	f3 0f 59 44 24
	20		 mulss	 xmm0, DWORD PTR _f$1$[esp+80]

; 223  :     y *= f;

  005b9	f3 0f 59 cf	 mulss	 xmm1, xmm7

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  005bd	f3 0f 5c f3	 subss	 xmm6, xmm3

; 205  :     y += v.y;

  005c1	f3 0f 58 c8	 addss	 xmm1, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  005c5	0f 28 c4	 movaps	 xmm0, xmm4
  005c8	f3 0f 59 44 24
	14		 mulss	 xmm0, DWORD PTR _q$8$[esp+80]
  005ce	f3 0f 59 64 24
	1c		 mulss	 xmm4, DWORD PTR _q$6$[esp+80]
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 103  : 	v *= -2*pq->w;

  005d4	f3 0f 59 f7	 mulss	 xmm6, xmm7
$LN113@AdjustDire:
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 187  : }

  005d8	f3 0f 58 f5	 addss	 xmm6, xmm5
  005dc	f3 0f 58 c8	 addss	 xmm1, xmm0
  005e0	50		 push	 eax
  005e1	f3 0f 58 f4	 addss	 xmm6, xmm4
  005e5	f3 0f 11 76 50	 movss	 DWORD PTR [esi+80], xmm6
  005ea	f3 0f 11 56 54	 movss	 DWORD PTR [esi+84], xmm2
  005ef	f3 0f 11 4e 58	 movss	 DWORD PTR [esi+88], xmm1
  005f4	e8 00 00 00 00	 call	 _D3DXQuaternionMultiply@12
$LN1@AdjustDire:
  005f9	8b 4c 24 44	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+72]
  005fd	5f		 pop	 edi
  005fe	5e		 pop	 esi
  005ff	33 cc		 xor	 ecx, esp
  00601	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00606	8b e5		 mov	 esp, ebp
  00608	5d		 pop	 ebp
  00609	c2 04 00	 ret	 4
?AdjustDirectionForHoming@CFlyingInstance@@QAEXABUD3DXVECTOR3@@@Z ENDP ; CFlyingInstance::AdjustDirectionForHoming
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
;	COMDAT ?Render@CFlyingInstance@@QAEXXZ
_TEXT	SEGMENT
?Render@CFlyingInstance@@QAEXXZ PROC			; CFlyingInstance::Render, COMDAT
; _this$ = ecx

; 544  : 	if (!m_bAlive)

  00000	80 79 20 00	 cmp	 BYTE PTR [ecx+32], 0
  00004	0f 85 00 00 00
	00		 jne	 ?RenderAttachInstance@CFlyingInstance@@QAEXXZ ; CFlyingInstance::RenderAttachInstance

; 545  : 		return;
; 546  : 	RenderAttachInstance();
; 547  : }

  0000a	c3		 ret	 0
?Render@CFlyingInstance@@QAEXXZ ENDP			; CFlyingInstance::Render
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\eterlib\CullingManager.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\eterlib\CullingManager.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\eterlib\CullingManager.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\eterlib\CullingManager.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\eterlib\CullingManager.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\eterlib\CullingManager.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
;	COMDAT ?Update@CFlyingInstance@@QAE_NXZ
_TEXT	SEGMENT
_rkCullingMgr$1$ = -156					; size = 4
_v3LastPosition$1$ = -152				; size = 8
$T2 = -152						; size = 8
$T3 = -144						; size = 12
_v3LastPosition$ = -144					; size = 12
__Loc$4 = -132						; size = 12
__Loc$5 = -132						; size = 12
_r$6 = -132						; size = 12
_r$7 = -132						; size = 12
_v3LastPosition$2$ = -120				; size = 4
tv1652 = -120						; size = 4
tv1583 = -116						; size = 4
_pHittedInstance$8 = -116				; size = 4
_f$1$ = -112						; size = 4
_pHittedInstance$1$ = -112				; size = 4
_fCollisionSphereRadius$1$ = -108			; size = 4
tv1841 = -108						; size = 4
tv1007 = -108						; size = 4
_f$ = -108						; size = 4
_f$ = -108						; size = 4
__Myhead$1$ = -104					; size = 4
tv1582 = -104						; size = 4
tv1025 = -104						; size = 4
tv653 = -104						; size = 4
_fGroundHeight$9 = -104					; size = 4
_kCheckAnotherMonsterDuringFlying$10 = -100		; size = 36
_kCheckBackgroundDuringFlying$11 = -64			; size = 32
_vecStart$ = -32					; size = 12
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
?Update@CFlyingInstance@@QAE_NXZ PROC			; CFlyingInstance::Update, COMDAT
; _this$ = ecx

; 344  : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f8	 and	 esp, -8			; fffffff8H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	6a ff		 push	 -1
  00018	68 00 00 00 00	 push	 __ehhandler$?Update@CFlyingInstance@@QAE_NXZ
  0001d	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00023	50		 push	 eax
  00024	53		 push	 ebx
  00025	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00035	56		 push	 esi
  00036	57		 push	 edi
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	8b f9		 mov	 edi, ecx

; 345  : 	if (!m_bAlive)

  00043	80 7f 20 00	 cmp	 BYTE PTR [edi+32], 0
  00047	0f 84 c1 01 00
	00		 je	 $LN198@Update

; 346  : 		return false;
; 347  : 
; 348  : 	if (m_pData->m_bIsHoming &&

  0004d	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00050	80 78 5c 00	 cmp	 BYTE PTR [eax+92], 0
  00054	74 44		 je	 SHORT $LN4@Update
  00056	f3 0f 10 47 1c	 movss	 xmm0, DWORD PTR [edi+28]
  0005b	f3 0f 58 40 64	 addss	 xmm0, DWORD PTR [eax+100]
  00060	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  00066	f3 0f 11 45 88	 movss	 DWORD PTR tv1652[ebp], xmm0
  0006b	e8 00 00 00 00	 call	 ?GetCurrentSecond@CTimer@@QAEMXZ ; CTimer::GetCurrentSecond
  00070	d9 5d 94	 fstp	 DWORD PTR tv1841[ebp]
  00073	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR tv1841[ebp]
  00078	0f 2f 45 88	 comiss	 xmm0, DWORD PTR tv1652[ebp]
  0007c	76 1c		 jbe	 SHORT $LN4@Update

; 349  : 		m_pData->m_fHomingStartTime + m_fStartTime < CTimer::Instance().GetCurrentSecond())
; 350  : 	{
; 351  : 		if (m_FlyTarget.IsObject())

  0007e	8d 4f 60	 lea	 ecx, DWORD PTR [edi+96]
  00081	e8 00 00 00 00	 call	 ?IsObject@CFlyTarget@@QAE_NXZ ; CFlyTarget::IsObject
  00086	84 c0		 test	 al, al
  00088	74 10		 je	 SHORT $LN4@Update

; 352  : 			AdjustDirectionForHoming(m_FlyTarget.GetFlyTargetPosition());

  0008a	8d 4f 60	 lea	 ecx, DWORD PTR [edi+96]
  0008d	e8 00 00 00 00	 call	 ?GetFlyTargetPosition@CFlyTarget@@QBEABUD3DXVECTOR3@@XZ ; CFlyTarget::GetFlyTargetPosition
  00092	50		 push	 eax
  00093	8b cf		 mov	 ecx, edi
  00095	e8 00 00 00 00	 call	 ?AdjustDirectionForHoming@CFlyingInstance@@QAEXABUD3DXVECTOR3@@@Z ; CFlyingInstance::AdjustDirectionForHoming
$LN4@Update:

; 353  : 	}
; 354  : 
; 355  : 	D3DXVECTOR3 v3LastPosition = m_v3Position;

  0009a	f3 0f 7e 47 2c	 movq	 xmm0, QWORD PTR [edi+44]
  0009f	8d 77 2c	 lea	 esi, DWORD PTR [edi+44]
  000a2	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 356  : 
; 357  : 	m_v3Velocity += m_v3Accel*CTimer::Instance().GetElapsedSecond();

  000a5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  000ab	66 0f d6 85 68
	ff ff ff	 movq	 QWORD PTR _v3LastPosition$1$[ebp], xmm0
  000b3	66 0f d6 85 70
	ff ff ff	 movq	 QWORD PTR _v3LastPosition$[ebp], xmm0
  000bb	89 45 88	 mov	 DWORD PTR _v3LastPosition$2$[ebp], eax
  000be	89 85 78 ff ff
	ff		 mov	 DWORD PTR _v3LastPosition$[ebp+8], eax
  000c4	e8 00 00 00 00	 call	 ?GetElapsedSecond@CTimer@@QAEMXZ ; CTimer::GetElapsedSecond
  000c9	d9 5d 94	 fstp	 DWORD PTR _f$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  000cc	f3 0f 10 55 94	 movss	 xmm2, DWORD PTR _f$[ebp]
  000d1	0f 28 c2	 movaps	 xmm0, xmm2
  000d4	0f 28 ca	 movaps	 xmm1, xmm2
  000d7	f3 0f 59 47 50	 mulss	 xmm0, DWORD PTR [edi+80]
  000dc	f3 0f 59 4f 54	 mulss	 xmm1, DWORD PTR [edi+84]
  000e1	f3 0f 59 57 58	 mulss	 xmm2, DWORD PTR [edi+88]

; 204  :     x += v.x;

  000e6	f3 0f 58 47 38	 addss	 xmm0, DWORD PTR [edi+56]

; 205  :     y += v.y;

  000eb	f3 0f 58 4f 3c	 addss	 xmm1, DWORD PTR [edi+60]

; 206  :     z += v.z;

  000f0	f3 0f 58 57 40	 addss	 xmm2, DWORD PTR [edi+64]
  000f5	f3 0f 11 47 38	 movss	 DWORD PTR [edi+56], xmm0
  000fa	f3 0f 11 4f 3c	 movss	 DWORD PTR [edi+60], xmm1
  000ff	f3 0f 11 57 40	 movss	 DWORD PTR [edi+64], xmm2
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 358  : 	m_v3Velocity.z+=m_pData->m_fGravity * CTimer::Instance().GetElapsedSecond();

  00104	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  0010a	e8 00 00 00 00	 call	 ?GetElapsedSecond@CTimer@@QAEMXZ ; CTimer::GetElapsedSecond
  0010f	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00112	d8 48 38	 fmul	 DWORD PTR [eax+56]
  00115	d9 5d 94	 fstp	 DWORD PTR tv1007[ebp]
  00118	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR tv1007[ebp]
  0011d	f3 0f 58 47 40	 addss	 xmm0, DWORD PTR [edi+64]
  00122	f3 0f 11 47 40	 movss	 DWORD PTR [edi+64], xmm0

; 359  : 	D3DXVECTOR3 v3Movement = m_v3Velocity * CTimer::Instance().GetElapsedSecond();

  00127	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  0012d	e8 00 00 00 00	 call	 ?GetElapsedSecond@CTimer@@QAEMXZ ; CTimer::GetElapsedSecond
  00132	d9 5d 94	 fstp	 DWORD PTR _f$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00135	f3 0f 10 5d 94	 movss	 xmm3, DWORD PTR _f$[ebp]
  0013a	0f 28 c3	 movaps	 xmm0, xmm3
  0013d	0f 28 d3	 movaps	 xmm2, xmm3
  00140	f3 0f 59 47 3c	 mulss	 xmm0, DWORD PTR [edi+60]
  00145	f3 0f 59 57 38	 mulss	 xmm2, DWORD PTR [edi+56]
  0014a	f3 0f 59 5f 40	 mulss	 xmm3, DWORD PTR [edi+64]

; 1239 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  0014f	0f 28 c8	 movaps	 xmm1, xmm0
  00152	f3 0f 59 c8	 mulss	 xmm1, xmm0

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00156	f3 0f 11 45 8c	 movss	 DWORD PTR tv1583[ebp], xmm0

; 182  :     z = fz;

  0015b	0f 28 c2	 movaps	 xmm0, xmm2
  0015e	f3 0f 59 c2	 mulss	 xmm0, xmm2

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00162	f3 0f 11 55 98	 movss	 DWORD PTR tv1582[ebp], xmm2
  00167	f3 0f 11 5d 90	 movss	 DWORD PTR _f$1$[ebp], xmm3

; 1239 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  0016c	f3 0f 58 c8	 addss	 xmm1, xmm0
  00170	0f 28 c3	 movaps	 xmm0, xmm3
  00173	f3 0f 59 c3	 mulss	 xmm0, xmm3
  00177	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  0017b	0f 5a c1	 cvtps2pd xmm0, xmm1
  0017e	0f 57 c9	 xorps	 xmm1, xmm1
  00181	66 0f 2e c8	 ucomisd xmm1, xmm0
  00185	77 06		 ja	 SHORT $LN192@Update
  00187	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  0018b	eb 05		 jmp	 SHORT $LN193@Update
$LN192@Update:
  0018d	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN193@Update:
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 361  : 	float fCollisionSphereRadius = max(_fMoveDistance*2, m_pData->m_fCollisionSphereRadius);

  00192	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  00195	0f 57 c9	 xorps	 xmm1, xmm1
  00198	f2 0f 5a c8	 cvtsd2ss xmm1, xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 365  : 	UpdateAttachInstance();

  0019c	8b cf		 mov	 ecx, edi
  0019e	0f 28 c1	 movaps	 xmm0, xmm1
  001a1	f3 0f 58 c1	 addss	 xmm0, xmm1
  001a5	f3 0f 5f 40 70	 maxss	 xmm0, DWORD PTR [eax+112]
  001aa	f3 0f 11 45 94	 movss	 DWORD PTR _fCollisionSphereRadius$1$[ebp], xmm0
  001af	f3 0f 10 47 5c	 movss	 xmm0, DWORD PTR [edi+92]
  001b4	f3 0f 5c c1	 subss	 xmm0, xmm1
  001b8	f3 0f 11 47 5c	 movss	 DWORD PTR [edi+92], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  001bd	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR tv1582[ebp]
  001c2	f3 0f 58 06	 addss	 xmm0, DWORD PTR [esi]
  001c6	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0

; 205  :     y += v.y;

  001ca	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR tv1583[ebp]
  001cf	f3 0f 58 46 04	 addss	 xmm0, DWORD PTR [esi+4]
  001d4	f3 0f 11 46 04	 movss	 DWORD PTR [esi+4], xmm0

; 206  :     z += v.z;

  001d9	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _f$1$[ebp]
  001de	f3 0f 58 46 08	 addss	 xmm0, DWORD PTR [esi+8]
  001e3	f3 0f 11 46 08	 movss	 DWORD PTR [esi+8], xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 365  : 	UpdateAttachInstance();

  001e8	e8 00 00 00 00	 call	 ?UpdateAttachInstance@CFlyingInstance@@QAEXXZ ; CFlyingInstance::UpdateAttachInstance
  001ed	0f 57 c0	 xorps	 xmm0, xmm0

; 366  : 
; 367  : 	if (m_fRemainRange<0)

  001f0	0f 2f 47 5c	 comiss	 xmm0, DWORD PTR [edi+92]
  001f4	76 1f		 jbe	 SHORT $LN5@Update

; 368  : 	{
; 369  : 		if (m_pHandler)

  001f6	8b 8f 94 00 00
	00		 mov	 ecx, DWORD PTR [edi+148]
  001fc	85 c9		 test	 ecx, ecx
  001fe	74 05		 je	 SHORT $LN6@Update

; 370  : 			m_pHandler->OnExplodingOutOfRange();

  00200	8b 01		 mov	 eax, DWORD PTR [ecx]
  00202	ff 50 14	 call	 DWORD PTR [eax+20]
$LN6@Update:

; 371  : 
; 372  : 		__Explode(false);

  00205	6a 00		 push	 0
  00207	8b cf		 mov	 ecx, edi
  00209	e8 00 00 00 00	 call	 ?__Explode@CFlyingInstance@@QAEX_N@Z ; CFlyingInstance::__Explode
$LN198@Update:

; 491  : }

  0020e	32 c0		 xor	 al, al
  00210	e9 9c 00 00 00	 jmp	 $LN1@Update
$LN5@Update:

; 373  : 		return false;
; 374  : 	}
; 375  : 
; 376  : 	if (m_FlyTarget.IsObject())

  00215	8d 4f 60	 lea	 ecx, DWORD PTR [edi+96]
  00218	e8 00 00 00 00	 call	 ?IsObject@CFlyTarget@@QAE_NXZ ; CFlyTarget::IsObject
  0021d	84 c0		 test	 al, al
  0021f	0f 84 aa 00 00
	00		 je	 $LN7@Update

; 377  : 	{
; 378  : 		if (!m_bTargetHitted)

  00225	83 bf 9c 00 00
	00 00		 cmp	 DWORD PTR [edi+156], 0
  0022c	0f 85 db 00 00
	00		 jne	 $LN17@Update

; 379  : 		{
; 380  : 			if (square_distance_between_linesegment_and_point(m_v3Position,v3LastPosition,m_FlyTarget.GetFlyTargetPosition())<m_pData->m_fBombRange*m_pData->m_fBombRange)

  00232	8d 4f 60	 lea	 ecx, DWORD PTR [edi+96]
  00235	e8 00 00 00 00	 call	 ?GetFlyTargetPosition@CFlyTarget@@QBEABUD3DXVECTOR3@@XZ ; CFlyTarget::GetFlyTargetPosition
  0023a	50		 push	 eax
  0023b	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _v3LastPosition$[ebp]
  00241	50		 push	 eax
  00242	56		 push	 esi
  00243	e8 00 00 00 00	 call	 ?square_distance_between_linesegment_and_point@@YAMABUD3DXVECTOR3@@00@Z ; square_distance_between_linesegment_and_point
  00248	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0024b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0024e	d9 5d 98	 fstp	 DWORD PTR tv653[ebp]
  00251	f3 0f 10 40 3c	 movss	 xmm0, DWORD PTR [eax+60]
  00256	f3 0f 59 c0	 mulss	 xmm0, xmm0
  0025a	0f 2f 45 98	 comiss	 xmm0, DWORD PTR tv653[ebp]
  0025e	0f 86 a9 00 00
	00		 jbe	 $LN17@Update

; 381  : 			{
; 382  : 				m_bTargetHitted = TRUE;
; 383  : 
; 384  : 				if (m_canAttack)

  00264	80 7f 21 00	 cmp	 BYTE PTR [edi+33], 0
  00268	c7 87 9c 00 00
	00 01 00 00 00	 mov	 DWORD PTR [edi+156], 1
  00272	74 13		 je	 SHORT $LN12@Update

; 385  : 				{
; 386  : 					IFlyTargetableObject* pVictim=m_FlyTarget.GetFlyTarget();

  00274	8d 4f 60	 lea	 ecx, DWORD PTR [edi+96]
  00277	e8 00 00 00 00	 call	 ?GetFlyTarget@CFlyTarget@@QAEPAVIFlyTargetableObject@@XZ ; CFlyTarget::GetFlyTarget

; 387  : 					if (pVictim)

  0027c	85 c0		 test	 eax, eax
  0027e	74 07		 je	 SHORT $LN12@Update

; 388  : 					{
; 389  : 						pVictim->OnShootDamage();

  00280	8b 10		 mov	 edx, DWORD PTR [eax]
  00282	8b c8		 mov	 ecx, eax
  00284	ff 52 08	 call	 DWORD PTR [edx+8]
$LN12@Update:

; 390  : 					}
; 391  : 				}
; 392  : 
; 393  : 				if (m_pHandler)

  00287	8b 8f 94 00 00
	00		 mov	 ecx, DWORD PTR [edi+148]
  0028d	85 c9		 test	 ecx, ecx
  0028f	74 08		 je	 SHORT $LN13@Update

; 394  : 				{
; 395  : 					m_pHandler->OnExplodingAtTarget(m_dwSkillIndex);

  00291	8b 01		 mov	 eax, DWORD PTR [ecx]
  00293	ff 77 28	 push	 DWORD PTR [edi+40]
  00296	ff 50 20	 call	 DWORD PTR [eax+32]
$LN13@Update:

; 396  : 				}
; 397  : 
; 398  : 				if (m_iPierceCount)

  00299	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
  0029c	85 c0		 test	 eax, eax
  0029e	0f 84 5a 02 00
	00		 je	 $LN29@Update

; 399  : 				{
; 400  : 					m_iPierceCount--;

  002a4	48		 dec	 eax

; 401  : 					__Bomb();

  002a5	8b cf		 mov	 ecx, edi
  002a7	89 47 24	 mov	 DWORD PTR [edi+36], eax
$LN197@Update:

; 491  : }

  002aa	e8 00 00 00 00	 call	 ?__Bomb@CFlyingInstance@@QAEXXZ ; CFlyingInstance::__Bomb
$LN28@Update:
  002af	b0 01		 mov	 al, 1
$LN1@Update:
  002b1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002b4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002bb	59		 pop	 ecx
  002bc	5f		 pop	 edi
  002bd	5e		 pop	 esi
  002be	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002c1	33 cd		 xor	 ecx, ebp
  002c3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002c8	8b e5		 mov	 esp, ebp
  002ca	5d		 pop	 ebp
  002cb	8b e3		 mov	 esp, ebx
  002cd	5b		 pop	 ebx
  002ce	c3		 ret	 0
$LN7@Update:

; 402  : 				}
; 403  : 				else
; 404  : 				{
; 405  : 					__Explode();
; 406  : 					return false;
; 407  : 				}
; 408  : 
; 409  : 				return true;
; 410  : 			}
; 411  : 		}
; 412  : 	}
; 413  : 	else if (m_FlyTarget.IsPosition())

  002cf	8d 4f 60	 lea	 ecx, DWORD PTR [edi+96]
  002d2	e8 00 00 00 00	 call	 ?IsPosition@CFlyTarget@@QAE_NXZ ; CFlyTarget::IsPosition
  002d7	84 c0		 test	 al, al
  002d9	74 32		 je	 SHORT $LN17@Update

; 414  : 	{
; 415  : 		if (square_distance_between_linesegment_and_point(m_v3Position,v3LastPosition,m_FlyTarget.GetFlyTargetPosition())<m_pData->m_fBombRange*m_pData->m_fBombRange)

  002db	8d 4f 60	 lea	 ecx, DWORD PTR [edi+96]
  002de	e8 00 00 00 00	 call	 ?GetFlyTargetPosition@CFlyTarget@@QBEABUD3DXVECTOR3@@XZ ; CFlyTarget::GetFlyTargetPosition
  002e3	50		 push	 eax
  002e4	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _v3LastPosition$[ebp]
  002ea	50		 push	 eax
  002eb	56		 push	 esi
  002ec	e8 00 00 00 00	 call	 ?square_distance_between_linesegment_and_point@@YAMABUD3DXVECTOR3@@00@Z ; square_distance_between_linesegment_and_point
  002f1	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  002f4	83 c4 0c	 add	 esp, 12			; 0000000cH
  002f7	d9 5d 98	 fstp	 DWORD PTR tv1025[ebp]
  002fa	f3 0f 10 40 3c	 movss	 xmm0, DWORD PTR [eax+60]
  002ff	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00303	0f 2f 45 98	 comiss	 xmm0, DWORD PTR tv1025[ebp]
  00307	0f 87 f1 01 00
	00		 ja	 $LN29@Update
$LN17@Update:
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h

; 107  : 		x = a;

  0030d	f3 0f 10 85 70
	ff ff ff	 movss	 xmm0, DWORD PTR _v3LastPosition$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 428  : 	if (m_pData->m_bHitOnAnotherMonster)

  00315	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00318	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCCullingManager@@@@0PAVCCullingManager@@A ; CSingleton<CCullingManager>::ms_singleton
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h

; 107  : 		x = a;

  0031e	f3 0f 11 45 e0	 movss	 DWORD PTR _vecStart$[ebp], xmm0

; 108  : 		y = b;

  00323	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR _v3LastPosition$[ebp+4]
  0032b	f3 0f 11 45 e4	 movss	 DWORD PTR _vecStart$[ebp+4], xmm0

; 109  : 		z = c;

  00330	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR _v3LastPosition$[ebp+8]
  00338	f3 0f 11 45 e8	 movss	 DWORD PTR _vecStart$[ebp+8], xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 428  : 	if (m_pData->m_bHitOnAnotherMonster)

  0033d	80 78 69 00	 cmp	 BYTE PTR [eax+105], 0
  00341	89 8d 64 ff ff
	ff		 mov	 DWORD PTR _rkCullingMgr$1$[ebp], ecx
  00347	0f 84 ca 00 00
	00		 je	 $LN20@Update

; 311  : 		: pOwner(pOwner)

  0034d	8b 87 98 00 00
	00		 mov	 eax, DWORD PTR [edi+152]

; 314  : 		s.v3LastPosition = v1;

  00353	f3 0f 7e 85 68
	ff ff ff	 movq	 xmm0, QWORD PTR _v3LastPosition$1$[ebp]
  0035b	89 45 bc	 mov	 DWORD PTR _kCheckAnotherMonsterDuringFlying$10[ebp+32], eax
  0035e	8b 45 88	 mov	 eax, DWORD PTR _v3LastPosition$2$[ebp]
  00361	89 45 b0	 mov	 DWORD PTR _kCheckAnotherMonsterDuringFlying$10[ebp+20], eax

; 315  : 		s.v3Position = v2;

  00364	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00367	66 0f d6 45 a8	 movq	 QWORD PTR _kCheckAnotherMonsterDuringFlying$10[ebp+12], xmm0
  0036c	f3 0f 7e 06	 movq	 xmm0, QWORD PTR [esi]
  00370	89 45 a4	 mov	 DWORD PTR _kCheckAnotherMonsterDuringFlying$10[ebp+8], eax
; File C:\Marty 5.5\Src-Client\Client\eterlib\CullingManager.h

; 15   : 		: f(fn), dist(distance)

  00373	8d 45 9c	 lea	 eax, DWORD PTR _kCheckAnotherMonsterDuringFlying$10[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 313  : 		s.fRadius = 10.0f;

  00376	c7 45 b4 00 00
	20 41		 mov	 DWORD PTR _kCheckAnotherMonsterDuringFlying$10[ebp+24], 1092616192 ; 41200000H

; 315  : 		s.v3Position = v2;

  0037d	66 0f d6 45 9c	 movq	 QWORD PTR _kCheckAnotherMonsterDuringFlying$10[ebp], xmm0

; 316  : 		pInst = 0;

  00382	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _kCheckAnotherMonsterDuringFlying$10[ebp+28], 0
; File C:\Marty 5.5\Src-Client\Client\eterlib\CullingManager.h

; 16   : 	{}

  00389	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _r$7[ebp], OFFSET ??_7?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@6B@

; 15   : 		: f(fn), dist(distance)

  00393	89 45 80	 mov	 DWORD PTR _r$7[ebp+4], eax
  00396	c7 45 84 00 00
	80 bf		 mov	 DWORD PTR _r$7[ebp+8], -1082130432 ; bf800000H

; 114  : 		m_Factory->RangeTest(p, radius, &r/*this*/);

  0039d	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _fCollisionSphereRadius$1$[ebp]
  003a2	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _r$7[ebp]
  003a8	50		 push	 eax
  003a9	51		 push	 ecx
  003aa	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  003ad	8d 45 e0	 lea	 eax, DWORD PTR _vecStart$[ebp]
  003b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b5	50		 push	 eax
  003b6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  003bd	e8 00 00 00 00	 call	 ?RangeTest@SpherePackFactory@@QAEXABVVector3d@@MPAVSpherePackCallback@@@Z ; SpherePackFactory::RangeTest
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 334  : 		return pInst!=0;

  003c2	8b 45 b8	 mov	 eax, DWORD PTR _kCheckAnotherMonsterDuringFlying$10[ebp+28]
; File C:\Marty 5.5\Src-Client\Client\eterlib\CullingManager.h

; 115  : 	}

  003c5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 334  : 		return pInst!=0;

  003cc	89 45 90	 mov	 DWORD PTR _pHittedInstance$1$[ebp], eax
  003cf	85 c0		 test	 eax, eax

; 429  : 	{
; 430  : 		FCheckAnotherMonsterDuringFlying kCheckAnotherMonsterDuringFlying(m_pOwner, v3LastPosition,m_v3Position);
; 431  : 		rkCullingMgr.ForInRange(vecStart,fCollisionSphereRadius, &kCheckAnotherMonsterDuringFlying);
; 432  : 		if (kCheckAnotherMonsterDuringFlying.IsHitted())

  003d1	74 44		 je	 SHORT $LN20@Update

; 433  : 		{
; 434  : 			IActorInstance * pHittedInstance = (IActorInstance*)kCheckAnotherMonsterDuringFlying.GetHittedObject();

  003d3	89 45 8c	 mov	 DWORD PTR _pHittedInstance$8[ebp], eax

; 435  : 			if (m_HittedObjectSet.end() == m_HittedObjectSet.find(pHittedInstance))

  003d6	8d b7 a0 00 00
	00		 lea	 esi, DWORD PTR [edi+160]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  003dc	8d 45 8c	 lea	 eax, DWORD PTR _pHittedInstance$8[ebp]
  003df	8b ce		 mov	 ecx, esi
  003e1	50		 push	 eax
  003e2	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR __Loc$5[ebp]
  003e8	50		 push	 eax
  003e9	e8 00 00 00 00	 call	 ??$_Find_lower_bound@PAVIActorInstance@@@?$_Tree@V?$_Tset_traits@PAVIActorInstance@@U?$less@PAVIActorInstance@@@std@@V?$allocator@PAVIActorInstance@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@PAVIActorInstance@@PAX@std@@@1@ABQAVIActorInstance@@@Z ; std::_Tree<std::_Tset_traits<IActorInstance *,std::less<IActorInstance *>,std::allocator<IActorInstance *>,0> >::_Find_lower_bound<IActorInstance *>

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  003ee	8b 4d 84	 mov	 ecx, DWORD PTR __Loc$5[ebp+8]
  003f1	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  003f5	0f 85 13 01 00
	00		 jne	 $LN76@Update
  003fb	8b 45 90	 mov	 eax, DWORD PTR _pHittedInstance$1$[ebp]
  003fe	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  00401	0f 82 07 01 00
	00		 jb	 $LN76@Update

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00407	8b 06		 mov	 eax, DWORD PTR [esi]
  00409	89 45 98	 mov	 DWORD PTR __Myhead$1$[ebp], eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 435  : 			if (m_HittedObjectSet.end() == m_HittedObjectSet.find(pHittedInstance))

  0040c	3b c1		 cmp	 eax, ecx
  0040e	0f 84 ff 00 00
	00		 je	 $LN187@Update
  00414	8d 77 2c	 lea	 esi, DWORD PTR [edi+44]
$LN20@Update:

; 456  : 			}
; 457  : 		}
; 458  : 	}
; 459  : 
; 460  : 	if (m_pData->m_bHitOnBackground)

  00417	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0041a	80 78 68 00	 cmp	 BYTE PTR [eax+104], 0
  0041e	0f 84 8b fe ff
	ff		 je	 $LN28@Update

; 461  : 	{
; 462  : 
; 463  : 		if (CFlyingManager::Instance().GetMapManagerPtr())

  00424	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_singleton@?$CSingleton@VCFlyingManager@@@@0PAVCFlyingManager@@A ; CSingleton<CFlyingManager>::ms_singleton
  00429	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0042c	85 c9		 test	 ecx, ecx
  0042e	74 35		 je	 SHORT $LN26@Update

; 464  : 		{
; 465  : 			float fGroundHeight = CFlyingManager::Instance().GetMapManagerPtr()->GetTerrainHeight(m_v3Position.x,-m_v3Position.y);

  00430	f3 0f 10 47 30	 movss	 xmm0, DWORD PTR [edi+48]
  00435	83 ec 08	 sub	 esp, 8
  00438	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0043f	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00445	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  00449	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0044e	e8 00 00 00 00	 call	 ?GetTerrainHeight@CMapManager@@QAEMMM@Z ; CMapManager::GetTerrainHeight
  00453	d9 5d 98	 fstp	 DWORD PTR _fGroundHeight$9[ebp]

; 466  : 			if (fGroundHeight>m_v3Position.z)

  00456	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _fGroundHeight$9[ebp]
  0045b	0f 2f 47 34	 comiss	 xmm0, DWORD PTR [edi+52]
  0045f	0f 87 8a 00 00
	00		 ja	 $LN196@Update
$LN26@Update:

; 283  : 		s.v3LastPosition = v1;

  00465	8b 45 88	 mov	 eax, DWORD PTR _v3LastPosition$2$[ebp]
  00468	f3 0f 7e 85 68
	ff ff ff	 movq	 xmm0, QWORD PTR _v3LastPosition$1$[ebp]
  00470	89 45 d4	 mov	 DWORD PTR _kCheckBackgroundDuringFlying$11[ebp+20], eax

; 284  : 		s.v3Position = v2;

  00473	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00476	66 0f d6 45 cc	 movq	 QWORD PTR _kCheckBackgroundDuringFlying$11[ebp+12], xmm0
  0047b	f3 0f 7e 06	 movq	 xmm0, QWORD PTR [esi]
  0047f	89 45 c8	 mov	 DWORD PTR _kCheckBackgroundDuringFlying$11[ebp+8], eax
; File C:\Marty 5.5\Src-Client\Client\eterlib\CullingManager.h

; 15   : 		: f(fn), dist(distance)

  00482	8d 45 c0	 lea	 eax, DWORD PTR _kCheckBackgroundDuringFlying$11[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 282  : 		s.fRadius = 1.0f;

  00485	c7 45 d8 00 00
	80 3f		 mov	 DWORD PTR _kCheckBackgroundDuringFlying$11[ebp+24], 1065353216 ; 3f800000H

; 284  : 		s.v3Position = v2;

  0048c	66 0f d6 45 c0	 movq	 QWORD PTR _kCheckBackgroundDuringFlying$11[ebp], xmm0

; 285  : 		bHit = false;

  00491	c6 45 dc 00	 mov	 BYTE PTR _kCheckBackgroundDuringFlying$11[ebp+28], 0
; File C:\Marty 5.5\Src-Client\Client\eterlib\CullingManager.h

; 16   : 	{}

  00495	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _r$6[ebp], OFFSET ??_7?$RangeTester@UFCheckBackgroundDuringFlying@@@@6B@

; 15   : 		: f(fn), dist(distance)

  0049f	89 45 80	 mov	 DWORD PTR _r$6[ebp+4], eax
  004a2	c7 45 84 00 00
	80 bf		 mov	 DWORD PTR _r$6[ebp+8], -1082130432 ; bf800000H

; 114  : 		m_Factory->RangeTest(p, radius, &r/*this*/);

  004a9	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _fCollisionSphereRadius$1$[ebp]
  004ae	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _r$6[ebp]
  004b4	50		 push	 eax
  004b5	51		 push	 ecx
  004b6	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _rkCullingMgr$1$[ebp]
  004bc	8d 45 e0	 lea	 eax, DWORD PTR _vecStart$[ebp]
  004bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004c4	50		 push	 eax
  004c5	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  004cc	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  004cf	e8 00 00 00 00	 call	 ?RangeTest@SpherePackFactory@@QAEXABVVector3d@@MPAVSpherePackCallback@@@Z ; SpherePackFactory::RangeTest
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 480  : 		if (kCheckBackgroundDuringFlying.IsHitted())

  004d4	80 7d dc 00	 cmp	 BYTE PTR _kCheckBackgroundDuringFlying$11[ebp+28], 0
; File C:\Marty 5.5\Src-Client\Client\eterlib\CullingManager.h

; 115  : 	}

  004d8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  004df	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _r$6[ebp], OFFSET ??_7SpherePackCallback@@6B@
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 480  : 		if (kCheckBackgroundDuringFlying.IsHitted())

  004e9	0f 84 c0 fd ff
	ff		 je	 $LN28@Update
$LN196@Update:

; 481  : 		{
; 482  : 			if (m_pHandler)
; 483  : 				m_pHandler->OnExplodingAtBackground();
; 484  : 
; 485  : 			__Explode();

  004ef	8b 8f 94 00 00
	00		 mov	 ecx, DWORD PTR [edi+148]
  004f5	85 c9		 test	 ecx, ecx
  004f7	74 05		 je	 SHORT $LN29@Update
  004f9	8b 01		 mov	 eax, DWORD PTR [ecx]
  004fb	ff 50 18	 call	 DWORD PTR [eax+24]
$LN29@Update:

; 491  : }

  004fe	6a 01		 push	 1
  00500	8b cf		 mov	 ecx, edi
  00502	e8 00 00 00 00	 call	 ?__Explode@CFlyingInstance@@QAEX_N@Z ; CFlyingInstance::__Explode
  00507	32 c0		 xor	 al, al
  00509	e9 a3 fd ff ff	 jmp	 $LN1@Update
$LN76@Update:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1373 :         return _Get_scary()->_Myhead;

  0050e	8b 06		 mov	 eax, DWORD PTR [esi]
  00510	89 45 98	 mov	 DWORD PTR __Myhead$1$[ebp], eax
$LN187@Update:

; 1002 :             _Loc                = _Find_lower_bound(_Keyval);

  00513	8d 45 8c	 lea	 eax, DWORD PTR _pHittedInstance$8[ebp]
  00516	8b ce		 mov	 ecx, esi
  00518	50		 push	 eax
  00519	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  0051f	50		 push	 eax
  00520	e8 00 00 00 00	 call	 ??$_Find_lower_bound@PAVIActorInstance@@@?$_Tree@V?$_Tset_traits@PAVIActorInstance@@U?$less@PAVIActorInstance@@@std@@V?$allocator@PAVIActorInstance@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@PAVIActorInstance@@PAX@std@@@1@ABQAVIActorInstance@@@Z ; std::_Tree<std::_Tset_traits<IActorInstance *,std::less<IActorInstance *>,std::allocator<IActorInstance *>,0> >::_Find_lower_bound<IActorInstance *>
  00525	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00529	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0052c	66 0f d6 85 7c
	ff ff ff	 movq	 QWORD PTR __Loc$4[ebp], xmm0

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00534	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00538	75 08		 jne	 SHORT $LN186@Update
  0053a	8b 4d 90	 mov	 ecx, DWORD PTR _pHittedInstance$1$[ebp]
  0053d	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00540	73 60		 jae	 SHORT $LN174@Update
$LN186@Update:

; 1631 :         if (max_size() == _Get_scary()->_Mysize) {

  00542	81 7e 04 cc cc
	cc 0c		 cmp	 DWORD PTR [esi+4], 214748364 ; 0cccccccH
  00549	0f 84 93 00 00
	00		 je	 $LN200@Update
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1144 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  0054f	89 b5 68 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], esi

; 87   :         return ::operator new(_Bytes);

  00555	6a 14		 push	 20			; 00000014H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00557	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1151 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0055e	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp+4], 0

; 87   :         return ::operator new(_Bytes);

  00568	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  0056d	8b 4d 90	 mov	 ecx, DWORD PTR _pHittedInstance$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  00570	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 787  :     }

  00573	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  0057a	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  0057d	8b 4d 98	 mov	 ecx, DWORD PTR __Myhead$1$[ebp]

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00580	50		 push	 eax
  00581	ff 75 80	 push	 DWORD PTR __Loc$4[ebp+4]

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  00584	89 08		 mov	 DWORD PTR [eax], ecx

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00586	ff b5 7c ff ff
	ff		 push	 DWORD PTR __Loc$4[ebp]

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  0058c	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  0058f	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00592	8b ce		 mov	 ecx, esi

; 811  :         this->_Ptr->_Color = _Red;

  00594	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0059a	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@PAVIActorInstance@@@std@@@std@@QAEPAU?$_Tree_node@PAVIActorInstance@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@PAVIActorInstance@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<IActorInstance *> >::_Insert_node
  0059f	8b 4d 90	 mov	 ecx, DWORD PTR _pHittedInstance$1$[ebp]
$LN174@Update:
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 439  : 				if (m_pHandler)

  005a2	8b b7 94 00 00
	00		 mov	 esi, DWORD PTR [edi+148]
  005a8	85 f6		 test	 esi, esi
  005aa	74 16		 je	 SHORT $LN21@Update

; 440  : 				{
; 441  : 					m_pHandler->OnExplodingAtAnotherTarget(m_dwSkillIndex, pHittedInstance->GetVirtualID());

  005ac	8b 01		 mov	 eax, DWORD PTR [ecx]
  005ae	8b 36		 mov	 esi, DWORD PTR [esi]
  005b0	8b 40 48	 mov	 eax, DWORD PTR [eax+72]
  005b3	ff d0		 call	 eax
  005b5	8b 8f 94 00 00
	00		 mov	 ecx, DWORD PTR [edi+148]
  005bb	50		 push	 eax
  005bc	ff 77 28	 push	 DWORD PTR [edi+40]
  005bf	ff 56 1c	 call	 DWORD PTR [esi+28]
$LN21@Update:

; 442  : 				}
; 443  : 
; 444  : 				if (m_iPierceCount)

  005c2	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
  005c5	8b cf		 mov	 ecx, edi
  005c7	85 c0		 test	 eax, eax
  005c9	74 09		 je	 SHORT $LN22@Update

; 445  : 				{
; 446  : 					m_iPierceCount--;

  005cb	48		 dec	 eax
  005cc	89 47 24	 mov	 DWORD PTR [edi+36], eax

; 453  : 				}
; 454  : 
; 455  : 				return true;

  005cf	e9 d6 fc ff ff	 jmp	 $LN197@Update
$LN22@Update:

; 447  : 					__Bomb();
; 448  : 				}
; 449  : 				else
; 450  : 				{
; 451  : 					__Explode();

  005d4	6a 01		 push	 1
  005d6	e8 00 00 00 00	 call	 ?__Explode@CFlyingInstance@@QAEX_N@Z ; CFlyingInstance::__Explode

; 452  : 					return false;

  005db	32 c0		 xor	 al, al
  005dd	e9 cf fc ff ff	 jmp	 $LN1@Update
$LN200@Update:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1632 :             _Throw_tree_length_error();

  005e2	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN194@Update:
  005e7	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Update@CFlyingInstance@@QAE_NXZ$0:
  00000	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _r$7[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAE@XZ ; RangeTester<FCheckAnotherMonsterDuringFlying>::~RangeTester<FCheckAnotherMonsterDuringFlying>
__unwindfunclet$?Update@CFlyingInstance@@QAE_NXZ$1:
  0000b	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _r$6[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAE@XZ ; RangeTester<FCheckBackgroundDuringFlying>::~RangeTester<FCheckBackgroundDuringFlying>
__unwindfunclet$?Update@CFlyingInstance@@QAE_NXZ$4:
  00016	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<IActorInstance *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<IActorInstance *,void *> > >
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
  00024	cc		 int	 3
  00025	cc		 int	 3
__ehhandler$?Update@CFlyingInstance@@QAE_NXZ:
  00026	90		 npad	 1
  00027	90		 npad	 1
  00028	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002f	8b 8a 60 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-160]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0003f	33 c8		 xor	 ecx, eax
  00041	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00046	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Update@CFlyingInstance@@QAE_NXZ
  0004b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Update@CFlyingInstance@@QAE_NXZ ENDP			; CFlyingInstance::Update
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
;	COMDAT ?Create@CFlyingInstance@@QAEXPAVCFlyingData@@ABUD3DXVECTOR3@@ABVCFlyTarget@@_N@Z
_TEXT	SEGMENT
_pData$ = 8						; size = 4
_c_rv3StartPos$ = 12					; size = 4
_c_rkTarget$ = 16					; size = 4
_canAttack$ = 20					; size = 1
?Create@CFlyingInstance@@QAEXPAVCFlyingData@@ABUD3DXVECTOR3@@ABVCFlyTarget@@_N@Z PROC ; CFlyingInstance::Create, COMDAT
; _this$ = ecx

; 102  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 103  : 	m_FlyTarget = c_rkTarget;

  00005	ff 75 10	 push	 DWORD PTR _c_rkTarget$[ebp]
  00008	8b f9		 mov	 edi, ecx
  0000a	8d 77 60	 lea	 esi, DWORD PTR [edi+96]
  0000d	8b ce		 mov	 ecx, esi
  0000f	e8 00 00 00 00	 call	 ??4CFlyTarget@@QAEAAV0@ABV0@@Z ; CFlyTarget::operator=

; 104  : 	m_canAttack = canAttack;
; 105  : 
; 106  : 	__SetDataPointer(pData, c_rv3StartPos);

  00014	ff 75 0c	 push	 DWORD PTR _c_rv3StartPos$[ebp]
  00017	8a 45 14	 mov	 al, BYTE PTR _canAttack$[ebp]
  0001a	8b cf		 mov	 ecx, edi
  0001c	ff 75 08	 push	 DWORD PTR _pData$[ebp]
  0001f	88 47 21	 mov	 BYTE PTR [edi+33], al
  00022	e8 00 00 00 00	 call	 ?__SetDataPointer@CFlyingInstance@@IAEXPAVCFlyingData@@ABUD3DXVECTOR3@@@Z ; CFlyingInstance::__SetDataPointer

; 107  : 	__SetTargetDirection(m_FlyTarget);

  00027	56		 push	 esi
  00028	8b cf		 mov	 ecx, edi
  0002a	e8 00 00 00 00	 call	 ?__SetTargetDirection@CFlyingInstance@@IAEXABVCFlyTarget@@@Z ; CFlyingInstance::__SetTargetDirection
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi

; 108  : }

  00031	5d		 pop	 ebp
  00032	c2 10 00	 ret	 16			; 00000010H
?Create@CFlyingInstance@@QAEXPAVCFlyingData@@ABUD3DXVECTOR3@@ABVCFlyTarget@@_N@Z ENDP ; CFlyingInstance::Create
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
;	COMDAT ?Destroy@CFlyingInstance@@QAEXXZ
_TEXT	SEGMENT
?Destroy@CFlyingInstance@@QAEXXZ PROC			; CFlyingInstance::Destroy, COMDAT
; _this$ = ecx

; 55   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 56   : 	m_FlyTarget.Clear();

  00003	8d 4e 60	 lea	 ecx, DWORD PTR [esi+96]
  00006	e8 00 00 00 00	 call	 ?Clear@CFlyTarget@@QAEXXZ ; CFlyTarget::Clear

; 57   : 
; 58   : 	ClearAttachInstance();

  0000b	8b ce		 mov	 ecx, esi
  0000d	e8 00 00 00 00	 call	 ?ClearAttachInstance@CFlyingInstance@@QAEXXZ ; CFlyingInstance::ClearAttachInstance

; 59   : 
; 60   : 	__Initialize();

  00012	8b ce		 mov	 ecx, esi
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ?__Initialize@CFlyingInstance@@IAEXXZ ; CFlyingInstance::__Initialize
?Destroy@CFlyingInstance@@QAEXXZ ENDP			; CFlyingInstance::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
;	COMDAT ??1CFlyingInstance@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CFlyingInstance@@UAE@XZ PROC				; CFlyingInstance::~CFlyingInstance, COMDAT
; _this$ = ecx

; 22   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CFlyingInstance@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CFlyingInstance@@6B@

; 23   : 	Destroy();

  0002b	e8 00 00 00 00	 call	 ?Destroy@CFlyingInstance@@QAEXXZ ; CFlyingInstance::Destroy

; 24   : }

  00030	8d 8e a0 00 00
	00		 lea	 ecx, DWORD PTR [esi+160]
  00036	e8 00 00 00 00	 call	 ??1?$_Tree@V?$_Tset_traits@PAVIActorInstance@@U?$less@PAVIActorInstance@@@std@@V?$allocator@PAVIActorInstance@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tset_traits<IActorInstance *,std::less<IActorInstance *>,std::allocator<IActorInstance *>,0> >::~_Tree<std::_Tset_traits<IActorInstance *,std::less<IActorInstance *>,std::allocator<IActorInstance *>,0> >
  0003b	8d 8e 88 00 00
	00		 lea	 ecx, DWORD PTR [esi+136]
  00041	e8 00 00 00 00	 call	 ??1?$vector@UTAttachEffectInstance@CFlyingInstance@@V?$allocator@UTAttachEffectInstance@CFlyingInstance@@@std@@@std@@QAE@XZ ; std::vector<CFlyingInstance::TAttachEffectInstance,std::allocator<CFlyingInstance::TAttachEffectInstance> >::~vector<CFlyingInstance::TAttachEffectInstance,std::allocator<CFlyingInstance::TAttachEffectInstance> >
  00046	8d 4e 60	 lea	 ecx, DWORD PTR [esi+96]
  00049	e8 00 00 00 00	 call	 ??1CFlyTarget@@UAE@XZ	; CFlyTarget::~CFlyTarget
  0004e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00051	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00058	59		 pop	 ecx
  00059	5e		 pop	 esi
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
  0005e	cc		 int	 3
  0005f	cc		 int	 3
  00060	cc		 int	 3
  00061	cc		 int	 3
  00062	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CFlyingInstance@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CFlyingInstance@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CFlyingInstance@@UAE@XZ ENDP				; CFlyingInstance::~CFlyingInstance
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
;	COMDAT ??0CFlyingInstance@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CFlyingInstance@@QAE@XZ PROC				; CFlyingInstance::CFlyingInstance, COMDAT
; _this$ = ecx

; 17   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CFlyingInstance@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f9		 mov	 edi, ecx
  00029	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  0002c	8d 4f 60	 lea	 ecx, DWORD PTR [edi+96]
  0002f	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CFlyingInstance@@6B@
  00035	e8 00 00 00 00	 call	 ??0CFlyTarget@@QAE@XZ	; CFlyTarget::CFlyTarget
  0003a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 398  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00041	c7 87 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+136], 0
  0004b	c7 87 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+140], 0
  00055	c7 87 90 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+144], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 17   : {

  0005f	8d b7 a0 00 00
	00		 lea	 esi, DWORD PTR [edi+160]
  00065	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  00069	6a 14		 push	 20			; 00000014H
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 17   : {

  0006b	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 437  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  0006e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00074	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  0007b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00080	83 c4 04	 add	 esp, 4
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 18   : 	__Initialize();

  00083	8b cf		 mov	 ecx, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 347  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  00085	89 00		 mov	 DWORD PTR [eax], eax

; 348  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  00087	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 349  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  0008a	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 350  :         _Pnode->_Color = _Black;

  0008d	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1943 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  00093	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp

; 18   : 	__Initialize();

  00095	e8 00 00 00 00	 call	 ?__Initialize@CFlyingInstance@@IAEXXZ ; CFlyingInstance::__Initialize

; 19   : }

  0009a	8b c7		 mov	 eax, edi
  0009c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a6	59		 pop	 ecx
  000a7	5f		 pop	 edi
  000a8	5e		 pop	 esi
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CFlyingInstance@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 60	 add	 ecx, 96			; 00000060H
  00006	e9 00 00 00 00	 jmp	 ??1CFlyTarget@@UAE@XZ	; CFlyTarget::~CFlyTarget
__unwindfunclet$??0CFlyingInstance@@QAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  00014	e9 00 00 00 00	 jmp	 ??1?$vector@UTAttachEffectInstance@CFlyingInstance@@V?$allocator@UTAttachEffectInstance@CFlyingInstance@@@std@@@std@@QAE@XZ ; std::vector<CFlyingInstance::TAttachEffectInstance,std::allocator<CFlyingInstance::TAttachEffectInstance> >::~vector<CFlyingInstance::TAttachEffectInstance,std::allocator<CFlyingInstance::TAttachEffectInstance> >
  00019	cc		 int	 3
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
__ehhandler$??0CFlyingInstance@@QAE@XZ:
  0001e	90		 npad	 1
  0001f	90		 npad	 1
  00020	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00024	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00027	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CFlyingInstance@@QAE@XZ
  00036	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CFlyingInstance@@QAE@XZ ENDP				; CFlyingInstance::CFlyingInstance
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
;	COMDAT ?SetFlyTarget@CFlyingInstance@@QAEXABVCFlyTarget@@@Z
_TEXT	SEGMENT
_cr_Target$ = 8						; size = 4
?SetFlyTarget@CFlyingInstance@@QAEXABVCFlyTarget@@@Z PROC ; CFlyingInstance::SetFlyTarget, COMDAT
; _this$ = ecx

; 134  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 135  : 	//m_pFlyTarget = pTarget;
; 136  : 	m_FlyTarget = cr_Target;

  00005	ff 75 08	 push	 DWORD PTR _cr_Target$[ebp]
  00008	8b f9		 mov	 edi, ecx
  0000a	8d 77 60	 lea	 esi, DWORD PTR [edi+96]
  0000d	8b ce		 mov	 ecx, esi
  0000f	e8 00 00 00 00	 call	 ??4CFlyTarget@@QAEAAV0@ABV0@@Z ; CFlyTarget::operator=

; 137  : 	//SetStartTargetPosition(m_FlyTarget.GetFlyTargetPosition());
; 138  : 
; 139  : 	__SetTargetDirection(m_FlyTarget);

  00014	56		 push	 esi
  00015	8b cf		 mov	 ecx, edi
  00017	e8 00 00 00 00	 call	 ?__SetTargetDirection@CFlyingInstance@@IAEXABVCFlyTarget@@@Z ; CFlyingInstance::__SetTargetDirection
  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi

; 140  : }

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?SetFlyTarget@CFlyingInstance@@QAEXABVCFlyTarget@@@Z ENDP ; CFlyingInstance::SetFlyTarget
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
;	COMDAT ?SetDataPointer@CFlyingInstance@@QAEXPAVCFlyingData@@ABUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
_pData$ = 8						; size = 4
_v3StartPosition$ = 12					; size = 4
?SetDataPointer@CFlyingInstance@@QAEXPAVCFlyingData@@ABUD3DXVECTOR3@@@Z PROC ; CFlyingInstance::SetDataPointer, COMDAT
; _this$ = ecx

; 560  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 562  : }

  00003	5d		 pop	 ebp

; 561  : 	__SetDataPointer(pData, v3StartPosition);

  00004	e9 00 00 00 00	 jmp	 ?__SetDataPointer@CFlyingInstance@@IAEXPAVCFlyingData@@ABUD3DXVECTOR3@@@Z ; CFlyingInstance::__SetDataPointer
?SetDataPointer@CFlyingInstance@@QAEXPAVCFlyingData@@ABUD3DXVECTOR3@@@Z ENDP ; CFlyingInstance::SetDataPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
;	COMDAT ?Clear@CFlyingInstance@@QAEXXZ
_TEXT	SEGMENT
?Clear@CFlyingInstance@@QAEXXZ PROC			; CFlyingInstance::Clear, COMDAT
; _this$ = ecx

; 51   : 	Destroy();

  00000	e9 00 00 00 00	 jmp	 ?Destroy@CFlyingInstance@@QAEXXZ ; CFlyingInstance::Destroy
?Clear@CFlyingInstance@@QAEXXZ ENDP			; CFlyingInstance::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GSpherePackCallback@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GSpherePackCallback@@UAEPAXI@Z PROC			; SpherePackCallback::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SpherePackCallback@@6B@
  00010	74 0b		 je	 SHORT $LN4@scalar
  00012	6a 04		 push	 4
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_GSpherePackCallback@@UAEPAXI@Z ENDP			; SpherePackCallback::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\spherepack.h
;	COMDAT ?PointTest2dCallback@SpherePackCallback@@UAEXABVVector3d@@PAVSpherePack@@W4ViewState@@@Z
_TEXT	SEGMENT
_searchpos$ = 8						; size = 4
_sphere$ = 12						; size = 4
_state$ = 16						; size = 4
?PointTest2dCallback@SpherePackCallback@@UAEXABVVector3d@@PAVSpherePack@@W4ViewState@@@Z PROC ; SpherePackCallback::PointTest2dCallback, COMDAT
; _this$ = ecx

; 79   : 	{};

  00000	c2 0c 00	 ret	 12			; 0000000cH
?PointTest2dCallback@SpherePackCallback@@UAEXABVVector3d@@PAVSpherePack@@W4ViewState@@@Z ENDP ; SpherePackCallback::PointTest2dCallback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\spherepack.h
;	COMDAT ?RangeTestCallback@SpherePackCallback@@UAEXABVVector3d@@MPAVSpherePack@@W4ViewState@@@Z
_TEXT	SEGMENT
_searchpos$ = 8						; size = 4
_distance$ = 12						; size = 4
_sphere$ = 16						; size = 4
_state$ = 20						; size = 4
?RangeTestCallback@SpherePackCallback@@UAEXABVVector3d@@MPAVSpherePack@@W4ViewState@@@Z PROC ; SpherePackCallback::RangeTestCallback, COMDAT
; _this$ = ecx

; 74   : 	{};

  00000	c2 10 00	 ret	 16			; 00000010H
?RangeTestCallback@SpherePackCallback@@UAEXABVVector3d@@MPAVSpherePack@@W4ViewState@@@Z ENDP ; SpherePackCallback::RangeTestCallback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\spherepack.h
;	COMDAT ?RayTraceCallback@SpherePackCallback@@UAEXABVVector3d@@0M0PAVSpherePack@@@Z
_TEXT	SEGMENT
_p1$ = 8						; size = 4
_dir$ = 12						; size = 4
_distance$ = 16						; size = 4
_sect$ = 20						; size = 4
_sphere$ = 24						; size = 4
?RayTraceCallback@SpherePackCallback@@UAEXABVVector3d@@0M0PAVSpherePack@@@Z PROC ; SpherePackCallback::RayTraceCallback, COMDAT
; _this$ = ecx

; 68   : 	{};

  00000	c2 14 00	 ret	 20			; 00000014H
?RayTraceCallback@SpherePackCallback@@UAEXABVVector3d@@0M0PAVSpherePack@@@Z ENDP ; SpherePackCallback::RayTraceCallback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\spherepack.h
;	COMDAT ?VisibilityCallback@SpherePackCallback@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z
_TEXT	SEGMENT
_f$ = 8							; size = 4
_sphere$ = 12						; size = 4
_state$ = 16						; size = 4
?VisibilityCallback@SpherePackCallback@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z PROC ; SpherePackCallback::VisibilityCallback, COMDAT
; _this$ = ecx

; 61   : 	{};

  00000	c2 0c 00	 ret	 12			; 0000000cH
?VisibilityCallback@SpherePackCallback@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z ENDP ; SpherePackCallback::VisibilityCallback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\spherepack.h
;	COMDAT ??1SpherePackCallback@@UAE@XZ
_TEXT	SEGMENT
??1SpherePackCallback@@UAE@XZ PROC			; SpherePackCallback::~SpherePackCallback, COMDAT
; _this$ = ecx

; 56   : 	virtual ~SpherePackCallback() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7SpherePackCallback@@6B@
  00006	c3		 ret	 0
??1SpherePackCallback@@UAE@XZ ENDP			; SpherePackCallback::~SpherePackCallback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
;	COMDAT ?square_distance_between_linesegment_and_point@@YAMABUD3DXVECTOR3@@00@Z
_TEXT	SEGMENT
tv1053 = -8						; size = 4
_l$1$ = -4						; size = 4
tv1041 = 8						; size = 4
_p1$ = 8						; size = 4
tv1114 = 12						; size = 4
tv1098 = 12						; size = 4
tv1074 = 12						; size = 4
tv1039 = 12						; size = 4
_p2$ = 12						; size = 4
_x$ = 16						; size = 4
?square_distance_between_linesegment_and_point@@YAMABUD3DXVECTOR3@@00@Z PROC ; square_distance_between_linesegment_and_point, COMDAT

; 81   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00006	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  00009	8b 4d 0c	 mov	 ecx, DWORD PTR _p2$[ebp]
  0000c	f3 0f 10 18	 movss	 xmm3, DWORD PTR [eax]
  00010	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  00015	f3 0f 10 31	 movss	 xmm6, DWORD PTR [ecx]
  00019	f3 0f 10 69 04	 movss	 xmm5, DWORD PTR [ecx+4]
  0001e	f3 0f 5c f3	 subss	 xmm6, xmm3
  00022	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00027	f3 0f 5c ea	 subss	 xmm5, xmm2
  0002b	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [eax+8]
  00030	0f 28 e0	 movaps	 xmm4, xmm0
  00033	8b 45 10	 mov	 eax, DWORD PTR _x$[ebp]
  00036	f3 0f 5c e1	 subss	 xmm4, xmm1
  0003a	f3 0f 11 45 f8	 movss	 DWORD PTR tv1053[ebp], xmm0

; 182  :     z = fz;

  0003f	0f 28 c6	 movaps	 xmm0, xmm6

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00042	f3 0f 11 75 08	 movss	 DWORD PTR tv1041[ebp], xmm6

; 182  :     z = fz;

  00047	f3 0f 59 c6	 mulss	 xmm0, xmm6

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0004b	0f 28 fd	 movaps	 xmm7, xmm5
  0004e	f3 0f 59 fd	 mulss	 xmm7, xmm5

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00052	f3 0f 11 65 0c	 movss	 DWORD PTR tv1039[ebp], xmm4

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00057	f3 0f 58 f8	 addss	 xmm7, xmm0
  0005b	0f 28 c4	 movaps	 xmm0, xmm4
  0005e	f3 0f 59 c4	 mulss	 xmm0, xmm4

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00062	f3 0f 10 60 04	 movss	 xmm4, DWORD PTR [eax+4]

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00067	f3 0f 58 f8	 addss	 xmm7, xmm0

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0006b	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR tv1041[ebp]

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00070	f3 0f 11 7d fc	 movss	 DWORD PTR _l$1$[ebp], xmm7

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00075	f3 0f 10 38	 movss	 xmm7, DWORD PTR [eax]
  00079	0f 28 f7	 movaps	 xmm6, xmm7
  0007c	f3 0f 5c f3	 subss	 xmm6, xmm3
  00080	0f 28 dc	 movaps	 xmm3, xmm4
  00083	f3 0f 5c da	 subss	 xmm3, xmm2
  00087	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [eax+8]
  0008c	f3 0f 5c d1	 subss	 xmm2, xmm1

; 182  :     z = fz;

  00090	0f 28 cd	 movaps	 xmm1, xmm5

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00093	f3 0f 59 c6	 mulss	 xmm0, xmm6

; 182  :     z = fz;

  00097	f3 0f 59 cb	 mulss	 xmm1, xmm3

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0009b	f3 0f 58 c8	 addss	 xmm1, xmm0
  0009f	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR tv1039[ebp]
  000a4	f3 0f 59 c2	 mulss	 xmm0, xmm2
  000a8	f3 0f 58 c8	 addss	 xmm1, xmm0
  000ac	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 84   : 	if (d<=0.0f)

  000af	0f 2f c1	 comiss	 xmm0, xmm1
  000b2	72 20		 jb	 SHORT $LN2@square_dis
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  000b4	f3 0f 59 db	 mulss	 xmm3, xmm3

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  000b8	f3 0f 59 f6	 mulss	 xmm6, xmm6
  000bc	f3 0f 59 d2	 mulss	 xmm2, xmm2
  000c0	f3 0f 58 de	 addss	 xmm3, xmm6
  000c4	f3 0f 58 da	 addss	 xmm3, xmm2
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 86   : 		return D3DXVec3LengthSq(&(x-p1));

  000c8	f3 0f 11 5d 0c	 movss	 DWORD PTR tv1114[ebp], xmm3
  000cd	d9 45 0c	 fld	 DWORD PTR tv1114[ebp]

; 96   : 	}
; 97   : }

  000d0	8b e5		 mov	 esp, ebp
  000d2	5d		 pop	 ebp
  000d3	c3		 ret	 0
$LN2@square_dis:

; 87   : 	}
; 88   : 	else if (d>=l)

  000d4	0f 2f 4d fc	 comiss	 xmm1, DWORD PTR _l$1$[ebp]
  000d8	72 33		 jb	 SHORT $LN4@square_dis
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  000da	f3 0f 5c 61 04	 subss	 xmm4, DWORD PTR [ecx+4]
  000df	f3 0f 5c 39	 subss	 xmm7, DWORD PTR [ecx]
  000e3	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  000e8	f3 0f 5c 45 f8	 subss	 xmm0, DWORD PTR tv1053[ebp]

; 182  :     z = fz;

  000ed	f3 0f 59 e4	 mulss	 xmm4, xmm4

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  000f1	f3 0f 59 ff	 mulss	 xmm7, xmm7
  000f5	f3 0f 59 c0	 mulss	 xmm0, xmm0
  000f9	f3 0f 58 e7	 addss	 xmm4, xmm7
  000fd	f3 0f 58 e0	 addss	 xmm4, xmm0
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 90   : 		return D3DXVec3LengthSq(&(x-p2));

  00101	f3 0f 11 65 0c	 movss	 DWORD PTR tv1098[ebp], xmm4
  00106	d9 45 0c	 fld	 DWORD PTR tv1098[ebp]

; 96   : 	}
; 97   : }

  00109	8b e5		 mov	 esp, ebp
  0010b	5d		 pop	 ebp
  0010c	c3		 ret	 0
$LN4@square_dis:
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  0010d	f3 0f 10 65 0c	 movss	 xmm4, DWORD PTR tv1039[ebp]

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00112	0f 28 c2	 movaps	 xmm0, xmm2
  00115	f3 0f 10 7d 08	 movss	 xmm7, DWORD PTR tv1041[ebp]

; 182  :     z = fz;

  0011a	0f 28 cb	 movaps	 xmm1, xmm3

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  0011d	f3 0f 59 c5	 mulss	 xmm0, xmm5

; 182  :     z = fz;

  00121	f3 0f 59 cc	 mulss	 xmm1, xmm4

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00125	f3 0f 59 e6	 mulss	 xmm4, xmm6
  00129	f3 0f 5c c8	 subss	 xmm1, xmm0
  0012d	f3 0f 59 ee	 mulss	 xmm5, xmm6
  00131	0f 28 c7	 movaps	 xmm0, xmm7

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  00134	f3 0f 59 fb	 mulss	 xmm7, xmm3
  00138	f3 0f 59 c2	 mulss	 xmm0, xmm2
  0013c	f3 0f 5c ef	 subss	 xmm5, xmm7

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00140	f3 0f 59 c9	 mulss	 xmm1, xmm1

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00144	f3 0f 5c c4	 subss	 xmm0, xmm4

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00148	f3 0f 59 ed	 mulss	 xmm5, xmm5

; 1281 :     *pOut = v;

  0014c	f3 0f 59 c0	 mulss	 xmm0, xmm0

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00150	f3 0f 58 c1	 addss	 xmm0, xmm1
  00154	f3 0f 58 c5	 addss	 xmm0, xmm5
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 95   : 		return D3DXVec3LengthSq(D3DXVec3Cross(&c,&(x-p1),&(p2-p1)))/l;

  00158	f3 0f 5e 45 fc	 divss	 xmm0, DWORD PTR _l$1$[ebp]
  0015d	f3 0f 11 45 0c	 movss	 DWORD PTR tv1074[ebp], xmm0
  00162	d9 45 0c	 fld	 DWORD PTR tv1074[ebp]

; 96   : 	}
; 97   : }

  00165	8b e5		 mov	 esp, ebp
  00167	5d		 pop	 ebp
  00168	c3		 ret	 0
?square_distance_between_linesegment_and_point@@YAMABUD3DXVECTOR3@@00@Z ENDP ; square_distance_between_linesegment_and_point
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
;	COMDAT ?SafeRotationNormalizedArc@@YA?AUD3DXQUATERNION@@ABUD3DXVECTOR3@@0@Z
_TEXT	SEGMENT
tv555 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_vFrom$ = 12						; size = 4
_vTo$ = 16						; size = 4
?SafeRotationNormalizedArc@@YA?AUD3DXQUATERNION@@ABUD3DXVECTOR3@@0@Z PROC ; SafeRotationNormalizedArc, COMDAT

; 48   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 08	 sub	 esp, 8
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 290  :     return x == v.x && y == v.y && z == v.z;

  00009	8b 4d 10	 mov	 ecx, DWORD PTR _vTo$[ebp]
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 48   : {

  0000c	56		 push	 esi
  0000d	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00010	57		 push	 edi
  00011	8b 7d 0c	 mov	 edi, DWORD PTR _vFrom$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 290  :     return x == v.x && y == v.y && z == v.z;

  00014	f3 0f 10 11	 movss	 xmm2, DWORD PTR [ecx]
  00018	f3 0f 11 54 24
	0c		 movss	 DWORD PTR tv555[esp+16], xmm2
  0001e	f3 0f 10 1f	 movss	 xmm3, DWORD PTR [edi]
  00022	0f 2e da	 ucomiss xmm3, xmm2
  00025	9f		 lahf
  00026	f6 c4 44	 test	 ah, 68			; 00000044H
  00029	7a 41		 jp	 SHORT $LN7@SafeRotati
  0002b	f3 0f 10 47 04	 movss	 xmm0, DWORD PTR [edi+4]
  00030	0f 2e 41 04	 ucomiss xmm0, DWORD PTR [ecx+4]
  00034	9f		 lahf
  00035	f6 c4 44	 test	 ah, 68			; 00000044H
  00038	7a 32		 jp	 SHORT $LN7@SafeRotati
  0003a	f3 0f 10 47 08	 movss	 xmm0, DWORD PTR [edi+8]
  0003f	0f 2e 41 08	 ucomiss xmm0, DWORD PTR [ecx+8]
  00043	9f		 lahf
  00044	f6 c4 44	 test	 ah, 68			; 00000044H
  00047	7a 23		 jp	 SHORT $LN7@SafeRotati

; 667  :     x = fx;

  00049	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 59   : }

  0004f	8b c6		 mov	 eax, esi
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 668  :     y = fy;

  00051	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 669  :     z = fz;

  00058	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 670  :     w = fw;

  0005f	c7 46 0c 00 00
	80 3f		 mov	 DWORD PTR [esi+12], 1065353216 ; 3f800000H
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 59   : }

  00066	5f		 pop	 edi
  00067	5e		 pop	 esi
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
$LN7@SafeRotati:
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 249  :     return D3DXVECTOR3(-x, -y, -z);

  0006c	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  00074	0f 28 c2	 movaps	 xmm0, xmm2
  00077	f3 0f 10 61 04	 movss	 xmm4, DWORD PTR [ecx+4]
  0007c	0f 57 c1	 xorps	 xmm0, xmm1
  0007f	f3 0f 10 79 08	 movss	 xmm7, DWORD PTR [ecx+8]
  00084	0f 28 f4	 movaps	 xmm6, xmm4

; 290  :     return x == v.x && y == v.y && z == v.z;

  00087	0f 2e d8	 ucomiss xmm3, xmm0

; 249  :     return D3DXVECTOR3(-x, -y, -z);

  0008a	0f 28 ef	 movaps	 xmm5, xmm7
  0008d	0f 57 f1	 xorps	 xmm6, xmm1
  00090	0f 57 e9	 xorps	 xmm5, xmm1

; 290  :     return x == v.x && y == v.y && z == v.z;

  00093	9f		 lahf
  00094	f6 c4 44	 test	 ah, 68			; 00000044H
  00097	7a 3f		 jp	 SHORT $LN17@SafeRotati
  00099	f3 0f 10 47 04	 movss	 xmm0, DWORD PTR [edi+4]
  0009e	0f 2e c6	 ucomiss xmm0, xmm6
  000a1	9f		 lahf
  000a2	f6 c4 44	 test	 ah, 68			; 00000044H
  000a5	7a 31		 jp	 SHORT $LN17@SafeRotati
  000a7	f3 0f 10 47 08	 movss	 xmm0, DWORD PTR [edi+8]
  000ac	0f 2e c5	 ucomiss xmm0, xmm5
  000af	9f		 lahf
  000b0	f6 c4 44	 test	 ah, 68			; 00000044H
  000b3	7a 23		 jp	 SHORT $LN17@SafeRotati

; 667  :     x = fx;

  000b5	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 59   : }

  000bb	8b c6		 mov	 eax, esi
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 668  :     y = fy;

  000bd	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 669  :     z = fz;

  000c4	c7 46 08 00 00
	80 3f		 mov	 DWORD PTR [esi+8], 1065353216 ; 3f800000H

; 670  :     w = fw;

  000cb	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 59   : }

  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi
  000d4	8b e5		 mov	 esp, ebp
  000d6	5d		 pop	 ebp
  000d7	c3		 ret	 0
$LN17@SafeRotati:
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  000d8	f3 0f 10 4f 04	 movss	 xmm1, DWORD PTR [edi+4]
  000dd	0f 28 c2	 movaps	 xmm0, xmm2
  000e0	f3 0f 59 cc	 mulss	 xmm1, xmm4
  000e4	f3 0f 59 c3	 mulss	 xmm0, xmm3
  000e8	f3 0f 58 c8	 addss	 xmm1, xmm0
  000ec	f3 0f 10 47 08	 movss	 xmm0, DWORD PTR [edi+8]
  000f1	f3 0f 59 c7	 mulss	 xmm0, xmm7
  000f5	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 56   : 	float s = sqrtf((1+d)*2);

  000f9	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f800000
  00101	f3 0f 58 c9	 addss	 xmm1, xmm1
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  00105	0f 5a c1	 cvtps2pd xmm0, xmm1
  00108	0f 57 c9	 xorps	 xmm1, xmm1
  0010b	66 0f 2e c8	 ucomisd xmm1, xmm0
  0010f	77 06		 ja	 SHORT $LN31@SafeRotati
  00111	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  00115	eb 05		 jmp	 SHORT $LN32@SafeRotati
$LN31@SafeRotati:
  00117	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN32@SafeRotati:
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  0011c	8b 45 10	 mov	 eax, DWORD PTR _vTo$[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  0011f	0f 57 d2	 xorps	 xmm2, xmm2
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00122	f3 0f 10 67 04	 movss	 xmm4, DWORD PTR [edi+4]
  00127	f3 0f 10 5f 08	 movss	 xmm3, DWORD PTR [edi+8]
  0012c	0f 28 cc	 movaps	 xmm1, xmm4

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  0012f	f3 0f 59 64 24
	0c		 mulss	 xmm4, DWORD PTR tv555[esp+16]
  00135	f3 0f 10 70 08	 movss	 xmm6, DWORD PTR [eax+8]
  0013a	f3 0f 10 68 04	 movss	 xmm5, DWORD PTR [eax+4]
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 59   : }

  0013f	8b c6		 mov	 eax, esi
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  00141	f2 0f 5a d0	 cvtsd2ss xmm2, xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00145	0f 28 c3	 movaps	 xmm0, xmm3
  00148	f3 0f 59 ce	 mulss	 xmm1, xmm6

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  0014c	f3 0f 59 5c 24
	0c		 mulss	 xmm3, DWORD PTR tv555[esp+16]
  00152	f3 0f 59 37	 mulss	 xmm6, DWORD PTR [edi]
  00156	f3 0f 59 c5	 mulss	 xmm0, xmm5

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  0015a	f3 0f 59 2f	 mulss	 xmm5, DWORD PTR [edi]
  0015e	f3 0f 5c de	 subss	 xmm3, xmm6
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 59   : }

  00162	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00163	f3 0f 5c c8	 subss	 xmm1, xmm0

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  00167	f3 0f 5c ec	 subss	 xmm5, xmm4

; 667  :     x = fx;

  0016b	f3 0f 5e da	 divss	 xmm3, xmm2
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 56   : 	float s = sqrtf((1+d)*2);

  0016f	f3 0f 5e ca	 divss	 xmm1, xmm2
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 668  :     y = fy;

  00173	f3 0f 5e ea	 divss	 xmm5, xmm2
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 58   : 	return D3DXQUATERNION(c.x/s,c.y/s,c.z/s,s*0.5f);

  00177	f3 0f 59 15 00
	00 00 00	 mulss	 xmm2, DWORD PTR __real@3f000000
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 667  :     x = fx;

  0017f	f3 0f 11 0e	 movss	 DWORD PTR [esi], xmm1

; 668  :     y = fy;

  00183	f3 0f 11 5e 04	 movss	 DWORD PTR [esi+4], xmm3

; 669  :     z = fz;

  00188	f3 0f 11 6e 08	 movss	 DWORD PTR [esi+8], xmm5

; 670  :     w = fw;

  0018d	f3 0f 11 56 0c	 movss	 DWORD PTR [esi+12], xmm2
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 59   : }

  00192	5e		 pop	 esi
  00193	8b e5		 mov	 esp, ebp
  00195	5d		 pop	 ebp
  00196	c3		 ret	 0
?SafeRotationNormalizedArc@@YA?AUD3DXQUATERNION@@ABUD3DXVECTOR3@@0@Z ENDP ; SafeRotationNormalizedArc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 137  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 138  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 139  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 140  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 87   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 141  :         _Throw_bad_array_new_length(); // add overflow
; 142  :     }
; 143  : 
; 144  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 87   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 145  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 146  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 147  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 148  : 
; 149  : #ifdef _DEBUG
; 150  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 151  : #endif // _DEBUG
; 152  :     return _Ptr;
; 153  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 145  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ?_Throw_tree_length_error@std@@YAXXZ
_TEXT	SEGMENT
?_Throw_tree_length_error@std@@YAXXZ PROC		; std::_Throw_tree_length_error, COMDAT

; 418  :     _Xlength_error("map/set too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Throw_tree:
  0000a	cc		 int	 3
?_Throw_tree_length_error@std@@YAXXZ ENDP		; std::_Throw_tree_length_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 331  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 332  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.h
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT
??0D3DXMATRIX@@QAE@XZ PROC				; D3DXMATRIX::D3DXMATRIX, COMDAT
; _this$ = ecx

; 177  :     D3DXMATRIX() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXMATRIX@@QAE@XZ ENDP				; D3DXMATRIX::D3DXMATRIX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyingInstance.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
