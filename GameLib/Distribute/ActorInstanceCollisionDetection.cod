; Listing generated by Microsoft (R) Optimizing Compiler Version 19.37.32822.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\GameLib\Distribute\ActorInstanceCollisionDetection.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`scalar deleting destructor'
PUBLIC	??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`scalar deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_E?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`vector deleting destructor'
;	COMDAT ??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDe'
	DB	'corator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDec'
	DB	'orator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpd'
	DB	'ateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@N'
	DB	'EffectUpdateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEff'
	DB	'ectUpdateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffe'
	DB	'ctUpdateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecora'
	DB	'tor@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDeco'
	DB	'rator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0D3DXMATRIX@@QAE@XZ				; D3DXMATRIX::D3DXMATRIX
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Throw_tree_length_error@std@@YAXXZ		; std::_Throw_tree_length_error
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?_Reallocate_exactly@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@AAEXI@Z ; std::vector<CDynamicSphereInstance,std::allocator<CDynamicSphereInstance> >::_Reallocate_exactly
PUBLIC	?_Change_array@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@AAEXQAUCDynamicSphereInstance@@II@Z ; std::vector<CDynamicSphereInstance,std::allocator<CDynamicSphereInstance> >::_Change_array
PUBLIC	?_Xlength@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@CAXXZ ; std::vector<CDynamicSphereInstance,std::allocator<CDynamicSphereInstance> >::_Xlength
PUBLIC	?_Xrange@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@CAXXZ ; std::vector<CDynamicSphereInstance,std::allocator<CDynamicSphereInstance> >::_Xrange
PUBLIC	?_Getal@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> >,0> >::_Getal
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > >::_Insert_node
PUBLIC	??1?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@QAE@XZ ; std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > >::~map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > >
PUBLIC	?CreateCollisionInstancePiece@CActorInstance@@QAE_NKPBUSAttachingData@NRaceData@@PAUSCollisionPointInstance@1@@Z ; CActorInstance::CreateCollisionInstancePiece
PUBLIC	?UpdatePointInstance@CActorInstance@@QAEXXZ	; CActorInstance::UpdatePointInstance
PUBLIC	?UpdatePointInstance@CActorInstance@@QAEXPAUSCollisionPointInstance@1@@Z ; CActorInstance::UpdatePointInstance
PUBLIC	?CheckCollisionDetection@CActorInstance@@QAE_NPBV?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@PAUD3DXVECTOR3@@@Z ; CActorInstance::CheckCollisionDetection
PUBLIC	?TestCollisionWithDynamicSphere@CActorInstance@@UAE_NABUCDynamicSphereInstance@@@Z ; CActorInstance::TestCollisionWithDynamicSphere
PUBLIC	?UpdateAdvancingPointInstance@CActorInstance@@QAEXXZ ; CActorInstance::UpdateAdvancingPointInstance
PUBLIC	?AvoidObject@CActorInstance@@QAE_NABVCGraphicObjectInstance@@@Z ; CActorInstance::AvoidObject
PUBLIC	?IsBlockObject@CActorInstance@@QAE_NABVCGraphicObjectInstance@@@Z ; CActorInstance::IsBlockObject
PUBLIC	?BlockMovement@CActorInstance@@QAEXXZ		; CActorInstance::BlockMovement
PUBLIC	?__TestObjectCollision@CActorInstance@@IAEHPBVCGraphicObjectInstance@@@Z ; CActorInstance::__TestObjectCollision
PUBLIC	?TestActorCollision@CActorInstance@@QAEHAAV1@@Z	; CActorInstance::TestActorCollision
PUBLIC	?TestPhysicsBlendingCollision@CActorInstance@@QAEHAAV1@@Z ; CActorInstance::TestPhysicsBlendingCollision
PUBLIC	?AttackingProcess@CActorInstance@@QAEHAAV1@@Z	; CActorInstance::AttackingProcess
PUBLIC	?__SplashAttackProcess@CActorInstance@@QAEHAAV1@@Z ; CActorInstance::__SplashAttackProcess
PUBLIC	?__NormalAttackProcess@CActorInstance@@QAEHAAV1@@Z ; CActorInstance::__NormalAttackProcess
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<NRaceData::SHitData const * const,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > > > >::_Insert_node
PUBLIC	?EnableSkipCollision@CActorInstance@@QAEXXZ	; CActorInstance::EnableSkipCollision
PUBLIC	?DisableSkipCollision@CActorInstance@@QAEXXZ	; CActorInstance::DisableSkipCollision
PUBLIC	?CanSkipCollision@CActorInstance@@QAE_NXZ	; CActorInstance::CanSkipCollision
PUBLIC	?__InitializeCollisionData@CActorInstance@@IAEXXZ ; CActorInstance::__InitializeCollisionData
PUBLIC	??$insert@U?$pair@PAVCActorInstance@@M@std@@$0A@@?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z ; std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > >::insert<std::pair<CActorInstance *,float>,0>
PUBLIC	??1?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@QAE@XZ ; std::pair<NRaceData::SHitData const *,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > >::~pair<NRaceData::SHitData const *,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > >
PUBLIC	??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >
PUBLIC	??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@KAXPAVCRotationDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@KAXPAVCGravityDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@KAXPAVCAirResistanceDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@KAXPAVCNullDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@KAXPAVCHeaderDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::Delete
PUBLIC	??$_Find_lower_bound@PBUSHitData@NRaceData@@@?$_Tree@V?$_Tmap_traits@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@U?$less@PBUSHitData@NRaceData@@@4@V?$allocator@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@1@ABQBUSHitData@NRaceData@@@Z ; std::_Tree<std::_Tmap_traits<NRaceData::SHitData const *,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > >,std::less<NRaceData::SHitData const *>,std::allocator<std::pair<NRaceData::SHitData const * const,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > > >,0> >::_Find_lower_bound<NRaceData::SHitData const *>
PUBLIC	??$_Find_lower_bound@PAVCActorInstance@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@ABQAVCActorInstance@@@Z ; std::_Tree<std::_Tmap_traits<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> >,0> >::_Find_lower_bound<CActorInstance *>
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >
PUBLIC	??$_Emplace_reallocate@ABUCDynamicSphereInstance@@@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@AAEPAUCDynamicSphereInstance@@QAU2@ABU2@@Z ; std::vector<CDynamicSphereInstance,std::allocator<CDynamicSphereInstance> >::_Emplace_reallocate<CDynamicSphereInstance const &>
PUBLIC	??$_Copy_memmove@PAUCDynamicSphereInstance@@PAU1@@std@@YAPAUCDynamicSphereInstance@@PAU1@00@Z ; std::_Copy_memmove<CDynamicSphereInstance *,CDynamicSphereInstance *>
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<NRaceData::SHitData const * const,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<NRaceData::SHitData const * const,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > >,void *> > >
PUBLIC	??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<NRaceData::SHitData const * const,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > >,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<NRaceData::SHitData const * const,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > >,void *> > >
PUBLIC	??1?$_Tree_head_scoped_ptr@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@2@@std@@QAE@XZ ; std::_Tree_head_scoped_ptr<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > > >::~_Tree_head_scoped_ptr<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > > >
PUBLIC	??$_Copy_nodes@$0A@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@PAU21@0@Z ; std::_Tree<std::_Tmap_traits<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> >,0> >::_Copy_nodes<0>
PUBLIC	??$_Erase_tree_and_orphan@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > >::_Erase_tree_and_orphan<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BB@GCADKGJO@map?1set?5too?5long@		; `string'
PUBLIC	?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool
PUBLIC	??_C@_0GM@IMNFDCHL@CActorInstance?3?3UpdateAdvancing@ ; `string'
PUBLIC	??_C@_0GI@OFDOMPIB@CActorInstance?3?3UpdateAdvancing@ ; `string'
PUBLIC	??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@	; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	__real@3c8efa35
PUBLIC	__real@3f000000
PUBLIC	__real@42480000
PUBLIC	__real@47afc800
PUBLIC	__real@48742400
PUBLIC	__real@491c4000
PUBLIC	__real@49742400
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_D3DXMatrixMultiply@12:PROC
EXTRN	_D3DXMatrixTranslation@16:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?Tracenf@@YAXPBDZZ:PROC				; Tracenf
EXTRN	?GetElapsedSecond@CTimer@@QAEMXZ:PROC		; CTimer::GetElapsedSecond
EXTRN	?GetAttribute@CSphereCollisionInstance@@QBEABUSSphereData@@XZ:PROC ; CSphereCollisionInstance::GetAttribute
EXTRN	?DetectCollisionDynamicSphereVSDynamicSphere@@YA_NABUCDynamicSphereInstance@@0@Z:PROC ; DetectCollisionDynamicSphereVSDynamicSphere
EXTRN	?DetectCollisionDynamicZCylinderVSDynamicZCylinder@@YA_NABUCDynamicSphereInstance@@0@Z:PROC ; DetectCollisionDynamicZCylinderVSDynamicZCylinder
EXTRN	?GetPosition@CGraphicObjectInstance@@QBEABUD3DXVECTOR3@@XZ:PROC ; CGraphicObjectInstance::GetPosition
EXTRN	?MovementCollisionDynamicSphere@CGraphicObjectInstance@@QBE_NABUCDynamicSphereInstance@@@Z:PROC ; CGraphicObjectInstance::MovementCollisionDynamicSphere
EXTRN	?GetMotionAttackDataPointer@CRaceMotionData@@QBEPBUSMotionAttackData@NRaceData@@XZ:PROC ; CRaceMotionData::GetMotionAttackDataPointer
EXTRN	?GetLastPosition@CPhysicsObject@@QAEXPAUD3DXVECTOR3@@@Z:PROC ; CPhysicsObject::GetLastPosition
EXTRN	?GetBoneMatrixPointer@CGrannyModelInstance@@QBEPBMH@Z:PROC ; CGrannyModelInstance::GetBoneMatrixPointer
EXTRN	?GetCompositeBoneMatrixPointer@CGrannyModelInstance@@QBEPBMH@Z:PROC ; CGrannyModelInstance::GetCompositeBoneMatrixPointer
EXTRN	?GetBoneIndexByName@CGrannyModelInstance@@QBE_NPBDPAH@Z:PROC ; CGrannyModelInstance::GetBoneIndexByName
EXTRN	?GetModelInstance@CGrannyLODController@@QAEPAVCGrannyModelInstance@@XZ:PROC ; CGrannyLODController::GetModelInstance
EXTRN	?GetLocalTime@CGraphicThingInstance@@QAEMXZ:PROC ; CGraphicThingInstance::GetLocalTime
EXTRN	?GetRace@CActorInstance@@QAEKXZ:PROC		; CActorInstance::GetRace
EXTRN	?isAttacking@CActorInstance@@QAEHXZ:PROC	; CActorInstance::isAttacking
EXTRN	?GetAttackingElapsedTime@CActorInstance@@QAEMXZ:PROC ; CActorInstance::GetAttackingElapsedTime
EXTRN	?GetBlendingPosition@CActorInstance@@QAEXPAUD3DXVECTOR3@@@Z:PROC ; CActorInstance::GetBlendingPosition
EXTRN	?IsWaiting@CActorInstance@@QAEHXZ:PROC		; CActorInstance::IsWaiting
EXTRN	?IsDead@CActorInstance@@QAEHXZ:PROC		; CActorInstance::IsDead
EXTRN	?NEW_SetAtkPixelPosition@CActorInstance@@QAEXABUD3DXVECTOR3@@@Z:PROC ; CActorInstance::NEW_SetAtkPixelPosition
EXTRN	?NEW_GetCurPixelPositionRef@CActorInstance@@QAEABUD3DXVECTOR3@@XZ:PROC ; CActorInstance::NEW_GetCurPixelPositionRef
EXTRN	?GetRotation@CActorInstance@@QAEMXZ:PROC	; CActorInstance::GetRotation
EXTRN	?__AdjustCollisionMovement@CActorInstance@@IAEXPBVCGraphicObjectInstance@@@Z:PROC ; CActorInstance::__AdjustCollisionMovement
EXTRN	?__IsInSplashTime@CActorInstance@@IAE_NXZ:PROC	; CActorInstance::__IsInSplashTime
EXTRN	?isValidAttacking@CActorInstance@@IAEHXZ:PROC	; CActorInstance::isValidAttacking
EXTRN	?__InitializeMovement@CActorInstance@@IAEXXZ:PROC ; CActorInstance::__InitializeMovement
EXTRN	?__ProcessDataAttackSuccess@CActorInstance@@IAEXABUSAttackData@NRaceData@@AAV1@ABUD3DXVECTOR3@@IH@Z:PROC ; CActorInstance::__ProcessDataAttackSuccess
EXTRN	?__isInvisible@CActorInstance@@IAE_NXZ:PROC	; CActorInstance::__isInvisible
EXTRN	?__GetReachScale@CActorInstance@@IAEMXZ:PROC	; CActorInstance::__GetReachScale
EXTRN	?__IsFlyTargetPC@CActorInstance@@IAE_NXZ:PROC	; CActorInstance::__IsFlyTargetPC
EXTRN	?__IsSameFlyTarget@CActorInstance@@IAE_NPAV1@@Z:PROC ; CActorInstance::__IsSameFlyTarget
EXTRN	?IS_HUGE_RACE@@YA_NI@Z:PROC			; IS_HUGE_RACE
EXTRN	?IS_HUGE_RACE@@YA_NI@Z:PROC			; IS_HUGE_RACE
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__libm_sse2_cos_precise:PROC
EXTRN	__libm_sse2_sin_precise:PROC
EXTRN	_memmove:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A DD 01H DUP (?) ; CSingleton<CTimer>::ms_singleton
_BSS	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT __real@49742400
CONST	SEGMENT
__real@49742400 DD 049742400r			; 1e+06
CONST	ENDS
;	COMDAT __real@491c4000
CONST	SEGMENT
__real@491c4000 DD 0491c4000r			; 640000
CONST	ENDS
;	COMDAT __real@48742400
CONST	SEGMENT
__real@48742400 DD 048742400r			; 250000
CONST	ENDS
;	COMDAT __real@47afc800
CONST	SEGMENT
__real@47afc800 DD 047afc800r			; 90000
CONST	ENDS
;	COMDAT __real@42480000
CONST	SEGMENT
__real@42480000 DD 042480000r			; 50
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3c8efa35
CONST	SEGMENT
__real@3c8efa35 DD 03c8efa35r			; 0.0174533
CONST	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@
CONST	SEGMENT
??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@ DB 'invalid vector subscri'
	DB	'pt', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0GI@OFDOMPIB@CActorInstance?3?3UpdateAdvancing@
CONST	SEGMENT
??_C@_0GI@OFDOMPIB@CActorInstance?3?3UpdateAdvancing@ DB 'CActorInstance:'
	DB	':UpdateAdvancingPointInstance - m_LODControllerVector[rInstan'
	DB	'ce.dwModelIndex=%d] is NULL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0GM@IMNFDCHL@CActorInstance?3?3UpdateAdvancing@
CONST	SEGMENT
??_C@_0GM@IMNFDCHL@CActorInstance?3?3UpdateAdvancing@ DB 'CActorInstance:'
	DB	':UpdateAdvancingPointInstance - rInstance.dwModelIndex=%d >= '
	DB	'm_LODControllerVector.size()=%d', 00H	; `string'
CONST	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
CONST	SEGMENT
??_C@_0BB@GCADKGJO@map?1set?5too?5long@ DB 'map/set too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Buynode@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@AAU?$pair@QAVCActorInstance@@M@2@@?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@PAU01@AAU?$pair@QAVCActorInstance@@M@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Buynode@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@AAU?$pair@QAVCActorInstance@@M@2@@?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@PAU01@AAU?$pair@QAVCActorInstance@@M@1@@Z$0
__ehfuncinfo$??$_Buynode@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@AAU?$pair@QAVCActorInstance@@M@2@@?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@PAU01@AAU?$pair@QAVCActorInstance@@M@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Buynode@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@AAU?$pair@QAVCActorInstance@@M@2@@?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@PAU01@AAU?$pair@QAVCActorInstance@@M@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Buynode@AAU?$pair@QAVCActorInstance@@M@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@AAU?$pair@QAVCActorInstance@@M@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Buynode@AAU?$pair@QAVCActorInstance@@M@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@AAU?$pair@QAVCActorInstance@@M@1@@Z$0
__ehfuncinfo$??$_Buynode@AAU?$pair@QAVCActorInstance@@M@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@AAU?$pair@QAVCActorInstance@@M@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Buynode@AAU?$pair@QAVCActorInstance@@M@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@AAU?$pair@QAVCActorInstance@@M@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Copy_or_move@$0A@U?$pair@QAVCActorInstance@@M@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@AAU?$pair@QAVCActorInstance@@M@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Copy_or_move@$0A@U?$pair@QAVCActorInstance@@M@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@AAU?$pair@QAVCActorInstance@@M@1@@Z$0
__ehfuncinfo$??$_Copy_or_move@$0A@U?$pair@QAVCActorInstance@@M@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@AAU?$pair@QAVCActorInstance@@M@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Copy_or_move@$0A@U?$pair@QAVCActorInstance@@M@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@AAU?$pair@QAVCActorInstance@@M@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Copy_nodes@$0A@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@PAU21@0@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Copy_nodes@$0A@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@PAU21@0@Z$0
__tryblocktable$??$_Copy_nodes@$0A@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@PAU21@0@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Copy_nodes@$0A@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@PAU21@0@Z$3
__unwindtable$??$_Copy_nodes@$0A@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@PAU21@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Copy_nodes@$0A@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@PAU21@0@Z$2
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$??$_Copy_nodes@$0A@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@PAU21@0@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Copy_nodes@$0A@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@PAU21@0@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Copy_nodes@$0A@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@PAU21@0@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0U?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@1@$$QAU?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@1@$$QAU?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@1@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@1@$$QAU?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@1@@Z$0
__ehfuncinfo$??$?0U?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@1@$$QAU?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$?0U?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@1@$$QAU?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0U?$pair@PAVCActorInstance@@M@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@PAVCActorInstance@@M@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z$1
__ehfuncinfo$??$?0U?$pair@PAVCActorInstance@@M@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0U?$pair@PAVCActorInstance@@M@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??$?0V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@U?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@U?$less@PBUSHitData@NRaceData@@@4@V?$allocator@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@_N@1@$$QAU?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@U?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@U?$less@PBUSHitData@NRaceData@@@4@V?$allocator@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@_N@1@$$QAU?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@1@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@U?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@U?$less@PBUSHitData@NRaceData@@@4@V?$allocator@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@_N@1@$$QAU?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@1@@Z$1
__ehfuncinfo$??$_Emplace@U?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@U?$less@PBUSHitData@NRaceData@@@4@V?$allocator@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@_N@1@$$QAU?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace@U?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@U?$less@PBUSHitData@NRaceData@@@4@V?$allocator@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@_N@1@$$QAU?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@U?$pair@PAVCActorInstance@@M@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@_N@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@U?$pair@PAVCActorInstance@@M@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@_N@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z$2
__ehfuncinfo$??$_Emplace@U?$pair@PAVCActorInstance@@M@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@_N@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@U?$pair@PAVCActorInstance@@M@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@_N@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$emplace@U?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@U?$less@PBUSHitData@NRaceData@@@4@V?$allocator@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@U?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@U?$less@PBUSHitData@NRaceData@@@4@V?$allocator@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@1@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@U?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@U?$less@PBUSHitData@NRaceData@@@4@V?$allocator@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@1@@Z$1
__ehfuncinfo$??$emplace@U?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@U?$less@PBUSHitData@NRaceData@@@4@V?$allocator@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$emplace@U?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@U?$less@PBUSHitData@NRaceData@@@4@V?$allocator@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0PBUSHitData@NRaceData@@AAV?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@$0A@@?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@QAE@$$QAPBUSHitData@NRaceData@@AAV?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0PBUSHitData@NRaceData@@AAV?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@$0A@@?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@QAE@$$QAPBUSHitData@NRaceData@@AAV?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@1@@Z$2
__ehfuncinfo$??$?0PBUSHitData@NRaceData@@AAV?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@$0A@@?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@QAE@$$QAPBUSHitData@NRaceData@@AAV?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0PBUSHitData@NRaceData@@AAV?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@$0A@@?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@QAE@$$QAPBUSHitData@NRaceData@@AAV?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$emplace@U?$pair@PAVCActorInstance@@M@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@U?$pair@PAVCActorInstance@@M@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z$2
__ehfuncinfo$??$emplace@U?$pair@PAVCActorInstance@@M@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$emplace@U?$pair@PAVCActorInstance@@M@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$insert@U?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@$0A@@?$map@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@U?$less@PBUSHitData@NRaceData@@@4@V?$allocator@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@4@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@U?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@$0A@@?$map@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@U?$less@PBUSHitData@NRaceData@@@4@V?$allocator@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@4@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@1@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@U?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@$0A@@?$map@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@U?$less@PBUSHitData@NRaceData@@@4@V?$allocator@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@4@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@1@@Z$1
__ehfuncinfo$??$insert@U?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@$0A@@?$map@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@U?$less@PBUSHitData@NRaceData@@@4@V?$allocator@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@4@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$insert@U?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@$0A@@?$map@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@U?$less@PBUSHitData@NRaceData@@@4@V?$allocator@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@4@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$make_pair@PBUSHitData@NRaceData@@AAV?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@YA?AU?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@0@$$QAPBUSHitData@NRaceData@@AAV?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$make_pair@PBUSHitData@NRaceData@@AAV?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@YA?AU?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@0@$$QAPBUSHitData@NRaceData@@AAV?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@0@@Z$3
__ehfuncinfo$??$make_pair@PBUSHitData@NRaceData@@AAV?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@YA?AU?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@0@$$QAPBUSHitData@NRaceData@@AAV?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$make_pair@PBUSHitData@NRaceData@@AAV?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@YA?AU?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@0@$$QAPBUSHitData@NRaceData@@AAV?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$insert@U?$pair@PAVCActorInstance@@M@std@@$0A@@?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@U?$pair@PAVCActorInstance@@M@std@@$0A@@?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z$2
__ehfuncinfo$??$insert@U?$pair@PAVCActorInstance@@M@std@@$0A@@?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$insert@U?$pair@PAVCActorInstance@@M@std@@$0A@@?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?__NormalAttackProcess@CActorInstance@@QAEHAAV1@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?__NormalAttackProcess@CActorInstance@@QAEHAAV1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?__NormalAttackProcess@CActorInstance@@QAEHAAV1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?__NormalAttackProcess@CActorInstance@@QAEHAAV1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?__NormalAttackProcess@CActorInstance@@QAEHAAV1@@Z$17
	DD	00H
	DD	FLAT:__unwindfunclet$?__NormalAttackProcess@CActorInstance@@QAEHAAV1@@Z$1
	DD	02H
	DD	FLAT:__unwindfunclet$?__NormalAttackProcess@CActorInstance@@QAEHAAV1@@Z$7
	DD	02H
	DD	FLAT:__unwindfunclet$?__NormalAttackProcess@CActorInstance@@QAEHAAV1@@Z$6
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@QAE@ABV01@@Z$1
__ehfuncinfo$??0?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??$_Erase_tree_and_orphan@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree_and_orphan@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > >::_Erase_tree_and_orphan<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >, COMDAT
; _this$ = ecx

; 734  :     void _Erase_tree_and_orphan(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 735  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000e	75 25		 jne	 SHORT $LN3@Erase_tree
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR __Al$[ebp]
$LL2@Erase_tree:

; 736  :             _Erase_tree_and_orphan(_Al, _Rootnode->_Right);

  00014	ff 76 08	 push	 DWORD PTR [esi+8]
  00017	8b cb		 mov	 ecx, ebx
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 ??$_Erase_tree_and_orphan@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > >::_Erase_tree_and_orphan<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 754  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001f	8b c6		 mov	 eax, esi

; 755  :     _Val         = static_cast<_Other&&>(_New_val);

  00021	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00023	6a 18		 push	 24			; 00000018H
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 735  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00032	74 e0		 je	 SHORT $LL2@Erase_tree
  00034	5f		 pop	 edi
$LN3@Erase_tree:
  00035	5e		 pop	 esi

; 737  :             auto _To_delete = _STD exchange(_Rootnode, _Rootnode->_Left);
; 738  :             _Orphan_ptr(_To_delete);
; 739  :             _Alnode::value_type::_Freenode(_Al, _To_delete);
; 740  :         }
; 741  :     }

  00036	5b		 pop	 ebx
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??$_Erase_tree_and_orphan@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > >::_Erase_tree_and_orphan<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??$_Copy_nodes@$0A@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@PAU21@0@Z
_TEXT	SEGMENT
__Newnode$2 = -32					; size = 8
_this$ = -24						; size = 4
__Myhead$1$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Newroot$ = 8						; size = 4
__Rootnode$ = 8						; size = 4
__Wherenode$ = 12					; size = 4
??$_Copy_nodes@$0A@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@PAU21@0@Z PROC ; std::_Tree<std::_Tmap_traits<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> >,0> >::_Copy_nodes<0>, COMDAT
; _this$ = ecx

; 1665 :     _Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Copy_nodes@$0A@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@PAU21@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d e8	 mov	 DWORD PTR _this$[ebp], edi

; 1666 :         // copy entire subtree, recursively
; 1667 :         const auto _Scary = _Get_scary();
; 1668 :         _Nodeptr _Newroot = _Scary->_Myhead; // point at nil node
; 1669 : 
; 1670 :         if (!_Rootnode->_Isnil) { // copy or move a node, then any subtrees

  00030	8b 5d 08	 mov	 ebx, DWORD PTR __Rootnode$[ebp]
  00033	8b 07		 mov	 eax, DWORD PTR [edi]
  00035	89 45 ec	 mov	 DWORD PTR __Myhead$1$[ebp], eax
  00038	80 7b 0d 00	 cmp	 BYTE PTR [ebx+13], 0
  0003c	75 74		 jne	 SHORT $LN5@Copy_nodes
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1144 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  0003e	89 7d e0	 mov	 DWORD PTR __Newnode$2[ebp], edi

; 87   :         return ::operator new(_Bytes);

  00041	6a 18		 push	 24			; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 359  :         _Alloc_construct_ptr<_Alloc> _Newnode(_Al);

  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1151 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0004a	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR __Newnode$2[ebp+4], 0

; 87   :         return ::operator new(_Bytes);

  00051	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 361  :         allocator_traits<_Alloc>::construct(_Al, _STD addressof(_Newnode._Ptr->_Myval), _STD forward<_Valty>(_Val)...);

  00056	8b 4b 14	 mov	 ecx, DWORD PTR [ebx+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 245  :         return _Traits::_Allocate(_Bytes);

  00059	8b f0		 mov	 esi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 361  :         allocator_traits<_Alloc>::construct(_Al, _STD addressof(_Newnode._Ptr->_Myval), _STD forward<_Valty>(_Val)...);

  0005b	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  0005e	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1678 :             _TRY_BEGIN

  00061	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1

; 361  :         allocator_traits<_Alloc>::construct(_Al, _STD addressof(_Newnode._Ptr->_Myval), _STD forward<_Valty>(_Val)...);

  00068	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 1671 :             _Nodeptr _Pnode = _Copy_or_move<_Strat>(_Rootnode->_Myval);
; 1672 :             _Pnode->_Parent = _Wherenode;

  0006b	8b 45 0c	 mov	 eax, DWORD PTR __Wherenode$[ebp]

; 361  :         allocator_traits<_Alloc>::construct(_Al, _STD addressof(_Newnode._Ptr->_Myval), _STD forward<_Valty>(_Val)...);

  0006e	89 4e 14	 mov	 DWORD PTR [esi+20], ecx

; 362  :         _Construct_in_place(_Newnode._Ptr->_Left, _Myhead);

  00071	8b 4d ec	 mov	 ecx, DWORD PTR __Myhead$1$[ebp]
  00074	89 0e		 mov	 DWORD PTR [esi], ecx

; 363  :         _Construct_in_place(_Newnode._Ptr->_Parent, _Myhead);
; 364  :         _Construct_in_place(_Newnode._Ptr->_Right, _Myhead);

  00076	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 365  :         _Newnode._Ptr->_Color = _Red;

  00079	66 c7 46 0c 00
	00		 mov	 WORD PTR [esi+12], 0

; 1671 :             _Nodeptr _Pnode = _Copy_or_move<_Strat>(_Rootnode->_Myval);
; 1672 :             _Pnode->_Parent = _Wherenode;

  0007f	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1673 :             _Pnode->_Color  = _Rootnode->_Color;

  00082	8a 43 0c	 mov	 al, BYTE PTR [ebx+12]
  00085	88 46 0c	 mov	 BYTE PTR [esi+12], al

; 1674 :             if (_Newroot->_Isnil) {

  00088	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0

; 1679 :             _Pnode->_Left  = _Copy_nodes<_Strat>(_Rootnode->_Left, _Pnode);

  0008c	56		 push	 esi
  0008d	ff 33		 push	 DWORD PTR [ebx]
  0008f	0f 45 ce	 cmovne	 ecx, esi
  00092	89 4d ec	 mov	 DWORD PTR __Myhead$1$[ebp], ecx
  00095	89 4d 08	 mov	 DWORD PTR __Newroot$[ebp], ecx
  00098	8b cf		 mov	 ecx, edi
  0009a	e8 00 00 00 00	 call	 ??$_Copy_nodes@$0A@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@PAU21@0@Z ; std::_Tree<std::_Tmap_traits<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> >,0> >::_Copy_nodes<0>

; 1680 :             _Pnode->_Right = _Copy_nodes<_Strat>(_Rootnode->_Right, _Pnode);

  0009f	56		 push	 esi
  000a0	89 06		 mov	 DWORD PTR [esi], eax
  000a2	8b cf		 mov	 ecx, edi
  000a4	ff 73 08	 push	 DWORD PTR [ebx+8]
  000a7	e8 00 00 00 00	 call	 ??$_Copy_nodes@$0A@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@PAU21@0@Z ; std::_Tree<std::_Tmap_traits<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> >,0> >::_Copy_nodes<0>
  000ac	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000af	8b 45 ec	 mov	 eax, DWORD PTR __Myhead$1$[ebp]
$LN5@Copy_nodes:

; 1684 :             _CATCH_END
; 1685 :         }
; 1686 : 
; 1687 :         return _Newroot; // return newly constructed tree
; 1688 :     }

  000b2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000b5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000bc	59		 pop	 ecx
  000bd	5f		 pop	 edi
  000be	5e		 pop	 esi
  000bf	5b		 pop	 ebx
  000c0	8b e5		 mov	 esp, ebp
  000c2	5d		 pop	 ebp
  000c3	c2 08 00	 ret	 8
__catch$??$_Copy_nodes@$0A@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@PAU21@0@Z$0:

; 1681 :             _CATCH_ALL
; 1682 :             _Scary->_Erase_tree_and_orphan(_Getal(), _Newroot); // subtree copy failed, bail out

  000c6	ff 75 08	 push	 DWORD PTR __Newroot$[ebp]
  000c9	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000cc	e8 00 00 00 00	 call	 ?_Getal@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> >,0> >::_Getal
  000d1	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d4	50		 push	 eax
  000d5	e8 00 00 00 00	 call	 ??$_Erase_tree_and_orphan@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > >::_Erase_tree_and_orphan<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >

; 1683 :             _RERAISE;

  000da	6a 00		 push	 0
  000dc	6a 00		 push	 0
  000de	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN65@Copy_nodes:
  000e3	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Copy_nodes@$0A@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@PAU21@0@Z$2:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR __Newnode$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$_Copy_nodes@$0A@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@PAU21@0@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Copy_nodes@$0A@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@PAU21@0@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Copy_nodes@$0A@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@PAU21@0@Z ENDP ; std::_Tree<std::_Tmap_traits<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> >,0> >::_Copy_nodes<0>
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??1?$_Tree_head_scoped_ptr@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_head_scoped_ptr@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@2@@std@@QAE@XZ PROC ; std::_Tree_head_scoped_ptr<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > > >::~_Tree_head_scoped_ptr<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > > >, COMDAT
; _this$ = ecx

; 776  :         if (_Mycont) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 09		 je	 SHORT $LN2@Tree_head_

; 777  :             _Mycont->_Erase_head(_Al);

  00007	ff 31		 push	 DWORD PTR [ecx]
  00009	8b c8		 mov	 ecx, eax
  0000b	e8 00 00 00 00	 call	 ??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >
$LN2@Tree_head_:

; 778  :         }
; 779  :     }

  00010	c3		 ret	 0
??1?$_Tree_head_scoped_ptr@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@2@@std@@QAE@XZ ENDP ; std::_Tree_head_scoped_ptr<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > > >::~_Tree_head_scoped_ptr<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<NRaceData::SHitData const * const,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > >,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<NRaceData::SHitData const * const,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > >,void *> > >, COMDAT
; _this$ = ecx

; 1156 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN10@Tree_temp_

; 265  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 1c		 push	 28			; 0000001cH
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN10@Tree_temp_:
  00012	c3		 ret	 0
??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<NRaceData::SHitData const * const,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > >,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<NRaceData::SHitData const * const,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > >,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<NRaceData::SHitData const * const,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<NRaceData::SHitData const * const,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > >,void *> > >, COMDAT
; _this$ = ecx

; 1156 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 265  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 1c		 push	 28			; 0000001cH
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 1157 :             _Al.deallocate(_Ptr, 1);
; 1158 :         }
; 1159 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<NRaceData::SHitData const * const,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<NRaceData::SHitData const * const,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > >,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >, COMDAT
; _this$ = ecx

; 1156 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 265  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 18		 push	 24			; 00000018H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 1157 :             _Al.deallocate(_Ptr, 1);
; 1158 :         }
; 1159 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$_Copy_memmove@PAUCDynamicSphereInstance@@PAU1@@std@@YAPAUCDynamicSphereInstance@@PAU1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAUCDynamicSphereInstance@@PAU1@@std@@YAPAUCDynamicSphereInstance@@PAU1@00@Z PROC ; std::_Copy_memmove<CDynamicSphereInstance *,CDynamicSphereInstance *>, COMDAT

; 4526 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4527 :     auto _FirstPtr              = _To_address(_First);
; 4528 :     auto _LastPtr               = _To_address(_Last);
; 4529 :     auto _DestPtr               = _To_address(_Dest);
; 4530 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4531 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4532 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4533 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4535 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4536 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4537 :     } else {
; 4538 :         return _Dest + (_LastPtr - _FirstPtr);
; 4539 :     }
; 4540 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAUCDynamicSphereInstance@@PAU1@@std@@YAPAUCDynamicSphereInstance@@PAU1@00@Z ENDP ; std::_Copy_memmove<CDynamicSphereInstance *,CDynamicSphereInstance *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??$_Emplace_reallocate@ABUCDynamicSphereInstance@@@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@AAEPAUCDynamicSphereInstance@@QAU2@ABU2@@Z
_TEXT	SEGMENT
__Oldsize$1$ = -12					; size = 4
__Whereoff$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABUCDynamicSphereInstance@@@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@AAEPAUCDynamicSphereInstance@@QAU2@ABU2@@Z PROC ; std::vector<CDynamicSphereInstance,std::allocator<CDynamicSphereInstance> >::_Emplace_reallocate<CDynamicSphereInstance const &>, COMDAT
; _this$ = ecx

; 812  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx

; 813  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 814  :         _Alty& _Al        = _Getal();
; 815  :         auto& _My_data    = _Mypair._Myval2;
; 816  :         pointer& _Myfirst = _My_data._Myfirst;
; 817  :         pointer& _Mylast  = _My_data._Mylast;
; 818  : 
; 819  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 820  : 
; 821  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00009	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR __Whereptr$[ebp]
  00012	57		 push	 edi
  00013	2b 33		 sub	 esi, DWORD PTR [ebx]

; 822  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00015	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00018	2b 0b		 sub	 ecx, DWORD PTR [ebx]
  0001a	f7 ee		 imul	 esi
  0001c	89 5d fc	 mov	 DWORD PTR _this$1$[ebp], ebx
  0001f	03 d6		 add	 edx, esi
  00021	c1 fa 04	 sar	 edx, 4
  00024	8b c2		 mov	 eax, edx
  00026	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00029	03 c2		 add	 eax, edx
  0002b	89 45 f8	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  0002e	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00033	f7 e9		 imul	 ecx
  00035	03 d1		 add	 edx, ecx
  00037	c1 fa 04	 sar	 edx, 4
  0003a	8b c2		 mov	 eax, edx
  0003c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0003f	03 c2		 add	 eax, edx
  00041	89 45 f4	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 823  : 
; 824  :         if (_Oldsize == max_size()) {

  00044	3d 49 92 24 09	 cmp	 eax, 153391689		; 09249249H
  00049	0f 84 01 01 00
	00		 je	 $LN79@Emplace_re

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0004f	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]

; 826  :         }
; 827  : 
; 828  :         const size_type _Newsize     = _Oldsize + 1;

  00052	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00055	2b 0b		 sub	 ecx, DWORD PTR [ebx]
  00057	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0005c	f7 e9		 imul	 ecx

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0005e	b8 49 92 24 09	 mov	 eax, 153391689		; 09249249H

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00063	03 d1		 add	 edx, ecx
  00065	c1 fa 04	 sar	 edx, 4
  00068	8b ca		 mov	 ecx, edx
  0006a	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0006d	03 ca		 add	 ecx, edx

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0006f	8b d1		 mov	 edx, ecx
  00071	d1 ea		 shr	 edx, 1
  00073	2b c2		 sub	 eax, edx
  00075	3b c8		 cmp	 ecx, eax
  00077	76 17		 jbe	 SHORT $LN12@Emplace_re

; 1967 :             return _Max; // geometric growth would overflow

  00079	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  0007e	be 49 92 24 09	 mov	 esi, 153391689		; 09249249H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00089	83 c4 04	 add	 esp, 4
  0008c	8b f8		 mov	 edi, eax
  0008e	eb 49		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1970 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00090	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 70   :         if (_Count > _Max_possible) {

  00093	8b f7		 mov	 esi, edi
  00095	3b c7		 cmp	 eax, edi
  00097	0f 43 f0	 cmovae	 esi, eax
  0009a	81 fe 49 92 24
	09		 cmp	 esi, 153391689		; 09249249H
  000a0	0f 87 af 00 00
	00		 ja	 $LN80@Emplace_re

; 72   :         }
; 73   :     }
; 74   : 
; 75   :     return _Count * _Ty_size;

  000a6	8d 04 f5 00 00
	00 00		 lea	 eax, DWORD PTR [esi*8]
  000ad	2b c6		 sub	 eax, esi
  000af	c1 e0 02	 shl	 eax, 2

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000b2	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000b7	72 0d		 jb	 SHORT $LN24@Emplace_re

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000b9	50		 push	 eax
  000ba	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000bf	83 c4 04	 add	 esp, 4
  000c2	8b f8		 mov	 edi, eax
  000c4	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  000c6	85 c0		 test	 eax, eax
  000c8	74 0d		 je	 SHORT $LN25@Emplace_re

; 87   :         return ::operator new(_Bytes);

  000ca	50		 push	 eax
  000cb	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000d0	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  000d3	8b f8		 mov	 edi, eax
  000d5	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  000d7	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 836  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000d9	8b 4d f8	 mov	 ecx, DWORD PTR __Whereoff$1$[ebp]
  000dc	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  000e3	2b c1		 sub	 eax, ecx
  000e5	8d 1c 87	 lea	 ebx, DWORD PTR [edi+eax*4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 719  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  000e8	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000eb	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  000ee	0f 11 03	 movups	 XMMWORD PTR [ebx], xmm0
  000f1	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  000f6	66 0f d6 43 10	 movq	 QWORD PTR [ebx+16], xmm0
  000fb	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  000fe	89 43 18	 mov	 DWORD PTR [ebx+24], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 839  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00101	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00104	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00107	8b 08		 mov	 ecx, DWORD PTR [eax]
  00109	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  0010c	3b c2		 cmp	 eax, edx
  0010e	75 04		 jne	 SHORT $LN4@Emplace_re
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  00110	8b c7		 mov	 eax, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 845  :         } else { // provide basic guarantee

  00112	eb 17		 jmp	 SHORT $LN58@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  00114	57		 push	 edi
  00115	50		 push	 eax
  00116	51		 push	 ecx
  00117	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAUCDynamicSphereInstance@@PAU1@@std@@YAPAUCDynamicSphereInstance@@PAU1@00@Z ; std::_Copy_memmove<CDynamicSphereInstance *,CDynamicSphereInstance *>
  0011c	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  0011f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00122	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  00125	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  00128	8d 43 1c	 lea	 eax, DWORD PTR [ebx+28]
$LN58@Emplace_re:
  0012b	50		 push	 eax
  0012c	52		 push	 edx
  0012d	51		 push	 ecx
  0012e	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAUCDynamicSphereInstance@@PAU1@@std@@YAPAUCDynamicSphereInstance@@PAU1@00@Z ; std::_Copy_memmove<CDynamicSphereInstance *,CDynamicSphereInstance *>

; 849  :         }
; 850  :         _CATCH_ALL
; 851  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 852  :         _Al.deallocate(_Newvec, _Newcapacity);
; 853  :         _RERAISE;
; 854  :         _CATCH_END
; 855  : 
; 856  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  00133	8b 45 f4	 mov	 eax, DWORD PTR __Oldsize$1$[ebp]
  00136	83 c4 0c	 add	 esp, 12			; 0000000cH
  00139	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0013c	40		 inc	 eax
  0013d	56		 push	 esi
  0013e	50		 push	 eax
  0013f	57		 push	 edi
  00140	e8 00 00 00 00	 call	 ?_Change_array@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@AAEXQAUCDynamicSphereInstance@@II@Z ; std::vector<CDynamicSphereInstance,std::allocator<CDynamicSphereInstance> >::_Change_array

; 858  :     }

  00145	5f		 pop	 edi
  00146	5e		 pop	 esi
  00147	8b c3		 mov	 eax, ebx
  00149	5b		 pop	 ebx
  0014a	8b e5		 mov	 esp, ebp
  0014c	5d		 pop	 ebp
  0014d	c2 08 00	 ret	 8
$LN79@Emplace_re:

; 825  :             _Xlength();

  00150	e8 00 00 00 00	 call	 ?_Xlength@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@CAXXZ ; std::vector<CDynamicSphereInstance,std::allocator<CDynamicSphereInstance> >::_Xlength
$LN80@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 71   :             _Throw_bad_array_new_length(); // multiply overflow

  00155	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN77@Emplace_re:
  0015a	cc		 int	 3
??$_Emplace_reallocate@ABUCDynamicSphereInstance@@@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@AAEPAUCDynamicSphereInstance@@QAU2@ABU2@@Z ENDP ; std::vector<CDynamicSphereInstance,std::allocator<CDynamicSphereInstance> >::_Emplace_reallocate<CDynamicSphereInstance const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >, COMDAT
; _this$ = ecx

; 744  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000e	75 25		 jne	 SHORT $LN3@Erase_tree
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR __Al$[ebp]
$LL2@Erase_tree:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00014	ff 76 08	 push	 DWORD PTR [esi+8]
  00017	8b cb		 mov	 ecx, ebx
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 754  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001f	8b c6		 mov	 eax, esi

; 755  :     _Val         = static_cast<_Other&&>(_New_val);

  00021	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00023	6a 18		 push	 24			; 00000018H
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00032	74 e0		 je	 SHORT $LL2@Erase_tree
  00034	5f		 pop	 edi
$LN3@Erase_tree:
  00035	5e		 pop	 esi

; 747  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 748  :         }
; 749  :     }

  00036	5b		 pop	 ebx
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??$_Find_lower_bound@PAVCActorInstance@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@ABQAVCActorInstance@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@PAVCActorInstance@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@ABQAVCActorInstance@@@Z PROC ; std::_Tree<std::_Tmap_traits<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> >,0> >::_Find_lower_bound<CActorInstance *>, COMDAT
; _this$ = ecx

; 1611 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1612 :         const auto _Scary = _Get_scary();
; 1613 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000b	89 02		 mov	 DWORD PTR [edx], eax
  0000d	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00014	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1614 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1615 :         while (!_Trynode->_Isnil) {

  00017	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001b	75 28		 jne	 SHORT $LN12@Find_lower
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00020	56		 push	 esi
  00021	8b 31		 mov	 esi, DWORD PTR [ecx]
$LL2@Find_lower:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1616 :             _Result._Location._Parent = _Trynode;

  00023	89 02		 mov	 DWORD PTR [edx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  00025	39 70 10	 cmp	 DWORD PTR [eax+16], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1617 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00028	73 07		 jae	 SHORT $LN4@Find_lower

; 1618 :                 _Result._Location._Child = _Tree_child::_Right;
; 1619 :                 _Trynode                 = _Trynode->_Right;

  0002a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002d	33 c9		 xor	 ecx, ecx

; 1620 :             } else {

  0002f	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1621 :                 _Result._Location._Child = _Tree_child::_Left;
; 1622 :                 _Result._Bound           = _Trynode;

  00031	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1623 :                 _Trynode                 = _Trynode->_Left;

  00034	b9 01 00 00 00	 mov	 ecx, 1
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Find_lower:

; 1614 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1615 :         while (!_Trynode->_Isnil) {

  0003b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00042	74 df		 je	 SHORT $LL2@Find_lower
  00044	5e		 pop	 esi
$LN12@Find_lower:

; 1624 :             }
; 1625 :         }
; 1626 : 
; 1627 :         return _Result;
; 1628 :     }

  00045	8b c2		 mov	 eax, edx
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
??$_Find_lower_bound@PAVCActorInstance@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@ABQAVCActorInstance@@@Z ENDP ; std::_Tree<std::_Tmap_traits<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> >,0> >::_Find_lower_bound<CActorInstance *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??$_Find_lower_bound@PBUSHitData@NRaceData@@@?$_Tree@V?$_Tmap_traits@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@U?$less@PBUSHitData@NRaceData@@@4@V?$allocator@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@1@ABQBUSHitData@NRaceData@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@PBUSHitData@NRaceData@@@?$_Tree@V?$_Tmap_traits@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@U?$less@PBUSHitData@NRaceData@@@4@V?$allocator@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@1@ABQBUSHitData@NRaceData@@@Z PROC ; std::_Tree<std::_Tmap_traits<NRaceData::SHitData const *,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > >,std::less<NRaceData::SHitData const *>,std::allocator<std::pair<NRaceData::SHitData const * const,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > > >,0> >::_Find_lower_bound<NRaceData::SHitData const *>, COMDAT
; _this$ = ecx

; 1611 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1612 :         const auto _Scary = _Get_scary();
; 1613 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000b	89 02		 mov	 DWORD PTR [edx], eax
  0000d	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00014	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1614 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1615 :         while (!_Trynode->_Isnil) {

  00017	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001b	75 28		 jne	 SHORT $LN12@Find_lower
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00020	56		 push	 esi
  00021	8b 31		 mov	 esi, DWORD PTR [ecx]
$LL2@Find_lower:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1616 :             _Result._Location._Parent = _Trynode;

  00023	89 02		 mov	 DWORD PTR [edx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  00025	39 70 10	 cmp	 DWORD PTR [eax+16], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1617 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00028	73 07		 jae	 SHORT $LN4@Find_lower

; 1618 :                 _Result._Location._Child = _Tree_child::_Right;
; 1619 :                 _Trynode                 = _Trynode->_Right;

  0002a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002d	33 c9		 xor	 ecx, ecx

; 1620 :             } else {

  0002f	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1621 :                 _Result._Location._Child = _Tree_child::_Left;
; 1622 :                 _Result._Bound           = _Trynode;

  00031	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1623 :                 _Trynode                 = _Trynode->_Left;

  00034	b9 01 00 00 00	 mov	 ecx, 1
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Find_lower:

; 1614 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1615 :         while (!_Trynode->_Isnil) {

  0003b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00042	74 df		 je	 SHORT $LL2@Find_lower
  00044	5e		 pop	 esi
$LN12@Find_lower:

; 1624 :             }
; 1625 :         }
; 1626 : 
; 1627 :         return _Result;
; 1628 :     }

  00045	8b c2		 mov	 eax, edx
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
??$_Find_lower_bound@PBUSHitData@NRaceData@@@?$_Tree@V?$_Tmap_traits@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@U?$less@PBUSHitData@NRaceData@@@4@V?$allocator@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@1@ABQBUSHitData@NRaceData@@@Z ENDP ; std::_Tree<std::_Tmap_traits<NRaceData::SHitData const *,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > >,std::less<NRaceData::SHitData const *>,std::allocator<std::pair<NRaceData::SHitData const * const,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > > >,0> >::_Find_lower_bound<NRaceData::SHitData const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@KAXPAVCHeaderDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@KAXPAVCHeaderDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@KAXPAVCHeaderDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN24@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN24@CDynamicPo:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN27@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN27@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN33@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN49@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN49@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2051 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN33@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN58@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN74@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN74@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2051 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN58@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 142  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN71@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN92@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@KAXPAVCNullDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@KAXPAVCNullDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@KAXPAVCNullDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN24@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN24@CDynamicPo:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN27@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN27@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN33@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN49@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN49@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2051 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN33@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN58@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN74@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN74@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2051 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN58@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 142  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN71@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN92@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN24@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN24@CDynamicPo:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN27@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN27@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN33@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN49@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN49@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2051 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN33@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN58@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN74@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN74@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2051 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN58@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 142  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN71@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN92@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN24@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN24@CDynamicPo:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN27@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN27@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN33@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN49@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN49@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2051 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN33@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN58@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN74@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN74@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2051 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN58@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 142  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN71@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN92@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN24@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN24@CDynamicPo:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN27@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN27@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN33@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN49@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN49@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2051 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN33@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN58@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN74@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN74@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2051 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN58@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 142  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN71@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN92@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@KAXPAVCAirResistanceDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@KAXPAVCAirResistanceDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@KAXPAVCAirResistanceDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN24@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN24@CDynamicPo:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN27@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN27@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN33@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN49@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN49@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2051 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN33@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN58@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN74@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN74@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2051 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN58@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 142  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN71@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN92@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@KAXPAVCGravityDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@KAXPAVCGravityDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@KAXPAVCGravityDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN24@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN24@CDynamicPo:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN27@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN27@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN33@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN49@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN49@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2051 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN33@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN58@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN74@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN74@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2051 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN58@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 142  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN71@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN92@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@KAXPAVCRotationDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@KAXPAVCRotationDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@KAXPAVCRotationDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN24@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN24@CDynamicPo:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN27@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN27@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN33@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN49@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN49@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2051 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN33@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN58@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN74@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN74@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2051 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN58@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 142  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN71@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN92@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >, COMDAT
; _this$ = ecx

; 752  :     void _Erase_head(_Alnode& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 753  :         this->_Orphan_all();
; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  00007	8b 37		 mov	 esi, DWORD PTR [edi]
  00009	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0000c	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00010	75 25		 jne	 SHORT $LN5@Erase_head
  00012	53		 push	 ebx
  00013	8b 5d 08	 mov	 ebx, DWORD PTR __Al$[ebp]
$LL4@Erase_head:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00016	ff 76 08	 push	 DWORD PTR [esi+8]
  00019	8b cf		 mov	 ecx, edi
  0001b	53		 push	 ebx
  0001c	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 754  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00021	8b c6		 mov	 eax, esi

; 755  :     _Val         = static_cast<_Other&&>(_New_val);

  00023	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00025	6a 18		 push	 24			; 00000018H
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002d	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00030	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00034	74 e0		 je	 SHORT $LL4@Erase_head
  00036	5b		 pop	 ebx
$LN5@Erase_head:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00037	6a 18		 push	 24			; 00000018H
  00039	ff 37		 push	 DWORD PTR [edi]
  0003b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00040	83 c4 08	 add	 esp, 8
  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 756  :     }

  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??1?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@QAE@XZ PROC ; std::pair<NRaceData::SHitData const *,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > >::~pair<NRaceData::SHitData const *,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > >, COMDAT
; _this$ = ecx
  00000	83 c1 04	 add	 ecx, 4

; 1082 :         _Scary->_Erase_head(_Getal());

  00003	51		 push	 ecx
  00004	e8 00 00 00 00	 call	 ??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >
  00009	c3		 ret	 0
??1?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@QAE@XZ ENDP ; std::pair<NRaceData::SHitData const *,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > >::~pair<NRaceData::SHitData const *,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map
;	COMDAT ??$insert@U?$pair@PAVCActorInstance@@M@std@@$0A@@?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z
_TEXT	SEGMENT
__Loc$3 = -36						; size = 12
$T4 = -24						; size = 12
$T5 = -20						; size = 8
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Val$ = 12						; size = 4
??$insert@U?$pair@PAVCActorInstance@@M@std@@$0A@@?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z PROC ; std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > >::insert<std::pair<CActorInstance *,float>,0>, COMDAT
; _this$ = ecx

; 186  :     pair<iterator, bool> insert(_Valty&& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$insert@U?$pair@PAVCActorInstance@@M@std@@$0A@@?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1002 :             _Loc                = _Find_lower_bound(_Keyval);

  0002a	8b 5d 0c	 mov	 ebx, DWORD PTR __Val$[ebp]
  0002d	8d 45 e8	 lea	 eax, DWORD PTR $T4[ebp]
  00030	53		 push	 ebx
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ??$_Find_lower_bound@PAVCActorInstance@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@ABQAVCActorInstance@@@Z ; std::_Tree<std::_Tmap_traits<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> >,0> >::_Find_lower_bound<CActorInstance *>
  00037	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0003a	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0003e	66 0f d6 45 dc	 movq	 QWORD PTR __Loc$3[ebp], xmm0

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00043	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00047	75 0b		 jne	 SHORT $LN6@insert
  00049	8b 03		 mov	 eax, DWORD PTR [ebx]
  0004b	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  0004e	72 04		 jb	 SHORT $LN6@insert
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00050	32 d2		 xor	 dl, dl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1004 :                 return {_Loc._Bound, false};

  00052	eb 51		 jmp	 SHORT $LN85@insert
$LN6@insert:

; 1631 :         if (max_size() == _Get_scary()->_Mysize) {

  00054	81 7f 04 aa aa
	aa 0a		 cmp	 DWORD PTR [edi+4], 178956970 ; 0aaaaaaaH
  0005b	74 64		 je	 SHORT $LN103@insert

; 1008 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  0005d	8b 37		 mov	 esi, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1144 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  0005f	89 7d ec	 mov	 DWORD PTR $T5[ebp], edi

; 87   :         return ::operator new(_Bytes);

  00062	6a 18		 push	 24			; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00064	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1151 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0006b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T5[ebp+4], 0

; 87   :         return ::operator new(_Bytes);

  00072	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 270  :         : first(_STD forward<_Other1>(_Right.first)), second(_STD forward<_Other2>(_Right.second)) {}

  00077	8b 0b		 mov	 ecx, DWORD PTR [ebx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  00079	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 270  :         : first(_STD forward<_Other1>(_Right.first)), second(_STD forward<_Other2>(_Right.second)) {}

  0007c	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  0007f	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00082	89 48 14	 mov	 DWORD PTR [eax+20], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00085	8b cf		 mov	 ecx, edi
  00087	50		 push	 eax
  00088	ff 75 e0	 push	 DWORD PTR __Loc$3[ebp+4]

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  0008b	89 30		 mov	 DWORD PTR [eax], esi

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0008d	ff 75 dc	 push	 DWORD PTR __Loc$3[ebp]

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  00090	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  00093	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 811  :         this->_Ptr->_Color = _Red;

  00096	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0009c	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > >::_Insert_node
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  000a1	8b c8		 mov	 ecx, eax
  000a3	b2 01		 mov	 dl, 1
$LN85@insert:
  000a5	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000a8	89 08		 mov	 DWORD PTR [eax], ecx
  000aa	88 50 04	 mov	 BYTE PTR [eax+4], dl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map

; 188  :     }

  000ad	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b7	59		 pop	 ecx
  000b8	5f		 pop	 edi
  000b9	5e		 pop	 esi
  000ba	5b		 pop	 ebx
  000bb	8b e5		 mov	 esp, ebp
  000bd	5d		 pop	 ebp
  000be	c2 08 00	 ret	 8
$LN103@insert:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1632 :             _Throw_tree_length_error();

  000c1	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN101@insert:
  000c6	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$insert@U?$pair@PAVCActorInstance@@M@std@@$0A@@?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z$2:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR $T5[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$insert@U?$pair@PAVCActorInstance@@M@std@@$0A@@?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$insert@U?$pair@PAVCActorInstance@@M@std@@$0A@@?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$insert@U?$pair@PAVCActorInstance@@M@std@@$0A@@?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z ENDP ; std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > >::insert<std::pair<CActorInstance *,float>,0>
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
;	COMDAT ?__InitializeCollisionData@CActorInstance@@IAEXXZ
_TEXT	SEGMENT
?__InitializeCollisionData@CActorInstance@@IAEXXZ PROC	; CActorInstance::__InitializeCollisionData, COMDAT
; _this$ = ecx

; 8    : 	m_canSkipCollision=false;

  00000	c6 81 60 05 00
	00 00		 mov	 BYTE PTR [ecx+1376], 0

; 9    : }

  00007	c3		 ret	 0
?__InitializeCollisionData@CActorInstance@@IAEXXZ ENDP	; CActorInstance::__InitializeCollisionData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
;	COMDAT ?CanSkipCollision@CActorInstance@@QAE_NXZ
_TEXT	SEGMENT
?CanSkipCollision@CActorInstance@@QAE_NXZ PROC		; CActorInstance::CanSkipCollision, COMDAT
; _this$ = ecx

; 23   : 	return m_canSkipCollision;

  00000	8a 81 60 05 00
	00		 mov	 al, BYTE PTR [ecx+1376]

; 24   : }

  00006	c3		 ret	 0
?CanSkipCollision@CActorInstance@@QAE_NXZ ENDP		; CActorInstance::CanSkipCollision
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
;	COMDAT ?DisableSkipCollision@CActorInstance@@QAEXXZ
_TEXT	SEGMENT
?DisableSkipCollision@CActorInstance@@QAEXXZ PROC	; CActorInstance::DisableSkipCollision, COMDAT
; _this$ = ecx

; 18   : 	m_canSkipCollision=false;

  00000	c6 81 60 05 00
	00 00		 mov	 BYTE PTR [ecx+1376], 0

; 19   : }

  00007	c3		 ret	 0
?DisableSkipCollision@CActorInstance@@QAEXXZ ENDP	; CActorInstance::DisableSkipCollision
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
;	COMDAT ?EnableSkipCollision@CActorInstance@@QAEXXZ
_TEXT	SEGMENT
?EnableSkipCollision@CActorInstance@@QAEXXZ PROC	; CActorInstance::EnableSkipCollision, COMDAT
; _this$ = ecx

; 13   : 	m_canSkipCollision=true;

  00000	c6 81 60 05 00
	00 01		 mov	 BYTE PTR [ecx+1376], 1

; 14   : }

  00007	c3		 ret	 0
?EnableSkipCollision@CActorInstance@@QAEXXZ ENDP	; CActorInstance::EnableSkipCollision
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<NRaceData::SHitData const * const,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > > > >::_Insert_node, COMDAT
; _this$ = ecx

; 646  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 647  :         ++_Mysize;
; 648  :         const auto _Head  = _Myhead;
; 649  :         _Newnode->_Parent = _Loc._Parent;

  00004	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0000e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00010	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00013	89 45 fc	 mov	 DWORD PTR __Head$1$[ebp], eax
  00016	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 650  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  00019	3b d0		 cmp	 edx, eax
  0001b	75 16		 jne	 SHORT $LN5@Insert_nod

; 651  :             _Head->_Left     = _Newnode;

  0001d	89 38		 mov	 DWORD PTR [eax], edi

; 652  :             _Head->_Parent   = _Newnode;

  0001f	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 653  :             _Head->_Right    = _Newnode;

  00022	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 712  :         return _Newnode;
; 713  :     }

  00025	8b c7		 mov	 eax, edi
  00027	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
  0002b	5f		 pop	 edi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 654  :             _Newnode->_Color = _Black; // the root is black
; 655  :             return _Newnode;
; 656  :         }
; 657  : 
; 658  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 659  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00033	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00037	75 0d		 jne	 SHORT $LN6@Insert_nod

; 660  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 661  :             _Loc._Parent->_Right = _Newnode;

  00039	89 7a 08	 mov	 DWORD PTR [edx+8], edi

; 662  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003c	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003f	75 0d		 jne	 SHORT $LN9@Insert_nod

; 663  :                 _Head->_Right = _Newnode;

  00041	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 664  :             }
; 665  :         } else { // add to left of _Loc._Parent

  00044	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 666  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 667  :             _Loc._Parent->_Left = _Newnode;

  00046	89 3a		 mov	 DWORD PTR [edx], edi

; 668  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00048	3b 10		 cmp	 edx, DWORD PTR [eax]
  0004a	75 02		 jne	 SHORT $LN9@Insert_nod

; 669  :                 _Head->_Left = _Newnode;

  0004c	89 38		 mov	 DWORD PTR [eax], edi
$LN9@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00051	8b c7		 mov	 eax, edi
  00053	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00057	0f 85 7d 01 00
	00		 jne	 $LN3@Insert_nod
  0005d	56		 push	 esi
  0005e	66 90		 npad	 2
$LL2@Insert_nod:

; 674  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00063	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	3b d1		 cmp	 edx, ecx
  0006a	0f 85 aa 00 00
	00		 jne	 $LN10@Insert_nod

; 675  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00070	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 676  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00073	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00077	0f 84 a3 00 00
	00		 je	 $LN76@Insert_nod

; 677  :                     _Pnode->_Parent->_Color          = _Black;
; 678  :                     _Parent_sibling->_Color          = _Black;
; 679  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 680  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 681  :                 } else { // parent's sibling has red and black children
; 682  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  0007d	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00080	3b c6		 cmp	 eax, esi
  00082	75 37		 jne	 SHORT $LN51@Insert_nod

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00084	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 683  :                         _Pnode = _Pnode->_Parent;

  00086	8b c2		 mov	 eax, edx

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00088	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0008b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00091	75 03		 jne	 SHORT $LN20@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  00093	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN20@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  00096	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00099	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  0009c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0009e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000a1	75 05		 jne	 SHORT $LN21@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  000a3	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  000a6	eb 0e		 jmp	 SHORT $LN24@Insert_nod
$LN21@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000a8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ab	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000ad	75 04		 jne	 SHORT $LN23@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  000af	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  000b1	eb 03		 jmp	 SHORT $LN24@Insert_nod
$LN23@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  000b3	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN24@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 479  :         _Wherenode->_Parent = _Pnode;

  000b8	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN51@Insert_nod:

; 684  :                         _Lrotate(_Pnode);
; 685  :                     }
; 686  : 
; 687  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 688  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c8	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 689  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 483  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000d2	8b 32		 mov	 esi, DWORD PTR [edx]

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  000d4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000d7	89 0a		 mov	 DWORD PTR [edx], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  000d9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000dc	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000e0	75 03		 jne	 SHORT $LN27@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  000e2	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN27@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  000e5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000e8	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  000eb	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000ed	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000f0	75 0b		 jne	 SHORT $LN28@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  000f2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  000f5	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  000f8	e9 cc 00 00 00	 jmp	 $LN75@Insert_nod
$LN28@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  000fd	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00100	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00103	75 0b		 jne	 SHORT $LN30@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00105	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00108	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  0010b	e9 b9 00 00 00	 jmp	 $LN75@Insert_nod
$LN30@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00110	89 31		 mov	 DWORD PTR [ecx], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00112	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  00115	e9 af 00 00 00	 jmp	 $LN75@Insert_nod
$LN10@Insert_nod:

; 692  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 693  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  0011a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0011e	75 1d		 jne	 SHORT $LN15@Insert_nod
$LN76@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00120	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1
  00124	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  00128	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0012e	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00132	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00135	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00138	e9 8f 00 00 00	 jmp	 $LN46@Insert_nod
$LN15@Insert_nod:

; 694  :                     _Pnode->_Parent->_Color          = _Black;
; 695  :                     _Parent_sibling->_Color          = _Black;
; 696  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 697  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 698  :                 } else { // parent's sibling has red and black children
; 699  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  0013d	8b 32		 mov	 esi, DWORD PTR [edx]
  0013f	3b c6		 cmp	 eax, esi
  00141	75 3a		 jne	 SHORT $LN39@Insert_nod

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00143	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 700  :                         _Pnode = _Pnode->_Parent;

  00146	8b c2		 mov	 eax, edx

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00148	89 08		 mov	 DWORD PTR [eax], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  0014a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0014d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00151	75 03		 jne	 SHORT $LN34@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  00153	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN34@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  00156	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00159	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  0015c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0015e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00161	75 05		 jne	 SHORT $LN35@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  00163	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00166	eb 0f		 jmp	 SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00168	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0016b	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0016e	75 05		 jne	 SHORT $LN37@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00170	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 496  :         } else {

  00173	eb 02		 jmp	 SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00175	89 31		 mov	 DWORD PTR [ecx], esi
$LN38@Insert_nod:

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00177	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 501  :         _Wherenode->_Parent = _Pnode;

  0017a	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN39@Insert_nod:

; 701  :                         _Rrotate(_Pnode);
; 702  :                     }
; 703  : 
; 704  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  0017d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 705  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00184	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00187	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0018a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 706  :                     _Lrotate(_Pnode->_Parent->_Parent);

  0018e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00191	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 461  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00194	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00197	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00199	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0019c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0019e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a2	75 03		 jne	 SHORT $LN41@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  001a4	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN41@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  001a7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001aa	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  001ad	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001af	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  001b2	75 05		 jne	 SHORT $LN42@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  001b4	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  001b7	eb 0e		 jmp	 SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001b9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001bc	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001be	75 04		 jne	 SHORT $LN44@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  001c2	eb 03		 jmp	 SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  001c4	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN45@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  001c7	89 16		 mov	 DWORD PTR [esi], edx
$LN75@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001c9	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN46@Insert_nod:
  001cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001cf	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001d3	0f 84 87 fe ff
	ff		 je	 $LL2@Insert_nod
  001d9	5e		 pop	 esi
$LN3@Insert_nod:

; 707  :                 }
; 708  :             }
; 709  :         }
; 710  : 
; 711  :         _Head->_Parent->_Color = _Black; // root is always black

  001da	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]
  001dd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e0	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 712  :         return _Newnode;
; 713  :     }

  001e4	8b c7		 mov	 eax, edi
  001e6	5f		 pop	 edi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<NRaceData::SHitData const * const,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > > > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\list
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\list
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\list
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
;	COMDAT ?__NormalAttackProcess@CActorInstance@@QAEHAAV1@@Z
_TEXT	SEGMENT
__Loc$4 = -152						; size = 12
__Loc$5 = -152						; size = 12
_motiontime$ = -140					; size = 4
$T6 = -136						; size = 8
$T7 = -136						; size = 8
_fx$1$ = -132						; size = 4
_this$ = -132						; size = 4
$T1$sroa$2178$3$ = -128					; size = 4
tv273 = -128						; size = 4
$T8 = -124						; size = 12
__Sentinel$9 = -120					; size = 8
$T10 = -120						; size = 8
$T11 = -120						; size = 8
_fy$1$ = -116						; size = 4
__Myhead$1$ = -116					; size = 4
$T12 = -116						; size = 4
$T13 = -116						; size = 4
$T2$sroa$2176$2$ = -112					; size = 4
_range_start$2$ = -108					; size = 4
$T14 = -104						; size = 8
_c$1$ = -100						; size = 4
_rHittedInstanceMap$1$ = -100				; size = 4
tv4455 = -100						; size = 4
tv4297 = -100						; size = 4
_this$1$ = -96						; size = 4
_fDistance$1$ = -92					; size = 4
_itorHitData$1$ = -92					; size = 4
_pad$1$ = -88						; size = 4
__Loc$15 = -84						; size = 12
$T16 = -84						; size = 12
_rVictim$GSCopy$1$ = -72				; size = 4
_this$GSCopy$1$ = -68					; size = 4
_HittedInstanceMap$17 = -64				; size = 8
_s$1$ = -60						; size = 4
tv4313 = -60						; size = 4
tv4161 = -60						; size = 4
tv2993 = -60						; size = 4
__X$ = -60						; size = 4
__X$ = -60						; size = 4
$T18 = -60						; size = 4
$T19 = -60						; size = 4
_dsi$20 = -56						; size = 28
__Loc$21 = -28						; size = 12
_v3HitPosition$22 = -28					; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rVictim$ = 8						; size = 4
?__NormalAttackProcess@CActorInstance@@QAEHAAV1@@Z PROC	; CActorInstance::__NormalAttackProcess, COMDAT
; _this$ = ecx

; 317  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?__NormalAttackProcess@CActorInstance@@QAEHAAV1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b f9		 mov	 edi, ecx
  0002f	89 7d bc	 mov	 DWORD PTR _this$GSCopy$1$[ebp], edi
  00032	8b 75 08	 mov	 esi, DWORD PTR _rVictim$[ebp]

; 323  : 	if (IS_HUGE_RACE(rVictim.GetRace()))

  00035	8b ce		 mov	 ecx, esi
  00037	89 75 b8	 mov	 DWORD PTR _rVictim$GSCopy$1$[ebp], esi
  0003a	f3 0f 10 8e 68
	04 00 00	 movss	 xmm1, DWORD PTR [esi+1128]
  00042	f3 0f 5c 8f 68
	04 00 00	 subss	 xmm1, DWORD PTR [edi+1128]
  0004a	f3 0f 10 86 70
	04 00 00	 movss	 xmm0, DWORD PTR [esi+1136]
  00052	f3 0f 5c 87 70
	04 00 00	 subss	 xmm0, DWORD PTR [edi+1136]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  0005a	f3 0f 59 c9	 mulss	 xmm1, xmm1

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0005e	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00062	f3 0f 58 c8	 addss	 xmm1, xmm0
  00066	f3 0f 58 c8	 addss	 xmm1, xmm0
  0006a	f3 0f 11 4d a4	 movss	 DWORD PTR _fDistance$1$[ebp], xmm1
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 323  : 	if (IS_HUGE_RACE(rVictim.GetRace()))

  0006f	e8 00 00 00 00	 call	 ?GetRace@CActorInstance@@QAEKXZ ; CActorInstance::GetRace
  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 ?IS_HUGE_RACE@@YA_NI@Z	; IS_HUGE_RACE
  0007a	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _fDistance$1$[ebp]
  0007f	83 c4 04	 add	 esp, 4
  00082	84 c0		 test	 al, al
  00084	74 09		 je	 SHORT $LN14@NormalAtta

; 325  : 		if (fDistance >= 500.0f*500.0f)

  00086	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@48742400
  0008d	eb 07		 jmp	 SHORT $LN626@NormalAtta
$LN14@NormalAtta:

; 326  : 			return FALSE;
; 327  : 	}
; 328  : 	else
; 329  : 	{
; 330  : 		if (fDistance >= 300.0f*300.0f)

  0008f	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@47afc800
$LN626@NormalAtta:

; 331  : 			return FALSE;
; 332  : 	}
; 333  : 
; 334  : 	if (!isValidAttacking())

  00096	0f 83 38 04 00
	00		 jae	 $LN621@NormalAtta
  0009c	8b cf		 mov	 ecx, edi
  0009e	e8 00 00 00 00	 call	 ?isValidAttacking@CActorInstance@@IAEHXZ ; CActorInstance::isValidAttacking
  000a3	85 c0		 test	 eax, eax
  000a5	0f 84 29 04 00
	00		 je	 $LN621@NormalAtta

; 335  : 		return FALSE;
; 336  : 
; 337  : 	const float c_fAttackRadius = 20.0f;
; 338  : 	const NRaceData::TMotionAttackData * pad = m_pkCurRaceMotionData->GetMotionAttackDataPointer();

  000ab	8b 8f 24 04 00
	00		 mov	 ecx, DWORD PTR [edi+1060]
  000b1	e8 00 00 00 00	 call	 ?GetMotionAttackDataPointer@CRaceMotionData@@QBEPBUSMotionAttackData@NRaceData@@XZ ; CRaceMotionData::GetMotionAttackDataPointer

; 340  : 	const float motiontime = GetAttackingElapsedTime();

  000b6	8b cf		 mov	 ecx, edi
  000b8	89 45 a8	 mov	 DWORD PTR _pad$1$[ebp], eax
  000bb	e8 00 00 00 00	 call	 ?GetAttackingElapsedTime@CActorInstance@@QAEMXZ ; CActorInstance::GetAttackingElapsedTime
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  000c0	8b 45 a8	 mov	 eax, DWORD PTR _pad$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 340  : 	const float motiontime = GetAttackingElapsedTime();

  000c3	d9 9d 74 ff ff
	ff		 fstp	 DWORD PTR _motiontime$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  000c9	8b 78 1c	 mov	 edi, DWORD PTR [eax+28]
  000cc	89 7d a4	 mov	 DWORD PTR _itorHitData$1$[ebp], edi
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 343  : 	for (; itorHitData != pad->HitDataContainer.end(); ++itorHitData)

  000cf	3b 78 20	 cmp	 edi, DWORD PTR [eax+32]
  000d2	0f 84 fc 03 00
	00		 je	 $LN621@NormalAtta
  000d8	8b 45 bc	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  000db	05 48 05 00 00	 add	 eax, 1352		; 00000548H
  000e0	89 45 a0	 mov	 DWORD PTR _this$1$[ebp], eax
$LL410@NormalAtta:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  000e3	8d 4d c4	 lea	 ecx, DWORD PTR $T19[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 347  : 		THitDataMap::iterator itHitData = m_HitDataMap.find(&c_rHitData);

  000e6	89 7d c4	 mov	 DWORD PTR $T19[ebp], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  000e9	51		 push	 ecx
  000ea	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR __Loc$4[ebp]
  000f0	51		 push	 ecx
  000f1	8b c8		 mov	 ecx, eax
  000f3	e8 00 00 00 00	 call	 ??$_Find_lower_bound@PBUSHitData@NRaceData@@@?$_Tree@V?$_Tmap_traits@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@U?$less@PBUSHitData@NRaceData@@@4@V?$allocator@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@1@ABQBUSHitData@NRaceData@@@Z ; std::_Tree<std::_Tmap_traits<NRaceData::SHitData const *,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > >,std::less<NRaceData::SHitData const *>,std::allocator<std::pair<NRaceData::SHitData const * const,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > > >,0> >::_Find_lower_bound<NRaceData::SHitData const *>

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000f8	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR __Loc$4[ebp+8]
  000fe	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00102	75 6a		 jne	 SHORT $LN21@NormalAtta
  00104	3b 78 10	 cmp	 edi, DWORD PTR [eax+16]
  00107	72 65		 jb	 SHORT $LN21@NormalAtta
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 348  : 		if (itHitData != m_HitDataMap.end())

  00109	8b 4d a0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0010c	3b 01		 cmp	 eax, DWORD PTR [ecx]
  0010e	74 5e		 je	 SHORT $LN21@NormalAtta
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00110	8d 4d c4	 lea	 ecx, DWORD PTR $T18[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 353  : 			if ((itInstance=rHittedInstanceMap.find(&rVictim)) != rHittedInstanceMap.end())

  00113	89 75 c4	 mov	 DWORD PTR $T18[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00116	51		 push	 ecx
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 350  : 			THittedInstanceMap & rHittedInstanceMap = itHitData->second;

  00117	83 c0 14	 add	 eax, 20			; 00000014H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0011a	8d 4d e4	 lea	 ecx, DWORD PTR __Loc$21[ebp]
  0011d	51		 push	 ecx
  0011e	8b c8		 mov	 ecx, eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 350  : 			THittedInstanceMap & rHittedInstanceMap = itHitData->second;

  00120	89 45 9c	 mov	 DWORD PTR _rHittedInstanceMap$1$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00123	e8 00 00 00 00	 call	 ??$_Find_lower_bound@PAVCActorInstance@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@ABQAVCActorInstance@@@Z ; std::_Tree<std::_Tmap_traits<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> >,0> >::_Find_lower_bound<CActorInstance *>

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00128	8b 45 ec	 mov	 eax, DWORD PTR __Loc$21[ebp+8]
  0012b	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0012f	75 3d		 jne	 SHORT $LN21@NormalAtta
  00131	3b 70 10	 cmp	 esi, DWORD PTR [eax+16]
  00134	72 38		 jb	 SHORT $LN21@NormalAtta
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 353  : 			if ((itInstance=rHittedInstanceMap.find(&rVictim)) != rHittedInstanceMap.end())

  00136	8b 4d 9c	 mov	 ecx, DWORD PTR _rHittedInstanceMap$1$[ebp]
  00139	3b 01		 cmp	 eax, DWORD PTR [ecx]
  0013b	74 31		 je	 SHORT $LN21@NormalAtta

; 354  : 			{
; 355  : 				if (pad->iMotionType==NRaceData::MOTION_TYPE_COMBO || itInstance->second > GetLocalTime())

  0013d	8b 4d a8	 mov	 ecx, DWORD PTR _pad$1$[ebp]
  00140	83 79 18 02	 cmp	 DWORD PTR [ecx+24], 2
  00144	0f 84 f8 02 00
	00		 je	 $LN2@NormalAtta
  0014a	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  0014f	8b 4d bc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00152	f3 0f 11 45 c4	 movss	 DWORD PTR tv4161[ebp], xmm0
  00157	e8 00 00 00 00	 call	 ?GetLocalTime@CGraphicThingInstance@@QAEMXZ ; CGraphicThingInstance::GetLocalTime
  0015c	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR tv4161[ebp]
  00161	d9 5d 9c	 fstp	 DWORD PTR tv4455[ebp]
  00164	0f 2f 45 9c	 comiss	 xmm0, DWORD PTR tv4455[ebp]
  00168	0f 87 d4 02 00
	00		 ja	 $LN2@NormalAtta
$LN21@NormalAtta:

; 361  : 		range_start = c_rHitData.mapHitPosition.lower_bound(motiontime-CTimer::Instance().GetElapsedSecond());

  0016e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  00174	e8 00 00 00 00	 call	 ?GetElapsedSecond@CTimer@@QAEMXZ ; CTimer::GetElapsedSecond
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1613 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00179	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
  0017c	8b f0		 mov	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 361  : 		range_start = c_rHitData.mapHitPosition.lower_bound(motiontime-CTimer::Instance().GetElapsedSecond());

  0017e	d8 ad 74 ff ff
	ff		 fsubr	 DWORD PTR _motiontime$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1613 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00184	89 45 90	 mov	 DWORD PTR $T2$sroa$2176$2$[ebp], eax
  00187	89 75 94	 mov	 DWORD PTR _range_start$2$[ebp], esi
  0018a	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 361  : 		range_start = c_rHitData.mapHitPosition.lower_bound(motiontime-CTimer::Instance().GetElapsedSecond());

  0018d	d9 5d c4	 fstp	 DWORD PTR tv2993[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1615 :         while (!_Trynode->_Isnil) {

  00190	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00194	75 73		 jne	 SHORT $LN502@NormalAtta
  00196	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR tv2993[ebp]
  0019b	8b ca		 mov	 ecx, edx
  0019d	0f 1f 00	 npad	 3
$LL501@NormalAtta:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  001a0	0f 2f 41 10	 comiss	 xmm0, DWORD PTR [ecx+16]
  001a4	0f 97 c0	 seta	 al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1617 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  001a7	84 c0		 test	 al, al
  001a9	74 05		 je	 SHORT $LN503@NormalAtta

; 1618 :                 _Result._Location._Child = _Tree_child::_Right;
; 1619 :                 _Trynode                 = _Trynode->_Right;

  001ab	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]

; 1620 :             } else {

  001ae	eb 04		 jmp	 SHORT $LN504@NormalAtta
$LN503@NormalAtta:

; 1621 :                 _Result._Location._Child = _Tree_child::_Left;
; 1622 :                 _Result._Bound           = _Trynode;

  001b0	8b f1		 mov	 esi, ecx

; 1623 :                 _Trynode                 = _Trynode->_Left;

  001b2	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN504@NormalAtta:

; 1615 :         while (!_Trynode->_Isnil) {

  001b4	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001b8	74 e6		 je	 SHORT $LL501@NormalAtta
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 325  : 		if (fDistance >= 500.0f*500.0f)

  001ba	f3 0f 10 8d 74
	ff ff ff	 movss	 xmm1, DWORD PTR _motiontime$[ebp]
  001c2	8b fe		 mov	 edi, esi
  001c4	8b 4d 90	 mov	 ecx, DWORD PTR $T2$sroa$2176$2$[ebp]
  001c7	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL485@NormalAtta:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  001d0	f3 0f 10 42 10	 movss	 xmm0, DWORD PTR [edx+16]
  001d5	0f 2f c1	 comiss	 xmm0, xmm1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1592 :             if (_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Trynode->_Myval))) {

  001d8	89 55 c4	 mov	 DWORD PTR tv4313[ebp], edx
  001db	89 4d 9c	 mov	 DWORD PTR tv4297[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  001de	0f 97 c0	 seta	 al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1592 :             if (_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Trynode->_Myval))) {

  001e1	84 c0		 test	 al, al
  001e3	74 04		 je	 SHORT $LN487@NormalAtta

; 1593 :                 _Result._Location._Child = _Tree_child::_Left;
; 1594 :                 _Result._Bound           = _Trynode;
; 1595 :                 _Trynode                 = _Trynode->_Left;

  001e5	8b 12		 mov	 edx, DWORD PTR [edx]

; 1596 :             } else {

  001e7	eb 03		 jmp	 SHORT $LN488@NormalAtta
$LN487@NormalAtta:

; 1597 :                 _Result._Location._Child = _Tree_child::_Right;
; 1598 :                 _Trynode                 = _Trynode->_Right;

  001e9	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
$LN488@NormalAtta:

; 1589 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1590 :         while (!_Trynode->_Isnil) {

  001ec	8b 4d c4	 mov	 ecx, DWORD PTR tv4313[ebp]
  001ef	84 c0		 test	 al, al
  001f1	0f 44 4d 9c	 cmove	 ecx, DWORD PTR tv4297[ebp]
  001f5	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  001f9	74 d5		 je	 SHORT $LL485@NormalAtta
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 398  : 				for(dsit = c_DefendingSphereVector.begin(); dsit!= c_DefendingSphereVector.end();++dsit, ++index)

  001fb	89 7d 80	 mov	 DWORD PTR $T1$sroa$2178$3$[ebp], edi
  001fe	8b 7d a4	 mov	 edi, DWORD PTR _itorHitData$1$[ebp]
  00201	89 4d 90	 mov	 DWORD PTR $T2$sroa$2176$2$[ebp], ecx
  00204	89 75 94	 mov	 DWORD PTR _range_start$2$[ebp], esi
  00207	eb 06		 jmp	 SHORT $LN486@NormalAtta
$LN502@NormalAtta:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1588 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00209	89 45 90	 mov	 DWORD PTR $T2$sroa$2176$2$[ebp], eax
  0020c	89 75 80	 mov	 DWORD PTR $T1$sroa$2178$3$[ebp], esi
$LN486@NormalAtta:
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 363  : 		float c = cosf(D3DXToRadian(GetRotation()));

  0020f	8b 4d bc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00212	e8 00 00 00 00	 call	 ?GetRotation@CActorInstance@@QAEMXZ ; CActorInstance::GetRotation
  00217	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3c8efa35
  0021d	d9 5d c4	 fstp	 DWORD PTR __X$[ebp]
  00220	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR __X$[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 653  :             return (float)cos(_X);

  00225	0f 5a c0	 cvtps2pd xmm0, xmm0
  00228	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 364  : 		float s = sinf(D3DXToRadian(GetRotation()));

  0022d	8b 4d bc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 653  :             return (float)cos(_X);

  00230	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00234	f3 0f 11 45 9c	 movss	 DWORD PTR _c$1$[ebp], xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 364  : 		float s = sinf(D3DXToRadian(GetRotation()));

  00239	e8 00 00 00 00	 call	 ?GetRotation@CActorInstance@@QAEMXZ ; CActorInstance::GetRotation
  0023e	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3c8efa35
  00244	d9 5d c4	 fstp	 DWORD PTR __X$[ebp]
  00247	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR __X$[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 758  :             return (float)sin(_X);

  0024c	0f 5a c0	 cvtps2pd xmm0, xmm0
  0024f	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 366  : 		for(;range_start!=range_end;++range_start)

  00254	8b 45 90	 mov	 eax, DWORD PTR $T2$sroa$2176$2$[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 758  :             return (float)sin(_X);

  00257	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0025b	f3 0f 11 45 c4	 movss	 DWORD PTR _s$1$[ebp], xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 366  : 		for(;range_start!=range_end;++range_start)

  00260	39 45 80	 cmp	 DWORD PTR $T1$sroa$2178$3$[ebp], eax
  00263	0f 84 d6 01 00
	00		 je	 $LN623@NormalAtta
  00269	0f 1f 80 00 00
	00 00		 npad	 7
$LL379@NormalAtta:

; 367  : 		{
; 368  : 			const CDynamicSphereInstance& dsiSrc=range_start->second;
; 369  : 
; 370  : 			CDynamicSphereInstance dsi;
; 371  : 			dsi = dsiSrc;

  00270	0f 10 46 14	 movups	 xmm0, XMMWORD PTR [esi+20]

; 375  : 				v3SrcDir*=__GetReachScale();

  00274	8b 7d bc	 mov	 edi, DWORD PTR _this$GSCopy$1$[ebp]
  00277	8b cf		 mov	 ecx, edi
  00279	c7 45 e0 00 00
	a0 41		 mov	 DWORD PTR _dsi$20[ebp+24], 1101004800 ; 41a00000H
  00280	0f 11 45 c8	 movups	 XMMWORD PTR _dsi$20[ebp], xmm0
  00284	f3 0f 7e 46 24	 movq	 xmm0, QWORD PTR [esi+36]
  00289	66 0f d6 45 d8	 movq	 QWORD PTR _dsi$20[ebp+16], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0028e	f3 0f 10 46 14	 movss	 xmm0, DWORD PTR [esi+20]
  00293	f3 0f 5c 46 20	 subss	 xmm0, DWORD PTR [esi+32]
  00298	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _fx$1$[ebp], xmm0
  002a0	f3 0f 10 46 18	 movss	 xmm0, DWORD PTR [esi+24]
  002a5	f3 0f 5c 46 24	 subss	 xmm0, DWORD PTR [esi+36]
  002aa	f3 0f 11 45 8c	 movss	 DWORD PTR _fy$1$[ebp], xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 375  : 				v3SrcDir*=__GetReachScale();

  002af	e8 00 00 00 00	 call	 ?__GetReachScale@CActorInstance@@IAEMXZ ; CActorInstance::__GetReachScale
  002b4	f3 0f 10 9d 7c
	ff ff ff	 movss	 xmm3, DWORD PTR _fx$1$[ebp]

; 381  : 				v3Dst += GetPosition();

  002bc	8b cf		 mov	 ecx, edi
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 222  :     x *= f;

  002be	f3 0f 10 55 8c	 movss	 xmm2, DWORD PTR _fy$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 375  : 				v3SrcDir*=__GetReachScale();

  002c3	d9 5d 80	 fstp	 DWORD PTR tv273[ebp]
  002c6	f3 0f 59 5d 80	 mulss	 xmm3, DWORD PTR tv273[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 222  :     x *= f;

  002cb	f3 0f 59 55 80	 mulss	 xmm2, DWORD PTR tv273[ebp]

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  002d0	f3 0f 58 5e 20	 addss	 xmm3, DWORD PTR [esi+32]
  002d5	f3 0f 58 56 24	 addss	 xmm2, DWORD PTR [esi+36]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 379  : 				v3Dst.x = v3Src.x * c - v3Src.y * s;

  002da	0f 28 cb	 movaps	 xmm1, xmm3

; 380  : 				v3Dst.y = v3Src.x * s + v3Src.y * c;

  002dd	f3 0f 59 5d c4	 mulss	 xmm3, DWORD PTR _s$1$[ebp]
  002e2	f3 0f 59 4d 9c	 mulss	 xmm1, DWORD PTR _c$1$[ebp]
  002e7	0f 28 c2	 movaps	 xmm0, xmm2
  002ea	f3 0f 59 45 c4	 mulss	 xmm0, DWORD PTR _s$1$[ebp]
  002ef	f3 0f 59 55 9c	 mulss	 xmm2, DWORD PTR _c$1$[ebp]
  002f4	f3 0f 5c c8	 subss	 xmm1, xmm0
  002f8	f3 0f 58 da	 addss	 xmm3, xmm2
  002fc	f3 0f 11 4d c8	 movss	 DWORD PTR _dsi$20[ebp], xmm1
  00301	f3 0f 11 5d cc	 movss	 DWORD PTR _dsi$20[ebp+4], xmm3

; 381  : 				v3Dst += GetPosition();

  00306	e8 00 00 00 00	 call	 ?GetPosition@CGraphicObjectInstance@@QBEABUD3DXVECTOR3@@XZ ; CGraphicObjectInstance::GetPosition
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  0030b	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _dsi$20[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 388  : 				v3Dst += GetPosition();

  00310	8b cf		 mov	 ecx, edi
  00312	f3 0f 10 5e 20	 movss	 xmm3, DWORD PTR [esi+32]
  00317	f3 0f 10 56 24	 movss	 xmm2, DWORD PTR [esi+36]
  0031c	0f 28 cb	 movaps	 xmm1, xmm3
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  0031f	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 386  : 				v3Dst.x = v3Src.x * c - v3Src.y * s;

  00323	f3 0f 59 4d 9c	 mulss	 xmm1, DWORD PTR _c$1$[ebp]

; 387  : 				v3Dst.y = v3Src.x * s + v3Src.y * c;

  00328	f3 0f 59 5d c4	 mulss	 xmm3, DWORD PTR _s$1$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  0032d	f3 0f 11 45 c8	 movss	 DWORD PTR _dsi$20[ebp], xmm0

; 205  :     y += v.y;

  00332	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _dsi$20[ebp+4]
  00337	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  0033c	f3 0f 11 45 cc	 movss	 DWORD PTR _dsi$20[ebp+4], xmm0

; 206  :     z += v.z;

  00341	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _dsi$20[ebp+8]
  00346	f3 0f 58 40 08	 addss	 xmm0, DWORD PTR [eax+8]
  0034b	f3 0f 11 45 d0	 movss	 DWORD PTR _dsi$20[ebp+8], xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 386  : 				v3Dst.x = v3Src.x * c - v3Src.y * s;

  00350	0f 28 c2	 movaps	 xmm0, xmm2
  00353	f3 0f 59 45 c4	 mulss	 xmm0, DWORD PTR _s$1$[ebp]

; 387  : 				v3Dst.y = v3Src.x * s + v3Src.y * c;

  00358	f3 0f 59 55 9c	 mulss	 xmm2, DWORD PTR _c$1$[ebp]
  0035d	f3 0f 5c c8	 subss	 xmm1, xmm0
  00361	f3 0f 58 d3	 addss	 xmm2, xmm3
  00365	f3 0f 11 4d d4	 movss	 DWORD PTR _dsi$20[ebp+12], xmm1
  0036a	f3 0f 11 55 d8	 movss	 DWORD PTR _dsi$20[ebp+16], xmm2

; 388  : 				v3Dst += GetPosition();

  0036f	e8 00 00 00 00	 call	 ?GetPosition@CGraphicObjectInstance@@QBEABUD3DXVECTOR3@@XZ ; CGraphicObjectInstance::GetPosition
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  00374	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _dsi$20[ebp+12]
  00379	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  0037d	f3 0f 11 45 d4	 movss	 DWORD PTR _dsi$20[ebp+12], xmm0

; 205  :     y += v.y;

  00382	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _dsi$20[ebp+16]
  00387	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  0038c	f3 0f 11 45 d8	 movss	 DWORD PTR _dsi$20[ebp+16], xmm0

; 206  :     z += v.z;

  00391	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _dsi$20[ebp+20]
  00396	f3 0f 58 40 08	 addss	 xmm0, DWORD PTR [eax+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\list

; 1090 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  0039b	8b 45 b8	 mov	 eax, DWORD PTR _rVictim$GSCopy$1$[ebp]
  0039e	8b 80 40 03 00
	00		 mov	 eax, DWORD PTR [eax+832]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 206  :     z += v.z;

  003a4	f3 0f 11 45 dc	 movss	 DWORD PTR _dsi$20[ebp+20], xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\list

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  003a9	8b 38		 mov	 edi, DWORD PTR [eax]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 393  : 			for(cpit = rVictim.m_DefendingPointInstanceList.begin(); cpit!=rVictim.m_DefendingPointInstanceList.end();++cpit)

  003ab	3b f8		 cmp	 edi, eax
  003ad	74 3e		 je	 SHORT $LN5@NormalAtta
  003af	8b 45 b8	 mov	 eax, DWORD PTR _rVictim$GSCopy$1$[ebp]
$LL50@NormalAtta:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  003b2	8b 77 18	 mov	 esi, DWORD PTR [edi+24]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 398  : 				for(dsit = c_DefendingSphereVector.begin(); dsit!= c_DefendingSphereVector.end();++dsit, ++index)

  003b5	3b 77 1c	 cmp	 esi, DWORD PTR [edi+28]
  003b8	74 26		 je	 SHORT $LN8@NormalAtta
  003ba	66 0f 1f 44 00
	00		 npad	 6
$LL13@NormalAtta:

; 399  : 				{
; 400  : 					const CDynamicSphereInstance& sub = *dsit;
; 401  : 					if (DetectCollisionDynamicZCylinderVSDynamicZCylinder(dsi, sub))

  003c0	8d 45 c8	 lea	 eax, DWORD PTR _dsi$20[ebp]
  003c3	56		 push	 esi
  003c4	50		 push	 eax
  003c5	e8 00 00 00 00	 call	 ?DetectCollisionDynamicZCylinderVSDynamicZCylinder@@YA_NABUCDynamicSphereInstance@@0@Z ; DetectCollisionDynamicZCylinderVSDynamicZCylinder
  003ca	83 c4 08	 add	 esp, 8
  003cd	84 c0		 test	 al, al
  003cf	0f 85 87 00 00
	00		 jne	 $LN577@NormalAtta
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 79   :         ++_Ptr;

  003d5	83 c6 1c	 add	 esi, 28			; 0000001cH

; 163  :         return _Ptr == _Right._Ptr;

  003d8	3b 77 1c	 cmp	 esi, DWORD PTR [edi+28]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 398  : 				for(dsit = c_DefendingSphereVector.begin(); dsit!= c_DefendingSphereVector.end();++dsit, ++index)

  003db	75 e3		 jne	 SHORT $LL13@NormalAtta
  003dd	8b 45 b8	 mov	 eax, DWORD PTR _rVictim$GSCopy$1$[ebp]
$LN8@NormalAtta:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\list

; 165  :         this->_Ptr = this->_Ptr->_Next;

  003e0	8b 3f		 mov	 edi, DWORD PTR [edi]

; 198  :         return this->_Ptr == _Right._Ptr;

  003e2	3b b8 40 03 00
	00		 cmp	 edi, DWORD PTR [eax+832]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 393  : 			for(cpit = rVictim.m_DefendingPointInstanceList.begin(); cpit!=rVictim.m_DefendingPointInstanceList.end();++cpit)

  003e8	75 c8		 jne	 SHORT $LL50@NormalAtta
  003ea	8b 75 94	 mov	 esi, DWORD PTR _range_start$2$[ebp]
$LN5@NormalAtta:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 51   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  003ed	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  003f0	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  003f4	74 21		 je	 SHORT $LN378@NormalAtta

; 52   :             _Nodeptr _Pnode;
; 53   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  003f6	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  003f9	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  003fd	75 11		 jne	 SHORT $LN622@NormalAtta
  003ff	90		 npad	 1
$LL376@NormalAtta:
  00400	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  00403	75 0b		 jne	 SHORT $LN622@NormalAtta

; 54   :                 _Ptr = _Pnode; // ==> parent while right subtree

  00405	8b f0		 mov	 esi, eax
  00407	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0040a	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0040e	74 f0		 je	 SHORT $LL376@NormalAtta
$LN622@NormalAtta:

; 55   :             }
; 56   : 
; 57   :             _Ptr = _Pnode; // ==> parent (head if end())

  00410	8b f0		 mov	 esi, eax
  00412	89 75 94	 mov	 DWORD PTR _range_start$2$[ebp], esi

; 58   :         } else {

  00415	eb 1c		 jmp	 SHORT $LN383@NormalAtta
$LN378@NormalAtta:

; 59   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree

  00417	8b f0		 mov	 esi, eax
  00419	89 75 94	 mov	 DWORD PTR _range_start$2$[ebp], esi

; 453  :         while (!_Pnode->_Left->_Isnil) {

  0041c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0041e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00422	75 0f		 jne	 SHORT $LN383@NormalAtta
$LL382@NormalAtta:
  00424	8b 01		 mov	 eax, DWORD PTR [ecx]

; 454  :             _Pnode = _Pnode->_Left;

  00426	8b f1		 mov	 esi, ecx
  00428	89 75 94	 mov	 DWORD PTR _range_start$2$[ebp], esi
  0042b	8b c8		 mov	 ecx, eax
  0042d	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00431	74 f1		 je	 SHORT $LL382@NormalAtta
$LN383@NormalAtta:

; 233  :         return this->_Ptr == _Right._Ptr;

  00433	3b 75 90	 cmp	 esi, DWORD PTR $T2$sroa$2176$2$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 366  : 		for(;range_start!=range_end;++range_start)

  00436	0f 85 34 fe ff
	ff		 jne	 $LL379@NormalAtta
  0043c	8b 7d a4	 mov	 edi, DWORD PTR _itorHitData$1$[ebp]
$LN623@NormalAtta:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 79   :         ++_Ptr;

  0043f	8b 75 b8	 mov	 esi, DWORD PTR _rVictim$GSCopy$1$[ebp]
$LN2@NormalAtta:

; 163  :         return _Ptr == _Right._Ptr;

  00442	8b 45 a8	 mov	 eax, DWORD PTR _pad$1$[ebp]

; 79   :         ++_Ptr;

  00445	83 c7 2c	 add	 edi, 44			; 0000002cH
  00448	89 7d a4	 mov	 DWORD PTR _itorHitData$1$[ebp], edi

; 163  :         return _Ptr == _Right._Ptr;

  0044b	3b 78 20	 cmp	 edi, DWORD PTR [eax+32]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 343  : 	for (; itorHitData != pad->HitDataContainer.end(); ++itorHitData)

  0044e	0f 84 80 00 00
	00		 je	 $LN621@NormalAtta
  00454	8b 45 a0	 mov	 eax, DWORD PTR _this$1$[ebp]
  00457	e9 87 fc ff ff	 jmp	 $LL410@NormalAtta
$LN577@NormalAtta:

; 403  : 						THitDataMap::iterator itHitData = m_HitDataMap.find(&c_rHitData);

  0045c	8b 7d a4	 mov	 edi, DWORD PTR _itorHitData$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0045f	8d 45 8c	 lea	 eax, DWORD PTR $T13[ebp]
  00462	8b 4d a0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00465	50		 push	 eax
  00466	8d 45 ac	 lea	 eax, DWORD PTR __Loc$15[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 403  : 						THitDataMap::iterator itHitData = m_HitDataMap.find(&c_rHitData);

  00469	89 7d 8c	 mov	 DWORD PTR $T13[ebp], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0046c	50		 push	 eax
  0046d	e8 00 00 00 00	 call	 ??$_Find_lower_bound@PBUSHitData@NRaceData@@@?$_Tree@V?$_Tmap_traits@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@U?$less@PBUSHitData@NRaceData@@@4@V?$allocator@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@1@ABQBUSHitData@NRaceData@@@Z ; std::_Tree<std::_Tmap_traits<NRaceData::SHitData const *,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > >,std::less<NRaceData::SHitData const *>,std::allocator<std::pair<NRaceData::SHitData const * const,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > > >,0> >::_Find_lower_bound<NRaceData::SHitData const *>

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00472	8b 45 b4	 mov	 eax, DWORD PTR __Loc$15[ebp+8]
  00475	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00479	0f 85 7e 00 00
	00		 jne	 $LN611@NormalAtta
  0047f	3b 78 10	 cmp	 edi, DWORD PTR [eax+16]
  00482	72 79		 jb	 SHORT $LN611@NormalAtta
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 404  : 						if (itHitData == m_HitDataMap.end())

  00484	8b 4d a0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00487	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00489	74 72		 je	 SHORT $LN611@NormalAtta
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  0048b	8b 45 b8	 mov	 eax, DWORD PTR _rVictim$GSCopy$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 415  : 							itHitData->second.insert(std::make_pair(&rVictim, GetLocalTime()+pad->fInvisibleTime));

  0048e	8b 4d bc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00491	89 45 88	 mov	 DWORD PTR $T10[ebp], eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 415  : 							itHitData->second.insert(std::make_pair(&rVictim, GetLocalTime()+pad->fInvisibleTime));

  00494	e8 00 00 00 00	 call	 ?GetLocalTime@CGraphicThingInstance@@QAEMXZ ; CGraphicThingInstance::GetLocalTime
  00499	8b 45 a8	 mov	 eax, DWORD PTR _pad$1$[ebp]
  0049c	8b 7d b4	 mov	 edi, DWORD PTR __Loc$15[ebp+8]
  0049f	d8 40 08	 fadd	 DWORD PTR [eax+8]
  004a2	8d 45 88	 lea	 eax, DWORD PTR $T10[ebp]
  004a5	50		 push	 eax
  004a6	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR $T6[ebp]
  004ac	50		 push	 eax
  004ad	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  004b0	d9 5d 8c	 fstp	 DWORD PTR $T10[ebp+4]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 415  : 							itHitData->second.insert(std::make_pair(&rVictim, GetLocalTime()+pad->fInvisibleTime));

  004b3	e8 00 00 00 00	 call	 ??$insert@U?$pair@PAVCActorInstance@@M@std@@$0A@@?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z ; std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > >::insert<std::pair<CActorInstance *,float>,0>

; 416  : 							//itHitData->second.insert(std::make_pair(&rVictim, GetLocalTime()+HIT_COOL_TIME));
; 417  : 
; 418  : 							//Tracef(" ----------- Next Hit : %d\n", itHitData->second.size());
; 419  : 
; 420  : 							int iCurrentHitCount = itHitData->second.size();
; 421  : 							if (NRaceData::MOTION_TYPE_COMBO == pad->iMotionType || NRaceData::MOTION_TYPE_NORMAL == pad->iMotionType)

  004b8	8b 55 a8	 mov	 edx, DWORD PTR _pad$1$[ebp]
  004bb	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  004be	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  004c1	83 f9 02	 cmp	 ecx, 2
  004c4	74 2d		 je	 SHORT $LN28@NormalAtta
  004c6	83 f9 01	 cmp	 ecx, 1
  004c9	74 28		 je	 SHORT $LN28@NormalAtta

; 424  : 								{
; 425  : 									//Tracef(" Type NORMAL :: Overflow - Can't process, skip\n");
; 426  : 									return FALSE;
; 427  : 								}
; 428  : 							}
; 429  : 							else
; 430  : 							{
; 431  : 								if (iCurrentHitCount > pad->iHitLimitCount)

  004cb	3b 42 14	 cmp	 eax, DWORD PTR [edx+20]
  004ce	0f 8e 29 02 00
	00		 jle	 $LN29@NormalAtta
$LN621@NormalAtta:

; 449  : 					}
; 450  : 				}
; 451  : 			}
; 452  : 		}
; 453  : 	}
; 454  : 
; 455  : 	return FALSE;

  004d4	33 c0		 xor	 eax, eax
$LN1@NormalAtta:

; 456  : }

  004d6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  004d9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  004e0	59		 pop	 ecx
  004e1	5f		 pop	 edi
  004e2	5e		 pop	 esi
  004e3	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004e6	33 cd		 xor	 ecx, ebp
  004e8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004ed	8b e5		 mov	 esp, ebp
  004ef	5d		 pop	 ebp
  004f0	c2 04 00	 ret	 4
$LN28@NormalAtta:

; 422  : 							{
; 423  : 								if (iCurrentHitCount > 16)

  004f3	83 f8 10	 cmp	 eax, 16			; 00000010H
  004f6	7f dc		 jg	 SHORT $LN621@NormalAtta
  004f8	e9 00 02 00 00	 jmp	 $LN29@NormalAtta
$LN611@NormalAtta:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  004fd	6a 18		 push	 24			; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 437  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  004ff	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _HittedInstanceMap$17[ebp], 0
  00506	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _HittedInstanceMap$17[ebp+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  0050d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00512	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 347  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  00515	89 00		 mov	 DWORD PTR [eax], eax

; 348  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  00517	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 349  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  0051a	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 350  :         _Pnode->_Color = _Black;

  0051d	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1943 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  00523	89 45 c0	 mov	 DWORD PTR _HittedInstanceMap$17[ebp], eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 407  : 							HittedInstanceMap.insert(std::make_pair(&rVictim, GetLocalTime()+pad->fInvisibleTime));

  00526	8b 4d bc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00529	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00530	e8 00 00 00 00	 call	 ?GetLocalTime@CGraphicThingInstance@@QAEMXZ ; CGraphicThingInstance::GetLocalTime
  00535	8b 45 a8	 mov	 eax, DWORD PTR _pad$1$[ebp]
  00538	8d 4d c0	 lea	 ecx, DWORD PTR _HittedInstanceMap$17[ebp]
  0053b	d8 40 08	 fadd	 DWORD PTR [eax+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  0053e	8b 45 b8	 mov	 eax, DWORD PTR _rVictim$GSCopy$1$[ebp]
  00541	89 85 78 ff ff
	ff		 mov	 DWORD PTR $T7[ebp], eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 407  : 							HittedInstanceMap.insert(std::make_pair(&rVictim, GetLocalTime()+pad->fInvisibleTime));

  00547	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
  0054d	50		 push	 eax
  0054e	8d 45 88	 lea	 eax, DWORD PTR $T11[ebp]
  00551	d9 5d 8c	 fstp	 DWORD PTR $T12[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00554	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR $T12[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 407  : 							HittedInstanceMap.insert(std::make_pair(&rVictim, GetLocalTime()+pad->fInvisibleTime));

  00559	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  0055a	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR $T7[ebp+4], xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 407  : 							HittedInstanceMap.insert(std::make_pair(&rVictim, GetLocalTime()+pad->fInvisibleTime));

  00562	e8 00 00 00 00	 call	 ??$insert@U?$pair@PAVCActorInstance@@M@std@@$0A@@?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z ; std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > >::insert<std::pair<CActorInstance *,float>,0>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 767  :     _Tree_head_scoped_ptr(_Alnode& _Al_, _Scary_val& _Mycont_) : _Al(_Al_), _Mycont(_STD addressof(_Mycont_)) {

  00567	8d 45 b0	 lea	 eax, DWORD PTR $T16[ebp+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  0056a	89 7d ac	 mov	 DWORD PTR $T16[ebp], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  0056d	6a 18		 push	 24			; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 437  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  0056f	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR $T16[ebp+4], 0
  00576	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR $T16[ebp+8], 0

; 767  :     _Tree_head_scoped_ptr(_Alnode& _Al_, _Scary_val& _Mycont_) : _Al(_Al_), _Mycont(_STD addressof(_Mycont_)) {

  0057d	89 45 88	 mov	 DWORD PTR __Sentinel$9[ebp], eax
  00580	89 45 8c	 mov	 DWORD PTR __Sentinel$9[ebp+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  00583	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00588	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 347  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  0058b	89 00		 mov	 DWORD PTR [eax], eax

; 348  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  0058d	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 349  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  00590	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 350  :         _Pnode->_Color = _Black;

  00593	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 768  :         _Mycont->_Myhead = _Alnode::value_type::_Buyheadnode(_Al);

  00599	89 45 b0	 mov	 DWORD PTR $T16[ebp+4], eax

; 1640 :         _Scary->_Myhead->_Parent = _Copy_nodes<_Strat>(_Right_scary->_Myhead->_Parent, _Scary->_Myhead);

  0059c	50		 push	 eax
  0059d	8b 45 c0	 mov	 eax, DWORD PTR _HittedInstanceMap$17[ebp]
  005a0	8d 4d b0	 lea	 ecx, DWORD PTR $T16[ebp+4]

; 898  :         _Tree_head_scoped_ptr<_Alnode, _Scary_val> _Sentinel(_Getal(), *_Scary);

  005a3	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 1640 :         _Scary->_Myhead->_Parent = _Copy_nodes<_Strat>(_Right_scary->_Myhead->_Parent, _Scary->_Myhead);

  005a7	ff 70 04	 push	 DWORD PTR [eax+4]
  005aa	e8 00 00 00 00	 call	 ??$_Copy_nodes@$0A@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@PAU21@0@Z ; std::_Tree<std::_Tmap_traits<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> >,0> >::_Copy_nodes<0>
  005af	8b 4d b0	 mov	 ecx, DWORD PTR $T16[ebp+4]
  005b2	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1641 :         _Scary->_Mysize          = _Right_scary->_Mysize;
; 1642 :         if (!_Scary->_Myhead->_Parent->_Isnil) { // nonempty tree, look for new smallest and largest

  005b5	8b 7d b0	 mov	 edi, DWORD PTR $T16[ebp+4]
  005b8	8b 45 c4	 mov	 eax, DWORD PTR _HittedInstanceMap$17[ebp+4]
  005bb	89 45 b4	 mov	 DWORD PTR $T16[ebp+8], eax
  005be	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  005c1	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  005c5	75 39		 jne	 SHORT $LN313@NormalAtta

; 453  :         while (!_Pnode->_Left->_Isnil) {

  005c7	8b 0a		 mov	 ecx, DWORD PTR [edx]
  005c9	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  005cd	75 0d		 jne	 SHORT $LN318@NormalAtta
  005cf	90		 npad	 1
$LL317@NormalAtta:
  005d0	8b 01		 mov	 eax, DWORD PTR [ecx]

; 454  :             _Pnode = _Pnode->_Left;

  005d2	8b d1		 mov	 edx, ecx
  005d4	8b c8		 mov	 ecx, eax
  005d6	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  005da	74 f4		 je	 SHORT $LL317@NormalAtta
$LN318@NormalAtta:

; 1643 :             _Scary->_Myhead->_Left  = _Scary_val::_Min(_Scary->_Myhead->_Parent);

  005dc	89 17		 mov	 DWORD PTR [edi], edx

; 1644 :             _Scary->_Myhead->_Right = _Scary_val::_Max(_Scary->_Myhead->_Parent);

  005de	8b 55 b0	 mov	 edx, DWORD PTR $T16[ebp+4]
  005e1	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]

; 445  :         while (!_Pnode->_Right->_Isnil) {

  005e4	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  005e7	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  005eb	75 0e		 jne	 SHORT $LN322@NormalAtta
  005ed	0f 1f 00	 npad	 3
$LL321@NormalAtta:

; 446  :             _Pnode = _Pnode->_Right;

  005f0	8b c8		 mov	 ecx, eax
  005f2	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  005f5	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  005f9	74 f5		 je	 SHORT $LL321@NormalAtta
$LN322@NormalAtta:

; 1644 :             _Scary->_Myhead->_Right = _Scary_val::_Max(_Scary->_Myhead->_Parent);

  005fb	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1645 :         } else { // empty tree, just tidy head pointers

  005fe	eb 08		 jmp	 SHORT $LN314@NormalAtta
$LN313@NormalAtta:

; 1646 :             _Scary->_Myhead->_Left  = _Scary->_Myhead;

  00600	89 3f		 mov	 DWORD PTR [edi], edi

; 1647 :             _Scary->_Myhead->_Right = _Scary->_Myhead;

  00602	8b 45 b0	 mov	 eax, DWORD PTR $T16[ebp+4]
  00605	89 40 08	 mov	 DWORD PTR [eax+8], eax
$LN314@NormalAtta:

; 1002 :             _Loc                = _Find_lower_bound(_Keyval);

  00608	8b 7d a0	 mov	 edi, DWORD PTR _this$1$[ebp]
  0060b	8d 45 ac	 lea	 eax, DWORD PTR $T16[ebp]
  0060e	50		 push	 eax
  0060f	8d 45 84	 lea	 eax, DWORD PTR $T8[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 409  : 							m_HitDataMap.insert(make_pair(&c_rHitData, HittedInstanceMap));

  00612	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1002 :             _Loc                = _Find_lower_bound(_Keyval);

  00616	50		 push	 eax
  00617	8b cf		 mov	 ecx, edi
  00619	e8 00 00 00 00	 call	 ??$_Find_lower_bound@PBUSHitData@NRaceData@@@?$_Tree@V?$_Tmap_traits@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@U?$less@PBUSHitData@NRaceData@@@4@V?$allocator@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@1@ABQBUSHitData@NRaceData@@@Z ; std::_Tree<std::_Tmap_traits<NRaceData::SHitData const *,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > >,std::less<NRaceData::SHitData const *>,std::allocator<std::pair<NRaceData::SHitData const * const,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > > >,0> >::_Find_lower_bound<NRaceData::SHitData const *>
  0061e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00621	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00625	66 0f d6 85 68
	ff ff ff	 movq	 QWORD PTR __Loc$5[ebp], xmm0

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0062d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00631	75 0c		 jne	 SHORT $LN610@NormalAtta
  00633	8b 45 ac	 mov	 eax, DWORD PTR $T16[ebp]
  00636	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  00639	0f 83 a1 00 00
	00		 jae	 $LN262@NormalAtta
$LN610@NormalAtta:

; 1631 :         if (max_size() == _Get_scary()->_Mysize) {

  0063f	81 7f 04 49 92
	24 09		 cmp	 DWORD PTR [edi+4], 153391689 ; 09249249H
  00646	0f 84 8d 01 00
	00		 je	 $LN628@NormalAtta

; 1008 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  0064c	8b 07		 mov	 eax, DWORD PTR [edi]
  0064e	89 45 8c	 mov	 DWORD PTR __Myhead$1$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1144 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00651	89 7d 98	 mov	 DWORD PTR $T14[ebp], edi

; 87   :         return ::operator new(_Bytes);

  00654	6a 1c		 push	 28			; 0000001cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00656	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1151 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0065a	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR $T14[ebp+4], 0

; 87   :         return ::operator new(_Bytes);

  00661	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 1152 :         _Ptr = _Al.allocate(1);

  00666	89 45 9c	 mov	 DWORD PTR $T14[ebp+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 270  :         : first(_STD forward<_Other1>(_Right.first)), second(_STD forward<_Other2>(_Right.second)) {}

  00669	8b 4d ac	 mov	 ecx, DWORD PTR $T16[ebp]
  0066c	8d 78 14	 lea	 edi, DWORD PTR [eax+20]
  0066f	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00672	89 bd 7c ff ff
	ff		 mov	 DWORD PTR _this$[ebp], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  00678	6a 18		 push	 24			; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 806  :         : _Tree_temp_node_alloc<_Alnode>(_Al_) {

  0067a	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4

; 437  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  0067e	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00684	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  0068b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00690	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 347  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  00693	89 00		 mov	 DWORD PTR [eax], eax

; 348  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  00695	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 349  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  00698	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 350  :         _Pnode->_Color = _Black;

  0069b	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1943 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  006a1	89 07		 mov	 DWORD PTR [edi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 100  :     _Left    = _STD move(_Right);

  006a3	8b 4d b0	 mov	 ecx, DWORD PTR $T16[ebp+4]
  006a6	89 0f		 mov	 DWORD PTR [edi], ecx

; 101  :     _Right   = _STD move(_Tmp);

  006a8	89 45 b0	 mov	 DWORD PTR $T16[ebp+4], eax

; 99   :     _Ty _Tmp = _STD move(_Left);

  006ab	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]

; 100  :     _Left    = _STD move(_Right);

  006ae	8b 45 b4	 mov	 eax, DWORD PTR $T16[ebp+8]
  006b1	89 47 04	 mov	 DWORD PTR [edi+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  006b4	8b 45 9c	 mov	 eax, DWORD PTR $T14[ebp+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 101  :     _Right   = _STD move(_Tmp);

  006b7	89 4d b4	 mov	 DWORD PTR $T16[ebp+8], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  006ba	8b 4d 8c	 mov	 ecx, DWORD PTR __Myhead$1$[ebp]

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  006bd	50		 push	 eax
  006be	ff b5 6c ff ff
	ff		 push	 DWORD PTR __Loc$5[ebp+4]

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  006c4	89 08		 mov	 DWORD PTR [eax], ecx

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  006c6	ff b5 68 ff ff
	ff		 push	 DWORD PTR __Loc$5[ebp]

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  006cc	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  006cf	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  006d2	8b 4d a0	 mov	 ecx, DWORD PTR _this$1$[ebp]

; 811  :         this->_Ptr->_Color = _Red;

  006d5	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  006db	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<NRaceData::SHitData const * const,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > > > >::_Insert_node
$LN262@NormalAtta:

; 1082 :         _Scary->_Erase_head(_Getal());

  006e0	8d 45 b0	 lea	 eax, DWORD PTR $T16[ebp+4]
  006e3	50		 push	 eax
  006e4	8b c8		 mov	 ecx, eax
  006e6	e8 00 00 00 00	 call	 ??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >
  006eb	8d 45 c0	 lea	 eax, DWORD PTR _HittedInstanceMap$17[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 412  : 						}

  006ee	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1082 :         _Scary->_Erase_head(_Getal());

  006f5	50		 push	 eax
  006f6	8b c8		 mov	 ecx, eax
  006f8	e8 00 00 00 00	 call	 ??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >
$LN29@NormalAtta:
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 439  : 						D3DXVECTOR3 v3HitPosition = (GetPosition() + rVictim.GetPosition()) *0.5f;

  006fd	8b 4d b8	 mov	 ecx, DWORD PTR _rVictim$GSCopy$1$[ebp]
  00700	e8 00 00 00 00	 call	 ?GetPosition@CGraphicObjectInstance@@QBEABUD3DXVECTOR3@@XZ ; CGraphicObjectInstance::GetPosition
  00705	8b 4d bc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00708	8b f8		 mov	 edi, eax
  0070a	e8 00 00 00 00	 call	 ?GetPosition@CGraphicObjectInstance@@QBEABUD3DXVECTOR3@@XZ ; CGraphicObjectInstance::GetPosition
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0070f	f3 0f 10 67 04	 movss	 xmm4, DWORD PTR [edi+4]
  00714	f3 0f 10 57 08	 movss	 xmm2, DWORD PTR [edi+8]
  00719	f3 0f 10 07	 movss	 xmm0, DWORD PTR [edi]
  0071d	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  00722	f3 0f 10 58 08	 movss	 xmm3, DWORD PTR [eax+8]
  00727	f3 0f 58 e1	 addss	 xmm4, xmm1
  0072b	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  0072f	f3 0f 10 2d 00
	00 00 00	 movss	 xmm5, DWORD PTR __real@3f000000

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00737	f3 0f 58 da	 addss	 xmm3, xmm2
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 442  : 						if (IS_HUGE_RACE(rVictim.GetRace()))

  0073b	8b 7d b8	 mov	 edi, DWORD PTR _rVictim$GSCopy$1$[ebp]
  0073e	8b cf		 mov	 ecx, edi
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00740	f3 0f 59 e5	 mulss	 xmm4, xmm5
  00744	f3 0f 59 c5	 mulss	 xmm0, xmm5
  00748	f3 0f 59 dd	 mulss	 xmm3, xmm5

; 180  :     x = fx;

  0074c	f3 0f 11 45 e4	 movss	 DWORD PTR _v3HitPosition$22[ebp], xmm0

; 181  :     y = fy;

  00751	f3 0f 11 65 e8	 movss	 DWORD PTR _v3HitPosition$22[ebp+4], xmm4

; 182  :     z = fz;

  00756	f3 0f 11 5d ec	 movss	 DWORD PTR _v3HitPosition$22[ebp+8], xmm3
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 442  : 						if (IS_HUGE_RACE(rVictim.GetRace()))

  0075b	e8 00 00 00 00	 call	 ?GetRace@CActorInstance@@QAEKXZ ; CActorInstance::GetRace
  00760	50		 push	 eax
  00761	e8 00 00 00 00	 call	 ?IS_HUGE_RACE@@YA_NI@Z	; IS_HUGE_RACE
  00766	83 c4 04	 add	 esp, 4
  00769	84 c0		 test	 al, al
  0076b	74 47		 je	 SHORT $LN31@NormalAtta

; 444  : 							v3HitPosition = (GetPosition() + sub.v3Position) * 0.5f;

  0076d	8b 4d bc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00770	e8 00 00 00 00	 call	 ?GetPosition@CGraphicObjectInstance@@QBEABUD3DXVECTOR3@@XZ ; CGraphicObjectInstance::GetPosition
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00775	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f000000

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0077d	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  00782	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [eax+8]
  00787	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0078b	f3 0f 58 06	 addss	 xmm0, DWORD PTR [esi]
  0078f	f3 0f 58 4e 04	 addss	 xmm1, DWORD PTR [esi+4]
  00794	f3 0f 58 56 08	 addss	 xmm2, DWORD PTR [esi+8]

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00799	f3 0f 59 c3	 mulss	 xmm0, xmm3
  0079d	f3 0f 59 cb	 mulss	 xmm1, xmm3
  007a1	f3 0f 59 d3	 mulss	 xmm2, xmm3
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 444  : 							v3HitPosition = (GetPosition() + sub.v3Position) * 0.5f;

  007a5	f3 0f 11 45 e4	 movss	 DWORD PTR _v3HitPosition$22[ebp], xmm0
  007aa	f3 0f 11 4d e8	 movss	 DWORD PTR _v3HitPosition$22[ebp+4], xmm1
  007af	f3 0f 11 55 ec	 movss	 DWORD PTR _v3HitPosition$22[ebp+8], xmm2
$LN31@NormalAtta:

; 445  : 						}
; 446  : 
; 447  : 						__ProcessDataAttackSuccess(*pad, rVictim, v3HitPosition, m_kCurMotNode.uSkill);

  007b4	8b 45 bc	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  007b7	8d 4d e4	 lea	 ecx, DWORD PTR _v3HitPosition$22[ebp]
  007ba	6a 01		 push	 1
  007bc	ff b0 30 03 00
	00		 push	 DWORD PTR [eax+816]
  007c2	51		 push	 ecx
  007c3	8b 4d a8	 mov	 ecx, DWORD PTR _pad$1$[ebp]
  007c6	57		 push	 edi
  007c7	51		 push	 ecx
  007c8	8b c8		 mov	 ecx, eax
  007ca	e8 00 00 00 00	 call	 ?__ProcessDataAttackSuccess@CActorInstance@@IAEXABUSAttackData@NRaceData@@AAV1@ABUD3DXVECTOR3@@IH@Z ; CActorInstance::__ProcessDataAttackSuccess

; 448  : 						return TRUE;

  007cf	b8 01 00 00 00	 mov	 eax, 1
  007d4	e9 fd fc ff ff	 jmp	 $LN1@NormalAtta
$LN628@NormalAtta:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1632 :             _Throw_tree_length_error();

  007d9	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN625@NormalAtta:
  007de	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?__NormalAttackProcess@CActorInstance@@QAEHAAV1@@Z$0:
  00000	8d 4d c0	 lea	 ecx, DWORD PTR _HittedInstanceMap$17[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@QAE@XZ
__unwindfunclet$?__NormalAttackProcess@CActorInstance@@QAEHAAV1@@Z$17:
  00008	8d 4d 88	 lea	 ecx, DWORD PTR __Sentinel$9[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Tree_head_scoped_ptr@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@2@@std@@QAE@XZ ; std::_Tree_head_scoped_ptr<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > > >::~_Tree_head_scoped_ptr<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > > >
__unwindfunclet$?__NormalAttackProcess@CActorInstance@@QAEHAAV1@@Z$1:
  00010	8d 4d ac	 lea	 ecx, DWORD PTR $T16[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@QAE@XZ
__unwindfunclet$?__NormalAttackProcess@CActorInstance@@QAEHAAV1@@Z$7:
  00018	8d 4d 98	 lea	 ecx, DWORD PTR $T14[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<NRaceData::SHitData const * const,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<NRaceData::SHitData const * const,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > >,void *> > >
__unwindfunclet$?__NormalAttackProcess@CActorInstance@@QAEHAAV1@@Z$6:
  00020	8d 4d 98	 lea	 ecx, DWORD PTR $T14[ebp]
  00023	e9 00 00 00 00	 jmp	 ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ
  00028	cc		 int	 3
  00029	cc		 int	 3
  0002a	cc		 int	 3
  0002b	cc		 int	 3
  0002c	cc		 int	 3
__ehhandler$?__NormalAttackProcess@CActorInstance@@QAEHAAV1@@Z:
  0002d	90		 npad	 1
  0002e	90		 npad	 1
  0002f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00033	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00036	8b 8a 68 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-152]
  0003c	33 c8		 xor	 ecx, eax
  0003e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00043	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00046	33 c8		 xor	 ecx, eax
  00048	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?__NormalAttackProcess@CActorInstance@@QAEHAAV1@@Z
  00052	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?__NormalAttackProcess@CActorInstance@@QAEHAAV1@@Z ENDP	; CActorInstance::__NormalAttackProcess
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
;	COMDAT ?__SplashAttackProcess@CActorInstance@@QAEHAAV1@@Z
_TEXT	SEGMENT
__Loc$1 = -36						; size = 12
$T2 = -32						; size = 8
$T3 = -24						; size = 8
$T4 = -20						; size = 4
_v3HitPosition$ = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_rVictim$ = 8						; size = 4
?__SplashAttackProcess@CActorInstance@@QAEHAAV1@@Z PROC	; CActorInstance::__SplashAttackProcess, COMDAT
; _this$ = ecx

; 265  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	8b 7d 08	 mov	 edi, DWORD PTR _rVictim$[ebp]
  00016	8b f1		 mov	 esi, ecx

; 266  : 	D3DXVECTOR3 v3Distance(rVictim.m_x - m_x, rVictim.m_z - m_z, rVictim.m_z - m_z);

  00018	f3 0f 10 8f 68
	04 00 00	 movss	 xmm1, DWORD PTR [edi+1128]
  00020	f3 0f 5c 8e 68
	04 00 00	 subss	 xmm1, DWORD PTR [esi+1128]
  00028	f3 0f 10 87 70
	04 00 00	 movss	 xmm0, DWORD PTR [edi+1136]
  00030	f3 0f 5c 86 70
	04 00 00	 subss	 xmm0, DWORD PTR [esi+1136]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00038	f3 0f 59 c9	 mulss	 xmm1, xmm1

; 182  :     z = fz;

  0003c	f3 0f 59 c0	 mulss	 xmm0, xmm0

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00040	f3 0f 58 c8	 addss	 xmm1, xmm0
  00044	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 268  : 	if (fDistance >= 1000.0f*1000.0f)

  00048	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@49742400
  0004f	0f 83 f4 00 00
	00		 jae	 $LN8@SplashAtta

; 269  : 		return FALSE;
; 270  : 
; 271  : 	// Check Distance
; 272  : 	if (!__IsInSplashTime())

  00055	e8 00 00 00 00	 call	 ?__IsInSplashTime@CActorInstance@@IAE_NXZ ; CActorInstance::__IsInSplashTime
  0005a	84 c0		 test	 al, al
  0005c	0f 84 e7 00 00
	00		 je	 $LN8@SplashAtta

; 276  : 	const NRaceData::TAttackData & c_rAttackData = c_pAttackingEvent->AttackData;

  00062	8b 9e 58 03 00
	00		 mov	 ebx, DWORD PTR [esi+856]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00068	8d 4d ec	 lea	 ecx, DWORD PTR $T4[ebp]
  0006b	51		 push	 ecx
  0006c	8d 4d dc	 lea	 ecx, DWORD PTR __Loc$1[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 279  : 	if (rHittedInstanceMap.end() != rHittedInstanceMap.find(&rVictim))

  0006f	89 7d ec	 mov	 DWORD PTR $T4[ebp], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00072	51		 push	 ecx
  00073	8d 8e 68 03 00
	00		 lea	 ecx, DWORD PTR [esi+872]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 276  : 	const NRaceData::TAttackData & c_rAttackData = c_pAttackingEvent->AttackData;

  00079	83 c3 28	 add	 ebx, 40			; 00000028H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0007c	e8 00 00 00 00	 call	 ??$_Find_lower_bound@PAVCActorInstance@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@ABQAVCActorInstance@@@Z ; std::_Tree<std::_Tmap_traits<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> >,0> >::_Find_lower_bound<CActorInstance *>

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00081	8b 45 e4	 mov	 eax, DWORD PTR __Loc$1[ebp+8]
  00084	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00088	75 11		 jne	 SHORT $LN4@SplashAtta
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  0008a	3b 78 10	 cmp	 edi, DWORD PTR [eax+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0008d	72 0c		 jb	 SHORT $LN4@SplashAtta

; 233  :         return this->_Ptr == _Right._Ptr;

  0008f	39 86 68 03 00
	00		 cmp	 DWORD PTR [esi+872], eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 279  : 	if (rHittedInstanceMap.end() != rHittedInstanceMap.find(&rVictim))

  00095	0f 85 ae 00 00
	00		 jne	 $LN8@SplashAtta
$LN4@SplashAtta:

; 280  : 	{
; 281  : 		return FALSE;
; 282  : 	}
; 283  : 
; 284  : 	if (NRaceData::ATTACK_TYPE_SNIPE == c_rAttackData.iAttackType)

  0009b	83 3b 01	 cmp	 DWORD PTR [ebx], 1
  0009e	75 1b		 jne	 SHORT $LN7@SplashAtta

; 285  : 	{
; 286  : 		if (__IsFlyTargetPC())

  000a0	8b ce		 mov	 ecx, esi
  000a2	e8 00 00 00 00	 call	 ?__IsFlyTargetPC@CActorInstance@@IAE_NXZ ; CActorInstance::__IsFlyTargetPC
  000a7	84 c0		 test	 al, al
  000a9	74 10		 je	 SHORT $LN7@SplashAtta

; 287  : 			if (!__IsSameFlyTarget(&rVictim))

  000ab	57		 push	 edi
  000ac	8b ce		 mov	 ecx, esi
  000ae	e8 00 00 00 00	 call	 ?__IsSameFlyTarget@CActorInstance@@IAE_NPAV1@@Z ; CActorInstance::__IsSameFlyTarget
  000b3	84 c0		 test	 al, al
  000b5	0f 84 8e 00 00
	00		 je	 $LN8@SplashAtta
$LN7@SplashAtta:

; 288  : 				return FALSE;
; 289  : 
; 290  : 
; 291  : 	}
; 292  : 
; 293  : 	D3DXVECTOR3 v3HitPosition;
; 294  : 	if (rVictim.CheckCollisionDetection(&m_kSplashArea.SphereInstanceVector, &v3HitPosition))

  000bb	8d 45 f0	 lea	 eax, DWORD PTR _v3HitPosition$[ebp]
  000be	8b cf		 mov	 ecx, edi
  000c0	50		 push	 eax
  000c1	8d 86 5c 03 00
	00		 lea	 eax, DWORD PTR [esi+860]
  000c7	50		 push	 eax
  000c8	e8 00 00 00 00	 call	 ?CheckCollisionDetection@CActorInstance@@QAE_NPBV?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@PAUD3DXVECTOR3@@@Z ; CActorInstance::CheckCollisionDetection
  000cd	84 c0		 test	 al, al
  000cf	74 78		 je	 SHORT $LN8@SplashAtta

; 296  : 		rHittedInstanceMap.insert(std::make_pair(&rVictim, GetLocalTime()+c_rAttackData.fInvisibleTime));

  000d1	8b ce		 mov	 ecx, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  000d3	89 7d e8	 mov	 DWORD PTR $T3[ebp], edi
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 296  : 		rHittedInstanceMap.insert(std::make_pair(&rVictim, GetLocalTime()+c_rAttackData.fInvisibleTime));

  000d6	e8 00 00 00 00	 call	 ?GetLocalTime@CGraphicThingInstance@@QAEMXZ ; CGraphicThingInstance::GetLocalTime
  000db	d8 43 08	 fadd	 DWORD PTR [ebx+8]
  000de	8d 45 e8	 lea	 eax, DWORD PTR $T3[ebp]
  000e1	50		 push	 eax
  000e2	8d 45 e0	 lea	 eax, DWORD PTR $T2[ebp]
  000e5	50		 push	 eax
  000e6	8d 8e 68 03 00
	00		 lea	 ecx, DWORD PTR [esi+872]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  000ec	d9 5d ec	 fstp	 DWORD PTR $T3[ebp+4]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 296  : 		rHittedInstanceMap.insert(std::make_pair(&rVictim, GetLocalTime()+c_rAttackData.fInvisibleTime));

  000ef	e8 00 00 00 00	 call	 ??$insert@U?$pair@PAVCActorInstance@@M@std@@$0A@@?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z ; std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > >::insert<std::pair<CActorInstance *,float>,0>

; 297  : 
; 298  : 		int iCurrentHitCount = rHittedInstanceMap.size();
; 299  : 		int iMaxHitCount = (0 == c_rAttackData.iHitLimitCount ? 16 : c_rAttackData.iHitLimitCount);

  000f4	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  000f7	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000fc	85 c0		 test	 eax, eax
  000fe	0f 44 c1	 cmove	 eax, ecx

; 300  : 		//Tracef(" ------------------- Splash Hit : %d\n", iCurrentHitCount);
; 301  : 
; 302  : 		if (iCurrentHitCount > iMaxHitCount)

  00101	39 86 6c 03 00
	00		 cmp	 DWORD PTR [esi+876], eax
  00107	7f 40		 jg	 SHORT $LN8@SplashAtta

; 303  : 		{
; 304  : 			//Tracef(" ------------------- OVER FLOW :: Splash Hit Count : %d\n", iCurrentHitCount);
; 305  : 			return FALSE;
; 306  : 		}
; 307  : 
; 308  : 		NEW_SetAtkPixelPosition(NEW_GetCurPixelPositionRef());

  00109	8b ce		 mov	 ecx, esi
  0010b	e8 00 00 00 00	 call	 ?NEW_GetCurPixelPositionRef@CActorInstance@@QAEABUD3DXVECTOR3@@XZ ; CActorInstance::NEW_GetCurPixelPositionRef
  00110	50		 push	 eax
  00111	8b ce		 mov	 ecx, esi
  00113	e8 00 00 00 00	 call	 ?NEW_SetAtkPixelPosition@CActorInstance@@QAEXABUD3DXVECTOR3@@@Z ; CActorInstance::NEW_SetAtkPixelPosition

; 309  : 		__ProcessDataAttackSuccess(c_rAttackData, rVictim, v3HitPosition, m_kSplashArea.uSkill, m_kSplashArea.isEnableHitProcess);

  00118	ff b6 48 03 00
	00		 push	 DWORD PTR [esi+840]
  0011e	8d 45 f0	 lea	 eax, DWORD PTR _v3HitPosition$[ebp]
  00121	8b ce		 mov	 ecx, esi
  00123	ff b6 4c 03 00
	00		 push	 DWORD PTR [esi+844]
  00129	50		 push	 eax
  0012a	57		 push	 edi
  0012b	53		 push	 ebx
  0012c	e8 00 00 00 00	 call	 ?__ProcessDataAttackSuccess@CActorInstance@@IAEXABUSAttackData@NRaceData@@AAV1@ABUD3DXVECTOR3@@IH@Z ; CActorInstance::__ProcessDataAttackSuccess
  00131	5f		 pop	 edi

; 310  : 		return TRUE;
; 311  : 	}
; 312  : 
; 313  : 	return FALSE;
; 314  : }

  00132	5e		 pop	 esi
  00133	b8 01 00 00 00	 mov	 eax, 1
  00138	5b		 pop	 ebx
  00139	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0013c	33 cd		 xor	 ecx, ebp
  0013e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00143	8b e5		 mov	 esp, ebp
  00145	5d		 pop	 ebp
  00146	c2 04 00	 ret	 4
$LN8@SplashAtta:
  00149	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0014c	33 c0		 xor	 eax, eax
  0014e	5f		 pop	 edi
  0014f	5e		 pop	 esi
  00150	33 cd		 xor	 ecx, ebp
  00152	5b		 pop	 ebx
  00153	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00158	8b e5		 mov	 esp, ebp
  0015a	5d		 pop	 ebp
  0015b	c2 04 00	 ret	 4
?__SplashAttackProcess@CActorInstance@@QAEHAAV1@@Z ENDP	; CActorInstance::__SplashAttackProcess
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
;	COMDAT ?AttackingProcess@CActorInstance@@QAEHAAV1@@Z
_TEXT	SEGMENT
_rVictim$ = 8						; size = 4
?AttackingProcess@CActorInstance@@QAEHAAV1@@Z PROC	; CActorInstance::AttackingProcess, COMDAT
; _this$ = ecx

; 459  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 460  : 	if (rVictim.__isInvisible())

  00004	8b 75 08	 mov	 esi, DWORD PTR _rVictim$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	8b ce		 mov	 ecx, esi
  0000c	e8 00 00 00 00	 call	 ?__isInvisible@CActorInstance@@IAE_NXZ ; CActorInstance::__isInvisible
  00011	84 c0		 test	 al, al
  00013	75 2b		 jne	 SHORT $LN4@AttackingP

; 461  : 		return FALSE;
; 462  : 
; 463  : 	if (__SplashAttackProcess(rVictim))

  00015	56		 push	 esi
  00016	8b cf		 mov	 ecx, edi
  00018	e8 00 00 00 00	 call	 ?__SplashAttackProcess@CActorInstance@@QAEHAAV1@@Z ; CActorInstance::__SplashAttackProcess
  0001d	85 c0		 test	 eax, eax
  0001f	75 14		 jne	 SHORT $LN6@AttackingP

; 464  : 		return TRUE;
; 465  : 
; 466  : 	if (__NormalAttackProcess(rVictim))

  00021	56		 push	 esi
  00022	8b cf		 mov	 ecx, edi
  00024	e8 00 00 00 00	 call	 ?__NormalAttackProcess@CActorInstance@@QAEHAAV1@@Z ; CActorInstance::__NormalAttackProcess
  00029	f7 d8		 neg	 eax
  0002b	5f		 pop	 edi
  0002c	1b c0		 sbb	 eax, eax
  0002e	f7 d8		 neg	 eax

; 470  : }

  00030	5e		 pop	 esi
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN6@AttackingP:
  00035	5f		 pop	 edi

; 467  : 		return TRUE;

  00036	b8 01 00 00 00	 mov	 eax, 1

; 470  : }

  0003b	5e		 pop	 esi
  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
$LN4@AttackingP:
  00040	5f		 pop	 edi

; 468  : 
; 469  : 	return FALSE;

  00041	33 c0		 xor	 eax, eax

; 470  : }

  00043	5e		 pop	 esi
  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
?AttackingProcess@CActorInstance@@QAEHAAV1@@Z ENDP	; CActorInstance::AttackingProcess
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\list
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\list
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\list
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\list
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
;	COMDAT ?TestPhysicsBlendingCollision@CActorInstance@@QAEHAAV1@@Z
_TEXT	SEGMENT
_prevPosition$4$ = -112					; size = 8
_prevLastPosition$1$ = -104				; size = 8
_prevPosition$ = -96					; size = 12
_c_rVictimSphere$1$ = -84				; size = 4
_rVictim$GSCopy$1$ = -80				; size = 4
_prevPosition$1$ = -76					; size = 4
_prevPosition$2$ = -72					; size = 4
_prevPosition$3$ = -68					; size = 4
_prevPosition$5$ = -64					; size = 4
_prevLastPosition$2$ = -60				; size = 4
_this$GSCopy$1$ = -56					; size = 4
$T1 = -52						; size = 4
_i$1$ = -48						; size = 4
_c_rMainSphere$1$ = -44					; size = 4
tv1098 = -40						; size = 4
_i$1$ = -36						; size = 4
_j$1$ = -32						; size = 4
_kPDelta$ = -28						; size = 12
_kPPosLast$ = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_rVictim$ = 8						; size = 4
?TestPhysicsBlendingCollision@CActorInstance@@QAEHAAV1@@Z PROC ; CActorInstance::TestPhysicsBlendingCollision, COMDAT
; _this$ = ecx

; 473  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _rVictim$[ebp]
  00015	57		 push	 edi
  00016	8b f9		 mov	 edi, ecx
  00018	89 75 b0	 mov	 DWORD PTR _rVictim$GSCopy$1$[ebp], esi

; 474  : 	if (rVictim.IsDead())

  0001b	8b ce		 mov	 ecx, esi
  0001d	89 7d c8	 mov	 DWORD PTR _this$GSCopy$1$[ebp], edi
  00020	e8 00 00 00 00	 call	 ?IsDead@CActorInstance@@QAEHXZ ; CActorInstance::IsDead
  00025	85 c0		 test	 eax, eax
  00027	0f 85 6f 02 00
	00		 jne	 $LN129@TestPhysic

; 475  : 		return FALSE;
; 476  : 
; 477  : 	TPixelPosition kPPosLast;
; 478  : 	GetBlendingPosition( &kPPosLast );

  0002d	8d 45 f0	 lea	 eax, DWORD PTR _kPPosLast$[ebp]
  00030	8b cf		 mov	 ecx, edi
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?GetBlendingPosition@CActorInstance@@QAEXPAUD3DXVECTOR3@@@Z ; CActorInstance::GetBlendingPosition

; 479  : 
; 480  : 	D3DXVECTOR3 v3Distance = D3DXVECTOR3(rVictim.m_x - kPPosLast.x, rVictim.m_y - kPPosLast.y, rVictim.m_z - kPPosLast.z);

  00038	f3 0f 10 8e 68
	04 00 00	 movss	 xmm1, DWORD PTR [esi+1128]
  00040	f3 0f 10 96 6c
	04 00 00	 movss	 xmm2, DWORD PTR [esi+1132]
  00048	f3 0f 5c 55 f4	 subss	 xmm2, DWORD PTR _kPPosLast$[ebp+4]
  0004d	f3 0f 5c 4d f0	 subss	 xmm1, DWORD PTR _kPPosLast$[ebp]
  00052	f3 0f 10 86 70
	04 00 00	 movss	 xmm0, DWORD PTR [esi+1136]
  0005a	f3 0f 5c 45 f8	 subss	 xmm0, DWORD PTR _kPPosLast$[ebp+8]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  0005f	f3 0f 59 d2	 mulss	 xmm2, xmm2

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00063	f3 0f 59 c9	 mulss	 xmm1, xmm1
  00067	f3 0f 59 c0	 mulss	 xmm0, xmm0
  0006b	f3 0f 58 d1	 addss	 xmm2, xmm1
  0006f	f3 0f 58 d0	 addss	 xmm2, xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 482  : 	if (fDistance > 800.0f*800.0f)

  00073	0f 2f 15 00 00
	00 00		 comiss	 xmm2, DWORD PTR __real@491c4000
  0007a	0f 87 1c 02 00
	00		 ja	 $LN129@TestPhysic

; 483  : 		return FALSE;
; 484  : 
; 485  : 	TCollisionPointInstanceList * pMainList;
; 486  : 	TCollisionPointInstanceList * pVictimList;
; 487  : 	if (isAttacking() || IsWaiting())

  00080	8b cf		 mov	 ecx, edi
  00082	e8 00 00 00 00	 call	 ?isAttacking@CActorInstance@@QAEHXZ ; CActorInstance::isAttacking
  00087	85 c0		 test	 eax, eax
  00089	75 10		 jne	 SHORT $LN21@TestPhysic
  0008b	8b cf		 mov	 ecx, edi
  0008d	e8 00 00 00 00	 call	 ?IsWaiting@CActorInstance@@QAEHXZ ; CActorInstance::IsWaiting

; 491  : 	}
; 492  : 	else
; 493  : 	{
; 494  : 		pMainList = &m_BodyPointInstanceList;
; 495  : 		pVictimList = &rVictim.m_BodyPointInstanceList;

  00092	bb 38 03 00 00	 mov	 ebx, 824		; 00000338H
  00097	85 c0		 test	 eax, eax
  00099	74 05		 je	 SHORT $LN148@TestPhysic
$LN21@TestPhysic:

; 488  : 	{
; 489  : 		pMainList = &m_DefendingPointInstanceList;
; 490  : 		pVictimList = &rVictim.m_DefendingPointInstanceList;

  0009b	bb 40 03 00 00	 mov	 ebx, 832		; 00000340H
$LN148@TestPhysic:

; 496  : 	}
; 497  : 
; 498  : 	TPixelPosition kPDelta;
; 499  : 	m_PhysicsObject.GetLastPosition(&kPDelta);

  000a0	8d 45 e4	 lea	 eax, DWORD PTR _kPDelta$[ebp]
  000a3	89 5d cc	 mov	 DWORD PTR $T1[ebp], ebx
  000a6	50		 push	 eax
  000a7	8d 8f 80 03 00
	00		 lea	 ecx, DWORD PTR [edi+896]
  000ad	e8 00 00 00 00	 call	 ?GetLastPosition@CPhysicsObject@@QAEXPAUD3DXVECTOR3@@@Z ; CPhysicsObject::GetLastPosition
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\list

; 1090 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  000b2	8b 0c 1f	 mov	 ecx, DWORD PTR [edi+ebx]
  000b5	8b 04 1e	 mov	 eax, DWORD PTR [esi+ebx]

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  000b8	8b 39		 mov	 edi, DWORD PTR [ecx]
  000ba	8b 30		 mov	 esi, DWORD PTR [eax]
  000bc	3b f9		 cmp	 edi, ecx
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 506  : 	for (; itorMain != pMainList->end(); ++itorMain)

  000be	0f 84 d8 01 00
	00		 je	 $LN129@TestPhysic
  000c4	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@42480000
  000cc	8b 4d c8	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  000cf	90		 npad	 1
$LL75@TestPhysic:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\list

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  000d0	3b f0		 cmp	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 508  : 		for (; itorVictim != pVictimList->end(); ++itorVictim)

  000d2	0f 84 b9 01 00
	00		 je	 $LN2@TestPhysic
$LL144@TestPhysic:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000d8	8b 5f 18	 mov	 ebx, DWORD PTR [edi+24]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 513  : 			for (DWORD i = 0; i < c_rMainSphereVector.size(); ++i)

  000db	33 c9		 xor	 ecx, ecx
  000dd	89 4d dc	 mov	 DWORD PTR _i$1$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000e0	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  000e5	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]
  000e8	2b cb		 sub	 ecx, ebx
  000ea	f7 e9		 imul	 ecx
  000ec	03 d1		 add	 edx, ecx
  000ee	c1 fa 04	 sar	 edx, 4
  000f1	8b c2		 mov	 eax, edx
  000f3	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000f6	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 513  : 			for (DWORD i = 0; i < c_rMainSphereVector.size(); ++i)

  000f8	0f 84 7d 01 00
	00		 je	 $LN5@TestPhysic
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1868 :         auto& _My_data = _Mypair._Myval2;

  000fe	33 c0		 xor	 eax, eax
  00100	89 45 d8	 mov	 DWORD PTR tv1098[ebp], eax
$LL145@TestPhysic:
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 517  : 				prevLastPosition = c_rMainSphere.v3LastPosition;

  00103	f3 0f 7e 44 03
	0c		 movq	 xmm0, QWORD PTR [ebx+eax+12]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1889 :         return _My_data._Myfirst[_Pos];

  00109	03 d8		 add	 ebx, eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 517  : 				prevLastPosition = c_rMainSphere.v3LastPosition;

  0010b	66 0f d6 45 98	 movq	 QWORD PTR _prevLastPosition$1$[ebp], xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1889 :         return _My_data._Myfirst[_Pos];

  00110	89 5d d4	 mov	 DWORD PTR _c_rMainSphere$1$[ebp], ebx
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 518  : 				prevPosition	 = c_rMainSphere.v3Position;

  00113	f3 0f 7e 03	 movq	 xmm0, QWORD PTR [ebx]
  00117	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  0011a	66 0f d6 45 a0	 movq	 QWORD PTR _prevPosition$[ebp], xmm0

; 519  : 
; 520  : 				c_rMainSphere.v3LastPosition = prevPosition;
; 521  : 
; 522  : 				for( int i = 1; i <= nSubCheckCount; ++ i )

  0011f	f3 0f 10 4d a4	 movss	 xmm1, DWORD PTR _prevPosition$[ebp+4]
  00124	f3 0f 10 65 a0	 movss	 xmm4, DWORD PTR _prevPosition$[ebp]
  00129	66 0f d6 45 90	 movq	 QWORD PTR _prevPosition$4$[ebp], xmm0
  0012e	f3 0f 7e c0	 movq	 xmm0, xmm0
  00132	89 45 c4	 mov	 DWORD PTR _prevLastPosition$2$[ebp], eax
  00135	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00138	66 0f d6 43 0c	 movq	 QWORD PTR [ebx+12], xmm0
  0013d	89 45 a8	 mov	 DWORD PTR _prevPosition$[ebp+8], eax
  00140	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _prevPosition$[ebp+8]
  00145	89 45 c0	 mov	 DWORD PTR _prevPosition$5$[ebp], eax
  00148	89 43 14	 mov	 DWORD PTR [ebx+20], eax
  0014b	b8 01 00 00 00	 mov	 eax, 1
  00150	89 45 d0	 mov	 DWORD PTR _i$1$[ebp], eax
  00153	f3 0f 11 45 b8	 movss	 DWORD PTR _prevPosition$2$[ebp], xmm0
  00158	f3 0f 11 4d b4	 movss	 DWORD PTR _prevPosition$1$[ebp], xmm1
  0015d	f3 0f 11 65 bc	 movss	 DWORD PTR _prevPosition$3$[ebp], xmm4
$LL146@TestPhysic:

; 526  : 					for (DWORD j = 0; j < c_rVictimSphereVector.size(); ++j)

  00162	66 0f 6e d0	 movd	 xmm2, eax
  00166	33 c9		 xor	 ecx, ecx
  00168	0f 5b d2	 cvtdq2ps xmm2, xmm2
  0016b	89 4d e0	 mov	 DWORD PTR _j$1$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0016e	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 524  : 					c_rMainSphere.v3Position = prevPosition + (float)(i/(float)nSubCheckCount) * kPDelta;

  00173	f3 0f 5e d3	 divss	 xmm2, xmm3
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00177	f3 0f 10 5d e8	 movss	 xmm3, DWORD PTR _kPDelta$[ebp+4]
  0017c	f3 0f 59 da	 mulss	 xmm3, xmm2

; 180  :     x = fx;

  00180	f3 0f 58 d9	 addss	 xmm3, xmm1

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00184	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _kPDelta$[ebp+8]
  00189	f3 0f 59 ca	 mulss	 xmm1, xmm2

; 181  :     y = fy;

  0018d	f3 0f 58 c8	 addss	 xmm1, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00191	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _kPDelta$[ebp]
  00196	f3 0f 59 c2	 mulss	 xmm0, xmm2

; 182  :     z = fz;

  0019a	f3 0f 58 c4	 addss	 xmm0, xmm4
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 524  : 					c_rMainSphere.v3Position = prevPosition + (float)(i/(float)nSubCheckCount) * kPDelta;

  0019e	f3 0f 11 03	 movss	 DWORD PTR [ebx], xmm0
  001a2	f3 0f 11 5b 04	 movss	 DWORD PTR [ebx+4], xmm3
  001a7	f3 0f 11 4b 08	 movss	 DWORD PTR [ebx+8], xmm1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  001ac	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  001af	2b 4e 18	 sub	 ecx, DWORD PTR [esi+24]
  001b2	f7 e9		 imul	 ecx
  001b4	03 d1		 add	 edx, ecx
  001b6	c1 fa 04	 sar	 edx, 4
  001b9	8b c2		 mov	 eax, edx
  001bb	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001be	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 526  : 					for (DWORD j = 0; j < c_rVictimSphereVector.size(); ++j)

  001c0	74 4a		 je	 SHORT $LN11@TestPhysic
  001c2	33 db		 xor	 ebx, ebx
$LL147@TestPhysic:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1889 :         return _My_data._Myfirst[_Pos];

  001c4	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  001c7	03 c3		 add	 eax, ebx
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 530  : 						if (DetectCollisionDynamicSphereVSDynamicSphere(c_rMainSphere, c_rVictimSphere))

  001c9	50		 push	 eax
  001ca	ff 75 d4	 push	 DWORD PTR _c_rMainSphere$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1889 :         return _My_data._Myfirst[_Pos];

  001cd	89 45 ac	 mov	 DWORD PTR _c_rVictimSphere$1$[ebp], eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 530  : 						if (DetectCollisionDynamicSphereVSDynamicSphere(c_rMainSphere, c_rVictimSphere))

  001d0	e8 00 00 00 00	 call	 ?DetectCollisionDynamicSphereVSDynamicSphere@@YA_NABUCDynamicSphereInstance@@0@Z ; DetectCollisionDynamicSphereVSDynamicSphere
  001d5	83 c4 08	 add	 esp, 8
  001d8	84 c0		 test	 al, al
  001da	0f 85 d1 00 00
	00		 jne	 $LN109@TestPhysic
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  001e0	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  001e3	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  001e8	2b 4e 18	 sub	 ecx, DWORD PTR [esi+24]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 526  : 					for (DWORD j = 0; j < c_rVictimSphereVector.size(); ++j)

  001eb	83 c3 1c	 add	 ebx, 28			; 0000001cH
  001ee	ff 45 e0	 inc	 DWORD PTR _j$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  001f1	f7 e9		 imul	 ecx
  001f3	03 d1		 add	 edx, ecx
  001f5	c1 fa 04	 sar	 edx, 4
  001f8	8b c2		 mov	 eax, edx
  001fa	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001fd	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 526  : 					for (DWORD j = 0; j < c_rVictimSphereVector.size(); ++j)

  001ff	39 45 e0	 cmp	 DWORD PTR _j$1$[ebp], eax
  00202	72 c0		 jb	 SHORT $LL147@TestPhysic
  00204	f3 0f 10 65 bc	 movss	 xmm4, DWORD PTR _prevPosition$3$[ebp]
  00209	8b 5d d4	 mov	 ebx, DWORD PTR _c_rMainSphere$1$[ebp]
$LN11@TestPhysic:

; 519  : 
; 520  : 				c_rMainSphere.v3LastPosition = prevPosition;
; 521  : 
; 522  : 				for( int i = 1; i <= nSubCheckCount; ++ i )

  0020c	8b 45 d0	 mov	 eax, DWORD PTR _i$1$[ebp]
  0020f	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _prevPosition$2$[ebp]
  00214	40		 inc	 eax
  00215	f3 0f 10 4d b4	 movss	 xmm1, DWORD PTR _prevPosition$1$[ebp]
  0021a	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@42480000
  00222	89 45 d0	 mov	 DWORD PTR _i$1$[ebp], eax
  00225	83 f8 32	 cmp	 eax, 50			; 00000032H
  00228	0f 8e 34 ff ff
	ff		 jle	 $LL146@TestPhysic

; 536  : 
; 537  : 							return bResult;
; 538  : 						}
; 539  : 					}
; 540  : 				}
; 541  : 
; 542  : 				//restore
; 543  : 				c_rMainSphere.v3LastPosition = prevLastPosition;

  0022e	f3 0f 7e 45 98	 movq	 xmm0, QWORD PTR _prevLastPosition$1$[ebp]
  00233	8b 45 c4	 mov	 eax, DWORD PTR _prevLastPosition$2$[ebp]
  00236	ff 45 dc	 inc	 DWORD PTR _i$1$[ebp]
  00239	83 45 d8 1c	 add	 DWORD PTR tv1098[ebp], 28 ; 0000001cH
  0023d	66 0f d6 43 0c	 movq	 QWORD PTR [ebx+12], xmm0

; 544  : 				c_rMainSphere.v3Position	 = prevPosition;

  00242	f3 0f 7e 45 90	 movq	 xmm0, QWORD PTR _prevPosition$4$[ebp]
  00247	89 43 14	 mov	 DWORD PTR [ebx+20], eax
  0024a	8b 45 c0	 mov	 eax, DWORD PTR _prevPosition$5$[ebp]
  0024d	66 0f d6 03	 movq	 QWORD PTR [ebx], xmm0
  00251	89 43 08	 mov	 DWORD PTR [ebx+8], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00254	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00259	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]
  0025c	8b 5f 18	 mov	 ebx, DWORD PTR [edi+24]
  0025f	2b cb		 sub	 ecx, ebx
  00261	f7 e9		 imul	 ecx
  00263	03 d1		 add	 edx, ecx
  00265	c1 fa 04	 sar	 edx, 4
  00268	8b c2		 mov	 eax, edx
  0026a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0026d	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 513  : 			for (DWORD i = 0; i < c_rMainSphereVector.size(); ++i)

  0026f	39 45 dc	 cmp	 DWORD PTR _i$1$[ebp], eax
  00272	8b 45 d8	 mov	 eax, DWORD PTR tv1098[ebp]
  00275	0f 82 88 fe ff
	ff		 jb	 $LL145@TestPhysic
$LN5@TestPhysic:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\list

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  0027b	8b 5d cc	 mov	 ebx, DWORD PTR $T1[ebp]
  0027e	8b 45 b0	 mov	 eax, DWORD PTR _rVictim$GSCopy$1$[ebp]

; 165  :         this->_Ptr = this->_Ptr->_Next;

  00281	8b 36		 mov	 esi, DWORD PTR [esi]

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00283	8b 04 18	 mov	 eax, DWORD PTR [eax+ebx]

; 198  :         return this->_Ptr == _Right._Ptr;

  00286	3b f0		 cmp	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 508  : 		for (; itorVictim != pVictimList->end(); ++itorVictim)

  00288	0f 85 4a fe ff
	ff		 jne	 $LL144@TestPhysic
  0028e	8b 4d c8	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
$LN2@TestPhysic:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\list

; 165  :         this->_Ptr = this->_Ptr->_Next;

  00291	8b 3f		 mov	 edi, DWORD PTR [edi]

; 198  :         return this->_Ptr == _Right._Ptr;

  00293	3b 3c 19	 cmp	 edi, DWORD PTR [ecx+ebx]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 506  : 	for (; itorMain != pMainList->end(); ++itorMain)

  00296	0f 85 34 fe ff
	ff		 jne	 $LL75@TestPhysic
$LN129@TestPhysic:
  0029c	5f		 pop	 edi

; 550  : }

  0029d	5e		 pop	 esi
  0029e	33 c0		 xor	 eax, eax
  002a0	5b		 pop	 ebx
  002a1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002a4	33 cd		 xor	 ecx, ebp
  002a6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002ab	8b e5		 mov	 esp, ebp
  002ad	5d		 pop	 ebp
  002ae	c2 04 00	 ret	 4
$LN109@TestPhysic:
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 44   : 	return (c_rv3Source.x-c_rv3Target.x)*(c_rv3Source.x-c_rv3Target.x) + (c_rv3Source.y-c_rv3Target.y)*(c_rv3Source.y-c_rv3Target.y);

  002b1	8b 4d d4	 mov	 ecx, DWORD PTR _c_rMainSphere$1$[ebp]
  002b4	8b 45 ac	 mov	 eax, DWORD PTR _c_rVictimSphere$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 534  : 							c_rMainSphere.v3LastPosition = prevLastPosition;

  002b7	f3 0f 7e 45 98	 movq	 xmm0, QWORD PTR _prevLastPosition$1$[ebp]
  002bc	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 44   : 	return (c_rv3Source.x-c_rv3Target.x)*(c_rv3Source.x-c_rv3Target.x) + (c_rv3Source.y-c_rv3Target.y)*(c_rv3Source.y-c_rv3Target.y);

  002bd	f3 0f 10 61 04	 movss	 xmm4, DWORD PTR [ecx+4]
  002c2	f3 0f 5c 60 04	 subss	 xmm4, DWORD PTR [eax+4]
  002c7	f3 0f 10 11	 movss	 xmm2, DWORD PTR [ecx]
  002cb	f3 0f 5c 10	 subss	 xmm2, DWORD PTR [eax]
  002cf	f3 0f 10 59 10	 movss	 xmm3, DWORD PTR [ecx+16]
  002d4	f3 0f 5c 58 04	 subss	 xmm3, DWORD PTR [eax+4]
  002d9	f3 0f 10 49 0c	 movss	 xmm1, DWORD PTR [ecx+12]
  002de	f3 0f 5c 08	 subss	 xmm1, DWORD PTR [eax]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 534  : 							c_rMainSphere.v3LastPosition = prevLastPosition;

  002e2	8b 45 c4	 mov	 eax, DWORD PTR _prevLastPosition$2$[ebp]
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 44   : 	return (c_rv3Source.x-c_rv3Target.x)*(c_rv3Source.x-c_rv3Target.x) + (c_rv3Source.y-c_rv3Target.y)*(c_rv3Source.y-c_rv3Target.y);

  002e5	f3 0f 59 e4	 mulss	 xmm4, xmm4
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 550  : }

  002e9	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 44   : 	return (c_rv3Source.x-c_rv3Target.x)*(c_rv3Source.x-c_rv3Target.x) + (c_rv3Source.y-c_rv3Target.y)*(c_rv3Source.y-c_rv3Target.y);

  002ea	f3 0f 59 d2	 mulss	 xmm2, xmm2
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 550  : }

  002ee	5b		 pop	 ebx
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 44   : 	return (c_rv3Source.x-c_rv3Target.x)*(c_rv3Source.x-c_rv3Target.x) + (c_rv3Source.y-c_rv3Target.y)*(c_rv3Source.y-c_rv3Target.y);

  002ef	f3 0f 59 c9	 mulss	 xmm1, xmm1
  002f3	f3 0f 59 db	 mulss	 xmm3, xmm3
  002f7	f3 0f 58 e2	 addss	 xmm4, xmm2
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 534  : 							c_rMainSphere.v3LastPosition = prevLastPosition;

  002fb	66 0f d6 41 0c	 movq	 QWORD PTR [ecx+12], xmm0

; 535  : 							c_rMainSphere.v3Position	 = prevPosition;

  00300	f3 0f 7e 45 90	 movq	 xmm0, QWORD PTR _prevPosition$4$[ebp]
  00305	89 41 14	 mov	 DWORD PTR [ecx+20], eax
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 44   : 	return (c_rv3Source.x-c_rv3Target.x)*(c_rv3Source.x-c_rv3Target.x) + (c_rv3Source.y-c_rv3Target.y)*(c_rv3Source.y-c_rv3Target.y);

  00308	f3 0f 58 cb	 addss	 xmm1, xmm3
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 535  : 							c_rMainSphere.v3Position	 = prevPosition;

  0030c	8b 45 c0	 mov	 eax, DWORD PTR _prevPosition$5$[ebp]
  0030f	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00313	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00316	33 c0		 xor	 eax, eax

; 550  : }

  00318	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0031b	0f 2f cc	 comiss	 xmm1, xmm4
  0031e	0f 93 c0	 setae	 al
  00321	33 cd		 xor	 ecx, ebp
  00323	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00328	8b e5		 mov	 esp, ebp
  0032a	5d		 pop	 ebp
  0032b	c2 04 00	 ret	 4
?TestPhysicsBlendingCollision@CActorInstance@@QAEHAAV1@@Z ENDP ; CActorInstance::TestPhysicsBlendingCollision
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\list
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\list
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\list
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\list
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
;	COMDAT ?TestActorCollision@CActorInstance@@QAEHAAV1@@Z
_TEXT	SEGMENT
_c_rVictimSphere$1$ = -28				; size = 4
_this$1$ = -24						; size = 4
_j$1$ = -20						; size = 4
_i$1$ = -16						; size = 4
tv967 = -12						; size = 4
tv971 = -8						; size = 4
$T1 = -4						; size = 4
_rVictim$ = 8						; size = 4
?TestActorCollision@CActorInstance@@QAEHAAV1@@Z PROC	; CActorInstance::TestActorCollision, COMDAT
; _this$ = ecx

; 556  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	53		 push	 ebx

; 557  : /*
; 558  : 	if (m_pkHorse)
; 559  : 	{
; 560  : 		if (m_pkHorse->TestActorCollision(rVictim))
; 561  : 			return TRUE;
; 562  : 
; 563  : 		return FALSE;
; 564  : 	}
; 565  : */
; 566  : 
; 567  : 	if (rVictim.IsDead())

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _rVictim$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	8b cb		 mov	 ecx, ebx
  0000f	57		 push	 edi
  00010	89 75 e8	 mov	 DWORD PTR _this$1$[ebp], esi
  00013	e8 00 00 00 00	 call	 ?IsDead@CActorInstance@@QAEHXZ ; CActorInstance::IsDead
  00018	85 c0		 test	 eax, eax
  0001a	0f 85 f2 01 00
	00		 jne	 $LN120@TestActorC

; 568  : 		return FALSE;
; 569  : 
; 570  : #ifdef ENABLE_PETS_WITHOUT_COLLISIONS
; 571  : 	if (rVictim.GetRace()>=34001 && rVictim.GetRace()<=34099)

  00020	8b cb		 mov	 ecx, ebx
  00022	e8 00 00 00 00	 call	 ?GetRace@CActorInstance@@QAEKXZ ; CActorInstance::GetRace
  00027	3d d1 84 00 00	 cmp	 eax, 34001		; 000084d1H
  0002c	72 12		 jb	 SHORT $LN15@TestActorC
  0002e	8b cb		 mov	 ecx, ebx
  00030	e8 00 00 00 00	 call	 ?GetRace@CActorInstance@@QAEKXZ ; CActorInstance::GetRace
  00035	3d 33 85 00 00	 cmp	 eax, 34099		; 00008533H
  0003a	0f 86 d2 01 00
	00		 jbe	 $LN120@TestActorC
$LN15@TestActorC:

; 572  : 		return FALSE;
; 573  : #endif
; 574  : 
; 575  : #ifdef ENABLE_SHOPS_WITHOUT_COLLISIONS
; 576  : 	if (rVictim.GetRace()>=30000 && rVictim.GetRace()<=30001)

  00040	8b cb		 mov	 ecx, ebx
  00042	e8 00 00 00 00	 call	 ?GetRace@CActorInstance@@QAEKXZ ; CActorInstance::GetRace
  00047	3d 30 75 00 00	 cmp	 eax, 30000		; 00007530H
  0004c	72 12		 jb	 SHORT $LN16@TestActorC
  0004e	8b cb		 mov	 ecx, ebx
  00050	e8 00 00 00 00	 call	 ?GetRace@CActorInstance@@QAEKXZ ; CActorInstance::GetRace
  00055	3d 31 75 00 00	 cmp	 eax, 30001		; 00007531H
  0005a	0f 86 b2 01 00
	00		 jbe	 $LN120@TestActorC
$LN16@TestActorC:

; 577  : 		return FALSE;
; 578  : #endif
; 579  : 
; 580  : #ifdef ENABLE_MOUNTS_WITHOUT_COLLISIONS
; 581  : 	if (rVictim.GetRace()>=20101 && rVictim.GetRace()<=20299)

  00060	8b cb		 mov	 ecx, ebx
  00062	e8 00 00 00 00	 call	 ?GetRace@CActorInstance@@QAEKXZ ; CActorInstance::GetRace
  00067	3d 85 4e 00 00	 cmp	 eax, 20101		; 00004e85H
  0006c	72 12		 jb	 SHORT $LN17@TestActorC
  0006e	8b cb		 mov	 ecx, ebx
  00070	e8 00 00 00 00	 call	 ?GetRace@CActorInstance@@QAEKXZ ; CActorInstance::GetRace
  00075	3d 4b 4f 00 00	 cmp	 eax, 20299		; 00004f4bH
  0007a	0f 86 92 01 00
	00		 jbe	 $LN120@TestActorC
$LN17@TestActorC:

; 582  : 		return FALSE;
; 583  : #endif
; 584  : 
; 585  : 	// Check Distance
; 586  : 	D3DXVECTOR3 v3Distance = D3DXVECTOR3(rVictim.m_x - m_x, rVictim.m_y - m_y, rVictim.m_z - m_z);

  00080	f3 0f 10 8b 68
	04 00 00	 movss	 xmm1, DWORD PTR [ebx+1128]
  00088	f3 0f 10 93 6c
	04 00 00	 movss	 xmm2, DWORD PTR [ebx+1132]
  00090	f3 0f 5c 96 6c
	04 00 00	 subss	 xmm2, DWORD PTR [esi+1132]
  00098	f3 0f 5c 8e 68
	04 00 00	 subss	 xmm1, DWORD PTR [esi+1128]
  000a0	f3 0f 10 83 70
	04 00 00	 movss	 xmm0, DWORD PTR [ebx+1136]
  000a8	f3 0f 5c 86 70
	04 00 00	 subss	 xmm0, DWORD PTR [esi+1136]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  000b0	f3 0f 59 d2	 mulss	 xmm2, xmm2

; 182  :     z = fz;

  000b4	f3 0f 59 c9	 mulss	 xmm1, xmm1

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  000b8	f3 0f 59 c0	 mulss	 xmm0, xmm0
  000bc	f3 0f 58 d1	 addss	 xmm2, xmm1
  000c0	f3 0f 58 d0	 addss	 xmm2, xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 588  : 	if (fDistance > 800.0f*800.0f)

  000c4	0f 2f 15 00 00
	00 00		 comiss	 xmm2, DWORD PTR __real@491c4000
  000cb	0f 87 41 01 00
	00		 ja	 $LN120@TestActorC

; 589  : 		return FALSE;
; 590  : 
; 591  : 	TCollisionPointInstanceList * pMainList;
; 592  : 	TCollisionPointInstanceList * pVictimList;
; 593  : 	if (isAttacking() || IsWaiting())

  000d1	8b ce		 mov	 ecx, esi
  000d3	e8 00 00 00 00	 call	 ?isAttacking@CActorInstance@@QAEHXZ ; CActorInstance::isAttacking
  000d8	85 c0		 test	 eax, eax
  000da	75 10		 jne	 SHORT $LN21@TestActorC
  000dc	8b ce		 mov	 ecx, esi
  000de	e8 00 00 00 00	 call	 ?IsWaiting@CActorInstance@@QAEHXZ ; CActorInstance::IsWaiting
  000e3	85 c0		 test	 eax, eax

; 597  : 	}
; 598  : 	else
; 599  : 	{
; 600  : 		pMainList = &m_BodyPointInstanceList;
; 601  : 		pVictimList = &rVictim.m_BodyPointInstanceList;

  000e5	b8 38 03 00 00	 mov	 eax, 824		; 00000338H
  000ea	74 05		 je	 SHORT $LN139@TestActorC
$LN21@TestActorC:

; 594  : 	{
; 595  : 		pMainList = &m_DefendingPointInstanceList;
; 596  : 		pVictimList = &rVictim.m_DefendingPointInstanceList;

  000ec	b8 40 03 00 00	 mov	 eax, 832		; 00000340H
$LN139@TestActorC:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\list

; 1090 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  000f1	8b 0c 30	 mov	 ecx, DWORD PTR [eax+esi]
  000f4	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  000f7	8b 04 18	 mov	 eax, DWORD PTR [eax+ebx]

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  000fa	8b 39		 mov	 edi, DWORD PTR [ecx]
  000fc	8b 30		 mov	 esi, DWORD PTR [eax]
  000fe	3b f9		 cmp	 edi, ecx
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 606  : 	for (; itorMain != pMainList->end(); ++itorMain)

  00100	0f 84 0c 01 00
	00		 je	 $LN120@TestActorC
  00106	8b 4d fc	 mov	 ecx, DWORD PTR $T1[ebp]
  00109	8b 55 e8	 mov	 edx, DWORD PTR _this$1$[ebp]
  0010c	0f 1f 40 00	 npad	 4
$LL68@TestActorC:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\list

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00110	3b f0		 cmp	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 607  : 	for (; itorVictim != pVictimList->end(); ++itorVictim)

  00112	0f 84 ef 00 00
	00		 je	 $LN2@TestActorC
  00118	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL136@TestActorC:

; 612  : 		for (DWORD i = 0; i < c_rMainSphereVector.size(); ++i)

  00120	33 c9		 xor	 ecx, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00122	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 612  : 		for (DWORD i = 0; i < c_rMainSphereVector.size(); ++i)

  00127	89 4d f0	 mov	 DWORD PTR _i$1$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0012a	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]
  0012d	2b 4f 18	 sub	 ecx, DWORD PTR [edi+24]
  00130	f7 e9		 imul	 ecx
  00132	03 d1		 add	 edx, ecx
  00134	c1 fa 04	 sar	 edx, 4
  00137	8b c2		 mov	 eax, edx
  00139	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0013c	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 612  : 		for (DWORD i = 0; i < c_rMainSphereVector.size(); ++i)

  0013e	0f 84 ad 00 00
	00		 je	 $LN5@TestActorC
  00144	33 db		 xor	 ebx, ebx
  00146	89 5d f4	 mov	 DWORD PTR tv967[ebp], ebx
  00149	0f 1f 80 00 00
	00 00		 npad	 7
$LL137@TestActorC:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00150	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00153	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00158	2b 4e 18	 sub	 ecx, DWORD PTR [esi+24]
  0015b	f7 e9		 imul	 ecx
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 613  : 		for (DWORD j = 0; j < c_rVictimSphereVector.size(); ++j)

  0015d	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _j$1$[ebp], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00164	03 d1		 add	 edx, ecx
  00166	c1 fa 04	 sar	 edx, 4
  00169	8b c2		 mov	 eax, edx
  0016b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0016e	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 613  : 		for (DWORD j = 0; j < c_rVictimSphereVector.size(); ++j)

  00170	74 51		 je	 SHORT $LN8@TestActorC
  00172	33 c0		 xor	 eax, eax
  00174	89 45 f8	 mov	 DWORD PTR tv971[ebp], eax
$LL138@TestActorC:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1899 :         return _My_data._Myfirst[_Pos];

  00177	03 46 18	 add	 eax, DWORD PTR [esi+24]
  0017a	8b 5f 18	 mov	 ebx, DWORD PTR [edi+24]
  0017d	03 5d f4	 add	 ebx, DWORD PTR tv967[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 618  : 			if (DetectCollisionDynamicSphereVSDynamicSphere(c_rMainSphere, c_rVictimSphere))

  00180	50		 push	 eax
  00181	53		 push	 ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1899 :         return _My_data._Myfirst[_Pos];

  00182	89 45 e4	 mov	 DWORD PTR _c_rVictimSphere$1$[ebp], eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 618  : 			if (DetectCollisionDynamicSphereVSDynamicSphere(c_rMainSphere, c_rVictimSphere))

  00185	e8 00 00 00 00	 call	 ?DetectCollisionDynamicSphereVSDynamicSphere@@YA_NABUCDynamicSphereInstance@@0@Z ; DetectCollisionDynamicSphereVSDynamicSphere
  0018a	83 c4 08	 add	 esp, 8
  0018d	84 c0		 test	 al, al
  0018f	0f 85 88 00 00
	00		 jne	 $LN101@TestActorC
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00195	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00198	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0019d	2b 4e 18	 sub	 ecx, DWORD PTR [esi+24]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 613  : 		for (DWORD j = 0; j < c_rVictimSphereVector.size(); ++j)

  001a0	8b 5d ec	 mov	 ebx, DWORD PTR _j$1$[ebp]
  001a3	83 45 f8 1c	 add	 DWORD PTR tv971[ebp], 28 ; 0000001cH
  001a7	43		 inc	 ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  001a8	f7 e9		 imul	 ecx
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 613  : 		for (DWORD j = 0; j < c_rVictimSphereVector.size(); ++j)

  001aa	89 5d ec	 mov	 DWORD PTR _j$1$[ebp], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  001ad	03 d1		 add	 edx, ecx
  001af	c1 fa 04	 sar	 edx, 4
  001b2	8b c2		 mov	 eax, edx
  001b4	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001b7	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 613  : 		for (DWORD j = 0; j < c_rVictimSphereVector.size(); ++j)

  001b9	3b d8		 cmp	 ebx, eax
  001bb	8b 45 f8	 mov	 eax, DWORD PTR tv971[ebp]
  001be	72 b7		 jb	 SHORT $LL138@TestActorC
  001c0	8b 5d f4	 mov	 ebx, DWORD PTR tv967[ebp]
$LN8@TestActorC:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  001c3	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]
  001c6	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  001cb	2b 4f 18	 sub	 ecx, DWORD PTR [edi+24]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 612  : 		for (DWORD i = 0; i < c_rMainSphereVector.size(); ++i)

  001ce	83 c3 1c	 add	 ebx, 28			; 0000001cH
  001d1	ff 45 f0	 inc	 DWORD PTR _i$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  001d4	f7 e9		 imul	 ecx
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 612  : 		for (DWORD i = 0; i < c_rMainSphereVector.size(); ++i)

  001d6	89 5d f4	 mov	 DWORD PTR tv967[ebp], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  001d9	03 d1		 add	 edx, ecx
  001db	c1 fa 04	 sar	 edx, 4
  001de	8b c2		 mov	 eax, edx
  001e0	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001e3	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 612  : 		for (DWORD i = 0; i < c_rMainSphereVector.size(); ++i)

  001e5	39 45 f0	 cmp	 DWORD PTR _i$1$[ebp], eax
  001e8	0f 82 62 ff ff
	ff		 jb	 $LL137@TestActorC
  001ee	8b 5d 08	 mov	 ebx, DWORD PTR _rVictim$[ebp]
$LN5@TestActorC:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\list

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  001f1	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]

; 165  :         this->_Ptr = this->_Ptr->_Next;

  001f4	8b 36		 mov	 esi, DWORD PTR [esi]

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  001f6	8b 04 18	 mov	 eax, DWORD PTR [eax+ebx]

; 198  :         return this->_Ptr == _Right._Ptr;

  001f9	3b f0		 cmp	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 607  : 	for (; itorVictim != pVictimList->end(); ++itorVictim)

  001fb	0f 85 1f ff ff
	ff		 jne	 $LL136@TestActorC
  00201	8b 4d fc	 mov	 ecx, DWORD PTR $T1[ebp]
  00204	8b 55 e8	 mov	 edx, DWORD PTR _this$1$[ebp]
$LN2@TestActorC:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\list

; 165  :         this->_Ptr = this->_Ptr->_Next;

  00207	8b 3f		 mov	 edi, DWORD PTR [edi]

; 198  :         return this->_Ptr == _Right._Ptr;

  00209	3b 3c 11	 cmp	 edi, DWORD PTR [ecx+edx]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 606  : 	for (; itorMain != pMainList->end(); ++itorMain)

  0020c	0f 85 fe fe ff
	ff		 jne	 $LL68@TestActorC
$LN120@TestActorC:
  00212	5f		 pop	 edi

; 621  : 					GetVector3Distance(c_rMainSphere.v3LastPosition, c_rVictimSphere.v3Position))
; 622  : 				{
; 623  : 					return TRUE;
; 624  : 				}
; 625  : 				return FALSE;
; 626  : 			}
; 627  : 		}
; 628  : 	}
; 629  : 
; 630  : 	return FALSE;
; 631  : }

  00213	5e		 pop	 esi
  00214	33 c0		 xor	 eax, eax
  00216	5b		 pop	 ebx
  00217	8b e5		 mov	 esp, ebp
  00219	5d		 pop	 ebp
  0021a	c2 04 00	 ret	 4
$LN101@TestActorC:
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpMath.h

; 44   : 	return (c_rv3Source.x-c_rv3Target.x)*(c_rv3Source.x-c_rv3Target.x) + (c_rv3Source.y-c_rv3Target.y)*(c_rv3Source.y-c_rv3Target.y);

  0021d	8b 45 e4	 mov	 eax, DWORD PTR _c_rVictimSphere$1$[ebp]
  00220	f3 0f 10 5b 04	 movss	 xmm3, DWORD PTR [ebx+4]
  00225	f3 0f 10 23	 movss	 xmm4, DWORD PTR [ebx]
  00229	f3 0f 10 53 10	 movss	 xmm2, DWORD PTR [ebx+16]
  0022e	f3 0f 10 4b 0c	 movss	 xmm1, DWORD PTR [ebx+12]
  00233	f3 0f 5c 20	 subss	 xmm4, DWORD PTR [eax]
  00237	f3 0f 5c 08	 subss	 xmm1, DWORD PTR [eax]
  0023b	f3 0f 5c 58 04	 subss	 xmm3, DWORD PTR [eax+4]
  00240	f3 0f 5c 50 04	 subss	 xmm2, DWORD PTR [eax+4]
  00245	f3 0f 59 e4	 mulss	 xmm4, xmm4
  00249	f3 0f 59 db	 mulss	 xmm3, xmm3
  0024d	f3 0f 59 c9	 mulss	 xmm1, xmm1
  00251	f3 0f 59 d2	 mulss	 xmm2, xmm2
  00255	f3 0f 58 e3	 addss	 xmm4, xmm3
  00259	f3 0f 58 ca	 addss	 xmm1, xmm2
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 620  : 				if (GetVector3Distance(c_rMainSphere.v3Position, c_rVictimSphere.v3Position) <=

  0025d	0f 2f cc	 comiss	 xmm1, xmm4
  00260	72 b0		 jb	 SHORT $LN120@TestActorC

; 621  : 					GetVector3Distance(c_rMainSphere.v3LastPosition, c_rVictimSphere.v3Position))
; 622  : 				{
; 623  : 					return TRUE;
; 624  : 				}
; 625  : 				return FALSE;
; 626  : 			}
; 627  : 		}
; 628  : 	}
; 629  : 
; 630  : 	return FALSE;
; 631  : }

  00262	5f		 pop	 edi
  00263	5e		 pop	 esi
  00264	b8 01 00 00 00	 mov	 eax, 1
  00269	5b		 pop	 ebx
  0026a	8b e5		 mov	 esp, ebp
  0026c	5d		 pop	 ebp
  0026d	c2 04 00	 ret	 4
?TestActorCollision@CActorInstance@@QAEHAAV1@@Z ENDP	; CActorInstance::TestActorCollision
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\list
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\list
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
;	COMDAT ?__TestObjectCollision@CActorInstance@@IAEHPBVCGraphicObjectInstance@@@Z
_TEXT	SEGMENT
_this$1$ = -8						; size = 4
_i$1$ = -4						; size = 4
_c_pObjectInstance$ = 8					; size = 4
?__TestObjectCollision@CActorInstance@@IAEHPBVCGraphicObjectInstance@@@Z PROC ; CActorInstance::__TestObjectCollision, COMDAT
; _this$ = ecx

; 673  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 674  : 	if (m_pkHorse)

  00006	8b 81 50 05 00
	00		 mov	 eax, DWORD PTR [ecx+1360]
  0000c	89 4d f8	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000f	53		 push	 ebx
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	85 c0		 test	 eax, eax
  00014	74 1d		 je	 SHORT $LN8@TestObject

; 675  : 	{
; 676  : 		if (m_pkHorse->__TestObjectCollision(c_pObjectInstance))

  00016	ff 75 08	 push	 DWORD PTR _c_pObjectInstance$[ebp]
  00019	8b c8		 mov	 ecx, eax
  0001b	e8 00 00 00 00	 call	 ?__TestObjectCollision@CActorInstance@@IAEHPBVCGraphicObjectInstance@@@Z ; CActorInstance::__TestObjectCollision
  00020	85 c0		 test	 eax, eax
  00022	0f 85 ca 00 00
	00		 jne	 $LN48@TestObject
$LN58@TestObject:
  00028	5f		 pop	 edi

; 697  : 			{
; 698  : 				//const D3DXVECTOR3 & c_rv3Position = c_pObjectInstance->GetPosition();
; 699  : 				//if (GetVector3Distance(c_rMainSphere.v3Position, c_rv3Position) <
; 700  : 				//	GetVector3Distance(c_rMainSphere.v3LastPosition, c_rv3Position))
; 701  : 				{
; 702  : 					return TRUE;
; 703  : 				}
; 704  : 
; 705  : 				//return FALSE;
; 706  : 			}
; 707  : 		}
; 708  : 	}
; 709  : 
; 710  : 	return FALSE;
; 711  : }

  00029	5e		 pop	 esi
  0002a	33 c0		 xor	 eax, eax
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
$LN8@TestObject:

; 677  : 			return TRUE;
; 678  : 
; 679  : 		return FALSE;
; 680  : 	}
; 681  : 
; 682  : 	if (m_canSkipCollision)

  00033	80 b9 60 05 00
	00 00		 cmp	 BYTE PTR [ecx+1376], 0
  0003a	75 ec		 jne	 SHORT $LN58@TestObject

; 683  : 		return FALSE;
; 684  : 
; 685  : 	if (m_v3Movement.x == 0.0f && m_v3Movement.y == 0.0f && m_v3Movement.z == 0.0f)

  0003c	f3 0f 10 81 80
	04 00 00	 movss	 xmm0, DWORD PTR [ecx+1152]
  00044	0f 57 c9	 xorps	 xmm1, xmm1
  00047	0f 2e c1	 ucomiss xmm0, xmm1
  0004a	9f		 lahf
  0004b	f6 c4 44	 test	 ah, 68			; 00000044H
  0004e	7a 22		 jp	 SHORT $LN11@TestObject
  00050	f3 0f 10 81 84
	04 00 00	 movss	 xmm0, DWORD PTR [ecx+1156]
  00058	0f 2e c1	 ucomiss xmm0, xmm1
  0005b	9f		 lahf
  0005c	f6 c4 44	 test	 ah, 68			; 00000044H
  0005f	7a 11		 jp	 SHORT $LN11@TestObject
  00061	f3 0f 10 81 88
	04 00 00	 movss	 xmm0, DWORD PTR [ecx+1160]
  00069	0f 2e c1	 ucomiss xmm0, xmm1
  0006c	9f		 lahf
  0006d	f6 c4 44	 test	 ah, 68			; 00000044H
  00070	7b b6		 jnp	 SHORT $LN58@TestObject
$LN11@TestObject:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\list

; 1090 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  00072	8b 81 38 03 00
	00		 mov	 eax, DWORD PTR [ecx+824]

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00078	8b 30		 mov	 esi, DWORD PTR [eax]
  0007a	3b f0		 cmp	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 689  : 	for (; itorMain != m_BodyPointInstanceList.end(); ++itorMain)

  0007c	74 aa		 je	 SHORT $LN58@TestObject
  0007e	66 90		 npad	 2
$LL65@TestObject:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00080	8b 5e 18	 mov	 ebx, DWORD PTR [esi+24]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 692  : 		for (DWORD i = 0; i < c_rMainSphereVector.size(); ++i)

  00083	33 c9		 xor	 ecx, ecx
  00085	89 4d fc	 mov	 DWORD PTR _i$1$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00088	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0008d	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00090	2b cb		 sub	 ecx, ebx
  00092	f7 e9		 imul	 ecx
  00094	03 d1		 add	 edx, ecx
  00096	c1 fa 04	 sar	 edx, 4
  00099	8b c2		 mov	 eax, edx
  0009b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0009e	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 692  : 		for (DWORD i = 0; i < c_rMainSphereVector.size(); ++i)

  000a0	74 38		 je	 SHORT $LN2@TestObject
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1868 :         auto& _My_data = _Mypair._Myval2;

  000a2	33 ff		 xor	 edi, edi
$LL66@TestObject:
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 696  : 			if (c_pObjectInstance->MovementCollisionDynamicSphere(c_rMainSphere))

  000a4	8b 4d 08	 mov	 ecx, DWORD PTR _c_pObjectInstance$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1899 :         return _My_data._Myfirst[_Pos];

  000a7	8d 04 1f	 lea	 eax, DWORD PTR [edi+ebx]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 696  : 			if (c_pObjectInstance->MovementCollisionDynamicSphere(c_rMainSphere))

  000aa	50		 push	 eax
  000ab	e8 00 00 00 00	 call	 ?MovementCollisionDynamicSphere@CGraphicObjectInstance@@QBE_NABUCDynamicSphereInstance@@@Z ; CGraphicObjectInstance::MovementCollisionDynamicSphere
  000b0	84 c0		 test	 al, al
  000b2	75 3e		 jne	 SHORT $LN48@TestObject
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000b4	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  000b7	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  000bc	8b 5e 18	 mov	 ebx, DWORD PTR [esi+24]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 692  : 		for (DWORD i = 0; i < c_rMainSphereVector.size(); ++i)

  000bf	83 c7 1c	 add	 edi, 28			; 0000001cH
  000c2	ff 45 fc	 inc	 DWORD PTR _i$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000c5	2b cb		 sub	 ecx, ebx
  000c7	f7 e9		 imul	 ecx
  000c9	03 d1		 add	 edx, ecx
  000cb	c1 fa 04	 sar	 edx, 4
  000ce	8b c2		 mov	 eax, edx
  000d0	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000d3	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 692  : 		for (DWORD i = 0; i < c_rMainSphereVector.size(); ++i)

  000d5	39 45 fc	 cmp	 DWORD PTR _i$1$[ebp], eax
  000d8	72 ca		 jb	 SHORT $LL66@TestObject
$LN2@TestObject:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\list

; 198  :         return this->_Ptr == _Right._Ptr;

  000da	8b 45 f8	 mov	 eax, DWORD PTR _this$1$[ebp]

; 165  :         this->_Ptr = this->_Ptr->_Next;

  000dd	8b 36		 mov	 esi, DWORD PTR [esi]

; 198  :         return this->_Ptr == _Right._Ptr;

  000df	3b b0 38 03 00
	00		 cmp	 esi, DWORD PTR [eax+824]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 689  : 	for (; itorMain != m_BodyPointInstanceList.end(); ++itorMain)

  000e5	75 99		 jne	 SHORT $LL65@TestObject

; 697  : 			{
; 698  : 				//const D3DXVECTOR3 & c_rv3Position = c_pObjectInstance->GetPosition();
; 699  : 				//if (GetVector3Distance(c_rMainSphere.v3Position, c_rv3Position) <
; 700  : 				//	GetVector3Distance(c_rMainSphere.v3LastPosition, c_rv3Position))
; 701  : 				{
; 702  : 					return TRUE;
; 703  : 				}
; 704  : 
; 705  : 				//return FALSE;
; 706  : 			}
; 707  : 		}
; 708  : 	}
; 709  : 
; 710  : 	return FALSE;
; 711  : }

  000e7	5f		 pop	 edi
  000e8	5e		 pop	 esi
  000e9	33 c0		 xor	 eax, eax
  000eb	5b		 pop	 ebx
  000ec	8b e5		 mov	 esp, ebp
  000ee	5d		 pop	 ebp
  000ef	c2 04 00	 ret	 4
$LN48@TestObject:
  000f2	5f		 pop	 edi
  000f3	5e		 pop	 esi
  000f4	b8 01 00 00 00	 mov	 eax, 1
  000f9	5b		 pop	 ebx
  000fa	8b e5		 mov	 esp, ebp
  000fc	5d		 pop	 ebp
  000fd	c2 04 00	 ret	 4
?__TestObjectCollision@CActorInstance@@IAEHPBVCGraphicObjectInstance@@@Z ENDP ; CActorInstance::__TestObjectCollision
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
;	COMDAT ?BlockMovement@CActorInstance@@QAEXXZ
_TEXT	SEGMENT
?BlockMovement@CActorInstance@@QAEXXZ PROC		; CActorInstance::BlockMovement, COMDAT
; _this$ = ecx

; 663  : 	if (m_pkHorse)

  00000	8b 81 50 05 00
	00		 mov	 eax, DWORD PTR [ecx+1360]
  00006	85 c0		 test	 eax, eax
  00008	0f 45 c8	 cmovne	 ecx, eax

; 664  : 	{
; 665  : 		m_pkHorse->__InitializeMovement();
; 666  : 		return;
; 667  : 	}
; 668  : 
; 669  : 	__InitializeMovement();
; 670  : }

  0000b	e9 00 00 00 00	 jmp	 ?__InitializeMovement@CActorInstance@@IAEXXZ ; CActorInstance::__InitializeMovement
?BlockMovement@CActorInstance@@QAEXXZ ENDP		; CActorInstance::BlockMovement
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
;	COMDAT ?IsBlockObject@CActorInstance@@QAE_NABVCGraphicObjectInstance@@@Z
_TEXT	SEGMENT
_c_rkBGObj$ = 8						; size = 4
?IsBlockObject@CActorInstance@@QAE_NABVCGraphicObjectInstance@@@Z PROC ; CActorInstance::IsBlockObject, COMDAT
; _this$ = ecx

; 651  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 652  : 	if (this==&c_rkBGObj)

  00003	8b 45 08	 mov	 eax, DWORD PTR _c_rkBGObj$[ebp]
  00006	3b c8		 cmp	 ecx, eax
  00008	74 0f		 je	 SHORT $LN5@IsBlockObj

; 653  : 		return false;
; 654  : 
; 655  : 	if (!__TestObjectCollision(&c_rkBGObj))

  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ?__TestObjectCollision@CActorInstance@@IAEHPBVCGraphicObjectInstance@@@Z ; CActorInstance::__TestObjectCollision
  00010	85 c0		 test	 eax, eax
  00012	0f 95 c0	 setne	 al

; 657  : 
; 658  : 	return true;
; 659  : }

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
$LN5@IsBlockObj:

; 656  : 		return false;

  00019	32 c0		 xor	 al, al

; 657  : 
; 658  : 	return true;
; 659  : }

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?IsBlockObject@CActorInstance@@QAE_NABVCGraphicObjectInstance@@@Z ENDP ; CActorInstance::IsBlockObject
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
;	COMDAT ?AvoidObject@CActorInstance@@QAE_NABVCGraphicObjectInstance@@@Z
_TEXT	SEGMENT
_c_rkBGObj$ = 8						; size = 4
?AvoidObject@CActorInstance@@QAE_NABVCGraphicObjectInstance@@@Z PROC ; CActorInstance::AvoidObject, COMDAT
; _this$ = ecx

; 634  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 635  : #ifdef __MOVIE_MODE__
; 636  : 	if (IsMovieMode())
; 637  : 		return false;
; 638  : #endif
; 639  : 
; 640  : 	if (this==&c_rkBGObj)

  00005	8b 7d 08	 mov	 edi, DWORD PTR _c_rkBGObj$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 1a		 je	 SHORT $LN5@AvoidObjec

; 641  : 		return false;
; 642  : 
; 643  : 	if (!__TestObjectCollision(&c_rkBGObj))

  0000e	57		 push	 edi
  0000f	e8 00 00 00 00	 call	 ?__TestObjectCollision@CActorInstance@@IAEHPBVCGraphicObjectInstance@@@Z ; CActorInstance::__TestObjectCollision
  00014	85 c0		 test	 eax, eax
  00016	74 10		 je	 SHORT $LN5@AvoidObjec

; 645  : 
; 646  : 	__AdjustCollisionMovement(&c_rkBGObj);

  00018	57		 push	 edi
  00019	8b ce		 mov	 ecx, esi
  0001b	e8 00 00 00 00	 call	 ?__AdjustCollisionMovement@CActorInstance@@IAEXPBVCGraphicObjectInstance@@@Z ; CActorInstance::__AdjustCollisionMovement
  00020	5f		 pop	 edi

; 647  : 	return true;

  00021	b0 01		 mov	 al, 1

; 648  : }

  00023	5e		 pop	 esi
  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
$LN5@AvoidObjec:
  00028	5f		 pop	 edi

; 644  : 		return false;

  00029	32 c0		 xor	 al, al

; 648  : }

  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
?AvoidObject@CActorInstance@@QAE_NABVCGraphicObjectInstance@@@Z ENDP ; CActorInstance::AvoidObject
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\list
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\list
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
;	COMDAT ?UpdateAdvancingPointInstance@CActorInstance@@QAEXXZ
_TEXT	SEGMENT
_this$GSCopy$1$ = -228					; size = 4
_c_pCollisionData$1$ = -224				; size = 4
_v3Movement$ = -220					; size = 12
tv652 = -208						; size = 4
_j$1$ = -204						; size = 4
tv653 = -200						; size = 4
$T1 = -196						; size = 64
_matPoint$ = -132					; size = 64
_matCenter$ = -68					; size = 64
__$ArrayPad$ = -4					; size = 4
?UpdateAdvancingPointInstance@CActorInstance@@QAEXXZ PROC ; CActorInstance::UpdateAdvancingPointInstance, COMDAT
; _this$ = ecx

; 97   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b d9		 mov	 ebx, ecx
  00016	56		 push	 esi
  00017	89 9d 1c ff ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], ebx

; 98   : 	D3DXVECTOR3 v3Movement = m_v3Movement;

  0001d	f3 0f 7e 83 80
	04 00 00	 movq	 xmm0, QWORD PTR [ebx+1152]

; 99   : 	if (m_pkHorse)

  00025	8b 8b 50 05 00
	00		 mov	 ecx, DWORD PTR [ebx+1360]
  0002b	8b 83 88 04 00
	00		 mov	 eax, DWORD PTR [ebx+1160]
  00031	66 0f d6 85 24
	ff ff ff	 movq	 QWORD PTR _v3Movement$[ebp], xmm0
  00039	89 85 2c ff ff
	ff		 mov	 DWORD PTR _v3Movement$[ebp+8], eax
  0003f	85 c9		 test	 ecx, ecx
  00041	74 21		 je	 SHORT $LN9@UpdateAdva

; 100  : 		v3Movement = m_pkHorse->m_v3Movement;

  00043	f3 0f 7e 81 80
	04 00 00	 movq	 xmm0, QWORD PTR [ecx+1152]
  0004b	8b 81 88 04 00
	00		 mov	 eax, DWORD PTR [ecx+1160]
  00051	66 0f d6 85 24
	ff ff ff	 movq	 QWORD PTR _v3Movement$[ebp], xmm0
  00059	89 85 2c ff ff
	ff		 mov	 DWORD PTR _v3Movement$[ebp+8], eax

; 101  : 
; 102  : 	if (m_pkHorse)
; 103  : 		m_pkHorse->UpdateAdvancingPointInstance();

  0005f	e8 00 00 00 00	 call	 ?UpdateAdvancingPointInstance@CActorInstance@@QAEXXZ ; CActorInstance::UpdateAdvancingPointInstance
$LN9@UpdateAdva:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\list

; 1090 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  00064	8b 83 38 03 00
	00		 mov	 eax, DWORD PTR [ebx+824]

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  0006a	8b 30		 mov	 esi, DWORD PTR [eax]
  0006c	3b f0		 cmp	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 109  : 	for (; itor != m_BodyPointInstanceList.end(); ++itor)

  0006e	0f 84 44 02 00
	00		 je	 $LN3@UpdateAdva
  00074	57		 push	 edi
$LL32@UpdateAdva:

; 110  : 	{
; 111  : 		TCollisionPointInstance & rInstance = *itor;
; 112  : 
; 113  : 		if (rInstance.isAttached)

  00075	83 7e 0c 00	 cmp	 DWORD PTR [esi+12], 0
  00079	0f 84 8e 00 00
	00		 je	 $LN10@UpdateAdva
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0007f	8b 83 8c 02 00
	00		 mov	 eax, DWORD PTR [ebx+652]
  00085	8b 93 88 02 00
	00		 mov	 edx, DWORD PTR [ebx+648]
  0008b	2b c2		 sub	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 115  : 			if (rInstance.dwModelIndex>=m_LODControllerVector.size())

  0008d	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00090	c1 f8 02	 sar	 eax, 2
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 115  : 			if (rInstance.dwModelIndex>=m_LODControllerVector.size())

  00093	3b c8		 cmp	 ecx, eax
  00095	72 14		 jb	 SHORT $LN12@UpdateAdva

; 116  : 			{
; 117  : 				Tracenf("CActorInstance::UpdateAdvancingPointInstance - rInstance.dwModelIndex=%d >= m_LODControllerVector.size()=%d",

  00097	50		 push	 eax
  00098	51		 push	 ecx
  00099	68 00 00 00 00	 push	 OFFSET ??_C@_0GM@IMNFDCHL@CActorInstance?3?3UpdateAdvancing@
  0009e	e8 00 00 00 00	 call	 ?Tracenf@@YAXPBDZZ	; Tracenf
  000a3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 118  : 					rInstance.dwModelIndex, m_LODControllerVector.size());
; 119  : 				continue;

  000a6	e9 fe 01 00 00	 jmp	 $LN2@UpdateAdva
$LN12@UpdateAdva:

; 120  : 			}
; 121  : 
; 122  : 			CGrannyLODController* pGrnLODController=m_LODControllerVector[rInstance.dwModelIndex];

  000ab	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]

; 123  : 			if (!pGrnLODController)

  000ae	85 c0		 test	 eax, eax
  000b0	75 13		 jne	 SHORT $LN13@UpdateAdva

; 124  : 			{
; 125  : 				Tracenf("CActorInstance::UpdateAdvancingPointInstance - m_LODControllerVector[rInstance.dwModelIndex=%d] is NULL", rInstance.dwModelIndex);

  000b2	51		 push	 ecx
  000b3	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@OFDOMPIB@CActorInstance?3?3UpdateAdvancing@
  000b8	e8 00 00 00 00	 call	 ?Tracenf@@YAXPBDZZ	; Tracenf
  000bd	83 c4 08	 add	 esp, 8

; 126  : 				continue;

  000c0	e9 e4 01 00 00	 jmp	 $LN2@UpdateAdva
$LN13@UpdateAdva:

; 127  : 			}
; 128  : 
; 129  : 			CGrannyModelInstance * pModelInstance = pGrnLODController->GetModelInstance();

  000c5	8b c8		 mov	 ecx, eax
  000c7	e8 00 00 00 00	 call	 ?GetModelInstance@CGrannyLODController@@QAEPAVCGrannyModelInstance@@XZ ; CGrannyLODController::GetModelInstance

; 130  : 			if (!pModelInstance)

  000cc	85 c0		 test	 eax, eax
  000ce	0f 84 d5 01 00
	00		 je	 $LN2@UpdateAdva

; 136  : 			matCenter = *(D3DXMATRIX *)pModelInstance->GetBoneMatrixPointer(rInstance.dwBoneIndex);

  000d4	ff 76 14	 push	 DWORD PTR [esi+20]
  000d7	8b c8		 mov	 ecx, eax
  000d9	e8 00 00 00 00	 call	 ?GetBoneMatrixPointer@CGrannyModelInstance@@QBEPBMH@Z ; CGrannyModelInstance::GetBoneMatrixPointer
  000de	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  000e1	0f 11 45 bc	 movups	 XMMWORD PTR _matCenter$[ebp], xmm0
  000e5	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  000e9	0f 11 45 cc	 movups	 XMMWORD PTR _matCenter$[ebp+16], xmm0
  000ed	0f 10 40 20	 movups	 xmm0, XMMWORD PTR [eax+32]
  000f1	0f 11 45 dc	 movups	 XMMWORD PTR _matCenter$[ebp+32], xmm0
  000f5	0f 10 40 30	 movups	 xmm0, XMMWORD PTR [eax+48]

; 137  : 			matCenter *= m_worldMatrix;

  000f9	8d 43 6c	 lea	 eax, DWORD PTR [ebx+108]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 512  :     D3DXMatrixMultiply(this, this, &mat);

  000fc	50		 push	 eax
  000fd	8d 45 bc	 lea	 eax, DWORD PTR _matCenter$[ebp]
  00100	50		 push	 eax
  00101	50		 push	 eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 136  : 			matCenter = *(D3DXMATRIX *)pModelInstance->GetBoneMatrixPointer(rInstance.dwBoneIndex);

  00102	0f 11 45 ec	 movups	 XMMWORD PTR _matCenter$[ebp+48], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 512  :     D3DXMatrixMultiply(this, this, &mat);

  00106	e8 00 00 00 00	 call	 _D3DXMatrixMultiply@12
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 138  : 		}

  0010b	eb 26		 jmp	 SHORT $LN11@UpdateAdva
$LN10@UpdateAdva:

; 139  : 		else
; 140  : 		{
; 141  : 			matCenter = m_worldMatrix;

  0010d	0f 10 43 6c	 movups	 xmm0, XMMWORD PTR [ebx+108]
  00111	0f 11 45 bc	 movups	 XMMWORD PTR _matCenter$[ebp], xmm0
  00115	0f 10 43 7c	 movups	 xmm0, XMMWORD PTR [ebx+124]
  00119	0f 11 45 cc	 movups	 XMMWORD PTR _matCenter$[ebp+16], xmm0
  0011d	0f 10 83 8c 00
	00 00		 movups	 xmm0, XMMWORD PTR [ebx+140]
  00124	0f 11 45 dc	 movups	 XMMWORD PTR _matCenter$[ebp+32], xmm0
  00128	0f 10 83 9c 00
	00 00		 movups	 xmm0, XMMWORD PTR [ebx+156]
  0012f	0f 11 45 ec	 movups	 XMMWORD PTR _matCenter$[ebp+48], xmm0
$LN11@UpdateAdva:

; 142  : 		}
; 143  : 
; 144  : 		// Update Collision Sphere
; 145  : 		const NRaceData::TCollisionData * c_pCollisionData = rInstance.c_pCollisionData;

  00133	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00136	89 8d 20 ff ff
	ff		 mov	 DWORD PTR _c_pCollisionData$1$[ebp], ecx

; 146  : 		if (c_pCollisionData)

  0013c	85 c9		 test	 ecx, ecx
  0013e	0f 84 65 01 00
	00		 je	 $LN2@UpdateAdva
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00144	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 148  : 			for (DWORD j = 0; j < c_pCollisionData->SphereDataVector.size(); ++j)

  00147	33 d2		 xor	 edx, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00149	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  0014c	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00151	2b cf		 sub	 ecx, edi
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 148  : 			for (DWORD j = 0; j < c_pCollisionData->SphereDataVector.size(); ++j)

  00153	89 95 34 ff ff
	ff		 mov	 DWORD PTR _j$1$[ebp], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00159	f7 e9		 imul	 ecx
  0015b	c1 fa 03	 sar	 edx, 3
  0015e	8b c2		 mov	 eax, edx
  00160	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00163	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 148  : 			for (DWORD j = 0; j < c_pCollisionData->SphereDataVector.size(); ++j)

  00165	0f 84 3e 01 00
	00		 je	 $LN2@UpdateAdva
  0016b	8b 9d 20 ff ff
	ff		 mov	 ebx, DWORD PTR _c_pCollisionData$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1868 :         auto& _My_data = _Mypair._Myval2;

  00171	33 c0		 xor	 eax, eax
  00173	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv653[ebp], 0
  0017d	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv652[ebp], eax
$LL80@UpdateAdva:

; 1899 :         return _My_data._Myfirst[_Pos];

  00183	8d 0c 38	 lea	 ecx, DWORD PTR [eax+edi]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 150  : 				const TSphereData & c = c_pCollisionData->SphereDataVector[j].GetAttribute();

  00186	e8 00 00 00 00	 call	 ?GetAttribute@CSphereCollisionInstance@@QBEABUSSphereData@@XZ ; CSphereCollisionInstance::GetAttribute
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1889 :         return _My_data._Myfirst[_Pos];

  0018b	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 153  : 				D3DXMatrixTranslation(&matPoint, c.v3Position.x, c.v3Position.y, c.v3Position.z);

  0018e	83 ec 0c	 sub	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1889 :         return _My_data._Myfirst[_Pos];

  00191	03 bd 38 ff ff
	ff		 add	 edi, DWORD PTR tv653[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 153  : 				D3DXMatrixTranslation(&matPoint, c.v3Position.x, c.v3Position.y, c.v3Position.z);

  00197	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0019c	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  001a2	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  001a7	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  001ad	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  001b1	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _matPoint$[ebp]
  001b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001bc	50		 push	 eax
  001bd	e8 00 00 00 00	 call	 _D3DXMatrixTranslation@16
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 580  :     D3DXMatrixMultiply(&matT, this, &mat);

  001c2	8d 45 bc	 lea	 eax, DWORD PTR _matCenter$[ebp]
  001c5	50		 push	 eax
  001c6	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _matPoint$[ebp]
  001cc	50		 push	 eax
  001cd	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  001d3	50		 push	 eax
  001d4	e8 00 00 00 00	 call	 _D3DXMatrixMultiply@12
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 154  : 				matPoint = matPoint * matCenter;

  001d9	0f 10 85 3c ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T1[ebp]
  001e0	ff 85 34 ff ff
	ff		 inc	 DWORD PTR _j$1$[ebp]
  001e6	83 85 30 ff ff
	ff 14		 add	 DWORD PTR tv652[ebp], 20 ; 00000014H
  001ed	0f 11 85 7c ff
	ff ff		 movups	 XMMWORD PTR _matPoint$[ebp], xmm0
  001f4	83 85 38 ff ff
	ff 1c		 add	 DWORD PTR tv653[ebp], 28 ; 0000001cH
  001fb	0f 10 85 4c ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T1[ebp+16]
  00202	0f 11 45 8c	 movups	 XMMWORD PTR _matPoint$[ebp+16], xmm0
  00206	0f 10 85 5c ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T1[ebp+32]
  0020d	0f 11 45 9c	 movups	 XMMWORD PTR _matPoint$[ebp+32], xmm0
  00211	0f 10 85 6c ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T1[ebp+48]
  00218	0f 11 45 ac	 movups	 XMMWORD PTR _matPoint$[ebp+48], xmm0

; 155  : 
; 156  : 				rSphereInstance.v3LastPosition.x = matPoint._41;

  0021c	f3 0f 11 47 0c	 movss	 DWORD PTR [edi+12], xmm0

; 157  : 				rSphereInstance.v3LastPosition.y = matPoint._42;

  00221	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _matPoint$[ebp+52]
  00226	f3 0f 11 47 10	 movss	 DWORD PTR [edi+16], xmm0

; 158  : 				rSphereInstance.v3LastPosition.z = matPoint._43;

  0022b	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _matPoint$[ebp+56]
  00230	f3 0f 11 47 14	 movss	 DWORD PTR [edi+20], xmm0

; 159  : 				rSphereInstance.v3Position = rSphereInstance.v3LastPosition;

  00235	f3 0f 7e 47 0c	 movq	 xmm0, QWORD PTR [edi+12]
  0023a	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0023d	66 0f d6 07	 movq	 QWORD PTR [edi], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  00241	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _v3Movement$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 159  : 				rSphereInstance.v3Position = rSphereInstance.v3LastPosition;

  00249	89 47 08	 mov	 DWORD PTR [edi+8], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0024c	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  00251	f3 0f 58 07	 addss	 xmm0, DWORD PTR [edi]
  00255	f3 0f 11 07	 movss	 DWORD PTR [edi], xmm0

; 205  :     y += v.y;

  00259	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _v3Movement$[ebp+4]
  00261	f3 0f 58 47 04	 addss	 xmm0, DWORD PTR [edi+4]
  00266	f3 0f 11 47 04	 movss	 DWORD PTR [edi+4], xmm0

; 206  :     z += v.z;

  0026b	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _v3Movement$[ebp+8]
  00273	f3 0f 58 47 08	 addss	 xmm0, DWORD PTR [edi+8]
  00278	f3 0f 11 47 08	 movss	 DWORD PTR [edi+8], xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0027d	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  00280	8b 7b 08	 mov	 edi, DWORD PTR [ebx+8]
  00283	2b cf		 sub	 ecx, edi
  00285	f7 e9		 imul	 ecx
  00287	c1 fa 03	 sar	 edx, 3
  0028a	8b c2		 mov	 eax, edx
  0028c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0028f	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 148  : 			for (DWORD j = 0; j < c_pCollisionData->SphereDataVector.size(); ++j)

  00291	39 85 34 ff ff
	ff		 cmp	 DWORD PTR _j$1$[ebp], eax
  00297	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR tv652[ebp]
  0029d	0f 82 e0 fe ff
	ff		 jb	 $LL80@UpdateAdva
  002a3	8b 9d 1c ff ff
	ff		 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
$LN2@UpdateAdva:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\list

; 165  :         this->_Ptr = this->_Ptr->_Next;

  002a9	8b 36		 mov	 esi, DWORD PTR [esi]

; 198  :         return this->_Ptr == _Right._Ptr;

  002ab	3b b3 38 03 00
	00		 cmp	 esi, DWORD PTR [ebx+824]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 109  : 	for (; itor != m_BodyPointInstanceList.end(); ++itor)

  002b1	0f 85 be fd ff
	ff		 jne	 $LL32@UpdateAdva
  002b7	5f		 pop	 edi
$LN3@UpdateAdva:

; 160  : 				rSphereInstance.v3Position += v3Movement;
; 161  : 			}
; 162  : 		}
; 163  : 	}
; 164  : }

  002b8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002bb	5e		 pop	 esi
  002bc	33 cd		 xor	 ecx, ebp
  002be	5b		 pop	 ebx
  002bf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002c4	8b e5		 mov	 esp, ebp
  002c6	5d		 pop	 ebp
  002c7	c3		 ret	 0
?UpdateAdvancingPointInstance@CActorInstance@@QAEXXZ ENDP ; CActorInstance::UpdateAdvancingPointInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\list
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\list
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\list
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
;	COMDAT ?TestCollisionWithDynamicSphere@CActorInstance@@UAE_NABUCDynamicSphereInstance@@@Z
_TEXT	SEGMENT
_this$1$ = -8						; size = 4
_i$1$ = -4						; size = 4
_dsi$ = 8						; size = 4
?TestCollisionWithDynamicSphere@CActorInstance@@UAE_NABUCDynamicSphereInstance@@@Z PROC ; CActorInstance::TestCollisionWithDynamicSphere, COMDAT
; _this$ = ecx

; 715  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	8b c1		 mov	 eax, ecx
  00008	89 45 f8	 mov	 DWORD PTR _this$1$[ebp], eax
  0000b	53		 push	 ebx
  0000c	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\list

; 1090 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  0000d	8b 80 38 03 00
	00		 mov	 eax, DWORD PTR [eax+824]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 715  : {

  00013	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\list

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00014	8b 30		 mov	 esi, DWORD PTR [eax]
  00016	3b f0		 cmp	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 717  : 	for (; itorMain != m_BodyPointInstanceList.end(); ++itorMain)

  00018	74 70		 je	 SHORT $LN51@TestCollis
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL21@TestCollis:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00020	8b 5e 18	 mov	 ebx, DWORD PTR [esi+24]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 720  : 		for (DWORD i = 0; i < c_rMainSphereVector.size(); ++i)

  00023	33 c9		 xor	 ecx, ecx
  00025	89 4d fc	 mov	 DWORD PTR _i$1$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00028	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0002d	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00030	2b cb		 sub	 ecx, ebx
  00032	f7 e9		 imul	 ecx
  00034	03 d1		 add	 edx, ecx
  00036	c1 fa 04	 sar	 edx, 4
  00039	8b c2		 mov	 eax, edx
  0003b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0003e	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 720  : 		for (DWORD i = 0; i < c_rMainSphereVector.size(); ++i)

  00040	74 3b		 je	 SHORT $LN2@TestCollis
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1868 :         auto& _My_data = _Mypair._Myval2;

  00042	33 ff		 xor	 edi, edi
$LL7@TestCollis:
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 724  : 			if (DetectCollisionDynamicSphereVSDynamicSphere(c_rMainSphere, dsi))

  00044	ff 75 08	 push	 DWORD PTR _dsi$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1899 :         return _My_data._Myfirst[_Pos];

  00047	8d 04 1f	 lea	 eax, DWORD PTR [edi+ebx]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 724  : 			if (DetectCollisionDynamicSphereVSDynamicSphere(c_rMainSphere, dsi))

  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ?DetectCollisionDynamicSphereVSDynamicSphere@@YA_NABUCDynamicSphereInstance@@0@Z ; DetectCollisionDynamicSphereVSDynamicSphere
  00050	83 c4 08	 add	 esp, 8
  00053	84 c0		 test	 al, al
  00055	75 3e		 jne	 SHORT $LN44@TestCollis
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00057	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  0005a	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0005f	8b 5e 18	 mov	 ebx, DWORD PTR [esi+24]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 720  : 		for (DWORD i = 0; i < c_rMainSphereVector.size(); ++i)

  00062	83 c7 1c	 add	 edi, 28			; 0000001cH
  00065	ff 45 fc	 inc	 DWORD PTR _i$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00068	2b cb		 sub	 ecx, ebx
  0006a	f7 e9		 imul	 ecx
  0006c	03 d1		 add	 edx, ecx
  0006e	c1 fa 04	 sar	 edx, 4
  00071	8b c2		 mov	 eax, edx
  00073	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00076	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 720  : 		for (DWORD i = 0; i < c_rMainSphereVector.size(); ++i)

  00078	39 45 fc	 cmp	 DWORD PTR _i$1$[ebp], eax
  0007b	72 c7		 jb	 SHORT $LL7@TestCollis
$LN2@TestCollis:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\list

; 198  :         return this->_Ptr == _Right._Ptr;

  0007d	8b 45 f8	 mov	 eax, DWORD PTR _this$1$[ebp]

; 165  :         this->_Ptr = this->_Ptr->_Next;

  00080	8b 36		 mov	 esi, DWORD PTR [esi]

; 198  :         return this->_Ptr == _Right._Ptr;

  00082	3b b0 38 03 00
	00		 cmp	 esi, DWORD PTR [eax+824]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 717  : 	for (; itorMain != m_BodyPointInstanceList.end(); ++itorMain)

  00088	75 96		 jne	 SHORT $LL21@TestCollis
$LN51@TestCollis:
  0008a	5f		 pop	 edi

; 725  : 			{
; 726  : 				return true;
; 727  : 			}
; 728  : 		}
; 729  : 	}
; 730  : 
; 731  : 	return false;
; 732  : }

  0008b	5e		 pop	 esi
  0008c	32 c0		 xor	 al, al
  0008e	5b		 pop	 ebx
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c2 04 00	 ret	 4
$LN44@TestCollis:
  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	b0 01		 mov	 al, 1
  00099	5b		 pop	 ebx
  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c2 04 00	 ret	 4
?TestCollisionWithDynamicSphere@CActorInstance@@UAE_NABUCDynamicSphereInstance@@@Z ENDP ; CActorInstance::TestCollisionWithDynamicSphere
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\list
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\list
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
;	COMDAT ?CheckCollisionDetection@CActorInstance@@QAE_NPBV?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@PAUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
_c_rAttackingSphere$1$ = -24				; size = 4
_this$1$ = -20						; size = 4
tv700 = -16						; size = 4
_i$1$ = -12						; size = 4
tv701 = -8						; size = 4
_j$1$ = -4						; size = 4
_c_pAttackingSphereVector$ = 8				; size = 4
_pv3Position$ = 12					; size = 4
?CheckCollisionDetection@CActorInstance@@QAE_NPBV?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@PAUD3DXVECTOR3@@@Z PROC ; CActorInstance::CheckCollisionDetection, COMDAT
; _this$ = ecx

; 167  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	53		 push	 ebx

; 168  : 	if (!c_pAttackingSphereVector)

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _c_pAttackingSphereVector$[ebp]
  0000a	8b c1		 mov	 eax, ecx
  0000c	89 45 ec	 mov	 DWORD PTR _this$1$[ebp], eax
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	85 db		 test	 ebx, ebx
  00013	0f 84 48 01 00
	00		 je	 $LN84@CheckColli
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\list

; 1090 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  00019	8b 80 40 03 00
	00		 mov	 eax, DWORD PTR [eax+832]

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  0001f	8b 30		 mov	 esi, DWORD PTR [eax]
  00021	3b f0		 cmp	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 175  : 	for (itor = m_DefendingPointInstanceList.begin(); itor != m_DefendingPointInstanceList.end(); ++itor)

  00023	0f 84 38 01 00
	00		 je	 $LN84@CheckColli
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL91@CheckColli:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00030	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00033	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00038	2b 0b		 sub	 ecx, DWORD PTR [ebx]
  0003a	f7 e9		 imul	 ecx
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 179  : 		for (DWORD i = 0; i < c_pAttackingSphereVector->size(); ++i)

  0003c	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$1$[ebp], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00043	03 d1		 add	 edx, ecx
  00045	c1 fa 04	 sar	 edx, 4
  00048	8b c2		 mov	 eax, edx
  0004a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0004d	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 179  : 		for (DWORD i = 0; i < c_pAttackingSphereVector->size(); ++i)

  0004f	0f 84 fb 00 00
	00		 je	 $LN2@CheckColli
  00055	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv700[ebp], 0
  0005c	0f 1f 40 00	 npad	 4
$LL92@CheckColli:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00060	8b 7e 1c	 mov	 edi, DWORD PTR [esi+28]
  00063	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00068	8b 5e 18	 mov	 ebx, DWORD PTR [esi+24]
  0006b	8b cf		 mov	 ecx, edi
  0006d	2b cb		 sub	 ecx, ebx
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 180  : 		for (DWORD j = 0; j < c_pDefendingSphereVector->size(); ++j)

  0006f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _j$1$[ebp], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00076	f7 e9		 imul	 ecx
  00078	03 d1		 add	 edx, ecx
  0007a	c1 fa 04	 sar	 edx, 4
  0007d	8b c2		 mov	 eax, edx
  0007f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00082	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 180  : 		for (DWORD j = 0; j < c_pDefendingSphereVector->size(); ++j)

  00084	0f 84 98 00 00
	00		 je	 $LN5@CheckColli
  0008a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv701[ebp], 0
$LL93@CheckColli:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1913 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00091	8b 4d 08	 mov	 ecx, DWORD PTR _c_pAttackingSphereVector$[ebp]
  00094	8b 01		 mov	 eax, DWORD PTR [ecx]
  00096	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00099	2b c8		 sub	 ecx, eax
  0009b	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  000a0	f7 e9		 imul	 ecx
  000a2	03 d1		 add	 edx, ecx
  000a4	c1 fa 04	 sar	 edx, 4
  000a7	8b c2		 mov	 eax, edx
  000a9	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000ac	03 c2		 add	 eax, edx
  000ae	3b 45 f4	 cmp	 eax, DWORD PTR _i$1$[ebp]
  000b1	0f 86 04 01 00
	00		 jbe	 $LN71@CheckColli

; 1915 :         }
; 1916 : 
; 1917 :         return _My_data._Myfirst[_Pos];

  000b7	8b 4d 08	 mov	 ecx, DWORD PTR _c_pAttackingSphereVector$[ebp]

; 1913 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  000ba	2b fb		 sub	 edi, ebx

; 1917 :         return _My_data._Myfirst[_Pos];

  000bc	8b 01		 mov	 eax, DWORD PTR [ecx]
  000be	8b 4d f0	 mov	 ecx, DWORD PTR tv700[ebp]
  000c1	03 c8		 add	 ecx, eax

; 1913 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  000c3	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  000c8	f7 ef		 imul	 edi

; 1917 :         return _My_data._Myfirst[_Pos];

  000ca	89 4d e8	 mov	 DWORD PTR _c_rAttackingSphere$1$[ebp], ecx

; 1913 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  000cd	03 d7		 add	 edx, edi
  000cf	c1 fa 04	 sar	 edx, 4
  000d2	8b c2		 mov	 eax, edx
  000d4	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000d7	03 c2		 add	 eax, edx
  000d9	3b 45 fc	 cmp	 eax, DWORD PTR _j$1$[ebp]
  000dc	0f 86 d9 00 00
	00		 jbe	 $LN71@CheckColli

; 1915 :         }
; 1916 : 
; 1917 :         return _My_data._Myfirst[_Pos];

  000e2	8b 7d f8	 mov	 edi, DWORD PTR tv701[ebp]
  000e5	03 fb		 add	 edi, ebx
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 185  : 			if (DetectCollisionDynamicSphereVSDynamicSphere(c_rAttackingSphere, c_rDefendingSphere))

  000e7	57		 push	 edi
  000e8	51		 push	 ecx
  000e9	e8 00 00 00 00	 call	 ?DetectCollisionDynamicSphereVSDynamicSphere@@YA_NABUCDynamicSphereInstance@@0@Z ; DetectCollisionDynamicSphereVSDynamicSphere
  000ee	83 c4 08	 add	 esp, 8
  000f1	84 c0		 test	 al, al
  000f3	75 77		 jne	 SHORT $LN72@CheckColli
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000f5	8b 7e 1c	 mov	 edi, DWORD PTR [esi+28]
  000f8	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  000fd	8b 5e 18	 mov	 ebx, DWORD PTR [esi+24]
  00100	8b cf		 mov	 ecx, edi
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 180  : 		for (DWORD j = 0; j < c_pDefendingSphereVector->size(); ++j)

  00102	ff 45 fc	 inc	 DWORD PTR _j$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00105	2b cb		 sub	 ecx, ebx
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 180  : 		for (DWORD j = 0; j < c_pDefendingSphereVector->size(); ++j)

  00107	83 45 f8 1c	 add	 DWORD PTR tv701[ebp], 28 ; 0000001cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0010b	f7 e9		 imul	 ecx
  0010d	03 d1		 add	 edx, ecx
  0010f	c1 fa 04	 sar	 edx, 4
  00112	8b c2		 mov	 eax, edx
  00114	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00117	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 180  : 		for (DWORD j = 0; j < c_pDefendingSphereVector->size(); ++j)

  00119	39 45 fc	 cmp	 DWORD PTR _j$1$[ebp], eax
  0011c	0f 82 6f ff ff
	ff		 jb	 $LL93@CheckColli
$LN5@CheckColli:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00122	8b 5d 08	 mov	 ebx, DWORD PTR _c_pAttackingSphereVector$[ebp]
  00125	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 179  : 		for (DWORD i = 0; i < c_pAttackingSphereVector->size(); ++i)

  0012a	8b 7d f4	 mov	 edi, DWORD PTR _i$1$[ebp]
  0012d	83 45 f0 1c	 add	 DWORD PTR tv700[ebp], 28 ; 0000001cH
  00131	47		 inc	 edi
  00132	89 7d f4	 mov	 DWORD PTR _i$1$[ebp], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00135	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00138	2b 0b		 sub	 ecx, DWORD PTR [ebx]
  0013a	f7 e9		 imul	 ecx
  0013c	03 d1		 add	 edx, ecx
  0013e	c1 fa 04	 sar	 edx, 4
  00141	8b c2		 mov	 eax, edx
  00143	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00146	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 179  : 		for (DWORD i = 0; i < c_pAttackingSphereVector->size(); ++i)

  00148	3b f8		 cmp	 edi, eax
  0014a	0f 82 10 ff ff
	ff		 jb	 $LL92@CheckColli
$LN2@CheckColli:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\list

; 198  :         return this->_Ptr == _Right._Ptr;

  00150	8b 45 ec	 mov	 eax, DWORD PTR _this$1$[ebp]

; 165  :         this->_Ptr = this->_Ptr->_Next;

  00153	8b 36		 mov	 esi, DWORD PTR [esi]

; 198  :         return this->_Ptr == _Right._Ptr;

  00155	3b b0 40 03 00
	00		 cmp	 esi, DWORD PTR [eax+832]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 175  : 	for (itor = m_DefendingPointInstanceList.begin(); itor != m_DefendingPointInstanceList.end(); ++itor)

  0015b	0f 85 cf fe ff
	ff		 jne	 $LL91@CheckColli
$LN84@CheckColli:
  00161	5f		 pop	 edi

; 194  : }

  00162	5e		 pop	 esi
  00163	32 c0		 xor	 al, al
  00165	5b		 pop	 ebx
  00166	8b e5		 mov	 esp, ebp
  00168	5d		 pop	 ebp
  00169	c2 08 00	 ret	 8
$LN72@CheckColli:
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0016c	8b 45 e8	 mov	 eax, DWORD PTR _c_rAttackingSphere$1$[ebp]
  0016f	f3 0f 10 07	 movss	 xmm0, DWORD PTR [edi]
  00173	f3 0f 10 5f 04	 movss	 xmm3, DWORD PTR [edi+4]
  00178	f3 0f 10 57 08	 movss	 xmm2, DWORD PTR [edi+8]
  0017d	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  00181	f3 0f 58 58 04	 addss	 xmm3, DWORD PTR [eax+4]
  00186	f3 0f 58 50 08	 addss	 xmm2, DWORD PTR [eax+8]

; 180  :     x = fx;

  0018b	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f000000
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 187  : 				*pv3Position = (c_rAttackingSphere.v3Position + c_rDefendingSphere.v3Position) / 2.0f;

  00193	8b 45 0c	 mov	 eax, DWORD PTR _pv3Position$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 275  :     FLOAT fInv = 1.0f / f;

  00196	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0019a	5f		 pop	 edi

; 180  :     x = fx;

  0019b	f3 0f 59 d9	 mulss	 xmm3, xmm1
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 194  : }

  0019f	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 181  :     y = fy;

  001a0	f3 0f 59 d1	 mulss	 xmm2, xmm1
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 194  : }

  001a4	5b		 pop	 ebx
  001a5	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  001a9	f3 0f 11 58 04	 movss	 DWORD PTR [eax+4], xmm3
  001ae	f3 0f 11 50 08	 movss	 DWORD PTR [eax+8], xmm2
  001b3	b0 01		 mov	 al, 1
  001b5	8b e5		 mov	 esp, ebp
  001b7	5d		 pop	 ebp
  001b8	c2 08 00	 ret	 8
$LN71@CheckColli:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1914 :             _Xrange();

  001bb	e8 00 00 00 00	 call	 ?_Xrange@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@CAXXZ ; std::vector<CDynamicSphereInstance,std::allocator<CDynamicSphereInstance> >::_Xrange
$LN94@CheckColli:
  001c0	cc		 int	 3
?CheckCollisionDetection@CActorInstance@@QAE_NPBV?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@PAUD3DXVECTOR3@@@Z ENDP ; CActorInstance::CheckCollisionDetection
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
;	COMDAT ?UpdatePointInstance@CActorInstance@@QAEXPAUSCollisionPointInstance@1@@Z
_TEXT	SEGMENT
_pModelInstance$1$ = -200				; size = 4
_matPoint$1 = -196					; size = 64
$T2 = -132						; size = 64
_matBone$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_pPointInstance$ = 8					; size = 4
?UpdatePointInstance@CActorInstance@@QAEXPAUSCollisionPointInstance@1@@Z PROC ; CActorInstance::UpdatePointInstance, COMDAT
; _this$ = ecx

; 34   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c8 00 00
	00		 sub	 esp, 200		; 000000c8H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _pPointInstance$[ebp]
  00017	57		 push	 edi
  00018	8b f9		 mov	 edi, ecx

; 35   : 	if (!pPointInstance)

  0001a	85 db		 test	 ebx, ebx
  0001c	0f 84 6e 01 00
	00		 je	 $LN3@UpdatePoin

; 36   : 	{
; 37   : 		assert(!"CActorInstance::UpdatePointInstance - pPointInstance is NULL");
; 38   : 		return;
; 39   : 	}
; 40   : 
; 41   : 	D3DXMATRIX matBone;
; 42   : 
; 43   : 	if (pPointInstance->isAttached)

  00022	83 7b 04 00	 cmp	 DWORD PTR [ebx+4], 0
  00026	56		 push	 esi
  00027	0f 84 a1 00 00
	00		 je	 $LN6@UpdatePoin
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0002d	8b 87 8c 02 00
	00		 mov	 eax, DWORD PTR [edi+652]
  00033	8b 8f 88 02 00
	00		 mov	 ecx, DWORD PTR [edi+648]
  00039	2b c1		 sub	 eax, ecx
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 45   : 		if (pPointInstance->dwModelIndex>=m_LODControllerVector.size())

  0003b	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0003e	c1 f8 02	 sar	 eax, 2
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 45   : 		if (pPointInstance->dwModelIndex>=m_LODControllerVector.size())

  00041	3b d0		 cmp	 edx, eax
  00043	0f 83 46 01 00
	00		 jae	 $LN54@UpdatePoin

; 46   : 		{
; 47   : 			//Tracenf("CActorInstance::UpdatePointInstance - rInstance.dwModelIndex=%d >= m_LODControllerVector.size()=%d",
; 48   : 			//		pPointInstance->dwModelIndex>m_LODControllerVector.size());
; 49   : 			return;
; 50   : 		}
; 51   : 
; 52   : 		CGrannyLODController* pGrnLODController=m_LODControllerVector[pPointInstance->dwModelIndex];

  00049	8b 0c 91	 mov	 ecx, DWORD PTR [ecx+edx*4]

; 53   : 		if (!pGrnLODController)

  0004c	85 c9		 test	 ecx, ecx
  0004e	0f 84 3b 01 00
	00		 je	 $LN54@UpdatePoin

; 54   : 		{
; 55   : 			//Tracenf("CActorInstance::UpdatePointInstance - m_LODControllerVector[pPointInstance->dwModelIndex=%d] is NULL", pPointInstance->dwModelIndex);
; 56   : 			return;
; 57   : 		}
; 58   : 
; 59   : 		CGrannyModelInstance * pModelInstance = pGrnLODController->GetModelInstance();

  00054	e8 00 00 00 00	 call	 ?GetModelInstance@CGrannyLODController@@QAEPAVCGrannyModelInstance@@XZ ; CGrannyLODController::GetModelInstance
  00059	89 85 38 ff ff
	ff		 mov	 DWORD PTR _pModelInstance$1$[ebp], eax

; 60   : 		if (!pModelInstance)

  0005f	85 c0		 test	 eax, eax
  00061	0f 84 28 01 00
	00		 je	 $LN54@UpdatePoin

; 61   : 		{
; 62   : 			//Tracenf("CActorInstance::UpdatePointInstance - pGrnLODController->GetModelInstance() is NULL");
; 63   : 			return;
; 64   : 		}
; 65   : 
; 66   : 		D3DXMATRIX * pmatBone = (D3DXMATRIX *)pModelInstance->GetBoneMatrixPointer(pPointInstance->dwBoneIndex);

  00067	ff 73 0c	 push	 DWORD PTR [ebx+12]
  0006a	8b c8		 mov	 ecx, eax
  0006c	e8 00 00 00 00	 call	 ?GetBoneMatrixPointer@CGrannyModelInstance@@QBEPBMH@Z ; CGrannyModelInstance::GetBoneMatrixPointer

; 67   : 		matBone = *(D3DXMATRIX *)pModelInstance->GetCompositeBoneMatrixPointer(pPointInstance->dwBoneIndex);

  00071	ff 73 0c	 push	 DWORD PTR [ebx+12]
  00074	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR _pModelInstance$1$[ebp]
  0007a	8b f0		 mov	 esi, eax
  0007c	e8 00 00 00 00	 call	 ?GetCompositeBoneMatrixPointer@CGrannyModelInstance@@QBEPBMH@Z ; CGrannyModelInstance::GetCompositeBoneMatrixPointer
  00081	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00084	0f 11 45 bc	 movups	 XMMWORD PTR _matBone$[ebp], xmm0
  00088	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  0008c	0f 11 45 cc	 movups	 XMMWORD PTR _matBone$[ebp+16], xmm0
  00090	0f 10 40 20	 movups	 xmm0, XMMWORD PTR [eax+32]
  00094	0f 11 45 dc	 movups	 XMMWORD PTR _matBone$[ebp+32], xmm0
  00098	0f 10 40 30	 movups	 xmm0, XMMWORD PTR [eax+48]

; 71   : 		matBone *= m_worldMatrix;

  0009c	8d 47 6c	 lea	 eax, DWORD PTR [edi+108]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 512  :     D3DXMatrixMultiply(this, this, &mat);

  0009f	50		 push	 eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 67   : 		matBone = *(D3DXMATRIX *)pModelInstance->GetCompositeBoneMatrixPointer(pPointInstance->dwBoneIndex);

  000a0	0f 11 45 ec	 movups	 XMMWORD PTR _matBone$[ebp+48], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 512  :     D3DXMatrixMultiply(this, this, &mat);

  000a4	8d 45 bc	 lea	 eax, DWORD PTR _matBone$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 68   : 		matBone._41 = pmatBone->_41;

  000a7	f3 0f 10 46 30	 movss	 xmm0, DWORD PTR [esi+48]
  000ac	f3 0f 11 45 ec	 movss	 DWORD PTR _matBone$[ebp+48], xmm0

; 69   : 		matBone._42 = pmatBone->_42;

  000b1	f3 0f 10 46 34	 movss	 xmm0, DWORD PTR [esi+52]
  000b6	f3 0f 11 45 f0	 movss	 DWORD PTR _matBone$[ebp+52], xmm0

; 70   : 		matBone._43 = pmatBone->_43;

  000bb	f3 0f 10 46 38	 movss	 xmm0, DWORD PTR [esi+56]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 512  :     D3DXMatrixMultiply(this, this, &mat);

  000c0	50		 push	 eax
  000c1	50		 push	 eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 70   : 		matBone._43 = pmatBone->_43;

  000c2	f3 0f 11 45 f4	 movss	 DWORD PTR _matBone$[ebp+56], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 512  :     D3DXMatrixMultiply(this, this, &mat);

  000c7	e8 00 00 00 00	 call	 _D3DXMatrixMultiply@12
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 72   : 	}

  000cc	eb 26		 jmp	 SHORT $LN7@UpdatePoin
$LN6@UpdatePoin:

; 73   : 	else
; 74   : 	{
; 75   : 		matBone = m_worldMatrix;

  000ce	0f 10 47 6c	 movups	 xmm0, XMMWORD PTR [edi+108]
  000d2	0f 11 45 bc	 movups	 XMMWORD PTR _matBone$[ebp], xmm0
  000d6	0f 10 47 7c	 movups	 xmm0, XMMWORD PTR [edi+124]
  000da	0f 11 45 cc	 movups	 XMMWORD PTR _matBone$[ebp+16], xmm0
  000de	0f 10 87 8c 00
	00 00		 movups	 xmm0, XMMWORD PTR [edi+140]
  000e5	0f 11 45 dc	 movups	 XMMWORD PTR _matBone$[ebp+32], xmm0
  000e9	0f 10 87 9c 00
	00 00		 movups	 xmm0, XMMWORD PTR [edi+156]
  000f0	0f 11 45 ec	 movups	 XMMWORD PTR _matBone$[ebp+48], xmm0
$LN7@UpdatePoin:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1801 :         return const_iterator(_My_data._Myfirst, _STD addressof(_My_data));

  000f4	8b 03		 mov	 eax, DWORD PTR [ebx]

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  000f6	8b 73 10	 mov	 esi, DWORD PTR [ebx+16]
  000f9	8b 78 08	 mov	 edi, DWORD PTR [eax+8]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 82   : 	{

  000fc	3b 78 0c	 cmp	 edi, DWORD PTR [eax+12]
  000ff	0f 84 8a 00 00
	00		 je	 $LN54@UpdatePoin
$LL53@UpdatePoin:

; 83   : 		const TSphereData & c = sit->GetAttribute();//c_pCollisionData->SphereDataVector[j].GetAttribute();

  00105	8b cf		 mov	 ecx, edi
  00107	e8 00 00 00 00	 call	 ?GetAttribute@CSphereCollisionInstance@@QBEABUSSphereData@@XZ ; CSphereCollisionInstance::GetAttribute

; 84   : 
; 85   : 		D3DXMATRIX matPoint;
; 86   : 		D3DXMatrixTranslation(&matPoint, c.v3Position.x, c.v3Position.y, c.v3Position.z);

  0010c	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0010f	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00114	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0011a	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0011f	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00125	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00129	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _matPoint$1[ebp]
  0012f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00134	50		 push	 eax
  00135	e8 00 00 00 00	 call	 _D3DXMatrixTranslation@16
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 580  :     D3DXMatrixMultiply(&matT, this, &mat);

  0013a	8d 45 bc	 lea	 eax, DWORD PTR _matBone$[ebp]
  0013d	50		 push	 eax
  0013e	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _matPoint$1[ebp]
  00144	50		 push	 eax
  00145	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  0014b	50		 push	 eax
  0014c	e8 00 00 00 00	 call	 _D3DXMatrixMultiply@12
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 89   : 		dit->v3LastPosition = dit->v3Position;

  00151	f3 0f 7e 06	 movq	 xmm0, QWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 79   :         ++_Ptr;

  00155	8d 76 1c	 lea	 esi, DWORD PTR [esi+28]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 89   : 		dit->v3LastPosition = dit->v3Position;

  00158	8b 46 ec	 mov	 eax, DWORD PTR [esi-20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 79   :         ++_Ptr;

  0015b	83 c7 14	 add	 edi, 20			; 00000014H
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 89   : 		dit->v3LastPosition = dit->v3Position;

  0015e	66 0f d6 46 f0	 movq	 QWORD PTR [esi-16], xmm0

; 90   : 		dit->v3Position.x = matPoint._41;

  00163	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR $T2[ebp+48]
  00168	f3 0f 11 46 e4	 movss	 DWORD PTR [esi-28], xmm0

; 91   : 		dit->v3Position.y = matPoint._42;

  0016d	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR $T2[ebp+52]
  00172	f3 0f 11 46 e8	 movss	 DWORD PTR [esi-24], xmm0

; 92   : 		dit->v3Position.z = matPoint._43;

  00177	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR $T2[ebp+56]
  0017c	89 46 f8	 mov	 DWORD PTR [esi-8], eax
  0017f	f3 0f 11 46 ec	 movss	 DWORD PTR [esi-20], xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00184	8b 03		 mov	 eax, DWORD PTR [ebx]

; 163  :         return _Ptr == _Right._Ptr;

  00186	3b 78 0c	 cmp	 edi, DWORD PTR [eax+12]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 81   : 	for (;sit!=pPointInstance->c_pCollisionData->SphereDataVector.end();++sit,++dit)

  00189	0f 85 76 ff ff
	ff		 jne	 $LL53@UpdatePoin
$LN54@UpdatePoin:
  0018f	5e		 pop	 esi
$LN3@UpdatePoin:

; 93   : 	}
; 94   : }

  00190	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00193	5f		 pop	 edi
  00194	33 cd		 xor	 ecx, ebp
  00196	5b		 pop	 ebx
  00197	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0019c	8b e5		 mov	 esp, ebp
  0019e	5d		 pop	 ebp
  0019f	c2 04 00	 ret	 4
?UpdatePointInstance@CActorInstance@@QAEXPAUSCollisionPointInstance@1@@Z ENDP ; CActorInstance::UpdatePointInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\list
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\list
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\list
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
;	COMDAT ?UpdatePointInstance@CActorInstance@@QAEXXZ
_TEXT	SEGMENT
?UpdatePointInstance@CActorInstance@@QAEXXZ PROC	; CActorInstance::UpdatePointInstance, COMDAT
; _this$ = ecx

; 27   : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\list

; 1090 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  00004	8b 87 40 03 00
	00		 mov	 eax, DWORD PTR [edi+832]

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  0000a	8b 30		 mov	 esi, DWORD PTR [eax]
  0000c	3b f0		 cmp	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 29   : 	for (itor = m_DefendingPointInstanceList.begin(); itor != m_DefendingPointInstanceList.end(); ++itor)

  0000e	74 15		 je	 SHORT $LN3@UpdatePoin
$LL23@UpdatePoin:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\list

; 151  :         return this->_Ptr->_Myval;

  00010	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 30   : 		UpdatePointInstance(&(*itor));

  00013	8b cf		 mov	 ecx, edi
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ?UpdatePointInstance@CActorInstance@@QAEXPAUSCollisionPointInstance@1@@Z ; CActorInstance::UpdatePointInstance
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\list

; 165  :         this->_Ptr = this->_Ptr->_Next;

  0001b	8b 36		 mov	 esi, DWORD PTR [esi]

; 198  :         return this->_Ptr == _Right._Ptr;

  0001d	3b b7 40 03 00
	00		 cmp	 esi, DWORD PTR [edi+832]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 29   : 	for (itor = m_DefendingPointInstanceList.begin(); itor != m_DefendingPointInstanceList.end(); ++itor)

  00023	75 eb		 jne	 SHORT $LL23@UpdatePoin
$LN3@UpdatePoin:
  00025	5f		 pop	 edi

; 31   : }

  00026	5e		 pop	 esi
  00027	c3		 ret	 0
?UpdatePointInstance@CActorInstance@@QAEXXZ ENDP	; CActorInstance::UpdatePointInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
;	COMDAT ?CreateCollisionInstancePiece@CActorInstance@@QAE_NKPBUSAttachingData@NRaceData@@PAUSCollisionPointInstance@1@@Z
_TEXT	SEGMENT
_dsi$ = -28						; size = 28
_dwAttachingModelIndex$ = 8				; size = 4
_iAttachingBoneIndex$1 = 12				; size = 4
_c_pAttachingData$ = 12					; size = 4
_pPointInstance$ = 16					; size = 4
?CreateCollisionInstancePiece@CActorInstance@@QAE_NKPBUSAttachingData@NRaceData@@PAUSCollisionPointInstance@1@@Z PROC ; CActorInstance::CreateCollisionInstancePiece, COMDAT
; _this$ = ecx

; 197  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	53		 push	 ebx

; 198  : 	if (!c_pAttachingData)

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR _c_pAttachingData$[ebp]
  0000a	57		 push	 edi
  0000b	85 db		 test	 ebx, ebx
  0000d	0f 84 57 01 00
	00		 je	 $LN66@CreateColl

; 199  : 	{
; 200  : 		assert(!"CActorInstance::CreateCollisionInstancePiece - c_pAttachingData is NULL");
; 201  : 		return false;
; 202  : 	}
; 203  : 
; 204  : 	if (!c_pAttachingData->pCollisionData)

  00013	83 7b 24 00	 cmp	 DWORD PTR [ebx+36], 0
  00017	0f 84 4d 01 00
	00		 je	 $LN66@CreateColl

; 205  : 	{
; 206  : 		assert(!"CActorInstance::CreateCollisionInstancePiece - c_pAttachingData->pCollisionData is NULL");
; 207  : 		return false;
; 208  : 	}
; 209  : 
; 210  : 	if (!pPointInstance)

  0001d	8b 7d 10	 mov	 edi, DWORD PTR _pPointInstance$[ebp]
  00020	85 ff		 test	 edi, edi
  00022	0f 84 42 01 00
	00		 je	 $LN66@CreateColl

; 214  : 	}
; 215  : 
; 216  : 	pPointInstance->dwModelIndex = dwAttachingModelIndex;

  00028	8b 55 08	 mov	 edx, DWORD PTR _dwAttachingModelIndex$[ebp]
  0002b	89 57 08	 mov	 DWORD PTR [edi+8], edx

; 217  : 	pPointInstance->isAttached = FALSE;

  0002e	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 218  : 	pPointInstance->dwBoneIndex = 0;

  00035	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0

; 219  : 	pPointInstance->c_pCollisionData = c_pAttachingData->pCollisionData;

  0003c	8b 43 24	 mov	 eax, DWORD PTR [ebx+36]
  0003f	89 07		 mov	 DWORD PTR [edi], eax

; 220  : 
; 221  : 	if (c_pAttachingData->isAttaching)

  00041	83 7b 04 00	 cmp	 DWORD PTR [ebx+4], 0
  00045	74 43		 je	 SHORT $LN10@CreateColl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1889 :         return _My_data._Myfirst[_Pos];

  00047	8b 89 88 02 00
	00		 mov	 ecx, DWORD PTR [ecx+648]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 225  : 		CGrannyModelInstance * pModelInstance = m_LODControllerVector[dwAttachingModelIndex]->GetModelInstance();

  0004d	8b 0c 91	 mov	 ecx, DWORD PTR [ecx+edx*4]
  00050	e8 00 00 00 00	 call	 ?GetModelInstance@CGrannyLODController@@QAEPAVCGrannyModelInstance@@XZ ; CGrannyLODController::GetModelInstance

; 227  : 		if (pModelInstance && pModelInstance->GetBoneIndexByName(c_pAttachingData->strAttachingBoneName.c_str(),

  00055	85 c0		 test	 eax, eax
  00057	74 23		 je	 SHORT $LN9@CreateColl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00059	83 7b 20 10	 cmp	 DWORD PTR [ebx+32], 16	; 00000010H

; 4107 :         return _Mypair._Myval2._Myptr();

  0005d	8d 4b 0c	 lea	 ecx, DWORD PTR [ebx+12]

; 2236 :         if (_Large_string_engaged()) {

  00060	72 02		 jb	 SHORT $LN58@CreateColl

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  00062	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN58@CreateColl:
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 227  : 		if (pModelInstance && pModelInstance->GetBoneIndexByName(c_pAttachingData->strAttachingBoneName.c_str(),

  00064	8d 55 0c	 lea	 edx, DWORD PTR _iAttachingBoneIndex$1[ebp]
  00067	52		 push	 edx
  00068	51		 push	 ecx
  00069	8b c8		 mov	 ecx, eax
  0006b	e8 00 00 00 00	 call	 ?GetBoneIndexByName@CGrannyModelInstance@@QBE_NPBDPAH@Z ; CGrannyModelInstance::GetBoneIndexByName
  00070	84 c0		 test	 al, al
  00072	74 08		 je	 SHORT $LN9@CreateColl

; 228  : 												&iAttachingBoneIndex))
; 229  : 		{
; 230  : 			pPointInstance->isAttached = TRUE;
; 231  : 			pPointInstance->dwBoneIndex = iAttachingBoneIndex;

  00074	8b 45 0c	 mov	 eax, DWORD PTR _iAttachingBoneIndex$1[ebp]
  00077	89 47 0c	 mov	 DWORD PTR [edi+12], eax

; 232  : 		}

  0007a	eb 07		 jmp	 SHORT $LN82@CreateColl
$LN9@CreateColl:

; 233  : 		else
; 234  : 		{
; 235  : 			//TraceError("CActorInstance::CreateCollisionInstancePiece: Cannot get matrix of bone %s ModelInstance 0x%p",	c_pAttachingData->strAttachingBoneName.c_str(), pModelInstance);
; 236  : 			pPointInstance->isAttached = TRUE;
; 237  : 			pPointInstance->dwBoneIndex = 0;

  0007c	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN82@CreateColl:

; 242  : 	const CSphereCollisionInstanceVector & c_rSphereDataVector = c_pAttachingData->pCollisionData->SphereDataVector;

  00083	c7 47 04 01 00
	00 00		 mov	 DWORD PTR [edi+4], 1
$LN10@CreateColl:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0008a	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 242  : 	const CSphereCollisionInstanceVector & c_rSphereDataVector = c_pAttachingData->pCollisionData->SphereDataVector;

  0008d	8b 5b 24	 mov	 ebx, DWORD PTR [ebx+36]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00090	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00093	74 03		 je	 SHORT $LN31@CreateColl

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00095	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN31@CreateColl:

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00098	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  0009b	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  000a0	2b 4b 08	 sub	 ecx, DWORD PTR [ebx+8]
  000a3	f7 e9		 imul	 ecx

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  000a5	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  000a8	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  000ad	2b 4f 10	 sub	 ecx, DWORD PTR [edi+16]

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000b0	c1 fa 03	 sar	 edx, 3
  000b3	56		 push	 esi
  000b4	8b f2		 mov	 esi, edx
  000b6	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  000b9	03 f2		 add	 esi, edx

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  000bb	f7 e9		 imul	 ecx
  000bd	03 d1		 add	 edx, ecx
  000bf	c1 fa 04	 sar	 edx, 4
  000c2	8b c2		 mov	 eax, edx
  000c4	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000c7	03 c2		 add	 eax, edx

; 1680 :         if (_Newcapacity > capacity()) { // something to do (reserve() never shrinks)

  000c9	3b f0		 cmp	 esi, eax
  000cb	76 15		 jbe	 SHORT $LN37@CreateColl

; 1681 :             if (_Newcapacity > max_size()) {

  000cd	81 fe 49 92 24
	09		 cmp	 esi, 153391689		; 09249249H
  000d3	0f 87 9b 00 00
	00		 ja	 $LN84@CreateColl

; 1683 :             }
; 1684 : 
; 1685 :             _Reallocate_exactly(_Newcapacity);

  000d9	56		 push	 esi
  000da	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  000dd	e8 00 00 00 00	 call	 ?_Reallocate_exactly@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@AAEXI@Z ; std::vector<CDynamicSphereInstance,std::allocator<CDynamicSphereInstance> >::_Reallocate_exactly
$LN37@CreateColl:

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  000e2	8b 73 08	 mov	 esi, DWORD PTR [ebx+8]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 250  : 	dsi.v3LastPosition = D3DXVECTOR3(0.0f,0.0f,0.0f);

  000e5	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _dsi$[ebp+12], 0
  000ec	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _dsi$[ebp+16], 0
  000f3	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _dsi$[ebp+20], 0

; 251  : 	dsi.v3Position = D3DXVECTOR3(0.0f,0.0f,0.0f);

  000fa	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _dsi$[ebp], 0
  00101	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _dsi$[ebp+4], 0
  00108	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _dsi$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0010f	3b 73 0c	 cmp	 esi, DWORD PTR [ebx+12]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 252  : 	for (it = c_rSphereDataVector.begin(); it!=c_rSphereDataVector.end(); ++it)

  00112	74 4b		 je	 SHORT $LN3@CreateColl
$LL80@CreateColl:

; 253  : 	{
; 254  : 		const TSphereData & c_rSphereData = it->GetAttribute();

  00114	8b ce		 mov	 ecx, esi
  00116	e8 00 00 00 00	 call	 ?GetAttribute@CSphereCollisionInstance@@QBEABUSSphereData@@XZ ; CSphereCollisionInstance::GetAttribute
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  0011b	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 255  : 		dsi.fRadius = c_rSphereData.fRadius;

  0011e	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  00123	f3 0f 11 45 fc	 movss	 DWORD PTR _dsi$[ebp+24], xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  00128	3b 4f 18	 cmp	 ecx, DWORD PTR [edi+24]
  0012b	74 1d		 je	 SHORT $LN25@CreateColl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 254  :         ::new (static_cast<void*>(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

  0012d	0f 10 45 e4	 movups	 xmm0, XMMWORD PTR _dsi$[ebp]
  00131	8b 45 fc	 mov	 eax, DWORD PTR _dsi$[ebp+24]
  00134	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00137	f3 0f 7e 45 f4	 movq	 xmm0, QWORD PTR _dsi$[ebp+16]
  0013c	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0
  00141	89 41 18	 mov	 DWORD PTR [ecx+24], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 806  :         ++_Mylast;

  00144	83 47 14 1c	 add	 DWORD PTR [edi+20], 28	; 0000001cH

; 782  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00148	eb 0d		 jmp	 SHORT $LN2@CreateColl
$LN25@CreateColl:

; 783  :         }
; 784  : 
; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0014a	8d 45 e4	 lea	 eax, DWORD PTR _dsi$[ebp]
  0014d	50		 push	 eax
  0014e	51		 push	 ecx
  0014f	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  00152	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABUCDynamicSphereInstance@@@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@AAEPAUCDynamicSphereInstance@@QAU2@ABU2@@Z ; std::vector<CDynamicSphereInstance,std::allocator<CDynamicSphereInstance> >::_Emplace_reallocate<CDynamicSphereInstance const &>
$LN2@CreateColl:

; 79   :         ++_Ptr;

  00157	83 c6 14	 add	 esi, 20			; 00000014H

; 163  :         return _Ptr == _Right._Ptr;

  0015a	3b 73 0c	 cmp	 esi, DWORD PTR [ebx+12]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 252  : 	for (it = c_rSphereDataVector.begin(); it!=c_rSphereDataVector.end(); ++it)

  0015d	75 b5		 jne	 SHORT $LL80@CreateColl
$LN3@CreateColl:

; 256  : 		pPointInstance->SphereInstanceVector.push_back(dsi);
; 257  : 	}
; 258  : 
; 259  : 	return true;

  0015f	5e		 pop	 esi
  00160	5f		 pop	 edi
  00161	b0 01		 mov	 al, 1

; 260  : }

  00163	5b		 pop	 ebx
  00164	8b e5		 mov	 esp, ebp
  00166	5d		 pop	 ebp
  00167	c2 0c 00	 ret	 12			; 0000000cH
$LN66@CreateColl:
  0016a	5f		 pop	 edi

; 211  : 	{
; 212  : 		assert(!"CActorInstance::CreateCollisionInstancePiece - pPointInstance is NULL");
; 213  : 		return false;

  0016b	32 c0		 xor	 al, al

; 260  : }

  0016d	5b		 pop	 ebx
  0016e	8b e5		 mov	 esp, ebp
  00170	5d		 pop	 ebp
  00171	c2 0c 00	 ret	 12			; 0000000cH
$LN84@CreateColl:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1682 :                 _Xlength();

  00174	e8 00 00 00 00	 call	 ?_Xlength@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@CAXXZ ; std::vector<CDynamicSphereInstance,std::allocator<CDynamicSphereInstance> >::_Xlength
$LN81@CreateColl:
  00179	cc		 int	 3
?CreateCollisionInstancePiece@CActorInstance@@QAE_NKPBUSAttachingData@NRaceData@@PAUSCollisionPointInstance@1@@Z ENDP ; CActorInstance::CreateCollisionInstancePiece
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??1?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@QAE@XZ PROC ; std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > >::~map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > >, COMDAT
; _this$ = ecx

; 1082 :         _Scary->_Erase_head(_Getal());

  00000	51		 push	 ecx
  00001	e8 00 00 00 00	 call	 ??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >
  00006	c3		 ret	 0
??1?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@QAE@XZ ENDP ; std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > >::~map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > >::_Insert_node, COMDAT
; _this$ = ecx

; 646  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 647  :         ++_Mysize;
; 648  :         const auto _Head  = _Myhead;
; 649  :         _Newnode->_Parent = _Loc._Parent;

  00004	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0000e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00010	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00013	89 45 fc	 mov	 DWORD PTR __Head$1$[ebp], eax
  00016	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 650  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  00019	3b d0		 cmp	 edx, eax
  0001b	75 16		 jne	 SHORT $LN5@Insert_nod

; 651  :             _Head->_Left     = _Newnode;

  0001d	89 38		 mov	 DWORD PTR [eax], edi

; 652  :             _Head->_Parent   = _Newnode;

  0001f	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 653  :             _Head->_Right    = _Newnode;

  00022	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 712  :         return _Newnode;
; 713  :     }

  00025	8b c7		 mov	 eax, edi
  00027	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
  0002b	5f		 pop	 edi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 654  :             _Newnode->_Color = _Black; // the root is black
; 655  :             return _Newnode;
; 656  :         }
; 657  : 
; 658  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 659  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00033	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00037	75 0d		 jne	 SHORT $LN6@Insert_nod

; 660  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 661  :             _Loc._Parent->_Right = _Newnode;

  00039	89 7a 08	 mov	 DWORD PTR [edx+8], edi

; 662  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003c	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003f	75 0d		 jne	 SHORT $LN9@Insert_nod

; 663  :                 _Head->_Right = _Newnode;

  00041	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 664  :             }
; 665  :         } else { // add to left of _Loc._Parent

  00044	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 666  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 667  :             _Loc._Parent->_Left = _Newnode;

  00046	89 3a		 mov	 DWORD PTR [edx], edi

; 668  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00048	3b 10		 cmp	 edx, DWORD PTR [eax]
  0004a	75 02		 jne	 SHORT $LN9@Insert_nod

; 669  :                 _Head->_Left = _Newnode;

  0004c	89 38		 mov	 DWORD PTR [eax], edi
$LN9@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00051	8b c7		 mov	 eax, edi
  00053	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00057	0f 85 7d 01 00
	00		 jne	 $LN3@Insert_nod
  0005d	56		 push	 esi
  0005e	66 90		 npad	 2
$LL2@Insert_nod:

; 674  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00063	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	3b d1		 cmp	 edx, ecx
  0006a	0f 85 aa 00 00
	00		 jne	 $LN10@Insert_nod

; 675  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00070	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 676  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00073	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00077	0f 84 a3 00 00
	00		 je	 $LN76@Insert_nod

; 677  :                     _Pnode->_Parent->_Color          = _Black;
; 678  :                     _Parent_sibling->_Color          = _Black;
; 679  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 680  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 681  :                 } else { // parent's sibling has red and black children
; 682  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  0007d	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00080	3b c6		 cmp	 eax, esi
  00082	75 37		 jne	 SHORT $LN51@Insert_nod

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00084	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 683  :                         _Pnode = _Pnode->_Parent;

  00086	8b c2		 mov	 eax, edx

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00088	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0008b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00091	75 03		 jne	 SHORT $LN20@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  00093	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN20@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  00096	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00099	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  0009c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0009e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000a1	75 05		 jne	 SHORT $LN21@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  000a3	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  000a6	eb 0e		 jmp	 SHORT $LN24@Insert_nod
$LN21@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000a8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ab	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000ad	75 04		 jne	 SHORT $LN23@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  000af	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  000b1	eb 03		 jmp	 SHORT $LN24@Insert_nod
$LN23@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  000b3	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN24@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 479  :         _Wherenode->_Parent = _Pnode;

  000b8	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN51@Insert_nod:

; 684  :                         _Lrotate(_Pnode);
; 685  :                     }
; 686  : 
; 687  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 688  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c8	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 689  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 483  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000d2	8b 32		 mov	 esi, DWORD PTR [edx]

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  000d4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000d7	89 0a		 mov	 DWORD PTR [edx], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  000d9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000dc	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000e0	75 03		 jne	 SHORT $LN27@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  000e2	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN27@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  000e5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000e8	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  000eb	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000ed	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000f0	75 0b		 jne	 SHORT $LN28@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  000f2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  000f5	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  000f8	e9 cc 00 00 00	 jmp	 $LN75@Insert_nod
$LN28@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  000fd	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00100	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00103	75 0b		 jne	 SHORT $LN30@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00105	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00108	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  0010b	e9 b9 00 00 00	 jmp	 $LN75@Insert_nod
$LN30@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00110	89 31		 mov	 DWORD PTR [ecx], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00112	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  00115	e9 af 00 00 00	 jmp	 $LN75@Insert_nod
$LN10@Insert_nod:

; 692  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 693  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  0011a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0011e	75 1d		 jne	 SHORT $LN15@Insert_nod
$LN76@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00120	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1
  00124	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  00128	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0012e	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00132	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00135	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00138	e9 8f 00 00 00	 jmp	 $LN46@Insert_nod
$LN15@Insert_nod:

; 694  :                     _Pnode->_Parent->_Color          = _Black;
; 695  :                     _Parent_sibling->_Color          = _Black;
; 696  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 697  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 698  :                 } else { // parent's sibling has red and black children
; 699  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  0013d	8b 32		 mov	 esi, DWORD PTR [edx]
  0013f	3b c6		 cmp	 eax, esi
  00141	75 3a		 jne	 SHORT $LN39@Insert_nod

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00143	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 700  :                         _Pnode = _Pnode->_Parent;

  00146	8b c2		 mov	 eax, edx

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00148	89 08		 mov	 DWORD PTR [eax], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  0014a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0014d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00151	75 03		 jne	 SHORT $LN34@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  00153	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN34@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  00156	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00159	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  0015c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0015e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00161	75 05		 jne	 SHORT $LN35@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  00163	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00166	eb 0f		 jmp	 SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00168	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0016b	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0016e	75 05		 jne	 SHORT $LN37@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00170	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 496  :         } else {

  00173	eb 02		 jmp	 SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00175	89 31		 mov	 DWORD PTR [ecx], esi
$LN38@Insert_nod:

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00177	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 501  :         _Wherenode->_Parent = _Pnode;

  0017a	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN39@Insert_nod:

; 701  :                         _Rrotate(_Pnode);
; 702  :                     }
; 703  : 
; 704  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  0017d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 705  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00184	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00187	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0018a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 706  :                     _Lrotate(_Pnode->_Parent->_Parent);

  0018e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00191	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 461  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00194	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00197	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00199	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0019c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0019e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a2	75 03		 jne	 SHORT $LN41@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  001a4	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN41@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  001a7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001aa	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  001ad	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001af	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  001b2	75 05		 jne	 SHORT $LN42@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  001b4	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  001b7	eb 0e		 jmp	 SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001b9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001bc	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001be	75 04		 jne	 SHORT $LN44@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  001c2	eb 03		 jmp	 SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  001c4	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN45@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  001c7	89 16		 mov	 DWORD PTR [esi], edx
$LN75@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001c9	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN46@Insert_nod:
  001cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001cf	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001d3	0f 84 87 fe ff
	ff		 je	 $LL2@Insert_nod
  001d9	5e		 pop	 esi
$LN3@Insert_nod:

; 707  :                 }
; 708  :             }
; 709  :         }
; 710  : 
; 711  :         _Head->_Parent->_Color = _Black; // root is always black

  001da	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]
  001dd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e0	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 712  :         return _Newnode;
; 713  :     }

  001e4	8b c7		 mov	 eax, edi
  001e6	5f		 pop	 edi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ?_Getal@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> >,0> >::_Getal, COMDAT
; _this$ = ecx

; 1961 :         return _Mypair._Myval2._Get_first();

  00000	8b c1		 mov	 eax, ecx

; 1962 :     }

  00002	c3		 ret	 0
?_Getal@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> >,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?_Xrange@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xrange@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@CAXXZ PROC ; std::vector<CDynamicSphereInstance,std::allocator<CDynamicSphereInstance> >::_Xrange, COMDAT

; 2142 :         _Xout_of_range("invalid vector subscript");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN3@Xrange:
  0000a	cc		 int	 3
?_Xrange@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@CAXXZ ENDP ; std::vector<CDynamicSphereInstance,std::allocator<CDynamicSphereInstance> >::_Xrange
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?_Xlength@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@CAXXZ PROC ; std::vector<CDynamicSphereInstance,std::allocator<CDynamicSphereInstance> >::_Xlength, COMDAT

; 2138 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@CAXXZ ENDP ; std::vector<CDynamicSphereInstance,std::allocator<CDynamicSphereInstance> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?_Change_array@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@AAEXQAUCDynamicSphereInstance@@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@AAEXQAUCDynamicSphereInstance@@II@Z PROC ; std::vector<CDynamicSphereInstance,std::allocator<CDynamicSphereInstance> >::_Change_array, COMDAT
; _this$ = ecx

; 2013 :     _CONSTEXPR20 void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 2014 :         // orphan all iterators, discard old array, acquire new array
; 2015 :         auto& _Al         = _Getal();
; 2016 :         auto& _My_data    = _Mypair._Myval2;
; 2017 :         pointer& _Myfirst = _My_data._Myfirst;
; 2018 :         pointer& _Mylast  = _My_data._Mylast;
; 2019 :         pointer& _Myend   = _My_data._Myend;
; 2020 : 
; 2021 :         _My_data._Orphan_all();
; 2022 : 
; 2023 :         if (_Myfirst) { // destroy and deallocate old array

  00007	8b 37		 mov	 esi, DWORD PTR [edi]
  00009	85 f6		 test	 esi, esi
  0000b	74 48		 je	 SHORT $LN8@Change_arr

; 2024 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2025 :             _ASAN_VECTOR_REMOVE;
; 2026 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000d	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00010	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00015	2b ce		 sub	 ecx, esi
  00017	f7 e9		 imul	 ecx
  00019	03 d1		 add	 edx, ecx
  0001b	c1 fa 04	 sar	 edx, 4
  0001e	8b c2		 mov	 eax, edx
  00020	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00023	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00025	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  0002c	2b c8		 sub	 ecx, eax
  0002e	c1 e1 02	 shl	 ecx, 2

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00031	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00037	72 12		 jb	 SHORT $LN18@Change_arr

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00039	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  0003c	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0003f	2b f2		 sub	 esi, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00041	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00044	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00047	77 3b		 ja	 SHORT $LN15@Change_arr

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00049	8b f2		 mov	 esi, edx
$LN18@Change_arr:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0004b	51		 push	 ecx
  0004c	56		 push	 esi
  0004d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00052	83 c4 08	 add	 esp, 8
$LN8@Change_arr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2030 :         _Mylast  = _Newvec + _Newsize;

  00055	8b 45 0c	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00058	8b 55 08	 mov	 edx, DWORD PTR __Newvec$[ebp]
  0005b	89 17		 mov	 DWORD PTR [edi], edx
  0005d	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  00064	2b c8		 sub	 ecx, eax
  00066	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  00069	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 2031 :         _Myend   = _Newvec + _Newcapacity;

  0006c	8b 45 10	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  0006f	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  00076	2b c8		 sub	 ecx, eax
  00078	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  0007b	89 47 08	 mov	 DWORD PTR [edi+8], eax
  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi

; 2033 :     }

  00080	5d		 pop	 ebp
  00081	c2 0c 00	 ret	 12			; 0000000cH
$LN15@Change_arr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00084	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN25@Change_arr:
  00089	cc		 int	 3
?_Change_array@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@AAEXQAUCDynamicSphereInstance@@II@Z ENDP ; std::vector<CDynamicSphereInstance,std::allocator<CDynamicSphereInstance> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?_Reallocate_exactly@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@AAEXI@Z
_TEXT	SEGMENT
__Size$1$ = -4						; size = 4
__Newcapacity$ = 8					; size = 4
?_Reallocate_exactly@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@AAEXI@Z PROC ; std::vector<CDynamicSphereInstance,std::allocator<CDynamicSphereInstance> >::_Reallocate_exactly, COMDAT
; _this$ = ecx

; 1601 :     _CONSTEXPR20 void _Reallocate_exactly(const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 70   :         if (_Count > _Max_possible) {

  00005	8b 5d 08	 mov	 ebx, DWORD PTR __Newcapacity$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1608 :         const auto _Size = static_cast<size_type>(_Mylast - _Myfirst);

  00008	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	8b f9		 mov	 edi, ecx
  00011	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00014	2b 37		 sub	 esi, DWORD PTR [edi]
  00016	f7 ee		 imul	 esi
  00018	03 d6		 add	 edx, esi
  0001a	c1 fa 04	 sar	 edx, 4
  0001d	8b c2		 mov	 eax, edx
  0001f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00022	03 c2		 add	 eax, edx
  00024	89 45 fc	 mov	 DWORD PTR __Size$1$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 70   :         if (_Count > _Max_possible) {

  00027	81 fb 49 92 24
	09		 cmp	 ebx, 153391689		; 09249249H
  0002d	77 56		 ja	 SHORT $LN39@Reallocate

; 72   :         }
; 73   :     }
; 74   : 
; 75   :     return _Count * _Ty_size;

  0002f	8d 04 dd 00 00
	00 00		 lea	 eax, DWORD PTR [ebx*8]
  00036	2b c3		 sub	 eax, ebx
  00038	c1 e0 02	 shl	 eax, 2

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0003b	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00040	72 0d		 jb	 SHORT $LN15@Reallocate

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00048	83 c4 04	 add	 esp, 4
  0004b	8b f0		 mov	 esi, eax
  0004d	eb 13		 jmp	 SHORT $LN14@Reallocate
$LN15@Reallocate:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  0004f	85 c0		 test	 eax, eax
  00051	74 0d		 je	 SHORT $LN16@Reallocate

; 87   :         return ::operator new(_Bytes);

  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00059	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  0005c	8b f0		 mov	 esi, eax
  0005e	eb 02		 jmp	 SHORT $LN14@Reallocate
$LN16@Reallocate:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  00060	33 f6		 xor	 esi, esi
$LN14@Reallocate:

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  00062	56		 push	 esi
  00063	ff 77 04	 push	 DWORD PTR [edi+4]
  00066	ff 37		 push	 DWORD PTR [edi]
  00068	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAUCDynamicSphereInstance@@PAU1@@std@@YAPAUCDynamicSphereInstance@@PAU1@00@Z ; std::_Copy_memmove<CDynamicSphereInstance *,CDynamicSphereInstance *>
  0006d	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1623 :         _Change_array(_Newvec, _Size, _Newcapacity);

  00070	8b cf		 mov	 ecx, edi
  00072	53		 push	 ebx
  00073	ff 75 fc	 push	 DWORD PTR __Size$1$[ebp]
  00076	56		 push	 esi
  00077	e8 00 00 00 00	 call	 ?_Change_array@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@AAEXQAUCDynamicSphereInstance@@II@Z ; std::vector<CDynamicSphereInstance,std::allocator<CDynamicSphereInstance> >::_Change_array

; 1624 :     }

  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c2 04 00	 ret	 4
$LN39@Reallocate:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 71   :             _Throw_bad_array_new_length(); // multiply overflow

  00085	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN37@Reallocate:
  0008a	cc		 int	 3
?_Reallocate_exactly@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@AAEXI@Z ENDP ; std::vector<CDynamicSphereInstance,std::allocator<CDynamicSphereInstance> >::_Reallocate_exactly
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 137  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 138  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 139  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 140  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 87   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 141  :         _Throw_bad_array_new_length(); // add overflow
; 142  :     }
; 143  : 
; 144  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 87   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 145  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 146  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 147  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 148  : 
; 149  : #ifdef _DEBUG
; 150  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 151  : #endif // _DEBUG
; 152  :     return _Ptr;
; 153  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 145  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ?_Throw_tree_length_error@std@@YAXXZ
_TEXT	SEGMENT
?_Throw_tree_length_error@std@@YAXXZ PROC		; std::_Throw_tree_length_error, COMDAT

; 418  :     _Xlength_error("map/set too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Throw_tree:
  0000a	cc		 int	 3
?_Throw_tree_length_error@std@@YAXXZ ENDP		; std::_Throw_tree_length_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 331  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 332  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.h
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT
??0D3DXMATRIX@@QAE@XZ PROC				; D3DXMATRIX::D3DXMATRIX, COMDAT
; _this$ = ecx

; 177  :     D3DXMATRIX() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXMATRIX@@QAE@XZ ENDP				; D3DXMATRIX::D3DXMATRIX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ActorInstanceCollisionDetection.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
