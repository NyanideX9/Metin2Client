; Listing generated by Microsoft (R) Optimizing Compiler Version 19.37.32822.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\GameLib\Distribute\MapOutdoorRenderHTP.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0D3DXMATRIX@@QAE@XZ				; D3DXMATRIX::D3DXMATRIX
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ ; std::vector<int,std::allocator<int> >::_Xlength
PUBLIC	?__RenderTerrain_RenderHardwareTransformPatch@CMapOutdoor@@IAEXXZ ; CMapOutdoor::__RenderTerrain_RenderHardwareTransformPatch
PUBLIC	?__HardwareTransformPatch_RenderPatchSplat@CMapOutdoor@@IAEXJGW4_D3DPRIMITIVETYPE@@@Z ; CMapOutdoor::__HardwareTransformPatch_RenderPatchSplat
PUBLIC	?__HardwareTransformPatch_RenderPatchNone@CMapOutdoor@@IAEXJGW4_D3DPRIMITIVETYPE@@@Z ; CMapOutdoor::__HardwareTransformPatch_RenderPatchNone
PUBLIC	??$upper_bound@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MJ@std@@@std@@@std@@@std@@U?$pair@MJ@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MJ@std@@@std@@@std@@@0@V10@0ABU?$pair@MJ@0@@Z ; std::upper_bound<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,long> > > >,std::pair<float,long> >
PUBLIC	??$_Emplace_reallocate@H@?$vector@HV?$allocator@H@std@@@std@@AAEPAHQAH$$QAH@Z ; std::vector<int,std::allocator<int> >::_Emplace_reallocate<int>
PUBLIC	??$_Sort_unchecked@PAHU?$less@X@std@@@std@@YAXPAH0HU?$less@X@0@@Z ; std::_Sort_unchecked<int *,std::less<void> >
PUBLIC	??$__std_find_trivial@HH@@YAPAHPAH0H@Z		; __std_find_trivial<int,int>
PUBLIC	??$_Partition_by_median_guess_unchecked@PAHU?$less@X@std@@@std@@YA?AU?$pair@PAHPAH@0@PAH0U?$less@X@0@@Z ; std::_Partition_by_median_guess_unchecked<int *,std::less<void> >
PUBLIC	??$_Copy_memmove@PAHPAH@std@@YAPAHPAH00@Z	; std::_Copy_memmove<int *,int *>
PUBLIC	??$_Pop_heap_hole_by_index@PAHHU?$less@X@std@@@std@@YAXPAHHH$$QAHU?$less@X@0@@Z ; std::_Pop_heap_hole_by_index<int *,int,std::less<void> >
PUBLIC	??$_Guess_median_unchecked@PAHU?$less@X@std@@@std@@YAXPAH00U?$less@X@0@@Z ; std::_Guess_median_unchecked<int *,std::less<void> >
PUBLIC	??$_Copy_backward_memmove@PAHPAH@std@@YAPAHPAH00@Z ; std::_Copy_backward_memmove<int *,int *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@437f0000
PUBLIC	__real@44c80000
PUBLIC	__real@45480000
PUBLIC	__real@459c4000
PUBLIC	__real@461c4000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_D3DXMatrixMultiply@12:PROC
EXTRN	_D3DXMatrixScaling@16:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	___std_find_trivial_4@12:PROC
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?GetFogNearDistance@SEnvironmentData@@QBEMXZ:PROC ; SEnvironmentData::GetFogNearDistance
EXTRN	?GetFogFarDistance@SEnvironmentData@@QBEMXZ:PROC ; SEnvironmentData::GetFogFarDistance
EXTRN	?GetTextureCount@CTextureSet@@QAEKXZ:PROC	; CTextureSet::GetTextureCount
EXTRN	?GetTexture@CTextureSet@@QAEAAUSTerrainTexture@@K@Z:PROC ; CTextureSet::GetTexture
EXTRN	?HardwareTransformPatch_GetVertexBufferPtr@CTerrainPatchProxy@@QAEPAVCGraphicVertexBuffer@@XZ:PROC ; CTerrainPatchProxy::HardwareTransformPatch_GetVertexBufferPtr
EXTRN	?GetTerrainPointer@CMapOutdoor@@QAEHEPAPAVCTerrain@@@Z:PROC ; CMapOutdoor::GetTerrainPointer
EXTRN	?DrawWireFrame@CMapOutdoor@@IAEXJGW4_D3DPRIMITIVETYPE@@@Z:PROC ; CMapOutdoor::DrawWireFrame
EXTRN	?SelectIndexBuffer@CMapOutdoor@@IAEXEPAGPAW4_D3DPRIMITIVETYPE@@@Z:PROC ; CMapOutdoor::SelectIndexBuffer
EXTRN	?__GetNoFogDistance@CMapOutdoor@@IAEMXZ:PROC	; CMapOutdoor::__GetNoFogDistance
EXTRN	?__GetFogDistance@CMapOutdoor@@IAEMXZ:PROC	; CMapOutdoor::__GetFogDistance
EXTRN	?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; CStateManager::SaveRenderState
EXTRN	?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z:PROC ; CStateManager::RestoreRenderState
EXTRN	?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; CStateManager::SetRenderState
EXTRN	?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z:PROC ; CStateManager::SetTexture
EXTRN	?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z:PROC ; CStateManager::SaveTextureStageState
EXTRN	?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z:PROC ; CStateManager::RestoreTextureStageState
EXTRN	?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z:PROC ; CStateManager::SetTextureStageState
EXTRN	?SetBestFiltering@CStateManager@@QAEXK@Z:PROC	; CStateManager::SetBestFiltering
EXTRN	?SetVertexShader@CStateManager@@QAEXK@Z:PROC	; CStateManager::SetVertexShader
EXTRN	?SaveTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z:PROC ; CStateManager::SaveTransform
EXTRN	?RestoreTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@@Z:PROC ; CStateManager::RestoreTransform
EXTRN	?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z:PROC ; CStateManager::SetTransform
EXTRN	?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z:PROC ; CStateManager::SetStreamSource
EXTRN	?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIII@Z:PROC ; CStateManager::DrawIndexedPrimitive
EXTRN	?GetRenderState@CStateManager@@QAEKW4_D3DRENDERSTATETYPE@@@Z:PROC ; CStateManager::GetRenderState
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	__ftol3:PROC
EXTRN	_memmove:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?ms_faceCount@CGraphicBase@@1KA:DWORD		; CGraphicBase::ms_faceCount
EXTRN	?ms_bSelfShadowOn@CSpeedTreeWrapper@@2_NA:BYTE	; CSpeedTreeWrapper::ms_bSelfShadowOn
EXTRN	?ms_pTextureSet@CTerrainImpl@@1PAVCTextureSet@@A:DWORD ; CTerrainImpl::ms_pTextureSet
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A DD 01H DUP (?) ; CSingleton<CStateManager>::ms_singleton
_BSS	ENDS
;	COMDAT __real@461c4000
CONST	SEGMENT
__real@461c4000 DD 0461c4000r			; 10000
CONST	ENDS
;	COMDAT __real@459c4000
CONST	SEGMENT
__real@459c4000 DD 0459c4000r			; 5000
CONST	ENDS
;	COMDAT __real@45480000
CONST	SEGMENT
__real@45480000 DD 045480000r			; 3200
CONST	ENDS
;	COMDAT __real@44c80000
CONST	SEGMENT
__real@44c80000 DD 044c80000r			; 1600
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$_Copy_backward_memmove@PAHPAH@std@@YAPAHPAH00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_backward_memmove@PAHPAH@std@@YAPAHPAH00@Z PROC	; std::_Copy_backward_memmove<int *,int *>, COMDAT

; 4833 : _CtgIt2 _Copy_backward_memmove(_CtgIt1 _First, _CtgIt1 _Last, _CtgIt2 _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4834 :     // implement copy_backward-like function as memmove
; 4835 :     auto _FirstPtr              = _To_address(_First);
; 4836 :     auto _LastPtr               = _To_address(_Last);
; 4837 :     auto _DestPtr               = _To_address(_Dest);
; 4838 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4839 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4840 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4841 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b c8		 sub	 ecx, eax

; 4842 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

  0000b	51		 push	 ecx
  0000c	50		 push	 eax
  0000d	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00010	2b c1		 sub	 eax, ecx
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4843 :     if constexpr (is_pointer_v<_CtgIt2>) {
; 4844 :         return static_cast<_CtgIt2>(_Result);
; 4845 :     } else {
; 4846 :         return _Dest - (_LastPtr - _FirstPtr);
; 4847 :     }
; 4848 : }

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??$_Copy_backward_memmove@PAHPAH@std@@YAPAHPAH00@Z ENDP	; std::_Copy_backward_memmove<int *,int *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
;	COMDAT ??$_Guess_median_unchecked@PAHU?$less@X@std@@@std@@YAXPAH00U?$less@X@0@@Z
_TEXT	SEGMENT
tv599 = -4						; size = 4
tv598 = 8						; size = 4
tv571 = 8						; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
tv572 = 16						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Guess_median_unchecked@PAHU?$less@X@std@@@std@@YAXPAH00U?$less@X@0@@Z PROC ; std::_Guess_median_unchecked<int *,std::less<void> >, COMDAT

; 7945 : _CONSTEXPR20 void _Guess_median_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 7946 :     // sort median element to middle
; 7947 :     using _Diff        = _Iter_diff_t<_RanIt>;
; 7948 :     const _Diff _Count = _Last - _First;

  00004	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00007	56		 push	 esi
  00008	8b 75 10	 mov	 esi, DWORD PTR __Last$[ebp]
  0000b	8b c6		 mov	 eax, esi
  0000d	2b c1		 sub	 eax, ecx
  0000f	c1 f8 02	 sar	 eax, 2
  00012	57		 push	 edi

; 7949 :     if (40 < _Count) { // Tukey's ninther

  00013	8b 39		 mov	 edi, DWORD PTR [ecx]
  00015	83 f8 28	 cmp	 eax, 40			; 00000028H
  00018	0f 8e dc 00 00
	00		 jle	 $LN2@Guess_medi

; 7950 :         const _Diff _Step     = (_Count + 1) >> 3; // +1 can't overflow because range was made inclusive in caller

  0001e	40		 inc	 eax
  0001f	c1 f8 03	 sar	 eax, 3
  00022	53		 push	 ebx

; 7952 :         _Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);

  00023	8d 14 c5 00 00
	00 00		 lea	 edx, DWORD PTR [eax*8]
  0002a	8d 1c 85 00 00
	00 00		 lea	 ebx, DWORD PTR [eax*4]
  00031	89 55 fc	 mov	 DWORD PTR tv599[ebp], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2475 :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  00034	8b 04 0b	 mov	 eax, DWORD PTR [ebx+ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7952 :         _Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);

  00037	8d 14 0b	 lea	 edx, DWORD PTR [ebx+ecx]
  0003a	89 5d 08	 mov	 DWORD PTR tv598[ebp], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2475 :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  0003d	3b c7		 cmp	 eax, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7931 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  0003f	7d 04		 jge	 SHORT $LN13@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 100  :     _Left    = _STD move(_Right);

  00041	89 3a		 mov	 DWORD PTR [edx], edi

; 101  :     _Right   = _STD move(_Tmp);

  00043	89 01		 mov	 DWORD PTR [ecx], eax
$LN13@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2475 :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  00045	8b 45 fc	 mov	 eax, DWORD PTR tv599[ebp]
  00048	8b 3a		 mov	 edi, DWORD PTR [edx]
  0004a	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  0004d	3b c7		 cmp	 eax, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7935 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

  0004f	7d 15		 jge	 SHORT $LN21@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 100  :     _Left    = _STD move(_Right);

  00051	8b 75 fc	 mov	 esi, DWORD PTR tv599[ebp]
  00054	89 3c 0e	 mov	 DWORD PTR [esi+ecx], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7938 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  00057	8b 75 10	 mov	 esi, DWORD PTR __Last$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 101  :     _Right   = _STD move(_Tmp);

  0005a	89 02		 mov	 DWORD PTR [edx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2475 :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  0005c	8b 39		 mov	 edi, DWORD PTR [ecx]
  0005e	3b c7		 cmp	 eax, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7938 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  00060	7d 04		 jge	 SHORT $LN21@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 100  :     _Left    = _STD move(_Right);

  00062	89 3a		 mov	 DWORD PTR [edx], edi

; 101  :     _Right   = _STD move(_Tmp);

  00064	89 01		 mov	 DWORD PTR [ecx], eax
$LN21@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7953 :         _Med3_unchecked(_Mid - _Step, _Mid, _Mid + _Step, _Pred);

  00066	8b 45 0c	 mov	 eax, DWORD PTR __Mid$[ebp]
  00069	8b c8		 mov	 ecx, eax
  0006b	2b cb		 sub	 ecx, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2475 :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  0006d	8b 38		 mov	 edi, DWORD PTR [eax]
  0006f	8b 19		 mov	 ebx, DWORD PTR [ecx]
  00071	3b fb		 cmp	 edi, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7931 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  00073	7d 04		 jge	 SHORT $LN30@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 100  :     _Left    = _STD move(_Right);

  00075	89 18		 mov	 DWORD PTR [eax], ebx

; 101  :     _Right   = _STD move(_Tmp);

  00077	89 39		 mov	 DWORD PTR [ecx], edi
$LN30@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2475 :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  00079	8b 5d 08	 mov	 ebx, DWORD PTR tv598[ebp]
  0007c	8b 3c 03	 mov	 edi, DWORD PTR [ebx+eax]
  0007f	8b 18		 mov	 ebx, DWORD PTR [eax]
  00081	3b fb		 cmp	 edi, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7935 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

  00083	7d 15		 jge	 SHORT $LN38@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 100  :     _Left    = _STD move(_Right);

  00085	8b 75 08	 mov	 esi, DWORD PTR tv598[ebp]
  00088	89 1c 06	 mov	 DWORD PTR [esi+eax], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7938 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  0008b	8b 75 10	 mov	 esi, DWORD PTR __Last$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 101  :     _Right   = _STD move(_Tmp);

  0008e	89 38		 mov	 DWORD PTR [eax], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2475 :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  00090	8b 19		 mov	 ebx, DWORD PTR [ecx]
  00092	3b fb		 cmp	 edi, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7938 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  00094	7d 04		 jge	 SHORT $LN38@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 100  :     _Left    = _STD move(_Right);

  00096	89 18		 mov	 DWORD PTR [eax], ebx

; 101  :     _Right   = _STD move(_Tmp);

  00098	89 39		 mov	 DWORD PTR [ecx], edi
$LN38@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7954 :         _Med3_unchecked(_Last - _Two_step, _Last - _Step, _Last, _Pred);

  0009a	8b ce		 mov	 ecx, esi
  0009c	8b fe		 mov	 edi, esi
  0009e	2b 4d 08	 sub	 ecx, DWORD PTR tv598[ebp]
  000a1	2b 7d fc	 sub	 edi, DWORD PTR tv599[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2475 :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  000a4	8b 19		 mov	 ebx, DWORD PTR [ecx]
  000a6	8b 07		 mov	 eax, DWORD PTR [edi]
  000a8	3b d8		 cmp	 ebx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7931 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  000aa	7d 09		 jge	 SHORT $LN47@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 100  :     _Left    = _STD move(_Right);

  000ac	8b f0		 mov	 esi, eax
  000ae	89 31		 mov	 DWORD PTR [ecx], esi
  000b0	8b 75 10	 mov	 esi, DWORD PTR __Last$[ebp]

; 101  :     _Right   = _STD move(_Tmp);

  000b3	89 1f		 mov	 DWORD PTR [edi], ebx
$LN47@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2475 :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  000b5	8b 1e		 mov	 ebx, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7935 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

  000b7	8b 45 0c	 mov	 eax, DWORD PTR __Mid$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2475 :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  000ba	3b 19		 cmp	 ebx, DWORD PTR [ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7935 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

  000bc	7d 13		 jge	 SHORT $LN55@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 100  :     _Left    = _STD move(_Right);

  000be	8b 01		 mov	 eax, DWORD PTR [ecx]
  000c0	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7938 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  000c2	8b 45 0c	 mov	 eax, DWORD PTR __Mid$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 101  :     _Right   = _STD move(_Tmp);

  000c5	89 19		 mov	 DWORD PTR [ecx], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2475 :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  000c7	8b 37		 mov	 esi, DWORD PTR [edi]
  000c9	3b de		 cmp	 ebx, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7938 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  000cb	7d 04		 jge	 SHORT $LN55@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 100  :     _Left    = _STD move(_Right);

  000cd	89 31		 mov	 DWORD PTR [ecx], esi

; 101  :     _Right   = _STD move(_Tmp);

  000cf	89 1f		 mov	 DWORD PTR [edi], ebx
$LN55@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2475 :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  000d1	8b 30		 mov	 esi, DWORD PTR [eax]
  000d3	8b 3a		 mov	 edi, DWORD PTR [edx]
  000d5	5b		 pop	 ebx
  000d6	3b f7		 cmp	 esi, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7931 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  000d8	7d 04		 jge	 SHORT $LN64@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 100  :     _Left    = _STD move(_Right);

  000da	89 38		 mov	 DWORD PTR [eax], edi

; 101  :     _Right   = _STD move(_Tmp);

  000dc	89 32		 mov	 DWORD PTR [edx], esi
$LN64@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2475 :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  000de	8b 31		 mov	 esi, DWORD PTR [ecx]
  000e0	8b 38		 mov	 edi, DWORD PTR [eax]
  000e2	3b f7		 cmp	 esi, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7935 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

  000e4	7d 37		 jge	 SHORT $LN89@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 100  :     _Left    = _STD move(_Right);

  000e6	89 39		 mov	 DWORD PTR [ecx], edi

; 101  :     _Right   = _STD move(_Tmp);

  000e8	89 30		 mov	 DWORD PTR [eax], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2475 :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  000ea	8b 0a		 mov	 ecx, DWORD PTR [edx]
  000ec	3b f1		 cmp	 esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7938 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  000ee	7d 2d		 jge	 SHORT $LN89@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 100  :     _Left    = _STD move(_Right);

  000f0	89 08		 mov	 DWORD PTR [eax], ecx
  000f2	5f		 pop	 edi

; 101  :     _Right   = _STD move(_Tmp);

  000f3	89 32		 mov	 DWORD PTR [edx], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7959 : }

  000f5	5e		 pop	 esi
  000f6	8b e5		 mov	 esp, ebp
  000f8	5d		 pop	 ebp
  000f9	c3		 ret	 0
$LN2@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2475 :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  000fa	8b 45 0c	 mov	 eax, DWORD PTR __Mid$[ebp]
  000fd	8b 10		 mov	 edx, DWORD PTR [eax]
  000ff	3b d7		 cmp	 edx, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7931 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  00101	7d 04		 jge	 SHORT $LN81@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 100  :     _Left    = _STD move(_Right);

  00103	89 38		 mov	 DWORD PTR [eax], edi

; 101  :     _Right   = _STD move(_Tmp);

  00105	89 11		 mov	 DWORD PTR [ecx], edx
$LN81@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2475 :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  00107	8b 16		 mov	 edx, DWORD PTR [esi]
  00109	8b 38		 mov	 edi, DWORD PTR [eax]
  0010b	3b d7		 cmp	 edx, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7935 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

  0010d	7d 0e		 jge	 SHORT $LN89@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 100  :     _Left    = _STD move(_Right);

  0010f	89 3e		 mov	 DWORD PTR [esi], edi

; 101  :     _Right   = _STD move(_Tmp);

  00111	89 10		 mov	 DWORD PTR [eax], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2475 :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  00113	8b 31		 mov	 esi, DWORD PTR [ecx]
  00115	3b d6		 cmp	 edx, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7938 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  00117	7d 04		 jge	 SHORT $LN89@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 100  :     _Left    = _STD move(_Right);

  00119	89 30		 mov	 DWORD PTR [eax], esi

; 101  :     _Right   = _STD move(_Tmp);

  0011b	89 11		 mov	 DWORD PTR [ecx], edx
$LN89@Guess_medi:
  0011d	5f		 pop	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7959 : }

  0011e	5e		 pop	 esi
  0011f	8b e5		 mov	 esp, ebp
  00121	5d		 pop	 ebp
  00122	c3		 ret	 0
??$_Guess_median_unchecked@PAHU?$less@X@std@@@std@@YAXPAH00U?$less@X@0@@Z ENDP ; std::_Guess_median_unchecked<int *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
;	COMDAT ??$_Pop_heap_hole_by_index@PAHHU?$less@X@std@@@std@@YAXPAHHH$$QAHU?$less@X@0@@Z
_TEXT	SEGMENT
tv246 = 8						; size = 4
__First$ = 8						; size = 4
__Top$1$ = 12						; size = 4
__Hole$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Pop_heap_hole_by_index@PAHHU?$less@X@std@@@std@@YAXPAHHH$$QAHU?$less@X@0@@Z PROC ; std::_Pop_heap_hole_by_index<int *,int,std::less<void> >, COMDAT

; 6432 :     _RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Bottom, _Ty&& _Val, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 6433 :     // percolate _Hole to _Bottom, then push _Val
; 6434 :     _STL_INTERNAL_CHECK(_Bottom > 0);
; 6435 : 
; 6436 :     using _Diff      = _Iter_diff_t<_RanIt>;
; 6437 :     const _Diff _Top = _Hole;
; 6438 :     _Diff _Idx       = _Hole;
; 6439 : 
; 6440 :     // Check whether _Idx can have a child before calculating that child's index, since
; 6441 :     // calculating the child's index can trigger integer overflows
; 6442 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen

  00003	8b 45 10	 mov	 eax, DWORD PTR __Bottom$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Hole$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000e	8d 48 ff	 lea	 ecx, DWORD PTR [eax-1]
  00011	57		 push	 edi
  00012	8b f9		 mov	 edi, ecx
  00014	89 55 0c	 mov	 DWORD PTR __Top$1$[ebp], edx
  00017	d1 ff		 sar	 edi, 1
  00019	8b da		 mov	 ebx, edx
  0001b	89 4d 08	 mov	 DWORD PTR tv246[ebp], ecx

; 6443 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

  0001e	3b d7		 cmp	 edx, edi
  00020	7d 25		 jge	 SHORT $LN3@Pop_heap_h
$LL2@Pop_heap_h:

; 6444 :         _Idx = 2 * _Idx + 2;

  00022	8d 0c 1b	 lea	 ecx, DWORD PTR [ebx+ebx]

; 6445 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {
; 6446 :             --_Idx;
; 6447 :         }
; 6448 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  00025	33 db		 xor	 ebx, ebx
  00027	8b 44 8e 08	 mov	 eax, DWORD PTR [esi+ecx*4+8]
  0002b	3b 44 8e 04	 cmp	 eax, DWORD PTR [esi+ecx*4+4]
  0002f	0f 9d c3	 setge	 bl
  00032	43		 inc	 ebx
  00033	03 d9		 add	 ebx, ecx
  00035	8b 04 9e	 mov	 eax, DWORD PTR [esi+ebx*4]
  00038	89 04 96	 mov	 DWORD PTR [esi+edx*4], eax

; 6449 :         _Hole             = _Idx;

  0003b	8b d3		 mov	 edx, ebx
  0003d	3b df		 cmp	 ebx, edi
  0003f	7c e1		 jl	 SHORT $LL2@Pop_heap_h
  00041	8b 45 10	 mov	 eax, DWORD PTR __Bottom$[ebp]
  00044	8b 4d 08	 mov	 ecx, DWORD PTR tv246[ebp]
$LN3@Pop_heap_h:

; 6450 :     }
; 6451 : 
; 6452 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

  00047	3b df		 cmp	 ebx, edi
  00049	75 0d		 jne	 SHORT $LN5@Pop_heap_h
  0004b	a8 01		 test	 al, 1
  0004d	75 09		 jne	 SHORT $LN5@Pop_heap_h

; 6453 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

  0004f	8b 44 86 fc	 mov	 eax, DWORD PTR [esi+eax*4-4]
  00053	89 04 96	 mov	 DWORD PTR [esi+edx*4], eax

; 6454 :         _Hole             = _Bottom - 1;

  00056	8b d1		 mov	 edx, ecx
$LN5@Pop_heap_h:

; 6328 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

  00058	8b 5d 0c	 mov	 ebx, DWORD PTR __Top$1$[ebp]
  0005b	3b da		 cmp	 ebx, edx
  0005d	7d 22		 jge	 SHORT $LN24@Pop_heap_h
  0005f	8b 7d 14	 mov	 edi, DWORD PTR __Val$[ebp]
$LL12@Pop_heap_h:

; 6327 :     for (_Diff _Idx = (_Hole - 1) >> 1; // shift for codegen

  00062	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  00065	d1 f8		 sar	 eax, 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2475 :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  00067	8b 0c 86	 mov	 ecx, DWORD PTR [esi+eax*4]
  0006a	3b 0f		 cmp	 ecx, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 6328 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

  0006c	7d 09		 jge	 SHORT $LN25@Pop_heap_h

; 6329 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 6330 :         // move _Hole up to parent
; 6331 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  0006e	89 0c 96	 mov	 DWORD PTR [esi+edx*4], ecx

; 6332 :         _Hole             = _Idx;

  00071	8b d0		 mov	 edx, eax
  00073	3b d8		 cmp	 ebx, eax
  00075	7c eb		 jl	 SHORT $LL12@Pop_heap_h
$LN25@Pop_heap_h:

; 6455 :     }
; 6456 : 
; 6457 :     _STD _Push_heap_by_index(_First, _Hole, _Top, _STD forward<_Ty>(_Val), _Pred);
; 6458 : }

  00077	8b 07		 mov	 eax, DWORD PTR [edi]
  00079	5f		 pop	 edi
  0007a	89 04 96	 mov	 DWORD PTR [esi+edx*4], eax
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
$LN24@Pop_heap_h:

; 6335 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

  00081	8b 45 14	 mov	 eax, DWORD PTR __Val$[ebp]
  00084	5f		 pop	 edi
  00085	8b 00		 mov	 eax, DWORD PTR [eax]

; 6455 :     }
; 6456 : 
; 6457 :     _STD _Push_heap_by_index(_First, _Hole, _Top, _STD forward<_Ty>(_Val), _Pred);
; 6458 : }

  00087	89 04 96	 mov	 DWORD PTR [esi+edx*4], eax
  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx
  0008c	5d		 pop	 ebp
  0008d	c3		 ret	 0
??$_Pop_heap_hole_by_index@PAHHU?$less@X@std@@@std@@YAXPAHHH$$QAHU?$less@X@0@@Z ENDP ; std::_Pop_heap_hole_by_index<int *,int,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$_Copy_memmove@PAHPAH@std@@YAPAHPAH00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAHPAH@std@@YAPAHPAH00@Z PROC		; std::_Copy_memmove<int *,int *>, COMDAT

; 4526 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4527 :     auto _FirstPtr              = _To_address(_First);
; 4528 :     auto _LastPtr               = _To_address(_Last);
; 4529 :     auto _DestPtr               = _To_address(_Dest);
; 4530 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4531 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4532 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4533 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4535 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4536 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4537 :     } else {
; 4538 :         return _Dest + (_LastPtr - _FirstPtr);
; 4539 :     }
; 4540 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAHPAH@std@@YAPAHPAH00@Z ENDP		; std::_Copy_memmove<int *,int *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
;	COMDAT ??$_Partition_by_median_guess_unchecked@PAHU?$less@X@std@@@std@@YA?AU?$pair@PAHPAH@0@PAH0U?$less@X@0@@Z
_TEXT	SEGMENT
tv517 = -12						; size = 4
__Gfirst$1$ = -12					; size = 4
tv509 = -8						; size = 4
__Glast$1$ = -8						; size = 4
__Plast$1$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Partition_by_median_guess_unchecked@PAHU?$less@X@std@@@std@@YA?AU?$pair@PAHPAH@0@PAH0U?$less@X@0@@Z PROC ; std::_Partition_by_median_guess_unchecked<int *,std::less<void> >, COMDAT

; 7962 : _CONSTEXPR20 pair<_RanIt, _RanIt> _Partition_by_median_guess_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 7963 :     // partition [_First, _Last)
; 7964 :     _RanIt _Mid = _First + ((_Last - _First) >> 1); // shift for codegen

  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __First$[ebp]
  00009	53		 push	 ebx
  0000a	8b 5d 10	 mov	 ebx, DWORD PTR __Last$[ebp]
  0000d	8b c3		 mov	 eax, ebx
  0000f	56		 push	 esi
  00010	2b c1		 sub	 eax, ecx
  00012	c1 f8 03	 sar	 eax, 3
  00015	57		 push	 edi

; 7965 :     _Guess_median_unchecked(_First, _Mid, _Prev_iter(_Last), _Pred);

  00016	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  00019	8d 34 81	 lea	 esi, DWORD PTR [ecx+eax*4]
  0001c	8d 43 fc	 lea	 eax, DWORD PTR [ebx-4]
  0001f	50		 push	 eax
  00020	56		 push	 esi
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 ??$_Guess_median_unchecked@PAHU?$less@X@std@@@std@@YAXPAH00U?$less@X@0@@Z ; std::_Guess_median_unchecked<int *,std::less<void> >
  00027	83 c4 10	 add	 esp, 16			; 00000010H

; 7966 :     _RanIt _Pfirst = _Mid;
; 7967 :     _RanIt _Plast  = _Next_iter(_Pfirst);

  0002a	8d 7e 04	 lea	 edi, DWORD PTR [esi+4]
  0002d	89 7d fc	 mov	 DWORD PTR __Plast$1$[ebp], edi

; 7970 :            && !_Pred(*_Pfirst, *_Prev_iter(_Pfirst))) {

  00030	39 75 0c	 cmp	 DWORD PTR __First$[ebp], esi
  00033	73 20		 jae	 SHORT $LN68@Partition_
  00035	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00037	8b 5d 0c	 mov	 ebx, DWORD PTR __First$[ebp]
  0003a	66 0f 1f 44 00
	00		 npad	 6
$LL2@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2475 :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  00040	8b 46 fc	 mov	 eax, DWORD PTR [esi-4]
  00043	3b c1		 cmp	 eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7970 :            && !_Pred(*_Pfirst, *_Prev_iter(_Pfirst))) {

  00045	7c 0b		 jl	 SHORT $LN94@Partition_
  00047	7f 09		 jg	 SHORT $LN94@Partition_

; 7971 :         --_Pfirst;

  00049	83 c6 fc	 add	 esi, -4			; fffffffcH
  0004c	8b c8		 mov	 ecx, eax
  0004e	3b de		 cmp	 ebx, esi
  00050	72 ee		 jb	 SHORT $LL2@Partition_
$LN94@Partition_:
  00052	8b 5d 10	 mov	 ebx, DWORD PTR __Last$[ebp]
$LN68@Partition_:

; 7974 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

  00055	3b fb		 cmp	 edi, ebx
  00057	73 17		 jae	 SHORT $LN5@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2475 :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  00059	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0005b	0f 1f 44 00 00	 npad	 5
$LL4@Partition_:
  00060	39 0f		 cmp	 DWORD PTR [edi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7974 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

  00062	7c 09		 jl	 SHORT $LN95@Partition_
  00064	7f 07		 jg	 SHORT $LN95@Partition_

; 7975 :         ++_Plast;

  00066	83 c7 04	 add	 edi, 4
  00069	3b fb		 cmp	 edi, ebx
  0006b	72 f3		 jb	 SHORT $LL4@Partition_
$LN95@Partition_:
  0006d	89 7d fc	 mov	 DWORD PTR __Plast$1$[ebp], edi
$LN5@Partition_:

; 7976 :     }
; 7977 : 
; 7978 :     _RanIt _Gfirst = _Plast;

  00070	8b d7		 mov	 edx, edi

; 7979 :     _RanIt _Glast  = _Pfirst;

  00072	8b de		 mov	 ebx, esi
$LN119@Partition_:

; 7980 : 
; 7981 :     for (;;) { // partition
; 7982 :         for (; _Gfirst < _Last; ++_Gfirst) {

  00074	89 5d f8	 mov	 DWORD PTR __Glast$1$[ebp], ebx
$LN118@Partition_:
  00077	89 55 f4	 mov	 DWORD PTR __Gfirst$1$[ebp], edx
  0007a	66 0f 1f 44 00
	00		 npad	 6
$LL6@Partition_:
  00080	3b 55 10	 cmp	 edx, DWORD PTR __Last$[ebp]
  00083	73 32		 jae	 SHORT $LN72@Partition_
  00085	8b 5d 10	 mov	 ebx, DWORD PTR __Last$[ebp]
$LL11@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2475 :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  00088	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0008a	39 0e		 cmp	 DWORD PTR [esi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7983 :             if (_DEBUG_LT_PRED(_Pred, *_Pfirst, *_Gfirst)) {

  0008c	7c 19		 jl	 SHORT $LN9@Partition_

; 7984 :                 continue;
; 7985 :             } else if (_Pred(*_Gfirst, *_Pfirst)) {

  0008e	7f 1e		 jg	 SHORT $LN96@Partition_

; 7986 :                 break;
; 7987 :             } else if (_Plast != _Gfirst) {

  00090	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  00093	89 45 f4	 mov	 DWORD PTR tv517[ebp], eax
  00096	3b fa		 cmp	 edi, edx
  00098	74 0b		 je	 SHORT $LN19@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 99   :     _Ty _Tmp = _STD move(_Left);

  0009a	8b 07		 mov	 eax, DWORD PTR [edi]

; 100  :     _Left    = _STD move(_Right);

  0009c	89 0f		 mov	 DWORD PTR [edi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7989 :                 ++_Plast;

  0009e	8b 7d f4	 mov	 edi, DWORD PTR tv517[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 101  :     _Right   = _STD move(_Tmp);

  000a1	89 02		 mov	 DWORD PTR [edx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7990 :             } else {

  000a3	eb 02		 jmp	 SHORT $LN9@Partition_
$LN19@Partition_:

; 7991 :                 ++_Plast;

  000a5	8b f8		 mov	 edi, eax
$LN9@Partition_:

; 7980 : 
; 7981 :     for (;;) { // partition
; 7982 :         for (; _Gfirst < _Last; ++_Gfirst) {

  000a7	83 c2 04	 add	 edx, 4
  000aa	3b d3		 cmp	 edx, ebx
  000ac	72 da		 jb	 SHORT $LL11@Partition_
$LN96@Partition_:
  000ae	8b 5d f8	 mov	 ebx, DWORD PTR __Glast$1$[ebp]
  000b1	89 7d fc	 mov	 DWORD PTR __Plast$1$[ebp], edi
  000b4	89 55 f4	 mov	 DWORD PTR __Gfirst$1$[ebp], edx
$LN72@Partition_:

; 7995 :         for (; _First < _Glast; --_Glast) {

  000b7	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  000ba	3b d8		 cmp	 ebx, eax
  000bc	76 34		 jbe	 SHORT $LN117@Partition_
  000be	8d 4b fc	 lea	 ecx, DWORD PTR [ebx-4]
  000c1	8b f8		 mov	 edi, eax
$LL14@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2475 :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  000c3	8b 01		 mov	 eax, DWORD PTR [ecx]
  000c5	3b 06		 cmp	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7997 :             if (_DEBUG_LT_PRED(_Pred, *_Glast_prev, *_Pfirst)) {

  000c7	7c 11		 jl	 SHORT $LN12@Partition_

; 7998 :                 continue;
; 7999 :             } else if (_Pred(*_Pfirst, *_Glast_prev)) {

  000c9	7f 19		 jg	 SHORT $LN97@Partition_

; 8000 :                 break;
; 8001 :             } else if (--_Pfirst != _Glast_prev) {

  000cb	83 ee 04	 sub	 esi, 4
  000ce	3b f1		 cmp	 esi, ecx
  000d0	74 08		 je	 SHORT $LN12@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 99   :     _Ty _Tmp = _STD move(_Left);

  000d2	8b 06		 mov	 eax, DWORD PTR [esi]

; 100  :     _Left    = _STD move(_Right);

  000d4	8b 11		 mov	 edx, DWORD PTR [ecx]
  000d6	89 16		 mov	 DWORD PTR [esi], edx

; 101  :     _Right   = _STD move(_Tmp);

  000d8	89 01		 mov	 DWORD PTR [ecx], eax
$LN12@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7995 :         for (; _First < _Glast; --_Glast) {

  000da	83 eb 04	 sub	 ebx, 4
  000dd	83 e9 04	 sub	 ecx, 4
  000e0	3b fb		 cmp	 edi, ebx
  000e2	72 df		 jb	 SHORT $LL14@Partition_
$LN97@Partition_:
  000e4	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]

; 8002 :                 swap(*_Pfirst, *_Glast_prev); // intentional ADL
; 8003 :             }
; 8004 :         }
; 8005 : 
; 8006 :         if (_Glast == _First && _Gfirst == _Last) {

  000e7	3b d8		 cmp	 ebx, eax
  000e9	8b 55 f4	 mov	 edx, DWORD PTR __Gfirst$1$[ebp]
  000ec	8b 7d fc	 mov	 edi, DWORD PTR __Plast$1$[ebp]
  000ef	89 5d f8	 mov	 DWORD PTR __Glast$1$[ebp], ebx
$LN117@Partition_:
  000f2	75 2a		 jne	 SHORT $LN27@Partition_
  000f4	3b 55 10	 cmp	 edx, DWORD PTR __Last$[ebp]
  000f7	74 62		 je	 SHORT $LN74@Partition_

; 8008 :         }
; 8009 : 
; 8010 :         if (_Glast == _First) { // no room at bottom, rotate pivot upward
; 8011 :             if (_Plast != _Gfirst) {

  000f9	3b fa		 cmp	 edi, edx
  000fb	74 08		 je	 SHORT $LN43@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 99   :     _Ty _Tmp = _STD move(_Left);

  000fd	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 100  :     _Left    = _STD move(_Right);

  000ff	8b 07		 mov	 eax, DWORD PTR [edi]
  00101	89 06		 mov	 DWORD PTR [esi], eax

; 101  :     _Right   = _STD move(_Tmp);

  00103	89 0f		 mov	 DWORD PTR [edi], ecx
$LN43@Partition_:

; 99   :     _Ty _Tmp = _STD move(_Left);

  00105	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8015 :             ++_Plast;

  00107	83 c7 04	 add	 edi, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 100  :     _Left    = _STD move(_Right);

  0010a	8b 02		 mov	 eax, DWORD PTR [edx]
  0010c	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8017 :             ++_Pfirst;

  0010e	83 c6 04	 add	 esi, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 101  :     _Right   = _STD move(_Tmp);

  00111	89 0a		 mov	 DWORD PTR [edx], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8018 :             ++_Gfirst;

  00113	83 c2 04	 add	 edx, 4
  00116	89 7d fc	 mov	 DWORD PTR __Plast$1$[ebp], edi
  00119	e9 59 ff ff ff	 jmp	 $LN118@Partition_
$LN27@Partition_:

; 8019 :         } else if (_Gfirst == _Last) { // no room at top, rotate pivot downward

  0011e	83 c3 fc	 add	 ebx, -4			; fffffffcH
  00121	89 5d f8	 mov	 DWORD PTR __Glast$1$[ebp], ebx
  00124	3b 55 10	 cmp	 edx, DWORD PTR __Last$[ebp]
  00127	75 22		 jne	 SHORT $LN30@Partition_

; 8020 :             if (--_Glast != --_Pfirst) {

  00129	83 ee 04	 sub	 esi, 4
  0012c	3b de		 cmp	 ebx, esi
  0012e	74 08		 je	 SHORT $LN90@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 99   :     _Ty _Tmp = _STD move(_Left);

  00130	8b 0b		 mov	 ecx, DWORD PTR [ebx]

; 100  :     _Left    = _STD move(_Right);

  00132	8b 06		 mov	 eax, DWORD PTR [esi]
  00134	89 03		 mov	 DWORD PTR [ebx], eax

; 101  :     _Right   = _STD move(_Tmp);

  00136	89 0e		 mov	 DWORD PTR [esi], ecx
$LN90@Partition_:

; 99   :     _Ty _Tmp = _STD move(_Left);

  00138	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8024 :             swap(*_Pfirst, *--_Plast); // intentional ADL

  0013a	83 ef 04	 sub	 edi, 4
  0013d	89 7d fc	 mov	 DWORD PTR __Plast$1$[ebp], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 100  :     _Left    = _STD move(_Right);

  00140	8b 07		 mov	 eax, DWORD PTR [edi]
  00142	89 06		 mov	 DWORD PTR [esi], eax

; 101  :     _Right   = _STD move(_Tmp);

  00144	89 0f		 mov	 DWORD PTR [edi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8025 :         } else {

  00146	e9 35 ff ff ff	 jmp	 $LL6@Partition_
$LN30@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 99   :     _Ty _Tmp = _STD move(_Left);

  0014b	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 100  :     _Left    = _STD move(_Right);

  0014d	8b 03		 mov	 eax, DWORD PTR [ebx]
  0014f	89 02		 mov	 DWORD PTR [edx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8027 :             ++_Gfirst;

  00151	83 c2 04	 add	 edx, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 101  :     _Right   = _STD move(_Tmp);

  00154	89 0b		 mov	 DWORD PTR [ebx], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8029 :     }

  00156	e9 19 ff ff ff	 jmp	 $LN119@Partition_
$LN74@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  0015b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0015e	89 78 04	 mov	 DWORD PTR [eax+4], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8007 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

  00161	5f		 pop	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00162	89 30		 mov	 DWORD PTR [eax], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8007 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

  00164	5e		 pop	 esi
  00165	5b		 pop	 ebx

; 8030 : }

  00166	8b e5		 mov	 esp, ebp
  00168	5d		 pop	 ebp
  00169	c3		 ret	 0
??$_Partition_by_median_guess_unchecked@PAHU?$less@X@std@@@std@@YA?AU?$pair@PAHPAH@0@PAH0U?$less@X@0@@Z ENDP ; std::_Partition_by_median_guess_unchecked<int *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$__std_find_trivial@HH@@YAPAHPAH0H@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$__std_find_trivial@HH@@YAPAHPAH0H@Z PROC		; __std_find_trivial<int,int>, COMDAT

; 114  : _Ty* __std_find_trivial(_Ty* _First, _Ty* _Last, const _TVal _Val) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 115  :     if constexpr (_STD is_pointer_v<_TVal> || _STD is_null_pointer_v<_TVal>) {
; 116  :         return __std_find_trivial(_First, _Last, reinterpret_cast<uintptr_t>(_Val));
; 117  :     } else if constexpr (sizeof(_Ty) == 1) {
; 118  :         return const_cast<_Ty*>(
; 119  :             static_cast<const _Ty*>(__std_find_trivial_1(_First, _Last, static_cast<uint8_t>(_Val))));
; 120  :     } else if constexpr (sizeof(_Ty) == 2) {
; 121  :         return const_cast<_Ty*>(
; 122  :             static_cast<const _Ty*>(__std_find_trivial_2(_First, _Last, static_cast<uint16_t>(_Val))));
; 123  :     } else if constexpr (sizeof(_Ty) == 4) {
; 124  :         return const_cast<_Ty*>(

  00003	ff 75 10	 push	 DWORD PTR __Val$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00009	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000c	e8 00 00 00 00	 call	 ___std_find_trivial_4@12

; 125  :             static_cast<const _Ty*>(__std_find_trivial_4(_First, _Last, static_cast<uint32_t>(_Val))));
; 126  :     } else if constexpr (sizeof(_Ty) == 8) {
; 127  :         return const_cast<_Ty*>(
; 128  :             static_cast<const _Ty*>(__std_find_trivial_8(_First, _Last, static_cast<uint64_t>(_Val))));
; 129  :     } else {
; 130  :         static_assert(_STD _Always_false<_Ty>, "Unexpected size");
; 131  :     }
; 132  : }

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$__std_find_trivial@HH@@YAPAHPAH0H@Z ENDP		; __std_find_trivial<int,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
;	COMDAT ??$_Sort_unchecked@PAHU?$less@X@std@@@std@@YAXPAH0HU?$less@X@0@@Z
_TEXT	SEGMENT
__Mid$1 = -20						; size = 8
tv695 = -16						; size = 4
__Hole$1$ = -12						; size = 4
__Bottom$1$ = -8					; size = 4
__Val$1$ = -4						; size = 4
__Max_sequence_non_leaf$1$ = 8				; size = 4
__First$ = 8						; size = 4
__Val$2 = 12						; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Sort_unchecked@PAHU?$less@X@std@@@std@@YAXPAH0HU?$less@X@0@@Z PROC ; std::_Sort_unchecked<int *,std::less<void> >, COMDAT

; 8033 : _CONSTEXPR20 void _Sort_unchecked(_RanIt _First, _RanIt _Last, _Iter_diff_t<_RanIt> _Ideal, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	53		 push	 ebx

; 8034 :     // order [_First, _Last)
; 8035 :     for (;;) {
; 8036 :         if (_Last - _First <= _ISORT_MAX) { // small

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  0000a	8b c3		 mov	 eax, ebx
  0000c	56		 push	 esi
  0000d	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00010	2b c6		 sub	 eax, esi
  00012	83 e0 fc	 and	 eax, -4			; fffffffcH
  00015	57		 push	 edi
  00016	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  0001b	7e 71		 jle	 SHORT $LN67@Sort_unche
  0001d	8b 4d 14	 mov	 ecx, DWORD PTR __Pred$[ebp]
  00020	8b 7d 10	 mov	 edi, DWORD PTR __Ideal$[ebp]
$LL2@Sort_unche:

; 8037 :             _Insertion_sort_unchecked(_First, _Last, _Pred);
; 8038 :             return;
; 8039 :         }
; 8040 : 
; 8041 :         if (_Ideal <= 0) { // heap sort if too many divisions

  00023	85 ff		 test	 edi, edi
  00025	0f 8e 99 00 00
	00		 jle	 $LN68@Sort_unche

; 8042 :             _Make_heap_unchecked(_First, _Last, _Pred);
; 8043 :             _Sort_heap_unchecked(_First, _Last, _Pred);
; 8044 :             return;
; 8045 :         }
; 8046 : 
; 8047 :         // divide and conquer by quicksort
; 8048 :         auto _Mid = _Partition_by_median_guess_unchecked(_First, _Last, _Pred);

  0002b	51		 push	 ecx
  0002c	53		 push	 ebx
  0002d	8d 45 ec	 lea	 eax, DWORD PTR __Mid$1[ebp]
  00030	56		 push	 esi
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ??$_Partition_by_median_guess_unchecked@PAHU?$less@X@std@@@std@@YA?AU?$pair@PAHPAH@0@PAH0U?$less@X@0@@Z ; std::_Partition_by_median_guess_unchecked<int *,std::less<void> >

; 8049 : 
; 8050 :         _Ideal = (_Ideal >> 1) + (_Ideal >> 2); // allow 1.5 log2(N) divisions
; 8051 : 
; 8052 :         if (_Mid.first - _First < _Last - _Mid.second) { // loop on second half

  00037	8b 55 f0	 mov	 edx, DWORD PTR __Mid$1[ebp+4]
  0003a	8b c7		 mov	 eax, edi
  0003c	c1 f8 02	 sar	 eax, 2
  0003f	8b cb		 mov	 ecx, ebx
  00041	d1 ff		 sar	 edi, 1
  00043	83 c4 10	 add	 esp, 16			; 00000010H
  00046	03 f8		 add	 edi, eax
  00048	2b ca		 sub	 ecx, edx
  0004a	8b 45 ec	 mov	 eax, DWORD PTR __Mid$1[ebp]
  0004d	83 e1 fc	 and	 ecx, -4			; fffffffcH
  00050	2b c6		 sub	 eax, esi
  00052	83 e0 fc	 and	 eax, -4			; fffffffcH
  00055	3b c1		 cmp	 eax, ecx
  00057	8b 45 14	 mov	 eax, DWORD PTR __Pred$[ebp]
  0005a	50		 push	 eax
  0005b	57		 push	 edi
  0005c	7d 0f		 jge	 SHORT $LN7@Sort_unche

; 8053 :             _Sort_unchecked(_First, _Mid.first, _Ideal, _Pred);

  0005e	8b 45 ec	 mov	 eax, DWORD PTR __Mid$1[ebp]
  00061	50		 push	 eax
  00062	56		 push	 esi
  00063	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAHU?$less@X@std@@@std@@YAXPAH0HU?$less@X@0@@Z ; std::_Sort_unchecked<int *,std::less<void> >

; 8054 :             _First = _Mid.second;

  00068	8b 75 f0	 mov	 esi, DWORD PTR __Mid$1[ebp+4]

; 8055 :         } else { // loop on first half

  0006b	eb 0d		 jmp	 SHORT $LN108@Sort_unche
$LN7@Sort_unche:

; 8056 :             _Sort_unchecked(_Mid.second, _Last, _Ideal, _Pred);

  0006d	53		 push	 ebx
  0006e	52		 push	 edx
  0006f	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAHU?$less@X@std@@@std@@YAXPAH0HU?$less@X@0@@Z ; std::_Sort_unchecked<int *,std::less<void> >

; 8057 :             _Last = _Mid.first;

  00074	8b 5d ec	 mov	 ebx, DWORD PTR __Mid$1[ebp]
  00077	89 5d 0c	 mov	 DWORD PTR __Last$[ebp], ebx
$LN108@Sort_unche:

; 8034 :     // order [_First, _Last)
; 8035 :     for (;;) {
; 8036 :         if (_Last - _First <= _ISORT_MAX) { // small

  0007a	8b 4d 14	 mov	 ecx, DWORD PTR __Pred$[ebp]
  0007d	8b c3		 mov	 eax, ebx
  0007f	2b c6		 sub	 eax, esi
  00081	83 c4 10	 add	 esp, 16			; 00000010H
  00084	83 e0 fc	 and	 eax, -4			; fffffffcH
  00087	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  0008c	7f 95		 jg	 SHORT $LL2@Sort_unche
$LN67@Sort_unche:

; 7907 :     if (_First != _Last) {

  0008e	3b f3		 cmp	 esi, ebx
  00090	0f 84 3b 01 00
	00		 je	 $LN51@Sort_unche

; 7908 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

  00096	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
  00099	3b d3		 cmp	 edx, ebx
  0009b	0f 84 30 01 00
	00		 je	 $LN51@Sort_unche
$LL11@Sort_unche:

; 7909 :             _BidIt _Hole               = _Mid;
; 7910 :             _Iter_value_t<_BidIt> _Val = _STD move(*_Mid);

  000a1	8b 1a		 mov	 ebx, DWORD PTR [edx]
  000a3	8b fa		 mov	 edi, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2475 :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  000a5	3b 1e		 cmp	 ebx, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7912 :             if (_DEBUG_LT_PRED(_Pred, _Val, *_First)) { // found new earliest element, move to front

  000a7	0f 8d fe 00 00
	00		 jge	 $LN18@Sort_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 4936 :             return _Copy_backward_memmove(_First, _Last, _Dest);

  000ad	8d 7a 04	 lea	 edi, DWORD PTR [edx+4]
  000b0	57		 push	 edi
  000b1	52		 push	 edx
  000b2	56		 push	 esi
  000b3	e8 00 00 00 00	 call	 ??$_Copy_backward_memmove@PAHPAH@std@@YAPAHPAH00@Z ; std::_Copy_backward_memmove<int *,int *>
  000b8	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7914 :                 *_First = _STD move(_Val);

  000bb	89 1e		 mov	 DWORD PTR [esi], ebx
  000bd	8b d7		 mov	 edx, edi

; 7915 :             } else { // look for insertion point after first

  000bf	e9 04 01 00 00	 jmp	 $LN19@Sort_unche
$LN68@Sort_unche:

; 6596 :     _Diff _Bottom = _Last - _First;

  000c4	2b de		 sub	 ebx, esi
  000c6	8b c3		 mov	 eax, ebx
  000c8	89 5d 0c	 mov	 DWORD PTR __Last$[ebp], ebx
  000cb	c1 f8 02	 sar	 eax, 2

; 6597 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

  000ce	8b f8		 mov	 edi, eax
  000d0	89 45 f8	 mov	 DWORD PTR __Bottom$1$[ebp], eax
  000d3	d1 ff		 sar	 edi, 1
  000d5	85 ff		 test	 edi, edi
  000d7	0f 8e 8c 00 00
	00		 jle	 $LN31@Sort_unche
  000dd	48		 dec	 eax
  000de	8b c8		 mov	 ecx, eax
  000e0	89 45 f0	 mov	 DWORD PTR tv695[ebp], eax
  000e3	d1 f9		 sar	 ecx, 1
  000e5	89 4d 08	 mov	 DWORD PTR __Max_sequence_non_leaf$1$[ebp], ecx
$LL30@Sort_unche:

; 6598 :         // reheap top half, bottom to top
; 6599 :         --_Hole;
; 6600 :         _Iter_value_t<_RanIt> _Val = _STD move(*(_First + _Hole));

  000e8	8b 44 be fc	 mov	 eax, DWORD PTR [esi+edi*4-4]
  000ec	4f		 dec	 edi
  000ed	89 7d f4	 mov	 DWORD PTR __Hole$1$[ebp], edi

; 6601 :         _STD _Pop_heap_hole_by_index(_First, _Hole, _Bottom, _STD move(_Val), _Pred);

  000f0	8b d7		 mov	 edx, edi
  000f2	89 45 fc	 mov	 DWORD PTR __Val$1$[ebp], eax

; 6438 :     _Diff _Idx       = _Hole;

  000f5	8b df		 mov	 ebx, edi

; 6439 : 
; 6440 :     // Check whether _Idx can have a child before calculating that child's index, since
; 6441 :     // calculating the child's index can trigger integer overflows
; 6442 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen
; 6443 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

  000f7	3b f9		 cmp	 edi, ecx
  000f9	7d 2a		 jge	 SHORT $LN36@Sort_unche
  000fb	8b 7d 08	 mov	 edi, DWORD PTR __Max_sequence_non_leaf$1$[ebp]
  000fe	66 90		 npad	 2
$LL35@Sort_unche:

; 6444 :         _Idx = 2 * _Idx + 2;

  00100	8d 0c 1b	 lea	 ecx, DWORD PTR [ebx+ebx]

; 6445 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {
; 6446 :             --_Idx;
; 6447 :         }
; 6448 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  00103	33 db		 xor	 ebx, ebx
  00105	8b 44 8e 08	 mov	 eax, DWORD PTR [esi+ecx*4+8]
  00109	3b 44 8e 04	 cmp	 eax, DWORD PTR [esi+ecx*4+4]
  0010d	0f 9d c3	 setge	 bl
  00110	43		 inc	 ebx
  00111	03 d9		 add	 ebx, ecx
  00113	8b 04 9e	 mov	 eax, DWORD PTR [esi+ebx*4]
  00116	89 04 96	 mov	 DWORD PTR [esi+edx*4], eax

; 6449 :         _Hole             = _Idx;

  00119	8b d3		 mov	 edx, ebx
  0011b	3b df		 cmp	 ebx, edi
  0011d	7c e1		 jl	 SHORT $LL35@Sort_unche
  0011f	8b 7d f4	 mov	 edi, DWORD PTR __Hole$1$[ebp]
  00122	8b 4d 08	 mov	 ecx, DWORD PTR __Max_sequence_non_leaf$1$[ebp]
$LN36@Sort_unche:

; 6450 :     }
; 6451 : 
; 6452 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

  00125	3b d9		 cmp	 ebx, ecx
  00127	75 11		 jne	 SHORT $LN38@Sort_unche
  00129	8b 45 f8	 mov	 eax, DWORD PTR __Bottom$1$[ebp]
  0012c	a8 01		 test	 al, 1
  0012e	75 0a		 jne	 SHORT $LN38@Sort_unche

; 6453 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

  00130	8b 44 86 fc	 mov	 eax, DWORD PTR [esi+eax*4-4]
  00134	89 04 96	 mov	 DWORD PTR [esi+edx*4], eax

; 6454 :         _Hole             = _Bottom - 1;

  00137	8b 55 f0	 mov	 edx, DWORD PTR tv695[ebp]
$LN38@Sort_unche:

; 6328 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

  0013a	8b 5d fc	 mov	 ebx, DWORD PTR __Val$1$[ebp]
  0013d	3b fa		 cmp	 edi, edx
  0013f	7d 18		 jge	 SHORT $LN44@Sort_unche
$LL45@Sort_unche:

; 6327 :     for (_Diff _Idx = (_Hole - 1) >> 1; // shift for codegen

  00141	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  00144	d1 f8		 sar	 eax, 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2475 :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  00146	8b 0c 86	 mov	 ecx, DWORD PTR [esi+eax*4]
  00149	3b cb		 cmp	 ecx, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 6328 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

  0014b	7d 09		 jge	 SHORT $LN90@Sort_unche

; 6329 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 6330 :         // move _Hole up to parent
; 6331 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  0014d	89 0c 96	 mov	 DWORD PTR [esi+edx*4], ecx

; 6332 :         _Hole             = _Idx;

  00150	8b d0		 mov	 edx, eax
  00152	3b f8		 cmp	 edi, eax
  00154	7c eb		 jl	 SHORT $LL45@Sort_unche
$LN90@Sort_unche:

; 6328 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

  00156	8b 4d 08	 mov	 ecx, DWORD PTR __Max_sequence_non_leaf$1$[ebp]
$LN44@Sort_unche:

; 6333 :     }
; 6334 : 
; 6335 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

  00159	89 1c 96	 mov	 DWORD PTR [esi+edx*4], ebx

; 6597 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

  0015c	85 ff		 test	 edi, edi
  0015e	7f 88		 jg	 SHORT $LL30@Sort_unche
  00160	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  00163	8b 4d 14	 mov	 ecx, DWORD PTR __Pred$[ebp]
  00166	8b 45 f8	 mov	 eax, DWORD PTR __Bottom$1$[ebp]
$LN31@Sort_unche:

; 6818 :     for (; _Last - _First >= 2; --_Last) {

  00169	83 f8 02	 cmp	 eax, 2
  0016c	7c 63		 jl	 SHORT $LN51@Sort_unche
  0016e	66 90		 npad	 2
$LL52@Sort_unche:

; 6476 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

  00170	8b 44 1e fc	 mov	 eax, DWORD PTR [esi+ebx-4]
  00174	89 45 0c	 mov	 DWORD PTR __Val$2[ebp], eax

; 6465 :     *_Dest      = _STD move(*_First);

  00177	8b 06		 mov	 eax, DWORD PTR [esi]
  00179	89 44 1e fc	 mov	 DWORD PTR [esi+ebx-4], eax

; 6466 :     using _Diff = _Iter_diff_t<_RanIt>;
; 6467 :     _STD _Pop_heap_hole_by_index(

  0017d	8d 45 0c	 lea	 eax, DWORD PTR __Val$2[ebp]
  00180	51		 push	 ecx
  00181	50		 push	 eax
  00182	8d 43 fc	 lea	 eax, DWORD PTR [ebx-4]
  00185	c1 f8 02	 sar	 eax, 2
  00188	50		 push	 eax
  00189	6a 00		 push	 0
  0018b	56		 push	 esi
  0018c	e8 00 00 00 00	 call	 ??$_Pop_heap_hole_by_index@PAHHU?$less@X@std@@@std@@YAXPAHHH$$QAHU?$less@X@0@@Z ; std::_Pop_heap_hole_by_index<int *,int,std::less<void> >

; 6818 :     for (; _Last - _First >= 2; --_Last) {

  00191	8b 4d 14	 mov	 ecx, DWORD PTR __Pred$[ebp]
  00194	83 c3 fc	 add	 ebx, -4			; fffffffcH
  00197	8b c3		 mov	 eax, ebx

; 6467 :     _STD _Pop_heap_hole_by_index(

  00199	83 c4 14	 add	 esp, 20			; 00000014H

; 6818 :     for (; _Last - _First >= 2; --_Last) {

  0019c	83 e0 fc	 and	 eax, -4			; fffffffcH
  0019f	83 f8 08	 cmp	 eax, 8
  001a2	7d cc		 jge	 SHORT $LL52@Sort_unche

; 8058 :         }
; 8059 :     }
; 8060 : }

  001a4	5f		 pop	 edi
  001a5	5e		 pop	 esi
  001a6	5b		 pop	 ebx
  001a7	8b e5		 mov	 esp, ebp
  001a9	5d		 pop	 ebp
  001aa	c3		 ret	 0
$LN18@Sort_unche:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2475 :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  001ab	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7916 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

  001ae	8d 42 fc	 lea	 eax, DWORD PTR [edx-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2475 :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  001b1	3b d9		 cmp	 ebx, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7916 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

  001b3	7d 0e		 jge	 SHORT $LN15@Sort_unche
$LL16@Sort_unche:

; 7917 :                     *_Hole = _STD move(*_Prev); // move hole down

  001b5	89 0f		 mov	 DWORD PTR [edi], ecx
  001b7	8b f8		 mov	 edi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2475 :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  001b9	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7916 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

  001bc	83 e8 04	 sub	 eax, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2475 :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  001bf	3b d9		 cmp	 ebx, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7916 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

  001c1	7c f2		 jl	 SHORT $LL16@Sort_unche
$LN15@Sort_unche:

; 7918 :                 }
; 7919 : 
; 7920 :                 *_Hole = _STD move(_Val); // insert element in hole

  001c3	89 1f		 mov	 DWORD PTR [edi], ebx
  001c5	83 c2 04	 add	 edx, 4
$LN19@Sort_unche:

; 7908 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

  001c8	3b 55 0c	 cmp	 edx, DWORD PTR __Last$[ebp]
  001cb	0f 85 d0 fe ff
	ff		 jne	 $LL11@Sort_unche
$LN51@Sort_unche:
  001d1	5f		 pop	 edi

; 8058 :         }
; 8059 :     }
; 8060 : }

  001d2	5e		 pop	 esi
  001d3	5b		 pop	 ebx
  001d4	8b e5		 mov	 esp, ebp
  001d6	5d		 pop	 ebp
  001d7	c3		 ret	 0
??$_Sort_unchecked@PAHU?$less@X@std@@@std@@YAXPAH0HU?$less@X@0@@Z ENDP ; std::_Sort_unchecked<int *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??$_Emplace_reallocate@H@?$vector@HV?$allocator@H@std@@@std@@AAEPAHQAH$$QAH@Z
_TEXT	SEGMENT
__Newsize$1$ = -12					; size = 4
tv607 = -8						; size = 4
tv590 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@H@?$vector@HV?$allocator@H@std@@@std@@AAEPAHQAH$$QAH@Z PROC ; std::vector<int,std::allocator<int> >::_Emplace_reallocate<int>, COMDAT
; _this$ = ecx

; 812  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 813  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 814  :         _Alty& _Al        = _Getal();
; 815  :         auto& _My_data    = _Mypair._Myval2;
; 816  :         pointer& _Myfirst = _My_data._Myfirst;
; 817  :         pointer& _Mylast  = _My_data._Mylast;
; 818  : 
; 819  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 820  : 
; 821  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	2b d9		 sub	 ebx, ecx

; 822  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c1		 sub	 eax, ecx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 823  : 
; 824  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 0f 01 00
	00		 je	 $LN96@Emplace_re

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 826  :         }
; 827  : 
; 828  :         const size_type _Newsize     = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b d1		 sub	 edx, ecx

; 826  :         }
; 827  : 
; 828  :         const size_type _Newsize     = _Oldsize + 1;

  00030	89 7d f4	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 fa 02	 sar	 edx, 2

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b ca		 mov	 ecx, edx
  0003d	d1 e9		 shr	 ecx, 1
  0003f	2b c1		 sub	 eax, ecx
  00041	3b d0		 cmp	 edx, eax
  00043	76 15		 jbe	 SHORT $LN12@Emplace_re

; 1967 :             return _Max; // geometric growth would overflow

  00045	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004a	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1967 :             return _Max; // geometric growth would overflow

  0004b	89 45 f8	 mov	 DWORD PTR tv607[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00053	83 c4 04	 add	 esp, 4
  00056	8b f8		 mov	 edi, eax
  00058	eb 47		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1970 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005a	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 70   :         if (_Count > _Max_possible) {

  0005d	8b cf		 mov	 ecx, edi
  0005f	3b c7		 cmp	 eax, edi
  00061	0f 43 c8	 cmovae	 ecx, eax
  00064	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  0006a	0f 87 cc 00 00
	00		 ja	 $LN97@Emplace_re

; 72   :         }
; 73   :     }
; 74   : 
; 75   :     return _Count * _Ty_size;

  00070	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  00077	89 45 f8	 mov	 DWORD PTR tv607[ebp], eax

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0007a	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0007f	72 0d		 jb	 SHORT $LN24@Emplace_re

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00087	83 c4 04	 add	 esp, 4
  0008a	8b f8		 mov	 edi, eax
  0008c	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  0008e	85 c0		 test	 eax, eax
  00090	74 0d		 je	 SHORT $LN25@Emplace_re

; 87   :         return ::operator new(_Bytes);

  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00098	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  0009b	8b f8		 mov	 edi, eax
  0009d	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  0009f	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 836  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000a1	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000a4	8d 0c 9f	 lea	 ecx, DWORD PTR [edi+ebx*4]

; 837  :         _Constructed_first = _Newvec + _Whereoff;
; 838  : 
; 839  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000a7	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  000aa	89 4d fc	 mov	 DWORD PTR tv590[ebp], ecx
  000ad	8b 00		 mov	 eax, DWORD PTR [eax]
  000af	89 01		 mov	 DWORD PTR [ecx], eax
  000b1	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000b4	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000b6	3b d8		 cmp	 ebx, eax
  000b8	75 07		 jne	 SHORT $LN4@Emplace_re

; 845  :         } else { // provide basic guarantee

  000ba	8b 5d fc	 mov	 ebx, DWORD PTR tv590[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000bd	8b d7		 mov	 edx, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 845  :         } else { // provide basic guarantee

  000bf	eb 16		 jmp	 SHORT $LN52@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000c1	57		 push	 edi
  000c2	53		 push	 ebx
  000c3	51		 push	 ecx
  000c4	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAHPAH@std@@YAPAHPAH00@Z ; std::_Copy_memmove<int *,int *>
  000c9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000cc	8b cb		 mov	 ecx, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000ce	8b 5d fc	 mov	 ebx, DWORD PTR tv590[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000d1	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000d4	8d 53 04	 lea	 edx, DWORD PTR [ebx+4]
$LN52@Emplace_re:
  000d7	52		 push	 edx
  000d8	50		 push	 eax
  000d9	51		 push	 ecx
  000da	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAHPAH@std@@YAPAHPAH00@Z ; std::_Copy_memmove<int *,int *>

; 2023 :         if (_Myfirst) { // destroy and deallocate old array

  000df	8b 06		 mov	 eax, DWORD PTR [esi]

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000e1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2023 :         if (_Myfirst) { // destroy and deallocate old array

  000e4	85 c0		 test	 eax, eax
  000e6	74 2c		 je	 SHORT $LN70@Emplace_re

; 2024 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2025 :             _ASAN_VECTOR_REMOVE;
; 2026 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e8	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000eb	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ed	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000f0	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f6	72 12		 jb	 SHORT $LN80@Emplace_re

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f8	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000fb	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000fe	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00100	83 c0 fc	 add	 eax, -4			; fffffffcH
  00103	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00106	77 2a		 ja	 SHORT $LN77@Emplace_re

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00108	8b c2		 mov	 eax, edx
$LN80@Emplace_re:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0010a	51		 push	 ecx
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00111	83 c4 08	 add	 esp, 8
$LN70@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2030 :         _Mylast  = _Newvec + _Newsize;

  00114	8b 45 f4	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  00117	89 3e		 mov	 DWORD PTR [esi], edi
  00119	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]

; 849  :         }
; 850  :         _CATCH_ALL
; 851  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 852  :         _Al.deallocate(_Newvec, _Newcapacity);
; 853  :         _RERAISE;
; 854  :         _CATCH_END
; 855  : 
; 856  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 857  :         return _Newvec + _Whereoff;

  0011c	8b c3		 mov	 eax, ebx

; 2030 :         _Mylast  = _Newvec + _Newsize;

  0011e	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 2031 :         _Myend   = _Newvec + _Newcapacity;

  00121	8b 4d f8	 mov	 ecx, DWORD PTR tv607[ebp]
  00124	03 cf		 add	 ecx, edi

; 858  :     }

  00126	5f		 pop	 edi

; 2031 :         _Myend   = _Newvec + _Newcapacity;

  00127	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 858  :     }

  0012a	5e		 pop	 esi
  0012b	5b		 pop	 ebx
  0012c	8b e5		 mov	 esp, ebp
  0012e	5d		 pop	 ebp
  0012f	c2 08 00	 ret	 8
$LN77@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00132	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN96@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 825  :             _Xlength();

  00137	e8 00 00 00 00	 call	 ?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ ; std::vector<int,std::allocator<int> >::_Xlength
$LN97@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 71   :             _Throw_bad_array_new_length(); // multiply overflow

  0013c	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN94@Emplace_re:
  00141	cc		 int	 3
??$_Emplace_reallocate@H@?$vector@HV?$allocator@H@std@@@std@@AAEPAHQAH$$QAH@Z ENDP ; std::vector<int,std::allocator<int> >::_Emplace_reallocate<int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$upper_bound@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MJ@std@@@std@@@std@@@std@@U?$pair@MJ@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MJ@std@@@std@@@std@@@0@V10@0ABU?$pair@MJ@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Val$ = 20						; size = 4
??$upper_bound@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MJ@std@@@std@@@std@@@std@@U?$pair@MJ@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MJ@std@@@std@@@std@@@0@V10@0ABU?$pair@MJ@0@@Z PROC ; std::upper_bound<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,long> > > >,std::pair<float,long> >, COMDAT

; 7081 : _NODISCARD _CONSTEXPR20 _FwdIt upper_bound(_FwdIt _First, _FwdIt _Last, const _Ty& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1422 :         return _Last - _First; // assume the iterator will do debug checking

  00003	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]

; 7081 : _NODISCARD _CONSTEXPR20 _FwdIt upper_bound(_FwdIt _First, _FwdIt _Last, const _Ty& _Val) {

  00006	57		 push	 edi

; 7062 :     auto _UFirst                = _Get_unwrapped(_First);

  00007	8b 7d 0c	 mov	 edi, DWORD PTR __First$[ebp]

; 1422 :         return _Last - _First; // assume the iterator will do debug checking

  0000a	2b cf		 sub	 ecx, edi
  0000c	c1 f9 03	 sar	 ecx, 3

; 7065 :     while (0 < _Count) { // divide and conquer, find half that contains answer

  0000f	85 c9		 test	 ecx, ecx
  00011	7e 3f		 jle	 SHORT $LN26@upper_boun
  00013	53		 push	 ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 506  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  00014	8b 5d 14	 mov	 ebx, DWORD PTR __Val$[ebp]
  00017	56		 push	 esi
  00018	f3 0f 10 0b	 movss	 xmm1, DWORD PTR [ebx]
  0001c	0f 1f 40 00	 npad	 4
$LL4@upper_boun:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 7066 :         _Iter_diff_t<_FwdIt> _Count2 = _Count / 2;

  00020	8b d1		 mov	 edx, ecx
  00022	d1 ea		 shr	 edx, 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 506  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  00024	f3 0f 10 04 d7	 movss	 xmm0, DWORD PTR [edi+edx*8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 1394 :         _Where += _Off;

  00029	8d 34 d7	 lea	 esi, DWORD PTR [edi+edx*8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 506  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  0002c	0f 2f c1	 comiss	 xmm0, xmm1
  0002f	77 19		 ja	 SHORT $LN25@upper_boun
  00031	0f 2f c8	 comiss	 xmm1, xmm0
  00034	77 08		 ja	 SHORT $LN6@upper_boun
  00036	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00039	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  0003c	7c 0c		 jl	 SHORT $LN25@upper_boun
$LN6@upper_boun:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 7072 :             _Count -= _Count2 + 1;

  0003e	83 c8 ff	 or	 eax, -1
  00041	8d 7e 08	 lea	 edi, DWORD PTR [esi+8]
  00044	2b c2		 sub	 eax, edx
  00046	03 c8		 add	 ecx, eax
  00048	eb 02		 jmp	 SHORT $LN7@upper_boun
$LN25@upper_boun:

; 7067 :         const auto _UMid             = _STD next(_UFirst, _Count2);
; 7068 :         if (_Pred(_Val, *_UMid)) {
; 7069 :             _Count = _Count2;

  0004a	8b ca		 mov	 ecx, edx
$LN7@upper_boun:

; 7063 :     _Iter_diff_t<_FwdIt> _Count = _STD distance(_UFirst, _Get_unwrapped(_Last));
; 7064 : 
; 7065 :     while (0 < _Count) { // divide and conquer, find half that contains answer

  0004c	85 c9		 test	 ecx, ecx
  0004e	7f d0		 jg	 SHORT $LL4@upper_boun
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
$LN26@upper_boun:

; 7082 :     // find first element that _Val is before
; 7083 :     return _STD upper_bound(_First, _Last, _Val, less<>{});
; 7084 : }

  00052	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00055	89 38		 mov	 DWORD PTR [eax], edi
  00057	5f		 pop	 edi
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
??$upper_bound@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MJ@std@@@std@@@std@@@std@@U?$pair@MJ@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MJ@std@@@std@@@std@@@0@V10@0ABU?$pair@MJ@0@@Z ENDP ; std::upper_bound<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,long> > > >,std::pair<float,long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapOutdoorRenderHTP.cpp
;	COMDAT ?__HardwareTransformPatch_RenderPatchNone@CMapOutdoor@@IAEXJGW4_D3DPRIMITIVETYPE@@@Z
_TEXT	SEGMENT
_patchnum$ = 8						; size = 4
_wPrimitiveCount$ = 12					; size = 2
_ePrimitiveType$ = 16					; size = 4
?__HardwareTransformPatch_RenderPatchNone@CMapOutdoor@@IAEXJGW4_D3DPRIMITIVETYPE@@@Z PROC ; CMapOutdoor::__HardwareTransformPatch_RenderPatchNone, COMDAT
; _this$ = ecx

; 691  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 692  : 	assert(NULL!=m_pTerrainPatchProxyList && "__HardwareTransformPatch_RenderPatchNone");
; 693  : 	CTerrainPatchProxy * pTerrainPatchProxy = &m_pTerrainPatchProxyList[patchnum];

  00003	8b 45 08	 mov	 eax, DWORD PTR _patchnum$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	8d 14 c5 00 00
	00 00		 lea	 edx, DWORD PTR [eax*8]
  00010	2b d0		 sub	 edx, eax
  00012	8b 46 64	 mov	 eax, DWORD PTR [esi+100]

; 694  : 
; 695  : 	if (!pTerrainPatchProxy->isUsed())

  00015	80 7c 90 04 00	 cmp	 BYTE PTR [eax+edx*4+4], 0
  0001a	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  0001d	74 3c		 je	 SHORT $LN1@HardwareTr

; 696  : 		return;
; 697  : 
; 698  : 	CGraphicVertexBuffer* pkVB=pTerrainPatchProxy->HardwareTransformPatch_GetVertexBufferPtr();

  0001f	e8 00 00 00 00	 call	 ?HardwareTransformPatch_GetVertexBufferPtr@CTerrainPatchProxy@@QAEPAVCGraphicVertexBuffer@@XZ ; CTerrainPatchProxy::HardwareTransformPatch_GetVertexBufferPtr

; 699  : 	if (!pkVB)

  00024	85 c0		 test	 eax, eax
  00026	74 33		 je	 SHORT $LN1@HardwareTr

; 700  : 		return;
; 701  : 
; 702  : 	STATEMANAGER.SetStreamSource(0, pkVB->GetD3DVertexBuffer(), m_iPatchTerrainVertexSize);

  00028	ff b6 a8 09 00
	00		 push	 DWORD PTR [esi+2472]
  0002e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00034	ff 70 04	 push	 DWORD PTR [eax+4]
  00037	6a 00		 push	 0
  00039	e8 00 00 00 00	 call	 ?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z ; CStateManager::SetStreamSource

; 703  : 	STATEMANAGER.DrawIndexedPrimitive(ePrimitiveType, 0, m_iPatchTerrainVertexCount, 0, wPrimitiveCount);

  0003e	0f b7 45 0c	 movzx	 eax, WORD PTR _wPrimitiveCount$[ebp]
  00042	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00048	50		 push	 eax
  00049	6a 00		 push	 0
  0004b	ff b6 a0 09 00
	00		 push	 DWORD PTR [esi+2464]
  00051	6a 00		 push	 0
  00053	ff 75 10	 push	 DWORD PTR _ePrimitiveType$[ebp]
  00056	e8 00 00 00 00	 call	 ?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIII@Z ; CStateManager::DrawIndexedPrimitive
$LN1@HardwareTr:
  0005b	5e		 pop	 esi

; 704  : }

  0005c	5d		 pop	 ebp
  0005d	c2 0c 00	 ret	 12			; 0000000cH
?__HardwareTransformPatch_RenderPatchNone@CMapOutdoor@@IAEXJGW4_D3DPRIMITIVETYPE@@@Z ENDP ; CMapOutdoor::__HardwareTransformPatch_RenderPatchNone
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapOutdoorRenderHTP.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapOutdoorRenderHTP.cpp
; File C:\Marty 5.5\Src-Client\Client\GameLib\AreaTerrain.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapOutdoorRenderHTP.cpp
; File C:\Marty 5.5\Src-Client\Client\GameLib\AreaTerrain.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapOutdoorRenderHTP.cpp
; File C:\Marty 5.5\Src-Client\Client\PRTerrainLib\Terrain.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapOutdoorRenderHTP.cpp
; File C:\Marty 5.5\Src-Client\Client\PRTerrainLib\Terrain.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapOutdoorRenderHTP.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapOutdoorRenderHTP.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapOutdoorRenderHTP.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapOutdoorRenderHTP.cpp
; File C:\Marty 5.5\Src-Client\Client\PRTerrainLib\Terrain.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapOutdoorRenderHTP.cpp
; File C:\Marty 5.5\Src-Client\Client\PRTerrainLib\Terrain.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapOutdoorRenderHTP.cpp
;	COMDAT ?__HardwareTransformPatch_RenderPatchSplat@CMapOutdoor@@IAEXJGW4_D3DPRIMITIVETYPE@@@Z
_TEXT	SEGMENT
_iPrevRenderedSplatNum$1$ = -360			; size = 4
_sPatchNum$1$ = -356					; size = 4
_pTerrain$ = -352					; size = 4
_pTerrainPatchProxy$1$ = -348				; size = 4
$T1 = -348						; size = 4
_dwFogColor$1$ = -344					; size = 4
_ucTerrainNum$ = -344					; size = 1
_dwB$1$ = -340						; size = 4
_rTexture$1$ = -340					; size = 4
_dwG$1$ = -336						; size = 4
tv1193 = -336						; size = 4
_dwR$1$ = -332						; size = 4
_pTerrain$1$ = -332					; size = 4
_isFirst$1$ = -325					; size = 1
_matShadowTexTransform$2 = -324				; size = 64
_matSplatAlphaTexTransform$ = -260			; size = 64
_matTexTransform$ = -196				; size = 64
_matSplatColorTexTransform$ = -132			; size = 64
_matTiling$ = -68					; size = 64
__$ArrayPad$ = -4					; size = 4
_patchnum$ = 8						; size = 4
_wPrimitiveCount$ = 12					; size = 2
_ePrimitiveType$ = 16					; size = 4
?__HardwareTransformPatch_RenderPatchSplat@CMapOutdoor@@IAEXJGW4_D3DPRIMITIVETYPE@@@Z PROC ; CMapOutdoor::__HardwareTransformPatch_RenderPatchSplat, COMDAT
; _this$ = ecx

; 254  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 68 01 00
	00		 sub	 esp, 360		; 00000168H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 08	 mov	 eax, DWORD PTR _patchnum$[ebp]
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx

; 255  : 	assert(NULL!=m_pTerrainPatchProxyList && "__HardwareTransformPatch_RenderPatchSplat");
; 256  : 	CTerrainPatchProxy * pTerrainPatchProxy = &m_pTerrainPatchProxyList[patchnum];

  00019	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  00020	2b c8		 sub	 ecx, eax
  00022	8b 46 64	 mov	 eax, DWORD PTR [esi+100]

; 257  : 
; 258  : 	if (!pTerrainPatchProxy->isUsed())

  00025	80 7c 88 04 00	 cmp	 BYTE PTR [eax+ecx*4+4], 0
  0002a	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  0002d	89 85 a4 fe ff
	ff		 mov	 DWORD PTR _pTerrainPatchProxy$1$[ebp], eax
  00033	0f 84 aa 07 00
	00		 je	 $LN1@HardwareTr

; 259  : 		return;
; 260  : 
; 261  : 	long sPatchNum = pTerrainPatchProxy->GetPatchNum();

  00039	0f bf 48 06	 movsx	 ecx, WORD PTR [eax+6]
  0003d	89 8d 9c fe ff
	ff		 mov	 DWORD PTR _sPatchNum$1$[ebp], ecx

; 262  : 	if (sPatchNum < 0)

  00043	85 c9		 test	 ecx, ecx
  00045	0f 88 98 07 00
	00		 js	 $LN1@HardwareTr

; 263  : 		return;
; 264  : 
; 265  : 	BYTE ucTerrainNum = pTerrainPatchProxy->GetTerrainNum();

  0004b	8a 40 08	 mov	 al, BYTE PTR [eax+8]
  0004e	88 85 a8 fe ff
	ff		 mov	 BYTE PTR _ucTerrainNum$[ebp], al

; 266  : 	if (0xFF == ucTerrainNum)

  00054	3c ff		 cmp	 al, 255			; 000000ffH
  00056	0f 84 87 07 00
	00		 je	 $LN1@HardwareTr

; 267  : 		return;
; 268  : 
; 269  : 	CTerrain * pTerrain;
; 270  : 	if (!GetTerrainPointer(ucTerrainNum, &pTerrain))

  0005c	8d 85 a0 fe ff
	ff		 lea	 eax, DWORD PTR _pTerrain$[ebp]
  00062	8b ce		 mov	 ecx, esi
  00064	50		 push	 eax
  00065	ff b5 a8 fe ff
	ff		 push	 DWORD PTR _ucTerrainNum$[ebp]
  0006b	e8 00 00 00 00	 call	 ?GetTerrainPointer@CMapOutdoor@@QAEHEPAPAVCTerrain@@@Z ; CMapOutdoor::GetTerrainPointer
  00070	85 c0		 test	 eax, eax
  00072	0f 84 6b 07 00
	00		 je	 $LN1@HardwareTr

; 271  : 		return;
; 272  : 
; 273  : 	DWORD dwFogColor;
; 274  : 	if (mc_pEnvironmentData)

  00078	53		 push	 ebx
  00079	57		 push	 edi
  0007a	8b 7e 3c	 mov	 edi, DWORD PTR [esi+60]
  0007d	85 ff		 test	 edi, edi
  0007f	0f 84 52 01 00
	00		 je	 $LN9@HardwareTr
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00085	f3 0f 10 87 2c
	01 00 00	 movss	 xmm0, DWORD PTR [edi+300]
  0008d	0f 57 c9	 xorps	 xmm1, xmm1
  00090	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00097	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@437f0000
  0009f	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR __real@3f000000
  000a7	72 0c		 jb	 SHORT $LN116@HardwareTr
  000a9	c7 85 b4 fe ff
	ff ff 00 00 00	 mov	 DWORD PTR _dwR$1$[ebp], 255 ; 000000ffH
  000b3	eb 37		 jmp	 SHORT $LN115@HardwareTr
$LN116@HardwareTr:
  000b5	0f 2f c8	 comiss	 xmm1, xmm0
  000b8	72 0c		 jb	 SHORT $LN114@HardwareTr
  000ba	c7 85 b4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _dwR$1$[ebp], 0
  000c4	eb 26		 jmp	 SHORT $LN115@HardwareTr
$LN114@HardwareTr:
  000c6	f3 0f 59 c3	 mulss	 xmm0, xmm3
  000ca	f3 0f 58 c4	 addss	 xmm0, xmm4
  000ce	e8 00 00 00 00	 call	 __ftol3
  000d3	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@437f0000
  000db	0f 57 c9	 xorps	 xmm1, xmm1
  000de	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR __real@3f000000
  000e6	89 85 b4 fe ff
	ff		 mov	 DWORD PTR _dwR$1$[ebp], eax
$LN115@HardwareTr:

; 932  :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  000ec	f3 0f 10 87 30
	01 00 00	 movss	 xmm0, DWORD PTR [edi+304]
  000f4	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  000fb	72 0c		 jb	 SHORT $LN120@HardwareTr
  000fd	c7 85 b0 fe ff
	ff ff 00 00 00	 mov	 DWORD PTR _dwG$1$[ebp], 255 ; 000000ffH
  00107	eb 24		 jmp	 SHORT $LN119@HardwareTr
$LN120@HardwareTr:
  00109	0f 2f c8	 comiss	 xmm1, xmm0
  0010c	72 0c		 jb	 SHORT $LN118@HardwareTr
  0010e	c7 85 b0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _dwG$1$[ebp], 0
  00118	eb 13		 jmp	 SHORT $LN119@HardwareTr
$LN118@HardwareTr:
  0011a	f3 0f 59 c3	 mulss	 xmm0, xmm3
  0011e	f3 0f 58 c4	 addss	 xmm0, xmm4
  00122	e8 00 00 00 00	 call	 __ftol3
  00127	89 85 b0 fe ff
	ff		 mov	 DWORD PTR _dwG$1$[ebp], eax
$LN119@HardwareTr:

; 933  :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  0012d	f3 0f 10 87 34
	01 00 00	 movss	 xmm0, DWORD PTR [edi+308]
  00135	0f 57 c9	 xorps	 xmm1, xmm1
  00138	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  0013f	72 0c		 jb	 SHORT $LN124@HardwareTr
  00141	c7 85 ac fe ff
	ff ff 00 00 00	 mov	 DWORD PTR _dwB$1$[ebp], 255 ; 000000ffH
  0014b	eb 2f		 jmp	 SHORT $LN123@HardwareTr
$LN124@HardwareTr:
  0014d	0f 2f c8	 comiss	 xmm1, xmm0
  00150	72 0c		 jb	 SHORT $LN122@HardwareTr
  00152	c7 85 ac fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _dwB$1$[ebp], 0
  0015c	eb 1e		 jmp	 SHORT $LN123@HardwareTr
$LN122@HardwareTr:
  0015e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00166	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  0016e	e8 00 00 00 00	 call	 __ftol3
  00173	89 85 ac fe ff
	ff		 mov	 DWORD PTR _dwB$1$[ebp], eax
  00179	0f 57 c9	 xorps	 xmm1, xmm1
$LN123@HardwareTr:

; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  0017c	f3 0f 10 87 38
	01 00 00	 movss	 xmm0, DWORD PTR [edi+312]
  00184	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  0018b	72 07		 jb	 SHORT $LN128@HardwareTr
  0018d	bb ff 00 00 00	 mov	 ebx, 255		; 000000ffH
  00192	eb 20		 jmp	 SHORT $LN127@HardwareTr
$LN128@HardwareTr:
  00194	0f 2f c8	 comiss	 xmm1, xmm0
  00197	72 04		 jb	 SHORT $LN126@HardwareTr
  00199	33 db		 xor	 ebx, ebx
  0019b	eb 17		 jmp	 SHORT $LN127@HardwareTr
$LN126@HardwareTr:
  0019d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  001a5	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  001ad	e8 00 00 00 00	 call	 __ftol3
  001b2	8b d8		 mov	 ebx, eax
$LN127@HardwareTr:

; 935  : 
; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  001b4	c1 e3 08	 shl	 ebx, 8
  001b7	0b 9d b4 fe ff
	ff		 or	 ebx, DWORD PTR _dwR$1$[ebp]
  001bd	c1 e3 08	 shl	 ebx, 8
  001c0	0b 9d b0 fe ff
	ff		 or	 ebx, DWORD PTR _dwG$1$[ebp]
  001c6	c1 e3 08	 shl	 ebx, 8
  001c9	0b 9d ac fe ff
	ff		 or	 ebx, DWORD PTR _dwB$1$[ebp]
  001cf	89 9d a8 fe ff
	ff		 mov	 DWORD PTR _dwFogColor$1$[ebp], ebx
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapOutdoorRenderHTP.cpp

; 275  : 		dwFogColor=mc_pEnvironmentData->FogColor;

  001d5	eb 0a		 jmp	 SHORT $LN10@HardwareTr
$LN9@HardwareTr:

; 276  : 	else
; 277  : 		dwFogColor=0xffffffff;

  001d7	c7 85 a8 fe ff
	ff ff ff ff ff	 mov	 DWORD PTR _dwFogColor$1$[ebp], -1
$LN10@HardwareTr:
; File C:\Marty 5.5\Src-Client\Client\GameLib\AreaTerrain.h

; 93   : 			*usCoordY = m_wY;

  001e1	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR _pTerrain$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapOutdoorRenderHTP.cpp

; 287  : 	D3DXMatrixMultiply(&matTexTransform, &m_matViewInverse, &m_matWorldForCommonUse);

  001e7	8d 9e 88 07 00
	00		 lea	 ebx, DWORD PTR [esi+1928]
; File C:\Marty 5.5\Src-Client\Client\GameLib\AreaTerrain.h

; 93   : 			*usCoordY = m_wY;

  001ed	89 85 b4 fe ff
	ff		 mov	 DWORD PTR _pTerrain$1$[ebp], eax
  001f3	0f b7 88 6e a5
	06 00		 movzx	 ecx, WORD PTR [eax+435566]
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapOutdoorRenderHTP.cpp

; 285  : 	m_matWorldForCommonUse._41 = -(float) (wCoordX * CTerrainImpl::TERRAIN_XSIZE);

  001fa	0f b7 80 6c a5
	06 00		 movzx	 eax, WORD PTR [eax+435564]
  00201	69 c0 00 9c ff
	ff		 imul	 eax, eax, -25600
  00207	66 0f 6e c0	 movd	 xmm0, eax

; 286  : 	m_matWorldForCommonUse._42 = (float) (wCoordY * CTerrainImpl::TERRAIN_YSIZE);

  0020b	8b c1		 mov	 eax, ecx
  0020d	69 c0 00 64 00
	00		 imul	 eax, eax, 25600
  00213	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00216	f3 0f 11 86 78
	07 00 00	 movss	 DWORD PTR [esi+1912], xmm0
  0021e	66 0f 6e c0	 movd	 xmm0, eax

; 287  : 	D3DXMatrixMultiply(&matTexTransform, &m_matViewInverse, &m_matWorldForCommonUse);

  00222	8d 86 48 07 00
	00		 lea	 eax, DWORD PTR [esi+1864]
  00228	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0022b	50		 push	 eax
  0022c	53		 push	 ebx
  0022d	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _matTexTransform$[ebp]
  00233	50		 push	 eax
  00234	f3 0f 11 86 7c
	07 00 00	 movss	 DWORD PTR [esi+1916], xmm0
  0023c	e8 00 00 00 00	 call	 _D3DXMatrixMultiply@12

; 288  : 	D3DXMatrixMultiply(&matSplatAlphaTexTransform, &matTexTransform, &m_matSplatAlpha);

  00241	8d 86 c8 07 00
	00		 lea	 eax, DWORD PTR [esi+1992]
  00247	50		 push	 eax
  00248	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _matTexTransform$[ebp]
  0024e	50		 push	 eax
  0024f	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _matSplatAlphaTexTransform$[ebp]
  00255	50		 push	 eax
  00256	e8 00 00 00 00	 call	 _D3DXMatrixMultiply@12

; 289  : 	STATEMANAGER.SetTransform(D3DTS_TEXTURE1, &matSplatAlphaTexTransform);

  0025b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00261	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _matSplatAlphaTexTransform$[ebp]
  00267	50		 push	 eax
  00268	6a 11		 push	 17			; 00000011H
  0026a	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 290  : 
; 291  : 	D3DXMATRIX matTiling;
; 292  : 	D3DXMatrixScaling(&matTiling, 1.0f/640.0f, -1.0f/640.0f, 0.0f);

  0026f	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00272	8d 45 bc	 lea	 eax, DWORD PTR _matTiling$[ebp]
  00275	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR [esp+8], 0
  0027d	c7 44 24 04 cd
	cc cc ba	 mov	 DWORD PTR [esp+4], -1160983347 ; bacccccdH
  00285	c7 04 24 cd cc
	cc 3a		 mov	 DWORD PTR [esp], 986500301 ; 3acccccdH
  0028c	50		 push	 eax
  0028d	e8 00 00 00 00	 call	 _D3DXMatrixScaling@16

; 293  : 	matTiling._41=0.0f;
; 294  : 	matTiling._42=0.0f;
; 295  : 
; 296  : 	D3DXMatrixMultiply(&matSplatColorTexTransform, &m_matViewInverse, &matTiling);

  00292	8d 45 bc	 lea	 eax, DWORD PTR _matTiling$[ebp]
  00295	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _matTiling$[ebp+48], 0
  0029c	50		 push	 eax
  0029d	53		 push	 ebx
  0029e	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _matSplatColorTexTransform$[ebp]
  002a4	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _matTiling$[ebp+52], 0
  002ab	50		 push	 eax
  002ac	e8 00 00 00 00	 call	 _D3DXMatrixMultiply@12

; 297  : 	STATEMANAGER.SetTransform(D3DTS_TEXTURE0, &matSplatColorTexTransform);

  002b1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002b7	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _matSplatColorTexTransform$[ebp]
  002bd	50		 push	 eax
  002be	6a 10		 push	 16			; 00000010H
  002c0	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 298  : 
; 299  : 	CGraphicVertexBuffer* pkVB=pTerrainPatchProxy->HardwareTransformPatch_GetVertexBufferPtr();

  002c5	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR _pTerrainPatchProxy$1$[ebp]
  002cb	e8 00 00 00 00	 call	 ?HardwareTransformPatch_GetVertexBufferPtr@CTerrainPatchProxy@@QAEPAVCGraphicVertexBuffer@@XZ ; CTerrainPatchProxy::HardwareTransformPatch_GetVertexBufferPtr

; 300  : 	if (!pkVB)

  002d0	85 c0		 test	 eax, eax
  002d2	0f 84 09 05 00
	00		 je	 $LN179@HardwareTr

; 301  : 		return;
; 302  : 
; 303  : 	STATEMANAGER.SetStreamSource(0, pkVB->GetD3DVertexBuffer(), m_iPatchTerrainVertexSize);

  002d8	ff b6 a8 09 00
	00		 push	 DWORD PTR [esi+2472]
  002de	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002e4	ff 70 04	 push	 DWORD PTR [eax+4]
  002e7	6a 00		 push	 0
  002e9	e8 00 00 00 00	 call	 ?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z ; CStateManager::SetStreamSource

; 304  : 
; 305  : 	STATEMANAGER.SetRenderState(D3DRS_LIGHTING, FALSE);

  002ee	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002f4	6a 00		 push	 0
  002f6	68 89 00 00 00	 push	 137			; 00000089H
  002fb	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 307  : 	int iPrevRenderedSplatNum=m_iRenderedSplatNum;

  00300	8b 9e 88 09 00
	00		 mov	 ebx, DWORD PTR [esi+2440]

; 556  : 	for (DWORD j = 1; j < pTerrain->GetNumTextures(); ++j)

  00306	bf 01 00 00 00	 mov	 edi, 1
; File C:\Marty 5.5\Src-Client\Client\PRTerrainLib\Terrain.h

; 87   : 		DWORD					GetNumTextures()						{ return ms_pTextureSet->GetTextureCount(); }

  0030b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_pTextureSet@CTerrainImpl@@1PAVCTextureSet@@A ; CTerrainImpl::ms_pTextureSet
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapOutdoorRenderHTP.cpp

; 307  : 	int iPrevRenderedSplatNum=m_iRenderedSplatNum;

  00311	89 9d 98 fe ff
	ff		 mov	 DWORD PTR _iPrevRenderedSplatNum$1$[ebp], ebx

; 308  : 
; 309  : #ifdef WORLD_EDITOR
; 310  : 
; 311  : 	int nRenderTextureCount = 0;
; 312  : 
; 313  : //	if (!m_bShowEntirePatchTextureCount && !(GetAsyncKeyState(VK_LCONTROL) & 0x8000) )
; 314  : 	if (1)
; 315  : 	{
; 316  : 		for (DWORD j = 1; j < pTerrain->GetNumTextures(); ++j)
; 317  : 		{
; 318  : 			TTerainSplat & rSplat = rTerrainSplatPatch.Splats[j];
; 319  : 
; 320  : 			if (!rSplat.Active)
; 321  : 				continue;
; 322  : 
; 323  : 			if (rTerrainSplatPatch.PatchTileCount[sPatchNum][j] == 0)
; 324  : 				continue;
; 325  : 
; 326  : 			++nRenderTextureCount;
; 327  : 		}
; 328  : 
; 329  : 		DWORD dwTextureFactor = STATEMANAGER.GetRenderState(D3DRS_TEXTUREFACTOR);
; 330  : 
; 331  : 		static int DefaultTCT = 8;
; 332  : 		int TextureCountThreshold = DefaultTCT;
; 333  : 		DWORD dwTFactor = 0xFFFFFFFF;
; 334  : 
; 335  : 		if (GetAsyncKeyState(VK_LSHIFT) & 0x8000)
; 336  : 		{
; 337  : 			if (GetAsyncKeyState(VK_1) & 0x8000)
; 338  : 			{
; 339  : 				TextureCountThreshold = 2;
; 340  : 				dwTFactor = 0xFF0000FF;
; 341  : 			}
; 342  : 			else if (GetAsyncKeyState(VK_2) & 0x8000)
; 343  : 			{
; 344  : 				TextureCountThreshold = 3;
; 345  : 				dwTFactor = 0xFF00FF00;
; 346  : 			}
; 347  : 			else if (GetAsyncKeyState(VK_3) & 0x8000)
; 348  : 			{
; 349  : 				TextureCountThreshold = 4;
; 350  : 				dwTFactor = 0xFF00FFFF;
; 351  : 			}
; 352  : 			else if (GetAsyncKeyState(VK_4) & 0x8000)
; 353  : 			{
; 354  : 				TextureCountThreshold = 5;
; 355  : 				dwTFactor = 0xFFFF0000;
; 356  : 			}
; 357  : 			else if (GetAsyncKeyState(VK_5) & 0x8000)
; 358  : 			{
; 359  : 				TextureCountThreshold = 6;
; 360  : 				dwTFactor = 0xFFFFFF00;
; 361  : 			}
; 362  : 			else if (GetAsyncKeyState(VK_6) & 0x8000)
; 363  : 			{
; 364  : 				TextureCountThreshold = 7;
; 365  : 				dwTFactor = 0xFFFF00ff;
; 366  : 			}
; 367  : 			// new stuff
; 368  : 			else if (GetAsyncKeyState(VK_8) & 0x8000)
; 369  : 			{
; 370  : 				TextureCountThreshold = DefaultTCT = 8;
; 371  : 				dwTFactor = 0xFFFFFFFF;
; 372  : 			}
; 373  : 			else if (GetAsyncKeyState(VK_0) & 0x8000)
; 374  : 			{
; 375  : 				TextureCountThreshold = DefaultTCT = 255;
; 376  : 				dwTFactor = 0xFFFFFFFF;
; 377  : 			}
; 378  : 
; 379  : 		}
; 380  : 
; 381  : 		if (nRenderTextureCount>=TextureCountThreshold)
; 382  : 		{
; 383  : 			STATEMANAGER.SetRenderState(D3DRS_TEXTUREFACTOR, dwTFactor);
; 384  : 			STATEMANAGER.SaveTextureStageState(0, D3DTSS_COLORARG1, D3DTA_TFACTOR);
; 385  : 			STATEMANAGER.SaveTextureStageState(0, D3DTSS_COLOROP, D3DTOP_SELECTARG1);
; 386  : 			STATEMANAGER.DrawIndexedPrimitive(ePrimitiveType, 0, m_iPatchTerrainVertexCount, 0, wPrimitiveCount);
; 387  : 			STATEMANAGER.SetRenderState(D3DRS_TEXTUREFACTOR, dwTextureFactor);
; 388  : 			STATEMANAGER.RestoreTextureStageState(0, D3DTSS_COLORARG1);
; 389  : 			STATEMANAGER.RestoreTextureStageState(0, D3DTSS_COLOROP);
; 390  : 		}
; 391  : 		else
; 392  : 		{
; 393  : 			if ( 0 < rTerrainSplatPatch.PatchTileCount[sPatchNum][0] )
; 394  : 			{
; 395  : 				DWORD dwTextureFactorFor0Texture = STATEMANAGER.GetRenderState(D3DRS_TEXTUREFACTOR);
; 396  : 				STATEMANAGER.SetRenderState(D3DRS_TEXTUREFACTOR, 0xFF88FF88);
; 397  : 				STATEMANAGER.SaveTextureStageState(0, D3DTSS_COLORARG1, D3DTA_TFACTOR);
; 398  : 				STATEMANAGER.SaveTextureStageState(0, D3DTSS_COLOROP, D3DTOP_SELECTARG1);
; 399  : 				STATEMANAGER.DrawIndexedPrimitive(ePrimitiveType, 0, m_iPatchTerrainVertexCount, 0, wPrimitiveCount);
; 400  : 				STATEMANAGER.SetRenderState(D3DRS_TEXTUREFACTOR, dwTextureFactorFor0Texture);
; 401  : 				STATEMANAGER.RestoreTextureStageState(0, D3DTSS_COLORARG1);
; 402  : 				STATEMANAGER.RestoreTextureStageState(0, D3DTSS_COLOROP);
; 403  : 			}
; 404  : 
; 405  : 			for (DWORD j = 1; j < pTerrain->GetNumTextures(); ++j)
; 406  : 			{
; 407  : 				TTerainSplat & rSplat = rTerrainSplatPatch.Splats[j];
; 408  : 
; 409  : 				if (!rSplat.Active)
; 410  : 					continue;
; 411  : 
; 412  : 				DWORD dwTextureCount = rTerrainSplatPatch.PatchTileCount[sPatchNum][j];
; 413  : 				if (dwTextureCount == 0)
; 414  : 					continue;
; 415  : 
; 416  : 				DWORD dwTextureFactorForTextureBalance = 0xFFFFFFFF;
; 417  : 
; 418  : 				if (!(GetAsyncKeyState(VK_LSHIFT) & 0x8000))
; 419  : 				{
; 420  : 					const TTerrainTexture & rTexture = m_TextureSet.GetTexture(j);
; 421  : 
; 422  : 					D3DXMatrixMultiply(&matSplatColorTexTransform, &m_matViewInverse, &rTexture.m_matTransform);
; 423  : 					STATEMANAGER.SetTransform(D3DTS_TEXTURE0, &matSplatColorTexTransform);
; 424  : 
; 425  : 					STATEMANAGER.SetTexture(0, rTexture.pd3dTexture);
; 426  : 					STATEMANAGER.SetTexture(1, rSplat.pd3dTexture);
; 427  : 					STATEMANAGER.DrawIndexedPrimitive(ePrimitiveType, 0, m_iPatchTerrainVertexCount, 0, wPrimitiveCount);
; 428  : 				}
; 429  : 				else
; 430  : 				{
; 431  : 					if (dwTextureCount < 71)
; 432  : 					{
; 433  : 						dwTextureFactorForTextureBalance = STATEMANAGER.GetRenderState(D3DRS_TEXTUREFACTOR);
; 434  : 						if (dwTextureCount < 51)
; 435  : 							STATEMANAGER.SetRenderState(D3DRS_TEXTUREFACTOR, 0xFFFF0000);
; 436  : 						else
; 437  : 							STATEMANAGER.SetRenderState(D3DRS_TEXTUREFACTOR, 0xFF0000FF);
; 438  : 						STATEMANAGER.SaveTextureStageState(0, D3DTSS_COLORARG1, D3DTA_TFACTOR);
; 439  : 						STATEMANAGER.SaveTextureStageState(0, D3DTSS_COLOROP, D3DTOP_SELECTARG1);
; 440  : 						STATEMANAGER.SetTexture(0, NULL);
; 441  : 					}
; 442  : 					else
; 443  : 					{
; 444  : 						const TTerrainTexture & rTexture = m_TextureSet.GetTexture(j);
; 445  : 
; 446  : 						D3DXMatrixMultiply(&matSplatColorTexTransform, &m_matViewInverse, &rTexture.m_matTransform);
; 447  : 						STATEMANAGER.SetTransform(D3DTS_TEXTURE0, &matSplatColorTexTransform);
; 448  : 
; 449  : 						STATEMANAGER.SetTexture(0, rTexture.pd3dTexture);
; 450  : 					}
; 451  : 					STATEMANAGER.SetTexture(1, rSplat.pd3dTexture);
; 452  : 					STATEMANAGER.DrawIndexedPrimitive(ePrimitiveType, 0, m_iPatchTerrainVertexCount, 0, wPrimitiveCount);
; 453  : 					if (dwTextureCount < 71)
; 454  : 					{
; 455  : 						STATEMANAGER.SetRenderState(D3DRS_TEXTUREFACTOR, dwTextureFactorForTextureBalance);
; 456  : 						STATEMANAGER.RestoreTextureStageState(0, D3DTSS_COLORARG1);
; 457  : 						STATEMANAGER.RestoreTextureStageState(0, D3DTSS_COLOROP);
; 458  : 					}
; 459  : 				}
; 460  : 
; 461  : 				std::vector<int>::iterator aIterator = std::find(m_RenderedTextureNumVector.begin(), m_RenderedTextureNumVector.end(), (int)j);
; 462  : 				if (aIterator == m_RenderedTextureNumVector.end())
; 463  : 					m_RenderedTextureNumVector.push_back(j);
; 464  : 				++m_iRenderedSplatNum;
; 465  : 				if (m_iRenderedSplatNum >= m_iSplatLimit)
; 466  : 					break;
; 467  : 			}
; 468  : 		}
; 469  : 	}
; 470  : 	else
; 471  : 	{
; 472  : 		int TextureCountThreshold = 6;
; 473  : 		DWORD dwTFactor = 0xFFFF00FF;
; 474  : 
; 475  : 		if (GetAsyncKeyState(VK_LSHIFT) & 0x8000)
; 476  : 		{
; 477  : 			if (GetAsyncKeyState(VK_1) & 0x8000)
; 478  : 			{
; 479  : 				TextureCountThreshold = 1;
; 480  : 				dwTFactor = 0xFF0000FF;
; 481  : 			}
; 482  : 			else if (GetAsyncKeyState(VK_2) & 0x8000)
; 483  : 			{
; 484  : 				TextureCountThreshold = 2;
; 485  : 				dwTFactor = 0xFF00FF00;
; 486  : 			}
; 487  : 			else if (GetAsyncKeyState(VK_3) & 0x8000)
; 488  : 			{
; 489  : 				TextureCountThreshold = 3;
; 490  : 				dwTFactor = 0xFF00FFFF;
; 491  : 			}
; 492  : 			else if (GetAsyncKeyState(VK_4) & 0x8000)
; 493  : 			{
; 494  : 				TextureCountThreshold = 4;
; 495  : 				dwTFactor = 0xFFFF0000;
; 496  : 			}
; 497  : 			else if (GetAsyncKeyState(VK_5) & 0x8000)
; 498  : 			{
; 499  : 				TextureCountThreshold = 5;
; 500  : 				dwTFactor = 0xFFFFFF00;
; 501  : 			}
; 502  : 		}
; 503  : 
; 504  : 		for (DWORD j = 1; j < pTerrain->GetNumTextures(); ++j)
; 505  : 		{
; 506  : 			TTerainSplat & rSplat = rTerrainSplatPatch.Splats[j];
; 507  : 
; 508  : 			if (!rSplat.Active)
; 509  : 				continue;
; 510  : 
; 511  : 			if (rTerrainSplatPatch.PatchTileCount[sPatchNum][j] == 0)
; 512  : 				continue;
; 513  : 
; 514  : 			DWORD dwTextureFactor;
; 515  : 
; 516  : 			if (nRenderTextureCount>=TextureCountThreshold)
; 517  : 			{
; 518  : 				dwTextureFactor = STATEMANAGER.GetRenderState(D3DRS_TEXTUREFACTOR);
; 519  : 				STATEMANAGER.SetRenderState(D3DRS_TEXTUREFACTOR, dwTFactor);
; 520  : 				STATEMANAGER.SaveTextureStageState(0, D3DTSS_COLORARG1, D3DTA_TFACTOR);
; 521  : 				STATEMANAGER.SaveTextureStageState(0, D3DTSS_COLOROP, D3DTOP_SELECTARG1);
; 522  : 				STATEMANAGER.SetTexture(0, NULL);
; 523  : 			}
; 524  : 			else
; 525  : 			{
; 526  : 				const TTerrainTexture & rTexture = m_TextureSet.GetTexture(j);
; 527  : 
; 528  : 				D3DXMatrixMultiply(&matSplatColorTexTransform, &m_matViewInverse, &rTexture.m_matTransform);
; 529  : 				STATEMANAGER.SetTransform(D3DTS_TEXTURE0, &matSplatColorTexTransform);
; 530  : 
; 531  : 				STATEMANAGER.SetTexture(0, rTexture.pd3dTexture);
; 532  : 			}
; 533  : 			STATEMANAGER.SetTexture(1, rSplat.pd3dTexture);
; 534  : 			STATEMANAGER.DrawIndexedPrimitive(ePrimitiveType, 0, m_iPatchTerrainVertexCount, 0, wPrimitiveCount);
; 535  : 			if (nRenderTextureCount>=TextureCountThreshold)
; 536  : 			{
; 537  : 				STATEMANAGER.SetRenderState(D3DRS_TEXTUREFACTOR, dwTextureFactor);
; 538  : 				STATEMANAGER.RestoreTextureStageState(0, D3DTSS_COLORARG1);
; 539  : 				STATEMANAGER.RestoreTextureStageState(0, D3DTSS_COLOROP);
; 540  : 			}
; 541  : 
; 542  : 			++nRenderTextureCount;
; 543  : 
; 544  : 			std::vector<int>::iterator aIterator = std::find(m_RenderedTextureNumVector.begin(), m_RenderedTextureNumVector.end(), (int)j);
; 545  : 			if (aIterator == m_RenderedTextureNumVector.end())
; 546  : 				m_RenderedTextureNumVector.push_back(j);
; 547  : 			++m_iRenderedSplatNum;
; 548  : 			if (m_iRenderedSplatNum >= m_iSplatLimit)
; 549  : 				break;
; 550  : 
; 551  : 		}
; 552  : 	}
; 553  : 
; 554  : #else
; 555  : 	bool isFirst=true;

  00317	c6 85 bb fe ff
	ff 01		 mov	 BYTE PTR _isFirst$1$[ebp], 1
; File C:\Marty 5.5\Src-Client\Client\PRTerrainLib\Terrain.h

; 87   : 		DWORD					GetNumTextures()						{ return ms_pTextureSet->GetTextureCount(); }

  0031e	e8 00 00 00 00	 call	 ?GetTextureCount@CTextureSet@@QAEKXZ ; CTextureSet::GetTextureCount
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapOutdoorRenderHTP.cpp

; 556  : 	for (DWORD j = 1; j < pTerrain->GetNumTextures(); ++j)

  00323	3b c7		 cmp	 eax, edi
  00325	0f 86 af 01 00
	00		 jbe	 $LN150@HardwareTr

; 301  : 		return;
; 302  : 
; 303  : 	STATEMANAGER.SetStreamSource(0, pkVB->GetD3DVertexBuffer(), m_iPatchTerrainVertexSize);

  0032b	8b 8d b4 fe ff
	ff		 mov	 ecx, DWORD PTR _pTerrain$1$[ebp]
  00331	8d 99 50 95 04
	00		 lea	 ebx, DWORD PTR [ecx+300368]
  00337	89 9d b0 fe ff
	ff		 mov	 DWORD PTR tv1193[ebp], ebx
  0033d	0f 1f 00	 npad	 3
$LL4@HardwareTr:

; 557  : 	{
; 558  : 		TTerainSplat & rSplat = rTerrainSplatPatch.Splats[j];
; 559  : 
; 560  : 		if (!rSplat.Active)

  00340	83 7b f8 00	 cmp	 DWORD PTR [ebx-8], 0
  00344	0f 84 67 01 00
	00		 je	 $LN2@HardwareTr

; 561  : 			continue;
; 562  : 
; 563  : 		if (rTerrainSplatPatch.PatchTileCount[sPatchNum][j] == 0)

  0034a	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _sPatchNum$1$[ebp]
  00350	40		 inc	 eax
  00351	c1 e0 08	 shl	 eax, 8
  00354	03 c7		 add	 eax, edi
  00356	83 bc 81 3c 91
	03 00 00	 cmp	 DWORD PTR [ecx+eax*4+233788], 0
  0035e	0f 84 4d 01 00
	00		 je	 $LN2@HardwareTr

; 564  : 			continue;
; 565  : 
; 566  : 		const TTerrainTexture & rTexture = m_TextureSet.GetTexture(j);

  00364	57		 push	 edi
  00365	8d 8e 7c 02 00
	00		 lea	 ecx, DWORD PTR [esi+636]
  0036b	e8 00 00 00 00	 call	 ?GetTexture@CTextureSet@@QAEAAUSTerrainTexture@@K@Z ; CTextureSet::GetTexture
  00370	89 85 ac fe ff
	ff		 mov	 DWORD PTR _rTexture$1$[ebp], eax

; 567  : 
; 568  : 		D3DXMatrixMultiply(&matSplatColorTexTransform, &m_matViewInverse, &rTexture.m_matTransform);

  00376	8d 48 54	 lea	 ecx, DWORD PTR [eax+84]
  00379	51		 push	 ecx
  0037a	8d 86 88 07 00
	00		 lea	 eax, DWORD PTR [esi+1928]
  00380	50		 push	 eax
  00381	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _matSplatColorTexTransform$[ebp]
  00387	50		 push	 eax
  00388	e8 00 00 00 00	 call	 _D3DXMatrixMultiply@12

; 569  : 		STATEMANAGER.SetTransform(D3DTS_TEXTURE0, &matSplatColorTexTransform);

  0038d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00393	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _matSplatColorTexTransform$[ebp]
  00399	50		 push	 eax
  0039a	6a 10		 push	 16			; 00000010H
  0039c	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 570  : 		if (isFirst)

  003a1	80 bd bb fe ff
	ff 00		 cmp	 BYTE PTR _isFirst$1$[ebp], 0
  003a8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  003ae	74 67		 je	 SHORT $LN14@HardwareTr

; 571  : 		{
; 572  : 			STATEMANAGER.SetTextureStageState(1, D3DTSS_ALPHAOP,   D3DTOP_DISABLE);

  003b0	6a 01		 push	 1
  003b2	6a 04		 push	 4
  003b4	6a 01		 push	 1
  003b6	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 573  : 			STATEMANAGER.SetTexture(0, rTexture.pd3dTexture);

  003bb	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR _rTexture$1$[ebp]
  003c1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  003c7	ff 70 18	 push	 DWORD PTR [eax+24]
  003ca	6a 00		 push	 0
  003cc	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 574  : 			STATEMANAGER.SetTexture(1, rSplat.pd3dTexture);

  003d1	ff 33		 push	 DWORD PTR [ebx]
  003d3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  003d9	6a 01		 push	 1
  003db	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 575  : 			STATEMANAGER.DrawIndexedPrimitive(ePrimitiveType, 0, m_iPatchTerrainVertexCount, 0, wPrimitiveCount);

  003e0	0f b7 45 0c	 movzx	 eax, WORD PTR _wPrimitiveCount$[ebp]
  003e4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  003ea	50		 push	 eax
  003eb	6a 00		 push	 0
  003ed	ff b6 a0 09 00
	00		 push	 DWORD PTR [esi+2464]
  003f3	6a 00		 push	 0
  003f5	ff 75 10	 push	 DWORD PTR _ePrimitiveType$[ebp]
  003f8	e8 00 00 00 00	 call	 ?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIII@Z ; CStateManager::DrawIndexedPrimitive

; 576  : 			STATEMANAGER.SetTextureStageState(1, D3DTSS_ALPHAOP,   D3DTOP_SELECTARG1);

  003fd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00403	6a 02		 push	 2
  00405	6a 04		 push	 4
  00407	6a 01		 push	 1
  00409	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 577  : 			isFirst=false;

  0040e	c6 85 bb fe ff
	ff 00		 mov	 BYTE PTR _isFirst$1$[ebp], 0

; 578  : 		}

  00415	eb 3c		 jmp	 SHORT $LN15@HardwareTr
$LN14@HardwareTr:

; 579  : 		else
; 580  : 		{
; 581  : 			STATEMANAGER.SetTexture(0, rTexture.pd3dTexture);

  00417	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR _rTexture$1$[ebp]
  0041d	ff 70 18	 push	 DWORD PTR [eax+24]
  00420	6a 00		 push	 0
  00422	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 582  : 			STATEMANAGER.SetTexture(1, rSplat.pd3dTexture);

  00427	ff 33		 push	 DWORD PTR [ebx]
  00429	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0042f	6a 01		 push	 1
  00431	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 583  : 			STATEMANAGER.DrawIndexedPrimitive(ePrimitiveType, 0, m_iPatchTerrainVertexCount, 0, wPrimitiveCount);

  00436	0f b7 45 0c	 movzx	 eax, WORD PTR _wPrimitiveCount$[ebp]
  0043a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00440	50		 push	 eax
  00441	6a 00		 push	 0
  00443	ff b6 a0 09 00
	00		 push	 DWORD PTR [esi+2464]
  00449	6a 00		 push	 0
  0044b	ff 75 10	 push	 DWORD PTR _ePrimitiveType$[ebp]
  0044e	e8 00 00 00 00	 call	 ?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIII@Z ; CStateManager::DrawIndexedPrimitive
$LN15@HardwareTr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 5814 :             const auto _Result    = __std_find_trivial(_First_ptr, _To_address(_Last), _Val);

  00453	57		 push	 edi
  00454	ff b6 94 09 00
	00		 push	 DWORD PTR [esi+2452]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1796 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));

  0045a	8d 9e 90 09 00
	00		 lea	 ebx, DWORD PTR [esi+2448]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 5814 :             const auto _Result    = __std_find_trivial(_First_ptr, _To_address(_Last), _Val);

  00460	ff 33		 push	 DWORD PTR [ebx]
  00462	e8 00 00 00 00	 call	 ??$__std_find_trivial@HH@@YAPAHPAH0H@Z ; __std_find_trivial<int,int>
  00467	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0046a	3b 86 94 09 00
	00		 cmp	 eax, DWORD PTR [esi+2452]
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapOutdoorRenderHTP.cpp

; 587  : 		if (aIterator == m_RenderedTextureNumVector.end())

  00470	75 25		 jne	 SHORT $LN140@HardwareTr
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  00472	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapOutdoorRenderHTP.cpp

; 588  : 			m_RenderedTextureNumVector.push_back(j);

  00475	89 bd a4 fe ff
	ff		 mov	 DWORD PTR $T1[ebp], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  0047b	3b 43 08	 cmp	 eax, DWORD PTR [ebx+8]
  0047e	74 08		 je	 SHORT $LN141@HardwareTr

; 797  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00480	89 38		 mov	 DWORD PTR [eax], edi

; 798  :         } else {
; 799  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 800  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 801  :             _ASAN_VECTOR_RELEASE_GUARD;
; 802  :         }
; 803  : 
; 804  :         _Orphan_range(_Mylast, _Mylast);
; 805  :         _Ty& _Result = *_Mylast;
; 806  :         ++_Mylast;

  00482	83 43 04 04	 add	 DWORD PTR [ebx+4], 4

; 782  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00486	eb 0f		 jmp	 SHORT $LN140@HardwareTr
$LN141@HardwareTr:

; 783  :         }
; 784  : 
; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00488	8d 8d a4 fe ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  0048e	51		 push	 ecx
  0048f	50		 push	 eax
  00490	8b cb		 mov	 ecx, ebx
  00492	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@H@?$vector@HV?$allocator@H@std@@@std@@AAEPAHQAH$$QAH@Z ; std::vector<int,std::allocator<int> >::_Emplace_reallocate<int>
$LN140@HardwareTr:
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapOutdoorRenderHTP.cpp

; 589  : 		++m_iRenderedSplatNum;

  00497	ff 86 88 09 00
	00		 inc	 DWORD PTR [esi+2440]
  0049d	8b 86 88 09 00
	00		 mov	 eax, DWORD PTR [esi+2440]

; 590  : 		if (m_iRenderedSplatNum >= m_iSplatLimit)

  004a3	3b 86 9c 09 00
	00		 cmp	 eax, DWORD PTR [esi+2460]
  004a9	7d 29		 jge	 SHORT $LN154@HardwareTr
  004ab	8b 9d b0 fe ff
	ff		 mov	 ebx, DWORD PTR tv1193[ebp]
$LN2@HardwareTr:
; File C:\Marty 5.5\Src-Client\Client\PRTerrainLib\Terrain.h

; 87   : 		DWORD					GetNumTextures()						{ return ms_pTextureSet->GetTextureCount(); }

  004b1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_pTextureSet@CTerrainImpl@@1PAVCTextureSet@@A ; CTerrainImpl::ms_pTextureSet
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapOutdoorRenderHTP.cpp

; 556  : 	for (DWORD j = 1; j < pTerrain->GetNumTextures(); ++j)

  004b7	83 c3 0c	 add	 ebx, 12			; 0000000cH
  004ba	47		 inc	 edi
  004bb	89 9d b0 fe ff
	ff		 mov	 DWORD PTR tv1193[ebp], ebx
; File C:\Marty 5.5\Src-Client\Client\PRTerrainLib\Terrain.h

; 87   : 		DWORD					GetNumTextures()						{ return ms_pTextureSet->GetTextureCount(); }

  004c1	e8 00 00 00 00	 call	 ?GetTextureCount@CTextureSet@@QAEKXZ ; CTextureSet::GetTextureCount
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapOutdoorRenderHTP.cpp

; 556  : 	for (DWORD j = 1; j < pTerrain->GetNumTextures(); ++j)

  004c6	8b 8d b4 fe ff
	ff		 mov	 ecx, DWORD PTR _pTerrain$1$[ebp]
  004cc	3b f8		 cmp	 edi, eax
  004ce	0f 82 6c fe ff
	ff		 jb	 $LL4@HardwareTr
$LN154@HardwareTr:
  004d4	8b 9d 98 fe ff
	ff		 mov	 ebx, DWORD PTR _iPrevRenderedSplatNum$1$[ebp]
$LN150@HardwareTr:

; 591  : 			break;
; 592  : 
; 593  : 	}
; 594  : 
; 595  : /*
; 596  : 	if (GetAsyncKeyState(VK_CAPITAL) & 0x8000)
; 597  : 	{
; 598  : 		TTerainSplat & rSplat = rTerrainSplatPatch.Splats[200];
; 599  : 
; 600  : 		if (rSplat.Active)
; 601  : 		{
; 602  : 			const TTerrainTexture & rTexture = m_TextureSet.GetTexture(1);
; 603  : 
; 604  : 			D3DXMatrixMultiply(&matSplatColorTexTransform, &m_matViewInverse, &rTexture.m_matTransform);
; 605  : 			STATEMANAGER.SetTransform(D3DTS_TEXTURE0, &matSplatColorTexTransform);
; 606  : 
; 607  : 			STATEMANAGER.SetTexture(0, NULL);
; 608  : 			STATEMANAGER.SetTexture(1, rSplat.pd3dTexture);
; 609  : 			STATEMANAGER.DrawIndexedPrimitive(ePrimitiveType, 0, m_iPatchTerrainVertexCount, 0, wPrimitiveCount);
; 610  : 		}
; 611  : 	}
; 612  : */
; 613  : #endif
; 614  : 
; 615  : 	if (m_bDrawShadow)

  004da	80 be 31 01 00
	00 00		 cmp	 BYTE PTR [esi+305], 0
  004e1	0f 84 e3 02 00
	00		 je	 $LN18@HardwareTr

; 616  : 	{
; 617  : 		STATEMANAGER.SetRenderState(D3DRS_LIGHTING, TRUE);

  004e7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  004ed	6a 01		 push	 1
  004ef	68 89 00 00 00	 push	 137			; 00000089H
  004f4	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 618  : 
; 619  : 		STATEMANAGER.SetRenderState(D3DRS_FOGCOLOR, 0xFFFFFFFF);

  004f9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  004ff	6a ff		 push	 -1
  00501	6a 22		 push	 34			; 00000022H
  00503	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 620  : 		STATEMANAGER.SetRenderState(D3DRS_SRCBLEND, D3DBLEND_ZERO);

  00508	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0050e	6a 01		 push	 1
  00510	6a 13		 push	 19			; 00000013H
  00512	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 621  : 		STATEMANAGER.SetRenderState(D3DRS_DESTBLEND, D3DBLEND_SRCCOLOR);

  00517	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0051d	6a 03		 push	 3
  0051f	6a 14		 push	 20			; 00000014H
  00521	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 622  : 
; 623  : 		D3DXMATRIX matShadowTexTransform;
; 624  : 		D3DXMatrixMultiply(&matShadowTexTransform, &matTexTransform, &m_matStaticShadow);

  00526	8d 86 08 08 00
	00		 lea	 eax, DWORD PTR [esi+2056]
  0052c	50		 push	 eax
  0052d	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _matTexTransform$[ebp]
  00533	50		 push	 eax
  00534	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR _matShadowTexTransform$2[ebp]
  0053a	50		 push	 eax
  0053b	e8 00 00 00 00	 call	 _D3DXMatrixMultiply@12

; 625  : 
; 626  : 		STATEMANAGER.SetTransform(D3DTS_TEXTURE0, &matShadowTexTransform);

  00540	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00546	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR _matShadowTexTransform$2[ebp]
  0054c	50		 push	 eax
  0054d	6a 10		 push	 16			; 00000010H
  0054f	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 627  :  		STATEMANAGER.SetTexture(0, pTerrain->GetShadowTexture());

  00554	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR _pTerrain$[ebp]
  0055a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00560	ff b0 44 a5 04
	00		 push	 DWORD PTR [eax+304452]
  00566	6a 00		 push	 0
  00568	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 628  : 
; 629  : 		STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  0056d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00573	6a 02		 push	 2
  00575	6a 02		 push	 2
  00577	6a 00		 push	 0
  00579	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 630  : 		STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG2, D3DTA_CURRENT);

  0057e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00584	6a 01		 push	 1
  00586	6a 03		 push	 3
  00588	6a 00		 push	 0
  0058a	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 631  : 		STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP,   D3DTOP_MODULATE);

  0058f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00595	6a 04		 push	 4
  00597	6a 01		 push	 1
  00599	6a 00		 push	 0
  0059b	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 632  : 		STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

  005a0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  005a6	6a 02		 push	 2
  005a8	6a 05		 push	 5
  005aa	6a 00		 push	 0
  005ac	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 633  : 		STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAARG2, D3DTA_CURRENT);

  005b1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  005b7	6a 01		 push	 1
  005b9	6a 06		 push	 6
  005bb	6a 00		 push	 0
  005bd	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 634  : 		STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAOP,   D3DTOP_DISABLE);

  005c2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  005c8	6a 01		 push	 1
  005ca	6a 04		 push	 4
  005cc	6a 00		 push	 0
  005ce	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 635  : 		STATEMANAGER.SetTextureStageState(0, D3DTSS_ADDRESSU,	D3DTADDRESS_CLAMP);

  005d3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  005d9	6a 03		 push	 3
  005db	6a 0d		 push	 13			; 0000000dH
  005dd	6a 00		 push	 0
  005df	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 636  : 		STATEMANAGER.SetTextureStageState(0, D3DTSS_ADDRESSV,	D3DTADDRESS_CLAMP);

  005e4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  005ea	6a 03		 push	 3
  005ec	6a 0e		 push	 14			; 0000000eH
  005ee	6a 00		 push	 0
  005f0	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 637  : 
; 638  : 		if (m_bDrawChrShadow)

  005f5	80 be 32 01 00
	00 00		 cmp	 BYTE PTR [esi+306], 0
  005fc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00602	0f 84 89 00 00
	00		 je	 $LN19@HardwareTr

; 639  : 		{
; 640  : 			STATEMANAGER.SetTransform(D3DTS_TEXTURE1, &m_matDynamicShadow);

  00608	8d 86 48 08 00
	00		 lea	 eax, DWORD PTR [esi+2120]
  0060e	50		 push	 eax
  0060f	6a 11		 push	 17			; 00000011H
  00611	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 641  : 
; 642  :  			STATEMANAGER.SetTexture(1, m_lpCharacterShadowMapTexture);

  00616	ff b6 d4 01 00
	00		 push	 DWORD PTR [esi+468]
  0061c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00622	6a 01		 push	 1
  00624	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 643  : 			STATEMANAGER.SetTextureStageState(1, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  00629	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0062f	6a 02		 push	 2
  00631	6a 02		 push	 2
  00633	6a 01		 push	 1
  00635	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 644  : 			STATEMANAGER.SetTextureStageState(1, D3DTSS_COLORARG2, D3DTA_CURRENT);

  0063a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00640	6a 01		 push	 1
  00642	6a 03		 push	 3
  00644	6a 01		 push	 1
  00646	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 645  : 			STATEMANAGER.SetTextureStageState(1, D3DTSS_COLOROP,   D3DTOP_MODULATE);

  0064b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00651	6a 04		 push	 4
  00653	6a 01		 push	 1
  00655	6a 01		 push	 1
  00657	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 646  : 			STATEMANAGER.SetTextureStageState(1, D3DTSS_ALPHAOP,   D3DTOP_DISABLE);

  0065c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00662	6a 01		 push	 1
  00664	6a 04		 push	 4
  00666	6a 01		 push	 1
  00668	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 647  : 			STATEMANAGER.SetTextureStageState(1, D3DTSS_ADDRESSU, D3DTADDRESS_CLAMP);

  0066d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00673	6a 03		 push	 3
  00675	6a 0d		 push	 13			; 0000000dH
  00677	6a 01		 push	 1
  00679	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 648  : 			STATEMANAGER.SetTextureStageState(1, D3DTSS_ADDRESSV, D3DTADDRESS_CLAMP);

  0067e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00684	6a 03		 push	 3
  00686	6a 0e		 push	 14			; 0000000eH
  00688	6a 01		 push	 1
  0068a	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 649  : 		}

  0068f	eb 09		 jmp	 SHORT $LN20@HardwareTr
$LN19@HardwareTr:

; 650  : 		else
; 651  : 		{
; 652  : 			STATEMANAGER.SetTexture(1, NULL);

  00691	6a 00		 push	 0
  00693	6a 01		 push	 1
  00695	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture
$LN20@HardwareTr:

; 653  : 		}
; 654  : 
; 655  : 		ms_faceCount += wPrimitiveCount;

  0069a	0f b7 45 0c	 movzx	 eax, WORD PTR _wPrimitiveCount$[ebp]
  0069e	01 05 00 00 00
	00		 add	 DWORD PTR ?ms_faceCount@CGraphicBase@@1KA, eax ; CGraphicBase::ms_faceCount

; 656  : 		STATEMANAGER.DrawIndexedPrimitive(ePrimitiveType, 0, m_iPatchTerrainVertexCount, 0, wPrimitiveCount);

  006a4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  006aa	50		 push	 eax
  006ab	6a 00		 push	 0
  006ad	ff b6 a0 09 00
	00		 push	 DWORD PTR [esi+2464]
  006b3	6a 00		 push	 0
  006b5	ff 75 10	 push	 DWORD PTR _ePrimitiveType$[ebp]
  006b8	e8 00 00 00 00	 call	 ?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIII@Z ; CStateManager::DrawIndexedPrimitive

; 657  :   		++m_iRenderedSplatNum;

  006bd	ff 86 88 09 00
	00		 inc	 DWORD PTR [esi+2440]

; 658  : 
; 659  : 		if (m_bDrawChrShadow)

  006c3	80 be 32 01 00
	00 00		 cmp	 BYTE PTR [esi+306], 0
  006ca	74 44		 je	 SHORT $LN21@HardwareTr

; 660  : 		{
; 661  : 			STATEMANAGER.SetTextureStageState(1, D3DTSS_COLORARG1, D3DTA_CURRENT);

  006cc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  006d2	6a 01		 push	 1
  006d4	6a 02		 push	 2
  006d6	6a 01		 push	 1
  006d8	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 662  : 			STATEMANAGER.SetTextureStageState(1, D3DTSS_COLOROP,   D3DTOP_SELECTARG1);

  006dd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  006e3	6a 02		 push	 2
  006e5	6a 01		 push	 1
  006e7	6a 01		 push	 1
  006e9	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 663  : 			STATEMANAGER.SetTextureStageState(1, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

  006ee	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  006f4	6a 02		 push	 2
  006f6	6a 05		 push	 5
  006f8	6a 01		 push	 1
  006fa	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 664  : 			STATEMANAGER.SetTextureStageState(1, D3DTSS_ALPHAOP,   D3DTOP_SELECTARG1);

  006ff	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00705	6a 02		 push	 2
  00707	6a 04		 push	 4
  00709	6a 01		 push	 1
  0070b	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState
$LN21@HardwareTr:

; 665  : 		}
; 666  : 
; 667  :  		STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  00710	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00716	6a 02		 push	 2
  00718	6a 02		 push	 2
  0071a	6a 00		 push	 0
  0071c	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 668  : 		STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG2, D3DTA_CURRENT);

  00721	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00727	6a 01		 push	 1
  00729	6a 03		 push	 3
  0072b	6a 00		 push	 0
  0072d	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 669  : 		STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP,   D3DTOP_MODULATE);

  00732	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00738	6a 04		 push	 4
  0073a	6a 01		 push	 1
  0073c	6a 00		 push	 0
  0073e	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 670  : 		STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

  00743	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00749	6a 02		 push	 2
  0074b	6a 05		 push	 5
  0074d	6a 00		 push	 0
  0074f	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 671  : 		STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAOP,   D3DTOP_SELECTARG1);

  00754	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0075a	6a 02		 push	 2
  0075c	6a 04		 push	 4
  0075e	6a 00		 push	 0
  00760	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 672  : 		STATEMANAGER.SetTextureStageState(0, D3DTSS_ADDRESSU,  D3DTADDRESS_WRAP);

  00765	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0076b	6a 01		 push	 1
  0076d	6a 0d		 push	 13			; 0000000dH
  0076f	6a 00		 push	 0
  00771	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 673  : 		STATEMANAGER.SetTextureStageState(0, D3DTSS_ADDRESSV,  D3DTADDRESS_WRAP);

  00776	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0077c	6a 01		 push	 1
  0077e	6a 0e		 push	 14			; 0000000eH
  00780	6a 00		 push	 0
  00782	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 674  : 
; 675  : 
; 676  : 		STATEMANAGER.SetRenderState(D3DRS_SRCBLEND, D3DBLEND_SRCALPHA);

  00787	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0078d	6a 05		 push	 5
  0078f	6a 13		 push	 19			; 00000013H
  00791	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 677  : 		STATEMANAGER.SetRenderState(D3DRS_DESTBLEND, D3DBLEND_INVSRCALPHA);

  00796	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0079c	6a 06		 push	 6
  0079e	6a 14		 push	 20			; 00000014H
  007a0	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 678  : 		STATEMANAGER.SetRenderState(D3DRS_FOGCOLOR, dwFogColor);

  007a5	ff b5 a8 fe ff
	ff		 push	 DWORD PTR _dwFogColor$1$[ebp]
  007ab	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  007b1	6a 22		 push	 34			; 00000022H
  007b3	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 679  : 
; 680  : 		STATEMANAGER.SetRenderState(D3DRS_LIGHTING, FALSE);

  007b8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  007be	6a 00		 push	 0
  007c0	68 89 00 00 00	 push	 137			; 00000089H
  007c5	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState
$LN18@HardwareTr:

; 681  : 	}
; 682  : 	++m_iRenderedPatchNum;
; 683  : 
; 684  : 	int iCurRenderedSplatNum=m_iRenderedSplatNum-iPrevRenderedSplatNum;

  007ca	8b 86 88 09 00
	00		 mov	 eax, DWORD PTR [esi+2440]
  007d0	ff 86 8c 09 00
	00		 inc	 DWORD PTR [esi+2444]
  007d6	2b c3		 sub	 eax, ebx

; 685  : 
; 686  : 	m_iRenderedSplatNumSqSum+=iCurRenderedSplatNum*iCurRenderedSplatNum;

  007d8	0f af c0	 imul	 eax, eax
  007db	01 86 84 09 00
	00		 add	 DWORD PTR [esi+2436], eax
$LN179@HardwareTr:
  007e1	5f		 pop	 edi
  007e2	5b		 pop	 ebx
$LN1@HardwareTr:

; 687  : 
; 688  : }

  007e3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  007e6	33 cd		 xor	 ecx, ebp
  007e8	5e		 pop	 esi
  007e9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  007ee	8b e5		 mov	 esp, ebp
  007f0	5d		 pop	 ebp
  007f1	c2 0c 00	 ret	 12			; 0000000cH
?__HardwareTransformPatch_RenderPatchSplat@CMapOutdoor@@IAEXJGW4_D3DPRIMITIVETYPE@@@Z ENDP ; CMapOutdoor::__HardwareTransformPatch_RenderPatchSplat
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapOutdoorRenderHTP.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapOutdoorRenderHTP.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapOutdoorRenderHTP.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapOutdoorRenderHTP.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapOutdoorRenderHTP.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapOutdoorRenderHTP.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapOutdoorRenderHTP.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapOutdoorRenderHTP.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapOutdoorRenderHTP.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapOutdoorRenderHTP.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapOutdoorRenderHTP.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapOutdoorRenderHTP.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapOutdoorRenderHTP.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapOutdoorRenderHTP.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapOutdoorRenderHTP.cpp
;	COMDAT ?__RenderTerrain_RenderHardwareTransformPatch@CMapOutdoor@@IAEXXZ
_TEXT	SEGMENT
$T1 = -40						; size = 1
_far_it$ = -40						; size = 4
_fog_far$ = -36						; size = 8
_near_it$ = -32						; size = 4
_fog_near$ = -28					; size = 8
_dwFogEnable$1$ = -24					; size = 4
_fFogNearDistance$ = -24				; size = 4
_fFogFarDistance$1$ = -20				; size = 4
_fLODLevel2Distance$ = -20				; size = 4
_fFogFarDistance$ = -20					; size = 4
_fFogNearDistance$1$ = -16				; size = 4
_dwB$1$ = -16						; size = 4
_fLODLevel1Distance$ = -16				; size = 4
_dwR$1$ = -12						; size = 4
_wPrimitiveCount$ = -12					; size = 2
_dwG$1$ = -8						; size = 4
_ePrimitiveType$ = -8					; size = 4
_byCUrrentLODLevel$1$ = -1				; size = 1
?__RenderTerrain_RenderHardwareTransformPatch@CMapOutdoor@@IAEXXZ PROC ; CMapOutdoor::__RenderTerrain_RenderHardwareTransformPatch, COMDAT
; _this$ = ecx

; 7    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
  00009	56		 push	 esi
  0000a	57		 push	 edi

; 8    : 	DWORD dwFogColor;
; 9    : 	float fFogFarDistance;
; 10   : 	float fFogNearDistance;
; 11   : 	if (mc_pEnvironmentData)

  0000b	8b 7b 3c	 mov	 edi, DWORD PTR [ebx+60]
  0000e	85 ff		 test	 edi, edi
  00010	0f 84 4c 01 00
	00		 je	 $LN11@RenderTerr
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00016	f3 0f 10 87 2c
	01 00 00	 movss	 xmm0, DWORD PTR [edi+300]
  0001e	0f 57 c9	 xorps	 xmm1, xmm1
  00021	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00028	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@437f0000
  00030	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR __real@3f000000
  00038	72 09		 jb	 SHORT $LN220@RenderTerr
  0003a	c7 45 f4 ff 00
	00 00		 mov	 DWORD PTR _dwR$1$[ebp], 255 ; 000000ffH
  00041	eb 31		 jmp	 SHORT $LN219@RenderTerr
$LN220@RenderTerr:
  00043	0f 2f c8	 comiss	 xmm1, xmm0
  00046	72 09		 jb	 SHORT $LN218@RenderTerr
  00048	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _dwR$1$[ebp], 0
  0004f	eb 23		 jmp	 SHORT $LN219@RenderTerr
$LN218@RenderTerr:
  00051	f3 0f 59 c3	 mulss	 xmm0, xmm3
  00055	f3 0f 58 c4	 addss	 xmm0, xmm4
  00059	e8 00 00 00 00	 call	 __ftol3
  0005e	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@437f0000
  00066	0f 57 c9	 xorps	 xmm1, xmm1
  00069	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR __real@3f000000
  00071	89 45 f4	 mov	 DWORD PTR _dwR$1$[ebp], eax
$LN219@RenderTerr:

; 932  :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  00074	f3 0f 10 87 30
	01 00 00	 movss	 xmm0, DWORD PTR [edi+304]
  0007c	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00083	72 09		 jb	 SHORT $LN224@RenderTerr
  00085	c7 45 f8 ff 00
	00 00		 mov	 DWORD PTR _dwG$1$[ebp], 255 ; 000000ffH
  0008c	eb 1e		 jmp	 SHORT $LN223@RenderTerr
$LN224@RenderTerr:
  0008e	0f 2f c8	 comiss	 xmm1, xmm0
  00091	72 09		 jb	 SHORT $LN222@RenderTerr
  00093	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _dwG$1$[ebp], 0
  0009a	eb 10		 jmp	 SHORT $LN223@RenderTerr
$LN222@RenderTerr:
  0009c	f3 0f 59 c3	 mulss	 xmm0, xmm3
  000a0	f3 0f 58 c4	 addss	 xmm0, xmm4
  000a4	e8 00 00 00 00	 call	 __ftol3
  000a9	89 45 f8	 mov	 DWORD PTR _dwG$1$[ebp], eax
$LN223@RenderTerr:

; 933  :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  000ac	f3 0f 10 87 34
	01 00 00	 movss	 xmm0, DWORD PTR [edi+308]
  000b4	0f 57 c9	 xorps	 xmm1, xmm1
  000b7	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  000be	72 09		 jb	 SHORT $LN228@RenderTerr
  000c0	c7 45 f0 ff 00
	00 00		 mov	 DWORD PTR _dwB$1$[ebp], 255 ; 000000ffH
  000c7	eb 29		 jmp	 SHORT $LN227@RenderTerr
$LN228@RenderTerr:
  000c9	0f 2f c8	 comiss	 xmm1, xmm0
  000cc	72 09		 jb	 SHORT $LN226@RenderTerr
  000ce	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _dwB$1$[ebp], 0
  000d5	eb 1b		 jmp	 SHORT $LN227@RenderTerr
$LN226@RenderTerr:
  000d7	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  000df	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  000e7	e8 00 00 00 00	 call	 __ftol3
  000ec	89 45 f0	 mov	 DWORD PTR _dwB$1$[ebp], eax
  000ef	0f 57 c9	 xorps	 xmm1, xmm1
$LN227@RenderTerr:

; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  000f2	f3 0f 10 87 38
	01 00 00	 movss	 xmm0, DWORD PTR [edi+312]
  000fa	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00101	72 07		 jb	 SHORT $LN232@RenderTerr
  00103	be ff 00 00 00	 mov	 esi, 255		; 000000ffH
  00108	eb 20		 jmp	 SHORT $LN231@RenderTerr
$LN232@RenderTerr:
  0010a	0f 2f c8	 comiss	 xmm1, xmm0
  0010d	72 04		 jb	 SHORT $LN230@RenderTerr
  0010f	33 f6		 xor	 esi, esi
  00111	eb 17		 jmp	 SHORT $LN231@RenderTerr
$LN230@RenderTerr:
  00113	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  0011b	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00123	e8 00 00 00 00	 call	 __ftol3
  00128	8b f0		 mov	 esi, eax
$LN231@RenderTerr:

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  0012a	c1 e6 08	 shl	 esi, 8
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapOutdoorRenderHTP.cpp

; 14   : 		fFogNearDistance=mc_pEnvironmentData->GetFogNearDistance();

  0012d	8b cf		 mov	 ecx, edi
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  0012f	0b 75 f4	 or	 esi, DWORD PTR _dwR$1$[ebp]
  00132	c1 e6 08	 shl	 esi, 8
  00135	0b 75 f8	 or	 esi, DWORD PTR _dwG$1$[ebp]
  00138	c1 e6 08	 shl	 esi, 8
  0013b	0b 75 f0	 or	 esi, DWORD PTR _dwB$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapOutdoorRenderHTP.cpp

; 14   : 		fFogNearDistance=mc_pEnvironmentData->GetFogNearDistance();

  0013e	e8 00 00 00 00	 call	 ?GetFogNearDistance@SEnvironmentData@@QBEMXZ ; SEnvironmentData::GetFogNearDistance

; 15   : 		fFogFarDistance=mc_pEnvironmentData->GetFogFarDistance();

  00143	8b 4b 3c	 mov	 ecx, DWORD PTR [ebx+60]
  00146	d9 5d e8	 fstp	 DWORD PTR _fFogNearDistance$[ebp]
  00149	e8 00 00 00 00	 call	 ?GetFogFarDistance@SEnvironmentData@@QBEMXZ ; SEnvironmentData::GetFogFarDistance

; 16   : 	}

  0014e	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _fFogNearDistance$[ebp]
  00153	d9 5d ec	 fstp	 DWORD PTR _fFogFarDistance$[ebp]
  00156	f3 0f 11 45 f0	 movss	 DWORD PTR _fFogNearDistance$1$[ebp], xmm0
  0015b	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _fFogFarDistance$[ebp]
  00160	eb 18		 jmp	 SHORT $LN288@RenderTerr
$LN11@RenderTerr:

; 17   : 	else
; 18   : 	{
; 19   : 		dwFogColor=0xffffffff;
; 20   : 		fFogNearDistance=5000.0f;

  00162	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@459c4000
  0016a	83 ce ff	 or	 esi, -1
  0016d	f3 0f 11 45 f0	 movss	 DWORD PTR _fFogNearDistance$1$[ebp], xmm0

; 21   : 		fFogFarDistance=10000.0f;

  00172	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@461c4000
$LN288@RenderTerr:

; 22   : 	}
; 23   : 
; 24   : 	//////////////////////////////////////////////////////////////////////////
; 25   : 	// Render State & TextureStageState
; 26   : 
; 27   : 	STATEMANAGER.SaveTextureStageState(0, D3DTSS_TEXCOORDINDEX, D3DTSS_TCI_CAMERASPACEPOSITION);

  0017a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00180	68 00 00 02 00	 push	 131072			; 00020000H
  00185	6a 0b		 push	 11			; 0000000bH
  00187	6a 00		 push	 0
  00189	f3 0f 11 45 ec	 movss	 DWORD PTR _fFogFarDistance$1$[ebp], xmm0
  0018e	e8 00 00 00 00	 call	 ?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SaveTextureStageState

; 28   : 	STATEMANAGER.SaveTextureStageState(0, D3DTSS_TEXTURETRANSFORMFLAGS, D3DTTFF_COUNT2);

  00193	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00199	6a 02		 push	 2
  0019b	6a 18		 push	 24			; 00000018H
  0019d	6a 00		 push	 0
  0019f	e8 00 00 00 00	 call	 ?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SaveTextureStageState

; 29   : 	STATEMANAGER.SaveTextureStageState(1, D3DTSS_TEXCOORDINDEX, D3DTSS_TCI_CAMERASPACEPOSITION);

  001a4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001aa	68 00 00 02 00	 push	 131072			; 00020000H
  001af	6a 0b		 push	 11			; 0000000bH
  001b1	6a 01		 push	 1
  001b3	e8 00 00 00 00	 call	 ?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SaveTextureStageState

; 30   : 	STATEMANAGER.SaveTextureStageState(1, D3DTSS_TEXTURETRANSFORMFLAGS, D3DTTFF_COUNT2);

  001b8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001be	6a 02		 push	 2
  001c0	6a 18		 push	 24			; 00000018H
  001c2	6a 01		 push	 1
  001c4	e8 00 00 00 00	 call	 ?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SaveTextureStageState

; 31   : 
; 32   : 	STATEMANAGER.SaveRenderState(D3DRS_ALPHABLENDENABLE, TRUE);

  001c9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001cf	6a 01		 push	 1
  001d1	6a 1b		 push	 27			; 0000001bH
  001d3	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 33   : 	STATEMANAGER.SaveRenderState(D3DRS_ALPHATESTENABLE, TRUE);

  001d8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001de	6a 01		 push	 1
  001e0	6a 0f		 push	 15			; 0000000fH
  001e2	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 34   : 	STATEMANAGER.SaveRenderState(D3DRS_ALPHAREF, 0x00000000);

  001e7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001ed	6a 00		 push	 0
  001ef	6a 18		 push	 24			; 00000018H
  001f1	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 35   : 	STATEMANAGER.SaveRenderState(D3DRS_ALPHAFUNC, D3DCMP_GREATER);

  001f6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001fc	6a 05		 push	 5
  001fe	6a 19		 push	 25			; 00000019H
  00200	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 36   : 
; 37   : 	STATEMANAGER.SaveRenderState(D3DRS_TEXTUREFACTOR, dwFogColor);

  00205	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0020b	56		 push	 esi
  0020c	6a 3c		 push	 60			; 0000003cH
  0020e	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 38   : 
; 39   : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  00213	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00219	6a 02		 push	 2
  0021b	6a 02		 push	 2
  0021d	6a 00		 push	 0
  0021f	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 40   : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG2, D3DTA_CURRENT);

  00224	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0022a	6a 01		 push	 1
  0022c	6a 03		 push	 3
  0022e	6a 00		 push	 0
  00230	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 41   : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP,   D3DTOP_MODULATE);

  00235	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0023b	6a 04		 push	 4
  0023d	6a 01		 push	 1
  0023f	6a 00		 push	 0
  00241	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 42   : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

  00246	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0024c	6a 02		 push	 2
  0024e	6a 05		 push	 5
  00250	6a 00		 push	 0
  00252	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 43   : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAOP,   D3DTOP_SELECTARG1);

  00257	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0025d	6a 02		 push	 2
  0025f	6a 04		 push	 4
  00261	6a 00		 push	 0
  00263	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 44   : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ADDRESSU,  D3DTADDRESS_WRAP);

  00268	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0026e	6a 01		 push	 1
  00270	6a 0d		 push	 13			; 0000000dH
  00272	6a 00		 push	 0
  00274	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 45   : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ADDRESSV,  D3DTADDRESS_WRAP);

  00279	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0027f	6a 01		 push	 1
  00281	6a 0e		 push	 14			; 0000000eH
  00283	6a 00		 push	 0
  00285	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 46   : 
; 47   : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_COLORARG1, D3DTA_CURRENT);

  0028a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00290	6a 01		 push	 1
  00292	6a 02		 push	 2
  00294	6a 01		 push	 1
  00296	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 48   : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_COLOROP,   D3DTOP_SELECTARG1);

  0029b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002a1	6a 02		 push	 2
  002a3	6a 01		 push	 1
  002a5	6a 01		 push	 1
  002a7	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 49   : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

  002ac	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002b2	6a 02		 push	 2
  002b4	6a 05		 push	 5
  002b6	6a 01		 push	 1
  002b8	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 50   : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_ALPHAOP,   D3DTOP_SELECTARG1);

  002bd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002c3	6a 02		 push	 2
  002c5	6a 04		 push	 4
  002c7	6a 01		 push	 1
  002c9	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 51   : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_ADDRESSU,  D3DTADDRESS_CLAMP);

  002ce	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002d4	6a 03		 push	 3
  002d6	6a 0d		 push	 13			; 0000000dH
  002d8	6a 01		 push	 1
  002da	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 52   : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_ADDRESSV,  D3DTADDRESS_CLAMP);

  002df	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002e5	6a 03		 push	 3
  002e7	6a 0e		 push	 14			; 0000000eH
  002e9	6a 01		 push	 1
  002eb	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 53   : 
; 54   : #ifdef WORLD_EDITOR
; 55   : 	if (GetAsyncKeyState(VK_CAPITAL))
; 56   : 	{
; 57   : 		CSpeedTreeWrapper::ms_bSelfShadowOn = false;
; 58   : 		STATEMANAGER.SetTextureStageState(0, D3DTSS_MINFILTER,	D3DTEXF_GAUSSIANCUBIC);
; 59   : 		STATEMANAGER.SetTextureStageState(0, D3DTSS_MAGFILTER,	D3DTEXF_GAUSSIANCUBIC);
; 60   : 		STATEMANAGER.SetTextureStageState(0, D3DTSS_MIPFILTER,	D3DTEXF_GAUSSIANCUBIC);
; 61   : 		STATEMANAGER.SetTextureStageState(1, D3DTSS_MINFILTER,	D3DTEXF_GAUSSIANCUBIC);
; 62   : 		STATEMANAGER.SetTextureStageState(1, D3DTSS_MAGFILTER,	D3DTEXF_GAUSSIANCUBIC);
; 63   : 		STATEMANAGER.SetTextureStageState(1, D3DTSS_MIPFILTER,	D3DTEXF_GAUSSIANCUBIC);
; 64   : 	}
; 65   : 	else
; 66   : 	{
; 67   : 		CSpeedTreeWrapper::ms_bSelfShadowOn = true;
; 68   : 		STATEMANAGER.SetTextureStageState(0, D3DTSS_MINFILTER,	D3DTEXF_LINEAR);
; 69   : 		STATEMANAGER.SetTextureStageState(0, D3DTSS_MAGFILTER,	D3DTEXF_LINEAR);
; 70   : 		STATEMANAGER.SetTextureStageState(0, D3DTSS_MIPFILTER,	D3DTEXF_LINEAR);
; 71   : 		STATEMANAGER.SetTextureStageState(1, D3DTSS_MINFILTER,	D3DTEXF_LINEAR);
; 72   : 		STATEMANAGER.SetTextureStageState(1, D3DTSS_MAGFILTER,	D3DTEXF_LINEAR);
; 73   : 		STATEMANAGER.SetTextureStageState(1, D3DTSS_MIPFILTER,	D3DTEXF_LINEAR);
; 74   : 	}
; 75   : #else
; 76   : 	CSpeedTreeWrapper::ms_bSelfShadowOn = true;
; 77   : 	STATEMANAGER.SetBestFiltering(0);

  002f0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002f6	6a 00		 push	 0
  002f8	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?ms_bSelfShadowOn@CSpeedTreeWrapper@@2_NA, 1 ; CSpeedTreeWrapper::ms_bSelfShadowOn
  002ff	e8 00 00 00 00	 call	 ?SetBestFiltering@CStateManager@@QAEXK@Z ; CStateManager::SetBestFiltering

; 78   : 	STATEMANAGER.SetBestFiltering(1);

  00304	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0030a	6a 01		 push	 1
  0030c	e8 00 00 00 00	 call	 ?SetBestFiltering@CStateManager@@QAEXK@Z ; CStateManager::SetBestFiltering

; 79   : #endif
; 80   : 
; 81   : 	m_matWorldForCommonUse._41 = 0.0f;
; 82   : 	m_matWorldForCommonUse._42 = 0.0f;
; 83   : 	STATEMANAGER.SetTransform(D3DTS_WORLD, &m_matWorldForCommonUse);

  00311	8d b3 48 07 00
	00		 lea	 esi, DWORD PTR [ebx+1864]
  00317	c7 83 78 07 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+1912], 0
  00321	56		 push	 esi
  00322	c7 83 7c 07 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+1916], 0
  0032c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00332	68 00 01 00 00	 push	 256			; 00000100H
  00337	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 84   : 
; 85   : 	STATEMANAGER.SaveTransform(D3DTS_TEXTURE0, &m_matWorldForCommonUse);

  0033c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00342	56		 push	 esi
  00343	6a 10		 push	 16			; 00000010H
  00345	e8 00 00 00 00	 call	 ?SaveTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SaveTransform

; 86   : 	STATEMANAGER.SaveTransform(D3DTS_TEXTURE1, &m_matWorldForCommonUse);

  0034a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00350	56		 push	 esi
  00351	6a 11		 push	 17			; 00000011H
  00353	e8 00 00 00 00	 call	 ?SaveTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SaveTransform

; 87   : 
; 88   : 	// Render State & TextureStageState
; 89   : 	//////////////////////////////////////////////////////////////////////////
; 90   : 
; 91   : 	STATEMANAGER.SetVertexShader(D3DFVF_XYZ | D3DFVF_NORMAL);

  00358	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0035e	6a 12		 push	 18			; 00000012H
  00360	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader

; 92   : 
; 93   : 	m_iRenderedSplatNumSqSum = 0;

  00365	c7 83 84 09 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+2436], 0

; 94   : 	m_iRenderedPatchNum = 0;

  0036f	c7 83 8c 09 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+2444], 0

; 95   : 	m_iRenderedSplatNum = 0;

  00379	c7 83 88 09 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+2440], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00383	8b 83 90 09 00
	00		 mov	 eax, DWORD PTR [ebx+2448]
  00389	3b 83 94 09 00
	00		 cmp	 eax, DWORD PTR [ebx+2452]
  0038f	74 06		 je	 SHORT $LN171@RenderTerr

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00391	89 83 94 09 00
	00		 mov	 DWORD PTR [ebx+2452], eax
$LN171@RenderTerr:
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapOutdoorRenderHTP.cpp

; 98   : 	std::pair<float, long> fog_far(fFogFarDistance+1600.0f, 0);

  00397	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _fFogFarDistance$1$[ebp]

; 101  : 	std::vector<std::pair<float ,long> >::iterator far_it = std::upper_bound(m_PatchVector.begin(),m_PatchVector.end(),fog_far);

  0039c	8d 45 dc	 lea	 eax, DWORD PTR _fog_far$[ebp]
  0039f	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@44c80000
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  003a7	8b b3 1c 01 00
	00		 mov	 esi, DWORD PTR [ebx+284]
  003ad	8b bb 18 01 00
	00		 mov	 edi, DWORD PTR [ebx+280]
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapOutdoorRenderHTP.cpp

; 101  : 	std::vector<std::pair<float ,long> >::iterator far_it = std::upper_bound(m_PatchVector.begin(),m_PatchVector.end(),fog_far);

  003b3	50		 push	 eax
  003b4	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  003b5	f3 0f 11 45 dc	 movss	 DWORD PTR _fog_far$[ebp], xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapOutdoorRenderHTP.cpp

; 101  : 	std::vector<std::pair<float ,long> >::iterator far_it = std::upper_bound(m_PatchVector.begin(),m_PatchVector.end(),fog_far);

  003ba	8d 45 d8	 lea	 eax, DWORD PTR _far_it$[ebp]
  003bd	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _fFogNearDistance$1$[ebp]
  003c2	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@45480000
  003ca	57		 push	 edi
  003cb	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  003cc	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _fog_far$[ebp+4], 0
  003d3	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _fog_near$[ebp+4], 0
  003da	f3 0f 11 45 e4	 movss	 DWORD PTR _fog_near$[ebp], xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapOutdoorRenderHTP.cpp

; 101  : 	std::vector<std::pair<float ,long> >::iterator far_it = std::upper_bound(m_PatchVector.begin(),m_PatchVector.end(),fog_far);

  003df	e8 00 00 00 00	 call	 ??$upper_bound@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MJ@std@@@std@@@std@@@std@@U?$pair@MJ@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MJ@std@@@std@@@std@@@0@V10@0ABU?$pair@MJ@0@@Z ; std::upper_bound<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,long> > > >,std::pair<float,long> >

; 102  : 	std::vector<std::pair<float ,long> >::iterator near_it = std::upper_bound(m_PatchVector.begin(),m_PatchVector.end(),fog_near);

  003e4	8d 45 e4	 lea	 eax, DWORD PTR _fog_near$[ebp]
  003e7	50		 push	 eax
  003e8	56		 push	 esi
  003e9	8d 45 e0	 lea	 eax, DWORD PTR _near_it$[ebp]
  003ec	57		 push	 edi
  003ed	50		 push	 eax
  003ee	e8 00 00 00 00	 call	 ??$upper_bound@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MJ@std@@@std@@@std@@@std@@U?$pair@MJ@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MJ@std@@@std@@@std@@@0@V10@0ABU?$pair@MJ@0@@Z ; std::upper_bound<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,long> > > >,std::pair<float,long> >
  003f3	83 c4 20	 add	 esp, 32			; 00000020H

; 103  : 
; 104  : #ifdef WORLD_EDITOR
; 105  : 	near_it = m_PatchVector.begin();
; 106  : 	far_it = m_PatchVector.end();
; 107  : #endif
; 108  : 
; 109  : 	WORD wPrimitiveCount;
; 110  : 	D3DPRIMITIVETYPE ePrimitiveType;
; 111  : 
; 112  : 	BYTE byCUrrentLODLevel = 0;

  003f6	c6 45 ff 00	 mov	 BYTE PTR _byCUrrentLODLevel$1$[ebp], 0

; 113  : 
; 114  : 	float fLODLevel1Distance = __GetNoFogDistance();

  003fa	8b cb		 mov	 ecx, ebx
  003fc	e8 00 00 00 00	 call	 ?__GetNoFogDistance@CMapOutdoor@@IAEMXZ ; CMapOutdoor::__GetNoFogDistance
  00401	d9 5d f0	 fstp	 DWORD PTR _fLODLevel1Distance$[ebp]

; 115  : 	float fLODLevel2Distance = __GetFogDistance();

  00404	8b cb		 mov	 ecx, ebx
  00406	e8 00 00 00 00	 call	 ?__GetFogDistance@CMapOutdoor@@IAEMXZ ; CMapOutdoor::__GetFogDistance

; 116  : 
; 117  : 	SelectIndexBuffer(0, &wPrimitiveCount, &ePrimitiveType);

  0040b	8d 45 f8	 lea	 eax, DWORD PTR _ePrimitiveType$[ebp]
  0040e	8b cb		 mov	 ecx, ebx
  00410	50		 push	 eax
  00411	8d 45 f4	 lea	 eax, DWORD PTR _wPrimitiveCount$[ebp]
  00414	50		 push	 eax
  00415	6a 00		 push	 0
  00417	d9 5d ec	 fstp	 DWORD PTR _fLODLevel2Distance$[ebp]
  0041a	e8 00 00 00 00	 call	 ?SelectIndexBuffer@CMapOutdoor@@IAEXEPAGPAW4_D3DPRIMITIVETYPE@@@Z ; CMapOutdoor::SelectIndexBuffer

; 118  : 
; 119  : 	DWORD dwFogEnable = STATEMANAGER.GetRenderState(D3DRS_FOGENABLE);

  0041f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00425	6a 1c		 push	 28			; 0000001cH
  00427	e8 00 00 00 00	 call	 ?GetRenderState@CStateManager@@QAEKW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::GetRenderState

; 123  : 	STATEMANAGER.SetRenderState(D3DRS_FOGENABLE, FALSE);

  0042c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00432	8b b3 18 01 00
	00		 mov	 esi, DWORD PTR [ebx+280]
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapOutdoorRenderHTP.cpp

; 123  : 	STATEMANAGER.SetRenderState(D3DRS_FOGENABLE, FALSE);

  00438	6a 00		 push	 0
  0043a	6a 1c		 push	 28			; 0000001cH
  0043c	89 45 e8	 mov	 DWORD PTR _dwFogEnable$1$[ebp], eax
  0043f	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 163  :         return _Ptr == _Right._Ptr;

  00444	8b 7d e0	 mov	 edi, DWORD PTR _near_it$[ebp]
  00447	3b f7		 cmp	 esi, edi
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapOutdoorRenderHTP.cpp

; 125  : 	for( ; it != near_it; ++it)

  00449	0f 84 87 00 00
	00		 je	 $LN252@RenderTerr
  0044f	90		 npad	 1
$LL285@RenderTerr:

; 126  : 	{
; 127  : 		if (byCUrrentLODLevel == 0 && fLODLevel1Distance <= it->first)

  00450	8a 45 ff	 mov	 al, BYTE PTR _byCUrrentLODLevel$1$[ebp]
  00453	84 c0		 test	 al, al
  00455	75 1a		 jne	 SHORT $LN246@RenderTerr
  00457	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  0045b	0f 2f 45 f0	 comiss	 xmm0, DWORD PTR _fLODLevel1Distance$[ebp]
  0045f	72 33		 jb	 SHORT $LN15@RenderTerr

; 128  : 		{
; 129  : 			byCUrrentLODLevel = 1;
; 130  : 			SelectIndexBuffer(1, &wPrimitiveCount, &ePrimitiveType);

  00461	8d 45 f8	 lea	 eax, DWORD PTR _ePrimitiveType$[ebp]
  00464	c6 45 ff 01	 mov	 BYTE PTR _byCUrrentLODLevel$1$[ebp], 1
  00468	50		 push	 eax
  00469	8d 45 f4	 lea	 eax, DWORD PTR _wPrimitiveCount$[ebp]
  0046c	50		 push	 eax
  0046d	6a 01		 push	 1

; 131  : 		}

  0046f	eb 1c		 jmp	 SHORT $LN289@RenderTerr
$LN246@RenderTerr:

; 132  : 		else if (byCUrrentLODLevel == 1 && fLODLevel2Distance <= it->first)

  00471	3c 01		 cmp	 al, 1
  00473	75 1f		 jne	 SHORT $LN15@RenderTerr
  00475	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  00479	0f 2f 45 ec	 comiss	 xmm0, DWORD PTR _fLODLevel2Distance$[ebp]
  0047d	72 15		 jb	 SHORT $LN15@RenderTerr

; 133  : 		{
; 134  : 			byCUrrentLODLevel = 2;
; 135  : 			SelectIndexBuffer(2, &wPrimitiveCount, &ePrimitiveType);

  0047f	8d 45 f8	 lea	 eax, DWORD PTR _ePrimitiveType$[ebp]
  00482	c6 45 ff 02	 mov	 BYTE PTR _byCUrrentLODLevel$1$[ebp], 2
  00486	50		 push	 eax
  00487	8d 45 f4	 lea	 eax, DWORD PTR _wPrimitiveCount$[ebp]
  0048a	50		 push	 eax
  0048b	6a 02		 push	 2
$LN289@RenderTerr:

; 136  : 		}
; 137  : 
; 138  : 		__HardwareTransformPatch_RenderPatchSplat(it->second, wPrimitiveCount, ePrimitiveType);

  0048d	8b cb		 mov	 ecx, ebx
  0048f	e8 00 00 00 00	 call	 ?SelectIndexBuffer@CMapOutdoor@@IAEXEPAGPAW4_D3DPRIMITIVETYPE@@@Z ; CMapOutdoor::SelectIndexBuffer
$LN15@RenderTerr:
  00494	ff 75 f8	 push	 DWORD PTR _ePrimitiveType$[ebp]
  00497	8b cb		 mov	 ecx, ebx
  00499	ff 75 f4	 push	 DWORD PTR _wPrimitiveCount$[ebp]
  0049c	ff 76 04	 push	 DWORD PTR [esi+4]
  0049f	e8 00 00 00 00	 call	 ?__HardwareTransformPatch_RenderPatchSplat@CMapOutdoor@@IAEXJGW4_D3DPRIMITIVETYPE@@@Z ; CMapOutdoor::__HardwareTransformPatch_RenderPatchSplat

; 139  : 		if (m_iRenderedSplatNum >= m_iSplatLimit)

  004a4	8b 83 88 09 00
	00		 mov	 eax, DWORD PTR [ebx+2440]
  004aa	3b 83 9c 09 00
	00		 cmp	 eax, DWORD PTR [ebx+2460]
  004b0	7d 24		 jge	 SHORT $LN252@RenderTerr

; 140  : 			break;
; 141  : 
; 142  :  		if (m_bDrawWireFrame)

  004b2	80 bb 30 01 00
	00 00		 cmp	 BYTE PTR [ebx+304], 0
  004b9	74 10		 je	 SHORT $LN2@RenderTerr

; 143  : 			DrawWireFrame(it->second, wPrimitiveCount, ePrimitiveType);

  004bb	ff 75 f8	 push	 DWORD PTR _ePrimitiveType$[ebp]
  004be	8b cb		 mov	 ecx, ebx
  004c0	ff 75 f4	 push	 DWORD PTR _wPrimitiveCount$[ebp]
  004c3	ff 76 04	 push	 DWORD PTR [esi+4]
  004c6	e8 00 00 00 00	 call	 ?DrawWireFrame@CMapOutdoor@@IAEXJGW4_D3DPRIMITIVETYPE@@@Z ; CMapOutdoor::DrawWireFrame
$LN2@RenderTerr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 79   :         ++_Ptr;

  004cb	83 c6 08	 add	 esi, 8

; 163  :         return _Ptr == _Right._Ptr;

  004ce	3b f7		 cmp	 esi, edi
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapOutdoorRenderHTP.cpp

; 125  : 	for( ; it != near_it; ++it)

  004d0	0f 85 7a ff ff
	ff		 jne	 $LL285@RenderTerr
$LN252@RenderTerr:

; 144  : 	}
; 145  : #endif
; 146  : 
; 147  : 	STATEMANAGER.SetRenderState(D3DRS_FOGENABLE, dwFogEnable);

  004d6	ff 75 e8	 push	 DWORD PTR _dwFogEnable$1$[ebp]
  004d9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  004df	6a 1c		 push	 28			; 0000001cH
  004e1	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 148  : 
; 149  : 	if (m_iRenderedSplatNum < m_iSplatLimit)

  004e6	8b 83 88 09 00
	00		 mov	 eax, DWORD PTR [ebx+2440]
  004ec	8b 75 d8	 mov	 esi, DWORD PTR _far_it$[ebp]
  004ef	3b 83 9c 09 00
	00		 cmp	 eax, DWORD PTR [ebx+2460]
  004f5	0f 8d 8e 00 00
	00		 jge	 $LN253@RenderTerr

; 151  : 		for(it = near_it; it != far_it; ++it)

  004fb	3b fe		 cmp	 edi, esi
  004fd	0f 84 86 00 00
	00		 je	 $LN253@RenderTerr
$LL286@RenderTerr:

; 152  : 		{
; 153  : 			if (byCUrrentLODLevel == 0 && fLODLevel1Distance <= it->first)

  00503	8a 45 ff	 mov	 al, BYTE PTR _byCUrrentLODLevel$1$[ebp]
  00506	84 c0		 test	 al, al
  00508	75 1a		 jne	 SHORT $LN247@RenderTerr
  0050a	f3 0f 10 07	 movss	 xmm0, DWORD PTR [edi]
  0050e	0f 2f 45 f0	 comiss	 xmm0, DWORD PTR _fLODLevel1Distance$[ebp]
  00512	72 33		 jb	 SHORT $LN21@RenderTerr

; 154  : 			{
; 155  : 				byCUrrentLODLevel = 1;
; 156  : 				SelectIndexBuffer(1, &wPrimitiveCount, &ePrimitiveType);

  00514	8d 45 f8	 lea	 eax, DWORD PTR _ePrimitiveType$[ebp]
  00517	c6 45 ff 01	 mov	 BYTE PTR _byCUrrentLODLevel$1$[ebp], 1
  0051b	50		 push	 eax
  0051c	8d 45 f4	 lea	 eax, DWORD PTR _wPrimitiveCount$[ebp]
  0051f	50		 push	 eax
  00520	6a 01		 push	 1

; 157  : 			}

  00522	eb 1c		 jmp	 SHORT $LN290@RenderTerr
$LN247@RenderTerr:

; 158  : 			else if (byCUrrentLODLevel == 1 && fLODLevel2Distance <= it->first)

  00524	3c 01		 cmp	 al, 1
  00526	75 1f		 jne	 SHORT $LN21@RenderTerr
  00528	f3 0f 10 07	 movss	 xmm0, DWORD PTR [edi]
  0052c	0f 2f 45 ec	 comiss	 xmm0, DWORD PTR _fLODLevel2Distance$[ebp]
  00530	72 15		 jb	 SHORT $LN21@RenderTerr

; 159  : 			{
; 160  : 				byCUrrentLODLevel = 2;
; 161  : 				SelectIndexBuffer(2, &wPrimitiveCount, &ePrimitiveType);

  00532	8d 45 f8	 lea	 eax, DWORD PTR _ePrimitiveType$[ebp]
  00535	c6 45 ff 02	 mov	 BYTE PTR _byCUrrentLODLevel$1$[ebp], 2
  00539	50		 push	 eax
  0053a	8d 45 f4	 lea	 eax, DWORD PTR _wPrimitiveCount$[ebp]
  0053d	50		 push	 eax
  0053e	6a 02		 push	 2
$LN290@RenderTerr:

; 162  : 			}
; 163  : 
; 164  : 			__HardwareTransformPatch_RenderPatchSplat(it->second, wPrimitiveCount, ePrimitiveType);

  00540	8b cb		 mov	 ecx, ebx
  00542	e8 00 00 00 00	 call	 ?SelectIndexBuffer@CMapOutdoor@@IAEXEPAGPAW4_D3DPRIMITIVETYPE@@@Z ; CMapOutdoor::SelectIndexBuffer
$LN21@RenderTerr:
  00547	ff 75 f8	 push	 DWORD PTR _ePrimitiveType$[ebp]
  0054a	8b cb		 mov	 ecx, ebx
  0054c	ff 75 f4	 push	 DWORD PTR _wPrimitiveCount$[ebp]
  0054f	ff 77 04	 push	 DWORD PTR [edi+4]
  00552	e8 00 00 00 00	 call	 ?__HardwareTransformPatch_RenderPatchSplat@CMapOutdoor@@IAEXJGW4_D3DPRIMITIVETYPE@@@Z ; CMapOutdoor::__HardwareTransformPatch_RenderPatchSplat

; 165  : 
; 166  : 			if (m_iRenderedSplatNum >= m_iSplatLimit)

  00557	8b 83 88 09 00
	00		 mov	 eax, DWORD PTR [ebx+2440]
  0055d	3b 83 9c 09 00
	00		 cmp	 eax, DWORD PTR [ebx+2460]
  00563	7d 24		 jge	 SHORT $LN253@RenderTerr

; 167  : 				break;
; 168  : 
; 169  : 			if (m_bDrawWireFrame)

  00565	80 bb 30 01 00
	00 00		 cmp	 BYTE PTR [ebx+304], 0
  0056c	74 10		 je	 SHORT $LN5@RenderTerr

; 170  : 				DrawWireFrame(it->second, wPrimitiveCount, ePrimitiveType);

  0056e	ff 75 f8	 push	 DWORD PTR _ePrimitiveType$[ebp]
  00571	8b cb		 mov	 ecx, ebx
  00573	ff 75 f4	 push	 DWORD PTR _wPrimitiveCount$[ebp]
  00576	ff 77 04	 push	 DWORD PTR [edi+4]
  00579	e8 00 00 00 00	 call	 ?DrawWireFrame@CMapOutdoor@@IAEXJGW4_D3DPRIMITIVETYPE@@@Z ; CMapOutdoor::DrawWireFrame
$LN5@RenderTerr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 79   :         ++_Ptr;

  0057e	83 c7 08	 add	 edi, 8

; 163  :         return _Ptr == _Right._Ptr;

  00581	3b fe		 cmp	 edi, esi
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapOutdoorRenderHTP.cpp

; 151  : 		for(it = near_it; it != far_it; ++it)

  00583	0f 85 7a ff ff
	ff		 jne	 $LL286@RenderTerr
$LN253@RenderTerr:

; 171  : 		}
; 172  : 	}
; 173  : 
; 174  : 	STATEMANAGER.SetRenderState(D3DRS_FOGENABLE, FALSE);

  00589	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0058f	6a 00		 push	 0
  00591	6a 1c		 push	 28			; 0000001cH
  00593	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 175  : 	STATEMANAGER.SetRenderState(D3DRS_LIGHTING, FALSE);

  00598	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0059e	6a 00		 push	 0
  005a0	68 89 00 00 00	 push	 137			; 00000089H
  005a5	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 176  : 
; 177  : 	STATEMANAGER.SetTexture(0, NULL);

  005aa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  005b0	6a 00		 push	 0
  005b2	6a 00		 push	 0
  005b4	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 178  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_TEXTURETRANSFORMFLAGS, FALSE);

  005b9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  005bf	6a 00		 push	 0
  005c1	6a 18		 push	 24			; 00000018H
  005c3	6a 00		 push	 0
  005c5	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 179  : 
; 180  : 	STATEMANAGER.SetTexture(1, NULL);

  005ca	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  005d0	6a 00		 push	 0
  005d2	6a 01		 push	 1
  005d4	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 181  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_TEXTURETRANSFORMFLAGS, FALSE);

  005d9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  005df	6a 00		 push	 0
  005e1	6a 18		 push	 24			; 00000018H
  005e3	6a 01		 push	 1
  005e5	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 182  : 
; 183  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_TFACTOR);

  005ea	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  005f0	6a 03		 push	 3
  005f2	6a 02		 push	 2
  005f4	6a 00		 push	 0
  005f6	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 184  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP,   D3DTOP_SELECTARG1);

  005fb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00601	6a 02		 push	 2
  00603	6a 01		 push	 1
  00605	6a 00		 push	 0
  00607	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 185  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAOP,   D3DTOP_DISABLE);

  0060c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00612	6a 01		 push	 1
  00614	6a 04		 push	 4
  00616	6a 00		 push	 0
  00618	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 186  : 
; 187  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_COLOROP,   D3DTOP_DISABLE);

  0061d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00623	6a 01		 push	 1
  00625	6a 01		 push	 1
  00627	6a 01		 push	 1
  00629	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 188  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_ALPHAOP,   D3DTOP_DISABLE);

  0062e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00634	6a 01		 push	 1
  00636	6a 04		 push	 4
  00638	6a 01		 push	 1
  0063a	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 189  : 
; 190  : 	if (m_iRenderedSplatNum < m_iSplatLimit)

  0063f	8b 83 88 09 00
	00		 mov	 eax, DWORD PTR [ebx+2440]
  00645	3b 83 9c 09 00
	00		 cmp	 eax, DWORD PTR [ebx+2460]
  0064b	0f 8d 99 00 00
	00		 jge	 $LN254@RenderTerr
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00651	3b b3 1c 01 00
	00		 cmp	 esi, DWORD PTR [ebx+284]
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapOutdoorRenderHTP.cpp

; 192  : 		for(it = far_it; it != m_PatchVector.end(); ++it)

  00657	0f 84 8d 00 00
	00		 je	 $LN254@RenderTerr
  0065d	0f 1f 00	 npad	 3
$LL287@RenderTerr:

; 193  : 		{
; 194  : 			if (byCUrrentLODLevel == 0 && fLODLevel1Distance <= it->first)

  00660	8a 45 ff	 mov	 al, BYTE PTR _byCUrrentLODLevel$1$[ebp]
  00663	84 c0		 test	 al, al
  00665	75 1a		 jne	 SHORT $LN248@RenderTerr
  00667	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  0066b	0f 2f 45 f0	 comiss	 xmm0, DWORD PTR _fLODLevel1Distance$[ebp]
  0066f	72 33		 jb	 SHORT $LN27@RenderTerr

; 195  : 			{
; 196  : 				byCUrrentLODLevel = 1;
; 197  : 				SelectIndexBuffer(1, &wPrimitiveCount, &ePrimitiveType);

  00671	8d 45 f8	 lea	 eax, DWORD PTR _ePrimitiveType$[ebp]
  00674	c6 45 ff 01	 mov	 BYTE PTR _byCUrrentLODLevel$1$[ebp], 1
  00678	50		 push	 eax
  00679	8d 45 f4	 lea	 eax, DWORD PTR _wPrimitiveCount$[ebp]
  0067c	50		 push	 eax
  0067d	6a 01		 push	 1

; 198  : 			}

  0067f	eb 1c		 jmp	 SHORT $LN291@RenderTerr
$LN248@RenderTerr:

; 199  : 			else if (byCUrrentLODLevel == 1 && fLODLevel2Distance <= it->first)

  00681	3c 01		 cmp	 al, 1
  00683	75 1f		 jne	 SHORT $LN27@RenderTerr
  00685	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  00689	0f 2f 45 ec	 comiss	 xmm0, DWORD PTR _fLODLevel2Distance$[ebp]
  0068d	72 15		 jb	 SHORT $LN27@RenderTerr

; 200  : 			{
; 201  : 				byCUrrentLODLevel = 2;
; 202  : 				SelectIndexBuffer(2, &wPrimitiveCount, &ePrimitiveType);

  0068f	8d 45 f8	 lea	 eax, DWORD PTR _ePrimitiveType$[ebp]
  00692	c6 45 ff 02	 mov	 BYTE PTR _byCUrrentLODLevel$1$[ebp], 2
  00696	50		 push	 eax
  00697	8d 45 f4	 lea	 eax, DWORD PTR _wPrimitiveCount$[ebp]
  0069a	50		 push	 eax
  0069b	6a 02		 push	 2
$LN291@RenderTerr:

; 203  : 			}
; 204  : 
; 205  : 			__HardwareTransformPatch_RenderPatchNone(it->second, wPrimitiveCount, ePrimitiveType);

  0069d	8b cb		 mov	 ecx, ebx
  0069f	e8 00 00 00 00	 call	 ?SelectIndexBuffer@CMapOutdoor@@IAEXEPAGPAW4_D3DPRIMITIVETYPE@@@Z ; CMapOutdoor::SelectIndexBuffer
$LN27@RenderTerr:
  006a4	ff 75 f8	 push	 DWORD PTR _ePrimitiveType$[ebp]
  006a7	8b cb		 mov	 ecx, ebx
  006a9	ff 75 f4	 push	 DWORD PTR _wPrimitiveCount$[ebp]
  006ac	ff 76 04	 push	 DWORD PTR [esi+4]
  006af	e8 00 00 00 00	 call	 ?__HardwareTransformPatch_RenderPatchNone@CMapOutdoor@@IAEXJGW4_D3DPRIMITIVETYPE@@@Z ; CMapOutdoor::__HardwareTransformPatch_RenderPatchNone

; 206  : 
; 207  : 			if (m_iRenderedSplatNum >= m_iSplatLimit)

  006b4	8b 83 88 09 00
	00		 mov	 eax, DWORD PTR [ebx+2440]
  006ba	3b 83 9c 09 00
	00		 cmp	 eax, DWORD PTR [ebx+2460]
  006c0	7d 28		 jge	 SHORT $LN254@RenderTerr

; 208  : 				break;
; 209  : 
; 210  : 			if (m_bDrawWireFrame)

  006c2	80 bb 30 01 00
	00 00		 cmp	 BYTE PTR [ebx+304], 0
  006c9	74 10		 je	 SHORT $LN8@RenderTerr

; 211  :  				DrawWireFrame(it->second, wPrimitiveCount, ePrimitiveType);

  006cb	ff 75 f8	 push	 DWORD PTR _ePrimitiveType$[ebp]
  006ce	8b cb		 mov	 ecx, ebx
  006d0	ff 75 f4	 push	 DWORD PTR _wPrimitiveCount$[ebp]
  006d3	ff 76 04	 push	 DWORD PTR [esi+4]
  006d6	e8 00 00 00 00	 call	 ?DrawWireFrame@CMapOutdoor@@IAEXJGW4_D3DPRIMITIVETYPE@@@Z ; CMapOutdoor::DrawWireFrame
$LN8@RenderTerr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 79   :         ++_Ptr;

  006db	83 c6 08	 add	 esi, 8

; 163  :         return _Ptr == _Right._Ptr;

  006de	3b b3 1c 01 00
	00		 cmp	 esi, DWORD PTR [ebx+284]
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapOutdoorRenderHTP.cpp

; 192  : 		for(it = far_it; it != m_PatchVector.end(); ++it)

  006e4	0f 85 76 ff ff
	ff		 jne	 $LL287@RenderTerr
$LN254@RenderTerr:

; 212  : 		}
; 213  : 	}
; 214  : 
; 215  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  006ea	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  006f0	6a 02		 push	 2
  006f2	6a 02		 push	 2
  006f4	6a 00		 push	 0
  006f6	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 216  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG2, D3DTA_CURRENT);

  006fb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00701	6a 01		 push	 1
  00703	6a 03		 push	 3
  00705	6a 00		 push	 0
  00707	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 217  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP,   D3DTOP_MODULATE);

  0070c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00712	6a 04		 push	 4
  00714	6a 01		 push	 1
  00716	6a 00		 push	 0
  00718	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 218  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

  0071d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00723	6a 02		 push	 2
  00725	6a 05		 push	 5
  00727	6a 00		 push	 0
  00729	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 219  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAOP,   D3DTOP_SELECTARG1);

  0072e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00734	6a 02		 push	 2
  00736	6a 04		 push	 4
  00738	6a 00		 push	 0
  0073a	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 220  : 
; 221  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_COLORARG1, D3DTA_CURRENT);

  0073f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00745	6a 01		 push	 1
  00747	6a 02		 push	 2
  00749	6a 01		 push	 1
  0074b	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 222  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_COLOROP,   D3DTOP_SELECTARG1);

  00750	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00756	6a 02		 push	 2
  00758	6a 01		 push	 1
  0075a	6a 01		 push	 1
  0075c	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 223  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

  00761	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00767	6a 02		 push	 2
  00769	6a 05		 push	 5
  0076b	6a 01		 push	 1
  0076d	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 224  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_ALPHAOP,   D3DTOP_SELECTARG1);

  00772	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00778	6a 02		 push	 2
  0077a	6a 04		 push	 4
  0077c	6a 01		 push	 1
  0077e	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 225  : 
; 226  : 	STATEMANAGER.SetRenderState(D3DRS_FOGENABLE, dwFogEnable);

  00783	ff 75 e8	 push	 DWORD PTR _dwFogEnable$1$[ebp]
  00786	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0078c	6a 1c		 push	 28			; 0000001cH
  0078e	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 227  : 	STATEMANAGER.SetRenderState(D3DRS_LIGHTING, TRUE);

  00793	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00799	6a 01		 push	 1
  0079b	68 89 00 00 00	 push	 137			; 00000089H
  007a0	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  007a5	8b 8b 94 09 00
	00		 mov	 ecx, DWORD PTR [ebx+2452]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8067 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

  007ab	8b c1		 mov	 eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  007ad	8b 93 90 09 00
	00		 mov	 edx, DWORD PTR [ebx+2448]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8067 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

  007b3	2b c2		 sub	 eax, edx
  007b5	c6 45 d8 00	 mov	 BYTE PTR $T1[ebp], 0
  007b9	ff 75 d8	 push	 DWORD PTR $T1[ebp]
  007bc	c1 f8 02	 sar	 eax, 2
  007bf	50		 push	 eax
  007c0	51		 push	 ecx
  007c1	52		 push	 edx
  007c2	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAHU?$less@X@std@@@std@@YAXPAH0HU?$less@X@0@@Z ; std::_Sort_unchecked<int *,std::less<void> >
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapOutdoorRenderHTP.cpp

; 234  : 	STATEMANAGER.RestoreRenderState(D3DRS_TEXTUREFACTOR);

  007c7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8067 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

  007cd	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapOutdoorRenderHTP.cpp

; 234  : 	STATEMANAGER.RestoreRenderState(D3DRS_TEXTUREFACTOR);

  007d0	6a 3c		 push	 60			; 0000003cH
  007d2	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 235  : 
; 236  : 	STATEMANAGER.RestoreTransform(D3DTS_TEXTURE0);

  007d7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  007dd	6a 10		 push	 16			; 00000010H
  007df	e8 00 00 00 00	 call	 ?RestoreTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@@Z ; CStateManager::RestoreTransform

; 237  : 	STATEMANAGER.RestoreTransform(D3DTS_TEXTURE1);

  007e4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  007ea	6a 11		 push	 17			; 00000011H
  007ec	e8 00 00 00 00	 call	 ?RestoreTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@@Z ; CStateManager::RestoreTransform

; 238  : 
; 239  : 	STATEMANAGER.RestoreTextureStageState(0, D3DTSS_TEXCOORDINDEX);

  007f1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  007f7	6a 0b		 push	 11			; 0000000bH
  007f9	6a 00		 push	 0
  007fb	e8 00 00 00 00	 call	 ?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z ; CStateManager::RestoreTextureStageState

; 240  : 	STATEMANAGER.RestoreTextureStageState(0, D3DTSS_TEXTURETRANSFORMFLAGS);

  00800	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00806	6a 18		 push	 24			; 00000018H
  00808	6a 00		 push	 0
  0080a	e8 00 00 00 00	 call	 ?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z ; CStateManager::RestoreTextureStageState

; 241  : 	STATEMANAGER.RestoreTextureStageState(1, D3DTSS_TEXCOORDINDEX);

  0080f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00815	6a 0b		 push	 11			; 0000000bH
  00817	6a 01		 push	 1
  00819	e8 00 00 00 00	 call	 ?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z ; CStateManager::RestoreTextureStageState

; 242  : 	STATEMANAGER.RestoreTextureStageState(1, D3DTSS_TEXTURETRANSFORMFLAGS);

  0081e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00824	6a 18		 push	 24			; 00000018H
  00826	6a 01		 push	 1
  00828	e8 00 00 00 00	 call	 ?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z ; CStateManager::RestoreTextureStageState

; 243  : 
; 244  : 	STATEMANAGER.RestoreRenderState(D3DRS_ALPHABLENDENABLE);

  0082d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00833	6a 1b		 push	 27			; 0000001bH
  00835	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 245  : 	STATEMANAGER.RestoreRenderState(D3DRS_ALPHATESTENABLE);

  0083a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00840	6a 0f		 push	 15			; 0000000fH
  00842	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 246  : 	STATEMANAGER.RestoreRenderState(D3DRS_ALPHAREF);

  00847	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0084d	6a 18		 push	 24			; 00000018H
  0084f	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 247  : 	STATEMANAGER.RestoreRenderState(D3DRS_ALPHAFUNC);

  00854	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0085a	6a 19		 push	 25			; 00000019H
  0085c	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState
  00861	5f		 pop	 edi
  00862	5e		 pop	 esi
  00863	5b		 pop	 ebx

; 248  : 
; 249  : 	// Render State & TextureStageState
; 250  : 	//////////////////////////////////////////////////////////////////////////
; 251  : }

  00864	8b e5		 mov	 esp, ebp
  00866	5d		 pop	 ebp
  00867	c3		 ret	 0
?__RenderTerrain_RenderHardwareTransformPatch@CMapOutdoor@@IAEXXZ ENDP ; CMapOutdoor::__RenderTerrain_RenderHardwareTransformPatch
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ PROC ; std::vector<int,std::allocator<int> >::_Xlength, COMDAT

; 2138 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ ENDP ; std::vector<int,std::allocator<int> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 137  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 138  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 139  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 140  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 87   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 141  :         _Throw_bad_array_new_length(); // add overflow
; 142  :     }
; 143  : 
; 144  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 87   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 145  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 146  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 147  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 148  : 
; 149  : #ifdef _DEBUG
; 150  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 151  : #endif // _DEBUG
; 152  :     return _Ptr;
; 153  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 145  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 331  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 332  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.h
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT
??0D3DXMATRIX@@QAE@XZ PROC				; D3DXMATRIX::D3DXMATRIX, COMDAT
; _this$ = ecx

; 177  :     D3DXMATRIX() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXMATRIX@@QAE@XZ ENDP				; D3DXMATRIX::D3DXMATRIX
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
