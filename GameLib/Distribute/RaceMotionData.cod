; Listing generated by Microsoft (R) Optimizing Compiler Version 19.43.34808.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\GameLib\Distribute\RaceMotionData.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_7?$CDynamicPool@VCRaceMotionData@@@@6B@	; CDynamicPool<CRaceMotionData>::`vftable'
PUBLIC	??_G?$CDynamicPool@VCRaceMotionData@@@@UAEPAXI@Z ; CDynamicPool<CRaceMotionData>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`scalar deleting destructor'
PUBLIC	??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPool@VCRaceMotionData@@@@6B@	; CDynamicPool<CRaceMotionData>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPool@VCRaceMotionData@@@@@8	; CDynamicPool<CRaceMotionData> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPool@VCRaceMotionData@@@@8	; CDynamicPool<CRaceMotionData>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPool@VCRaceMotionData@@@@8	; CDynamicPool<CRaceMotionData>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPool@VCRaceMotionData@@@@8 ; CDynamicPool<CRaceMotionData>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E?$CDynamicPool@VCRaceMotionData@@@@UAEPAXI@Z:PROC ; CDynamicPool<CRaceMotionData>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPool@VCRaceMotionData@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPool@VCRaceMotionData@@@@8 DD FLAT:??_R0?AV?$CDynamicPool@VCRaceMotionData@@@@@8 ; CDynamicPool<CRaceMotionData>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPool@VCRaceMotionData@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPool@VCRaceMotionData@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPool@VCRaceMotionData@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPool@VCRaceMotionData@@@@8 ; CDynamicPool<CRaceMotionData>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPool@VCRaceMotionData@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPool@VCRaceMotionData@@@@8 DD 00H	; CDynamicPool<CRaceMotionData>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPool@VCRaceMotionData@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPool@VCRaceMotionData@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPool@VCRaceMotionData@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPool<CRaceMotionData> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPool@VCRaceMotionData@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPool@VCRaceMotionData@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPool@VCRaceMotionData@@@@6B@ DD 00H	; CDynamicPool<CRaceMotionData>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPool@VCRaceMotionData@@@@@8
	DD	FLAT:??_R3?$CDynamicPool@VCRaceMotionData@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDe'
	DB	'corator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDec'
	DB	'orator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpd'
	DB	'ateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@N'
	DB	'EffectUpdateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEff'
	DB	'ectUpdateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffe'
	DB	'ctUpdateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecora'
	DB	'tor@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDeco'
	DB	'rator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPool@VCRaceMotionData@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPool@VCRaceMotionData@@@@6B@ DD FLAT:??_R4?$CDynamicPool@VCRaceMotionData@@@@6B@ ; CDynamicPool<CRaceMotionData>::`vftable'
	DD	FLAT:??_E?$CDynamicPool@VCRaceMotionData@@@@UAEPAXI@Z
CONST	ENDS
CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHQBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
PUBLIC	?NoExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; CFileNameHelper::NoExtension
PUBLIC	?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::size
PUBLIC	?at@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::at
PUBLIC	?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
PUBLIC	??1CGotoChild@CTextFileLoader@@QAE@XZ		; CTextFileLoader::CGotoChild::~CGotoChild
PUBLIC	??1?$vector@USHitData@NRaceData@@V?$allocator@USHitData@NRaceData@@@std@@@std@@QAE@XZ ; std::vector<NRaceData::SHitData,std::allocator<NRaceData::SHitData> >::~vector<NRaceData::SHitData,std::allocator<NRaceData::SHitData> >
PUBLIC	??1?$vector@VCSphereCollisionInstance@@V?$allocator@VCSphereCollisionInstance@@@std@@@std@@QAE@XZ ; std::vector<CSphereCollisionInstance,std::allocator<CSphereCollisionInstance> >::~vector<CSphereCollisionInstance,std::allocator<CSphereCollisionInstance> >
PUBLIC	??1SCollisionData@NRaceData@@UAE@XZ		; NRaceData::SCollisionData::~SCollisionData
PUBLIC	??_GSCollisionData@NRaceData@@UAEPAXI@Z		; NRaceData::SCollisionData::`scalar deleting destructor'
PUBLIC	??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
PUBLIC	??$_Find_last_vectorized@$$CBDD@std@@YAPBDQBD0D@Z ; std::_Find_last_vectorized<char const ,char>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??1?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@QAE@XZ ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::~vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >
PUBLIC	??1SMotionEventData@NMotionEvent@@UAE@XZ	; NMotionEvent::SMotionEventData::~SMotionEventData
PUBLIC	?Load@SMotionEventData@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z ; NMotionEvent::SMotionEventData::Load
PUBLIC	??_GSMotionEventData@NMotionEvent@@UAEPAXI@Z	; NMotionEvent::SMotionEventData::`scalar deleting destructor'
PUBLIC	??1SMotionEventDataScreenWaving@NMotionEvent@@UAE@XZ ; NMotionEvent::SMotionEventDataScreenWaving::~SMotionEventDataScreenWaving
PUBLIC	?Save@SMotionEventDataScreenWaving@NMotionEvent@@UAEXPAU_iobuf@@H@Z ; NMotionEvent::SMotionEventDataScreenWaving::Save
PUBLIC	?Load@SMotionEventDataScreenWaving@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z ; NMotionEvent::SMotionEventDataScreenWaving::Load
PUBLIC	??_GSMotionEventDataScreenWaving@NMotionEvent@@UAEPAXI@Z ; NMotionEvent::SMotionEventDataScreenWaving::`scalar deleting destructor'
PUBLIC	??1SMotionEventDataEffect@NMotionEvent@@UAE@XZ	; NMotionEvent::SMotionEventDataEffect::~SMotionEventDataEffect
PUBLIC	?Save@SMotionEventDataEffect@NMotionEvent@@UAEXPAU_iobuf@@H@Z ; NMotionEvent::SMotionEventDataEffect::Save
PUBLIC	?Load@SMotionEventDataEffect@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z ; NMotionEvent::SMotionEventDataEffect::Load
PUBLIC	??_GSMotionEventDataEffect@NMotionEvent@@UAEPAXI@Z ; NMotionEvent::SMotionEventDataEffect::`scalar deleting destructor'
PUBLIC	??1SMotionEventDataEffectToTarget@NMotionEvent@@UAE@XZ ; NMotionEvent::SMotionEventDataEffectToTarget::~SMotionEventDataEffectToTarget
PUBLIC	?Save@SMotionEventDataEffectToTarget@NMotionEvent@@UAEXPAU_iobuf@@H@Z ; NMotionEvent::SMotionEventDataEffectToTarget::Save
PUBLIC	?Load@SMotionEventDataEffectToTarget@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z ; NMotionEvent::SMotionEventDataEffectToTarget::Load
PUBLIC	??_GSMotionEventDataEffectToTarget@NMotionEvent@@UAEPAXI@Z ; NMotionEvent::SMotionEventDataEffectToTarget::`scalar deleting destructor'
PUBLIC	??1SMotionEventDataFly@NMotionEvent@@UAE@XZ	; NMotionEvent::SMotionEventDataFly::~SMotionEventDataFly
PUBLIC	?Save@SMotionEventDataFly@NMotionEvent@@UAEXPAU_iobuf@@H@Z ; NMotionEvent::SMotionEventDataFly::Save
PUBLIC	?Load@SMotionEventDataFly@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z ; NMotionEvent::SMotionEventDataFly::Load
PUBLIC	??_GSMotionEventDataFly@NMotionEvent@@UAEPAXI@Z	; NMotionEvent::SMotionEventDataFly::`scalar deleting destructor'
PUBLIC	??1SMotionEventDataAttack@NMotionEvent@@UAE@XZ	; NMotionEvent::SMotionEventDataAttack::~SMotionEventDataAttack
PUBLIC	?Save@SMotionEventDataAttack@NMotionEvent@@UAEXPAU_iobuf@@H@Z ; NMotionEvent::SMotionEventDataAttack::Save
PUBLIC	?Load@SMotionEventDataAttack@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z ; NMotionEvent::SMotionEventDataAttack::Load
PUBLIC	??_GSMotionEventDataAttack@NMotionEvent@@UAEPAXI@Z ; NMotionEvent::SMotionEventDataAttack::`scalar deleting destructor'
PUBLIC	??1SMotionEventDataSound@NMotionEvent@@UAE@XZ	; NMotionEvent::SMotionEventDataSound::~SMotionEventDataSound
PUBLIC	?Save@SMotionEventDataSound@NMotionEvent@@UAEXPAU_iobuf@@H@Z ; NMotionEvent::SMotionEventDataSound::Save
PUBLIC	?Load@SMotionEventDataSound@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z ; NMotionEvent::SMotionEventDataSound::Load
PUBLIC	??_GSMotionEventDataSound@NMotionEvent@@UAEPAXI@Z ; NMotionEvent::SMotionEventDataSound::`scalar deleting destructor'
PUBLIC	??1SMotionEventDataCharacterShow@NMotionEvent@@UAE@XZ ; NMotionEvent::SMotionEventDataCharacterShow::~SMotionEventDataCharacterShow
PUBLIC	?Save@SMotionEventDataCharacterShow@NMotionEvent@@UAEXPAU_iobuf@@H@Z ; NMotionEvent::SMotionEventDataCharacterShow::Save
PUBLIC	??_GSMotionEventDataCharacterShow@NMotionEvent@@UAEPAXI@Z ; NMotionEvent::SMotionEventDataCharacterShow::`scalar deleting destructor'
PUBLIC	??1SMotionEventDataCharacterHide@NMotionEvent@@UAE@XZ ; NMotionEvent::SMotionEventDataCharacterHide::~SMotionEventDataCharacterHide
PUBLIC	?Save@SMotionEventDataCharacterHide@NMotionEvent@@UAEXPAU_iobuf@@H@Z ; NMotionEvent::SMotionEventDataCharacterHide::Save
PUBLIC	??_GSMotionEventDataCharacterHide@NMotionEvent@@UAEPAXI@Z ; NMotionEvent::SMotionEventDataCharacterHide::`scalar deleting destructor'
PUBLIC	??1SMotionEventDataWarp@NMotionEvent@@UAE@XZ	; NMotionEvent::SMotionEventDataWarp::~SMotionEventDataWarp
PUBLIC	?Save@SMotionEventDataWarp@NMotionEvent@@UAEXPAU_iobuf@@H@Z ; NMotionEvent::SMotionEventDataWarp::Save
PUBLIC	??_GSMotionEventDataWarp@NMotionEvent@@UAEPAXI@Z ; NMotionEvent::SMotionEventDataWarp::`scalar deleting destructor'
PUBLIC	?New@CRaceMotionData@@SAPAV1@XZ			; CRaceMotionData::New
PUBLIC	?Delete@CRaceMotionData@@SAXPAV1@@Z		; CRaceMotionData::Delete
PUBLIC	?CreateSystem@CRaceMotionData@@SAXI@Z		; CRaceMotionData::CreateSystem
PUBLIC	?DestroySystem@CRaceMotionData@@SAXXZ		; CRaceMotionData::DestroySystem
PUBLIC	??0CRaceMotionData@@QAE@XZ			; CRaceMotionData::CRaceMotionData
PUBLIC	??1CRaceMotionData@@UAE@XZ			; CRaceMotionData::~CRaceMotionData
PUBLIC	?Initialize@CRaceMotionData@@QAEXXZ		; CRaceMotionData::Initialize
PUBLIC	?Destroy@CRaceMotionData@@QAEXXZ		; CRaceMotionData::Destroy
PUBLIC	?SetName@CRaceMotionData@@QAEXI@Z		; CRaceMotionData::SetName
PUBLIC	?GetType@CRaceMotionData@@QBEIXZ		; CRaceMotionData::GetType
PUBLIC	?IsLock@CRaceMotionData@@QBE_NXZ		; CRaceMotionData::IsLock
PUBLIC	?GetLoopCount@CRaceMotionData@@QBEHXZ		; CRaceMotionData::GetLoopCount
PUBLIC	?GetMotionFileName@CRaceMotionData@@QBEPBDXZ	; CRaceMotionData::GetMotionFileName
PUBLIC	?GetSoundScriptFileName@CRaceMotionData@@QBEPBDXZ ; CRaceMotionData::GetSoundScriptFileName
PUBLIC	?SetMotionDuration@CRaceMotionData@@QAEXM@Z	; CRaceMotionData::SetMotionDuration
PUBLIC	?GetMotionDuration@CRaceMotionData@@QAEMXZ	; CRaceMotionData::GetMotionDuration
PUBLIC	?SetAccumulationPosition@CRaceMotionData@@QAEXABUD3DXVECTOR3@@@Z ; CRaceMotionData::SetAccumulationPosition
PUBLIC	?IsComboInputTimeData@CRaceMotionData@@QBEHXZ	; CRaceMotionData::IsComboInputTimeData
PUBLIC	?GetComboInputStartTime@CRaceMotionData@@QBEMXZ	; CRaceMotionData::GetComboInputStartTime
PUBLIC	?GetNextComboTime@CRaceMotionData@@QBEMXZ	; CRaceMotionData::GetNextComboTime
PUBLIC	?GetComboInputEndTime@CRaceMotionData@@QBEMXZ	; CRaceMotionData::GetComboInputEndTime
PUBLIC	?isAttackingMotion@CRaceMotionData@@QBEHXZ	; CRaceMotionData::isAttackingMotion
PUBLIC	?GetMotionAttackDataPointer@CRaceMotionData@@QBEPBUSMotionAttackData@NRaceData@@XZ ; CRaceMotionData::GetMotionAttackDataPointer
PUBLIC	?GetMotionAttackDataReference@CRaceMotionData@@QBEABUSMotionAttackData@NRaceData@@XZ ; CRaceMotionData::GetMotionAttackDataReference
PUBLIC	?HasSplashMotionEvent@CRaceMotionData@@QBEHXZ	; CRaceMotionData::HasSplashMotionEvent
PUBLIC	?IsCancelEnableSkill@CRaceMotionData@@QBEHXZ	; CRaceMotionData::IsCancelEnableSkill
PUBLIC	?IsLoopMotion@CRaceMotionData@@QBEHXZ		; CRaceMotionData::IsLoopMotion
PUBLIC	?GetLoopStartTime@CRaceMotionData@@QBEMXZ	; CRaceMotionData::GetLoopStartTime
PUBLIC	?GetLoopEndTime@CRaceMotionData@@QBEMXZ		; CRaceMotionData::GetLoopEndTime
PUBLIC	?GetMotionEventDataCount@CRaceMotionData@@QBEKXZ ; CRaceMotionData::GetMotionEventDataCount
PUBLIC	?GetMotionEventDataPointer@CRaceMotionData@@QBEHEPAPBUSMotionEventData@NMotionEvent@@@Z ; CRaceMotionData::GetMotionEventDataPointer
PUBLIC	?GetMotionAttackingEventDataPointer@CRaceMotionData@@QBEHEPAPBUSMotionEventDataAttack@NMotionEvent@@@Z ; CRaceMotionData::GetMotionAttackingEventDataPointer
PUBLIC	?GetEventType@CRaceMotionData@@QBEHK@Z		; CRaceMotionData::GetEventType
PUBLIC	?GetEventStartTime@CRaceMotionData@@QBEMK@Z	; CRaceMotionData::GetEventStartTime
PUBLIC	?GetSoundInstanceVectorPointer@CRaceMotionData@@QBEPBV?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@XZ ; CRaceMotionData::GetSoundInstanceVectorPointer
PUBLIC	?LoadMotionData@CRaceMotionData@@QAE_NPBD@Z	; CRaceMotionData::LoadMotionData
PUBLIC	?LoadSoundScriptData@CRaceMotionData@@QAE_NPBD@Z ; CRaceMotionData::LoadSoundScriptData
PUBLIC	?SetType@CRaceMotionData@@IAEXI@Z		; CRaceMotionData::SetType
PUBLIC	?_Xlength@?$vector@PAUSMotionEventData@NMotionEvent@@V?$allocator@PAUSMotionEventData@NMotionEvent@@@std@@@std@@CAXXZ ; std::vector<NMotionEvent::SMotionEventData *,std::allocator<NMotionEvent::SMotionEventData *> >::_Xlength
PUBLIC	??_GCRaceMotionData@@UAEPAXI@Z			; CRaceMotionData::`scalar deleting destructor'
PUBLIC	??1?$CDynamicPool@VCRaceMotionData@@@@UAE@XZ	; CDynamicPool<CRaceMotionData>::~CDynamicPool<CRaceMotionData>
PUBLIC	?push_back@?$vector@PAVCRaceMotionData@@V?$allocator@PAVCRaceMotionData@@@std@@@std@@QAEXABQAVCRaceMotionData@@@Z ; std::vector<CRaceMotionData *,std::allocator<CRaceMotionData *> >::push_back
PUBLIC	?reserve@?$vector@PAVCRaceMotionData@@V?$allocator@PAVCRaceMotionData@@@std@@@std@@QAEXI@Z ; std::vector<CRaceMotionData *,std::allocator<CRaceMotionData *> >::reserve
PUBLIC	?_Change_array@?$vector@PAVCRaceMotionData@@V?$allocator@PAVCRaceMotionData@@@std@@@std@@AAEXQAPAVCRaceMotionData@@II@Z ; std::vector<CRaceMotionData *,std::allocator<CRaceMotionData *> >::_Change_array
PUBLIC	?_Xlength@?$vector@PAVCRaceMotionData@@V?$allocator@PAVCRaceMotionData@@@std@@@std@@CAXXZ ; std::vector<CRaceMotionData *,std::allocator<CRaceMotionData *> >::_Xlength
PUBLIC	??$stl_wipe@V?$vector@PAUSMotionEventData@NMotionEvent@@V?$allocator@PAUSMotionEventData@NMotionEvent@@@std@@@std@@@@YAXAAV?$vector@PAUSMotionEventData@NMotionEvent@@V?$allocator@PAUSMotionEventData@NMotionEvent@@@std@@@std@@@Z ; stl_wipe<std::vector<NMotionEvent::SMotionEventData *,std::allocator<NMotionEvent::SMotionEventData *> > >
PUBLIC	??1?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@QAE@XZ ; std::vector<NSound::SSoundData,std::allocator<NSound::SSoundData> >::~vector<NSound::SSoundData,std::allocator<NSound::SSoundData> >
PUBLIC	??$_Resize@PAUSMotionEventData@NMotionEvent@@@?$vector@PAUSMotionEventData@NMotionEvent@@V?$allocator@PAUSMotionEventData@NMotionEvent@@@std@@@std@@AAEXIABQAUSMotionEventData@NMotionEvent@@@Z ; std::vector<NMotionEvent::SMotionEventData *,std::allocator<NMotionEvent::SMotionEventData *> >::_Resize<NMotionEvent::SMotionEventData *>
PUBLIC	??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
PUBLIC	??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
PUBLIC	??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
PUBLIC	??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
PUBLIC	??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
PUBLIC	??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
PUBLIC	??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
PUBLIC	??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
PUBLIC	??$_Destroy_range@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAXPAUSSoundInstance@NSound@@QAU12@AAV?$allocator@USSoundInstance@NSound@@@0@@Z ; std::_Destroy_range<std::allocator<NSound::SSoundInstance> >
PUBLIC	??$_Uninitialized_fill_n@V?$allocator@PAUSMotionEventData@NMotionEvent@@@std@@@std@@YAPAPAUSMotionEventData@NMotionEvent@@PAPAU12@IABQAU12@AAV?$allocator@PAUSMotionEventData@NMotionEvent@@@0@@Z ; std::_Uninitialized_fill_n<std::allocator<NMotionEvent::SMotionEventData *> >
PUBLIC	??$_Is_all_bits_zero@PAUSMotionEventData@NMotionEvent@@@std@@YA_NABQAUSMotionEventData@NMotionEvent@@@Z ; std::_Is_all_bits_zero<NMotionEvent::SMotionEventData *>
PUBLIC	??$_Fill_zero_memset@PAPAUSMotionEventData@NMotionEvent@@@std@@YAXPAPAUSMotionEventData@NMotionEvent@@I@Z ; std::_Fill_zero_memset<NMotionEvent::SMotionEventData * *>
PUBLIC	??$_Copy_memmove@PAPAVCRaceMotionData@@PAPAV1@@std@@YAPAPAVCRaceMotionData@@PAPAV1@00@Z ; std::_Copy_memmove<CRaceMotionData * *,CRaceMotionData * *>
PUBLIC	??$_Copy_memmove@PAPAUSMotionEventData@NMotionEvent@@PAPAU12@@std@@YAPAPAUSMotionEventData@NMotionEvent@@PAPAU12@00@Z ; std::_Copy_memmove<NMotionEvent::SMotionEventData * *,NMotionEvent::SMotionEventData * *>
PUBLIC	??$_Copy_memmove_tail@PAPAVCRaceMotionData@@@std@@YAPAPAVCRaceMotionData@@QBDQAPAV1@II@Z ; std::_Copy_memmove_tail<CRaceMotionData * *>
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBMUCDynamicSphereInstance@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMUCDynamicSphereInstance@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBMUCDynamicSphereInstance@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBMUCDynamicSphereInstance@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,CDynamicSphereInstance> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<float const ,CDynamicSphereInstance>,void *> > >
PUBLIC	??$_Copy_memmove_tail@PAPAUSMotionEventData@NMotionEvent@@@std@@YAPAPAUSMotionEventData@NMotionEvent@@QBDQAPAU12@II@Z ; std::_Copy_memmove_tail<NMotionEvent::SMotionEventData * *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_7SCollisionData@NRaceData@@6B@		; NRaceData::SCollisionData::`vftable'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position@	; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R4SCollisionData@NRaceData@@6B@		; NRaceData::SCollisionData::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUSCollisionData@NRaceData@@@8		; NRaceData::SCollisionData `RTTI Type Descriptor'
PUBLIC	??_R3SCollisionData@NRaceData@@8		; NRaceData::SCollisionData::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SCollisionData@NRaceData@@8		; NRaceData::SCollisionData::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SCollisionData@NRaceData@@8	; NRaceData::SCollisionData::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool
PUBLIC	?ms_singleton@?$CSingleton@VCEffectManager@@@@0PAVCEffectManager@@A ; CSingleton<CEffectManager>::ms_singleton
PUBLIC	?ms_singleton@?$CSingleton@VCFlyingManager@@@@0PAVCFlyingManager@@A ; CSingleton<CFlyingManager>::ms_singleton
PUBLIC	??_7SMotionEventData@NMotionEvent@@6B@		; NMotionEvent::SMotionEventData::`vftable'
PUBLIC	??_7SMotionEventDataScreenWaving@NMotionEvent@@6B@ ; NMotionEvent::SMotionEventDataScreenWaving::`vftable'
PUBLIC	??_C@_01EEMJAFIK@?6@				; `string'
PUBLIC	??_C@_0BJ@JOLNCGNF@DuringTime?5?5?5?5?5?5?5?5?5?5?5?$CFf?6@ ; `string'
PUBLIC	??_C@_0BJ@FEKHNOBC@Power?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0BJ@KLBKOEEF@AffectingRange?5?5?5?5?5?5?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0L@KJGFIEPL@duringtime@			; `string'
PUBLIC	??_C@_05PLIADJJL@power@				; `string'
PUBLIC	??_C@_0P@JIGGKKJB@affectingrange@		; `string'
PUBLIC	??_7SMotionEventDataEffect@NMotionEvent@@6B@	; NMotionEvent::SMotionEventDataEffect::`vftable'
PUBLIC	??_C@_0BJ@EFAIBPHL@IndependentFlag?5?5?5?5?5?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0BJ@LAKEIKLD@AttachingEnable?5?5?5?5?5?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0BL@PLABIPOF@AttachingBoneName?5?5?5?5?$CC?$CFs?$CC?6@ ; `string'
PUBLIC	??_C@_0BJ@NDNPFOND@FollowingEnable?5?5?5?5?5?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0BL@OHMOOLCL@EffectFileName?5?5?5?5?5?5?5?$CC?$CFs?$CC?6@ ; `string'
PUBLIC	??_C@_0BP@CFDDPJAK@EffectPosition?5?5?5?5?5?5?5?$CFf?5?$CFf?5?$CFf?6@ ; `string'
PUBLIC	??_C@_0BA@MCOMBMGO@independentflag@		; `string'
PUBLIC	??_C@_0BA@HJAHPMOG@attachingenable@		; `string'
PUBLIC	??_C@_0BC@FCIOLNPK@attachingbonename@		; `string'
PUBLIC	??_C@_0P@MBGGNLC@effectfilename@		; `string'
PUBLIC	??_C@_0P@PMGDNJPL@effectposition@		; `string'
PUBLIC	??_C@_0BA@DEKLACIK@followingenable@		; `string'
PUBLIC	??_7SMotionEventDataEffectToTarget@NMotionEvent@@6B@ ; NMotionEvent::SMotionEventDataEffectToTarget::`vftable'
PUBLIC	??_C@_0BJ@ECHDEMEM@FishingEffectFlag?5?5?5?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0BC@PGIDKNAJ@fishingeffectflag@		; `string'
PUBLIC	??_7SMotionEventDataFly@NMotionEvent@@6B@	; NMotionEvent::SMotionEventDataFly::`vftable'
PUBLIC	??_C@_0BI@MFBAEGBD@FlyFileName?5?5?5?5?5?5?5?$CC?$CFs?$CC?6@ ; `string'
PUBLIC	??_C@_0BM@LNHEOAC@FlyPosition?5?5?5?5?5?5?5?$CFf?5?$CFf?5?$CFf?6@ ; `string'
PUBLIC	??_C@_0M@BKDIDPMI@flyfilename@			; `string'
PUBLIC	??_C@_0M@OKENILIB@flyposition@			; `string'
PUBLIC	??_7SMotionEventDataAttack@NMotionEvent@@6B@	; NMotionEvent::SMotionEventDataAttack::`vftable'
PUBLIC	??_C@_0BJ@DAILMIKJ@EnableHitProcess?5?5?5?5?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0BB@NODGLCEN@enablehitprocess@		; `string'
PUBLIC	??_7SMotionEventDataSound@NMotionEvent@@6B@	; NMotionEvent::SMotionEventDataSound::`vftable'
PUBLIC	??_C@_0BL@OCKKLAAD@SoundFileName?5?5?5?5?5?5?5?5?$CC?$CFs?$CC?6@ ; `string'
PUBLIC	??_C@_0O@POGBJFAA@soundfilename@		; `string'
PUBLIC	??_7SMotionEventDataCharacterShow@NMotionEvent@@6B@ ; NMotionEvent::SMotionEventDataCharacterShow::`vftable'
PUBLIC	??_7SMotionEventDataCharacterHide@NMotionEvent@@6B@ ; NMotionEvent::SMotionEventDataCharacterHide::`vftable'
PUBLIC	??_7SMotionEventDataWarp@NMotionEvent@@6B@	; NMotionEvent::SMotionEventDataWarp::`vftable'
PUBLIC	?ms_kPool@CRaceMotionData@@1V?$CDynamicPool@VCRaceMotionData@@@@A ; CRaceMotionData::ms_kPool
PUBLIC	??_7CRaceMotionData@@6B@			; CRaceMotionData::`vftable'
PUBLIC	??_C@_0CL@NGIMIHAA@CRaceMotionData?3?3SetName?5?9?5UNKN@ ; `string'
PUBLIC	??_C@_0P@IGAOIDID@motionfilename@		; `string'
PUBLIC	??_C@_0P@CAAIIAIN@motionduration@		; `string'
PUBLIC	??_C@_0N@JBNPINGA@accumulation@			; `string'
PUBLIC	??_C@_0EP@FGBECHEA@CRaceMotioNData?3?3LoadMotionData@ ; `string'
PUBLIC	??_C@_0P@BEGKENNC@comboinputdata@		; `string'
PUBLIC	??_C@_0N@IKJEINLI@preinputtime@			; `string'
PUBLIC	??_C@_0BA@OKILMLFK@directinputtime@		; `string'
PUBLIC	??_C@_0P@PPFBMGLB@inputlimittime@		; `string'
PUBLIC	??_C@_0O@NGMBMFEH@attackingdata@		; `string'
PUBLIC	??_C@_08BMIAMBLK@loopdata@			; `string'
PUBLIC	??_C@_0BA@HKGDAAAM@motionloopcount@		; `string'
PUBLIC	??_C@_0BB@LFNJMKIF@loopcancelenable@		; `string'
PUBLIC	??_C@_0O@FAMGINHI@loopstarttime@		; `string'
PUBLIC	??_C@_0M@HIAPALPD@loopendtime@			; `string'
PUBLIC	??_C@_0BA@LAEICHPP@motioneventdata@		; `string'
PUBLIC	??_C@_0BF@KNDELFNF@motioneventdatacount@	; `string'
PUBLIC	??_C@_05GFHEIIDD@event@				; `string'
PUBLIC	??_C@_0BA@CGGAKCNF@motioneventtype@		; `string'
PUBLIC	??_C@_0N@NHFBHOF@startingtime@			; `string'
PUBLIC	??_C@_04NMMFEKGF@?4mss@				; `string'
PUBLIC	??_C@_06PBLIODKG@sound?1@			; `string'
PUBLIC	??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@	; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4SMotionEventData@NMotionEvent@@6B@		; NMotionEvent::SMotionEventData::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUSMotionEventData@NMotionEvent@@@8	; NMotionEvent::SMotionEventData `RTTI Type Descriptor'
PUBLIC	??_R3SMotionEventData@NMotionEvent@@8		; NMotionEvent::SMotionEventData::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SMotionEventData@NMotionEvent@@8		; NMotionEvent::SMotionEventData::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SMotionEventData@NMotionEvent@@8	; NMotionEvent::SMotionEventData::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4SMotionEventDataScreenWaving@NMotionEvent@@6B@ ; NMotionEvent::SMotionEventDataScreenWaving::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUSMotionEventDataScreenWaving@NMotionEvent@@@8 ; NMotionEvent::SMotionEventDataScreenWaving `RTTI Type Descriptor'
PUBLIC	??_R3SMotionEventDataScreenWaving@NMotionEvent@@8 ; NMotionEvent::SMotionEventDataScreenWaving::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SMotionEventDataScreenWaving@NMotionEvent@@8 ; NMotionEvent::SMotionEventDataScreenWaving::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SMotionEventDataScreenWaving@NMotionEvent@@8 ; NMotionEvent::SMotionEventDataScreenWaving::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4SMotionEventDataEffect@NMotionEvent@@6B@	; NMotionEvent::SMotionEventDataEffect::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUSMotionEventDataEffect@NMotionEvent@@@8	; NMotionEvent::SMotionEventDataEffect `RTTI Type Descriptor'
PUBLIC	??_R3SMotionEventDataEffect@NMotionEvent@@8	; NMotionEvent::SMotionEventDataEffect::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SMotionEventDataEffect@NMotionEvent@@8	; NMotionEvent::SMotionEventDataEffect::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SMotionEventDataEffect@NMotionEvent@@8 ; NMotionEvent::SMotionEventDataEffect::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4SMotionEventDataEffectToTarget@NMotionEvent@@6B@ ; NMotionEvent::SMotionEventDataEffectToTarget::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUSMotionEventDataEffectToTarget@NMotionEvent@@@8 ; NMotionEvent::SMotionEventDataEffectToTarget `RTTI Type Descriptor'
PUBLIC	??_R3SMotionEventDataEffectToTarget@NMotionEvent@@8 ; NMotionEvent::SMotionEventDataEffectToTarget::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SMotionEventDataEffectToTarget@NMotionEvent@@8 ; NMotionEvent::SMotionEventDataEffectToTarget::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SMotionEventDataEffectToTarget@NMotionEvent@@8 ; NMotionEvent::SMotionEventDataEffectToTarget::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4SMotionEventDataFly@NMotionEvent@@6B@	; NMotionEvent::SMotionEventDataFly::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUSMotionEventDataFly@NMotionEvent@@@8	; NMotionEvent::SMotionEventDataFly `RTTI Type Descriptor'
PUBLIC	??_R3SMotionEventDataFly@NMotionEvent@@8	; NMotionEvent::SMotionEventDataFly::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SMotionEventDataFly@NMotionEvent@@8	; NMotionEvent::SMotionEventDataFly::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SMotionEventDataFly@NMotionEvent@@8 ; NMotionEvent::SMotionEventDataFly::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4SMotionEventDataAttack@NMotionEvent@@6B@	; NMotionEvent::SMotionEventDataAttack::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUSMotionEventDataAttack@NMotionEvent@@@8	; NMotionEvent::SMotionEventDataAttack `RTTI Type Descriptor'
PUBLIC	??_R3SMotionEventDataAttack@NMotionEvent@@8	; NMotionEvent::SMotionEventDataAttack::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SMotionEventDataAttack@NMotionEvent@@8	; NMotionEvent::SMotionEventDataAttack::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SMotionEventDataAttack@NMotionEvent@@8 ; NMotionEvent::SMotionEventDataAttack::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4SMotionEventDataSound@NMotionEvent@@6B@	; NMotionEvent::SMotionEventDataSound::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUSMotionEventDataSound@NMotionEvent@@@8	; NMotionEvent::SMotionEventDataSound `RTTI Type Descriptor'
PUBLIC	??_R3SMotionEventDataSound@NMotionEvent@@8	; NMotionEvent::SMotionEventDataSound::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SMotionEventDataSound@NMotionEvent@@8	; NMotionEvent::SMotionEventDataSound::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SMotionEventDataSound@NMotionEvent@@8 ; NMotionEvent::SMotionEventDataSound::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4SMotionEventDataCharacterShow@NMotionEvent@@6B@ ; NMotionEvent::SMotionEventDataCharacterShow::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUSMotionEventDataCharacterShow@NMotionEvent@@@8 ; NMotionEvent::SMotionEventDataCharacterShow `RTTI Type Descriptor'
PUBLIC	??_R3SMotionEventDataCharacterShow@NMotionEvent@@8 ; NMotionEvent::SMotionEventDataCharacterShow::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SMotionEventDataCharacterShow@NMotionEvent@@8 ; NMotionEvent::SMotionEventDataCharacterShow::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SMotionEventDataCharacterShow@NMotionEvent@@8 ; NMotionEvent::SMotionEventDataCharacterShow::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4SMotionEventDataCharacterHide@NMotionEvent@@6B@ ; NMotionEvent::SMotionEventDataCharacterHide::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUSMotionEventDataCharacterHide@NMotionEvent@@@8 ; NMotionEvent::SMotionEventDataCharacterHide `RTTI Type Descriptor'
PUBLIC	??_R3SMotionEventDataCharacterHide@NMotionEvent@@8 ; NMotionEvent::SMotionEventDataCharacterHide::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SMotionEventDataCharacterHide@NMotionEvent@@8 ; NMotionEvent::SMotionEventDataCharacterHide::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SMotionEventDataCharacterHide@NMotionEvent@@8 ; NMotionEvent::SMotionEventDataCharacterHide::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4SMotionEventDataWarp@NMotionEvent@@6B@	; NMotionEvent::SMotionEventDataWarp::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUSMotionEventDataWarp@NMotionEvent@@@8	; NMotionEvent::SMotionEventDataWarp `RTTI Type Descriptor'
PUBLIC	??_R3SMotionEventDataWarp@NMotionEvent@@8	; NMotionEvent::SMotionEventDataWarp::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SMotionEventDataWarp@NMotionEvent@@8	; NMotionEvent::SMotionEventDataWarp::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SMotionEventDataWarp@NMotionEvent@@8 ; NMotionEvent::SMotionEventDataWarp::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CRaceMotionData@@6B@			; CRaceMotionData::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCRaceMotionData@@@8			; CRaceMotionData `RTTI Type Descriptor'
PUBLIC	??_R3CRaceMotionData@@8				; CRaceMotionData::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CRaceMotionData@@8				; CRaceMotionData::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CRaceMotionData@@8		; CRaceMotionData::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@3f800000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	___std_terminate:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_atof:PROC
EXTRN	___std_find_last_trivial_1@12:PROC
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?TraceError@@YAXPBDZZ:PROC			; TraceError
EXTRN	?GetCaseCRC32@@YAKPBDI@Z:PROC			; GetCaseCRC32
EXTRN	?StringPath@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; StringPath
EXTRN	?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ:PROC		; PrintfTabs
EXTRN	?Cache@CTextFileLoader@@SAPAV1@PBD@Z:PROC	; CTextFileLoader::Cache
EXTRN	?IsEmpty@CTextFileLoader@@QAE_NXZ:PROC		; CTextFileLoader::IsEmpty
EXTRN	?SetTop@CTextFileLoader@@QAEXXZ:PROC		; CTextFileLoader::SetTop
EXTRN	?GetChildNodeCount@CTextFileLoader@@QAEKXZ:PROC	; CTextFileLoader::GetChildNodeCount
EXTRN	?SetChildNode@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@Z:PROC ; CTextFileLoader::SetChildNode
EXTRN	?SetChildNode@CTextFileLoader@@QAEHK@Z:PROC	; CTextFileLoader::SetChildNode
EXTRN	?SetParentNode@CTextFileLoader@@QAEHXZ:PROC	; CTextFileLoader::SetParentNode
EXTRN	?GetCurrentNodeName@CTextFileLoader@@QAEHPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; CTextFileLoader::GetCurrentNodeName
EXTRN	?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z:PROC ; CTextFileLoader::GetTokenVector
EXTRN	?GetTokenBoolean@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAH@Z:PROC ; CTextFileLoader::GetTokenBoolean
EXTRN	?GetTokenInteger@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAH@Z:PROC ; CTextFileLoader::GetTokenInteger
EXTRN	?GetTokenDoubleWord@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAK@Z:PROC ; CTextFileLoader::GetTokenDoubleWord
EXTRN	?GetTokenFloat@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAM@Z:PROC ; CTextFileLoader::GetTokenFloat
EXTRN	?GetTokenPosition@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXVECTOR3@@@Z:PROC ; CTextFileLoader::GetTokenPosition
EXTRN	?GetTokenString@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV23@@Z:PROC ; CTextFileLoader::GetTokenString
EXTRN	??_ESCollisionData@NRaceData@@UAEPAXI@Z:PROC	; NRaceData::SCollisionData::`vector deleting destructor'
EXTRN	?SaveAttackData@NRaceData@@YAXPAU_iobuf@@HABUSAttackData@1@@Z:PROC ; NRaceData::SaveAttackData
EXTRN	?SaveCollisionData@NRaceData@@YAXPAU_iobuf@@HABUSCollisionData@1@@Z:PROC ; NRaceData::SaveCollisionData
EXTRN	?LoadAttackData@NRaceData@@YAHAAVCTextFileLoader@@PAUSAttackData@1@@Z:PROC ; NRaceData::LoadAttackData
EXTRN	?LoadMotionAttackData@NRaceData@@YAHAAVCTextFileLoader@@PAUSMotionAttackData@1@@Z:PROC ; NRaceData::LoadMotionAttackData
EXTRN	?LoadCollisionData@NRaceData@@YAHAAVCTextFileLoader@@PAUSCollisionData@1@@Z:PROC ; NRaceData::LoadCollisionData
EXTRN	?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z:PROC ; NSound::LoadSoundInformationPiece
EXTRN	?DataToInstance@NSound@@YAXABV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@PAV?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@3@@Z:PROC ; NSound::DataToInstance
EXTRN	?RegisterEffect@CEffectManager@@QAEHPBD_N1@Z:PROC ; CEffectManager::RegisterEffect
EXTRN	?RegisterFlyingData@CFlyingManager@@QAE_NPBD@Z:PROC ; CFlyingManager::RegisterFlyingData
EXTRN	??_ESMotionEventData@NMotionEvent@@UAEPAXI@Z:PROC ; NMotionEvent::SMotionEventData::`vector deleting destructor'
EXTRN	??_ESMotionEventDataScreenWaving@NMotionEvent@@UAEPAXI@Z:PROC ; NMotionEvent::SMotionEventDataScreenWaving::`vector deleting destructor'
EXTRN	??_ESMotionEventDataEffect@NMotionEvent@@UAEPAXI@Z:PROC ; NMotionEvent::SMotionEventDataEffect::`vector deleting destructor'
EXTRN	??_ESMotionEventDataEffectToTarget@NMotionEvent@@UAEPAXI@Z:PROC ; NMotionEvent::SMotionEventDataEffectToTarget::`vector deleting destructor'
EXTRN	??_ESMotionEventDataFly@NMotionEvent@@UAEPAXI@Z:PROC ; NMotionEvent::SMotionEventDataFly::`vector deleting destructor'
EXTRN	??_ESMotionEventDataAttack@NMotionEvent@@UAEPAXI@Z:PROC ; NMotionEvent::SMotionEventDataAttack::`vector deleting destructor'
EXTRN	??_ESMotionEventDataSound@NMotionEvent@@UAEPAXI@Z:PROC ; NMotionEvent::SMotionEventDataSound::`vector deleting destructor'
EXTRN	??_ESMotionEventDataCharacterShow@NMotionEvent@@UAEPAXI@Z:PROC ; NMotionEvent::SMotionEventDataCharacterShow::`vector deleting destructor'
EXTRN	??_ESMotionEventDataCharacterHide@NMotionEvent@@UAEPAXI@Z:PROC ; NMotionEvent::SMotionEventDataCharacterHide::`vector deleting destructor'
EXTRN	??_ESMotionEventDataWarp@NMotionEvent@@UAEPAXI@Z:PROC ; NMotionEvent::SMotionEventDataWarp::`vector deleting destructor'
EXTRN	??_ECRaceMotionData@@UAEPAXI@Z:PROC		; CRaceMotionData::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__ftol3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	?g_fGameFPS@@3MA:DWORD				; g_fGameFPS
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCEffectManager@@@@0PAVCEffectManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCEffectManager@@@@0PAVCEffectManager@@A DD 01H DUP (?) ; CSingleton<CEffectManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCFlyingManager@@@@0PAVCFlyingManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCFlyingManager@@@@0PAVCFlyingManager@@A DD 01H DUP (?) ; CSingleton<CFlyingManager>::ms_singleton
_BSS	ENDS
CRT$XCU	SEGMENT
??ms_kPool$initializer$@CRaceMotionData@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@CRaceMotionData@@1V?$CDynamicPool@VCRaceMotionData@@@@A@@YAXXZ ; ??ms_kPool$initializer$@CRaceMotionData@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CRaceMotionData@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CRaceMotionData@@8 DD FLAT:??_R0?AVCRaceMotionData@@@8 ; CRaceMotionData::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CRaceMotionData@@8
rdata$r	ENDS
;	COMDAT ??_R2CRaceMotionData@@8
rdata$r	SEGMENT
??_R2CRaceMotionData@@8 DD FLAT:??_R1A@?0A@EA@CRaceMotionData@@8 ; CRaceMotionData::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CRaceMotionData@@8
rdata$r	SEGMENT
??_R3CRaceMotionData@@8 DD 00H				; CRaceMotionData::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CRaceMotionData@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCRaceMotionData@@@8
data$rs	SEGMENT
??_R0?AVCRaceMotionData@@@8 DD FLAT:??_7type_info@@6B@	; CRaceMotionData `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCRaceMotionData@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CRaceMotionData@@6B@
rdata$r	SEGMENT
??_R4CRaceMotionData@@6B@ DD 00H			; CRaceMotionData::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCRaceMotionData@@@8
	DD	FLAT:??_R3CRaceMotionData@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@SMotionEventDataWarp@NMotionEvent@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SMotionEventDataWarp@NMotionEvent@@8 DD FLAT:??_R0?AUSMotionEventDataWarp@NMotionEvent@@@8 ; NMotionEvent::SMotionEventDataWarp::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SMotionEventDataWarp@NMotionEvent@@8
rdata$r	ENDS
;	COMDAT ??_R2SMotionEventDataWarp@NMotionEvent@@8
rdata$r	SEGMENT
??_R2SMotionEventDataWarp@NMotionEvent@@8 DD FLAT:??_R1A@?0A@EA@SMotionEventDataWarp@NMotionEvent@@8 ; NMotionEvent::SMotionEventDataWarp::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@SMotionEventData@NMotionEvent@@8
rdata$r	ENDS
;	COMDAT ??_R3SMotionEventDataWarp@NMotionEvent@@8
rdata$r	SEGMENT
??_R3SMotionEventDataWarp@NMotionEvent@@8 DD 00H	; NMotionEvent::SMotionEventDataWarp::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2SMotionEventDataWarp@NMotionEvent@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUSMotionEventDataWarp@NMotionEvent@@@8
data$rs	SEGMENT
??_R0?AUSMotionEventDataWarp@NMotionEvent@@@8 DD FLAT:??_7type_info@@6B@ ; NMotionEvent::SMotionEventDataWarp `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUSMotionEventDataWarp@NMotionEvent@@', 00H
data$rs	ENDS
;	COMDAT ??_R4SMotionEventDataWarp@NMotionEvent@@6B@
rdata$r	SEGMENT
??_R4SMotionEventDataWarp@NMotionEvent@@6B@ DD 00H	; NMotionEvent::SMotionEventDataWarp::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUSMotionEventDataWarp@NMotionEvent@@@8
	DD	FLAT:??_R3SMotionEventDataWarp@NMotionEvent@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@SMotionEventDataCharacterHide@NMotionEvent@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SMotionEventDataCharacterHide@NMotionEvent@@8 DD FLAT:??_R0?AUSMotionEventDataCharacterHide@NMotionEvent@@@8 ; NMotionEvent::SMotionEventDataCharacterHide::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SMotionEventDataCharacterHide@NMotionEvent@@8
rdata$r	ENDS
;	COMDAT ??_R2SMotionEventDataCharacterHide@NMotionEvent@@8
rdata$r	SEGMENT
??_R2SMotionEventDataCharacterHide@NMotionEvent@@8 DD FLAT:??_R1A@?0A@EA@SMotionEventDataCharacterHide@NMotionEvent@@8 ; NMotionEvent::SMotionEventDataCharacterHide::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@SMotionEventData@NMotionEvent@@8
rdata$r	ENDS
;	COMDAT ??_R3SMotionEventDataCharacterHide@NMotionEvent@@8
rdata$r	SEGMENT
??_R3SMotionEventDataCharacterHide@NMotionEvent@@8 DD 00H ; NMotionEvent::SMotionEventDataCharacterHide::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2SMotionEventDataCharacterHide@NMotionEvent@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUSMotionEventDataCharacterHide@NMotionEvent@@@8
data$rs	SEGMENT
??_R0?AUSMotionEventDataCharacterHide@NMotionEvent@@@8 DD FLAT:??_7type_info@@6B@ ; NMotionEvent::SMotionEventDataCharacterHide `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUSMotionEventDataCharacterHide@NMotionEvent@@', 00H
data$rs	ENDS
;	COMDAT ??_R4SMotionEventDataCharacterHide@NMotionEvent@@6B@
rdata$r	SEGMENT
??_R4SMotionEventDataCharacterHide@NMotionEvent@@6B@ DD 00H ; NMotionEvent::SMotionEventDataCharacterHide::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUSMotionEventDataCharacterHide@NMotionEvent@@@8
	DD	FLAT:??_R3SMotionEventDataCharacterHide@NMotionEvent@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@SMotionEventDataCharacterShow@NMotionEvent@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SMotionEventDataCharacterShow@NMotionEvent@@8 DD FLAT:??_R0?AUSMotionEventDataCharacterShow@NMotionEvent@@@8 ; NMotionEvent::SMotionEventDataCharacterShow::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SMotionEventDataCharacterShow@NMotionEvent@@8
rdata$r	ENDS
;	COMDAT ??_R2SMotionEventDataCharacterShow@NMotionEvent@@8
rdata$r	SEGMENT
??_R2SMotionEventDataCharacterShow@NMotionEvent@@8 DD FLAT:??_R1A@?0A@EA@SMotionEventDataCharacterShow@NMotionEvent@@8 ; NMotionEvent::SMotionEventDataCharacterShow::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@SMotionEventData@NMotionEvent@@8
rdata$r	ENDS
;	COMDAT ??_R3SMotionEventDataCharacterShow@NMotionEvent@@8
rdata$r	SEGMENT
??_R3SMotionEventDataCharacterShow@NMotionEvent@@8 DD 00H ; NMotionEvent::SMotionEventDataCharacterShow::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2SMotionEventDataCharacterShow@NMotionEvent@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUSMotionEventDataCharacterShow@NMotionEvent@@@8
data$rs	SEGMENT
??_R0?AUSMotionEventDataCharacterShow@NMotionEvent@@@8 DD FLAT:??_7type_info@@6B@ ; NMotionEvent::SMotionEventDataCharacterShow `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUSMotionEventDataCharacterShow@NMotionEvent@@', 00H
data$rs	ENDS
;	COMDAT ??_R4SMotionEventDataCharacterShow@NMotionEvent@@6B@
rdata$r	SEGMENT
??_R4SMotionEventDataCharacterShow@NMotionEvent@@6B@ DD 00H ; NMotionEvent::SMotionEventDataCharacterShow::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUSMotionEventDataCharacterShow@NMotionEvent@@@8
	DD	FLAT:??_R3SMotionEventDataCharacterShow@NMotionEvent@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@SMotionEventDataSound@NMotionEvent@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SMotionEventDataSound@NMotionEvent@@8 DD FLAT:??_R0?AUSMotionEventDataSound@NMotionEvent@@@8 ; NMotionEvent::SMotionEventDataSound::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SMotionEventDataSound@NMotionEvent@@8
rdata$r	ENDS
;	COMDAT ??_R2SMotionEventDataSound@NMotionEvent@@8
rdata$r	SEGMENT
??_R2SMotionEventDataSound@NMotionEvent@@8 DD FLAT:??_R1A@?0A@EA@SMotionEventDataSound@NMotionEvent@@8 ; NMotionEvent::SMotionEventDataSound::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@SMotionEventData@NMotionEvent@@8
rdata$r	ENDS
;	COMDAT ??_R3SMotionEventDataSound@NMotionEvent@@8
rdata$r	SEGMENT
??_R3SMotionEventDataSound@NMotionEvent@@8 DD 00H	; NMotionEvent::SMotionEventDataSound::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2SMotionEventDataSound@NMotionEvent@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUSMotionEventDataSound@NMotionEvent@@@8
data$rs	SEGMENT
??_R0?AUSMotionEventDataSound@NMotionEvent@@@8 DD FLAT:??_7type_info@@6B@ ; NMotionEvent::SMotionEventDataSound `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUSMotionEventDataSound@NMotionEvent@@', 00H
data$rs	ENDS
;	COMDAT ??_R4SMotionEventDataSound@NMotionEvent@@6B@
rdata$r	SEGMENT
??_R4SMotionEventDataSound@NMotionEvent@@6B@ DD 00H	; NMotionEvent::SMotionEventDataSound::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUSMotionEventDataSound@NMotionEvent@@@8
	DD	FLAT:??_R3SMotionEventDataSound@NMotionEvent@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@SMotionEventDataAttack@NMotionEvent@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SMotionEventDataAttack@NMotionEvent@@8 DD FLAT:??_R0?AUSMotionEventDataAttack@NMotionEvent@@@8 ; NMotionEvent::SMotionEventDataAttack::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SMotionEventDataAttack@NMotionEvent@@8
rdata$r	ENDS
;	COMDAT ??_R2SMotionEventDataAttack@NMotionEvent@@8
rdata$r	SEGMENT
??_R2SMotionEventDataAttack@NMotionEvent@@8 DD FLAT:??_R1A@?0A@EA@SMotionEventDataAttack@NMotionEvent@@8 ; NMotionEvent::SMotionEventDataAttack::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@SMotionEventData@NMotionEvent@@8
rdata$r	ENDS
;	COMDAT ??_R3SMotionEventDataAttack@NMotionEvent@@8
rdata$r	SEGMENT
??_R3SMotionEventDataAttack@NMotionEvent@@8 DD 00H	; NMotionEvent::SMotionEventDataAttack::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2SMotionEventDataAttack@NMotionEvent@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUSMotionEventDataAttack@NMotionEvent@@@8
data$rs	SEGMENT
??_R0?AUSMotionEventDataAttack@NMotionEvent@@@8 DD FLAT:??_7type_info@@6B@ ; NMotionEvent::SMotionEventDataAttack `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUSMotionEventDataAttack@NMotionEvent@@', 00H
data$rs	ENDS
;	COMDAT ??_R4SMotionEventDataAttack@NMotionEvent@@6B@
rdata$r	SEGMENT
??_R4SMotionEventDataAttack@NMotionEvent@@6B@ DD 00H	; NMotionEvent::SMotionEventDataAttack::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUSMotionEventDataAttack@NMotionEvent@@@8
	DD	FLAT:??_R3SMotionEventDataAttack@NMotionEvent@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@SMotionEventDataFly@NMotionEvent@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SMotionEventDataFly@NMotionEvent@@8 DD FLAT:??_R0?AUSMotionEventDataFly@NMotionEvent@@@8 ; NMotionEvent::SMotionEventDataFly::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SMotionEventDataFly@NMotionEvent@@8
rdata$r	ENDS
;	COMDAT ??_R2SMotionEventDataFly@NMotionEvent@@8
rdata$r	SEGMENT
??_R2SMotionEventDataFly@NMotionEvent@@8 DD FLAT:??_R1A@?0A@EA@SMotionEventDataFly@NMotionEvent@@8 ; NMotionEvent::SMotionEventDataFly::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@SMotionEventData@NMotionEvent@@8
rdata$r	ENDS
;	COMDAT ??_R3SMotionEventDataFly@NMotionEvent@@8
rdata$r	SEGMENT
??_R3SMotionEventDataFly@NMotionEvent@@8 DD 00H		; NMotionEvent::SMotionEventDataFly::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2SMotionEventDataFly@NMotionEvent@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUSMotionEventDataFly@NMotionEvent@@@8
data$rs	SEGMENT
??_R0?AUSMotionEventDataFly@NMotionEvent@@@8 DD FLAT:??_7type_info@@6B@ ; NMotionEvent::SMotionEventDataFly `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUSMotionEventDataFly@NMotionEvent@@', 00H
data$rs	ENDS
;	COMDAT ??_R4SMotionEventDataFly@NMotionEvent@@6B@
rdata$r	SEGMENT
??_R4SMotionEventDataFly@NMotionEvent@@6B@ DD 00H	; NMotionEvent::SMotionEventDataFly::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUSMotionEventDataFly@NMotionEvent@@@8
	DD	FLAT:??_R3SMotionEventDataFly@NMotionEvent@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@SMotionEventDataEffectToTarget@NMotionEvent@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SMotionEventDataEffectToTarget@NMotionEvent@@8 DD FLAT:??_R0?AUSMotionEventDataEffectToTarget@NMotionEvent@@@8 ; NMotionEvent::SMotionEventDataEffectToTarget::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SMotionEventDataEffectToTarget@NMotionEvent@@8
rdata$r	ENDS
;	COMDAT ??_R2SMotionEventDataEffectToTarget@NMotionEvent@@8
rdata$r	SEGMENT
??_R2SMotionEventDataEffectToTarget@NMotionEvent@@8 DD FLAT:??_R1A@?0A@EA@SMotionEventDataEffectToTarget@NMotionEvent@@8 ; NMotionEvent::SMotionEventDataEffectToTarget::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@SMotionEventData@NMotionEvent@@8
rdata$r	ENDS
;	COMDAT ??_R3SMotionEventDataEffectToTarget@NMotionEvent@@8
rdata$r	SEGMENT
??_R3SMotionEventDataEffectToTarget@NMotionEvent@@8 DD 00H ; NMotionEvent::SMotionEventDataEffectToTarget::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2SMotionEventDataEffectToTarget@NMotionEvent@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUSMotionEventDataEffectToTarget@NMotionEvent@@@8
data$rs	SEGMENT
??_R0?AUSMotionEventDataEffectToTarget@NMotionEvent@@@8 DD FLAT:??_7type_info@@6B@ ; NMotionEvent::SMotionEventDataEffectToTarget `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUSMotionEventDataEffectToTarget@NMotionEvent@@', 00H
data$rs	ENDS
;	COMDAT ??_R4SMotionEventDataEffectToTarget@NMotionEvent@@6B@
rdata$r	SEGMENT
??_R4SMotionEventDataEffectToTarget@NMotionEvent@@6B@ DD 00H ; NMotionEvent::SMotionEventDataEffectToTarget::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUSMotionEventDataEffectToTarget@NMotionEvent@@@8
	DD	FLAT:??_R3SMotionEventDataEffectToTarget@NMotionEvent@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@SMotionEventDataEffect@NMotionEvent@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SMotionEventDataEffect@NMotionEvent@@8 DD FLAT:??_R0?AUSMotionEventDataEffect@NMotionEvent@@@8 ; NMotionEvent::SMotionEventDataEffect::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SMotionEventDataEffect@NMotionEvent@@8
rdata$r	ENDS
;	COMDAT ??_R2SMotionEventDataEffect@NMotionEvent@@8
rdata$r	SEGMENT
??_R2SMotionEventDataEffect@NMotionEvent@@8 DD FLAT:??_R1A@?0A@EA@SMotionEventDataEffect@NMotionEvent@@8 ; NMotionEvent::SMotionEventDataEffect::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@SMotionEventData@NMotionEvent@@8
rdata$r	ENDS
;	COMDAT ??_R3SMotionEventDataEffect@NMotionEvent@@8
rdata$r	SEGMENT
??_R3SMotionEventDataEffect@NMotionEvent@@8 DD 00H	; NMotionEvent::SMotionEventDataEffect::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2SMotionEventDataEffect@NMotionEvent@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUSMotionEventDataEffect@NMotionEvent@@@8
data$rs	SEGMENT
??_R0?AUSMotionEventDataEffect@NMotionEvent@@@8 DD FLAT:??_7type_info@@6B@ ; NMotionEvent::SMotionEventDataEffect `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUSMotionEventDataEffect@NMotionEvent@@', 00H
data$rs	ENDS
;	COMDAT ??_R4SMotionEventDataEffect@NMotionEvent@@6B@
rdata$r	SEGMENT
??_R4SMotionEventDataEffect@NMotionEvent@@6B@ DD 00H	; NMotionEvent::SMotionEventDataEffect::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUSMotionEventDataEffect@NMotionEvent@@@8
	DD	FLAT:??_R3SMotionEventDataEffect@NMotionEvent@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@SMotionEventDataScreenWaving@NMotionEvent@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SMotionEventDataScreenWaving@NMotionEvent@@8 DD FLAT:??_R0?AUSMotionEventDataScreenWaving@NMotionEvent@@@8 ; NMotionEvent::SMotionEventDataScreenWaving::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SMotionEventDataScreenWaving@NMotionEvent@@8
rdata$r	ENDS
;	COMDAT ??_R2SMotionEventDataScreenWaving@NMotionEvent@@8
rdata$r	SEGMENT
??_R2SMotionEventDataScreenWaving@NMotionEvent@@8 DD FLAT:??_R1A@?0A@EA@SMotionEventDataScreenWaving@NMotionEvent@@8 ; NMotionEvent::SMotionEventDataScreenWaving::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@SMotionEventData@NMotionEvent@@8
rdata$r	ENDS
;	COMDAT ??_R3SMotionEventDataScreenWaving@NMotionEvent@@8
rdata$r	SEGMENT
??_R3SMotionEventDataScreenWaving@NMotionEvent@@8 DD 00H ; NMotionEvent::SMotionEventDataScreenWaving::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2SMotionEventDataScreenWaving@NMotionEvent@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUSMotionEventDataScreenWaving@NMotionEvent@@@8
data$rs	SEGMENT
??_R0?AUSMotionEventDataScreenWaving@NMotionEvent@@@8 DD FLAT:??_7type_info@@6B@ ; NMotionEvent::SMotionEventDataScreenWaving `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUSMotionEventDataScreenWaving@NMotionEvent@@', 00H
data$rs	ENDS
;	COMDAT ??_R4SMotionEventDataScreenWaving@NMotionEvent@@6B@
rdata$r	SEGMENT
??_R4SMotionEventDataScreenWaving@NMotionEvent@@6B@ DD 00H ; NMotionEvent::SMotionEventDataScreenWaving::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUSMotionEventDataScreenWaving@NMotionEvent@@@8
	DD	FLAT:??_R3SMotionEventDataScreenWaving@NMotionEvent@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@SMotionEventData@NMotionEvent@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SMotionEventData@NMotionEvent@@8 DD FLAT:??_R0?AUSMotionEventData@NMotionEvent@@@8 ; NMotionEvent::SMotionEventData::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SMotionEventData@NMotionEvent@@8
rdata$r	ENDS
;	COMDAT ??_R2SMotionEventData@NMotionEvent@@8
rdata$r	SEGMENT
??_R2SMotionEventData@NMotionEvent@@8 DD FLAT:??_R1A@?0A@EA@SMotionEventData@NMotionEvent@@8 ; NMotionEvent::SMotionEventData::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3SMotionEventData@NMotionEvent@@8
rdata$r	SEGMENT
??_R3SMotionEventData@NMotionEvent@@8 DD 00H		; NMotionEvent::SMotionEventData::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2SMotionEventData@NMotionEvent@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUSMotionEventData@NMotionEvent@@@8
data$rs	SEGMENT
??_R0?AUSMotionEventData@NMotionEvent@@@8 DD FLAT:??_7type_info@@6B@ ; NMotionEvent::SMotionEventData `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUSMotionEventData@NMotionEvent@@', 00H
data$rs	ENDS
;	COMDAT ??_R4SMotionEventData@NMotionEvent@@6B@
rdata$r	SEGMENT
??_R4SMotionEventData@NMotionEvent@@6B@ DD 00H		; NMotionEvent::SMotionEventData::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUSMotionEventData@NMotionEvent@@@8
	DD	FLAT:??_R3SMotionEventData@NMotionEvent@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@
CONST	SEGMENT
??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@ DB 'invalid vector subscri'
	DB	'pt', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_06PBLIODKG@sound?1@
CONST	SEGMENT
??_C@_06PBLIODKG@sound?1@ DB 'sound/', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NMMFEKGF@?4mss@
CONST	SEGMENT
??_C@_04NMMFEKGF@?4mss@ DB '.mss', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NHFBHOF@startingtime@
CONST	SEGMENT
??_C@_0N@NHFBHOF@startingtime@ DB 'startingtime', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@CGGAKCNF@motioneventtype@
CONST	SEGMENT
??_C@_0BA@CGGAKCNF@motioneventtype@ DB 'motioneventtype', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05GFHEIIDD@event@
CONST	SEGMENT
??_C@_05GFHEIIDD@event@ DB 'event', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KNDELFNF@motioneventdatacount@
CONST	SEGMENT
??_C@_0BF@KNDELFNF@motioneventdatacount@ DB 'motioneventdatacount', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LAEICHPP@motioneventdata@
CONST	SEGMENT
??_C@_0BA@LAEICHPP@motioneventdata@ DB 'motioneventdata', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HIAPALPD@loopendtime@
CONST	SEGMENT
??_C@_0M@HIAPALPD@loopendtime@ DB 'loopendtime', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FAMGINHI@loopstarttime@
CONST	SEGMENT
??_C@_0O@FAMGINHI@loopstarttime@ DB 'loopstarttime', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@LFNJMKIF@loopcancelenable@
CONST	SEGMENT
??_C@_0BB@LFNJMKIF@loopcancelenable@ DB 'loopcancelenable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HKGDAAAM@motionloopcount@
CONST	SEGMENT
??_C@_0BA@HKGDAAAM@motionloopcount@ DB 'motionloopcount', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08BMIAMBLK@loopdata@
CONST	SEGMENT
??_C@_08BMIAMBLK@loopdata@ DB 'loopdata', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NGMBMFEH@attackingdata@
CONST	SEGMENT
??_C@_0O@NGMBMFEH@attackingdata@ DB 'attackingdata', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PPFBMGLB@inputlimittime@
CONST	SEGMENT
??_C@_0P@PPFBMGLB@inputlimittime@ DB 'inputlimittime', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OKILMLFK@directinputtime@
CONST	SEGMENT
??_C@_0BA@OKILMLFK@directinputtime@ DB 'directinputtime', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IKJEINLI@preinputtime@
CONST	SEGMENT
??_C@_0N@IKJEINLI@preinputtime@ DB 'preinputtime', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BEGKENNC@comboinputdata@
CONST	SEGMENT
??_C@_0P@BEGKENNC@comboinputdata@ DB 'comboinputdata', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@FGBECHEA@CRaceMotioNData?3?3LoadMotionData@
CONST	SEGMENT
??_C@_0EP@FGBECHEA@CRaceMotioNData?3?3LoadMotionData@ DB 'CRaceMotioNData'
	DB	'::LoadMotionData : syntax error on accumulation, vector size '
	DB	'%d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JBNPINGA@accumulation@
CONST	SEGMENT
??_C@_0N@JBNPINGA@accumulation@ DB 'accumulation', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CAAIIAIN@motionduration@
CONST	SEGMENT
??_C@_0P@CAAIIAIN@motionduration@ DB 'motionduration', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IGAOIDID@motionfilename@
CONST	SEGMENT
??_C@_0P@IGAOIDID@motionfilename@ DB 'motionfilename', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@NGIMIHAA@CRaceMotionData?3?3SetName?5?9?5UNKN@
CONST	SEGMENT
??_C@_0CL@NGIMIHAA@CRaceMotionData?3?3SetName?5?9?5UNKN@ DB 'CRaceMotionD'
	DB	'ata::SetName - UNKNOWN NAME %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7CRaceMotionData@@6B@
CONST	SEGMENT
??_7CRaceMotionData@@6B@ DD FLAT:??_R4CRaceMotionData@@6B@ ; CRaceMotionData::`vftable'
	DD	FLAT:??_ECRaceMotionData@@UAEPAXI@Z
CONST	ENDS
_DATA	SEGMENT
?ms_kPool@CRaceMotionData@@1V?$CDynamicPool@VCRaceMotionData@@@@A DD FLAT:??_7?$CDynamicPool@VCRaceMotionData@@@@6B@ ; CRaceMotionData::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ??_7SMotionEventDataWarp@NMotionEvent@@6B@
CONST	SEGMENT
??_7SMotionEventDataWarp@NMotionEvent@@6B@ DD FLAT:??_R4SMotionEventDataWarp@NMotionEvent@@6B@ ; NMotionEvent::SMotionEventDataWarp::`vftable'
	DD	FLAT:??_ESMotionEventDataWarp@NMotionEvent@@UAEPAXI@Z
	DD	FLAT:?Save@SMotionEventDataWarp@NMotionEvent@@UAEXPAU_iobuf@@H@Z
	DD	FLAT:?Load@SMotionEventData@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z
CONST	ENDS
;	COMDAT ??_7SMotionEventDataCharacterHide@NMotionEvent@@6B@
CONST	SEGMENT
??_7SMotionEventDataCharacterHide@NMotionEvent@@6B@ DD FLAT:??_R4SMotionEventDataCharacterHide@NMotionEvent@@6B@ ; NMotionEvent::SMotionEventDataCharacterHide::`vftable'
	DD	FLAT:??_ESMotionEventDataCharacterHide@NMotionEvent@@UAEPAXI@Z
	DD	FLAT:?Save@SMotionEventDataCharacterHide@NMotionEvent@@UAEXPAU_iobuf@@H@Z
	DD	FLAT:?Load@SMotionEventData@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z
CONST	ENDS
;	COMDAT ??_7SMotionEventDataCharacterShow@NMotionEvent@@6B@
CONST	SEGMENT
??_7SMotionEventDataCharacterShow@NMotionEvent@@6B@ DD FLAT:??_R4SMotionEventDataCharacterShow@NMotionEvent@@6B@ ; NMotionEvent::SMotionEventDataCharacterShow::`vftable'
	DD	FLAT:??_ESMotionEventDataCharacterShow@NMotionEvent@@UAEPAXI@Z
	DD	FLAT:?Save@SMotionEventDataCharacterShow@NMotionEvent@@UAEXPAU_iobuf@@H@Z
	DD	FLAT:?Load@SMotionEventData@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@POGBJFAA@soundfilename@
CONST	SEGMENT
??_C@_0O@POGBJFAA@soundfilename@ DB 'soundfilename', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@OCKKLAAD@SoundFileName?5?5?5?5?5?5?5?5?$CC?$CFs?$CC?6@
CONST	SEGMENT
??_C@_0BL@OCKKLAAD@SoundFileName?5?5?5?5?5?5?5?5?$CC?$CFs?$CC?6@ DB 'Soun'
	DB	'dFileName        "%s"', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_7SMotionEventDataSound@NMotionEvent@@6B@
CONST	SEGMENT
??_7SMotionEventDataSound@NMotionEvent@@6B@ DD FLAT:??_R4SMotionEventDataSound@NMotionEvent@@6B@ ; NMotionEvent::SMotionEventDataSound::`vftable'
	DD	FLAT:??_ESMotionEventDataSound@NMotionEvent@@UAEPAXI@Z
	DD	FLAT:?Save@SMotionEventDataSound@NMotionEvent@@UAEXPAU_iobuf@@H@Z
	DD	FLAT:?Load@SMotionEventDataSound@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z
CONST	ENDS
;	COMDAT ??_C@_0BB@NODGLCEN@enablehitprocess@
CONST	SEGMENT
??_C@_0BB@NODGLCEN@enablehitprocess@ DB 'enablehitprocess', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DAILMIKJ@EnableHitProcess?5?5?5?5?5?$CFd?6@
CONST	SEGMENT
??_C@_0BJ@DAILMIKJ@EnableHitProcess?5?5?5?5?5?$CFd?6@ DB 'EnableHitProces'
	DB	's     %d', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_7SMotionEventDataAttack@NMotionEvent@@6B@
CONST	SEGMENT
??_7SMotionEventDataAttack@NMotionEvent@@6B@ DD FLAT:??_R4SMotionEventDataAttack@NMotionEvent@@6B@ ; NMotionEvent::SMotionEventDataAttack::`vftable'
	DD	FLAT:??_ESMotionEventDataAttack@NMotionEvent@@UAEPAXI@Z
	DD	FLAT:?Save@SMotionEventDataAttack@NMotionEvent@@UAEXPAU_iobuf@@H@Z
	DD	FLAT:?Load@SMotionEventDataAttack@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z
CONST	ENDS
;	COMDAT ??_C@_0M@OKENILIB@flyposition@
CONST	SEGMENT
??_C@_0M@OKENILIB@flyposition@ DB 'flyposition', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BKDIDPMI@flyfilename@
CONST	SEGMENT
??_C@_0M@BKDIDPMI@flyfilename@ DB 'flyfilename', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@LNHEOAC@FlyPosition?5?5?5?5?5?5?5?$CFf?5?$CFf?5?$CFf?6@
CONST	SEGMENT
??_C@_0BM@LNHEOAC@FlyPosition?5?5?5?5?5?5?5?$CFf?5?$CFf?5?$CFf?6@ DB 'Fly'
	DB	'Position       %f %f %f', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@MFBAEGBD@FlyFileName?5?5?5?5?5?5?5?$CC?$CFs?$CC?6@
CONST	SEGMENT
??_C@_0BI@MFBAEGBD@FlyFileName?5?5?5?5?5?5?5?$CC?$CFs?$CC?6@ DB 'FlyFileN'
	DB	'ame       "%s"', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_7SMotionEventDataFly@NMotionEvent@@6B@
CONST	SEGMENT
??_7SMotionEventDataFly@NMotionEvent@@6B@ DD FLAT:??_R4SMotionEventDataFly@NMotionEvent@@6B@ ; NMotionEvent::SMotionEventDataFly::`vftable'
	DD	FLAT:??_ESMotionEventDataFly@NMotionEvent@@UAEPAXI@Z
	DD	FLAT:?Save@SMotionEventDataFly@NMotionEvent@@UAEXPAU_iobuf@@H@Z
	DD	FLAT:?Load@SMotionEventDataFly@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z
CONST	ENDS
;	COMDAT ??_C@_0BC@PGIDKNAJ@fishingeffectflag@
CONST	SEGMENT
??_C@_0BC@PGIDKNAJ@fishingeffectflag@ DB 'fishingeffectflag', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@ECHDEMEM@FishingEffectFlag?5?5?5?5?$CFd?6@
CONST	SEGMENT
??_C@_0BJ@ECHDEMEM@FishingEffectFlag?5?5?5?5?$CFd?6@ DB 'FishingEffectFla'
	DB	'g    %d', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_7SMotionEventDataEffectToTarget@NMotionEvent@@6B@
CONST	SEGMENT
??_7SMotionEventDataEffectToTarget@NMotionEvent@@6B@ DD FLAT:??_R4SMotionEventDataEffectToTarget@NMotionEvent@@6B@ ; NMotionEvent::SMotionEventDataEffectToTarget::`vftable'
	DD	FLAT:??_ESMotionEventDataEffectToTarget@NMotionEvent@@UAEPAXI@Z
	DD	FLAT:?Save@SMotionEventDataEffectToTarget@NMotionEvent@@UAEXPAU_iobuf@@H@Z
	DD	FLAT:?Load@SMotionEventDataEffectToTarget@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z
CONST	ENDS
;	COMDAT ??_C@_0BA@DEKLACIK@followingenable@
CONST	SEGMENT
??_C@_0BA@DEKLACIK@followingenable@ DB 'followingenable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PMGDNJPL@effectposition@
CONST	SEGMENT
??_C@_0P@PMGDNJPL@effectposition@ DB 'effectposition', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MBGGNLC@effectfilename@
CONST	SEGMENT
??_C@_0P@MBGGNLC@effectfilename@ DB 'effectfilename', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FCIOLNPK@attachingbonename@
CONST	SEGMENT
??_C@_0BC@FCIOLNPK@attachingbonename@ DB 'attachingbonename', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HJAHPMOG@attachingenable@
CONST	SEGMENT
??_C@_0BA@HJAHPMOG@attachingenable@ DB 'attachingenable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MCOMBMGO@independentflag@
CONST	SEGMENT
??_C@_0BA@MCOMBMGO@independentflag@ DB 'independentflag', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@CFDDPJAK@EffectPosition?5?5?5?5?5?5?5?$CFf?5?$CFf?5?$CFf?6@
CONST	SEGMENT
??_C@_0BP@CFDDPJAK@EffectPosition?5?5?5?5?5?5?5?$CFf?5?$CFf?5?$CFf?6@ DB 'E'
	DB	'ffectPosition       %f %f %f', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@OHMOOLCL@EffectFileName?5?5?5?5?5?5?5?$CC?$CFs?$CC?6@
CONST	SEGMENT
??_C@_0BL@OHMOOLCL@EffectFileName?5?5?5?5?5?5?5?$CC?$CFs?$CC?6@ DB 'Effec'
	DB	'tFileName       "%s"', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NDNPFOND@FollowingEnable?5?5?5?5?5?5?$CFd?6@
CONST	SEGMENT
??_C@_0BJ@NDNPFOND@FollowingEnable?5?5?5?5?5?5?$CFd?6@ DB 'FollowingEnabl'
	DB	'e      %d', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@PLABIPOF@AttachingBoneName?5?5?5?5?$CC?$CFs?$CC?6@
CONST	SEGMENT
??_C@_0BL@PLABIPOF@AttachingBoneName?5?5?5?5?$CC?$CFs?$CC?6@ DB 'Attachin'
	DB	'gBoneName    "%s"', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@LAKEIKLD@AttachingEnable?5?5?5?5?5?5?$CFd?6@
CONST	SEGMENT
??_C@_0BJ@LAKEIKLD@AttachingEnable?5?5?5?5?5?5?$CFd?6@ DB 'AttachingEnabl'
	DB	'e      %d', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@EFAIBPHL@IndependentFlag?5?5?5?5?5?5?$CFd?6@
CONST	SEGMENT
??_C@_0BJ@EFAIBPHL@IndependentFlag?5?5?5?5?5?5?$CFd?6@ DB 'IndependentFla'
	DB	'g      %d', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_7SMotionEventDataEffect@NMotionEvent@@6B@
CONST	SEGMENT
??_7SMotionEventDataEffect@NMotionEvent@@6B@ DD FLAT:??_R4SMotionEventDataEffect@NMotionEvent@@6B@ ; NMotionEvent::SMotionEventDataEffect::`vftable'
	DD	FLAT:??_ESMotionEventDataEffect@NMotionEvent@@UAEPAXI@Z
	DD	FLAT:?Save@SMotionEventDataEffect@NMotionEvent@@UAEXPAU_iobuf@@H@Z
	DD	FLAT:?Load@SMotionEventDataEffect@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z
CONST	ENDS
;	COMDAT ??_C@_0P@JIGGKKJB@affectingrange@
CONST	SEGMENT
??_C@_0P@JIGGKKJB@affectingrange@ DB 'affectingrange', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05PLIADJJL@power@
CONST	SEGMENT
??_C@_05PLIADJJL@power@ DB 'power', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KJGFIEPL@duringtime@
CONST	SEGMENT
??_C@_0L@KJGFIEPL@duringtime@ DB 'duringtime', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@KLBKOEEF@AffectingRange?5?5?5?5?5?5?5?$CFd?6@
CONST	SEGMENT
??_C@_0BJ@KLBKOEEF@AffectingRange?5?5?5?5?5?5?5?$CFd?6@ DB 'AffectingRang'
	DB	'e       %d', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@FEKHNOBC@Power?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?$CFd?6@
CONST	SEGMENT
??_C@_0BJ@FEKHNOBC@Power?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?$CFd?6@ DB 'Powe'
	DB	'r                %d', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JOLNCGNF@DuringTime?5?5?5?5?5?5?5?5?5?5?5?$CFf?6@
CONST	SEGMENT
??_C@_0BJ@JOLNCGNF@DuringTime?5?5?5?5?5?5?5?5?5?5?5?$CFf?6@ DB 'DuringTim'
	DB	'e           %f', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_7SMotionEventDataScreenWaving@NMotionEvent@@6B@
CONST	SEGMENT
??_7SMotionEventDataScreenWaving@NMotionEvent@@6B@ DD FLAT:??_R4SMotionEventDataScreenWaving@NMotionEvent@@6B@ ; NMotionEvent::SMotionEventDataScreenWaving::`vftable'
	DD	FLAT:??_ESMotionEventDataScreenWaving@NMotionEvent@@UAEPAXI@Z
	DD	FLAT:?Save@SMotionEventDataScreenWaving@NMotionEvent@@UAEXPAU_iobuf@@H@Z
	DD	FLAT:?Load@SMotionEventDataScreenWaving@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z
CONST	ENDS
;	COMDAT ??_7SMotionEventData@NMotionEvent@@6B@
CONST	SEGMENT
??_7SMotionEventData@NMotionEvent@@6B@ DD FLAT:??_R4SMotionEventData@NMotionEvent@@6B@ ; NMotionEvent::SMotionEventData::`vftable'
	DD	FLAT:??_ESMotionEventData@NMotionEvent@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:?Load@SMotionEventData@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z
CONST	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@SCollisionData@NRaceData@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SCollisionData@NRaceData@@8 DD FLAT:??_R0?AUSCollisionData@NRaceData@@@8 ; NRaceData::SCollisionData::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SCollisionData@NRaceData@@8
rdata$r	ENDS
;	COMDAT ??_R2SCollisionData@NRaceData@@8
rdata$r	SEGMENT
??_R2SCollisionData@NRaceData@@8 DD FLAT:??_R1A@?0A@EA@SCollisionData@NRaceData@@8 ; NRaceData::SCollisionData::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3SCollisionData@NRaceData@@8
rdata$r	SEGMENT
??_R3SCollisionData@NRaceData@@8 DD 00H			; NRaceData::SCollisionData::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2SCollisionData@NRaceData@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUSCollisionData@NRaceData@@@8
data$rs	SEGMENT
??_R0?AUSCollisionData@NRaceData@@@8 DD FLAT:??_7type_info@@6B@ ; NRaceData::SCollisionData `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUSCollisionData@NRaceData@@', 00H
data$rs	ENDS
;	COMDAT ??_R4SCollisionData@NRaceData@@6B@
rdata$r	SEGMENT
??_R4SCollisionData@NRaceData@@6B@ DD 00H		; NRaceData::SCollisionData::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUSCollisionData@NRaceData@@@8
	DD	FLAT:??_R3SCollisionData@NRaceData@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position@ DB 'invalid string position'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_7SCollisionData@NRaceData@@6B@
CONST	SEGMENT
??_7SCollisionData@NRaceData@@6B@ DD FLAT:??_R4SCollisionData@NRaceData@@6B@ ; NRaceData::SCollisionData::`vftable'
	DD	FLAT:??_ESCollisionData@NRaceData@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LoadSoundScriptData@CRaceMotionData@@QAE_NPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadSoundScriptData@CRaceMotionData@@QAE_NPBD@Z$0
__ehfuncinfo$?LoadSoundScriptData@CRaceMotionData@@QAE_NPBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?LoadSoundScriptData@CRaceMotionData@@QAE_NPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?LoadMotionData@CRaceMotionData@@QAE_NPBD@Z DD 019930522H
	DD	01dH
	DD	FLAT:__unwindtable$?LoadMotionData@CRaceMotionData@@QAE_NPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?LoadMotionData@CRaceMotionData@@QAE_NPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadMotionData@CRaceMotionData@@QAE_NPBD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadMotionData@CRaceMotionData@@QAE_NPBD@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadMotionData@CRaceMotionData@@QAE_NPBD@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadMotionData@CRaceMotionData@@QAE_NPBD@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?LoadMotionData@CRaceMotionData@@QAE_NPBD@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?LoadMotionData@CRaceMotionData@@QAE_NPBD@Z$5
	DD	03H
	DD	00H
	DD	04H
	DD	FLAT:__unwindfunclet$?LoadMotionData@CRaceMotionData@@QAE_NPBD@Z$6
	DD	03H
	DD	00H
	DD	04H
	DD	FLAT:__unwindfunclet$?LoadMotionData@CRaceMotionData@@QAE_NPBD@Z$7
	DD	03H
	DD	00H
	DD	03H
	DD	00H
	DD	04H
	DD	FLAT:__unwindfunclet$?LoadMotionData@CRaceMotionData@@QAE_NPBD@Z$8
	DD	04H
	DD	FLAT:__unwindfunclet$?LoadMotionData@CRaceMotionData@@QAE_NPBD@Z$9
	DD	04H
	DD	FLAT:__unwindfunclet$?LoadMotionData@CRaceMotionData@@QAE_NPBD@Z$10
	DD	03H
	DD	00H
	DD	04H
	DD	FLAT:__unwindfunclet$?LoadMotionData@CRaceMotionData@@QAE_NPBD@Z$11
	DD	03H
	DD	00H
	DD	04H
	DD	FLAT:__unwindfunclet$?LoadMotionData@CRaceMotionData@@QAE_NPBD@Z$12
	DD	03H
	DD	FLAT:___std_terminate
	DD	04H
	DD	FLAT:__unwindfunclet$?LoadMotionData@CRaceMotionData@@QAE_NPBD@Z$13
	DD	03H
	DD	00H
	DD	04H
	DD	FLAT:__unwindfunclet$?LoadMotionData@CRaceMotionData@@QAE_NPBD@Z$14
	DD	03H
	DD	00H
	DD	03H
	DD	00H
	DD	04H
	DD	FLAT:__unwindfunclet$?LoadMotionData@CRaceMotionData@@QAE_NPBD@Z$24
	DD	03H
	DD	FLAT:___std_terminate
	DD	03H
	DD	FLAT:___std_terminate
	DD	03H
	DD	FLAT:__unwindfunclet$?LoadMotionData@CRaceMotionData@@QAE_NPBD@Z$25
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Load@SMotionEventDataSound@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Load@SMotionEventDataSound@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z$0
__ehfuncinfo$?Load@SMotionEventDataSound@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Load@SMotionEventDataSound@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Load@SMotionEventDataAttack@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Load@SMotionEventDataAttack@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Load@SMotionEventDataAttack@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z$1
__ehfuncinfo$?Load@SMotionEventDataAttack@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Load@SMotionEventDataAttack@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Load@SMotionEventDataFly@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Load@SMotionEventDataFly@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Load@SMotionEventDataFly@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Load@SMotionEventDataFly@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Load@SMotionEventDataFly@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z$3
__ehfuncinfo$?Load@SMotionEventDataFly@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?Load@SMotionEventDataFly@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Load@SMotionEventDataEffectToTarget@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Load@SMotionEventDataEffectToTarget@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Load@SMotionEventDataEffectToTarget@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Load@SMotionEventDataEffectToTarget@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Load@SMotionEventDataEffectToTarget@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z$3
__ehfuncinfo$?Load@SMotionEventDataEffectToTarget@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?Load@SMotionEventDataEffectToTarget@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?Load@SMotionEventDataEffect@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?Load@SMotionEventDataEffect@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Load@SMotionEventDataEffect@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Load@SMotionEventDataEffect@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Load@SMotionEventDataEffect@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Load@SMotionEventDataEffect@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Load@SMotionEventDataEffect@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Load@SMotionEventDataEffect@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Load@SMotionEventDataEffect@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z$5
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Load@SMotionEventDataScreenWaving@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Load@SMotionEventDataScreenWaving@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Load@SMotionEventDataScreenWaving@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Load@SMotionEventDataScreenWaving@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z$2
__ehfuncinfo$?Load@SMotionEventDataScreenWaving@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?Load@SMotionEventDataScreenWaving@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CGotoChild@CTextFileLoader@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove_tail@PAPAUSMotionEventData@NMotionEvent@@@std@@YAPAPAUSMotionEventData@NMotionEvent@@QBDQAPAU12@II@Z
_TEXT	SEGMENT
__First_ch$ = 8						; size = 4
__Dest$ = 12						; size = 4
__Byte_count$ = 16					; size = 4
__Object_count$ = 20					; size = 4
??$_Copy_memmove_tail@PAPAUSMotionEventData@NMotionEvent@@@std@@YAPAPAUSMotionEventData@NMotionEvent@@QBDQAPAU12@II@Z PROC ; std::_Copy_memmove_tail<NMotionEvent::SMotionEventData * *>, COMDAT

; 4763 :     const char* const _First_ch, const _OutCtgIt _Dest, const size_t _Byte_count, const size_t _Object_count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4764 :     _STL_INTERNAL_CHECK(_Byte_count == _Object_count * sizeof(*_Dest));
; 4765 :     const auto _Dest_ptr = _STD _To_address(_Dest);
; 4766 :     const auto _Dest_ch  = const_cast<char*>(reinterpret_cast<const volatile char*>(_Dest_ptr));
; 4767 :     _CSTD memmove(_Dest_ch, _First_ch, _Byte_count);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 10	 mov	 edi, DWORD PTR __Byte_count$[ebp]
  0000b	57		 push	 edi
  0000c	ff 75 08	 push	 DWORD PTR __First_ch$[ebp]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memmove
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4768 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4769 :         (void) _Object_count;
; 4770 :         // CodeQL [SM02986] This cast is correct: we're bypassing pointer arithmetic for performance.
; 4771 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Byte_count);

  00018	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi

; 4772 :     } else {
; 4773 :         return _Dest + static_cast<_Iter_diff_t<_OutCtgIt>>(_Object_count);
; 4774 :     }
; 4775 : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Copy_memmove_tail@PAPAUSMotionEventData@NMotionEvent@@@std@@YAPAPAUSMotionEventData@NMotionEvent@@QBDQAPAU12@II@Z ENDP ; std::_Copy_memmove_tail<NMotionEvent::SMotionEventData * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBMUCDynamicSphereInstance@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMUCDynamicSphereInstance@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBMUCDynamicSphereInstance@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBMUCDynamicSphereInstance@@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBMUCDynamicSphereInstance@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMUCDynamicSphereInstance@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBMUCDynamicSphereInstance@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBMUCDynamicSphereInstance@@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,CDynamicSphereInstance> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<float const ,CDynamicSphereInstance>,void *> > >, COMDAT
; _this$ = ecx

; 757  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000e	75 25		 jne	 SHORT $LN39@Erase_tree
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR __Al$[ebp]
$LL2@Erase_tree:

; 759  :             _Erase_tree(_Al, _Rootnode->_Right);

  00014	ff 76 08	 push	 DWORD PTR [esi+8]
  00017	8b cb		 mov	 ecx, ebx
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBMUCDynamicSphereInstance@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMUCDynamicSphereInstance@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBMUCDynamicSphereInstance@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBMUCDynamicSphereInstance@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,CDynamicSphereInstance> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<float const ,CDynamicSphereInstance>,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001f	8b c6		 mov	 eax, esi

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  00021	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00023	6a 30		 push	 48			; 00000030H
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00032	74 e0		 je	 SHORT $LL2@Erase_tree
  00034	5f		 pop	 edi
$LN39@Erase_tree:
  00035	5e		 pop	 esi

; 760  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 761  :         }
; 762  :     }

  00036	5b		 pop	 ebx
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBMUCDynamicSphereInstance@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMUCDynamicSphereInstance@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBMUCDynamicSphereInstance@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBMUCDynamicSphereInstance@@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,CDynamicSphereInstance> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<float const ,CDynamicSphereInstance>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove_tail@PAPAVCRaceMotionData@@@std@@YAPAPAVCRaceMotionData@@QBDQAPAV1@II@Z
_TEXT	SEGMENT
__First_ch$ = 8						; size = 4
__Dest$ = 12						; size = 4
__Byte_count$ = 16					; size = 4
__Object_count$ = 20					; size = 4
??$_Copy_memmove_tail@PAPAVCRaceMotionData@@@std@@YAPAPAVCRaceMotionData@@QBDQAPAV1@II@Z PROC ; std::_Copy_memmove_tail<CRaceMotionData * *>, COMDAT

; 4763 :     const char* const _First_ch, const _OutCtgIt _Dest, const size_t _Byte_count, const size_t _Object_count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4764 :     _STL_INTERNAL_CHECK(_Byte_count == _Object_count * sizeof(*_Dest));
; 4765 :     const auto _Dest_ptr = _STD _To_address(_Dest);
; 4766 :     const auto _Dest_ch  = const_cast<char*>(reinterpret_cast<const volatile char*>(_Dest_ptr));
; 4767 :     _CSTD memmove(_Dest_ch, _First_ch, _Byte_count);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 10	 mov	 edi, DWORD PTR __Byte_count$[ebp]
  0000b	57		 push	 edi
  0000c	ff 75 08	 push	 DWORD PTR __First_ch$[ebp]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memmove
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4768 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4769 :         (void) _Object_count;
; 4770 :         // CodeQL [SM02986] This cast is correct: we're bypassing pointer arithmetic for performance.
; 4771 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Byte_count);

  00018	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi

; 4772 :     } else {
; 4773 :         return _Dest + static_cast<_Iter_diff_t<_OutCtgIt>>(_Object_count);
; 4774 :     }
; 4775 : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Copy_memmove_tail@PAPAVCRaceMotionData@@@std@@YAPAPAVCRaceMotionData@@QBDQAPAV1@II@Z ENDP ; std::_Copy_memmove_tail<CRaceMotionData * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAUSMotionEventData@NMotionEvent@@PAPAU12@@std@@YAPAPAUSMotionEventData@NMotionEvent@@PAPAU12@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAUSMotionEventData@NMotionEvent@@PAPAU12@@std@@YAPAPAUSMotionEventData@NMotionEvent@@PAPAU12@00@Z PROC ; std::_Copy_memmove<NMotionEvent::SMotionEventData * *,NMotionEvent::SMotionEventData * *>, COMDAT

; 4778 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4779 :     _STL_INTERNAL_CHECK(_First <= _Last);
; 4780 :     const auto _First_ptr    = _STD _To_address(_First);
; 4781 :     const auto _Last_ptr     = _STD _To_address(_Last);
; 4782 :     const auto _Object_count = static_cast<size_t>(_Last_ptr - _First_ptr);

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	8b c1		 mov	 eax, ecx
  0000d	c1 f8 02	 sar	 eax, 2

; 4783 :     const auto _First_ch     = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 4784 :     const auto _Last_ch      = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last_ptr));
; 4785 :     const auto _Byte_count   = static_cast<size_t>(_Last_ch - _First_ch);
; 4786 :     return _STD _Copy_memmove_tail(_First_ch, _STD move(_Dest), _Byte_count, _Object_count);

  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00015	52		 push	 edx
  00016	e8 00 00 00 00	 call	 ??$_Copy_memmove_tail@PAPAUSMotionEventData@NMotionEvent@@@std@@YAPAPAUSMotionEventData@NMotionEvent@@QBDQAPAU12@II@Z ; std::_Copy_memmove_tail<NMotionEvent::SMotionEventData * *>
  0001b	83 c4 10	 add	 esp, 16			; 00000010H

; 4787 : }

  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??$_Copy_memmove@PAPAUSMotionEventData@NMotionEvent@@PAPAU12@@std@@YAPAPAUSMotionEventData@NMotionEvent@@PAPAU12@00@Z ENDP ; std::_Copy_memmove<NMotionEvent::SMotionEventData * *,NMotionEvent::SMotionEventData * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCRaceMotionData@@PAPAV1@@std@@YAPAPAVCRaceMotionData@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCRaceMotionData@@PAPAV1@@std@@YAPAPAVCRaceMotionData@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CRaceMotionData * *,CRaceMotionData * *>, COMDAT

; 4778 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4779 :     _STL_INTERNAL_CHECK(_First <= _Last);
; 4780 :     const auto _First_ptr    = _STD _To_address(_First);
; 4781 :     const auto _Last_ptr     = _STD _To_address(_Last);
; 4782 :     const auto _Object_count = static_cast<size_t>(_Last_ptr - _First_ptr);

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	8b c1		 mov	 eax, ecx
  0000d	c1 f8 02	 sar	 eax, 2

; 4783 :     const auto _First_ch     = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 4784 :     const auto _Last_ch      = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last_ptr));
; 4785 :     const auto _Byte_count   = static_cast<size_t>(_Last_ch - _First_ch);
; 4786 :     return _STD _Copy_memmove_tail(_First_ch, _STD move(_Dest), _Byte_count, _Object_count);

  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00015	52		 push	 edx
  00016	e8 00 00 00 00	 call	 ??$_Copy_memmove_tail@PAPAVCRaceMotionData@@@std@@YAPAPAVCRaceMotionData@@QBDQAPAV1@II@Z ; std::_Copy_memmove_tail<CRaceMotionData * *>
  0001b	83 c4 10	 add	 esp, 16			; 00000010H

; 4787 : }

  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??$_Copy_memmove@PAPAVCRaceMotionData@@PAPAV1@@std@@YAPAPAVCRaceMotionData@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CRaceMotionData * *,CRaceMotionData * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Fill_zero_memset@PAPAUSMotionEventData@NMotionEvent@@@std@@YAXPAPAUSMotionEventData@NMotionEvent@@I@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Count$ = 12						; size = 4
??$_Fill_zero_memset@PAPAUSMotionEventData@NMotionEvent@@@std@@YAXPAPAUSMotionEventData@NMotionEvent@@I@Z PROC ; std::_Fill_zero_memset<NMotionEvent::SMotionEventData * *>, COMDAT

; 5285 : void _Fill_zero_memset(_CtgIt _Dest, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5286 :     _CSTD memset(_STD _To_address(_Dest), 0, _Count * sizeof(_Iter_value_t<_CtgIt>));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	c1 e0 02	 shl	 eax, 2
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 08	 push	 DWORD PTR __Dest$[ebp]
  0000f	e8 00 00 00 00	 call	 _memset
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5287 : }

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Fill_zero_memset@PAPAUSMotionEventData@NMotionEvent@@@std@@YAXPAPAUSMotionEventData@NMotionEvent@@I@Z ENDP ; std::_Fill_zero_memset<NMotionEvent::SMotionEventData * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Is_all_bits_zero@PAUSMotionEventData@NMotionEvent@@@std@@YA_NABQAUSMotionEventData@NMotionEvent@@@Z
_TEXT	SEGMENT
__Zero$1 = -4						; size = 4
__Val$ = 8						; size = 4
??$_Is_all_bits_zero@PAUSMotionEventData@NMotionEvent@@@std@@YA_NABQAUSMotionEventData@NMotionEvent@@@Z PROC ; std::_Is_all_bits_zero<NMotionEvent::SMotionEventData *>, COMDAT

; 5290 : _NODISCARD bool _Is_all_bits_zero(const _Ty& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 5291 :     // checks if scalar type has all bits set to zero
; 5292 :     _STL_INTERNAL_STATIC_ASSERT(is_scalar_v<_Ty> && !is_member_pointer_v<_Ty>);
; 5293 :     if constexpr (is_same_v<_Ty, nullptr_t>) {
; 5294 :         return true;
; 5295 :     } else {
; 5296 :         constexpr _Ty _Zero{};
; 5297 :         return _CSTD memcmp(&_Val, &_Zero, sizeof(_Ty)) == 0;

  00004	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  00007	8d 4d fc	 lea	 ecx, DWORD PTR __Zero$1[ebp]
  0000a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __Zero$1[ebp], 0
  00011	8b 00		 mov	 eax, DWORD PTR [eax]
  00013	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00015	0f 94 c0	 sete	 al

; 5298 :     }
; 5299 : }

  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Is_all_bits_zero@PAUSMotionEventData@NMotionEvent@@@std@@YA_NABQAUSMotionEventData@NMotionEvent@@@Z ENDP ; std::_Is_all_bits_zero<NMotionEvent::SMotionEventData *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Uninitialized_fill_n@V?$allocator@PAUSMotionEventData@NMotionEvent@@@std@@@std@@YAPAPAUSMotionEventData@NMotionEvent@@PAPAU12@IABQAU12@AAV?$allocator@PAUSMotionEventData@NMotionEvent@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_fill_n@V?$allocator@PAUSMotionEventData@NMotionEvent@@@std@@@std@@YAPAPAUSMotionEventData@NMotionEvent@@PAPAU12@IABQAU12@AAV?$allocator@PAUSMotionEventData@NMotionEvent@@@0@@Z PROC ; std::_Uninitialized_fill_n<std::allocator<NMotionEvent::SMotionEventData *> >, COMDAT

; 1970 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, const typename _Alloc::value_type& _Val, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1971 :     // copy _Count copies of _Val to raw _First, using _Al
; 1972 :     using _Ty = typename _Alloc::value_type;
; 1973 :     if constexpr (_Fill_memset_is_safe<_Ty*, _Ty> && _Uses_default_construct<_Alloc, _Ty*, _Ty>::value) {
; 1974 : #if _HAS_CXX20
; 1975 :         if (!_STD is_constant_evaluated())
; 1976 : #endif // _HAS_CXX20
; 1977 :         {
; 1978 :             _Fill_memset(_Unfancy(_First), _Val, static_cast<size_t>(_Count));
; 1979 :             return _First + _Count;
; 1980 :         }
; 1981 :     } else if constexpr (_Fill_zero_memset_is_safe<_Ty*, _Ty> && _Uses_default_construct<_Alloc, _Ty*, _Ty>::value) {
; 1982 : #if _HAS_CXX20
; 1983 :         if (!_STD is_constant_evaluated())
; 1984 : #endif // _HAS_CXX20
; 1985 :         {
; 1986 :             if (_Is_all_bits_zero(_Val)) {

  00004	8b 75 10	 mov	 esi, DWORD PTR __Val$[ebp]
  00007	56		 push	 esi
  00008	e8 00 00 00 00	 call	 ??$_Is_all_bits_zero@PAUSMotionEventData@NMotionEvent@@@std@@YA_NABQAUSMotionEventData@NMotionEvent@@@Z ; std::_Is_all_bits_zero<NMotionEvent::SMotionEventData *>
  0000d	83 c4 04	 add	 esp, 4
  00010	84 c0		 test	 al, al
  00012	74 18		 je	 SHORT $LN5@Uninitiali

; 1987 :                 _Fill_zero_memset(_Unfancy(_First), static_cast<size_t>(_Count));

  00014	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00017	57		 push	 edi
  00018	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  0001b	57		 push	 edi
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 ??$_Fill_zero_memset@PAPAUSMotionEventData@NMotionEvent@@@std@@YAXPAPAUSMotionEventData@NMotionEvent@@I@Z ; std::_Fill_zero_memset<NMotionEvent::SMotionEventData * *>
  00022	83 c4 08	 add	 esp, 8

; 1988 :                 return _First + _Count;

  00025	8d 04 be	 lea	 eax, DWORD PTR [esi+edi*4]
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi

; 1995 :         _Backout._Emplace_back(_Val);
; 1996 :     }
; 1997 : 
; 1998 :     return _Backout._Release();
; 1999 : }

  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
$LN5@Uninitiali:

; 1989 :             }
; 1990 :         }
; 1991 :     }
; 1992 : 
; 1993 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 1994 :     for (; 0 < _Count; --_Count) {

  0002c	8b 55 0c	 mov	 edx, DWORD PTR __Count$[ebp]

; 1796 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  0002f	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]

; 1989 :             }
; 1990 :         }
; 1991 :     }
; 1992 : 
; 1993 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 1994 :     for (; 0 < _Count; --_Count) {

  00032	85 d2		 test	 edx, edx
  00034	74 0c		 je	 SHORT $LN1@Uninitiali
$LL4@Uninitiali:

; 1807 :         allocator_traits<_Alloc>::construct(_Al, _STD _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  00036	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00038	89 08		 mov	 DWORD PTR [eax], ecx

; 1808 :         ++_Last;

  0003a	83 c0 04	 add	 eax, 4

; 1989 :             }
; 1990 :         }
; 1991 :     }
; 1992 : 
; 1993 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 1994 :     for (; 0 < _Count; --_Count) {

  0003d	83 ea 01	 sub	 edx, 1
  00040	75 f4		 jne	 SHORT $LL4@Uninitiali
$LN1@Uninitiali:
  00042	5e		 pop	 esi

; 1995 :         _Backout._Emplace_back(_Val);
; 1996 :     }
; 1997 : 
; 1998 :     return _Backout._Release();
; 1999 : }

  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
??$_Uninitialized_fill_n@V?$allocator@PAUSMotionEventData@NMotionEvent@@@std@@@std@@YAPAPAUSMotionEventData@NMotionEvent@@PAPAU12@IABQAU12@AAV?$allocator@PAUSMotionEventData@NMotionEvent@@@0@@Z ENDP ; std::_Uninitialized_fill_n<std::allocator<NMotionEvent::SMotionEventData *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool'', COMDAT

; 274  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool'', COMDAT

; 274  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool'', COMDAT

; 274  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool'', COMDAT

; 274  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool'', COMDAT

; 274  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool'', COMDAT

; 274  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool'', COMDAT

; 274  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool'', COMDAT

; 274  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAXPAUSSoundInstance@NSound@@QAU12@AAV?$allocator@USSoundInstance@NSound@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAXPAUSSoundInstance@NSound@@QAU12@AAV?$allocator@USSoundInstance@NSound@@@0@@Z PROC ; std::_Destroy_range<std::allocator<NSound::SSoundInstance> >, COMDAT

; 1094 : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1098 :         for (; _First != _Last; ++_First) {

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000b	3b f3		 cmp	 esi, ebx
  0000d	74 4f		 je	 SHORT $LN61@Destroy_ra
  0000f	83 c6 18	 add	 esi, 24			; 00000018H
  00012	57		 push	 edi
$LL4@Destroy_ra:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00013	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00015	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00018	76 28		 jbe	 SHORT $LN64@Destroy_ra
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0001a	8b 46 ec	 mov	 eax, DWORD PTR [esi-20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0001d	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0001e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00024	72 12		 jb	 SHORT $LN49@Destroy_ra

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00026	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00029	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0002c	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0002e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00031	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00034	77 2c		 ja	 SHORT $LN46@Destroy_ra

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00036	8b c2		 mov	 eax, edx
$LN49@Destroy_ra:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00038	51		 push	 ecx
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003f	83 c4 08	 add	 esp, 8
$LN64@Destroy_ra:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00042	c7 46 fc 00 00
	00 00		 mov	 DWORD PTR [esi-4], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00049	c7 06 0f 00 00
	00		 mov	 DWORD PTR [esi], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0004f	c6 46 ec 00	 mov	 BYTE PTR [esi-20], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1098 :         for (; _First != _Last; ++_First) {

  00053	83 c6 1c	 add	 esi, 28			; 0000001cH
  00056	8d 46 e8	 lea	 eax, DWORD PTR [esi-24]
  00059	3b c3		 cmp	 eax, ebx
  0005b	75 b6		 jne	 SHORT $LL4@Destroy_ra
  0005d	5f		 pop	 edi
$LN61@Destroy_ra:
  0005e	5e		 pop	 esi

; 1099 :             allocator_traits<_Alloc>::destroy(_Al, _STD _Unfancy(_First));
; 1100 :         }
; 1101 :     }
; 1102 : }

  0005f	5b		 pop	 ebx
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
$LN46@Destroy_ra:

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00062	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN70@Destroy_ra:
  00067	cc		 int	 3
??$_Destroy_range@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAXPAUSSoundInstance@NSound@@QAU12@AAV?$allocator@USSoundInstance@NSound@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<NSound::SSoundInstance> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>, COMDAT
; _this$ = ecx

; 133  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@

; 161  : 			for (auto v : m_kVct_pkData)

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN6@CDynamicPo
$LL7@CDynamicPo:

; 226  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 161  : 			for (auto v : m_kVct_pkData)

  0001c	83 c6 04	 add	 esi, 4

; 226  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4

; 161  : 			for (auto v : m_kVct_pkData)

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL7@CDynamicPo
$LN6@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN11@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN11@CDynamicPo:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN15@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN15@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN23@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN42@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN42@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2082 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN23@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN52@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN71@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN71@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2082 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 143  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN68@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN89@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>, COMDAT
; _this$ = ecx

; 133  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@

; 161  : 			for (auto v : m_kVct_pkData)

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN6@CDynamicPo
$LL7@CDynamicPo:

; 226  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 161  : 			for (auto v : m_kVct_pkData)

  0001c	83 c6 04	 add	 esi, 4

; 226  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4

; 161  : 			for (auto v : m_kVct_pkData)

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL7@CDynamicPo
$LN6@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN11@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN11@CDynamicPo:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN15@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN15@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN23@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN42@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN42@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2082 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN23@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN52@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN71@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN71@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2082 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 143  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN68@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN89@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>, COMDAT
; _this$ = ecx

; 133  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@

; 161  : 			for (auto v : m_kVct_pkData)

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN6@CDynamicPo
$LL7@CDynamicPo:

; 226  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 161  : 			for (auto v : m_kVct_pkData)

  0001c	83 c6 04	 add	 esi, 4

; 226  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4

; 161  : 			for (auto v : m_kVct_pkData)

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL7@CDynamicPo
$LN6@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN11@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN11@CDynamicPo:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN15@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN15@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN23@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN42@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN42@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2082 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN23@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN52@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN71@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN71@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2082 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 143  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN68@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN89@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>, COMDAT
; _this$ = ecx

; 133  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@

; 161  : 			for (auto v : m_kVct_pkData)

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN6@CDynamicPo
$LL7@CDynamicPo:

; 226  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 161  : 			for (auto v : m_kVct_pkData)

  0001c	83 c6 04	 add	 esi, 4

; 226  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4

; 161  : 			for (auto v : m_kVct_pkData)

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL7@CDynamicPo
$LN6@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN11@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN11@CDynamicPo:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN15@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN15@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN23@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN42@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN42@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2082 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN23@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN52@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN71@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN71@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2082 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 143  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN68@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN89@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>, COMDAT
; _this$ = ecx

; 133  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@

; 161  : 			for (auto v : m_kVct_pkData)

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN6@CDynamicPo
$LL7@CDynamicPo:

; 226  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 161  : 			for (auto v : m_kVct_pkData)

  0001c	83 c6 04	 add	 esi, 4

; 226  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4

; 161  : 			for (auto v : m_kVct_pkData)

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL7@CDynamicPo
$LN6@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN11@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN11@CDynamicPo:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN15@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN15@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN23@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN42@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN42@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2082 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN23@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN52@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN71@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN71@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2082 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 143  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN68@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN89@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>, COMDAT
; _this$ = ecx

; 133  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@

; 161  : 			for (auto v : m_kVct_pkData)

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN6@CDynamicPo
$LL7@CDynamicPo:

; 226  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 161  : 			for (auto v : m_kVct_pkData)

  0001c	83 c6 04	 add	 esi, 4

; 226  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4

; 161  : 			for (auto v : m_kVct_pkData)

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL7@CDynamicPo
$LN6@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN11@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN11@CDynamicPo:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN15@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN15@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN23@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN42@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN42@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2082 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN23@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN52@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN71@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN71@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2082 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 143  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN68@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN89@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>, COMDAT
; _this$ = ecx

; 133  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@

; 161  : 			for (auto v : m_kVct_pkData)

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN6@CDynamicPo
$LL7@CDynamicPo:

; 226  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 161  : 			for (auto v : m_kVct_pkData)

  0001c	83 c6 04	 add	 esi, 4

; 226  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4

; 161  : 			for (auto v : m_kVct_pkData)

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL7@CDynamicPo
$LN6@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN11@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN11@CDynamicPo:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN15@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN15@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN23@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN42@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN42@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2082 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN23@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN52@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN71@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN71@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2082 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 143  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN68@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN89@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>, COMDAT
; _this$ = ecx

; 133  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@

; 161  : 			for (auto v : m_kVct_pkData)

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN6@CDynamicPo
$LL7@CDynamicPo:

; 226  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 161  : 			for (auto v : m_kVct_pkData)

  0001c	83 c6 04	 add	 esi, 4

; 226  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4

; 161  : 			for (auto v : m_kVct_pkData)

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL7@CDynamicPo
$LN6@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN11@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN11@CDynamicPo:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN15@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN15@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN23@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN42@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN42@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2082 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN23@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN52@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN71@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN71@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2082 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 143  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN68@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN89@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??$_Resize@PAUSMotionEventData@NMotionEvent@@@?$vector@PAUSMotionEventData@NMotionEvent@@V?$allocator@PAUSMotionEventData@NMotionEvent@@@std@@@std@@AAEXIABQAUSMotionEventData@NMotionEvent@@@Z
_TEXT	SEGMENT
tv575 = -4						; size = 4
__Newsize$ = 8						; size = 4
$T2 = 8							; size = 4
__Val$ = 12						; size = 4
??$_Resize@PAUSMotionEventData@NMotionEvent@@@?$vector@PAUSMotionEventData@NMotionEvent@@V?$allocator@PAUSMotionEventData@NMotionEvent@@@std@@@std@@AAEXIABQAUSMotionEventData@NMotionEvent@@@Z PROC ; std::vector<NMotionEvent::SMotionEventData *,std::allocator<NMotionEvent::SMotionEventData *> >::_Resize<NMotionEvent::SMotionEventData *>, COMDAT
; _this$ = ecx

; 1574 :     _CONSTEXPR20 void _Resize(const size_type _Newsize, const _Ty2& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi

; 1575 :         // trim or append elements, provide strong guarantee
; 1576 :         auto& _Al           = _Getal();
; 1577 :         auto& _My_data      = _Mypair._Myval2;
; 1578 :         pointer& _Myfirst   = _My_data._Myfirst;
; 1579 :         pointer& _Mylast    = _My_data._Mylast;
; 1580 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);
; 1581 :         if (_Newsize < _Oldsize) { // trim

  00006	8b 75 08	 mov	 esi, DWORD PTR __Newsize$[ebp]
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  0000f	8b da		 mov	 ebx, edx
  00011	8b 07		 mov	 eax, DWORD PTR [edi]
  00013	2b d8		 sub	 ebx, eax
  00015	c1 fb 02	 sar	 ebx, 2
  00018	3b f3		 cmp	 esi, ebx
  0001a	73 0f		 jae	 SHORT $LN2@Resize

; 1582 :             const pointer _Newlast = _Myfirst + _Newsize;

  0001c	8d 04 b0	 lea	 eax, DWORD PTR [eax+esi*4]

; 1610 :     }

  0001f	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 08 00	 ret	 8
$LN2@Resize:

; 1583 :             _Orphan_range(_Newlast, _Mylast);
; 1584 :             _Destroy_range(_Newlast, _Mylast, _Al);
; 1585 :             _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1586 :             _Mylast = _Newlast;
; 1587 :             return;
; 1588 :         }
; 1589 : 
; 1590 :         if (_Newsize > _Oldsize) { // append

  0002b	0f 86 0e 01 00
	00		 jbe	 $LN3@Resize

; 1591 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

  00031	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00034	2b c8		 sub	 ecx, eax
  00036	c1 f9 02	 sar	 ecx, 2

; 1592 :             if (_Newsize > _Oldcapacity) { // reallocate

  00039	3b f1		 cmp	 esi, ecx
  0003b	0f 86 eb 00 00
	00		 jbe	 $LN4@Resize

; 1538 :         if (_Newsize > max_size()) {

  00041	81 fe ff ff ff
	3f		 cmp	 esi, 1073741823		; 3fffffffH
  00047	0f 87 fb 00 00
	00		 ja	 $LN109@Resize

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0004d	8b d1		 mov	 edx, ecx
  0004f	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  00054	d1 ea		 shr	 edx, 1
  00056	2b c2		 sub	 eax, edx
  00058	3b c8		 cmp	 ecx, eax
  0005a	76 19		 jbe	 SHORT $LN11@Resize

; 1997 :             return _Max; // geometric growth would overflow

  0005c	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  00061	c7 45 fc fc ff
	ff ff		 mov	 DWORD PTR tv575[ebp], -4 ; fffffffcH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0006e	8b c8		 mov	 ecx, eax
  00070	89 4d 08	 mov	 DWORD PTR $T2[ebp], ecx
  00073	eb 46		 jmp	 SHORT $LN107@Resize
$LN11@Resize:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00075	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 2001 : 
; 2002 :         if (_Geometric < _Newsize) {

  00078	3b c6		 cmp	 eax, esi
  0007a	73 13		 jae	 SHORT $LN12@Resize

; 2003 :             return _Newsize; // geometric growth would be insufficient

  0007c	8b c6		 mov	 eax, esi
$LN22@Resize:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 122  :     return _Count * _Ty_size;

  0007e	c1 e0 02	 shl	 eax, 2
  00081	89 45 fc	 mov	 DWORD PTR tv575[ebp], eax

; 227  :     if (_Bytes == 0) {

  00084	85 c0		 test	 eax, eax
  00086	75 14		 jne	 SHORT $LN26@Resize

; 228  :         return nullptr;

  00088	33 c9		 xor	 ecx, ecx
  0008a	89 4d 08	 mov	 DWORD PTR $T2[ebp], ecx
  0008d	eb 2f		 jmp	 SHORT $LN25@Resize
$LN12@Resize:

; 117  :         if (_Count > _Max_possible) {

  0008f	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00094	0f 87 b3 00 00
	00		 ja	 $LN110@Resize
  0009a	eb e2		 jmp	 SHORT $LN22@Resize
$LN26@Resize:

; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  0009c	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000a1	72 0d		 jb	 SHORT $LN27@Resize

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a3	50		 push	 eax
  000a4	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a9	8b c8		 mov	 ecx, eax
  000ab	89 4d 08	 mov	 DWORD PTR $T2[ebp], ecx
  000ae	eb 0b		 jmp	 SHORT $LN107@Resize
$LN27@Resize:

; 136  :         return ::operator new(_Bytes);

  000b0	50		 push	 eax
  000b1	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 256  :         return _Traits::_Allocate(_Bytes);

  000b6	8b c8		 mov	 ecx, eax
  000b8	89 45 08	 mov	 DWORD PTR $T2[ebp], eax
$LN107@Resize:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1557 :             _Appended_last = _Uninitialized_fill_n(_Appended_first, _Newsize - _Oldsize, _Val, _Al);

  000bb	83 c4 04	 add	 esp, 4
$LN25@Resize:
  000be	57		 push	 edi
  000bf	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  000c2	8b c6		 mov	 eax, esi
  000c4	2b c3		 sub	 eax, ebx
  000c6	50		 push	 eax
  000c7	8d 04 99	 lea	 eax, DWORD PTR [ecx+ebx*4]
  000ca	50		 push	 eax
  000cb	e8 00 00 00 00	 call	 ??$_Uninitialized_fill_n@V?$allocator@PAUSMotionEventData@NMotionEvent@@@std@@@std@@YAPAPAUSMotionEventData@NMotionEvent@@PAPAU12@IABQAU12@AAV?$allocator@PAUSMotionEventData@NMotionEvent@@@0@@Z ; std::_Uninitialized_fill_n<std::allocator<NMotionEvent::SMotionEventData *> >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000d0	8b 5d 08	 mov	 ebx, DWORD PTR $T2[ebp]
  000d3	53		 push	 ebx
  000d4	ff 77 04	 push	 DWORD PTR [edi+4]
  000d7	ff 37		 push	 DWORD PTR [edi]
  000d9	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAUSMotionEventData@NMotionEvent@@PAPAU12@@std@@YAPAPAUSMotionEventData@NMotionEvent@@PAPAU12@00@Z ; std::_Copy_memmove<NMotionEvent::SMotionEventData * *,NMotionEvent::SMotionEventData * *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  000de	8b 07		 mov	 eax, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000e0	83 c4 1c	 add	 esp, 28			; 0000001cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  000e3	85 c0		 test	 eax, eax
  000e5	74 2c		 je	 SHORT $LN53@Resize

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2056 :             _ASAN_VECTOR_REMOVE;
; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e7	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  000ea	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ec	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000ef	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f5	72 12		 jb	 SHORT $LN64@Resize

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f7	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000fa	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000fd	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ff	83 c0 fc	 add	 eax, -4			; fffffffcH
  00102	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00105	77 4b		 ja	 SHORT $LN61@Resize

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00107	8b c2		 mov	 eax, edx
$LN64@Resize:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00109	51		 push	 ecx
  0010a	50		 push	 eax
  0010b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00110	83 c4 08	 add	 esp, 8
$LN53@Resize:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2061 :         _Mylast  = _Newvec + _Newsize;

  00113	8d 04 b3	 lea	 eax, DWORD PTR [ebx+esi*4]
  00116	89 1f		 mov	 DWORD PTR [edi], ebx
  00118	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  0011b	8b 45 fc	 mov	 eax, DWORD PTR tv575[ebp]
  0011e	03 c3		 add	 eax, ebx
  00120	89 47 08	 mov	 DWORD PTR [edi+8], eax
  00123	5f		 pop	 edi

; 1610 :     }

  00124	5e		 pop	 esi
  00125	5b		 pop	 ebx
  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c2 08 00	 ret	 8
$LN4@Resize:

; 1593 :                 _Resize_reallocate(_Newsize, _Val);
; 1594 :                 return;
; 1595 :             }
; 1596 : 
; 1597 :             _ASAN_VECTOR_EXTEND_GUARD(_Newsize);
; 1598 :             const pointer _Oldlast = _Mylast;
; 1599 :             if constexpr (is_same_v<_Ty2, _Ty>) {
; 1600 :                 _Mylast = _Uninitialized_fill_n(_Oldlast, _Newsize - _Oldsize, _Val, _Al);

  0012c	57		 push	 edi
  0012d	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00130	2b f3		 sub	 esi, ebx
  00132	56		 push	 esi
  00133	52		 push	 edx
  00134	e8 00 00 00 00	 call	 ??$_Uninitialized_fill_n@V?$allocator@PAUSMotionEventData@NMotionEvent@@@std@@@std@@YAPAPAUSMotionEventData@NMotionEvent@@PAPAU12@IABQAU12@AAV?$allocator@PAUSMotionEventData@NMotionEvent@@@0@@Z ; std::_Uninitialized_fill_n<std::allocator<NMotionEvent::SMotionEventData *> >
  00139	83 c4 10	 add	 esp, 16			; 00000010H

; 1610 :     }

  0013c	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN3@Resize:
  0013f	5f		 pop	 edi
  00140	5e		 pop	 esi
  00141	5b		 pop	 ebx
  00142	8b e5		 mov	 esp, ebp
  00144	5d		 pop	 ebp
  00145	c2 08 00	 ret	 8
$LN109@Resize:

; 1539 :             _Xlength();

  00148	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAUSMotionEventData@NMotionEvent@@V?$allocator@PAUSMotionEventData@NMotionEvent@@@std@@@std@@CAXXZ ; std::vector<NMotionEvent::SMotionEventData *,std::allocator<NMotionEvent::SMotionEventData *> >::_Xlength
$LN110@Resize:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  0014d	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN61@Resize:

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00152	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN105@Resize:
  00157	cc		 int	 3
??$_Resize@PAUSMotionEventData@NMotionEvent@@@?$vector@PAUSMotionEventData@NMotionEvent@@V?$allocator@PAUSMotionEventData@NMotionEvent@@@std@@@std@@AAEXIABQAUSMotionEventData@NMotionEvent@@@Z ENDP ; std::vector<NMotionEvent::SMotionEventData *,std::allocator<NMotionEvent::SMotionEventData *> >::_Resize<NMotionEvent::SMotionEventData *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??1?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__Last$1$ = -4						; size = 4
??1?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@QAE@XZ PROC ; std::vector<NSound::SSoundData,std::allocator<NSound::SSoundData> >::~vector<NSound::SSoundData,std::allocator<NSound::SSoundData> >, COMDAT
; _this$ = ecx

; 814  :     _CONSTEXPR20 ~vector() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  0000a	8b 1f		 mov	 ebx, DWORD PTR [edi]
  0000c	85 db		 test	 ebx, ebx
  0000e	0f 84 be 00 00
	00		 je	 $LN5@vector

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);

  00014	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00017	89 45 fc	 mov	 DWORD PTR __Last$1$[ebp], eax
  0001a	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1098 :         for (; _First != _Last; ++_First) {

  0001b	3b d8		 cmp	 ebx, eax
  0001d	74 54		 je	 SHORT $LN94@vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);

  0001f	8d 73 18	 lea	 esi, DWORD PTR [ebx+24]
$LL11@vector:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00022	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00024	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00027	76 2f		 jbe	 SHORT $LN93@vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00029	8b 46 ec	 mov	 eax, DWORD PTR [esi-20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0002c	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0002d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00033	72 16		 jb	 SHORT $LN56@vector

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00035	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00038	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0003b	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0003d	83 c0 fc	 add	 eax, -4			; fffffffcH
  00040	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00043	0f 87 8f 00 00
	00		 ja	 $LN80@vector

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00049	8b c2		 mov	 eax, edx
$LN56@vector:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0004b	51		 push	 ecx
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00052	8b 45 fc	 mov	 eax, DWORD PTR __Last$1$[ebp]
  00055	83 c4 08	 add	 esp, 8
$LN93@vector:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00058	c7 46 fc 00 00
	00 00		 mov	 DWORD PTR [esi-4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1098 :         for (; _First != _Last; ++_First) {

  0005f	83 c3 1c	 add	 ebx, 28			; 0000001cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00062	c7 06 0f 00 00
	00		 mov	 DWORD PTR [esi], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00068	c6 46 ec 00	 mov	 BYTE PTR [esi-20], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1098 :         for (; _First != _Last; ++_First) {

  0006c	83 c6 1c	 add	 esi, 28			; 0000001cH
  0006f	3b d8		 cmp	 ebx, eax
  00071	75 af		 jne	 SHORT $LL11@vector
$LN94@vector:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00073	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00076	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0007b	8b 37		 mov	 esi, DWORD PTR [edi]
  0007d	2b ce		 sub	 ecx, esi
  0007f	f7 e9		 imul	 ecx
  00081	03 d1		 add	 edx, ecx
  00083	c1 fa 04	 sar	 edx, 4
  00086	8b c2		 mov	 eax, edx
  00088	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0008b	03 c2		 add	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  00094	2b c8		 sub	 ecx, eax
  00096	c1 e1 02	 shl	 ecx, 2

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00099	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0009f	72 12		 jb	 SHORT $LN83@vector

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000a1	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  000a4	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000a7	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a9	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  000ac	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000af	77 27		 ja	 SHORT $LN80@vector

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000b1	8b f2		 mov	 esi, edx
$LN83@vector:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000b3	51		 push	 ecx
  000b4	56		 push	 esi
  000b5	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000ba	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  000bd	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0

; 2081 :             _Mylast  = nullptr;

  000c3	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 2082 :             _Myend   = nullptr;

  000ca	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  000d1	5e		 pop	 esi
$LN5@vector:
  000d2	5f		 pop	 edi

; 820  :     }

  000d3	5b		 pop	 ebx
  000d4	8b e5		 mov	 esp, ebp
  000d6	5d		 pop	 ebp
  000d7	c3		 ret	 0
$LN80@vector:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000d8	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN103@vector:
  000dd	cc		 int	 3
??1?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@QAE@XZ ENDP ; std::vector<NSound::SSoundData,std::allocator<NSound::SSoundData> >::~vector<NSound::SSoundData,std::allocator<NSound::SSoundData> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h
;	COMDAT ??$stl_wipe@V?$vector@PAUSMotionEventData@NMotionEvent@@V?$allocator@PAUSMotionEventData@NMotionEvent@@@std@@@std@@@@YAXAAV?$vector@PAUSMotionEventData@NMotionEvent@@V?$allocator@PAUSMotionEventData@NMotionEvent@@@std@@@std@@@Z
_TEXT	SEGMENT
_container$ = 8						; size = 4
??$stl_wipe@V?$vector@PAUSMotionEventData@NMotionEvent@@V?$allocator@PAUSMotionEventData@NMotionEvent@@@std@@@std@@@@YAXAAV?$vector@PAUSMotionEventData@NMotionEvent@@V?$allocator@PAUSMotionEventData@NMotionEvent@@@std@@@std@@@Z PROC ; stl_wipe<std::vector<NMotionEvent::SMotionEventData *,std::allocator<NMotionEvent::SMotionEventData *> > >, COMDAT

; 112  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00005	8b 7d 08	 mov	 edi, DWORD PTR _container$[ebp]
  00008	8b 37		 mov	 esi, DWORD PTR [edi]
  0000a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0000d	3b f0		 cmp	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h

; 113  : 	for (auto i = container.begin(); i != container.end(); ++i)

  0000f	74 1c		 je	 SHORT $LN3@stl_wipe
$LL4@stl_wipe:

; 114  : 	{
; 115  : 		delete* i;

  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	85 c9		 test	 ecx, ecx
  00015	74 06		 je	 SHORT $LN6@stl_wipe
  00017	8b 01		 mov	 eax, DWORD PTR [ecx]
  00019	6a 01		 push	 1
  0001b	ff 10		 call	 DWORD PTR [eax]
$LN6@stl_wipe:

; 116  : 		*i = NULL;

  0001d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 82   :         ++_Ptr;

  00023	83 c6 04	 add	 esi, 4

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]

; 166  :         return _Ptr == _Right._Ptr;

  00029	3b f0		 cmp	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h

; 113  : 	for (auto i = container.begin(); i != container.end(); ++i)

  0002b	75 e4		 jne	 SHORT $LL4@stl_wipe
$LN3@stl_wipe:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0002d	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0002f	3b c8		 cmp	 ecx, eax
  00031	74 03		 je	 SHORT $LN38@stl_wipe

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00033	89 4f 04	 mov	 DWORD PTR [edi+4], ecx
$LN38@stl_wipe:
  00036	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h

; 120  : }

  00037	5e		 pop	 esi
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
??$stl_wipe@V?$vector@PAUSMotionEventData@NMotionEvent@@V?$allocator@PAUSMotionEventData@NMotionEvent@@@std@@@std@@@@YAXAAV?$vector@PAUSMotionEventData@NMotionEvent@@V?$allocator@PAUSMotionEventData@NMotionEvent@@@std@@@std@@@Z ENDP ; stl_wipe<std::vector<NMotionEvent::SMotionEventData *,std::allocator<NMotionEvent::SMotionEventData *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@CRaceMotionData@@1V?$CDynamicPool@VCRaceMotionData@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@CRaceMotionData@@1V?$CDynamicPool@VCRaceMotionData@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CRaceMotionData::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CRaceMotionData@@1V?$CDynamicPool@VCRaceMotionData@@@@A ; CRaceMotionData::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPool@VCRaceMotionData@@@@UAE@XZ ; CDynamicPool<CRaceMotionData>::~CDynamicPool<CRaceMotionData>
??__F?ms_kPool@CRaceMotionData@@1V?$CDynamicPool@VCRaceMotionData@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CRaceMotionData::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
;	COMDAT ??__E?ms_kPool@CRaceMotionData@@1V?$CDynamicPool@VCRaceMotionData@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@CRaceMotionData@@1V?$CDynamicPool@VCRaceMotionData@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CRaceMotionData::ms_kPool'', COMDAT

; 7    : CDynamicPool<CRaceMotionData> CRaceMotionData::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@CRaceMotionData@@1V?$CDynamicPool@VCRaceMotionData@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CRaceMotionData::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@CRaceMotionData@@1V?$CDynamicPool@VCRaceMotionData@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CRaceMotionData::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPool@VCRaceMotionData@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPool@VCRaceMotionData@@@@UAEPAXI@Z PROC	; CDynamicPool<CRaceMotionData>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPool@VCRaceMotionData@@@@UAE@XZ ; CDynamicPool<CRaceMotionData>::~CDynamicPool<CRaceMotionData>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPool@VCRaceMotionData@@@@UAEPAXI@Z ENDP	; CDynamicPool<CRaceMotionData>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCRaceMotionData@@V?$allocator@PAVCRaceMotionData@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCRaceMotionData@@V?$allocator@PAVCRaceMotionData@@@std@@@std@@CAXXZ PROC ; std::vector<CRaceMotionData *,std::allocator<CRaceMotionData *> >::_Xlength, COMDAT

; 2169 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCRaceMotionData@@V?$allocator@PAVCRaceMotionData@@@std@@@std@@CAXXZ ENDP ; std::vector<CRaceMotionData *,std::allocator<CRaceMotionData *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Change_array@?$vector@PAVCRaceMotionData@@V?$allocator@PAVCRaceMotionData@@@std@@@std@@AAEXQAPAVCRaceMotionData@@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@PAVCRaceMotionData@@V?$allocator@PAVCRaceMotionData@@@std@@@std@@AAEXQAPAVCRaceMotionData@@II@Z PROC ; std::vector<CRaceMotionData *,std::allocator<CRaceMotionData *> >::_Change_array, COMDAT
; _this$ = ecx

; 2044 :         const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 2045 :         // orphan all iterators, discard old array, acquire new array
; 2046 :         auto& _Al         = _Getal();
; 2047 :         auto& _My_data    = _Mypair._Myval2;
; 2048 :         pointer& _Myfirst = _My_data._Myfirst;
; 2049 :         pointer& _Mylast  = _My_data._Mylast;
; 2050 :         pointer& _Myend   = _My_data._Myend;
; 2051 : 
; 2052 :         _My_data._Orphan_all();
; 2053 : 
; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  00006	8b 06		 mov	 eax, DWORD PTR [esi]
  00008	85 c0		 test	 eax, eax
  0000a	74 2c		 je	 SHORT $LN10@Change_arr

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2056 :             _ASAN_VECTOR_REMOVE;
; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000c	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000f	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00011	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00014	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001a	72 12		 jb	 SHORT $LN21@Change_arr

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001f	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00022	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00024	83 c0 fc	 add	 eax, -4			; fffffffcH
  00027	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002a	77 28		 ja	 SHORT $LN18@Change_arr

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002c	8b c2		 mov	 eax, edx
$LN21@Change_arr:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0002e	51		 push	 ecx
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00035	83 c4 08	 add	 esp, 8
$LN10@Change_arr:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2060 :         _Myfirst = _Newvec;

  00038	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]

; 2061 :         _Mylast  = _Newvec + _Newsize;

  0003b	8b 45 0c	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0003e	89 0e		 mov	 DWORD PTR [esi], ecx
  00040	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00043	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  00046	8b 45 10	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00049	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0004c	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0004f	5e		 pop	 esi

; 2064 :     }

  00050	5d		 pop	 ebp
  00051	c2 0c 00	 ret	 12			; 0000000cH
$LN18@Change_arr:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00054	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN28@Change_arr:
  00059	cc		 int	 3
?_Change_array@?$vector@PAVCRaceMotionData@@V?$allocator@PAVCRaceMotionData@@@std@@@std@@AAEXQAPAVCRaceMotionData@@II@Z ENDP ; std::vector<CRaceMotionData *,std::allocator<CRaceMotionData *> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?reserve@?$vector@PAVCRaceMotionData@@V?$allocator@PAVCRaceMotionData@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newcapacity$ = 8					; size = 4
__Size$1$ = 8						; size = 4
?reserve@?$vector@PAVCRaceMotionData@@V?$allocator@PAVCRaceMotionData@@@std@@@std@@QAEXI@Z PROC ; std::vector<CRaceMotionData *,std::allocator<CRaceMotionData *> >::reserve, COMDAT
; _this$ = ecx

; 1708 :     _CONSTEXPR20 void reserve(_CRT_GUARDOVERFLOW size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1709 :         // increase capacity to _Newcapacity (without geometric growth), provide strong guarantee
; 1710 :         if (_Newcapacity > capacity()) { // something to do (reserve() never shrinks)

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Newcapacity$[ebp]

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	8b 16		 mov	 edx, DWORD PTR [esi]
  0000e	2b c2		 sub	 eax, edx
  00010	c1 f8 02	 sar	 eax, 2

; 1709 :         // increase capacity to _Newcapacity (without geometric growth), provide strong guarantee
; 1710 :         if (_Newcapacity > capacity()) { // something to do (reserve() never shrinks)

  00013	3b c8		 cmp	 ecx, eax
  00015	0f 86 95 00 00
	00		 jbe	 $LN71@reserve

; 1711 :             if (_Newcapacity > max_size()) {

  0001b	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00021	0f 87 93 00 00
	00		 ja	 $LN97@reserve

; 1634 :         const auto _Size = static_cast<size_type>(_Mylast - _Myfirst);

  00027	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002a	53		 push	 ebx
  0002b	2b c2		 sub	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 122  :     return _Count * _Ty_size;

  0002d	8d 1c 8d 00 00
	00 00		 lea	 ebx, DWORD PTR [ecx*4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1634 :         const auto _Size = static_cast<size_type>(_Mylast - _Myfirst);

  00034	c1 f8 02	 sar	 eax, 2
  00037	89 45 08	 mov	 DWORD PTR __Size$1$[ebp], eax
  0003a	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  0003b	85 db		 test	 ebx, ebx
  0003d	75 04		 jne	 SHORT $LN20@reserve

; 228  :         return nullptr;

  0003f	33 ff		 xor	 edi, edi
  00041	eb 1a		 jmp	 SHORT $LN19@reserve
$LN20@reserve:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00043	53		 push	 ebx
  00044	81 fb 00 10 00
	00		 cmp	 ebx, 4096		; 00001000H
  0004a	72 07		 jb	 SHORT $LN21@reserve

; 252  :             // boost the alignment of big allocations to help autovectorization
; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004c	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00051	eb 05		 jmp	 SHORT $LN95@reserve
$LN21@reserve:

; 136  :         return ::operator new(_Bytes);

  00053	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN95@reserve:

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  00058	8b f8		 mov	 edi, eax
  0005a	83 c4 04	 add	 esp, 4
$LN19@reserve:
  0005d	57		 push	 edi
  0005e	ff 76 04	 push	 DWORD PTR [esi+4]
  00061	ff 36		 push	 DWORD PTR [esi]
  00063	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCRaceMotionData@@PAPAV1@@std@@YAPAPAVCRaceMotionData@@PAPAV1@00@Z ; std::_Copy_memmove<CRaceMotionData * *,CRaceMotionData * *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  00068	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  0006a	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  0006d	85 c0		 test	 eax, eax
  0006f	74 2c		 je	 SHORT $LN47@reserve

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2056 :             _ASAN_VECTOR_REMOVE;
; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00071	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00074	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00076	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00079	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0007f	72 12		 jb	 SHORT $LN58@reserve

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00081	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00084	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00087	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00089	83 c0 fc	 add	 eax, -4			; fffffffcH
  0008c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0008f	77 24		 ja	 SHORT $LN55@reserve

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00091	8b c2		 mov	 eax, edx
$LN58@reserve:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00093	51		 push	 ecx
  00094	50		 push	 eax
  00095	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0009a	83 c4 08	 add	 esp, 8
$LN47@reserve:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2061 :         _Mylast  = _Newvec + _Newsize;

  0009d	8b 45 08	 mov	 eax, DWORD PTR __Size$1$[ebp]
  000a0	89 3e		 mov	 DWORD PTR [esi], edi
  000a2	8d 04 87	 lea	 eax, DWORD PTR [edi+eax*4]
  000a5	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  000a8	8d 04 3b	 lea	 eax, DWORD PTR [ebx+edi]
  000ab	5f		 pop	 edi
  000ac	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000af	5b		 pop	 ebx
$LN71@reserve:
  000b0	5e		 pop	 esi

; 1713 :             }
; 1714 : 
; 1715 :             _Reallocate<_Reallocation_policy::_At_least>(_Newcapacity);
; 1716 :         }
; 1717 :     }

  000b1	5d		 pop	 ebp
  000b2	c2 04 00	 ret	 4
$LN55@reserve:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000b5	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN97@reserve:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1712 :                 _Xlength();

  000ba	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCRaceMotionData@@V?$allocator@PAVCRaceMotionData@@@std@@@std@@CAXXZ ; std::vector<CRaceMotionData *,std::allocator<CRaceMotionData *> >::_Xlength
$LN94@reserve:
  000bf	cc		 int	 3
?reserve@?$vector@PAVCRaceMotionData@@V?$allocator@PAVCRaceMotionData@@@std@@@std@@QAEXI@Z ENDP ; std::vector<CRaceMotionData *,std::allocator<CRaceMotionData *> >::reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?push_back@?$vector@PAVCRaceMotionData@@V?$allocator@PAVCRaceMotionData@@@std@@@std@@QAEXABQAVCRaceMotionData@@@Z
_TEXT	SEGMENT
__Oldsize$1$ = -12					; size = 4
tv583 = -12						; size = 4
__Newsize$1$ = -8					; size = 4
__Whereptr$1$ = -4					; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@PAVCRaceMotionData@@V?$allocator@PAVCRaceMotionData@@@std@@@std@@QAEXABQAVCRaceMotionData@@@Z PROC ; std::vector<CRaceMotionData *,std::allocator<CRaceMotionData *> >::push_back, COMDAT
; _this$ = ecx

; 917  :     _CONSTEXPR20 void push_back(const _Ty& _Val) { // insert element at end, provide strong guarantee

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi

; 829  :         if (_Mylast != _My_data._Myend) {

  0000b	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0000e	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00011	89 4d fc	 mov	 DWORD PTR __Whereptr$1$[ebp], ecx
  00014	3b ca		 cmp	 ecx, edx
  00016	74 14		 je	 SHORT $LN4@push_back

; 845  :             _STD _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00018	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0001b	8b 00		 mov	 eax, DWORD PTR [eax]
  0001d	89 01		 mov	 DWORD PTR [ecx], eax

; 846  :         } else {
; 847  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 848  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 849  :             _ASAN_VECTOR_RELEASE_GUARD;
; 850  :         }
; 851  : 
; 852  :         _Orphan_range(_Mylast, _Mylast);
; 853  :         _Ty& _Result = *_Mylast;
; 854  :         ++_Mylast;

  0001f	83 46 04 04	 add	 DWORD PTR [esi+4], 4

; 919  :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
$LN4@push_back:

; 869  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  0002c	8b 3e		 mov	 edi, DWORD PTR [esi]
  0002e	8b c1		 mov	 eax, ecx
  00030	2b c7		 sub	 eax, edi
  00032	c1 f8 02	 sar	 eax, 2
  00035	89 45 f4	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 870  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);
; 871  : 
; 872  :         if (_Oldsize == max_size()) {

  00038	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  0003d	0f 84 c0 00 00
	00		 je	 $LN106@push_back

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00043	2b d7		 sub	 edx, edi

; 876  :         const size_type _Newsize = _Oldsize + 1;

  00045	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00048	c1 fa 02	 sar	 edx, 2

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0004b	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  00050	8b fa		 mov	 edi, edx

; 876  :         const size_type _Newsize = _Oldsize + 1;

  00052	89 5d f8	 mov	 DWORD PTR __Newsize$1$[ebp], ebx

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00055	d1 ef		 shr	 edi, 1
  00057	2b c7		 sub	 eax, edi
  00059	3b d0		 cmp	 edx, eax
  0005b	76 12		 jbe	 SHORT $LN15@push_back

; 1997 :             return _Max; // geometric growth would overflow

  0005d	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  00062	bb ff ff ff 3f	 mov	 ebx, 1073741823		; 3fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00067	50		 push	 eax
  00068	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0006d	eb 38		 jmp	 SHORT $LN104@push_back
$LN15@push_back:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0006f	8d 04 17	 lea	 eax, DWORD PTR [edi+edx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  00072	3b c3		 cmp	 eax, ebx
  00074	0f 43 d8	 cmovae	 ebx, eax
  00077	81 fb ff ff ff
	3f		 cmp	 ebx, 1073741823		; 3fffffffH
  0007d	0f 87 85 00 00
	00		 ja	 $LN107@push_back

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  00083	8d 04 9d 00 00
	00 00		 lea	 eax, DWORD PTR [ebx*4]

; 227  :     if (_Bytes == 0) {

  0008a	85 c0		 test	 eax, eax
  0008c	75 04		 jne	 SHORT $LN30@push_back

; 228  :         return nullptr;

  0008e	33 ff		 xor	 edi, edi
  00090	eb 1d		 jmp	 SHORT $LN29@push_back
$LN30@push_back:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00092	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00097	72 08		 jb	 SHORT $LN31@push_back

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0009f	eb 06		 jmp	 SHORT $LN104@push_back
$LN31@push_back:

; 136  :         return ::operator new(_Bytes);

  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN104@push_back:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 885  :         _Alty_traits::construct(_Al, _STD _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000a7	8b 4d fc	 mov	 ecx, DWORD PTR __Whereptr$1$[ebp]
  000aa	8b f8		 mov	 edi, eax
  000ac	83 c4 04	 add	 esp, 4
$LN29@push_back:
  000af	8b 45 f4	 mov	 eax, DWORD PTR __Oldsize$1$[ebp]
  000b2	8d 14 87	 lea	 edx, DWORD PTR [edi+eax*4]
  000b5	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  000b8	89 55 f4	 mov	 DWORD PTR tv583[ebp], edx
  000bb	8b 00		 mov	 eax, DWORD PTR [eax]
  000bd	89 02		 mov	 DWORD PTR [edx], eax

; 886  :         _Constructed_first = _Newvec + _Whereoff;
; 887  : 
; 888  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000bf	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000c2	8b 16		 mov	 edx, DWORD PTR [esi]
  000c4	3b c8		 cmp	 ecx, eax
  000c6	75 04		 jne	 SHORT $LN10@push_back
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000c8	8b cf		 mov	 ecx, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 894  :         } else { // provide basic guarantee

  000ca	eb 17		 jmp	 SHORT $LN59@push_back
$LN10@push_back:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000cc	57		 push	 edi
  000cd	51		 push	 ecx
  000ce	52		 push	 edx
  000cf	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCRaceMotionData@@PAPAV1@@std@@YAPAPAVCRaceMotionData@@PAPAV1@00@Z ; std::_Copy_memmove<CRaceMotionData * *,CRaceMotionData * *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000d4	8b 4d f4	 mov	 ecx, DWORD PTR tv583[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000d7	83 c4 0c	 add	 esp, 12			; 0000000cH
  000da	8b 55 fc	 mov	 edx, DWORD PTR __Whereptr$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000dd	83 c1 04	 add	 ecx, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000e0	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
$LN59@push_back:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 900  :         _Guard._New_begin = nullptr;

  000e3	51		 push	 ecx
  000e4	50		 push	 eax
  000e5	52		 push	 edx
  000e6	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCRaceMotionData@@PAPAV1@@std@@YAPAPAVCRaceMotionData@@PAPAV1@00@Z ; std::_Copy_memmove<CRaceMotionData * *,CRaceMotionData * *>
  000eb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 901  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  000ee	8b ce		 mov	 ecx, esi
  000f0	53		 push	 ebx
  000f1	ff 75 f8	 push	 DWORD PTR __Newsize$1$[ebp]
  000f4	57		 push	 edi
  000f5	e8 00 00 00 00	 call	 ?_Change_array@?$vector@PAVCRaceMotionData@@V?$allocator@PAVCRaceMotionData@@@std@@@std@@AAEXQAPAVCRaceMotionData@@II@Z ; std::vector<CRaceMotionData *,std::allocator<CRaceMotionData *> >::_Change_array

; 919  :     }

  000fa	5f		 pop	 edi
  000fb	5e		 pop	 esi
  000fc	5b		 pop	 ebx
  000fd	8b e5		 mov	 esp, ebp
  000ff	5d		 pop	 ebp
  00100	c2 04 00	 ret	 4
$LN106@push_back:

; 873  :             _Xlength();

  00103	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCRaceMotionData@@V?$allocator@PAVCRaceMotionData@@@std@@@std@@CAXXZ ; std::vector<CRaceMotionData *,std::allocator<CRaceMotionData *> >::_Xlength
$LN107@push_back:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  00108	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN103@push_back:
  0010d	cc		 int	 3
?push_back@?$vector@PAVCRaceMotionData@@V?$allocator@PAVCRaceMotionData@@@std@@@std@@QAEXABQAVCRaceMotionData@@@Z ENDP ; std::vector<CRaceMotionData *,std::allocator<CRaceMotionData *> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPool@VCRaceMotionData@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPool@VCRaceMotionData@@@@UAE@XZ PROC	; CDynamicPool<CRaceMotionData>::~CDynamicPool<CRaceMotionData>, COMDAT
; _this$ = ecx

; 18   : 		{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDynamicPool@VCRaceMotionData@@@@6B@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000c	85 c0		 test	 eax, eax
  0000e	74 41		 je	 SHORT $LN8@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00013	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 12		 jb	 SHORT $LN27@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00020	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00023	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00026	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00028	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002e	77 6b		 ja	 SHORT $LN53@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b c2		 mov	 eax, edx
$LN27@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00039	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00040	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00043	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 2082 :             _Myend   = nullptr;

  0004a	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN8@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00051	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00054	85 c0		 test	 eax, eax
  00056	74 41		 je	 SHORT $LN37@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00058	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0005b	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0005d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00060	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00066	72 12		 jb	 SHORT $LN56@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00068	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0006b	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0006e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00070	83 c0 fc	 add	 eax, -4			; fffffffcH
  00073	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00076	77 23		 ja	 SHORT $LN53@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00078	8b c2		 mov	 eax, edx
$LN56@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0007a	51		 push	 ecx
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00081	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00088	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  0008b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 2082 :             _Myend   = nullptr;

  00092	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN37@CDynamicPo:
  00099	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 26   : 		}

  0009a	c3		 ret	 0
$LN53@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0009b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN67@CDynamicPo:
  000a0	cc		 int	 3
??1?$CDynamicPool@VCRaceMotionData@@@@UAE@XZ ENDP	; CDynamicPool<CRaceMotionData>::~CDynamicPool<CRaceMotionData>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCRaceMotionData@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCRaceMotionData@@UAEPAXI@Z PROC			; CRaceMotionData::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CRaceMotionData@@UAE@XZ ; CRaceMotionData::~CRaceMotionData
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN5@scalar
  00011	68 c0 00 00 00	 push	 192			; 000000c0H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCRaceMotionData@@UAEPAXI@Z ENDP			; CRaceMotionData::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xlength@?$vector@PAUSMotionEventData@NMotionEvent@@V?$allocator@PAUSMotionEventData@NMotionEvent@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAUSMotionEventData@NMotionEvent@@V?$allocator@PAUSMotionEventData@NMotionEvent@@@std@@@std@@CAXXZ PROC ; std::vector<NMotionEvent::SMotionEventData *,std::allocator<NMotionEvent::SMotionEventData *> >::_Xlength, COMDAT

; 2169 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAUSMotionEventData@NMotionEvent@@V?$allocator@PAUSMotionEventData@NMotionEvent@@@std@@@std@@CAXXZ ENDP ; std::vector<NMotionEvent::SMotionEventData *,std::allocator<NMotionEvent::SMotionEventData *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
;	COMDAT ?SetType@CRaceMotionData@@IAEXI@Z
_TEXT	SEGMENT
_eType$ = 8						; size = 4
?SetType@CRaceMotionData@@IAEXI@Z PROC			; CRaceMotionData::SetType, COMDAT
; _this$ = ecx

; 154  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 155  : 	m_eType=eType;

  00003	8b 45 08	 mov	 eax, DWORD PTR _eType$[ebp]
  00006	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 156  : 
; 157  : 	switch (m_eType)

  00009	83 e8 03	 sub	 eax, 3
  0000c	74 15		 je	 SHORT $LN4@SetType
  0000e	83 e8 01	 sub	 eax, 1
  00011	74 10		 je	 SHORT $LN4@SetType
  00013	83 e8 04	 sub	 eax, 4
  00016	74 0b		 je	 SHORT $LN4@SetType

; 158  : 	{
; 159  : 		case TYPE_ATTACK:
; 160  : 		case TYPE_COMBO:
; 161  : 		case TYPE_SKILL:
; 162  : 			m_isLock=TRUE;
; 163  : 			break;
; 164  : 		default:
; 165  : 			m_isLock=FALSE;
; 166  : 			break;
; 167  : 	}
; 168  : }

  00018	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
$LN4@SetType:
  00023	c7 41 0c 01 00
	00 00		 mov	 DWORD PTR [ecx+12], 1
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?SetType@CRaceMotionData@@IAEXI@Z ENDP			; CRaceMotionData::SetType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
;	COMDAT ?LoadSoundScriptData@CRaceMotionData@@QAE_NPBD@Z
_TEXT	SEGMENT
_SoundDataVector$ = -24					; size = 12
__$EHRec$ = -12						; size = 12
_c_szFileName$ = 8					; size = 4
$T2 = 11						; size = 1
?LoadSoundScriptData@CRaceMotionData@@QAE_NPBD@Z PROC	; CRaceMotionData::LoadSoundScriptData, COMDAT
; _this$ = ecx

; 576  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadSoundScriptData@CRaceMotionData@@QAE_NPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0002a	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _SoundDataVector$[ebp], 0
  00031	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _SoundDataVector$[ebp+4], 0
  00038	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _SoundDataVector$[ebp+8], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 578  : 	if (!NSound::LoadSoundInformationPiece(c_szFileName, SoundDataVector))

  0003f	6a 00		 push	 0
  00041	8d 45 e8	 lea	 eax, DWORD PTR _SoundDataVector$[ebp]
  00044	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004b	50		 push	 eax
  0004c	ff 75 08	 push	 DWORD PTR _c_szFileName$[ebp]
  0004f	e8 00 00 00 00	 call	 ?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z ; NSound::LoadSoundInformationPiece
  00054	83 c4 0c	 add	 esp, 12			; 0000000cH
  00057	84 c0		 test	 al, al
  00059	75 05		 jne	 SHORT $LN2@LoadSoundS
  0005b	88 45 0b	 mov	 BYTE PTR $T2[ebp], al
  0005e	eb 17		 jmp	 SHORT $LN5@LoadSoundS
$LN2@LoadSoundS:

; 579  : 	{
; 580  : 		return false;
; 581  : 	}
; 582  : 
; 583  : 	NSound::DataToInstance(SoundDataVector, &m_SoundInstanceVector);

  00060	8d 86 b0 00 00
	00		 lea	 eax, DWORD PTR [esi+176]
  00066	50		 push	 eax
  00067	8d 45 e8	 lea	 eax, DWORD PTR _SoundDataVector$[ebp]
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ?DataToInstance@NSound@@YAXABV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@PAV?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@3@@Z ; NSound::DataToInstance
  00070	83 c4 08	 add	 esp, 8

; 584  : 	return true;

  00073	c6 45 0b 01	 mov	 BYTE PTR $T2[ebp], 1
$LN5@LoadSoundS:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00077	8b 75 e8	 mov	 esi, DWORD PTR _SoundDataVector$[ebp]
  0007a	85 f6		 test	 esi, esi
  0007c	0f 84 a7 00 00
	00		 je	 $LN32@LoadSoundS

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);

  00082	8b 5d ec	 mov	 ebx, DWORD PTR _SoundDataVector$[ebp+4]
  00085	3b f3		 cmp	 esi, ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1098 :         for (; _First != _Last; ++_First) {

  00087	74 58		 je	 SHORT $LN117@LoadSoundS
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);

  00089	83 c6 18	 add	 esi, 24			; 00000018H
  0008c	0f 1f 40 00	 npad	 4
$LL38@LoadSoundS:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00090	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00092	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00095	76 2c		 jbe	 SHORT $LN120@LoadSoundS
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00097	8b 46 ec	 mov	 eax, DWORD PTR [esi-20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0009a	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0009b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000a1	72 16		 jb	 SHORT $LN83@LoadSoundS

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000a3	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000a6	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000a9	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ab	83 c0 fc	 add	 eax, -4			; fffffffcH
  000ae	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000b1	0f 87 89 00 00
	00		 ja	 $LN107@LoadSoundS

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000b7	8b c2		 mov	 eax, edx
$LN83@LoadSoundS:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000b9	51		 push	 ecx
  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000c0	83 c4 08	 add	 esp, 8
$LN120@LoadSoundS:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  000c3	c7 46 fc 00 00
	00 00		 mov	 DWORD PTR [esi-4], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  000ca	c7 06 0f 00 00
	00		 mov	 DWORD PTR [esi], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000d0	c6 46 ec 00	 mov	 BYTE PTR [esi-20], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1098 :         for (; _First != _Last; ++_First) {

  000d4	83 c6 1c	 add	 esi, 28			; 0000001cH
  000d7	8d 46 e8	 lea	 eax, DWORD PTR [esi-24]
  000da	3b c3		 cmp	 eax, ebx
  000dc	75 b2		 jne	 SHORT $LL38@LoadSoundS
  000de	8b 75 e8	 mov	 esi, DWORD PTR _SoundDataVector$[ebp]
$LN117@LoadSoundS:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e1	8b 4d f0	 mov	 ecx, DWORD PTR _SoundDataVector$[ebp+8]
  000e4	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  000e9	2b ce		 sub	 ecx, esi
  000eb	f7 e9		 imul	 ecx
  000ed	03 d1		 add	 edx, ecx
  000ef	c1 fa 04	 sar	 edx, 4
  000f2	8b c2		 mov	 eax, edx
  000f4	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000f7	03 c2		 add	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000f9	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  00100	2b c8		 sub	 ecx, eax
  00102	8b c6		 mov	 eax, esi
  00104	c1 e1 02	 shl	 ecx, 2

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00107	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0010d	72 10		 jb	 SHORT $LN110@LoadSoundS

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0010f	8b 70 fc	 mov	 esi, DWORD PTR [eax-4]
  00112	83 c1 23	 add	 ecx, 35			; 00000023H
  00115	2b c6		 sub	 eax, esi

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00117	83 c0 fc	 add	 eax, -4			; fffffffcH
  0011a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0011d	77 21		 ja	 SHORT $LN107@LoadSoundS
$LN110@LoadSoundS:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0011f	51		 push	 ecx
  00120	56		 push	 esi
  00121	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00126	83 c4 08	 add	 esp, 8
$LN32@LoadSoundS:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 584  : 	return true;

  00129	8a 45 0b	 mov	 al, BYTE PTR $T2[ebp]

; 585  : }

  0012c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0012f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00136	59		 pop	 ecx
  00137	5f		 pop	 edi
  00138	5e		 pop	 esi
  00139	5b		 pop	 ebx
  0013a	8b e5		 mov	 esp, ebp
  0013c	5d		 pop	 ebp
  0013d	c2 04 00	 ret	 4
$LN107@LoadSoundS:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00140	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN122@LoadSoundS:
  00145	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadSoundScriptData@CRaceMotionData@@QAE_NPBD@Z$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR _SoundDataVector$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@QAE@XZ ; std::vector<NSound::SSoundData,std::allocator<NSound::SSoundData> >::~vector<NSound::SSoundData,std::allocator<NSound::SSoundData> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?LoadSoundScriptData@CRaceMotionData@@QAE_NPBD@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadSoundScriptData@CRaceMotionData@@QAE_NPBD@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadSoundScriptData@CRaceMotionData@@QAE_NPBD@Z ENDP	; CRaceMotionData::LoadSoundScriptData
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File C:\Marty 5.5\Src-Client\Client\eterLib\TextFileLoader.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File C:\Marty 5.5\Src-Client\Client\eterLib\TextFileLoader.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File C:\Marty 5.5\Src-Client\Client\eterLib\TextFileLoader.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\GameType.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File C:\Marty 5.5\Src-Client\Client\eterLib\TextFileLoader.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
;	COMDAT ?LoadMotionData@CRaceMotionData@@QAE_NPBD@Z
_TEXT	SEGMENT
_GotoChild$2 = -136					; size = 4
_c_fFrameTime$1$ = -132					; size = 4
_dwMotionEventDataCount$3 = -128			; size = 4
_this$GSCopy$1$ = -124					; size = 4
_pTokenVector$ = -120					; size = 4
_c_szFileName$GSCopy$1$ = -116				; size = 4
_c_szHeader$1$ = -116					; size = 4
tv5974 = -116						; size = 4
_j$1$ = -112						; size = 4
$T4 = -112						; size = 4
$T5 = -108						; size = 4
$T6 = -108						; size = 4
$T7 = -108						; size = 4
$T8 = -108						; size = 4
$T9 = -108						; size = 4
$T10 = -108						; size = 4
$T11 = -108						; size = 4
$T12 = -108						; size = 4
$T13 = -108						; size = 4
$T14 = -101						; size = 1
__Result$1$ = -100					; size = 4
$T15 = -100						; size = 4
_i$1$ = -100						; size = 4
_fy$ = -100						; size = 4
tv6021 = -96						; size = 4
_fx$ = -96						; size = 4
tv6022 = -96						; size = 4
$T16 = -96						; size = 4
__Result$1$ = -96					; size = 4
_iType$17 = -96						; size = 4
tv6013 = -92						; size = 4
tv6015 = -92						; size = 4
tv6016 = -92						; size = 4
tv6017 = -92						; size = 4
tv6018 = -92						; size = 4
tv6019 = -92						; size = 4
tv6020 = -92						; size = 4
__Result$1$ = -92					; size = 4
__My_data$2$ = -92					; size = 4
_fz$ = -92						; size = 4
_strNodeName$ = -88					; size = 24
_strSoundFileNameTemp$ = -64				; size = 24
$T18 = -40						; size = 24
$T19 = -40						; size = 24
$T20 = -40						; size = 24
$T21 = -40						; size = 24
$T22 = -40						; size = 24
$T23 = -40						; size = 24
$T24 = -40						; size = 24
$T25 = -40						; size = 24
$T26 = -40						; size = 24
$T27 = -40						; size = 24
$T28 = -40						; size = 24
$T29 = -40						; size = 24
$T30 = -40						; size = 24
$T31 = -40						; size = 24
$T32 = -40						; size = 24
_pos$33 = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szFileName$ = 8					; size = 4
?LoadMotionData@CRaceMotionData@@QAE_NPBD@Z PROC	; CRaceMotionData::LoadMotionData, COMDAT
; _this$ = ecx

; 323  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadMotionData@CRaceMotionData@@QAE_NPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b f1		 mov	 esi, ecx
  0002c	89 75 84	 mov	 DWORD PTR _this$GSCopy$1$[ebp], esi

; 324  : 	const float c_fFrameTime = 1.0f / g_fGameFPS;

  0002f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00037	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?g_fGameFPS@@3MA
  0003f	8b 45 08	 mov	 eax, DWORD PTR _c_szFileName$[ebp]

; 325  : 
; 326  : 	CTextFileLoader* pkTextFileLoader=CTextFileLoader::Cache(c_szFileName);

  00042	50		 push	 eax
  00043	89 45 8c	 mov	 DWORD PTR _c_szFileName$GSCopy$1$[ebp], eax
  00046	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _c_fFrameTime$1$[ebp], xmm0
  0004e	e8 00 00 00 00	 call	 ?Cache@CTextFileLoader@@SAPAV1@PBD@Z ; CTextFileLoader::Cache
  00053	8b f8		 mov	 edi, eax
  00055	83 c4 04	 add	 esp, 4

; 327  : 	if (!pkTextFileLoader)

  00058	85 ff		 test	 edi, edi
  0005a	0f 84 f4 01 00
	00		 je	 $LN1659@LoadMotion

; 328  : 		return false;
; 329  : 
; 330  : 	CTextFileLoader& rkTextFileLoader=*pkTextFileLoader;
; 331  : 
; 332  : 	if (rkTextFileLoader.IsEmpty())

  00060	8b cf		 mov	 ecx, edi
  00062	e8 00 00 00 00	 call	 ?IsEmpty@CTextFileLoader@@QAE_NXZ ; CTextFileLoader::IsEmpty
  00067	84 c0		 test	 al, al
  00069	0f 85 e5 01 00
	00		 jne	 $LN1659@LoadMotion

; 333  : 		return false;
; 334  : 
; 335  : 	rkTextFileLoader.SetTop();

  0006f	8b cf		 mov	 ecx, edi
  00071	e8 00 00 00 00	 call	 ?SetTop@CTextFileLoader@@QAEXXZ ; CTextFileLoader::SetTop
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00076	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_0P@IGAOIDID@motionfilename@+8
  0007b	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0007e	0f 11 45 d8	 movups	 XMMWORD PTR $T18[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00082	89 45 e0	 mov	 DWORD PTR $T18[ebp+8], eax
  00085	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0P@IGAOIDID@motionfilename@
  0008d	66 a1 0c 00 00
	00		 mov	 ax, WORD PTR ??_C@_0P@IGAOIDID@motionfilename@+12
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  00093	c7 45 e8 0e 00
	00 00		 mov	 DWORD PTR $T18[ebp+16], 14 ; 0000000eH

; 867  :             _My_data._Myres  = _Small_string_capacity;

  0009a	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T18[ebp+20], 15 ; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000a1	66 0f d6 45 d8	 movq	 QWORD PTR $T18[ebp], xmm0
  000a6	66 89 45 e4	 mov	 WORD PTR $T18[ebp+12], ax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  000aa	c6 45 e6 00	 mov	 BYTE PTR $T18[ebp+14], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 337  : 	if (!rkTextFileLoader.GetTokenString("motionfilename", &m_strMotionFileName))

  000ae	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  000b1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000b8	50		 push	 eax
  000b9	8d 45 d8	 lea	 eax, DWORD PTR $T18[ebp]
  000bc	8b cf		 mov	 ecx, edi
  000be	50		 push	 eax
  000bf	e8 00 00 00 00	 call	 ?GetTokenString@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV23@@Z ; CTextFileLoader::GetTokenString
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  000c4	8b 4d ec	 mov	 ecx, DWORD PTR $T18[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 337  : 	if (!rkTextFileLoader.GetTokenString("motionfilename", &m_strMotionFileName))

  000c7	89 45 a0	 mov	 DWORD PTR tv6022[ebp], eax
  000ca	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  000d1	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  000d4	76 2f		 jbe	 SHORT $LN172@LoadMotion
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000d6	8b 55 d8	 mov	 edx, DWORD PTR $T18[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  000d9	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000da	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000dc	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000e2	72 14		 jb	 SHORT $LN183@LoadMotion

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000e4	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000e7	83 c1 23	 add	 ecx, 35			; 00000023H
  000ea	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ec	83 c0 fc	 add	 eax, -4			; fffffffcH
  000ef	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000f2	0f 87 e7 0e 00
	00		 ja	 $LN451@LoadMotion
$LN183@LoadMotion:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000f8	51		 push	 ecx
  000f9	52		 push	 edx
  000fa	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000ff	8b 45 a0	 mov	 eax, DWORD PTR tv6022[ebp]
  00102	83 c4 08	 add	 esp, 8
$LN172@LoadMotion:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 337  : 	if (!rkTextFileLoader.GetTokenString("motionfilename", &m_strMotionFileName))

  00105	85 c0		 test	 eax, eax
  00107	0f 84 47 01 00
	00		 je	 $LN1659@LoadMotion
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0010d	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_0P@CAAIIAIN@motionduration@+8
  00112	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00115	0f 11 45 d8	 movups	 XMMWORD PTR $T19[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00119	89 45 e0	 mov	 DWORD PTR $T19[ebp+8], eax
  0011c	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0P@CAAIIAIN@motionduration@
  00124	66 a1 0c 00 00
	00		 mov	 ax, WORD PTR ??_C@_0P@CAAIIAIN@motionduration@+12
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  0012a	c7 45 e8 0e 00
	00 00		 mov	 DWORD PTR $T19[ebp+16], 14 ; 0000000eH

; 867  :             _My_data._Myres  = _Small_string_capacity;

  00131	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T19[ebp+20], 15 ; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00138	66 0f d6 45 d8	 movq	 QWORD PTR $T19[ebp], xmm0
  0013d	66 89 45 e4	 mov	 WORD PTR $T19[ebp+12], ax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00141	c6 45 e6 00	 mov	 BYTE PTR $T19[ebp+14], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 340  : 	if (!rkTextFileLoader.GetTokenFloat("motionduration", &m_fMotionDuration))

  00145	8d 46 44	 lea	 eax, DWORD PTR [esi+68]
  00148	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0014f	50		 push	 eax
  00150	8d 45 d8	 lea	 eax, DWORD PTR $T19[ebp]
  00153	8b cf		 mov	 ecx, edi
  00155	50		 push	 eax
  00156	e8 00 00 00 00	 call	 ?GetTokenFloat@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAM@Z ; CTextFileLoader::GetTokenFloat
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0015b	8b 4d ec	 mov	 ecx, DWORD PTR $T19[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 340  : 	if (!rkTextFileLoader.GetTokenFloat("motionduration", &m_fMotionDuration))

  0015e	89 45 a0	 mov	 DWORD PTR tv6021[ebp], eax
  00161	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00168	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0016b	76 2f		 jbe	 SHORT $LN337@LoadMotion
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0016d	8b 55 d8	 mov	 edx, DWORD PTR $T19[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00170	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00171	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00173	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00179	72 14		 jb	 SHORT $LN348@LoadMotion

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0017b	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0017e	83 c1 23	 add	 ecx, 35			; 00000023H
  00181	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00183	83 c0 fc	 add	 eax, -4			; fffffffcH
  00186	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00189	0f 87 55 0e 00
	00		 ja	 $LN1677@LoadMotion
$LN348@LoadMotion:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0018f	51		 push	 ecx
  00190	52		 push	 edx
  00191	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00196	8b 45 a0	 mov	 eax, DWORD PTR tv6021[ebp]
  00199	83 c4 08	 add	 esp, 8
$LN337@LoadMotion:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 340  : 	if (!rkTextFileLoader.GetTokenFloat("motionduration", &m_fMotionDuration))

  0019c	85 c0		 test	 eax, eax
  0019e	0f 84 b0 00 00
	00		 je	 $LN1659@LoadMotion
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  001a4	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_0N@JBNPINGA@accumulation@+8
  001a9	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  001ac	0f 11 45 d8	 movups	 XMMWORD PTR $T20[ebp], xmm0

; 866  :             _My_data._Mysize = _Count;

  001b0	c7 45 e8 0c 00
	00 00		 mov	 DWORD PTR $T20[ebp+16], 12 ; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  001b7	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0N@JBNPINGA@accumulation@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 867  :             _My_data._Myres  = _Small_string_capacity;

  001bf	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T20[ebp+20], 15 ; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  001c6	66 0f d6 45 d8	 movq	 QWORD PTR $T20[ebp], xmm0
  001cb	89 45 e0	 mov	 DWORD PTR $T20[ebp+8], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  001ce	c6 45 e4 00	 mov	 BYTE PTR $T20[ebp+12], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 345  : 	if (rkTextFileLoader.GetTokenVector("accumulation", &pTokenVector))

  001d2	8d 45 88	 lea	 eax, DWORD PTR _pTokenVector$[ebp]
  001d5	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  001dc	50		 push	 eax
  001dd	8d 45 d8	 lea	 eax, DWORD PTR $T20[ebp]
  001e0	8b cf		 mov	 ecx, edi
  001e2	50		 push	 eax
  001e3	e8 00 00 00 00	 call	 ?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z ; CTextFileLoader::GetTokenVector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  001e8	8b 4d ec	 mov	 ecx, DWORD PTR $T20[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 345  : 	if (rkTextFileLoader.GetTokenVector("accumulation", &pTokenVector))

  001eb	89 45 a0	 mov	 DWORD PTR $T16[ebp], eax
  001ee	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  001f5	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  001f8	76 2f		 jbe	 SHORT $LN621@LoadMotion
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001fa	8b 55 d8	 mov	 edx, DWORD PTR $T20[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  001fd	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001fe	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00200	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00206	72 14		 jb	 SHORT $LN632@LoadMotion

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00208	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0020b	83 c1 23	 add	 ecx, 35			; 00000023H
  0020e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00210	83 c0 fc	 add	 eax, -4			; fffffffcH
  00213	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00216	0f 87 cd 0d 00
	00		 ja	 $LN1678@LoadMotion
$LN632@LoadMotion:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0021c	51		 push	 ecx
  0021d	52		 push	 edx
  0021e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00223	8b 45 a0	 mov	 eax, DWORD PTR $T16[ebp]
  00226	83 c4 08	 add	 esp, 8
$LN621@LoadMotion:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 345  : 	if (rkTextFileLoader.GetTokenVector("accumulation", &pTokenVector))

  00229	85 c0		 test	 eax, eax
  0022b	0f 84 cc 00 00
	00		 je	 $LN14@LoadMotion
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00231	8b 4d 88	 mov	 ecx, DWORD PTR _pTokenVector$[ebp]
  00234	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00237	2b 01		 sub	 eax, DWORD PTR [ecx]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 347  : 		if (pTokenVector->size() != 3)

  00239	83 e8 48	 sub	 eax, 72			; 00000048H
  0023c	83 f8 18	 cmp	 eax, 24			; 00000018H
  0023f	72 32		 jb	 SHORT $LN15@LoadMotion

; 348  : 		{
; 349  : 			TraceError("CRaceMotioNData::LoadMotionData : syntax error on accumulation, vector size %d", pTokenVector->size());

  00241	e8 00 00 00 00	 call	 ?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::size
  00246	50		 push	 eax
  00247	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FGBECHEA@CRaceMotioNData?3?3LoadMotionData@
  0024c	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00251	83 c4 08	 add	 esp, 8
$LN1659@LoadMotion:

; 493  : }

  00254	32 c0		 xor	 al, al
$LN1@LoadMotion:
  00256	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00259	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00260	59		 pop	 ecx
  00261	5f		 pop	 edi
  00262	5e		 pop	 esi
  00263	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00266	33 cd		 xor	 ecx, ebp
  00268	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0026d	8b e5		 mov	 esp, ebp
  0026f	5d		 pop	 ebp
  00270	c2 04 00	 ret	 4
$LN15@LoadMotion:

; 353  : 		TPixelPosition pos(atof(pTokenVector->at(0).c_str()),

  00273	6a 02		 push	 2
  00275	e8 00 00 00 00	 call	 ?at@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::at
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2328 :         return _Mypair._Myval2._Myptr();

  0027a	89 45 a4	 mov	 DWORD PTR __Result$1$[ebp], eax

; 434  :         return _Myres > _Small_string_capacity;

  0027d	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  00281	76 05		 jbe	 SHORT $LN1218@LoadMotion

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00283	8b 00		 mov	 eax, DWORD PTR [eax]
  00285	89 45 a4	 mov	 DWORD PTR __Result$1$[ebp], eax
$LN1218@LoadMotion:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 353  : 		TPixelPosition pos(atof(pTokenVector->at(0).c_str()),

  00288	8b 4d 88	 mov	 ecx, DWORD PTR _pTokenVector$[ebp]
  0028b	6a 01		 push	 1
  0028d	e8 00 00 00 00	 call	 ?at@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::at
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2328 :         return _Mypair._Myval2._Myptr();

  00292	89 45 9c	 mov	 DWORD PTR __Result$1$[ebp], eax

; 434  :         return _Myres > _Small_string_capacity;

  00295	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  00299	76 05		 jbe	 SHORT $LN1228@LoadMotion

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0029b	8b 00		 mov	 eax, DWORD PTR [eax]
  0029d	89 45 9c	 mov	 DWORD PTR __Result$1$[ebp], eax
$LN1228@LoadMotion:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 353  : 		TPixelPosition pos(atof(pTokenVector->at(0).c_str()),

  002a0	8b 4d 88	 mov	 ecx, DWORD PTR _pTokenVector$[ebp]
  002a3	6a 00		 push	 0
  002a5	e8 00 00 00 00	 call	 ?at@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::at
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  002aa	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  002ae	76 02		 jbe	 SHORT $LN1238@LoadMotion

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  002b0	8b 00		 mov	 eax, DWORD PTR [eax]
$LN1238@LoadMotion:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 353  : 		TPixelPosition pos(atof(pTokenVector->at(0).c_str()),

  002b2	50		 push	 eax
  002b3	e8 00 00 00 00	 call	 _atof
  002b8	ff 75 9c	 push	 DWORD PTR __Result$1$[ebp]
  002bb	d9 5d a0	 fstp	 DWORD PTR _fx$[ebp]
  002be	e8 00 00 00 00	 call	 _atof
  002c3	ff 75 a4	 push	 DWORD PTR __Result$1$[ebp]
  002c6	d9 5d 9c	 fstp	 DWORD PTR _fy$[ebp]
  002c9	e8 00 00 00 00	 call	 _atof
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 180  :     x = fx;

  002ce	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _fx$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 357  : 		SetAccumulationPosition(pos);

  002d3	8d 45 e4	 lea	 eax, DWORD PTR _pos$33[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 180  :     x = fx;

  002d6	f3 0f 11 45 e4	 movss	 DWORD PTR _pos$33[ebp], xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 353  : 		TPixelPosition pos(atof(pTokenVector->at(0).c_str()),

  002db	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 181  :     y = fy;

  002de	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _fy$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 357  : 		SetAccumulationPosition(pos);

  002e3	8b ce		 mov	 ecx, esi
  002e5	d9 5d a4	 fstp	 DWORD PTR _fz$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 181  :     y = fy;

  002e8	f3 0f 11 45 e8	 movss	 DWORD PTR _pos$33[ebp+4], xmm0

; 182  :     z = fz;

  002ed	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _fz$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 357  : 		SetAccumulationPosition(pos);

  002f2	50		 push	 eax
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  002f3	f3 0f 11 45 ec	 movss	 DWORD PTR _pos$33[ebp+8], xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 357  : 		SetAccumulationPosition(pos);

  002f8	e8 00 00 00 00	 call	 ?SetAccumulationPosition@CRaceMotionData@@QAEXABUD3DXVECTOR3@@@Z ; CRaceMotionData::SetAccumulationPosition
$LN14@LoadMotion:
  002fd	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 836  :         _My_data._Mysize = 0;

  00300	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _strNodeName$[ebp+16], 0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00307	0f 11 45 a8	 movups	 XMMWORD PTR _strNodeName$[ebp], xmm0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  0030b	c7 45 bc 0f 00
	00 00		 mov	 DWORD PTR _strNodeName$[ebp+20], 15 ; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00312	c6 45 a8 00	 mov	 BYTE PTR _strNodeName$[ebp], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 361  : 	for (DWORD i = 0; i < rkTextFileLoader.GetChildNodeCount(); ++i)

  00316	8b cf		 mov	 ecx, edi
  00318	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
  0031f	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR _i$1$[ebp], 0
  00326	e8 00 00 00 00	 call	 ?GetChildNodeCount@CTextFileLoader@@QAEKXZ ; CTextFileLoader::GetChildNodeCount
  0032b	85 c0		 test	 eax, eax
  0032d	0f 84 79 0a 00
	00		 je	 $LN1639@LoadMotion
; File C:\Marty 5.5\Src-Client\Client\eterLib\TextFileLoader.h

; 49   : 			CGotoChild(CTextFileLoader * pOwner, DWORD dwIndex) : m_pOwner(pOwner)

  00333	89 bd 78 ff ff
	ff		 mov	 DWORD PTR _GotoChild$2[ebp], edi
  00339	33 c9		 xor	 ecx, ecx
  0033b	0f 1f 44 00 00	 npad	 5
$LL4@LoadMotion:

; 50   : 			{
; 51   : 				m_pOwner->SetChildNode(dwIndex);

  00340	51		 push	 ecx
  00341	8b cf		 mov	 ecx, edi
  00343	e8 00 00 00 00	 call	 ?SetChildNode@CTextFileLoader@@QAEHK@Z ; CTextFileLoader::SetChildNode
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 365  : 		rkTextFileLoader.GetCurrentNodeName(&strNodeName);

  00348	8d 45 a8	 lea	 eax, DWORD PTR _strNodeName$[ebp]
  0034b	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  0034f	50		 push	 eax
  00350	8b cf		 mov	 ecx, edi
  00352	e8 00 00 00 00	 call	 ?GetCurrentNodeName@CTextFileLoader@@QAEHPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CTextFileLoader::GetCurrentNodeName

; 366  : 
; 367  : 		if (0 == strNodeName.compare("comboinputdata"))

  00357	68 00 00 00 00	 push	 OFFSET ??_C@_0P@BEGKENNC@comboinputdata@
  0035c	8d 4d a8	 lea	 ecx, DWORD PTR _strNodeName$[ebp]
  0035f	e8 00 00 00 00	 call	 ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHQBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
  00364	85 c0		 test	 eax, eax
  00366	0f 85 d7 01 00
	00		 jne	 $LN16@LoadMotion

; 368  : 		{
; 369  : 			m_isComboMotion = TRUE;

  0036c	0f 57 c0	 xorps	 xmm0, xmm0
  0036f	c7 46 58 01 00
	00 00		 mov	 DWORD PTR [esi+88], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00376	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_0N@IKJEINLI@preinputtime@+8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0037b	0f 11 45 d8	 movups	 XMMWORD PTR $T32[ebp], xmm0

; 866  :             _My_data._Mysize = _Count;

  0037f	c7 45 e8 0c 00
	00 00		 mov	 DWORD PTR $T32[ebp+16], 12 ; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00386	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0N@IKJEINLI@preinputtime@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 867  :             _My_data._Myres  = _Small_string_capacity;

  0038e	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T32[ebp+20], 15 ; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00395	66 0f d6 45 d8	 movq	 QWORD PTR $T32[ebp], xmm0
  0039a	89 45 e0	 mov	 DWORD PTR $T32[ebp+8], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  0039d	c6 45 e4 00	 mov	 BYTE PTR $T32[ebp+12], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 371  : 			if (!rkTextFileLoader.GetTokenFloat("preinputtime", &m_ComboInputData.fInputStartTime))

  003a1	8d 46 5c	 lea	 eax, DWORD PTR [esi+92]
  003a4	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  003a8	50		 push	 eax
  003a9	8d 45 d8	 lea	 eax, DWORD PTR $T32[ebp]
  003ac	8b cf		 mov	 ecx, edi
  003ae	50		 push	 eax
  003af	e8 00 00 00 00	 call	 ?GetTokenFloat@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAM@Z ; CTextFileLoader::GetTokenFloat
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  003b4	8b 4d ec	 mov	 ecx, DWORD PTR $T32[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 371  : 			if (!rkTextFileLoader.GetTokenFloat("preinputtime", &m_ComboInputData.fInputStartTime))

  003b7	89 45 a4	 mov	 DWORD PTR tv6020[ebp], eax
  003ba	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  003be	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  003c1	76 2f		 jbe	 SHORT $LN443@LoadMotion
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  003c3	8b 55 d8	 mov	 edx, DWORD PTR $T32[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  003c6	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  003c7	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  003c9	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  003cf	72 14		 jb	 SHORT $LN454@LoadMotion

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  003d1	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  003d4	83 c1 23	 add	 ecx, 35			; 00000023H
  003d7	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  003d9	83 c0 fc	 add	 eax, -4			; fffffffcH
  003dc	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  003df	0f 87 fa 0b 00
	00		 ja	 $LN451@LoadMotion
$LN454@LoadMotion:

; 289  :         ::operator delete(_Ptr, _Bytes);

  003e5	51		 push	 ecx
  003e6	52		 push	 edx
  003e7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  003ec	8b 45 a4	 mov	 eax, DWORD PTR tv6020[ebp]
  003ef	83 c4 08	 add	 esp, 8
$LN443@LoadMotion:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 371  : 			if (!rkTextFileLoader.GetTokenFloat("preinputtime", &m_ComboInputData.fInputStartTime))

  003f2	85 c0		 test	 eax, eax
  003f4	0f 84 2a 01 00
	00		 je	 $LN1622@LoadMotion
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  003fa	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_0BA@OKILMLFK@directinputtime@+8
  003ff	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00402	0f 11 45 d8	 movups	 XMMWORD PTR $T31[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00406	89 45 e0	 mov	 DWORD PTR $T31[ebp+8], eax
  00409	66 a1 0c 00 00
	00		 mov	 ax, WORD PTR ??_C@_0BA@OKILMLFK@directinputtime@+12
  0040f	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0BA@OKILMLFK@directinputtime@
  00417	66 89 45 e4	 mov	 WORD PTR $T31[ebp+12], ax
  0041b	a0 0e 00 00 00	 mov	 al, BYTE PTR ??_C@_0BA@OKILMLFK@directinputtime@+14
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  00420	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR $T31[ebp+16], 15 ; 0000000fH

; 867  :             _My_data._Myres  = _Small_string_capacity;

  00427	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T31[ebp+20], 15 ; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0042e	66 0f d6 45 d8	 movq	 QWORD PTR $T31[ebp], xmm0
  00433	88 45 e6	 mov	 BYTE PTR $T31[ebp+14], al
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00436	c6 45 e7 00	 mov	 BYTE PTR $T31[ebp+15], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 373  : 			if (!rkTextFileLoader.GetTokenFloat("directinputtime", &m_ComboInputData.fNextComboTime))

  0043a	8d 46 60	 lea	 eax, DWORD PTR [esi+96]
  0043d	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  00441	50		 push	 eax
  00442	8d 45 d8	 lea	 eax, DWORD PTR $T31[ebp]
  00445	8b cf		 mov	 ecx, edi
  00447	50		 push	 eax
  00448	e8 00 00 00 00	 call	 ?GetTokenFloat@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAM@Z ; CTextFileLoader::GetTokenFloat
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0044d	8b 4d ec	 mov	 ecx, DWORD PTR $T31[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 373  : 			if (!rkTextFileLoader.GetTokenFloat("directinputtime", &m_ComboInputData.fNextComboTime))

  00450	89 45 a4	 mov	 DWORD PTR tv6019[ebp], eax
  00453	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00457	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0045a	76 2f		 jbe	 SHORT $LN658@LoadMotion
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0045c	8b 55 d8	 mov	 edx, DWORD PTR $T31[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0045f	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00460	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00462	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00468	72 14		 jb	 SHORT $LN669@LoadMotion

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0046a	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0046d	83 c1 23	 add	 ecx, 35			; 00000023H
  00470	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00472	83 c0 fc	 add	 eax, -4			; fffffffcH
  00475	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00478	0f 87 61 0b 00
	00		 ja	 $LN451@LoadMotion
$LN669@LoadMotion:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0047e	51		 push	 ecx
  0047f	52		 push	 edx
  00480	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00485	8b 45 a4	 mov	 eax, DWORD PTR tv6019[ebp]
  00488	83 c4 08	 add	 esp, 8
$LN658@LoadMotion:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 373  : 			if (!rkTextFileLoader.GetTokenFloat("directinputtime", &m_ComboInputData.fNextComboTime))

  0048b	85 c0		 test	 eax, eax
  0048d	0f 84 91 00 00
	00		 je	 $LN1622@LoadMotion
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00493	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_0P@PPFBMGLB@inputlimittime@+8
  00498	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0049b	0f 11 45 d8	 movups	 XMMWORD PTR $T30[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0049f	89 45 e0	 mov	 DWORD PTR $T30[ebp+8], eax
  004a2	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0P@PPFBMGLB@inputlimittime@
  004aa	66 a1 0c 00 00
	00		 mov	 ax, WORD PTR ??_C@_0P@PPFBMGLB@inputlimittime@+12
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  004b0	c7 45 e8 0e 00
	00 00		 mov	 DWORD PTR $T30[ebp+16], 14 ; 0000000eH

; 867  :             _My_data._Myres  = _Small_string_capacity;

  004b7	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T30[ebp+20], 15 ; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  004be	66 0f d6 45 d8	 movq	 QWORD PTR $T30[ebp], xmm0
  004c3	66 89 45 e4	 mov	 WORD PTR $T30[ebp+12], ax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  004c7	c6 45 e6 00	 mov	 BYTE PTR $T30[ebp+14], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 375  : 			if (!rkTextFileLoader.GetTokenFloat("inputlimittime", &m_ComboInputData.fInputEndTime))

  004cb	8d 46 64	 lea	 eax, DWORD PTR [esi+100]
  004ce	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  004d2	50		 push	 eax
  004d3	8d 45 d8	 lea	 eax, DWORD PTR $T30[ebp]
  004d6	8b cf		 mov	 ecx, edi
  004d8	50		 push	 eax
  004d9	e8 00 00 00 00	 call	 ?GetTokenFloat@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAM@Z ; CTextFileLoader::GetTokenFloat
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  004de	8b 4d ec	 mov	 ecx, DWORD PTR $T30[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 375  : 			if (!rkTextFileLoader.GetTokenFloat("inputlimittime", &m_ComboInputData.fInputEndTime))

  004e1	89 45 a4	 mov	 DWORD PTR tv6018[ebp], eax
  004e4	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  004e8	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  004eb	76 2f		 jbe	 SHORT $LN1160@LoadMotion
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  004ed	8b 55 d8	 mov	 edx, DWORD PTR $T30[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  004f0	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  004f1	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  004f3	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  004f9	72 14		 jb	 SHORT $LN1171@LoadMotion

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  004fb	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  004fe	83 c1 23	 add	 ecx, 35			; 00000023H
  00501	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00503	83 c0 fc	 add	 eax, -4			; fffffffcH
  00506	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00509	0f 87 d0 0a 00
	00		 ja	 $LN451@LoadMotion
$LN1171@LoadMotion:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0050f	51		 push	 ecx
  00510	52		 push	 edx
  00511	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00516	8b 45 a4	 mov	 eax, DWORD PTR tv6018[ebp]
  00519	83 c4 08	 add	 esp, 8
$LN1160@LoadMotion:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 375  : 			if (!rkTextFileLoader.GetTokenFloat("inputlimittime", &m_ComboInputData.fInputEndTime))

  0051c	85 c0		 test	 eax, eax
  0051e	0f 85 64 08 00
	00		 jne	 $LN1669@LoadMotion
$LN1622@LoadMotion:
; File C:\Marty 5.5\Src-Client\Client\eterLib\TextFileLoader.h

; 55   : 				m_pOwner->SetParentNode();

  00524	8b cf		 mov	 ecx, edi
  00526	c6 45 fc 1a	 mov	 BYTE PTR __$EHRec$[ebp+8], 26 ; 0000001aH
  0052a	e8 00 00 00 00	 call	 ?SetParentNode@CTextFileLoader@@QAEHXZ ; CTextFileLoader::SetParentNode
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 492  : 	return true;

  0052f	8d 4d a8	 lea	 ecx, DWORD PTR _strNodeName$[ebp]
  00532	c6 45 9b 00	 mov	 BYTE PTR $T14[ebp], 0
  00536	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0053b	8a 45 9b	 mov	 al, BYTE PTR $T14[ebp]
  0053e	e9 13 fd ff ff	 jmp	 $LN1@LoadMotion
$LN16@LoadMotion:

; 376  : 				return false;
; 377  : 		}
; 378  : 		else if (0 == strNodeName.compare("attackingdata"))

  00543	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NGMBMFEH@attackingdata@
  00548	8d 4d a8	 lea	 ecx, DWORD PTR _strNodeName$[ebp]
  0054b	e8 00 00 00 00	 call	 ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHQBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
  00550	85 c0		 test	 eax, eax
  00552	75 1d		 jne	 SHORT $LN21@LoadMotion

; 379  : 		{
; 380  : 			m_isAttackingMotion = TRUE;
; 381  : 
; 382  : 			if (!NRaceData::LoadMotionAttackData(rkTextFileLoader, &m_MotionAttackData))

  00554	8d 46 78	 lea	 eax, DWORD PTR [esi+120]
  00557	c7 46 74 01 00
	00 00		 mov	 DWORD PTR [esi+116], 1
  0055e	50		 push	 eax
  0055f	57		 push	 edi
  00560	e8 00 00 00 00	 call	 ?LoadMotionAttackData@NRaceData@@YAHAAVCTextFileLoader@@PAUSMotionAttackData@1@@Z ; NRaceData::LoadMotionAttackData
  00565	83 c4 08	 add	 esp, 8
  00568	85 c0		 test	 eax, eax
  0056a	74 b8		 je	 SHORT $LN1622@LoadMotion

; 383  : 				return false;
; 384  : 		}

  0056c	e9 17 08 00 00	 jmp	 $LN1669@LoadMotion
$LN21@LoadMotion:

; 385  : 		else if (0 == strNodeName.compare("loopdata"))

  00571	68 00 00 00 00	 push	 OFFSET ??_C@_08BMIAMBLK@loopdata@
  00576	8d 4d a8	 lea	 ecx, DWORD PTR _strNodeName$[ebp]
  00579	e8 00 00 00 00	 call	 ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHQBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
  0057e	85 c0		 test	 eax, eax
  00580	0f 85 30 02 00
	00		 jne	 $LN24@LoadMotion

; 386  : 		{
; 387  : 			m_isLoopMotion = TRUE;

  00586	c7 46 68 01 00
	00 00		 mov	 DWORD PTR [esi+104], 1
  0058d	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00590	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_0BA@HKGDAAAM@motionloopcount@+8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00595	0f 11 45 d8	 movups	 XMMWORD PTR $T28[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00599	89 45 e0	 mov	 DWORD PTR $T28[ebp+8], eax
  0059c	66 a1 0c 00 00
	00		 mov	 ax, WORD PTR ??_C@_0BA@HKGDAAAM@motionloopcount@+12
  005a2	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0BA@HKGDAAAM@motionloopcount@
  005aa	66 89 45 e4	 mov	 WORD PTR $T28[ebp+12], ax
  005ae	a0 0e 00 00 00	 mov	 al, BYTE PTR ??_C@_0BA@HKGDAAAM@motionloopcount@+14
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  005b3	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR $T28[ebp+16], 15 ; 0000000fH

; 867  :             _My_data._Myres  = _Small_string_capacity;

  005ba	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T28[ebp+20], 15 ; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  005c1	66 0f d6 45 d8	 movq	 QWORD PTR $T28[ebp], xmm0
  005c6	88 45 e6	 mov	 BYTE PTR $T28[ebp+14], al
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  005c9	c6 45 e7 00	 mov	 BYTE PTR $T28[ebp+15], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 388  : 			if (!rkTextFileLoader.GetTokenInteger("motionloopcount", &m_iLoopCount))

  005cd	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  005d0	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH
  005d4	50		 push	 eax
  005d5	8d 45 d8	 lea	 eax, DWORD PTR $T28[ebp]
  005d8	8b cf		 mov	 ecx, edi
  005da	50		 push	 eax
  005db	e8 00 00 00 00	 call	 ?GetTokenInteger@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAH@Z ; CTextFileLoader::GetTokenInteger
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  005e0	8b 4d ec	 mov	 ecx, DWORD PTR $T28[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 388  : 			if (!rkTextFileLoader.GetTokenInteger("motionloopcount", &m_iLoopCount))

  005e3	89 45 a4	 mov	 DWORD PTR tv6017[ebp], eax
  005e6	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  005ea	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  005ed	76 2f		 jbe	 SHORT $LN902@LoadMotion
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  005ef	8b 55 d8	 mov	 edx, DWORD PTR $T28[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  005f2	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  005f3	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  005f5	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  005fb	72 14		 jb	 SHORT $LN913@LoadMotion

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  005fd	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00600	83 c1 23	 add	 ecx, 35			; 00000023H
  00603	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00605	83 c0 fc	 add	 eax, -4			; fffffffcH
  00608	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0060b	0f 87 ce 09 00
	00		 ja	 $LN451@LoadMotion
$LN913@LoadMotion:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00611	51		 push	 ecx
  00612	52		 push	 edx
  00613	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00618	8b 45 a4	 mov	 eax, DWORD PTR tv6017[ebp]
  0061b	83 c4 08	 add	 esp, 8
$LN902@LoadMotion:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 388  : 			if (!rkTextFileLoader.GetTokenInteger("motionloopcount", &m_iLoopCount))

  0061e	85 c0		 test	 eax, eax
  00620	75 07		 jne	 SHORT $LN26@LoadMotion

; 389  : 			{
; 390  : 				m_iLoopCount = -1;

  00622	c7 46 10 ff ff
	ff ff		 mov	 DWORD PTR [esi+16], -1
$LN26@LoadMotion:
  00629	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 498  :     size_type _Mysize = 0; // current length of string (size)

  0062c	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T27[ebp+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00633	6a 20		 push	 32			; 00000020H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00635	0f 11 45 d8	 movups	 XMMWORD PTR $T27[ebp], xmm0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00639	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T27[ebp+20], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00640	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00645	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_0BB@LFNJMKIF@loopcancelenable@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0064c	89 45 d8	 mov	 DWORD PTR $T27[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  0064f	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 891  :         _My_data._Mysize = _Count;

  00652	c7 45 e8 10 00
	00 00		 mov	 DWORD PTR $T27[ebp+16], 16 ; 00000010H

; 892  :         _My_data._Myres  = _New_capacity;

  00659	c7 45 ec 1f 00
	00 00		 mov	 DWORD PTR $T27[ebp+20], 31 ; 0000001fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00660	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  00663	c6 40 10 00	 mov	 BYTE PTR [eax+16], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 392  : 			if (!rkTextFileLoader.GetTokenInteger("loopcancelenable", &m_bCancelEnableSkill))

  00667	8d 86 a0 00 00
	00		 lea	 eax, DWORD PTR [esi+160]
  0066d	c6 45 fc 0d	 mov	 BYTE PTR __$EHRec$[ebp+8], 13 ; 0000000dH
  00671	50		 push	 eax
  00672	8d 45 d8	 lea	 eax, DWORD PTR $T27[ebp]
  00675	8b cf		 mov	 ecx, edi
  00677	50		 push	 eax
  00678	e8 00 00 00 00	 call	 ?GetTokenInteger@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAH@Z ; CTextFileLoader::GetTokenInteger
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0067d	8b 4d ec	 mov	 ecx, DWORD PTR $T27[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 392  : 			if (!rkTextFileLoader.GetTokenInteger("loopcancelenable", &m_bCancelEnableSkill))

  00680	89 45 a4	 mov	 DWORD PTR tv6016[ebp], eax
  00683	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00687	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0068a	76 2f		 jbe	 SHORT $LN1074@LoadMotion
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0068c	8b 55 d8	 mov	 edx, DWORD PTR $T27[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0068f	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00690	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00692	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00698	72 14		 jb	 SHORT $LN1085@LoadMotion

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0069a	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0069d	83 c1 23	 add	 ecx, 35			; 00000023H
  006a0	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  006a2	83 c0 fc	 add	 eax, -4			; fffffffcH
  006a5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  006a8	0f 87 31 09 00
	00		 ja	 $LN451@LoadMotion
$LN1085@LoadMotion:

; 289  :         ::operator delete(_Ptr, _Bytes);

  006ae	51		 push	 ecx
  006af	52		 push	 edx
  006b0	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  006b5	8b 45 a4	 mov	 eax, DWORD PTR tv6016[ebp]
  006b8	83 c4 08	 add	 esp, 8
$LN1074@LoadMotion:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 392  : 			if (!rkTextFileLoader.GetTokenInteger("loopcancelenable", &m_bCancelEnableSkill))

  006bb	85 c0		 test	 eax, eax
  006bd	75 06		 jne	 SHORT $LN27@LoadMotion

; 393  : 			{
; 394  : 				m_bCancelEnableSkill = FALSE;

  006bf	89 86 a0 00 00
	00		 mov	 DWORD PTR [esi+160], eax
$LN27@LoadMotion:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  006c5	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_0O@FAMGINHI@loopstarttime@+8
  006ca	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  006cd	0f 11 45 d8	 movups	 XMMWORD PTR $T29[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  006d1	89 45 e0	 mov	 DWORD PTR $T29[ebp+8], eax
  006d4	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0O@FAMGINHI@loopstarttime@
  006dc	a0 0c 00 00 00	 mov	 al, BYTE PTR ??_C@_0O@FAMGINHI@loopstarttime@+12
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  006e1	c7 45 e8 0d 00
	00 00		 mov	 DWORD PTR $T29[ebp+16], 13 ; 0000000dH

; 867  :             _My_data._Myres  = _Small_string_capacity;

  006e8	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T29[ebp+20], 15 ; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  006ef	66 0f d6 45 d8	 movq	 QWORD PTR $T29[ebp], xmm0
  006f4	88 45 e4	 mov	 BYTE PTR $T29[ebp+12], al
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  006f7	c6 45 e5 00	 mov	 BYTE PTR $T29[ebp+13], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 396  : 			if (!rkTextFileLoader.GetTokenFloat("loopstarttime", &m_fLoopStartTime))

  006fb	8d 46 6c	 lea	 eax, DWORD PTR [esi+108]
  006fe	c6 45 fc 0e	 mov	 BYTE PTR __$EHRec$[ebp+8], 14 ; 0000000eH
  00702	50		 push	 eax
  00703	8d 45 d8	 lea	 eax, DWORD PTR $T29[ebp]
  00706	8b cf		 mov	 ecx, edi
  00708	50		 push	 eax
  00709	e8 00 00 00 00	 call	 ?GetTokenFloat@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAM@Z ; CTextFileLoader::GetTokenFloat
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0070e	8b 4d ec	 mov	 ecx, DWORD PTR $T29[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 396  : 			if (!rkTextFileLoader.GetTokenFloat("loopstarttime", &m_fLoopStartTime))

  00711	89 45 a4	 mov	 DWORD PTR tv6015[ebp], eax
  00714	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00718	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0071b	76 2f		 jbe	 SHORT $LN1037@LoadMotion
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0071d	8b 55 d8	 mov	 edx, DWORD PTR $T29[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00720	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00721	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00723	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00729	72 14		 jb	 SHORT $LN1048@LoadMotion

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0072b	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0072e	83 c1 23	 add	 ecx, 35			; 00000023H
  00731	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00733	83 c0 fc	 add	 eax, -4			; fffffffcH
  00736	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00739	0f 87 a0 08 00
	00		 ja	 $LN451@LoadMotion
$LN1048@LoadMotion:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0073f	51		 push	 ecx
  00740	52		 push	 edx
  00741	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00746	8b 45 a4	 mov	 eax, DWORD PTR tv6015[ebp]
  00749	83 c4 08	 add	 esp, 8
$LN1037@LoadMotion:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 396  : 			if (!rkTextFileLoader.GetTokenFloat("loopstarttime", &m_fLoopStartTime))

  0074c	85 c0		 test	 eax, eax
  0074e	0f 84 d0 fd ff
	ff		 je	 $LN1622@LoadMotion
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00754	66 a1 08 00 00
	00		 mov	 ax, WORD PTR ??_C@_0M@HIAPALPD@loopendtime@+8
  0075a	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0075d	0f 11 45 d8	 movups	 XMMWORD PTR $T26[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00761	66 89 45 e0	 mov	 WORD PTR $T26[ebp+8], ax
  00765	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0M@HIAPALPD@loopendtime@
  0076d	a0 0a 00 00 00	 mov	 al, BYTE PTR ??_C@_0M@HIAPALPD@loopendtime@+10
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  00772	c7 45 e8 0b 00
	00 00		 mov	 DWORD PTR $T26[ebp+16], 11 ; 0000000bH

; 867  :             _My_data._Myres  = _Small_string_capacity;

  00779	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T26[ebp+20], 15 ; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00780	66 0f d6 45 d8	 movq	 QWORD PTR $T26[ebp], xmm0
  00785	88 45 e2	 mov	 BYTE PTR $T26[ebp+10], al
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00788	c6 45 e3 00	 mov	 BYTE PTR $T26[ebp+11], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 398  : 			if (!rkTextFileLoader.GetTokenFloat("loopendtime", &m_fLoopEndTime))

  0078c	8d 46 70	 lea	 eax, DWORD PTR [esi+112]
  0078f	c6 45 fc 10	 mov	 BYTE PTR __$EHRec$[ebp+8], 16 ; 00000010H
  00793	50		 push	 eax
  00794	8d 45 d8	 lea	 eax, DWORD PTR $T26[ebp]
  00797	8b cf		 mov	 ecx, edi
  00799	50		 push	 eax
  0079a	e8 00 00 00 00	 call	 ?GetTokenFloat@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAM@Z ; CTextFileLoader::GetTokenFloat
  0079f	8d 4d d8	 lea	 ecx, DWORD PTR $T26[ebp]
  007a2	8b f0		 mov	 esi, eax
  007a4	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  007a9	85 f6		 test	 esi, esi
  007ab	0f 84 73 fd ff
	ff		 je	 $LN1622@LoadMotion

; 399  : 				return false;
; 400  : 		}

  007b1	e9 cf 05 00 00	 jmp	 $LN1672@LoadMotion
$LN24@LoadMotion:

; 401  : 		else if (0 == strNodeName.compare("motioneventdata"))

  007b6	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@LAEICHPP@motioneventdata@
  007bb	8d 4d a8	 lea	 ecx, DWORD PTR _strNodeName$[ebp]
  007be	e8 00 00 00 00	 call	 ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHQBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
  007c3	85 c0		 test	 eax, eax
  007c5	0f 85 bd 05 00
	00		 jne	 $LN1669@LoadMotion
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  007cb	6a 14		 push	 20			; 00000014H
  007cd	0f 57 c0	 xorps	 xmm0, xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  007d0	89 45 e8	 mov	 DWORD PTR $T24[ebp+16], eax

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  007d3	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@KNDELFNF@motioneventdatacount@
  007d8	8d 4d d8	 lea	 ecx, DWORD PTR $T24[ebp]

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  007db	89 45 ec	 mov	 DWORD PTR $T24[ebp+20], eax

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  007de	0f 11 45 d8	 movups	 XMMWORD PTR $T24[ebp], xmm0

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  007e2	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 405  : 			if (!rkTextFileLoader.GetTokenDoubleWord("motioneventdatacount", &dwMotionEventDataCount))

  007e7	8d 45 80	 lea	 eax, DWORD PTR _dwMotionEventDataCount$3[ebp]
  007ea	c6 45 fc 12	 mov	 BYTE PTR __$EHRec$[ebp+8], 18 ; 00000012H
  007ee	50		 push	 eax
  007ef	8d 45 d8	 lea	 eax, DWORD PTR $T24[ebp]
  007f2	8b cf		 mov	 ecx, edi
  007f4	50		 push	 eax
  007f5	e8 00 00 00 00	 call	 ?GetTokenDoubleWord@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAK@Z ; CTextFileLoader::GetTokenDoubleWord
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  007fa	8b 4d ec	 mov	 ecx, DWORD PTR $T24[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 405  : 			if (!rkTextFileLoader.GetTokenDoubleWord("motioneventdatacount", &dwMotionEventDataCount))

  007fd	89 45 a4	 mov	 DWORD PTR tv6013[ebp], eax
  00800	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00804	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00807	76 2f		 jbe	 SHORT $LN1321@LoadMotion
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00809	8b 55 d8	 mov	 edx, DWORD PTR $T24[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0080c	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0080d	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0080f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00815	72 14		 jb	 SHORT $LN1332@LoadMotion

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00817	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0081a	83 c1 23	 add	 ecx, 35			; 00000023H
  0081d	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0081f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00822	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00825	0f 87 b4 07 00
	00		 ja	 $LN451@LoadMotion
$LN1332@LoadMotion:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0082b	51		 push	 ecx
  0082c	52		 push	 edx
  0082d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00832	8b 45 a4	 mov	 eax, DWORD PTR tv6013[ebp]
  00835	83 c4 08	 add	 esp, 8
$LN1321@LoadMotion:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 405  : 			if (!rkTextFileLoader.GetTokenDoubleWord("motioneventdatacount", &dwMotionEventDataCount))

  00838	85 c0		 test	 eax, eax
  0083a	75 09		 jne	 SHORT $LN31@LoadMotion
; File C:\Marty 5.5\Src-Client\Client\eterLib\TextFileLoader.h

; 54   : 			{

  0083c	c6 45 fc 13	 mov	 BYTE PTR __$EHRec$[ebp+8], 19 ; 00000013H
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 406  : 				continue;

  00840	e9 47 05 00 00	 jmp	 $LN1673@LoadMotion
$LN31@LoadMotion:

; 407  : 
; 408  : 			stl_wipe(m_MotionEventDataVector);

  00845	8d 86 a4 00 00
	00		 lea	 eax, DWORD PTR [esi+164]
  0084b	50		 push	 eax
  0084c	89 45 a4	 mov	 DWORD PTR __My_data$2$[ebp], eax
  0084f	e8 00 00 00 00	 call	 ??$stl_wipe@V?$vector@PAUSMotionEventData@NMotionEvent@@V?$allocator@PAUSMotionEventData@NMotionEvent@@@std@@@std@@@@YAXAAV?$vector@PAUSMotionEventData@NMotionEvent@@V?$allocator@PAUSMotionEventData@NMotionEvent@@@std@@@std@@@Z ; stl_wipe<std::vector<NMotionEvent::SMotionEventData *,std::allocator<NMotionEvent::SMotionEventData *> > >
  00854	83 c4 04	 add	 esp, 4

; 409  : 
; 410  : 			m_MotionEventDataVector.resize(dwMotionEventDataCount, NULL);

  00857	c7 45 90 00 00
	00 00		 mov	 DWORD PTR $T4[ebp], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1620 :         _Resize(_Newsize, _Val);

  0085e	8d 45 90	 lea	 eax, DWORD PTR $T4[ebp]
  00861	8d 8e a4 00 00
	00		 lea	 ecx, DWORD PTR [esi+164]
  00867	50		 push	 eax
  00868	ff 75 80	 push	 DWORD PTR _dwMotionEventDataCount$3[ebp]
  0086b	e8 00 00 00 00	 call	 ??$_Resize@PAUSMotionEventData@NMotionEvent@@@?$vector@PAUSMotionEventData@NMotionEvent@@V?$allocator@PAUSMotionEventData@NMotionEvent@@@std@@@std@@AAEXIABQAUSMotionEventData@NMotionEvent@@@Z ; std::vector<NMotionEvent::SMotionEventData *,std::allocator<NMotionEvent::SMotionEventData *> >::_Resize<NMotionEvent::SMotionEventData *>

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00870	8b 86 a8 00 00
	00		 mov	 eax, DWORD PTR [esi+168]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 412  : 			for (DWORD j = 0; j < m_MotionEventDataVector.size(); ++j)

  00876	33 c9		 xor	 ecx, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00878	2b 86 a4 00 00
	00		 sub	 eax, DWORD PTR [esi+164]
  0087e	c1 f8 02	 sar	 eax, 2
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 412  : 			for (DWORD j = 0; j < m_MotionEventDataVector.size(); ++j)

  00881	89 4d 90	 mov	 DWORD PTR _j$1$[ebp], ecx
  00884	85 c0		 test	 eax, eax
  00886	0f 84 fc 04 00
	00		 je	 $LN1669@LoadMotion
  0088c	0f 1f 40 00	 npad	 4
$LL7@LoadMotion:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00890	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05GFHEIIDD@event@
  00895	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00898	0f 11 45 d8	 movups	 XMMWORD PTR $T23[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0089c	89 45 d8	 mov	 DWORD PTR $T23[ebp], eax
  0089f	a0 04 00 00 00	 mov	 al, BYTE PTR ??_C@_05GFHEIIDD@event@+4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  008a4	c7 45 e8 05 00
	00 00		 mov	 DWORD PTR $T23[ebp+16], 5

; 867  :             _My_data._Myres  = _Small_string_capacity;

  008ab	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T23[ebp+20], 15 ; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  008b2	88 45 dc	 mov	 BYTE PTR $T23[ebp+4], al
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  008b5	c6 45 dd 00	 mov	 BYTE PTR $T23[ebp+5], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 414  : 				if (!rkTextFileLoader.SetChildNode("event", j))

  008b9	51		 push	 ecx
  008ba	8d 45 d8	 lea	 eax, DWORD PTR $T23[ebp]
  008bd	c6 45 fc 14	 mov	 BYTE PTR __$EHRec$[ebp+8], 20 ; 00000014H
  008c1	50		 push	 eax
  008c2	8b cf		 mov	 ecx, edi
  008c4	e8 00 00 00 00	 call	 ?SetChildNode@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@Z ; CTextFileLoader::SetChildNode
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  008c9	8b 4d ec	 mov	 ecx, DWORD PTR $T23[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 414  : 				if (!rkTextFileLoader.SetChildNode("event", j))

  008cc	8b f0		 mov	 esi, eax
  008ce	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  008d2	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  008d5	76 2c		 jbe	 SHORT $LN813@LoadMotion
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  008d7	8b 55 d8	 mov	 edx, DWORD PTR $T23[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  008da	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  008db	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  008dd	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  008e3	72 14		 jb	 SHORT $LN824@LoadMotion

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  008e5	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  008e8	83 c1 23	 add	 ecx, 35			; 00000023H
  008eb	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  008ed	83 c0 fc	 add	 eax, -4			; fffffffcH
  008f0	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  008f3	0f 87 e6 06 00
	00		 ja	 $LN451@LoadMotion
$LN824@LoadMotion:

; 289  :         ::operator delete(_Ptr, _Bytes);

  008f9	51		 push	 ecx
  008fa	52		 push	 edx
  008fb	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00900	83 c4 08	 add	 esp, 8
$LN813@LoadMotion:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 414  : 				if (!rkTextFileLoader.SetChildNode("event", j))

  00903	85 f6		 test	 esi, esi
  00905	0f 84 19 fc ff
	ff		 je	 $LN1622@LoadMotion
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0090b	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_0BA@CGGAKCNF@motioneventtype@+8
  00910	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00913	0f 11 45 d8	 movups	 XMMWORD PTR $T21[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00917	89 45 e0	 mov	 DWORD PTR $T21[ebp+8], eax
  0091a	66 a1 0c 00 00
	00		 mov	 ax, WORD PTR ??_C@_0BA@CGGAKCNF@motioneventtype@+12
  00920	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0BA@CGGAKCNF@motioneventtype@
  00928	66 89 45 e4	 mov	 WORD PTR $T21[ebp+12], ax
  0092c	a0 0e 00 00 00	 mov	 al, BYTE PTR ??_C@_0BA@CGGAKCNF@motioneventtype@+14
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  00931	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR $T21[ebp+16], 15 ; 0000000fH

; 867  :             _My_data._Myres  = _Small_string_capacity;

  00938	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T21[ebp+20], 15 ; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0093f	66 0f d6 45 d8	 movq	 QWORD PTR $T21[ebp], xmm0
  00944	88 45 e6	 mov	 BYTE PTR $T21[ebp+14], al
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00947	c6 45 e7 00	 mov	 BYTE PTR $T21[ebp+15], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 418  : 				if (!rkTextFileLoader.GetTokenInteger("motioneventtype", &iType))

  0094b	8d 45 a0	 lea	 eax, DWORD PTR _iType$17[ebp]
  0094e	c6 45 fc 16	 mov	 BYTE PTR __$EHRec$[ebp+8], 22 ; 00000016H
  00952	50		 push	 eax
  00953	8d 45 d8	 lea	 eax, DWORD PTR $T21[ebp]
  00956	8b cf		 mov	 ecx, edi
  00958	50		 push	 eax
  00959	e8 00 00 00 00	 call	 ?GetTokenInteger@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAH@Z ; CTextFileLoader::GetTokenInteger
  0095e	8d 4d d8	 lea	 ecx, DWORD PTR $T21[ebp]
  00961	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00965	8b f0		 mov	 esi, eax
  00967	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0096c	85 f6		 test	 esi, esi
  0096e	0f 84 b0 fb ff
	ff		 je	 $LN1622@LoadMotion

; 419  : 					return false;
; 420  : 
; 421  : 				TMotionEventData * pData = NULL;
; 422  : 				switch(iType)

  00974	8b 45 a0	 mov	 eax, DWORD PTR _iType$17[ebp]
  00977	48		 dec	 eax
  00978	83 f8 09	 cmp	 eax, 9
  0097b	0f 87 a3 fb ff
	ff		 ja	 $LN1622@LoadMotion
  00981	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN1665@LoadMotion[eax*4]
$LN34@LoadMotion:

; 423  : 				{
; 424  : 					case MOTION_EVENT_TYPE_FLY:
; 425  : 						pData = new TMotionFlyEventData;

  00988	6a 58		 push	 88			; 00000058H
  0098a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0098f	8b c8		 mov	 ecx, eax
  00991	83 c4 04	 add	 esp, 4
  00994	89 4d 94	 mov	 DWORD PTR $T12[ebp], ecx
  00997	85 c9		 test	 ecx, ecx
  00999	0f 84 23 03 00
	00		 je	 $LN63@LoadMotion
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 17   : 		SMotionEventData() : iType (0), dwFrame (0), fStartingTime (0.0f), fDurationTime (0.0f) {}

  0099f	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  009a6	0f 57 c0	 xorps	 xmm0, xmm0
  009a9	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  009b0	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  009b7	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 186  : 		SMotionEventDataFly() : isAttaching (0) {}

  009be	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7SMotionEventDataFly@NMotionEvent@@6B@
  009c4	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  009cb	0f 11 41 18	 movups	 XMMWORD PTR [ecx+24], xmm0

; 836  :         _My_data._Mysize = 0;

  009cf	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  009d6	c7 41 2c 0f 00
	00 00		 mov	 DWORD PTR [ecx+44], 15	; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  009dd	c6 41 18 00	 mov	 BYTE PTR [ecx+24], 0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  009e1	0f 11 41 40	 movups	 XMMWORD PTR [ecx+64], xmm0

; 836  :         _My_data._Mysize = 0;

  009e5	c7 41 50 00 00
	00 00		 mov	 DWORD PTR [ecx+80], 0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  009ec	c7 41 54 0f 00
	00 00		 mov	 DWORD PTR [ecx+84], 15	; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  009f3	c6 41 40 00	 mov	 BYTE PTR [ecx+64], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 426  : 						break;

  009f7	e9 c8 02 00 00	 jmp	 $LN64@LoadMotion
$LN35@LoadMotion:

; 427  : 					case MOTION_EVENT_TYPE_EFFECT:
; 428  : 						pData = new TMotionEffectEventData;

  009fc	6a 60		 push	 96			; 00000060H
  009fe	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00a03	8b c8		 mov	 ecx, eax
  00a05	83 c4 04	 add	 esp, 4
  00a08	89 4d 94	 mov	 DWORD PTR $T13[ebp], ecx
  00a0b	85 c9		 test	 ecx, ecx
  00a0d	0f 84 af 02 00
	00		 je	 $LN63@LoadMotion
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 17   : 		SMotionEventData() : iType (0), dwFrame (0), fStartingTime (0.0f), fDurationTime (0.0f) {}

  00a13	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00a1a	0f 57 c0	 xorps	 xmm0, xmm0
  00a1d	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00a24	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  00a2b	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 88   : 		SMotionEventDataEffect() : isAttaching (0), isFollowing (0), isIndependent (0), dwEffectIndex (0) {}

  00a32	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7SMotionEventDataEffect@NMotionEvent@@6B@
  00a38	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00a3f	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
  00a46	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00a4d	0f 11 41 20	 movups	 XMMWORD PTR [ecx+32], xmm0

; 836  :         _My_data._Mysize = 0;

  00a51	c7 41 30 00 00
	00 00		 mov	 DWORD PTR [ecx+48], 0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  00a58	c7 41 34 0f 00
	00 00		 mov	 DWORD PTR [ecx+52], 15	; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00a5f	c6 41 20 00	 mov	 BYTE PTR [ecx+32], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 88   : 		SMotionEventDataEffect() : isAttaching (0), isFollowing (0), isIndependent (0), dwEffectIndex (0) {}

  00a63	c7 41 44 00 00
	00 00		 mov	 DWORD PTR [ecx+68], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00a6a	0f 11 41 48	 movups	 XMMWORD PTR [ecx+72], xmm0

; 836  :         _My_data._Mysize = 0;

  00a6e	c7 41 58 00 00
	00 00		 mov	 DWORD PTR [ecx+88], 0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  00a75	c7 41 5c 0f 00
	00 00		 mov	 DWORD PTR [ecx+92], 15	; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00a7c	c6 41 48 00	 mov	 BYTE PTR [ecx+72], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 429  : 						break;

  00a80	e9 3f 02 00 00	 jmp	 $LN64@LoadMotion
$LN36@LoadMotion:

; 430  : 					case MOTION_EVENT_TYPE_SCREEN_WAVING:
; 431  : 						pData = new TScreenWavingEventData;

  00a85	6a 1c		 push	 28			; 0000001cH
  00a87	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00a8c	8b c8		 mov	 ecx, eax
  00a8e	83 c4 04	 add	 esp, 4
  00a91	89 4d 94	 mov	 DWORD PTR $T5[ebp], ecx
  00a94	85 c9		 test	 ecx, ecx
  00a96	0f 84 26 02 00
	00		 je	 $LN63@LoadMotion
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 17   : 		SMotionEventData() : iType (0), dwFrame (0), fStartingTime (0.0f), fDurationTime (0.0f) {}

  00a9c	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00aa3	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00aaa	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  00ab1	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 34   : 		SMotionEventDataScreenWaving() : iPower (0), iAffectingRange (0) {}

  00ab8	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7SMotionEventDataScreenWaving@NMotionEvent@@6B@
  00abe	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00ac5	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 432  : 						break;

  00acc	e9 f3 01 00 00	 jmp	 $LN64@LoadMotion
$LN37@LoadMotion:

; 433  : 					case MOTION_EVENT_TYPE_SPECIAL_ATTACKING:
; 434  : 						pData = new TMotionAttackingEventData;

  00ad1	6a 44		 push	 68			; 00000044H
  00ad3	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00ad8	8b c8		 mov	 ecx, eax
  00ada	83 c4 04	 add	 esp, 4
  00add	89 4d 94	 mov	 DWORD PTR $T6[ebp], ecx
  00ae0	85 c9		 test	 ecx, ecx
  00ae2	74 57		 je	 SHORT $LN53@LoadMotion

; 435  : 						m_hasSplashEvent = TRUE;

  00ae4	8b 45 84	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 17   : 		SMotionEventData() : iType (0), dwFrame (0), fStartingTime (0.0f), fDurationTime (0.0f) {}

  00ae7	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00aee	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00af5	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  00afc	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 229  : 		SMotionEventDataAttack() : isEnableHitProcess (0) {}

  00b03	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7SMotionEventDataAttack@NMotionEvent@@6B@
; File C:\Marty 5.5\Src-Client\Client\GameLib\GameType.h

; 119  : 		SCollisionData() {}

  00b09	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], OFFSET ??_7SCollisionData@NRaceData@@6B@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00b10	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0
  00b17	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0
  00b1e	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 229  : 		SMotionEventDataAttack() : isEnableHitProcess (0) {}

  00b25	c7 41 40 00 00
	00 00		 mov	 DWORD PTR [ecx+64], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 435  : 						m_hasSplashEvent = TRUE;

  00b2c	c7 80 bc 00 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+188], 1

; 436  : 						break;

  00b36	e9 89 01 00 00	 jmp	 $LN64@LoadMotion
$LN53@LoadMotion:

; 435  : 						m_hasSplashEvent = TRUE;

  00b3b	8b 45 84	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  00b3e	33 c9		 xor	 ecx, ecx
  00b40	c7 80 bc 00 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+188], 1

; 436  : 						break;

  00b4a	e9 75 01 00 00	 jmp	 $LN64@LoadMotion
$LN38@LoadMotion:

; 437  : 					case MOTION_EVENT_TYPE_SOUND:
; 438  : 						pData = new TMotionSoundEventData;

  00b4f	6a 2c		 push	 44			; 0000002cH
  00b51	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00b56	8b c8		 mov	 ecx, eax
  00b58	83 c4 04	 add	 esp, 4
  00b5b	89 4d 94	 mov	 DWORD PTR $T7[ebp], ecx
  00b5e	85 c9		 test	 ecx, ecx
  00b60	0f 84 5c 01 00
	00		 je	 $LN63@LoadMotion
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 17   : 		SMotionEventData() : iType (0), dwFrame (0), fStartingTime (0.0f), fDurationTime (0.0f) {}

  00b66	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00b6d	0f 57 c0	 xorps	 xmm0, xmm0
  00b70	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00b77	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  00b7e	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 269  : 		SMotionEventDataSound() {}

  00b85	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7SMotionEventDataSound@NMotionEvent@@6B@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00b8b	0f 11 41 14	 movups	 XMMWORD PTR [ecx+20], xmm0

; 836  :         _My_data._Mysize = 0;

  00b8f	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  00b96	c7 41 28 0f 00
	00 00		 mov	 DWORD PTR [ecx+40], 15	; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00b9d	c6 41 14 00	 mov	 BYTE PTR [ecx+20], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 439  : 						break;

  00ba1	e9 1e 01 00 00	 jmp	 $LN64@LoadMotion
$LN39@LoadMotion:

; 440  : 					case MOTION_EVENT_TYPE_CHARACTER_SHOW:
; 441  : 						pData = new TMotionCharacterShowEventData;

  00ba6	6a 14		 push	 20			; 00000014H
  00ba8	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00bad	8b c8		 mov	 ecx, eax
  00baf	83 c4 04	 add	 esp, 4
  00bb2	89 4d 94	 mov	 DWORD PTR $T8[ebp], ecx
  00bb5	85 c9		 test	 ecx, ecx
  00bb7	0f 84 05 01 00
	00		 je	 $LN63@LoadMotion
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 17   : 		SMotionEventData() : iType (0), dwFrame (0), fStartingTime (0.0f), fDurationTime (0.0f) {}

  00bbd	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00bc4	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00bcb	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  00bd2	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 289  : 		SMotionEventDataCharacterShow() {}

  00bd9	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7SMotionEventDataCharacterShow@NMotionEvent@@6B@
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 442  : 						break;

  00bdf	e9 e0 00 00 00	 jmp	 $LN64@LoadMotion
$LN40@LoadMotion:

; 443  : 					case MOTION_EVENT_TYPE_CHARACTER_HIDE:
; 444  : 						pData = new TMotionCharacterHideEventData;

  00be4	6a 14		 push	 20			; 00000014H
  00be6	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00beb	8b c8		 mov	 ecx, eax
  00bed	83 c4 04	 add	 esp, 4
  00bf0	89 4d 94	 mov	 DWORD PTR $T9[ebp], ecx
  00bf3	85 c9		 test	 ecx, ecx
  00bf5	0f 84 c7 00 00
	00		 je	 $LN63@LoadMotion
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 17   : 		SMotionEventData() : iType (0), dwFrame (0), fStartingTime (0.0f), fDurationTime (0.0f) {}

  00bfb	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00c02	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00c09	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  00c10	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 299  : 		SMotionEventDataCharacterHide() {}

  00c17	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7SMotionEventDataCharacterHide@NMotionEvent@@6B@
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 445  : 						break;

  00c1d	e9 a2 00 00 00	 jmp	 $LN64@LoadMotion
$LN41@LoadMotion:

; 446  : 					case MOTION_EVENT_TYPE_WARP:
; 447  : 						pData = new TMotionWarpEventData;

  00c22	6a 14		 push	 20			; 00000014H
  00c24	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00c29	8b c8		 mov	 ecx, eax
  00c2b	83 c4 04	 add	 esp, 4
  00c2e	89 4d 94	 mov	 DWORD PTR $T11[ebp], ecx
  00c31	85 c9		 test	 ecx, ecx
  00c33	0f 84 89 00 00
	00		 je	 $LN63@LoadMotion
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 17   : 		SMotionEventData() : iType (0), dwFrame (0), fStartingTime (0.0f), fDurationTime (0.0f) {}

  00c39	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00c40	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00c47	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  00c4e	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 309  : 		SMotionEventDataWarp() {}

  00c55	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7SMotionEventDataWarp@NMotionEvent@@6B@
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 448  : 						break;

  00c5b	eb 67		 jmp	 SHORT $LN64@LoadMotion
$LN42@LoadMotion:

; 449  : 					case MOTION_EVENT_TYPE_EFFECT_TO_TARGET:
; 450  : 						pData = new TMotionEffectToTargetEventData;

  00c5d	6a 44		 push	 68			; 00000044H
  00c5f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00c64	8b c8		 mov	 ecx, eax
  00c66	83 c4 04	 add	 esp, 4
  00c69	89 4d 94	 mov	 DWORD PTR $T10[ebp], ecx
  00c6c	85 c9		 test	 ecx, ecx
  00c6e	74 52		 je	 SHORT $LN63@LoadMotion
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 17   : 		SMotionEventData() : iType (0), dwFrame (0), fStartingTime (0.0f), fDurationTime (0.0f) {}

  00c70	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00c77	0f 57 c0	 xorps	 xmm0, xmm0
  00c7a	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00c81	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  00c88	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 139  : 		SMotionEventDataEffectToTarget() : dwEffectIndex (0), isFollowing (0), isFishingEffect (0) {}

  00c8f	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7SMotionEventDataEffectToTarget@NMotionEvent@@6B@
  00c95	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00c9c	0f 11 41 18	 movups	 XMMWORD PTR [ecx+24], xmm0

; 836  :         _My_data._Mysize = 0;

  00ca0	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  00ca7	c7 41 2c 0f 00
	00 00		 mov	 DWORD PTR [ecx+44], 15	; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00cae	c6 41 18 00	 mov	 BYTE PTR [ecx+24], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 139  : 		SMotionEventDataEffectToTarget() : dwEffectIndex (0), isFollowing (0), isFishingEffect (0) {}

  00cb2	c7 41 3c 00 00
	00 00		 mov	 DWORD PTR [ecx+60], 0
  00cb9	c7 41 40 00 00
	00 00		 mov	 DWORD PTR [ecx+64], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 465  : 				m_MotionEventDataVector[j] = pData;

  00cc0	eb 02		 jmp	 SHORT $LN64@LoadMotion
$LN63@LoadMotion:
  00cc2	33 c9		 xor	 ecx, ecx
$LN64@LoadMotion:
  00cc4	8b 55 a4	 mov	 edx, DWORD PTR __My_data$2$[ebp]
  00cc7	8b 75 90	 mov	 esi, DWORD PTR _j$1$[ebp]

; 466  : 				m_MotionEventDataVector[j]->Load(rkTextFileLoader);

  00cca	57		 push	 edi
  00ccb	8b 02		 mov	 eax, DWORD PTR [edx]
  00ccd	89 0c b0	 mov	 DWORD PTR [eax+esi*4], ecx
  00cd0	8b 02		 mov	 eax, DWORD PTR [edx]
  00cd2	8b 0c b0	 mov	 ecx, DWORD PTR [eax+esi*4]
  00cd5	8b 01		 mov	 eax, DWORD PTR [ecx]
  00cd7	ff 50 08	 call	 DWORD PTR [eax+8]

; 467  : 				m_MotionEventDataVector[j]->iType = iType;

  00cda	8b 55 a4	 mov	 edx, DWORD PTR __My_data$2$[ebp]
  00cdd	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00ce0	0f 11 45 d8	 movups	 XMMWORD PTR $T22[ebp], xmm0

; 866  :             _My_data._Mysize = _Count;

  00ce4	c7 45 e8 0c 00
	00 00		 mov	 DWORD PTR $T22[ebp+16], 12 ; 0000000cH

; 867  :             _My_data._Myres  = _Small_string_capacity;

  00ceb	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T22[ebp+20], 15 ; 0000000fH
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 467  : 				m_MotionEventDataVector[j]->iType = iType;

  00cf2	8b 02		 mov	 eax, DWORD PTR [edx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00cf4	c6 45 e4 00	 mov	 BYTE PTR $T22[ebp+12], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 467  : 				m_MotionEventDataVector[j]->iType = iType;

  00cf8	8b 0c b0	 mov	 ecx, DWORD PTR [eax+esi*4]
  00cfb	8b 45 a0	 mov	 eax, DWORD PTR _iType$17[ebp]
  00cfe	89 41 04	 mov	 DWORD PTR [ecx+4], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00d01	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0N@NHFBHOF@startingtime@
  00d09	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_0N@NHFBHOF@startingtime@+8
  00d0e	66 0f d6 45 d8	 movq	 QWORD PTR $T22[ebp], xmm0
  00d13	89 45 e0	 mov	 DWORD PTR $T22[ebp+8], eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 468  : 				if (!rkTextFileLoader.GetTokenFloat("startingtime", &m_MotionEventDataVector[j]->fStartingTime))

  00d16	8b 02		 mov	 eax, DWORD PTR [edx]
  00d18	8b cf		 mov	 ecx, edi
  00d1a	c6 45 fc 19	 mov	 BYTE PTR __$EHRec$[ebp+8], 25 ; 00000019H
  00d1e	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]
  00d21	83 c0 0c	 add	 eax, 12			; 0000000cH
  00d24	50		 push	 eax
  00d25	8d 45 d8	 lea	 eax, DWORD PTR $T22[ebp]
  00d28	50		 push	 eax
  00d29	e8 00 00 00 00	 call	 ?GetTokenFloat@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAM@Z ; CTextFileLoader::GetTokenFloat
  00d2e	8d 4d d8	 lea	 ecx, DWORD PTR $T22[ebp]
  00d31	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00d35	8b f0		 mov	 esi, eax
  00d37	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00d3c	85 f6		 test	 esi, esi
  00d3e	0f 84 e0 f7 ff
	ff		 je	 $LN1622@LoadMotion

; 469  : 					return false;
; 470  : 
; 471  : 				m_MotionEventDataVector[j]->dwFrame = (m_MotionEventDataVector[j]->fStartingTime / c_fFrameTime);

  00d44	8b 45 a4	 mov	 eax, DWORD PTR __My_data$2$[ebp]
  00d47	8b 75 90	 mov	 esi, DWORD PTR _j$1$[ebp]
  00d4a	8b 00		 mov	 eax, DWORD PTR [eax]
  00d4c	8b 34 b0	 mov	 esi, DWORD PTR [eax+esi*4]
  00d4f	f3 0f 10 46 0c	 movss	 xmm0, DWORD PTR [esi+12]
  00d54	f3 0f 5e 85 7c
	ff ff ff	 divss	 xmm0, DWORD PTR _c_fFrameTime$1$[ebp]
  00d5c	e8 00 00 00 00	 call	 __ftol3

; 472  : 
; 473  : 				rkTextFileLoader.SetParentNode();

  00d61	8b cf		 mov	 ecx, edi
  00d63	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00d66	e8 00 00 00 00	 call	 ?SetParentNode@CTextFileLoader@@QAEHXZ ; CTextFileLoader::SetParentNode
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00d6b	8b 55 a4	 mov	 edx, DWORD PTR __My_data$2$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 412  : 			for (DWORD j = 0; j < m_MotionEventDataVector.size(); ++j)

  00d6e	8b 4d 90	 mov	 ecx, DWORD PTR _j$1$[ebp]
  00d71	41		 inc	 ecx
  00d72	89 4d 90	 mov	 DWORD PTR _j$1$[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00d75	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00d78	2b 02		 sub	 eax, DWORD PTR [edx]
  00d7a	c1 f8 02	 sar	 eax, 2
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 412  : 			for (DWORD j = 0; j < m_MotionEventDataVector.size(); ++j)

  00d7d	3b c8		 cmp	 ecx, eax
  00d7f	0f 82 0b fb ff
	ff		 jb	 $LL7@LoadMotion
$LN1672@LoadMotion:
; File C:\Marty 5.5\Src-Client\Client\eterLib\TextFileLoader.h

; 54   : 			{

  00d85	8b 75 84	 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
$LN1669@LoadMotion:
  00d88	c6 45 fc 1b	 mov	 BYTE PTR __$EHRec$[ebp+8], 27 ; 0000001bH
$LN1673@LoadMotion:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 361  : 	for (DWORD i = 0; i < rkTextFileLoader.GetChildNodeCount(); ++i)

  00d8c	8b cf		 mov	 ecx, edi
  00d8e	e8 00 00 00 00	 call	 ?SetParentNode@CTextFileLoader@@QAEHXZ ; CTextFileLoader::SetParentNode
  00d93	ff 45 9c	 inc	 DWORD PTR _i$1$[ebp]
  00d96	8b cf		 mov	 ecx, edi
  00d98	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00d9c	e8 00 00 00 00	 call	 ?GetChildNodeCount@CTextFileLoader@@QAEKXZ ; CTextFileLoader::GetChildNodeCount
  00da1	8b 4d 9c	 mov	 ecx, DWORD PTR _i$1$[ebp]
  00da4	3b c8		 cmp	 ecx, eax
  00da6	0f 82 94 f5 ff
	ff		 jb	 $LL4@LoadMotion
$LN1639@LoadMotion:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00dac	8b 7d 8c	 mov	 edi, DWORD PTR _c_szFileName$GSCopy$1$[ebp]
  00daf	0f 57 c0	 xorps	 xmm0, xmm0
  00db2	8b cf		 mov	 ecx, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00db4	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _strSoundFileNameTemp$[ebp+16], 0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00dbb	0f 11 45 c0	 movups	 XMMWORD PTR _strSoundFileNameTemp$[ebp], xmm0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00dbf	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _strSoundFileNameTemp$[ebp+20], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00dc6	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  00dc9	0f 1f 80 00 00
	00 00		 npad	 7
$LL1666@LoadMotion:
  00dd0	8a 01		 mov	 al, BYTE PTR [ecx]
  00dd2	41		 inc	 ecx
  00dd3	84 c0		 test	 al, al
  00dd5	75 f9		 jne	 SHORT $LL1666@LoadMotion
  00dd7	2b ca		 sub	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00dd9	51		 push	 ecx
  00dda	57		 push	 edi
  00ddb	8d 4d c0	 lea	 ecx, DWORD PTR _strSoundFileNameTemp$[ebp]
  00dde	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 479  : 	strSoundFileNameTemp = CFileNameHelper::NoExtension(strSoundFileNameTemp);

  00de3	8d 45 c0	 lea	 eax, DWORD PTR _strSoundFileNameTemp$[ebp]
  00de6	c6 45 fc 1c	 mov	 BYTE PTR __$EHRec$[ebp+8], 28 ; 0000001cH
  00dea	50		 push	 eax
  00deb	8d 45 d8	 lea	 eax, DWORD PTR $T25[ebp]
  00dee	50		 push	 eax
  00def	e8 00 00 00 00	 call	 ?NoExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; CFileNameHelper::NoExtension
  00df4	8b f8		 mov	 edi, eax
  00df6	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1202 :         if (this == _STD addressof(_Right)) {

  00df9	8d 45 c0	 lea	 eax, DWORD PTR _strSoundFileNameTemp$[ebp]
  00dfc	3b c7		 cmp	 eax, edi
  00dfe	74 68		 je	 SHORT $LN245@LoadMotion

; 434  :         return _Myres > _Small_string_capacity;

  00e00	8b 4d d4	 mov	 ecx, DWORD PTR _strSoundFileNameTemp$[ebp+20]
  00e03	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00e06	76 2c		 jbe	 SHORT $LN228@LoadMotion
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00e08	8b 55 c0	 mov	 edx, DWORD PTR _strSoundFileNameTemp$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00e0b	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00e0c	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00e0e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00e14	72 14		 jb	 SHORT $LN239@LoadMotion

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00e16	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00e19	83 c1 23	 add	 ecx, 35			; 00000023H
  00e1c	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00e1e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00e21	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00e24	0f 87 c4 01 00
	00		 ja	 $LN1679@LoadMotion
$LN239@LoadMotion:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00e2a	51		 push	 ecx
  00e2b	52		 push	 edx
  00e2c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00e31	83 c4 08	 add	 esp, 8
$LN228@LoadMotion:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00e34	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _strSoundFileNameTemp$[ebp+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00e3b	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR _strSoundFileNameTemp$[ebp+20], 15 ; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00e42	c6 45 c0 00	 mov	 BYTE PTR _strSoundFileNameTemp$[ebp], 0

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00e46	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
  00e49	0f 11 45 c0	 movups	 XMMWORD PTR _strSoundFileNameTemp$[ebp], xmm0
  00e4d	f3 0f 7e 47 10	 movq	 xmm0, QWORD PTR [edi+16]
  00e52	66 0f d6 45 d0	 movq	 QWORD PTR _strSoundFileNameTemp$[ebp+16], xmm0

; 1263 : 
; 1264 :                 _Right_data._Mysize = 0;

  00e57	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 1265 :                 _Right_data._Myres  = _Small_string_capacity;

  00e5e	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 1266 :                 _Right_data._Activate_SSO_buffer();
; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  00e65	c6 07 00	 mov	 BYTE PTR [edi], 0
$LN245@LoadMotion:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 479  : 	strSoundFileNameTemp = CFileNameHelper::NoExtension(strSoundFileNameTemp);

  00e68	8d 4d d8	 lea	 ecx, DWORD PTR $T25[ebp]
  00e6b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00e70	6a 04		 push	 4
  00e72	68 00 00 00 00	 push	 OFFSET ??_C@_04NMMFEKGF@?4mss@
  00e77	8d 4d c0	 lea	 ecx, DWORD PTR _strSoundFileNameTemp$[ebp]
  00e7a	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 482  : 	if (strSoundFileNameTemp.length() > 13)

  00e7f	83 7d d0 0d	 cmp	 DWORD PTR _strSoundFileNameTemp$[ebp+16], 13 ; 0000000dH
  00e83	0f 86 3a 01 00
	00		 jbe	 $LN45@LoadMotion
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00e89	83 7d d4 0f	 cmp	 DWORD PTR _strSoundFileNameTemp$[ebp+20], 15 ; 0000000fH

; 416  :         value_type* _Result = _Bx._Buf;

  00e8d	8d 45 c0	 lea	 eax, DWORD PTR _strSoundFileNameTemp$[ebp]

; 1594 :         if (_Count <= _Mypair._Myval2._Myres) {

  00e90	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 486  : 		m_strSoundScriptDataFileName = "sound/";

  00e93	8d 7e 2c	 lea	 edi, DWORD PTR [esi+44]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 417  :         if (_Large_mode_engaged()) {

  00e96	0f 47 45 c0	 cmova	 eax, DWORD PTR _strSoundFileNameTemp$[ebp]

; 2247 :         return _Mypair._Myval2._Myptr()[_Off];

  00e9a	83 c0 0d	 add	 eax, 13			; 0000000dH
  00e9d	89 45 8c	 mov	 DWORD PTR _c_szHeader$1$[ebp], eax

; 1594 :         if (_Count <= _Mypair._Myval2._Myres) {

  00ea0	83 f9 06	 cmp	 ecx, 6
  00ea3	72 32		 jb	 SHORT $LN488@LoadMotion

; 416  :         value_type* _Result = _Bx._Buf;

  00ea5	89 7d a0	 mov	 DWORD PTR __Result$1$[ebp], edi
  00ea8	8b c7		 mov	 eax, edi

; 434  :         return _Myres > _Small_string_capacity;

  00eaa	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  00ead	76 05		 jbe	 SHORT $LN1657@LoadMotion

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  00eaf	8b 07		 mov	 eax, DWORD PTR [edi]
  00eb1	89 45 a0	 mov	 DWORD PTR __Result$1$[ebp], eax
$LN1657@LoadMotion:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00eb4	6a 06		 push	 6
  00eb6	68 00 00 00 00	 push	 OFFSET ??_C@_06PBLIODKG@sound?1@
  00ebb	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1597 :             _Mypair._Myval2._Mysize = _Count;

  00ebc	c7 47 10 06 00
	00 00		 mov	 DWORD PTR [edi+16], 6
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00ec3	e8 00 00 00 00	 call	 _memmove
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1599 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00ec8	8b 45 a0	 mov	 eax, DWORD PTR __Result$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00ecb	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1599 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00ece	c6 40 06 00	 mov	 BYTE PTR [eax+6], 0

; 1600 :             _ASAN_STRING_CREATE(*this);
; 1601 :             return *this;

  00ed2	e9 bb 00 00 00	 jmp	 $LN490@LoadMotion
$LN488@LoadMotion:

; 2947 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00ed7	8b d1		 mov	 edx, ecx
  00ed9	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00ede	d1 ea		 shr	 edx, 1
  00ee0	2b c2		 sub	 eax, edx
  00ee2	3b c8		 cmp	 ecx, eax
  00ee4	76 0e		 jbe	 SHORT $LN497@LoadMotion

; 2948 :             return _Max;

  00ee6	c7 45 9c ff ff
	ff 7f		 mov	 DWORD PTR $T15[ebp], 2147483647 ; 7fffffffH
  00eed	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00ef2	eb 45		 jmp	 SHORT $LN1658@LoadMotion
$LN497@LoadMotion:

; 2949 :         }
; 2950 : 
; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00ef4	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  00ef7	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  00efc	3b c1		 cmp	 eax, ecx
  00efe	0f 47 c8	 cmova	 ecx, eax
  00f01	89 4d 9c	 mov	 DWORD PTR $T15[ebp], ecx

; 801  :         ++_Capacity; // Take null terminator into consideration

  00f04	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  00f07	85 c0		 test	 eax, eax
  00f09	75 27		 jne	 SHORT $LN510@LoadMotion

; 228  :         return nullptr;

  00f0b	89 4f 14	 mov	 DWORD PTR [edi+20], ecx
  00f0e	33 d2		 xor	 edx, edx
  00f10	33 c9		 xor	 ecx, ecx
  00f12	c7 47 10 06 00
	00 00		 mov	 DWORD PTR [edi+16], 6
  00f19	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_06PBLIODKG@sound?1@
  00f1e	89 01		 mov	 DWORD PTR [ecx], eax
  00f20	66 a1 04 00 00
	00		 mov	 ax, WORD PTR ??_C@_06PBLIODKG@sound?1@+4
  00f26	66 89 41 04	 mov	 WORD PTR [ecx+4], ax
  00f2a	88 0d 06 00 00
	00		 mov	 BYTE PTR ds:6, cl
  00f30	eb 5e		 jmp	 SHORT $LN489@LoadMotion
$LN510@LoadMotion:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00f32	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00f37	72 2a		 jb	 SHORT $LN511@LoadMotion
$LN1658@LoadMotion:

; 252  :             // boost the alignment of big allocations to help autovectorization
; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00f39	50		 push	 eax
  00f3a	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00f3f	8b d0		 mov	 edx, eax
  00f41	c7 47 10 06 00
	00 00		 mov	 DWORD PTR [edi+16], 6
  00f48	8b 45 9c	 mov	 eax, DWORD PTR $T15[ebp]
  00f4b	89 47 14	 mov	 DWORD PTR [edi+20], eax
  00f4e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_06PBLIODKG@sound?1@
  00f54	89 0a		 mov	 DWORD PTR [edx], ecx
  00f56	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_06PBLIODKG@sound?1@+4
  00f5d	66 89 4a 04	 mov	 WORD PTR [edx+4], cx
  00f61	eb 26		 jmp	 SHORT $LN1675@LoadMotion
$LN511@LoadMotion:

; 136  :         return ::operator new(_Bytes);

  00f63	50		 push	 eax
  00f64	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 256  :         return _Traits::_Allocate(_Bytes);

  00f69	8b d0		 mov	 edx, eax
  00f6b	c7 47 10 06 00
	00 00		 mov	 DWORD PTR [edi+16], 6
  00f72	8b 45 9c	 mov	 eax, DWORD PTR $T15[ebp]
  00f75	89 47 14	 mov	 DWORD PTR [edi+20], eax
  00f78	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_06PBLIODKG@sound?1@
  00f7d	89 02		 mov	 DWORD PTR [edx], eax
  00f7f	66 a1 04 00 00
	00		 mov	 ax, WORD PTR ??_C@_06PBLIODKG@sound?1@+4
  00f85	66 89 42 04	 mov	 WORD PTR [edx+4], ax
$LN1675@LoadMotion:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2980 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  00f89	c6 42 06 00	 mov	 BYTE PTR [edx+6], 0
  00f8d	83 c4 04	 add	 esp, 4
$LN489@LoadMotion:
  00f90	89 17		 mov	 DWORD PTR [edi], edx
$LN490@LoadMotion:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00f92	8b 55 8c	 mov	 edx, DWORD PTR _c_szHeader$1$[ebp]
  00f95	8b ca		 mov	 ecx, edx
  00f97	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  00f9a	89 45 8c	 mov	 DWORD PTR tv5974[ebp], eax
  00f9d	0f 1f 00	 npad	 3
$LL1667@LoadMotion:
  00fa0	8a 01		 mov	 al, BYTE PTR [ecx]
  00fa2	41		 inc	 ecx
  00fa3	84 c0		 test	 al, al
  00fa5	75 f9		 jne	 SHORT $LL1667@LoadMotion
  00fa7	2b 4d 8c	 sub	 ecx, DWORD PTR tv5974[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00faa	51		 push	 ecx
  00fab	52		 push	 edx
  00fac	8b cf		 mov	 ecx, edi
  00fae	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 434  :         return _Myres > _Small_string_capacity;

  00fb3	83 7f 14 0f	 cmp	 DWORD PTR [edi+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  00fb7	76 02		 jbe	 SHORT $LN368@LoadMotion

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00fb9	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN368@LoadMotion:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 489  : 		LoadSoundScriptData(m_strSoundScriptDataFileName.c_str());

  00fbb	57		 push	 edi
  00fbc	8b ce		 mov	 ecx, esi
  00fbe	e8 00 00 00 00	 call	 ?LoadSoundScriptData@CRaceMotionData@@QAE_NPBD@Z ; CRaceMotionData::LoadSoundScriptData
$LN45@LoadMotion:

; 492  : 	return true;

  00fc3	8d 4d c0	 lea	 ecx, DWORD PTR _strSoundFileNameTemp$[ebp]
  00fc6	c6 45 9b 01	 mov	 BYTE PTR $T14[ebp], 1
  00fca	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00fcf	8d 4d a8	 lea	 ecx, DWORD PTR _strNodeName$[ebp]
  00fd2	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00fd7	8a 45 9b	 mov	 al, BYTE PTR $T14[ebp]
  00fda	e9 77 f2 ff ff	 jmp	 $LN1@LoadMotion
$LN451@LoadMotion:

; 493  : }

  00fdf	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1677@LoadMotion:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00fe4	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1678@LoadMotion:
  00fe9	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1679@LoadMotion:
  00fee	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1671@LoadMotion:
  00ff3	90		 npad	 1
$LN1665@LoadMotion:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 493  : }

  00ff4	00 00 00 00	 DD	 $LN35@LoadMotion
  00ff8	00 00 00 00	 DD	 $LN36@LoadMotion
  00ffc	00 00 00 00	 DD	 $LN1622@LoadMotion
  01000	00 00 00 00	 DD	 $LN37@LoadMotion
  01004	00 00 00 00	 DD	 $LN38@LoadMotion
  01008	00 00 00 00	 DD	 $LN34@LoadMotion
  0100c	00 00 00 00	 DD	 $LN39@LoadMotion
  01010	00 00 00 00	 DD	 $LN40@LoadMotion
  01014	00 00 00 00	 DD	 $LN41@LoadMotion
  01018	00 00 00 00	 DD	 $LN42@LoadMotion
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadMotionData@CRaceMotionData@@QAE_NPBD@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T18[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadMotionData@CRaceMotionData@@QAE_NPBD@Z$1:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR $T19[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadMotionData@CRaceMotionData@@QAE_NPBD@Z$2:
  00010	8d 4d d8	 lea	 ecx, DWORD PTR $T20[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadMotionData@CRaceMotionData@@QAE_NPBD@Z$3:
  00018	8d 4d a8	 lea	 ecx, DWORD PTR _strNodeName$[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadMotionData@CRaceMotionData@@QAE_NPBD@Z$4:
  00020	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _GotoChild$2[ebp]
  00026	e9 00 00 00 00	 jmp	 ??1CGotoChild@CTextFileLoader@@QAE@XZ ; CTextFileLoader::CGotoChild::~CGotoChild
__unwindfunclet$?LoadMotionData@CRaceMotionData@@QAE_NPBD@Z$5:
  0002b	8d 4d d8	 lea	 ecx, DWORD PTR $T32[ebp]
  0002e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadMotionData@CRaceMotionData@@QAE_NPBD@Z$6:
  00033	8d 4d d8	 lea	 ecx, DWORD PTR $T31[ebp]
  00036	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadMotionData@CRaceMotionData@@QAE_NPBD@Z$7:
  0003b	8d 4d d8	 lea	 ecx, DWORD PTR $T30[ebp]
  0003e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadMotionData@CRaceMotionData@@QAE_NPBD@Z$8:
  00043	8d 4d d8	 lea	 ecx, DWORD PTR $T28[ebp]
  00046	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadMotionData@CRaceMotionData@@QAE_NPBD@Z$9:
  0004b	8d 4d d8	 lea	 ecx, DWORD PTR $T27[ebp]
  0004e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadMotionData@CRaceMotionData@@QAE_NPBD@Z$10:
  00053	8d 4d d8	 lea	 ecx, DWORD PTR $T29[ebp]
  00056	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadMotionData@CRaceMotionData@@QAE_NPBD@Z$11:
  0005b	8d 4d d8	 lea	 ecx, DWORD PTR $T26[ebp]
  0005e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadMotionData@CRaceMotionData@@QAE_NPBD@Z$12:
  00063	8d 4d d8	 lea	 ecx, DWORD PTR $T24[ebp]
  00066	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadMotionData@CRaceMotionData@@QAE_NPBD@Z$13:
  0006b	8d 4d d8	 lea	 ecx, DWORD PTR $T23[ebp]
  0006e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadMotionData@CRaceMotionData@@QAE_NPBD@Z$14:
  00073	8d 4d d8	 lea	 ecx, DWORD PTR $T21[ebp]
  00076	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadMotionData@CRaceMotionData@@QAE_NPBD@Z$24:
  0007b	8d 4d d8	 lea	 ecx, DWORD PTR $T22[ebp]
  0007e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadMotionData@CRaceMotionData@@QAE_NPBD@Z$25:
  00083	8d 4d c0	 lea	 ecx, DWORD PTR _strSoundFileNameTemp$[ebp]
  00086	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0008b	cc		 int	 3
  0008c	cc		 int	 3
  0008d	cc		 int	 3
  0008e	cc		 int	 3
  0008f	cc		 int	 3
__ehhandler$?LoadMotionData@CRaceMotionData@@QAE_NPBD@Z:
  00090	90		 npad	 1
  00091	90		 npad	 1
  00092	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00096	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00099	8b 8a 78 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-136]
  0009f	33 c8		 xor	 ecx, eax
  000a1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a6	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  000a9	33 c8		 xor	 ecx, eax
  000ab	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b0	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadMotionData@CRaceMotionData@@QAE_NPBD@Z
  000b5	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadMotionData@CRaceMotionData@@QAE_NPBD@Z ENDP	; CRaceMotionData::LoadMotionData
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
;	COMDAT ?GetSoundInstanceVectorPointer@CRaceMotionData@@QBEPBV?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@XZ
_TEXT	SEGMENT
?GetSoundInstanceVectorPointer@CRaceMotionData@@QBEPBV?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@XZ PROC ; CRaceMotionData::GetSoundInstanceVectorPointer, COMDAT
; _this$ = ecx

; 313  : 	return &m_SoundInstanceVector;

  00000	8d 81 b0 00 00
	00		 lea	 eax, DWORD PTR [ecx+176]

; 314  : }

  00006	c3		 ret	 0
?GetSoundInstanceVectorPointer@CRaceMotionData@@QBEPBV?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@XZ ENDP ; CRaceMotionData::GetSoundInstanceVectorPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
;	COMDAT ?GetEventStartTime@CRaceMotionData@@QBEMK@Z
_TEXT	SEGMENT
_dwIndex$ = 8						; size = 4
?GetEventStartTime@CRaceMotionData@@QBEMK@Z PROC	; CRaceMotionData::GetEventStartTime, COMDAT
; _this$ = ecx

; 304  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00003	8b 81 a8 00 00
	00		 mov	 eax, DWORD PTR [ecx+168]
  00009	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  0000f	2b c2		 sub	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 305  : 	if (dwIndex >= m_MotionEventDataVector.size())

  00011	8b 4d 08	 mov	 ecx, DWORD PTR _dwIndex$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00014	c1 f8 02	 sar	 eax, 2
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 305  : 	if (dwIndex >= m_MotionEventDataVector.size())

  00017	3b c8		 cmp	 ecx, eax
  00019	72 06		 jb	 SHORT $LN2@GetEventSt

; 306  : 		return 0.0f;

  0001b	d9 ee		 fldz

; 309  : }

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
$LN2@GetEventSt:

; 307  : 
; 308  : 	return m_MotionEventDataVector[dwIndex]->fStartingTime;

  00021	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  00024	d9 40 0c	 fld	 DWORD PTR [eax+12]

; 309  : }

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?GetEventStartTime@CRaceMotionData@@QBEMK@Z ENDP	; CRaceMotionData::GetEventStartTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
;	COMDAT ?GetEventType@CRaceMotionData@@QBEHK@Z
_TEXT	SEGMENT
_dwIndex$ = 8						; size = 4
?GetEventType@CRaceMotionData@@QBEHK@Z PROC		; CRaceMotionData::GetEventType, COMDAT
; _this$ = ecx

; 296  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00003	8b 81 a8 00 00
	00		 mov	 eax, DWORD PTR [ecx+168]
  00009	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  0000f	2b c2		 sub	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 297  : 	if (dwIndex >= m_MotionEventDataVector.size())

  00011	8b 4d 08	 mov	 ecx, DWORD PTR _dwIndex$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00014	c1 f8 02	 sar	 eax, 2
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 297  : 	if (dwIndex >= m_MotionEventDataVector.size())

  00017	3b c8		 cmp	 ecx, eax
  00019	72 06		 jb	 SHORT $LN2@GetEventTy

; 298  : 		return MOTION_EVENT_TYPE_NONE;

  0001b	33 c0		 xor	 eax, eax

; 301  : }

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
$LN2@GetEventTy:

; 299  : 
; 300  : 	return m_MotionEventDataVector[dwIndex]->iType;

  00021	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  00024	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 301  : }

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?GetEventType@CRaceMotionData@@QBEHK@Z ENDP		; CRaceMotionData::GetEventType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
;	COMDAT ?GetMotionAttackingEventDataPointer@CRaceMotionData@@QBEHEPAPBUSMotionEventDataAttack@NMotionEvent@@@Z
_TEXT	SEGMENT
_byIndex$ = 8						; size = 1
_c_ppData$ = 12						; size = 4
?GetMotionAttackingEventDataPointer@CRaceMotionData@@QBEHEPAPBUSMotionEventDataAttack@NMotionEvent@@@Z PROC ; CRaceMotionData::GetMotionAttackingEventDataPointer, COMDAT
; _this$ = ecx

; 280  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00003	8b 81 a8 00 00
	00		 mov	 eax, DWORD PTR [ecx+168]
  00009	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  0000f	2b c2		 sub	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 280  : {

  00011	56		 push	 esi

; 281  : 	if (byIndex >= m_MotionEventDataVector.size())

  00012	0f b6 75 08	 movzx	 esi, BYTE PTR _byIndex$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00016	c1 f8 02	 sar	 eax, 2
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 281  : 	if (byIndex >= m_MotionEventDataVector.size())

  00019	3b f0		 cmp	 esi, eax
  0001b	73 18		 jae	 SHORT $LN11@GetMotionA

; 282  : 		return FALSE;
; 283  : 
; 284  : 	const CRaceMotionData::TMotionEventData * pData = m_MotionEventDataVector[byIndex];
; 285  : 	const CRaceMotionData::TMotionAttackingEventData * pAttackingEvent = (const CRaceMotionData::TMotionAttackingEventData *)pData;

  0001d	8b 0c b2	 mov	 ecx, DWORD PTR [edx+esi*4]

; 286  : 
; 287  : 	if (MOTION_EVENT_TYPE_SPECIAL_ATTACKING == pAttackingEvent->iType)

  00020	83 79 04 04	 cmp	 DWORD PTR [ecx+4], 4
  00024	74 0f		 je	 SHORT $LN11@GetMotionA

; 289  : 
; 290  : 	*c_ppData = pAttackingEvent;

  00026	8b 45 0c	 mov	 eax, DWORD PTR _c_ppData$[ebp]
  00029	5e		 pop	 esi
  0002a	89 08		 mov	 DWORD PTR [eax], ecx

; 291  : 
; 292  : 	return TRUE;

  0002c	b8 01 00 00 00	 mov	 eax, 1

; 293  : }

  00031	5d		 pop	 ebp
  00032	c2 08 00	 ret	 8
$LN11@GetMotionA:

; 288  : 		return FALSE;

  00035	33 c0		 xor	 eax, eax
  00037	5e		 pop	 esi

; 293  : }

  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
?GetMotionAttackingEventDataPointer@CRaceMotionData@@QBEHEPAPBUSMotionEventDataAttack@NMotionEvent@@@Z ENDP ; CRaceMotionData::GetMotionAttackingEventDataPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
;	COMDAT ?GetMotionEventDataPointer@CRaceMotionData@@QBEHEPAPBUSMotionEventData@NMotionEvent@@@Z
_TEXT	SEGMENT
_byIndex$ = 8						; size = 1
_c_ppData$ = 12						; size = 4
?GetMotionEventDataPointer@CRaceMotionData@@QBEHEPAPBUSMotionEventData@NMotionEvent@@@Z PROC ; CRaceMotionData::GetMotionEventDataPointer, COMDAT
; _this$ = ecx

; 270  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00003	8b 81 a8 00 00
	00		 mov	 eax, DWORD PTR [ecx+168]
  00009	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  0000f	2b c2		 sub	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 270  : {

  00011	56		 push	 esi

; 271  : 	if (byIndex >= m_MotionEventDataVector.size())

  00012	0f b6 75 08	 movzx	 esi, BYTE PTR _byIndex$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00016	c1 f8 02	 sar	 eax, 2
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 271  : 	if (byIndex >= m_MotionEventDataVector.size())

  00019	3b f0		 cmp	 esi, eax
  0001b	72 07		 jb	 SHORT $LN2@GetMotionE

; 272  : 		return FALSE;

  0001d	33 c0		 xor	 eax, eax
  0001f	5e		 pop	 esi

; 277  : }

  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
$LN2@GetMotionE:

; 273  : 
; 274  : 	*c_ppData = m_MotionEventDataVector[byIndex];

  00024	8b 45 0c	 mov	 eax, DWORD PTR _c_ppData$[ebp]
  00027	8b 0c b2	 mov	 ecx, DWORD PTR [edx+esi*4]
  0002a	5e		 pop	 esi
  0002b	89 08		 mov	 DWORD PTR [eax], ecx

; 275  : 
; 276  : 	return TRUE;

  0002d	b8 01 00 00 00	 mov	 eax, 1

; 277  : }

  00032	5d		 pop	 ebp
  00033	c2 08 00	 ret	 8
?GetMotionEventDataPointer@CRaceMotionData@@QBEHEPAPBUSMotionEventData@NMotionEvent@@@Z ENDP ; CRaceMotionData::GetMotionEventDataPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
;	COMDAT ?GetMotionEventDataCount@CRaceMotionData@@QBEKXZ
_TEXT	SEGMENT
?GetMotionEventDataCount@CRaceMotionData@@QBEKXZ PROC	; CRaceMotionData::GetMotionEventDataCount, COMDAT
; _this$ = ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00000	8b 81 a8 00 00
	00		 mov	 eax, DWORD PTR [ecx+168]
  00006	2b 81 a4 00 00
	00		 sub	 eax, DWORD PTR [ecx+164]
  0000c	c1 f8 02	 sar	 eax, 2
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 267  : }

  0000f	c3		 ret	 0
?GetMotionEventDataCount@CRaceMotionData@@QBEKXZ ENDP	; CRaceMotionData::GetMotionEventDataCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
;	COMDAT ?GetLoopEndTime@CRaceMotionData@@QBEMXZ
_TEXT	SEGMENT
?GetLoopEndTime@CRaceMotionData@@QBEMXZ PROC		; CRaceMotionData::GetLoopEndTime, COMDAT
; _this$ = ecx

; 260  : 	return m_fLoopEndTime;

  00000	d9 41 70	 fld	 DWORD PTR [ecx+112]

; 261  : }

  00003	c3		 ret	 0
?GetLoopEndTime@CRaceMotionData@@QBEMXZ ENDP		; CRaceMotionData::GetLoopEndTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
;	COMDAT ?GetLoopStartTime@CRaceMotionData@@QBEMXZ
_TEXT	SEGMENT
?GetLoopStartTime@CRaceMotionData@@QBEMXZ PROC		; CRaceMotionData::GetLoopStartTime, COMDAT
; _this$ = ecx

; 255  : 	return m_fLoopStartTime;

  00000	d9 41 6c	 fld	 DWORD PTR [ecx+108]

; 256  : }

  00003	c3		 ret	 0
?GetLoopStartTime@CRaceMotionData@@QBEMXZ ENDP		; CRaceMotionData::GetLoopStartTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
;	COMDAT ?IsLoopMotion@CRaceMotionData@@QBEHXZ
_TEXT	SEGMENT
?IsLoopMotion@CRaceMotionData@@QBEHXZ PROC		; CRaceMotionData::IsLoopMotion, COMDAT
; _this$ = ecx

; 250  : 	return m_isLoopMotion;

  00000	8b 41 68	 mov	 eax, DWORD PTR [ecx+104]

; 251  : }

  00003	c3		 ret	 0
?IsLoopMotion@CRaceMotionData@@QBEHXZ ENDP		; CRaceMotionData::IsLoopMotion
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
;	COMDAT ?IsCancelEnableSkill@CRaceMotionData@@QBEHXZ
_TEXT	SEGMENT
?IsCancelEnableSkill@CRaceMotionData@@QBEHXZ PROC	; CRaceMotionData::IsCancelEnableSkill, COMDAT
; _this$ = ecx

; 244  : 	return m_bCancelEnableSkill;

  00000	8b 81 a0 00 00
	00		 mov	 eax, DWORD PTR [ecx+160]

; 245  : }

  00006	c3		 ret	 0
?IsCancelEnableSkill@CRaceMotionData@@QBEHXZ ENDP	; CRaceMotionData::IsCancelEnableSkill
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
;	COMDAT ?HasSplashMotionEvent@CRaceMotionData@@QBEHXZ
_TEXT	SEGMENT
?HasSplashMotionEvent@CRaceMotionData@@QBEHXZ PROC	; CRaceMotionData::HasSplashMotionEvent, COMDAT
; _this$ = ecx

; 238  : 	return m_hasSplashEvent;

  00000	8b 81 bc 00 00
	00		 mov	 eax, DWORD PTR [ecx+188]

; 239  : }

  00006	c3		 ret	 0
?HasSplashMotionEvent@CRaceMotionData@@QBEHXZ ENDP	; CRaceMotionData::HasSplashMotionEvent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
;	COMDAT ?GetMotionAttackDataReference@CRaceMotionData@@QBEABUSMotionAttackData@NRaceData@@XZ
_TEXT	SEGMENT
?GetMotionAttackDataReference@CRaceMotionData@@QBEABUSMotionAttackData@NRaceData@@XZ PROC ; CRaceMotionData::GetMotionAttackDataReference, COMDAT
; _this$ = ecx

; 232  : 	assert(m_isAttackingMotion);
; 233  : 	return m_MotionAttackData;

  00000	8d 41 78	 lea	 eax, DWORD PTR [ecx+120]

; 234  : }

  00003	c3		 ret	 0
?GetMotionAttackDataReference@CRaceMotionData@@QBEABUSMotionAttackData@NRaceData@@XZ ENDP ; CRaceMotionData::GetMotionAttackDataReference
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
;	COMDAT ?GetMotionAttackDataPointer@CRaceMotionData@@QBEPBUSMotionAttackData@NRaceData@@XZ
_TEXT	SEGMENT
?GetMotionAttackDataPointer@CRaceMotionData@@QBEPBUSMotionAttackData@NRaceData@@XZ PROC ; CRaceMotionData::GetMotionAttackDataPointer, COMDAT
; _this$ = ecx

; 227  : 	return & m_MotionAttackData;

  00000	8d 41 78	 lea	 eax, DWORD PTR [ecx+120]

; 228  : }

  00003	c3		 ret	 0
?GetMotionAttackDataPointer@CRaceMotionData@@QBEPBUSMotionAttackData@NRaceData@@XZ ENDP ; CRaceMotionData::GetMotionAttackDataPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
;	COMDAT ?isAttackingMotion@CRaceMotionData@@QBEHXZ
_TEXT	SEGMENT
?isAttackingMotion@CRaceMotionData@@QBEHXZ PROC		; CRaceMotionData::isAttackingMotion, COMDAT
; _this$ = ecx

; 222  : 	return m_isAttackingMotion;

  00000	8b 41 74	 mov	 eax, DWORD PTR [ecx+116]

; 223  : }

  00003	c3		 ret	 0
?isAttackingMotion@CRaceMotionData@@QBEHXZ ENDP		; CRaceMotionData::isAttackingMotion
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
;	COMDAT ?GetComboInputEndTime@CRaceMotionData@@QBEMXZ
_TEXT	SEGMENT
?GetComboInputEndTime@CRaceMotionData@@QBEMXZ PROC	; CRaceMotionData::GetComboInputEndTime, COMDAT
; _this$ = ecx

; 215  : 	assert(m_isComboMotion);
; 216  : 	return m_ComboInputData.fInputEndTime;

  00000	d9 41 64	 fld	 DWORD PTR [ecx+100]

; 217  : }

  00003	c3		 ret	 0
?GetComboInputEndTime@CRaceMotionData@@QBEMXZ ENDP	; CRaceMotionData::GetComboInputEndTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
;	COMDAT ?GetNextComboTime@CRaceMotionData@@QBEMXZ
_TEXT	SEGMENT
?GetNextComboTime@CRaceMotionData@@QBEMXZ PROC		; CRaceMotionData::GetNextComboTime, COMDAT
; _this$ = ecx

; 209  : 	assert(m_isComboMotion);
; 210  : 	return m_ComboInputData.fNextComboTime;

  00000	d9 41 60	 fld	 DWORD PTR [ecx+96]

; 211  : }

  00003	c3		 ret	 0
?GetNextComboTime@CRaceMotionData@@QBEMXZ ENDP		; CRaceMotionData::GetNextComboTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
;	COMDAT ?GetComboInputStartTime@CRaceMotionData@@QBEMXZ
_TEXT	SEGMENT
?GetComboInputStartTime@CRaceMotionData@@QBEMXZ PROC	; CRaceMotionData::GetComboInputStartTime, COMDAT
; _this$ = ecx

; 203  : 	assert(m_isComboMotion);
; 204  : 	return m_ComboInputData.fInputStartTime;

  00000	d9 41 5c	 fld	 DWORD PTR [ecx+92]

; 205  : }

  00003	c3		 ret	 0
?GetComboInputStartTime@CRaceMotionData@@QBEMXZ ENDP	; CRaceMotionData::GetComboInputStartTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
;	COMDAT ?IsComboInputTimeData@CRaceMotionData@@QBEHXZ
_TEXT	SEGMENT
?IsComboInputTimeData@CRaceMotionData@@QBEHXZ PROC	; CRaceMotionData::IsComboInputTimeData, COMDAT
; _this$ = ecx

; 198  : 	return m_isComboMotion;

  00000	8b 41 58	 mov	 eax, DWORD PTR [ecx+88]

; 199  : }

  00003	c3		 ret	 0
?IsComboInputTimeData@CRaceMotionData@@QBEHXZ ENDP	; CRaceMotionData::IsComboInputTimeData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
;	COMDAT ?SetAccumulationPosition@CRaceMotionData@@QAEXABUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
_c_rPos$ = 8						; size = 4
?SetAccumulationPosition@CRaceMotionData@@QAEXABUD3DXVECTOR3@@@Z PROC ; CRaceMotionData::SetAccumulationPosition, COMDAT
; _this$ = ecx

; 317  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 318  : 	m_accumulationPosition = c_rPos;

  00003	8b 45 08	 mov	 eax, DWORD PTR _c_rPos$[ebp]
  00006	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0000a	66 0f d6 41 4c	 movq	 QWORD PTR [ecx+76], xmm0
  0000f	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00012	89 41 54	 mov	 DWORD PTR [ecx+84], eax

; 319  : 	m_isAccumulationMotion = TRUE;

  00015	c7 41 48 01 00
	00 00		 mov	 DWORD PTR [ecx+72], 1

; 320  : }

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?SetAccumulationPosition@CRaceMotionData@@QAEXABUD3DXVECTOR3@@@Z ENDP ; CRaceMotionData::SetAccumulationPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
;	COMDAT ?GetMotionDuration@CRaceMotionData@@QAEMXZ
_TEXT	SEGMENT
?GetMotionDuration@CRaceMotionData@@QAEMXZ PROC		; CRaceMotionData::GetMotionDuration, COMDAT
; _this$ = ecx

; 187  : 	return m_fMotionDuration;

  00000	d9 41 44	 fld	 DWORD PTR [ecx+68]

; 188  : }

  00003	c3		 ret	 0
?GetMotionDuration@CRaceMotionData@@QAEMXZ ENDP		; CRaceMotionData::GetMotionDuration
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
;	COMDAT ?SetMotionDuration@CRaceMotionData@@QAEXM@Z
_TEXT	SEGMENT
_fDuration$ = 8						; size = 4
?SetMotionDuration@CRaceMotionData@@QAEXM@Z PROC	; CRaceMotionData::SetMotionDuration, COMDAT
; _this$ = ecx

; 191  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 192  : 	m_fMotionDuration = fDuration;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fDuration$[ebp]
  00008	f3 0f 11 41 44	 movss	 DWORD PTR [ecx+68], xmm0

; 193  : }

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
?SetMotionDuration@CRaceMotionData@@QAEXM@Z ENDP	; CRaceMotionData::SetMotionDuration
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
;	COMDAT ?GetSoundScriptFileName@CRaceMotionData@@QBEPBDXZ
_TEXT	SEGMENT
?GetSoundScriptFileName@CRaceMotionData@@QBEPBDXZ PROC	; CRaceMotionData::GetSoundScriptFileName, COMDAT
; _this$ = ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00000	83 79 40 0f	 cmp	 DWORD PTR [ecx+64], 15	; 0000000fH

; 2328 :         return _Mypair._Myval2._Myptr();

  00004	8d 41 2c	 lea	 eax, DWORD PTR [ecx+44]

; 426  :         if (_Large_mode_engaged()) {

  00007	76 02		 jbe	 SHORT $LN7@GetSoundSc
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 594  : 	return m_strSoundScriptDataFileName.c_str();

  00009	8b 00		 mov	 eax, DWORD PTR [eax]
$LN7@GetSoundSc:

; 595  : }

  0000b	c3		 ret	 0
?GetSoundScriptFileName@CRaceMotionData@@QBEPBDXZ ENDP	; CRaceMotionData::GetSoundScriptFileName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
;	COMDAT ?GetMotionFileName@CRaceMotionData@@QBEPBDXZ
_TEXT	SEGMENT
?GetMotionFileName@CRaceMotionData@@QBEPBDXZ PROC	; CRaceMotionData::GetMotionFileName, COMDAT
; _this$ = ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00000	83 79 28 0f	 cmp	 DWORD PTR [ecx+40], 15	; 0000000fH

; 2328 :         return _Mypair._Myval2._Myptr();

  00004	8d 41 14	 lea	 eax, DWORD PTR [ecx+20]

; 426  :         if (_Large_mode_engaged()) {

  00007	76 02		 jbe	 SHORT $LN7@GetMotionF
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 589  : 	return m_strMotionFileName.c_str();

  00009	8b 00		 mov	 eax, DWORD PTR [eax]
$LN7@GetMotionF:

; 590  : }

  0000b	c3		 ret	 0
?GetMotionFileName@CRaceMotionData@@QBEPBDXZ ENDP	; CRaceMotionData::GetMotionFileName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
;	COMDAT ?GetLoopCount@CRaceMotionData@@QBEHXZ
_TEXT	SEGMENT
?GetLoopCount@CRaceMotionData@@QBEHXZ PROC		; CRaceMotionData::GetLoopCount, COMDAT
; _this$ = ecx

; 182  : 	return m_iLoopCount;

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 183  : }

  00003	c3		 ret	 0
?GetLoopCount@CRaceMotionData@@QBEHXZ ENDP		; CRaceMotionData::GetLoopCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
;	COMDAT ?IsLock@CRaceMotionData@@QBE_NXZ
_TEXT	SEGMENT
?IsLock@CRaceMotionData@@QBE_NXZ PROC			; CRaceMotionData::IsLock, COMDAT
; _this$ = ecx

; 177  : 	return m_isLock ? true : false;

  00000	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  00004	0f 95 c0	 setne	 al

; 178  : }

  00007	c3		 ret	 0
?IsLock@CRaceMotionData@@QBE_NXZ ENDP			; CRaceMotionData::IsLock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
;	COMDAT ?GetType@CRaceMotionData@@QBEIXZ
_TEXT	SEGMENT
?GetType@CRaceMotionData@@QBEIXZ PROC			; CRaceMotionData::GetType, COMDAT
; _this$ = ecx

; 172  : 	return m_eType;

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 173  : }

  00003	c3		 ret	 0
?GetType@CRaceMotionData@@QBEIXZ ENDP			; CRaceMotionData::GetType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
;	COMDAT ?SetName@CRaceMotionData@@QAEXI@Z
_TEXT	SEGMENT
_eName$ = 8						; size = 4
?SetName@CRaceMotionData@@QAEXI@Z PROC			; CRaceMotionData::SetName, COMDAT
; _this$ = ecx

; 32   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 33   : 	m_eName=eName;

  00003	8b 55 08	 mov	 edx, DWORD PTR _eName$[ebp]
  00006	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 34   : 
; 35   : 	switch (m_eName)

  00009	81 fa 32 01 00
	00		 cmp	 edx, 306		; 00000132H
  0000f	0f 87 9f 00 00
	00		 ja	 $LN82@SetName
  00015	0f 84 b2 00 00
	00		 je	 $LN16@SetName
  0001b	83 fa 26	 cmp	 edx, 38			; 00000026H
  0001e	0f 87 b6 00 00
	00		 ja	 $LN78@SetName
  00024	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN83@SetName[edx]
  0002b	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN84@SetName[eax*4]
$LN4@SetName:

; 36   : 	{
; 37   : 		case NAME_NONE:
; 38   : 			SetType(TYPE_NONE);

  00032	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _eName$[ebp], 0

; 150  : 			break;
; 151  : 	}
; 152  : }

  00039	5d		 pop	 ebp

; 36   : 	{
; 37   : 		case NAME_NONE:
; 38   : 			SetType(TYPE_NONE);

  0003a	e9 00 00 00 00	 jmp	 ?SetType@CRaceMotionData@@IAEXI@Z ; CRaceMotionData::SetType
$LN5@SetName:

; 39   : 			break;
; 40   : 		case NAME_WAIT:
; 41   : 		case NAME_INTRO_WAIT:
; 42   : 		case NAME_STOP:
; 43   : 			SetType(TYPE_WAIT);

  0003f	c7 45 08 01 00
	00 00		 mov	 DWORD PTR _eName$[ebp], 1

; 150  : 			break;
; 151  : 	}
; 152  : }

  00046	5d		 pop	 ebp

; 39   : 			break;
; 40   : 		case NAME_WAIT:
; 41   : 		case NAME_INTRO_WAIT:
; 42   : 		case NAME_STOP:
; 43   : 			SetType(TYPE_WAIT);

  00047	e9 00 00 00 00	 jmp	 ?SetType@CRaceMotionData@@IAEXI@Z ; CRaceMotionData::SetType
$LN8@SetName:

; 44   : 			break;
; 45   : 		case NAME_WALK:
; 46   : 		case NAME_RUN:
; 47   : 			SetType(TYPE_MOVE);

  0004c	c7 45 08 02 00
	00 00		 mov	 DWORD PTR _eName$[ebp], 2

; 150  : 			break;
; 151  : 	}
; 152  : }

  00053	5d		 pop	 ebp

; 44   : 			break;
; 45   : 		case NAME_WALK:
; 46   : 		case NAME_RUN:
; 47   : 			SetType(TYPE_MOVE);

  00054	e9 00 00 00 00	 jmp	 ?SetType@CRaceMotionData@@IAEXI@Z ; CRaceMotionData::SetType
$LN10@SetName:

; 48   : 			break;
; 49   : 		case NAME_DAMAGE:
; 50   : 		case NAME_DAMAGE_BACK:
; 51   : 			SetType(TYPE_DAMAGE);

  00059	c7 45 08 05 00
	00 00		 mov	 DWORD PTR _eName$[ebp], 5

; 150  : 			break;
; 151  : 	}
; 152  : }

  00060	5d		 pop	 ebp

; 48   : 			break;
; 49   : 		case NAME_DAMAGE:
; 50   : 		case NAME_DAMAGE_BACK:
; 51   : 			SetType(TYPE_DAMAGE);

  00061	e9 00 00 00 00	 jmp	 ?SetType@CRaceMotionData@@IAEXI@Z ; CRaceMotionData::SetType
$LN12@SetName:

; 52   : 			break;
; 53   : 		case NAME_DAMAGE_FLYING:
; 54   : 		case NAME_DAMAGE_FLYING_BACK:
; 55   : 			SetType(TYPE_KNOCKDOWN);

  00066	c7 45 08 06 00
	00 00		 mov	 DWORD PTR _eName$[ebp], 6

; 150  : 			break;
; 151  : 	}
; 152  : }

  0006d	5d		 pop	 ebp

; 52   : 			break;
; 53   : 		case NAME_DAMAGE_FLYING:
; 54   : 		case NAME_DAMAGE_FLYING_BACK:
; 55   : 			SetType(TYPE_KNOCKDOWN);

  0006e	e9 00 00 00 00	 jmp	 ?SetType@CRaceMotionData@@IAEXI@Z ; CRaceMotionData::SetType
$LN14@SetName:

; 56   : 			break;
; 57   : 		case NAME_STAND_UP:
; 58   : 		case NAME_STAND_UP_BACK:
; 59   : 			SetType(TYPE_STANDUP);

  00073	c7 45 08 09 00
	00 00		 mov	 DWORD PTR _eName$[ebp], 9

; 150  : 			break;
; 151  : 	}
; 152  : }

  0007a	5d		 pop	 ebp

; 56   : 			break;
; 57   : 		case NAME_STAND_UP:
; 58   : 		case NAME_STAND_UP_BACK:
; 59   : 			SetType(TYPE_STANDUP);

  0007b	e9 00 00 00 00	 jmp	 ?SetType@CRaceMotionData@@IAEXI@Z ; CRaceMotionData::SetType
$LN61@SetName:

; 119  : 			break;
; 120  : 		case NAME_DEAD:
; 121  : 		case NAME_DEAD_BACK:
; 122  : 			SetType(TYPE_DIE);

  00080	c7 45 08 07 00
	00 00		 mov	 DWORD PTR _eName$[ebp], 7

; 150  : 			break;
; 151  : 	}
; 152  : }

  00087	5d		 pop	 ebp

; 119  : 			break;
; 120  : 		case NAME_DEAD:
; 121  : 		case NAME_DEAD_BACK:
; 122  : 			SetType(TYPE_DIE);

  00088	e9 00 00 00 00	 jmp	 ?SetType@CRaceMotionData@@IAEXI@Z ; CRaceMotionData::SetType
$LN63@SetName:

; 123  : 			break;
; 124  : 		case NAME_NORMAL_ATTACK:
; 125  : 			SetType(TYPE_ATTACK);

  0008d	c7 45 08 03 00
	00 00		 mov	 DWORD PTR _eName$[ebp], 3

; 150  : 			break;
; 151  : 	}
; 152  : }

  00094	5d		 pop	 ebp

; 123  : 			break;
; 124  : 		case NAME_NORMAL_ATTACK:
; 125  : 			SetType(TYPE_ATTACK);

  00095	e9 00 00 00 00	 jmp	 ?SetType@CRaceMotionData@@IAEXI@Z ; CRaceMotionData::SetType
$LN64@SetName:

; 126  : 			break;
; 127  : 		case NAME_COMBO_ATTACK_1:
; 128  : 		case NAME_COMBO_ATTACK_2:
; 129  : 		case NAME_COMBO_ATTACK_3:
; 130  : 		case NAME_COMBO_ATTACK_4:
; 131  : 		case NAME_COMBO_ATTACK_5:
; 132  : 		case NAME_COMBO_ATTACK_6:
; 133  : 		case NAME_COMBO_ATTACK_7:
; 134  : 		case NAME_COMBO_ATTACK_8:
; 135  : 			SetType(TYPE_COMBO);

  0009a	c7 45 08 04 00
	00 00		 mov	 DWORD PTR _eName$[ebp], 4

; 150  : 			break;
; 151  : 	}
; 152  : }

  000a1	5d		 pop	 ebp

; 126  : 			break;
; 127  : 		case NAME_COMBO_ATTACK_1:
; 128  : 		case NAME_COMBO_ATTACK_2:
; 129  : 		case NAME_COMBO_ATTACK_3:
; 130  : 		case NAME_COMBO_ATTACK_4:
; 131  : 		case NAME_COMBO_ATTACK_5:
; 132  : 		case NAME_COMBO_ATTACK_6:
; 133  : 		case NAME_COMBO_ATTACK_7:
; 134  : 		case NAME_COMBO_ATTACK_8:
; 135  : 			SetType(TYPE_COMBO);

  000a2	e9 00 00 00 00	 jmp	 ?SetType@CRaceMotionData@@IAEXI@Z ; CRaceMotionData::SetType
$LN72@SetName:

; 136  : 			break;
; 137  : 		case NAME_FISHING_THROW:
; 138  : 		case NAME_FISHING_WAIT:
; 139  : 		case NAME_FISHING_REACT:
; 140  : 		case NAME_FISHING_CATCH:
; 141  : 		case NAME_FISHING_FAIL:
; 142  : 		case NAME_FISHING_STOP:
; 143  : 			SetType(TYPE_FISHING);

  000a7	c7 45 08 0b 00
	00 00		 mov	 DWORD PTR _eName$[ebp], 11 ; 0000000bH

; 150  : 			break;
; 151  : 	}
; 152  : }

  000ae	5d		 pop	 ebp

; 136  : 			break;
; 137  : 		case NAME_FISHING_THROW:
; 138  : 		case NAME_FISHING_WAIT:
; 139  : 		case NAME_FISHING_REACT:
; 140  : 		case NAME_FISHING_CATCH:
; 141  : 		case NAME_FISHING_FAIL:
; 142  : 		case NAME_FISHING_STOP:
; 143  : 			SetType(TYPE_FISHING);

  000af	e9 00 00 00 00	 jmp	 ?SetType@CRaceMotionData@@IAEXI@Z ; CRaceMotionData::SetType
$LN82@SetName:

; 34   : 
; 35   : 	switch (m_eName)

  000b4	8d 82 cd fe ff
	ff		 lea	 eax, DWORD PTR [edx-307]
  000ba	83 f8 2c	 cmp	 eax, 44			; 0000002cH
  000bd	77 1b		 ja	 SHORT $LN78@SetName
  000bf	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN85@SetName[eax]
  000c6	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN86@SetName[eax*4]
$LN16@SetName:

; 60   : 			break;
; 61   : 		case NAME_SPAWN:
; 62   : 		case NAME_CHANGE_WEAPON:
; 63   : 		case NAME_INTRO_SELECTED:
; 64   : 		case NAME_INTRO_NOT_SELECTED:
; 65   : 		case NAME_SPECIAL_1:
; 66   : 		case NAME_SPECIAL_2:
; 67   : 		case NAME_SPECIAL_3:
; 68   : 		case NAME_SPECIAL_4:
; 69   : 		case NAME_SPECIAL_5:
; 70   : 		case NAME_SPECIAL_6:
; 71   : 		case NAME_CLAP:
; 72   : 		case NAME_DANCE_1:
; 73   : 		case NAME_DANCE_2:
; 74   : 		case NAME_DANCE_3:
; 75   : 		case NAME_DANCE_4:
; 76   : 		case NAME_DANCE_5:
; 77   : 		case NAME_DANCE_6:
; 78   : 		case NAME_CONGRATULATION:
; 79   : 		case NAME_FORGIVE:
; 80   : 		case NAME_ANGRY:
; 81   : 		case NAME_ATTRACTIVE:
; 82   : 		case NAME_SAD:
; 83   : 		case NAME_SHY:
; 84   : 		case NAME_CHEERUP:
; 85   : 		case NAME_BANTER:
; 86   : 		case NAME_JOY:
; 87   : 		case NAME_CHEERS_1:
; 88   : 		case NAME_CHEERS_2:
; 89   : 		case NAME_KISS_WITH_WARRIOR:
; 90   : 		case NAME_KISS_WITH_ASSASSIN:
; 91   : 		case NAME_KISS_WITH_SURA:
; 92   : 		case NAME_KISS_WITH_SHAMAN:
; 93   : #ifdef ENABLE_WOLFMAN_CHARACTER
; 94   : 		case NAME_KISS_WITH_WOLFMAN:
; 95   : #endif
; 96   : 		case NAME_FRENCH_KISS_WITH_WARRIOR:
; 97   : 		case NAME_FRENCH_KISS_WITH_ASSASSIN:
; 98   : 		case NAME_FRENCH_KISS_WITH_SURA:
; 99   : 		case NAME_FRENCH_KISS_WITH_SHAMAN:
; 100  : #ifdef ENABLE_WOLFMAN_CHARACTER
; 101  : 		case NAME_FRENCH_KISS_WITH_WOLFMAN:
; 102  : #endif
; 103  : 		case NAME_SLAP_HIT_WITH_WARRIOR:
; 104  : 		case NAME_SLAP_HIT_WITH_ASSASSIN:
; 105  : 		case NAME_SLAP_HIT_WITH_SURA:
; 106  : 		case NAME_SLAP_HIT_WITH_SHAMAN:
; 107  : #ifdef ENABLE_WOLFMAN_CHARACTER
; 108  : 		case NAME_SLAP_HIT_WITH_WOLFMAN:
; 109  : #endif
; 110  : 		case NAME_SLAP_HURT_WITH_WARRIOR:
; 111  : 		case NAME_SLAP_HURT_WITH_ASSASSIN:
; 112  : 		case NAME_SLAP_HURT_WITH_SURA:
; 113  : 		case NAME_SLAP_HURT_WITH_SHAMAN:
; 114  : #ifdef ENABLE_WOLFMAN_CHARACTER
; 115  : 		case NAME_SLAP_HURT_WITH_WOLFMAN:
; 116  : #endif
; 117  : 		case NAME_DIG:
; 118  : 			SetType(TYPE_EVENT);

  000cd	c7 45 08 0a 00
	00 00		 mov	 DWORD PTR _eName$[ebp], 10 ; 0000000aH

; 150  : 			break;
; 151  : 	}
; 152  : }

  000d4	5d		 pop	 ebp

; 60   : 			break;
; 61   : 		case NAME_SPAWN:
; 62   : 		case NAME_CHANGE_WEAPON:
; 63   : 		case NAME_INTRO_SELECTED:
; 64   : 		case NAME_INTRO_NOT_SELECTED:
; 65   : 		case NAME_SPECIAL_1:
; 66   : 		case NAME_SPECIAL_2:
; 67   : 		case NAME_SPECIAL_3:
; 68   : 		case NAME_SPECIAL_4:
; 69   : 		case NAME_SPECIAL_5:
; 70   : 		case NAME_SPECIAL_6:
; 71   : 		case NAME_CLAP:
; 72   : 		case NAME_DANCE_1:
; 73   : 		case NAME_DANCE_2:
; 74   : 		case NAME_DANCE_3:
; 75   : 		case NAME_DANCE_4:
; 76   : 		case NAME_DANCE_5:
; 77   : 		case NAME_DANCE_6:
; 78   : 		case NAME_CONGRATULATION:
; 79   : 		case NAME_FORGIVE:
; 80   : 		case NAME_ANGRY:
; 81   : 		case NAME_ATTRACTIVE:
; 82   : 		case NAME_SAD:
; 83   : 		case NAME_SHY:
; 84   : 		case NAME_CHEERUP:
; 85   : 		case NAME_BANTER:
; 86   : 		case NAME_JOY:
; 87   : 		case NAME_CHEERS_1:
; 88   : 		case NAME_CHEERS_2:
; 89   : 		case NAME_KISS_WITH_WARRIOR:
; 90   : 		case NAME_KISS_WITH_ASSASSIN:
; 91   : 		case NAME_KISS_WITH_SURA:
; 92   : 		case NAME_KISS_WITH_SHAMAN:
; 93   : #ifdef ENABLE_WOLFMAN_CHARACTER
; 94   : 		case NAME_KISS_WITH_WOLFMAN:
; 95   : #endif
; 96   : 		case NAME_FRENCH_KISS_WITH_WARRIOR:
; 97   : 		case NAME_FRENCH_KISS_WITH_ASSASSIN:
; 98   : 		case NAME_FRENCH_KISS_WITH_SURA:
; 99   : 		case NAME_FRENCH_KISS_WITH_SHAMAN:
; 100  : #ifdef ENABLE_WOLFMAN_CHARACTER
; 101  : 		case NAME_FRENCH_KISS_WITH_WOLFMAN:
; 102  : #endif
; 103  : 		case NAME_SLAP_HIT_WITH_WARRIOR:
; 104  : 		case NAME_SLAP_HIT_WITH_ASSASSIN:
; 105  : 		case NAME_SLAP_HIT_WITH_SURA:
; 106  : 		case NAME_SLAP_HIT_WITH_SHAMAN:
; 107  : #ifdef ENABLE_WOLFMAN_CHARACTER
; 108  : 		case NAME_SLAP_HIT_WITH_WOLFMAN:
; 109  : #endif
; 110  : 		case NAME_SLAP_HURT_WITH_WARRIOR:
; 111  : 		case NAME_SLAP_HURT_WITH_ASSASSIN:
; 112  : 		case NAME_SLAP_HURT_WITH_SURA:
; 113  : 		case NAME_SLAP_HURT_WITH_SHAMAN:
; 114  : #ifdef ENABLE_WOLFMAN_CHARACTER
; 115  : 		case NAME_SLAP_HURT_WITH_WOLFMAN:
; 116  : #endif
; 117  : 		case NAME_DIG:
; 118  : 			SetType(TYPE_EVENT);

  000d5	e9 00 00 00 00	 jmp	 ?SetType@CRaceMotionData@@IAEXI@Z ; CRaceMotionData::SetType
$LN78@SetName:

; 144  : 			break;
; 145  : 		default:
; 146  : 			if (eName>=NAME_SKILL && eName<=NAME_SKILL+SKILL_NUM)

  000da	8d 42 ce	 lea	 eax, DWORD PTR [edx-50]
  000dd	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  000e2	77 0d		 ja	 SHORT $LN79@SetName

; 147  : 				SetType(TYPE_SKILL);

  000e4	c7 45 08 08 00
	00 00		 mov	 DWORD PTR _eName$[ebp], 8

; 150  : 			break;
; 151  : 	}
; 152  : }

  000eb	5d		 pop	 ebp

; 147  : 				SetType(TYPE_SKILL);

  000ec	e9 00 00 00 00	 jmp	 ?SetType@CRaceMotionData@@IAEXI@Z ; CRaceMotionData::SetType
$LN79@SetName:

; 148  : 			else
; 149  : 				TraceError("CRaceMotionData::SetName - UNKNOWN NAME %d", eName);

  000f1	52		 push	 edx
  000f2	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@NGIMIHAA@CRaceMotionData?3?3SetName?5?9?5UNKN@
  000f7	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  000fc	83 c4 08	 add	 esp, 8

; 150  : 			break;
; 151  : 	}
; 152  : }

  000ff	5d		 pop	 ebp
  00100	c2 04 00	 ret	 4
  00103	90		 npad	 1
$LN84@SetName:
  00104	00 00 00 00	 DD	 $LN4@SetName
  00108	00 00 00 00	 DD	 $LN5@SetName
  0010c	00 00 00 00	 DD	 $LN8@SetName
  00110	00 00 00 00	 DD	 $LN16@SetName
  00114	00 00 00 00	 DD	 $LN10@SetName
  00118	00 00 00 00	 DD	 $LN12@SetName
  0011c	00 00 00 00	 DD	 $LN14@SetName
  00120	00 00 00 00	 DD	 $LN61@SetName
  00124	00 00 00 00	 DD	 $LN63@SetName
  00128	00 00 00 00	 DD	 $LN64@SetName
  0012c	00 00 00 00	 DD	 $LN72@SetName
$LN83@SetName:
  00130	00		 DB	 0
  00131	01		 DB	 1
  00132	02		 DB	 2
  00133	02		 DB	 2
  00134	03		 DB	 3
  00135	04		 DB	 4
  00136	05		 DB	 5
  00137	06		 DB	 6
  00138	04		 DB	 4
  00139	05		 DB	 5
  0013a	06		 DB	 6
  0013b	07		 DB	 7
  0013c	07		 DB	 7
  0013d	08		 DB	 8
  0013e	09		 DB	 9
  0013f	09		 DB	 9
  00140	09		 DB	 9
  00141	09		 DB	 9
  00142	09		 DB	 9
  00143	09		 DB	 9
  00144	09		 DB	 9
  00145	09		 DB	 9
  00146	01		 DB	 1
  00147	03		 DB	 3
  00148	03		 DB	 3
  00149	03		 DB	 3
  0014a	0a		 DB	 10			; 0000000aH
  0014b	0a		 DB	 10			; 0000000aH
  0014c	0a		 DB	 10			; 0000000aH
  0014d	0a		 DB	 10			; 0000000aH
  0014e	0a		 DB	 10			; 0000000aH
  0014f	0a		 DB	 10			; 0000000aH
  00150	01		 DB	 1
  00151	03		 DB	 3
  00152	03		 DB	 3
  00153	03		 DB	 3
  00154	03		 DB	 3
  00155	03		 DB	 3
  00156	03		 DB	 3
  00157	90		 npad	 1
$LN86@SetName:
  00158	00 00 00 00	 DD	 $LN16@SetName
  0015c	00 00 00 00	 DD	 $LN78@SetName
$LN85@SetName:
  00160	00		 DB	 0
  00161	00		 DB	 0
  00162	00		 DB	 0
  00163	00		 DB	 0
  00164	00		 DB	 0
  00165	00		 DB	 0
  00166	00		 DB	 0
  00167	00		 DB	 0
  00168	00		 DB	 0
  00169	00		 DB	 0
  0016a	00		 DB	 0
  0016b	00		 DB	 0
  0016c	00		 DB	 0
  0016d	00		 DB	 0
  0016e	00		 DB	 0
  0016f	00		 DB	 0
  00170	00		 DB	 0
  00171	00		 DB	 0
  00172	00		 DB	 0
  00173	00		 DB	 0
  00174	00		 DB	 0
  00175	00		 DB	 0
  00176	00		 DB	 0
  00177	00		 DB	 0
  00178	00		 DB	 0
  00179	01		 DB	 1
  0017a	01		 DB	 1
  0017b	01		 DB	 1
  0017c	01		 DB	 1
  0017d	01		 DB	 1
  0017e	01		 DB	 1
  0017f	01		 DB	 1
  00180	01		 DB	 1
  00181	01		 DB	 1
  00182	01		 DB	 1
  00183	01		 DB	 1
  00184	00		 DB	 0
  00185	00		 DB	 0
  00186	00		 DB	 0
  00187	00		 DB	 0
  00188	00		 DB	 0
  00189	00		 DB	 0
  0018a	00		 DB	 0
  0018b	00		 DB	 0
  0018c	00		 DB	 0
?SetName@CRaceMotionData@@QAEXI@Z ENDP			; CRaceMotionData::SetName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
;	COMDAT ?Destroy@CRaceMotionData@@QAEXXZ
_TEXT	SEGMENT
?Destroy@CRaceMotionData@@QAEXXZ PROC			; CRaceMotionData::Destroy, COMDAT
; _this$ = ecx

; 625  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00004	8b b7 a4 00 00
	00		 mov	 esi, DWORD PTR [edi+164]
  0000a	8b 87 a8 00 00
	00		 mov	 eax, DWORD PTR [edi+168]
  00010	3b f0		 cmp	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h

; 113  : 	for (auto i = container.begin(); i != container.end(); ++i)

  00012	74 1f		 je	 SHORT $LN5@Destroy
$LL6@Destroy:

; 114  : 	{
; 115  : 		delete* i;

  00014	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00016	85 c9		 test	 ecx, ecx
  00018	74 06		 je	 SHORT $LN8@Destroy
  0001a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001c	6a 01		 push	 1
  0001e	ff 10		 call	 DWORD PTR [eax]
$LN8@Destroy:

; 116  : 		*i = NULL;

  00020	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 82   :         ++_Ptr;

  00026	83 c6 04	 add	 esi, 4

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00029	8b 87 a8 00 00
	00		 mov	 eax, DWORD PTR [edi+168]

; 166  :         return _Ptr == _Right._Ptr;

  0002f	3b f0		 cmp	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h

; 113  : 	for (auto i = container.begin(); i != container.end(); ++i)

  00031	75 e1		 jne	 SHORT $LL6@Destroy
$LN5@Destroy:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00033	8b 8f a4 00 00
	00		 mov	 ecx, DWORD PTR [edi+164]
  00039	3b c8		 cmp	 ecx, eax
  0003b	74 06		 je	 SHORT $LN40@Destroy

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0003d	89 8f a8 00 00
	00		 mov	 DWORD PTR [edi+168], ecx
$LN40@Destroy:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 627  : 	Initialize();

  00043	8b cf		 mov	 ecx, edi
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	e9 00 00 00 00	 jmp	 ?Initialize@CRaceMotionData@@QAEXXZ ; CRaceMotionData::Initialize
?Destroy@CRaceMotionData@@QAEXXZ ENDP			; CRaceMotionData::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
;	COMDAT ?Initialize@CRaceMotionData@@QAEXXZ
_TEXT	SEGMENT
?Initialize@CRaceMotionData@@QAEXXZ PROC		; CRaceMotionData::Initialize, COMDAT
; _this$ = ecx

; 599  : 	m_iLoopCount = 0;

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 600  : 	m_fMotionDuration = 0.0f;

  00007	c7 41 44 00 00
	00 00		 mov	 DWORD PTR [ecx+68], 0

; 601  : 	m_accumulationPosition.x = 0.0f;

  0000e	c7 41 4c 00 00
	00 00		 mov	 DWORD PTR [ecx+76], 0

; 602  : 	m_accumulationPosition.y = 0.0f;

  00015	c7 41 50 00 00
	00 00		 mov	 DWORD PTR [ecx+80], 0

; 603  : 	m_accumulationPosition.z = 0.0f;

  0001c	c7 41 54 00 00
	00 00		 mov	 DWORD PTR [ecx+84], 0

; 604  : 	m_fLoopStartTime = 0.0f;

  00023	c7 41 6c 00 00
	00 00		 mov	 DWORD PTR [ecx+108], 0

; 605  : 	m_fLoopEndTime = 0.0f;

  0002a	c7 41 70 00 00
	00 00		 mov	 DWORD PTR [ecx+112], 0

; 606  : 
; 607  : 	m_isAccumulationMotion = FALSE;

  00031	c7 41 48 00 00
	00 00		 mov	 DWORD PTR [ecx+72], 0

; 608  : 	m_isComboMotion = FALSE;

  00038	c7 41 58 00 00
	00 00		 mov	 DWORD PTR [ecx+88], 0

; 609  : 	m_isLoopMotion = FALSE;

  0003f	c7 41 68 00 00
	00 00		 mov	 DWORD PTR [ecx+104], 0

; 610  : 	m_isAttackingMotion = FALSE;

  00046	c7 41 74 00 00
	00 00		 mov	 DWORD PTR [ecx+116], 0

; 611  : 	m_bCancelEnableSkill = FALSE;

  0004d	c7 81 a0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+160], 0

; 612  : 
; 613  : 	m_hasSplashEvent = FALSE;

  00057	c7 81 bc 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+188], 0

; 614  : 
; 615  : 	m_isLock = FALSE;

  00061	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 616  : 
; 617  : 	m_eType=TYPE_NONE;

  00068	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 618  : 	m_eName=NAME_NONE;

  0006f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00076	8b 81 a4 00 00
	00		 mov	 eax, DWORD PTR [ecx+164]
  0007c	3b 81 a8 00 00
	00		 cmp	 eax, DWORD PTR [ecx+168]
  00082	74 06		 je	 SHORT $LN3@Initialize

; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00084	89 81 a8 00 00
	00		 mov	 DWORD PTR [ecx+168], eax
$LN3@Initialize:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0008a	8b 81 b0 00 00
	00		 mov	 eax, DWORD PTR [ecx+176]
  00090	56		 push	 esi
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 621  : 	m_SoundInstanceVector.clear();

  00091	8d b1 b0 00 00
	00		 lea	 esi, DWORD PTR [ecx+176]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00097	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0009a	3b c1		 cmp	 eax, ecx
  0009c	74 10		 je	 SHORT $LN7@Initialize

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());

  0009e	56		 push	 esi
  0009f	51		 push	 ecx
  000a0	50		 push	 eax
  000a1	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAXPAUSSoundInstance@NSound@@QAU12@AAV?$allocator@USSoundInstance@NSound@@@0@@Z ; std::_Destroy_range<std::allocator<NSound::SSoundInstance> >

; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  000a6	8b 06		 mov	 eax, DWORD PTR [esi]
  000a8	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ab	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN7@Initialize:
  000ae	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 622  : }

  000af	c3		 ret	 0
?Initialize@CRaceMotionData@@QAEXXZ ENDP		; CRaceMotionData::Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
;	COMDAT ??1CRaceMotionData@@UAE@XZ
_TEXT	SEGMENT
??1CRaceMotionData@@UAE@XZ PROC				; CRaceMotionData::~CRaceMotionData, COMDAT
; _this$ = ecx

; 636  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CRaceMotionData@@6B@

; 637  : 	Destroy();

  00009	e8 00 00 00 00	 call	 ?Destroy@CRaceMotionData@@QAEXXZ ; CRaceMotionData::Destroy

; 638  : }

  0000e	8d 8e b0 00 00
	00		 lea	 ecx, DWORD PTR [esi+176]
  00014	e8 00 00 00 00	 call	 ??1?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@QAE@XZ ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::~vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00019	8b 86 a4 00 00
	00		 mov	 eax, DWORD PTR [esi+164]
  0001f	85 c0		 test	 eax, eax
  00021	74 51		 je	 SHORT $LN8@CRaceMotio

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00023	8b 8e ac 00 00
	00		 mov	 ecx, DWORD PTR [esi+172]
  00029	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002b	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0002e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00034	72 16		 jb	 SHORT $LN27@CRaceMotio

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00036	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00039	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0003c	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0003e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00041	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00044	0f 87 bb 00 00
	00		 ja	 $LN103@CRaceMotio

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0004a	8b c2		 mov	 eax, edx
$LN27@CRaceMotio:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0004c	51		 push	 ecx
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00053	c7 86 a4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+164], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0005d	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00060	c7 86 a8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+168], 0

; 2082 :             _Myend   = nullptr;

  0006a	c7 86 ac 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+172], 0
$LN8@CRaceMotio:
  00074	8d 8e 94 00 00
	00		 lea	 ecx, DWORD PTR [esi+148]
  0007a	e8 00 00 00 00	 call	 ??1?$vector@USHitData@NRaceData@@V?$allocator@USHitData@NRaceData@@@std@@@std@@QAE@XZ ; std::vector<NRaceData::SHitData,std::allocator<NRaceData::SHitData> >::~vector<NRaceData::SHitData,std::allocator<NRaceData::SHitData> >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0007f	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  00082	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00085	76 28		 jbe	 SHORT $LN58@CRaceMotio
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00087	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0008a	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0008b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00091	72 12		 jb	 SHORT $LN69@CRaceMotio

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00093	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00096	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00099	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0009b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0009e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a1	77 62		 ja	 SHORT $LN103@CRaceMotio

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a3	8b c2		 mov	 eax, edx
$LN69@CRaceMotio:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000a5	51		 push	 ecx
  000a6	50		 push	 eax
  000a7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000ac	83 c4 08	 add	 esp, 8
$LN58@CRaceMotio:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  000af	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  000b6	c7 46 40 0f 00
	00 00		 mov	 DWORD PTR [esi+64], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000bd	c6 46 2c 00	 mov	 BYTE PTR [esi+44], 0

; 434  :         return _Myres > _Small_string_capacity;

  000c1	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  000c4	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  000c7	76 28		 jbe	 SHORT $LN95@CRaceMotio
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000c9	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  000cc	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000cd	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000d3	72 12		 jb	 SHORT $LN106@CRaceMotio

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000d5	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000d8	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000db	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000dd	83 c0 fc	 add	 eax, -4			; fffffffcH
  000e0	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000e3	77 20		 ja	 SHORT $LN103@CRaceMotio

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000e5	8b c2		 mov	 eax, edx
$LN106@CRaceMotio:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000e7	51		 push	 ecx
  000e8	50		 push	 eax
  000e9	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000ee	83 c4 08	 add	 esp, 8
$LN95@CRaceMotio:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  000f1	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  000f8	c7 46 28 0f 00
	00 00		 mov	 DWORD PTR [esi+40], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000ff	c6 46 14 00	 mov	 BYTE PTR [esi+20], 0
  00103	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 638  : }

  00104	c3		 ret	 0
$LN103@CRaceMotio:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00105	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN121@CRaceMotio:
  0010a	cc		 int	 3
??1CRaceMotionData@@UAE@XZ ENDP				; CRaceMotionData::~CRaceMotionData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
;	COMDAT ??0CRaceMotionData@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CRaceMotionData@@QAE@XZ PROC				; CRaceMotionData::CRaceMotionData, COMDAT
; _this$ = ecx

; 631  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	0f 57 c0	 xorps	 xmm0, xmm0
  0000a	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CRaceMotionData@@6B@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00013	0f 11 46 14	 movups	 XMMWORD PTR [esi+20], xmm0

; 836  :         _My_data._Mysize = 0;

  00017	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  0001e	c7 46 28 0f 00
	00 00		 mov	 DWORD PTR [esi+40], 15	; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00025	c6 46 14 00	 mov	 BYTE PTR [esi+20], 0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00029	0f 11 46 2c	 movups	 XMMWORD PTR [esi+44], xmm0

; 836  :         _My_data._Mysize = 0;

  0002d	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  00034	c7 46 40 0f 00
	00 00		 mov	 DWORD PTR [esi+64], 15	; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0003b	c6 46 2c 00	 mov	 BYTE PTR [esi+44], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0003f	c7 86 94 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+148], 0
  00049	c7 86 98 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+152], 0
  00053	c7 86 9c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+156], 0
  0005d	c7 86 a4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+164], 0
  00067	c7 86 a8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+168], 0
  00071	c7 86 ac 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+172], 0
  0007b	c7 86 b0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+176], 0
  00085	c7 86 b4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+180], 0
  0008f	c7 86 b8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+184], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 632  : 	Initialize();

  00099	e8 00 00 00 00	 call	 ?Initialize@CRaceMotionData@@QAEXXZ ; CRaceMotionData::Initialize

; 633  : }

  0009e	8b c6		 mov	 eax, esi
  000a0	5e		 pop	 esi
  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c3		 ret	 0
??0CRaceMotionData@@QAE@XZ ENDP				; CRaceMotionData::CRaceMotionData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
;	COMDAT ?DestroySystem@CRaceMotionData@@SAXXZ
_TEXT	SEGMENT
?DestroySystem@CRaceMotionData@@SAXXZ PROC		; CRaceMotionData::DestroySystem, COMDAT

; 15   : {

  00000	56		 push	 esi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 50   : 			for (auto v : m_kVct_pkData)

  00001	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?ms_kPool@CRaceMotionData@@1V?$CDynamicPool@VCRaceMotionData@@@@A+4
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 15   : {

  00007	57		 push	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 50   : 			for (auto v : m_kVct_pkData)

  00008	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?ms_kPool@CRaceMotionData@@1V?$CDynamicPool@VCRaceMotionData@@@@A+8
  0000e	3b f7		 cmp	 esi, edi
  00010	74 29		 je	 SHORT $LN14@DestroySys
$LL8@DestroySys:

; 111  : 			delete pkData;

  00012	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00014	85 c9		 test	 ecx, ecx
  00016	74 06		 je	 SHORT $LN6@DestroySys
  00018	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001a	6a 01		 push	 1
  0001c	ff 10		 call	 DWORD PTR [eax]
$LN6@DestroySys:

; 50   : 			for (auto v : m_kVct_pkData)

  0001e	83 c6 04	 add	 esi, 4
  00021	3b f7		 cmp	 esi, edi
  00023	75 ed		 jne	 SHORT $LL8@DestroySys
  00025	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?ms_kPool@CRaceMotionData@@1V?$CDynamicPool@VCRaceMotionData@@@@A+8
  0002b	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?ms_kPool@CRaceMotionData@@1V?$CDynamicPool@VCRaceMotionData@@@@A+4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	3b f7		 cmp	 esi, edi
  00033	74 06		 je	 SHORT $LN14@DestroySys

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00035	89 35 08 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CRaceMotionData@@1V?$CDynamicPool@VCRaceMotionData@@@@A+8, esi
$LN14@DestroySys:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0003b	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CRaceMotionData@@1V?$CDynamicPool@VCRaceMotionData@@@@A+16
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	3b 05 14 00 00
	00		 cmp	 eax, DWORD PTR ?ms_kPool@CRaceMotionData@@1V?$CDynamicPool@VCRaceMotionData@@@@A+20
  00048	74 05		 je	 SHORT $LN18@DestroySys

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0004a	a3 14 00 00 00	 mov	 DWORD PTR ?ms_kPool@CRaceMotionData@@1V?$CDynamicPool@VCRaceMotionData@@@@A+20, eax
$LN18@DestroySys:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 17   : }

  0004f	c3		 ret	 0
?DestroySystem@CRaceMotionData@@SAXXZ ENDP		; CRaceMotionData::DestroySystem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
;	COMDAT ?CreateSystem@CRaceMotionData@@SAXI@Z
_TEXT	SEGMENT
_uCapacity$ = 8						; size = 4
?CreateSystem@CRaceMotionData@@SAXI@Z PROC		; CRaceMotionData::CreateSystem, COMDAT

; 10   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 58   : 			m_uInitCapacity=uCapacity;

  00004	8b 75 08	 mov	 esi, DWORD PTR _uCapacity$[ebp]

; 59   : 			m_kVct_pkData.reserve(uCapacity);

  00007	b9 04 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CRaceMotionData@@1V?$CDynamicPool@VCRaceMotionData@@@@A+4
  0000c	56		 push	 esi
  0000d	89 35 1c 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CRaceMotionData@@1V?$CDynamicPool@VCRaceMotionData@@@@A+28, esi
  00013	e8 00 00 00 00	 call	 ?reserve@?$vector@PAVCRaceMotionData@@V?$allocator@PAVCRaceMotionData@@@std@@@std@@QAEXI@Z ; std::vector<CRaceMotionData *,std::allocator<CRaceMotionData *> >::reserve

; 60   : 			m_kVct_pkFree.reserve(uCapacity);

  00018	56		 push	 esi
  00019	b9 10 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CRaceMotionData@@1V?$CDynamicPool@VCRaceMotionData@@@@A+16
  0001e	e8 00 00 00 00	 call	 ?reserve@?$vector@PAVCRaceMotionData@@V?$allocator@PAVCRaceMotionData@@@std@@@std@@QAEXI@Z ; std::vector<CRaceMotionData *,std::allocator<CRaceMotionData *> >::reserve
  00023	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 12   : }

  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?CreateSystem@CRaceMotionData@@SAXI@Z ENDP		; CRaceMotionData::CreateSystem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
;	COMDAT ?Delete@CRaceMotionData@@SAXPAV1@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
_pkData$ = 8						; size = 4
?Delete@CRaceMotionData@@SAXPAV1@@Z PROC		; CRaceMotionData::Delete, COMDAT

; 25   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 26   : 	pkData->Destroy();

  00004	8b 75 08	 mov	 esi, DWORD PTR _pkData$[ebp]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ?Destroy@CRaceMotionData@@QAEXXZ ; CRaceMotionData::Destroy
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 82   : 			m_kVct_pkFree.push_back(pkData);

  0000e	8d 45 08	 lea	 eax, DWORD PTR _pkData$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 28   : 	ms_kPool.Free(pkData);

  00011	89 75 08	 mov	 DWORD PTR _pkData$[ebp], esi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 82   : 			m_kVct_pkFree.push_back(pkData);

  00014	50		 push	 eax
  00015	b9 10 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CRaceMotionData@@1V?$CDynamicPool@VCRaceMotionData@@@@A+16
  0001a	e8 00 00 00 00	 call	 ?push_back@?$vector@PAVCRaceMotionData@@V?$allocator@PAVCRaceMotionData@@@std@@@std@@QAEXABQAVCRaceMotionData@@@Z ; std::vector<CRaceMotionData *,std::allocator<CRaceMotionData *> >::push_back
  0001f	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 29   : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
?Delete@CRaceMotionData@@SAXPAV1@@Z ENDP		; CRaceMotionData::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
;	COMDAT ?New@CRaceMotionData@@SAPAV1@XZ
_TEXT	SEGMENT
_pkNewData$1 = -4					; size = 4
$T2 = -4						; size = 4
?New@CRaceMotionData@@SAPAV1@XZ PROC			; CRaceMotionData::New, COMDAT

; 20   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  00004	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?ms_kPool@CRaceMotionData@@1V?$CDynamicPool@VCRaceMotionData@@@@A+20
  0000a	39 0d 10 00 00
	00		 cmp	 DWORD PTR ?ms_kPool@CRaceMotionData@@1V?$CDynamicPool@VCRaceMotionData@@@@A+16, ecx
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 64   : 			if (m_kVct_pkFree.empty())

  00010	75 40		 jne	 SHORT $LN4@New
  00012	56		 push	 esi

; 65   : 			{
; 66   : 				T* pkNewData=new T;

  00013	68 c0 00 00 00	 push	 192			; 000000c0H
  00018	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001d	83 c4 04	 add	 esp, 4
  00020	89 45 fc	 mov	 DWORD PTR $T2[ebp], eax
  00023	85 c0		 test	 eax, eax
  00025	74 0b		 je	 SHORT $LN6@New
  00027	8b c8		 mov	 ecx, eax
  00029	e8 00 00 00 00	 call	 ??0CRaceMotionData@@QAE@XZ ; CRaceMotionData::CRaceMotionData
  0002e	8b f0		 mov	 esi, eax
  00030	eb 02		 jmp	 SHORT $LN7@New
$LN6@New:
  00032	33 f6		 xor	 esi, esi
$LN7@New:

; 67   : 				m_kVct_pkData.push_back(pkNewData);

  00034	8d 45 fc	 lea	 eax, DWORD PTR _pkNewData$1[ebp]
  00037	89 75 fc	 mov	 DWORD PTR _pkNewData$1[ebp], esi
  0003a	50		 push	 eax
  0003b	b9 04 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CRaceMotionData@@1V?$CDynamicPool@VCRaceMotionData@@@@A+4
  00040	e8 00 00 00 00	 call	 ?push_back@?$vector@PAVCRaceMotionData@@V?$allocator@PAVCRaceMotionData@@@std@@@std@@QAEXABQAVCRaceMotionData@@@Z ; std::vector<CRaceMotionData *,std::allocator<CRaceMotionData *> >::push_back

; 68   : 				++m_uUsedCapacity;

  00045	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_kPool@CRaceMotionData@@1V?$CDynamicPool@VCRaceMotionData@@@@A+32
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 21   : 	return ms_kPool.Alloc();

  0004b	8b c6		 mov	 eax, esi
  0004d	5e		 pop	 esi

; 22   : }

  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
$LN4@New:
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 72   : 			T* pkFreeData=m_kVct_pkFree.back();

  00052	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1744 :         --_Mylast;

  00055	83 c1 fc	 add	 ecx, -4			; fffffffcH
  00058	89 0d 14 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CRaceMotionData@@1V?$CDynamicPool@VCRaceMotionData@@@@A+20, ecx
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp

; 22   : }

  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
?New@CRaceMotionData@@SAPAV1@XZ ENDP			; CRaceMotionData::New
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GSMotionEventDataWarp@NMotionEvent@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GSMotionEventDataWarp@NMotionEvent@@UAEPAXI@Z PROC	; NMotionEvent::SMotionEventDataWarp::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SMotionEventData@NMotionEvent@@6B@
  00010	74 0b		 je	 SHORT $LN5@scalar
  00012	6a 14		 push	 20			; 00000014H
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_GSMotionEventDataWarp@NMotionEvent@@UAEPAXI@Z ENDP	; NMotionEvent::SMotionEventDataWarp::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
;	COMDAT ?Save@SMotionEventDataWarp@NMotionEvent@@UAEXPAU_iobuf@@H@Z
_TEXT	SEGMENT
_File$ = 8						; size = 4
_iTabs$ = 12						; size = 4
?Save@SMotionEventDataWarp@NMotionEvent@@UAEXPAU_iobuf@@H@Z PROC ; NMotionEvent::SMotionEventDataWarp::Save, COMDAT
; _this$ = ecx

; 312  : 		void Save(FILE * File, int iTabs) {}

  00000	c2 08 00	 ret	 8
?Save@SMotionEventDataWarp@NMotionEvent@@UAEXPAU_iobuf@@H@Z ENDP ; NMotionEvent::SMotionEventDataWarp::Save
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
;	COMDAT ??1SMotionEventDataWarp@NMotionEvent@@UAE@XZ
_TEXT	SEGMENT
??1SMotionEventDataWarp@NMotionEvent@@UAE@XZ PROC	; NMotionEvent::SMotionEventDataWarp::~SMotionEventDataWarp, COMDAT
; _this$ = ecx

; 310  : 		virtual ~SMotionEventDataWarp() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7SMotionEventData@NMotionEvent@@6B@
  00006	c3		 ret	 0
??1SMotionEventDataWarp@NMotionEvent@@UAE@XZ ENDP	; NMotionEvent::SMotionEventDataWarp::~SMotionEventDataWarp
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GSMotionEventDataCharacterHide@NMotionEvent@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GSMotionEventDataCharacterHide@NMotionEvent@@UAEPAXI@Z PROC ; NMotionEvent::SMotionEventDataCharacterHide::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SMotionEventData@NMotionEvent@@6B@
  00010	74 0b		 je	 SHORT $LN5@scalar
  00012	6a 14		 push	 20			; 00000014H
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_GSMotionEventDataCharacterHide@NMotionEvent@@UAEPAXI@Z ENDP ; NMotionEvent::SMotionEventDataCharacterHide::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
;	COMDAT ?Save@SMotionEventDataCharacterHide@NMotionEvent@@UAEXPAU_iobuf@@H@Z
_TEXT	SEGMENT
_File$ = 8						; size = 4
_iTabs$ = 12						; size = 4
?Save@SMotionEventDataCharacterHide@NMotionEvent@@UAEXPAU_iobuf@@H@Z PROC ; NMotionEvent::SMotionEventDataCharacterHide::Save, COMDAT
; _this$ = ecx

; 302  : 		void Save(FILE * File, int iTabs) {}

  00000	c2 08 00	 ret	 8
?Save@SMotionEventDataCharacterHide@NMotionEvent@@UAEXPAU_iobuf@@H@Z ENDP ; NMotionEvent::SMotionEventDataCharacterHide::Save
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
;	COMDAT ??1SMotionEventDataCharacterHide@NMotionEvent@@UAE@XZ
_TEXT	SEGMENT
??1SMotionEventDataCharacterHide@NMotionEvent@@UAE@XZ PROC ; NMotionEvent::SMotionEventDataCharacterHide::~SMotionEventDataCharacterHide, COMDAT
; _this$ = ecx

; 300  : 		virtual ~SMotionEventDataCharacterHide() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7SMotionEventData@NMotionEvent@@6B@
  00006	c3		 ret	 0
??1SMotionEventDataCharacterHide@NMotionEvent@@UAE@XZ ENDP ; NMotionEvent::SMotionEventDataCharacterHide::~SMotionEventDataCharacterHide
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GSMotionEventDataCharacterShow@NMotionEvent@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GSMotionEventDataCharacterShow@NMotionEvent@@UAEPAXI@Z PROC ; NMotionEvent::SMotionEventDataCharacterShow::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SMotionEventData@NMotionEvent@@6B@
  00010	74 0b		 je	 SHORT $LN5@scalar
  00012	6a 14		 push	 20			; 00000014H
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_GSMotionEventDataCharacterShow@NMotionEvent@@UAEPAXI@Z ENDP ; NMotionEvent::SMotionEventDataCharacterShow::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
;	COMDAT ?Save@SMotionEventDataCharacterShow@NMotionEvent@@UAEXPAU_iobuf@@H@Z
_TEXT	SEGMENT
_File$ = 8						; size = 4
_iTabs$ = 12						; size = 4
?Save@SMotionEventDataCharacterShow@NMotionEvent@@UAEXPAU_iobuf@@H@Z PROC ; NMotionEvent::SMotionEventDataCharacterShow::Save, COMDAT
; _this$ = ecx

; 292  : 		void Save(FILE * File, int iTabs) {}

  00000	c2 08 00	 ret	 8
?Save@SMotionEventDataCharacterShow@NMotionEvent@@UAEXPAU_iobuf@@H@Z ENDP ; NMotionEvent::SMotionEventDataCharacterShow::Save
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
;	COMDAT ??1SMotionEventDataCharacterShow@NMotionEvent@@UAE@XZ
_TEXT	SEGMENT
??1SMotionEventDataCharacterShow@NMotionEvent@@UAE@XZ PROC ; NMotionEvent::SMotionEventDataCharacterShow::~SMotionEventDataCharacterShow, COMDAT
; _this$ = ecx

; 290  : 		virtual ~SMotionEventDataCharacterShow() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7SMotionEventData@NMotionEvent@@6B@
  00006	c3		 ret	 0
??1SMotionEventDataCharacterShow@NMotionEvent@@UAE@XZ ENDP ; NMotionEvent::SMotionEventDataCharacterShow::~SMotionEventDataCharacterShow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??_GSMotionEventDataSound@NMotionEvent@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GSMotionEventDataSound@NMotionEvent@@UAEPAXI@Z PROC	; NMotionEvent::SMotionEventDataSound::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 270  : 		virtual ~SMotionEventDataSound() {}

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SMotionEventDataSound@NMotionEvent@@6B@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0000c	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  0000f	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00012	76 28		 jbe	 SHORT $LN30@scalar
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00014	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00017	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 12		 jb	 SHORT $LN41@scalar

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00020	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00023	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00026	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00028	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002e	77 3c		 ja	 SHORT $LN38@scalar

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b c2		 mov	 eax, edx
$LN41@scalar:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00039	83 c4 08	 add	 esp, 8
$LN30@scalar:
  0003c	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00040	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00047	c7 46 28 0f 00
	00 00		 mov	 DWORD PTR [esi+40], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0004e	c6 46 14 00	 mov	 BYTE PTR [esi+20], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 270  : 		virtual ~SMotionEventDataSound() {}

  00052	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SMotionEventData@NMotionEvent@@6B@
  00058	74 0b		 je	 SHORT $LN2@scalar
  0005a	6a 2c		 push	 44			; 0000002cH
  0005c	56		 push	 esi
  0005d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00062	83 c4 08	 add	 esp, 8
$LN2@scalar:
  00065	8b c6		 mov	 eax, esi
  00067	5e		 pop	 esi
  00068	5d		 pop	 ebp
  00069	c2 04 00	 ret	 4
$LN38@scalar:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0006c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN53@scalar:
  00071	cc		 int	 3
??_GSMotionEventDataSound@NMotionEvent@@UAEPAXI@Z ENDP	; NMotionEvent::SMotionEventDataSound::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
;	COMDAT ?Load@SMotionEventDataSound@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z
_TEXT	SEGMENT
$T2 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rTextFileLoader$ = 8					; size = 4
?Load@SMotionEventDataSound@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z PROC ; NMotionEvent::SMotionEventDataSound::Load, COMDAT
; _this$ = ecx

; 278  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Load@SMotionEventDataSound@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00029	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_0O@POGBJFAA@soundfilename@+8
  0002e	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 278  : 		{

  00031	8b 55 08	 mov	 edx, DWORD PTR _rTextFileLoader$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00034	0f 11 45 d8	 movups	 XMMWORD PTR $T2[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00038	89 45 e0	 mov	 DWORD PTR $T2[ebp+8], eax
  0003b	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0O@POGBJFAA@soundfilename@
  00043	a0 0c 00 00 00	 mov	 al, BYTE PTR ??_C@_0O@POGBJFAA@soundfilename@+12
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  00048	c7 45 e8 0d 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 13 ; 0000000dH

; 867  :             _My_data._Myres  = _Small_string_capacity;

  0004f	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 15 ; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00056	66 0f d6 45 d8	 movq	 QWORD PTR $T2[ebp], xmm0
  0005b	88 45 e4	 mov	 BYTE PTR $T2[ebp+12], al
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  0005e	c6 45 e5 00	 mov	 BYTE PTR $T2[ebp+13], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 279  : 			if (!rTextFileLoader.GetTokenString("soundfilename", &strSoundFileName))

  00062	8d 41 14	 lea	 eax, DWORD PTR [ecx+20]
  00065	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006c	50		 push	 eax
  0006d	8d 45 d8	 lea	 eax, DWORD PTR $T2[ebp]
  00070	8b ca		 mov	 ecx, edx
  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 ?GetTokenString@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV23@@Z ; CTextFileLoader::GetTokenString
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00078	8b 4d ec	 mov	 ecx, DWORD PTR $T2[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 279  : 			if (!rTextFileLoader.GetTokenString("soundfilename", &strSoundFileName))

  0007b	8b f0		 mov	 esi, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0007d	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00080	76 28		 jbe	 SHORT $LN75@Load
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00082	8b 55 d8	 mov	 edx, DWORD PTR $T2[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00085	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00086	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00088	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0008e	72 10		 jb	 SHORT $LN86@Load

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00090	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00093	83 c1 23	 add	 ecx, 35			; 00000023H
  00096	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00098	83 c0 fc	 add	 eax, -4			; fffffffcH
  0009b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0009e	77 2b		 ja	 SHORT $LN96@Load
$LN86@Load:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000a0	51		 push	 ecx
  000a1	52		 push	 edx
  000a2	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000a7	83 c4 08	 add	 esp, 8
$LN75@Load:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 279  : 			if (!rTextFileLoader.GetTokenString("soundfilename", &strSoundFileName))

  000aa	85 f6		 test	 esi, esi
  000ac	0f 95 c0	 setne	 al

; 283  : 		}

  000af	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b9	59		 pop	 ecx
  000ba	5e		 pop	 esi
  000bb	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000be	33 cd		 xor	 ecx, ebp
  000c0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c5	8b e5		 mov	 esp, ebp
  000c7	5d		 pop	 ebp
  000c8	c2 04 00	 ret	 4
$LN96@Load:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cb	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN94@Load:
  000d0	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Load@SMotionEventDataSound@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?Load@SMotionEventDataSound@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Load@SMotionEventDataSound@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Load@SMotionEventDataSound@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z ENDP ; NMotionEvent::SMotionEventDataSound::Load
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
;	COMDAT ?Save@SMotionEventDataSound@NMotionEvent@@UAEXPAU_iobuf@@H@Z
_TEXT	SEGMENT
_File$ = 8						; size = 4
_iTabs$ = 12						; size = 4
?Save@SMotionEventDataSound@NMotionEvent@@UAEXPAU_iobuf@@H@Z PROC ; NMotionEvent::SMotionEventDataSound::Save, COMDAT
; _this$ = ecx

; 273  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 274  : 			PrintfTabs(File, iTabs, "\n");

  00004	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  00009	ff 75 0c	 push	 DWORD PTR _iTabs$[ebp]
  0000c	8b f1		 mov	 esi, ecx
  0000e	ff 75 08	 push	 DWORD PTR _File$[ebp]
  00011	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2328 :         return _Mypair._Myval2._Myptr();

  00016	83 c6 14	 add	 esi, 20			; 00000014H
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 274  : 			PrintfTabs(File, iTabs, "\n");

  00019	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0001c	83 7e 14 0f	 cmp	 DWORD PTR [esi+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  00020	76 02		 jbe	 SHORT $LN7@Save

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00022	8b 36		 mov	 esi, DWORD PTR [esi]
$LN7@Save:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 275  : 			PrintfTabs(File, iTabs, "SoundFileName        \"%s\"\n", strSoundFileName.c_str());

  00024	56		 push	 esi
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@OCKKLAAD@SoundFileName?5?5?5?5?5?5?5?5?$CC?$CFs?$CC?6@
  0002a	ff 75 0c	 push	 DWORD PTR _iTabs$[ebp]
  0002d	ff 75 08	 push	 DWORD PTR _File$[ebp]
  00030	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs
  00035	83 c4 10	 add	 esp, 16			; 00000010H
  00038	5e		 pop	 esi

; 276  : 		}

  00039	5d		 pop	 ebp
  0003a	c2 08 00	 ret	 8
?Save@SMotionEventDataSound@NMotionEvent@@UAEXPAU_iobuf@@H@Z ENDP ; NMotionEvent::SMotionEventDataSound::Save
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
;	COMDAT ??1SMotionEventDataSound@NMotionEvent@@UAE@XZ
_TEXT	SEGMENT
??1SMotionEventDataSound@NMotionEvent@@UAE@XZ PROC	; NMotionEvent::SMotionEventDataSound::~SMotionEventDataSound, COMDAT
; _this$ = ecx

; 270  : 		virtual ~SMotionEventDataSound() {}

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SMotionEventDataSound@NMotionEvent@@6B@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00009	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  0000c	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0000f	76 28		 jbe	 SHORT $LN24@SMotionEve
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00011	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00014	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00015	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001b	72 12		 jb	 SHORT $LN35@SMotionEve

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001d	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00020	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00023	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00025	83 c0 fc	 add	 eax, -4			; fffffffcH
  00028	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002b	77 26		 ja	 SHORT $LN32@SMotionEve

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002d	8b c2		 mov	 eax, edx
$LN35@SMotionEve:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0002f	51		 push	 ecx
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00036	83 c4 08	 add	 esp, 8
$LN24@SMotionEve:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00039	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00040	c7 46 28 0f 00
	00 00		 mov	 DWORD PTR [esi+40], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00047	c6 46 14 00	 mov	 BYTE PTR [esi+20], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 270  : 		virtual ~SMotionEventDataSound() {}

  0004b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SMotionEventData@NMotionEvent@@6B@
  00051	5e		 pop	 esi
  00052	c3		 ret	 0
$LN32@SMotionEve:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00053	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN45@SMotionEve:
  00058	cc		 int	 3
??1SMotionEventDataSound@NMotionEvent@@UAE@XZ ENDP	; NMotionEvent::SMotionEventDataSound::~SMotionEventDataSound
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\GameType.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
;	COMDAT ??_GSMotionEventDataAttack@NMotionEvent@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GSMotionEventDataAttack@NMotionEvent@@UAEPAXI@Z PROC	; NMotionEvent::SMotionEventDataAttack::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 233  : 		virtual ~SMotionEventDataAttack() {}

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SMotionEventDataAttack@NMotionEvent@@6B@
; File C:\Marty 5.5\Src-Client\Client\GameLib\GameType.h

; 120  : 		virtual ~SCollisionData() {}

  0000c	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
  0000f	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], OFFSET ??_7SCollisionData@NRaceData@@6B@
  00016	e8 00 00 00 00	 call	 ??1?$vector@VCSphereCollisionInstance@@V?$allocator@VCSphereCollisionInstance@@@std@@@std@@QAE@XZ ; std::vector<CSphereCollisionInstance,std::allocator<CSphereCollisionInstance> >::~vector<CSphereCollisionInstance,std::allocator<CSphereCollisionInstance> >
  0001b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 233  : 		virtual ~SMotionEventDataAttack() {}

  0001f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SMotionEventData@NMotionEvent@@6B@
  00025	74 0b		 je	 SHORT $LN15@scalar
  00027	6a 44		 push	 68			; 00000044H
  00029	56		 push	 esi
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN15@scalar:
  00032	8b c6		 mov	 eax, esi
  00034	5e		 pop	 esi
  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
??_GSMotionEventDataAttack@NMotionEvent@@UAEPAXI@Z ENDP	; NMotionEvent::SMotionEventDataAttack::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
;	COMDAT ?Load@SMotionEventDataAttack@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z
_TEXT	SEGMENT
tv746 = -44						; size = 4
tv747 = -44						; size = 4
$T2 = -40						; size = 24
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rTextFileLoader$ = 8					; size = 4
?Load@SMotionEventDataAttack@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z PROC ; NMotionEvent::SMotionEventDataAttack::Load, COMDAT
; _this$ = ecx

; 245  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Load@SMotionEventDataAttack@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b f1		 mov	 esi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0002c	66 a1 08 00 00
	00		 mov	 ax, WORD PTR ??_C@_0L@KJGFIEPL@duringtime@+8
  00032	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 245  : 		{

  00035	8b 7d 08	 mov	 edi, DWORD PTR _rTextFileLoader$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00038	0f 11 45 d8	 movups	 XMMWORD PTR $T2[ebp], xmm0

; 866  :             _My_data._Mysize = _Count;

  0003c	c7 45 e8 0a 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 10 ; 0000000aH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00043	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0L@KJGFIEPL@duringtime@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 867  :             _My_data._Myres  = _Small_string_capacity;

  0004b	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 15 ; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00052	66 0f d6 45 d8	 movq	 QWORD PTR $T2[ebp], xmm0
  00057	66 89 45 e0	 mov	 WORD PTR $T2[ebp+8], ax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  0005b	c6 45 e2 00	 mov	 BYTE PTR $T2[ebp+10], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 246  : 			if (!rTextFileLoader.GetTokenFloat("duringtime", &fDurationTime))

  0005f	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  00062	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00069	50		 push	 eax
  0006a	8d 45 d8	 lea	 eax, DWORD PTR $T2[ebp]
  0006d	8b cf		 mov	 ecx, edi
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ?GetTokenFloat@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAM@Z ; CTextFileLoader::GetTokenFloat
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00075	8b 4d ec	 mov	 ecx, DWORD PTR $T2[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 246  : 			if (!rTextFileLoader.GetTokenFloat("duringtime", &fDurationTime))

  00078	89 45 d4	 mov	 DWORD PTR tv747[ebp], eax
  0007b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00082	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00085	76 2f		 jbe	 SHORT $LN79@Load
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00087	8b 55 d8	 mov	 edx, DWORD PTR $T2[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0008a	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008b	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0008d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00093	72 14		 jb	 SHORT $LN90@Load

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00095	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00098	83 c1 23	 add	 ecx, 35			; 00000023H
  0009b	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0009d	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a0	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a3	0f 87 07 01 00
	00		 ja	 $LN189@Load
$LN90@Load:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000a9	51		 push	 ecx
  000aa	52		 push	 edx
  000ab	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000b0	8b 45 d4	 mov	 eax, DWORD PTR tv747[ebp]
  000b3	83 c4 08	 add	 esp, 8
$LN79@Load:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 246  : 			if (!rTextFileLoader.GetTokenFloat("duringtime", &fDurationTime))

  000b6	85 c0		 test	 eax, eax
  000b8	0f 84 d3 00 00
	00		 je	 $LN183@Load
  000be	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 498  :     size_type _Mysize = 0; // current length of string (size)

  000c1	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  000c8	6a 20		 push	 32			; 00000020H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000ca	0f 11 45 d8	 movups	 XMMWORD PTR $T3[ebp], xmm0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  000ce	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  000d5	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000da	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_0BB@NODGLCEN@enablehitprocess@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000e1	89 45 d8	 mov	 DWORD PTR $T3[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  000e4	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 891  :         _My_data._Mysize = _Count;

  000e7	c7 45 e8 10 00
	00 00		 mov	 DWORD PTR $T3[ebp+16], 16 ; 00000010H

; 892  :         _My_data._Myres  = _New_capacity;

  000ee	c7 45 ec 1f 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 31 ; 0000001fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000f5	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000f8	c6 40 10 00	 mov	 BYTE PTR [eax+16], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 249  : 			if (!rTextFileLoader.GetTokenBoolean("enablehitprocess", &isEnableHitProcess))

  000fc	8d 46 40	 lea	 eax, DWORD PTR [esi+64]
  000ff	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00106	50		 push	 eax
  00107	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  0010a	8b cf		 mov	 ecx, edi
  0010c	50		 push	 eax
  0010d	e8 00 00 00 00	 call	 ?GetTokenBoolean@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAH@Z ; CTextFileLoader::GetTokenBoolean
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00112	8b 4d ec	 mov	 ecx, DWORD PTR $T3[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 249  : 			if (!rTextFileLoader.GetTokenBoolean("enablehitprocess", &isEnableHitProcess))

  00115	89 45 d4	 mov	 DWORD PTR tv746[ebp], eax
  00118	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0011f	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00122	76 2b		 jbe	 SHORT $LN165@Load
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00124	8b 55 d8	 mov	 edx, DWORD PTR $T3[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00127	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00128	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0012a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00130	72 10		 jb	 SHORT $LN176@Load

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00132	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00135	83 c1 23	 add	 ecx, 35			; 00000023H
  00138	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0013a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0013d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00140	77 73		 ja	 SHORT $LN190@Load
$LN176@Load:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00142	51		 push	 ecx
  00143	52		 push	 edx
  00144	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00149	8b 45 d4	 mov	 eax, DWORD PTR tv746[ebp]
  0014c	83 c4 08	 add	 esp, 8
$LN165@Load:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  0014f	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00156	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 15 ; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0015d	c6 45 d8 00	 mov	 BYTE PTR $T3[ebp], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 249  : 			if (!rTextFileLoader.GetTokenBoolean("enablehitprocess", &isEnableHitProcess))

  00161	85 c0		 test	 eax, eax
  00163	75 07		 jne	 SHORT $LN3@Load

; 250  : 			{
; 251  : 				isEnableHitProcess = TRUE;

  00165	c7 46 40 01 00
	00 00		 mov	 DWORD PTR [esi+64], 1
$LN3@Load:

; 252  : 			}
; 253  : 
; 254  : 			if (!NRaceData::LoadAttackData(rTextFileLoader, &AttackData))

  0016c	8d 46 28	 lea	 eax, DWORD PTR [esi+40]
  0016f	50		 push	 eax
  00170	57		 push	 edi
  00171	e8 00 00 00 00	 call	 ?LoadAttackData@NRaceData@@YAHAAVCTextFileLoader@@PAUSAttackData@1@@Z ; NRaceData::LoadAttackData
  00176	83 c4 08	 add	 esp, 8
  00179	85 c0		 test	 eax, eax
  0017b	74 14		 je	 SHORT $LN183@Load

; 255  : 				return false;
; 256  : 
; 257  : 			if (!NRaceData::LoadCollisionData(rTextFileLoader, &CollisionData))

  0017d	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00180	50		 push	 eax
  00181	57		 push	 edi
  00182	e8 00 00 00 00	 call	 ?LoadCollisionData@NRaceData@@YAHAAVCTextFileLoader@@PAUSCollisionData@1@@Z ; NRaceData::LoadCollisionData
  00187	83 c4 08	 add	 esp, 8
  0018a	85 c0		 test	 eax, eax
  0018c	0f 95 c0	 setne	 al
  0018f	eb 02		 jmp	 SHORT $LN1@Load
$LN183@Load:

; 258  : 				return false;

  00191	32 c0		 xor	 al, al
$LN1@Load:

; 261  : 		}

  00193	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00196	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0019d	59		 pop	 ecx
  0019e	5f		 pop	 edi
  0019f	5e		 pop	 esi
  001a0	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001a3	33 cd		 xor	 ecx, ebp
  001a5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001aa	8b e5		 mov	 esp, ebp
  001ac	5d		 pop	 ebp
  001ad	c2 04 00	 ret	 4
$LN189@Load:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001b0	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN190@Load:
  001b5	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN187@Load:
  001ba	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Load@SMotionEventDataAttack@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Load@SMotionEventDataAttack@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z$1:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?Load@SMotionEventDataAttack@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Load@SMotionEventDataAttack@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Load@SMotionEventDataAttack@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z ENDP ; NMotionEvent::SMotionEventDataAttack::Load
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
;	COMDAT ?Save@SMotionEventDataAttack@NMotionEvent@@UAEXPAU_iobuf@@H@Z
_TEXT	SEGMENT
_File$ = 8						; size = 4
_iTabs$ = 12						; size = 4
?Save@SMotionEventDataAttack@NMotionEvent@@UAEXPAU_iobuf@@H@Z PROC ; NMotionEvent::SMotionEventDataAttack::Save, COMDAT
; _this$ = ecx

; 236  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx
  00006	56		 push	 esi

; 237  : 			PrintfTabs(File, iTabs, "DuringTime           %f\n", fDurationTime);

  00007	8b 75 08	 mov	 esi, DWORD PTR _File$[ebp]
  0000a	57		 push	 edi
  0000b	f3 0f 10 43 10	 movss	 xmm0, DWORD PTR [ebx+16]
  00010	83 ec 08	 sub	 esp, 8
  00013	8b 7d 0c	 mov	 edi, DWORD PTR _iTabs$[ebp]
  00016	0f 5a c0	 cvtps2pd xmm0, xmm0
  00019	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@JOLNCGNF@DuringTime?5?5?5?5?5?5?5?5?5?5?5?$CFf?6@
  00023	57		 push	 edi
  00024	56		 push	 esi
  00025	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs

; 238  : 			PrintfTabs(File, iTabs, "EnableHitProcess     %d\n", isEnableHitProcess);

  0002a	ff 73 40	 push	 DWORD PTR [ebx+64]
  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@DAILMIKJ@EnableHitProcess?5?5?5?5?5?$CFd?6@
  00032	57		 push	 edi
  00033	56		 push	 esi
  00034	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs

; 239  : 			PrintfTabs(File, iTabs, "\n");

  00039	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  0003e	57		 push	 edi
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs

; 240  : 
; 241  : 			NRaceData::SaveAttackData(File, iTabs, AttackData);

  00045	8d 43 28	 lea	 eax, DWORD PTR [ebx+40]
  00048	50		 push	 eax
  00049	57		 push	 edi
  0004a	56		 push	 esi
  0004b	e8 00 00 00 00	 call	 ?SaveAttackData@NRaceData@@YAXPAU_iobuf@@HABUSAttackData@1@@Z ; NRaceData::SaveAttackData

; 242  : 			NRaceData::SaveCollisionData(File, iTabs, CollisionData);

  00050	8d 43 14	 lea	 eax, DWORD PTR [ebx+20]
  00053	50		 push	 eax
  00054	57		 push	 edi
  00055	56		 push	 esi
  00056	e8 00 00 00 00	 call	 ?SaveCollisionData@NRaceData@@YAXPAU_iobuf@@HABUSCollisionData@1@@Z ; NRaceData::SaveCollisionData
  0005b	83 c4 48	 add	 esp, 72			; 00000048H
  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	5b		 pop	 ebx

; 243  : 		}

  00061	5d		 pop	 ebp
  00062	c2 08 00	 ret	 8
?Save@SMotionEventDataAttack@NMotionEvent@@UAEXPAU_iobuf@@H@Z ENDP ; NMotionEvent::SMotionEventDataAttack::Save
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\GameType.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
;	COMDAT ??1SMotionEventDataAttack@NMotionEvent@@UAE@XZ
_TEXT	SEGMENT
??1SMotionEventDataAttack@NMotionEvent@@UAE@XZ PROC	; NMotionEvent::SMotionEventDataAttack::~SMotionEventDataAttack, COMDAT
; _this$ = ecx

; 233  : 		virtual ~SMotionEventDataAttack() {}

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SMotionEventDataAttack@NMotionEvent@@6B@
; File C:\Marty 5.5\Src-Client\Client\GameLib\GameType.h

; 120  : 		virtual ~SCollisionData() {}

  00009	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
  0000c	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], OFFSET ??_7SCollisionData@NRaceData@@6B@
  00013	e8 00 00 00 00	 call	 ??1?$vector@VCSphereCollisionInstance@@V?$allocator@VCSphereCollisionInstance@@@std@@@std@@QAE@XZ ; std::vector<CSphereCollisionInstance,std::allocator<CSphereCollisionInstance> >::~vector<CSphereCollisionInstance,std::allocator<CSphereCollisionInstance> >
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 233  : 		virtual ~SMotionEventDataAttack() {}

  00018	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SMotionEventData@NMotionEvent@@6B@
  0001e	5e		 pop	 esi
  0001f	c3		 ret	 0
??1SMotionEventDataAttack@NMotionEvent@@UAE@XZ ENDP	; NMotionEvent::SMotionEventDataAttack::~SMotionEventDataAttack
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??_GSMotionEventDataFly@NMotionEvent@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GSMotionEventDataFly@NMotionEvent@@UAEPAXI@Z PROC	; NMotionEvent::SMotionEventDataFly::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 190  : 		virtual ~SMotionEventDataFly() {}

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SMotionEventDataFly@NMotionEvent@@6B@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0000c	8b 4e 54	 mov	 ecx, DWORD PTR [esi+84]
  0000f	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00012	76 28		 jbe	 SHORT $LN30@scalar
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00014	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00017	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 12		 jb	 SHORT $LN41@scalar

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00020	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00023	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00026	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00028	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002e	77 7e		 ja	 SHORT $LN76@scalar

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b c2		 mov	 eax, edx
$LN41@scalar:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00039	83 c4 08	 add	 esp, 8
$LN30@scalar:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  0003c	c7 46 50 00 00
	00 00		 mov	 DWORD PTR [esi+80], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00043	c7 46 54 0f 00
	00 00		 mov	 DWORD PTR [esi+84], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0004a	c6 46 40 00	 mov	 BYTE PTR [esi+64], 0

; 434  :         return _Myres > _Small_string_capacity;

  0004e	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  00051	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00054	76 28		 jbe	 SHORT $LN68@scalar
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00056	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00059	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0005a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00060	72 12		 jb	 SHORT $LN79@scalar

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00062	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00065	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00068	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0006a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0006d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00070	77 3c		 ja	 SHORT $LN76@scalar

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00072	8b c2		 mov	 eax, edx
$LN79@scalar:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00074	51		 push	 ecx
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0007b	83 c4 08	 add	 esp, 8
$LN68@scalar:
  0007e	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00082	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00089	c7 46 2c 0f 00
	00 00		 mov	 DWORD PTR [esi+44], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00090	c6 46 18 00	 mov	 BYTE PTR [esi+24], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 190  : 		virtual ~SMotionEventDataFly() {}

  00094	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SMotionEventData@NMotionEvent@@6B@
  0009a	74 0b		 je	 SHORT $LN2@scalar
  0009c	6a 58		 push	 88			; 00000058H
  0009e	56		 push	 esi
  0009f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000a4	83 c4 08	 add	 esp, 8
$LN2@scalar:
  000a7	8b c6		 mov	 eax, esi
  000a9	5e		 pop	 esi
  000aa	5d		 pop	 ebp
  000ab	c2 04 00	 ret	 4
$LN76@scalar:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ae	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN93@scalar:
  000b3	cc		 int	 3
??_GSMotionEventDataFly@NMotionEvent@@UAEPAXI@Z ENDP	; NMotionEvent::SMotionEventDataFly::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
;	COMDAT ?Load@SMotionEventDataFly@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z
_TEXT	SEGMENT
tv1389 = -72						; size = 4
tv1390 = -72						; size = 4
_rTextFileLoader$GSCopy$1$ = -68			; size = 4
$T2 = -64						; size = 24
$T3 = -40						; size = 24
$T4 = -40						; size = 24
$T5 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rTextFileLoader$ = 8					; size = 4
?Load@SMotionEventDataFly@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z PROC ; NMotionEvent::SMotionEventDataFly::Load, COMDAT
; _this$ = ecx

; 201  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Load@SMotionEventDataFly@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b f9		 mov	 edi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0002c	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_0BA@HJAHPMOG@attachingenable@+8
  00031	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 201  : 		{

  00034	8b 4d 08	 mov	 ecx, DWORD PTR _rTextFileLoader$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00037	0f 11 45 d8	 movups	 XMMWORD PTR $T3[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0003b	89 45 e0	 mov	 DWORD PTR $T3[ebp+8], eax
  0003e	66 a1 0c 00 00
	00		 mov	 ax, WORD PTR ??_C@_0BA@HJAHPMOG@attachingenable@+12
  00044	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0BA@HJAHPMOG@attachingenable@
  0004c	66 89 45 e4	 mov	 WORD PTR $T3[ebp+12], ax
  00050	a0 0e 00 00 00	 mov	 al, BYTE PTR ??_C@_0BA@HJAHPMOG@attachingenable@+14
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 201  : 		{

  00055	89 4d bc	 mov	 DWORD PTR _rTextFileLoader$GSCopy$1$[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  00058	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR $T3[ebp+16], 15 ; 0000000fH

; 867  :             _My_data._Myres  = _Small_string_capacity;

  0005f	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 15 ; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00066	66 0f d6 45 d8	 movq	 QWORD PTR $T3[ebp], xmm0
  0006b	88 45 e6	 mov	 BYTE PTR $T3[ebp+14], al
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  0006e	c6 45 e7 00	 mov	 BYTE PTR $T3[ebp+15], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 202  : 			if (!rTextFileLoader.GetTokenBoolean("attachingenable", &isAttaching))

  00072	8d 47 14	 lea	 eax, DWORD PTR [edi+20]
  00075	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0007c	50		 push	 eax
  0007d	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00080	50		 push	 eax
  00081	e8 00 00 00 00	 call	 ?GetTokenBoolean@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAH@Z ; CTextFileLoader::GetTokenBoolean
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00086	8b 4d ec	 mov	 ecx, DWORD PTR $T3[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 202  : 			if (!rTextFileLoader.GetTokenBoolean("attachingenable", &isAttaching))

  00089	8b f0		 mov	 esi, eax
  0008b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00092	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00095	76 2c		 jbe	 SHORT $LN81@Load
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00097	8b 55 d8	 mov	 edx, DWORD PTR $T3[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0009a	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0009b	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0009d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000a3	72 14		 jb	 SHORT $LN92@Load

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000a5	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000a8	83 c1 23	 add	 ecx, 35			; 00000023H
  000ab	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ad	83 c0 fc	 add	 eax, -4			; fffffffcH
  000b0	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000b3	0f 87 43 02 00
	00		 ja	 $LN388@Load
$LN92@Load:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000b9	51		 push	 ecx
  000ba	52		 push	 edx
  000bb	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000c0	83 c4 08	 add	 esp, 8
$LN81@Load:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 202  : 			if (!rTextFileLoader.GetTokenBoolean("attachingenable", &isAttaching))

  000c3	85 f6		 test	 esi, esi
  000c5	0f 84 12 02 00
	00		 je	 $LN381@Load
  000cb	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 498  :     size_type _Mysize = 0; // current length of string (size)

  000ce	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  000d5	6a 20		 push	 32			; 00000020H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000d7	0f 11 45 c0	 movups	 XMMWORD PTR $T2[ebp], xmm0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  000db	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  000e2	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000e7	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_0BC@FCIOLNPK@attachingbonename@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000ee	89 45 c0	 mov	 DWORD PTR $T2[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  000f1	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 891  :         _My_data._Mysize = _Count;

  000f4	c7 45 d0 11 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 17 ; 00000011H

; 892  :         _My_data._Myres  = _New_capacity;

  000fb	c7 45 d4 1f 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 31 ; 0000001fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00102	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  00105	8a 0d 10 00 00
	00		 mov	 cl, BYTE PTR ??_C@_0BC@FCIOLNPK@attachingbonename@+16
  0010b	88 48 10	 mov	 BYTE PTR [eax+16], cl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  0010e	c6 40 11 00	 mov	 BYTE PTR [eax+17], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 204  : 			if (!rTextFileLoader.GetTokenString("attachingbonename", &strAttachingBoneName))

  00112	8b 4d bc	 mov	 ecx, DWORD PTR _rTextFileLoader$GSCopy$1$[ebp]
  00115	8d 47 18	 lea	 eax, DWORD PTR [edi+24]
  00118	50		 push	 eax
  00119	8d 45 c0	 lea	 eax, DWORD PTR $T2[ebp]
  0011c	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00123	50		 push	 eax
  00124	e8 00 00 00 00	 call	 ?GetTokenString@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV23@@Z ; CTextFileLoader::GetTokenString
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00129	8b 4d d4	 mov	 ecx, DWORD PTR $T2[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 204  : 			if (!rTextFileLoader.GetTokenString("attachingbonename", &strAttachingBoneName))

  0012c	8b f0		 mov	 esi, eax
  0012e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00135	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00138	76 2c		 jbe	 SHORT $LN167@Load
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0013a	8b 55 c0	 mov	 edx, DWORD PTR $T2[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0013d	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0013e	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00140	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00146	72 14		 jb	 SHORT $LN178@Load

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00148	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0014b	83 c1 23	 add	 ecx, 35			; 00000023H
  0014e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00150	83 c0 fc	 add	 eax, -4			; fffffffcH
  00153	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00156	0f 87 a5 01 00
	00		 ja	 $LN389@Load
$LN178@Load:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0015c	51		 push	 ecx
  0015d	52		 push	 edx
  0015e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00163	83 c4 08	 add	 esp, 8
$LN167@Load:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 204  : 			if (!rTextFileLoader.GetTokenString("attachingbonename", &strAttachingBoneName))

  00166	85 f6		 test	 esi, esi
  00168	0f 84 6f 01 00
	00		 je	 $LN381@Load
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0016e	66 a1 08 00 00
	00		 mov	 ax, WORD PTR ??_C@_0M@BKDIDPMI@flyfilename@+8
  00174	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00177	0f 11 45 d8	 movups	 XMMWORD PTR $T4[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0017b	66 89 45 e0	 mov	 WORD PTR $T4[ebp+8], ax
  0017f	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0M@BKDIDPMI@flyfilename@
  00187	a0 0a 00 00 00	 mov	 al, BYTE PTR ??_C@_0M@BKDIDPMI@flyfilename@+10
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  0018c	c7 45 e8 0b 00
	00 00		 mov	 DWORD PTR $T4[ebp+16], 11 ; 0000000bH

; 867  :             _My_data._Myres  = _Small_string_capacity;

  00193	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T4[ebp+20], 15 ; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0019a	66 0f d6 45 d8	 movq	 QWORD PTR $T4[ebp], xmm0
  0019f	88 45 e2	 mov	 BYTE PTR $T4[ebp+10], al
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  001a2	c6 45 e3 00	 mov	 BYTE PTR $T4[ebp+11], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 206  : 			if (!rTextFileLoader.GetTokenString("flyfilename", &strFlyFileName))

  001a6	8b 4d bc	 mov	 ecx, DWORD PTR _rTextFileLoader$GSCopy$1$[ebp]
  001a9	8d 77 40	 lea	 esi, DWORD PTR [edi+64]
  001ac	56		 push	 esi
  001ad	8d 45 d8	 lea	 eax, DWORD PTR $T4[ebp]
  001b0	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  001b7	50		 push	 eax
  001b8	e8 00 00 00 00	 call	 ?GetTokenString@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV23@@Z ; CTextFileLoader::GetTokenString
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  001bd	8b 4d ec	 mov	 ecx, DWORD PTR $T4[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 206  : 			if (!rTextFileLoader.GetTokenString("flyfilename", &strFlyFileName))

  001c0	89 45 b8	 mov	 DWORD PTR tv1390[ebp], eax
  001c3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  001ca	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  001cd	76 2f		 jbe	 SHORT $LN253@Load
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001cf	8b 55 d8	 mov	 edx, DWORD PTR $T4[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  001d2	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001d3	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  001d5	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001db	72 14		 jb	 SHORT $LN264@Load

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001dd	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  001e0	83 c1 23	 add	 ecx, 35			; 00000023H
  001e3	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001e5	83 c0 fc	 add	 eax, -4			; fffffffcH
  001e8	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001eb	0f 87 15 01 00
	00		 ja	 $LN390@Load
$LN264@Load:

; 289  :         ::operator delete(_Ptr, _Bytes);

  001f1	51		 push	 ecx
  001f2	52		 push	 edx
  001f3	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001f8	8b 45 b8	 mov	 eax, DWORD PTR tv1390[ebp]
  001fb	83 c4 08	 add	 esp, 8
$LN253@Load:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 206  : 			if (!rTextFileLoader.GetTokenString("flyfilename", &strFlyFileName))

  001fe	85 c0		 test	 eax, eax
  00200	0f 84 d7 00 00
	00		 je	 $LN381@Load
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00206	66 a1 08 00 00
	00		 mov	 ax, WORD PTR ??_C@_0M@OKENILIB@flyposition@+8
  0020c	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0020f	0f 11 45 d8	 movups	 XMMWORD PTR $T5[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00213	66 89 45 e0	 mov	 WORD PTR $T5[ebp+8], ax
  00217	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0M@OKENILIB@flyposition@
  0021f	a0 0a 00 00 00	 mov	 al, BYTE PTR ??_C@_0M@OKENILIB@flyposition@+10
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  00224	c7 45 e8 0b 00
	00 00		 mov	 DWORD PTR $T5[ebp+16], 11 ; 0000000bH

; 867  :             _My_data._Myres  = _Small_string_capacity;

  0022b	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T5[ebp+20], 15 ; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00232	66 0f d6 45 d8	 movq	 QWORD PTR $T5[ebp], xmm0
  00237	88 45 e2	 mov	 BYTE PTR $T5[ebp+10], al
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  0023a	c6 45 e3 00	 mov	 BYTE PTR $T5[ebp+11], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 208  : 			if (!rTextFileLoader.GetTokenPosition("flyposition", &v3FlyPosition))

  0023e	8b 4d bc	 mov	 ecx, DWORD PTR _rTextFileLoader$GSCopy$1$[ebp]
  00241	8d 47 30	 lea	 eax, DWORD PTR [edi+48]
  00244	50		 push	 eax
  00245	8d 45 d8	 lea	 eax, DWORD PTR $T5[ebp]
  00248	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
  0024f	50		 push	 eax
  00250	e8 00 00 00 00	 call	 ?GetTokenPosition@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXVECTOR3@@@Z ; CTextFileLoader::GetTokenPosition
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00255	8b 4d ec	 mov	 ecx, DWORD PTR $T5[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 208  : 			if (!rTextFileLoader.GetTokenPosition("flyposition", &v3FlyPosition))

  00258	89 45 b8	 mov	 DWORD PTR tv1389[ebp], eax
  0025b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00262	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00265	76 2f		 jbe	 SHORT $LN339@Load
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00267	8b 55 d8	 mov	 edx, DWORD PTR $T5[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0026a	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0026b	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0026d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00273	72 14		 jb	 SHORT $LN350@Load

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00275	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00278	83 c1 23	 add	 ecx, 35			; 00000023H
  0027b	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0027d	83 c0 fc	 add	 eax, -4			; fffffffcH
  00280	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00283	0f 87 82 00 00
	00		 ja	 $LN391@Load
$LN350@Load:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00289	51		 push	 ecx
  0028a	52		 push	 edx
  0028b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00290	8b 45 b8	 mov	 eax, DWORD PTR tv1389[ebp]
  00293	83 c4 08	 add	 esp, 8
$LN339@Load:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00296	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T5[ebp+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  0029d	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T5[ebp+20], 15 ; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  002a4	c6 45 d8 00	 mov	 BYTE PTR $T5[ebp], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 208  : 			if (!rTextFileLoader.GetTokenPosition("flyposition", &v3FlyPosition))

  002a8	85 c0		 test	 eax, eax
  002aa	74 31		 je	 SHORT $LN381@Load
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  002ac	83 7e 14 0f	 cmp	 DWORD PTR [esi+20], 15	; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  002b0	8b c6		 mov	 eax, esi

; 426  :         if (_Large_mode_engaged()) {

  002b2	76 02		 jbe	 SHORT $LN380@Load

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  002b4	8b 06		 mov	 eax, DWORD PTR [esi]
$LN380@Load:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 210  : 			dwFlyIndex = GetCaseCRC32(strFlyFileName.c_str(), strFlyFileName.length());

  002b6	ff 77 50	 push	 DWORD PTR [edi+80]
  002b9	50		 push	 eax
  002ba	e8 00 00 00 00	 call	 ?GetCaseCRC32@@YAKPBDI@Z ; GetCaseCRC32
  002bf	83 c4 08	 add	 esp, 8
  002c2	89 47 3c	 mov	 DWORD PTR [edi+60], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  002c5	83 7e 14 0f	 cmp	 DWORD PTR [esi+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  002c9	76 02		 jbe	 SHORT $LN370@Load

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  002cb	8b 36		 mov	 esi, DWORD PTR [esi]
$LN370@Load:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 214  : 			CFlyingManager::Instance().RegisterFlyingData(strFlyFileName.c_str());

  002cd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCFlyingManager@@@@0PAVCFlyingManager@@A ; CSingleton<CFlyingManager>::ms_singleton
  002d3	56		 push	 esi
  002d4	e8 00 00 00 00	 call	 ?RegisterFlyingData@CFlyingManager@@QAE_NPBD@Z ; CFlyingManager::RegisterFlyingData

; 215  : #endif
; 216  : 
; 217  : 			return true;

  002d9	b0 01		 mov	 al, 1
  002db	eb 02		 jmp	 SHORT $LN1@Load
$LN381@Load:

; 209  : 				return false;

  002dd	32 c0		 xor	 al, al
$LN1@Load:

; 218  : 		}

  002df	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002e2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002e9	59		 pop	 ecx
  002ea	5f		 pop	 edi
  002eb	5e		 pop	 esi
  002ec	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002ef	33 cd		 xor	 ecx, ebp
  002f1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002f6	8b e5		 mov	 esp, ebp
  002f8	5d		 pop	 ebp
  002f9	c2 04 00	 ret	 4
$LN388@Load:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  002fc	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN389@Load:
  00301	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN390@Load:
  00306	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN391@Load:
  0030b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN386@Load:
  00310	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Load@SMotionEventDataFly@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Load@SMotionEventDataFly@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z$1:
  00008	8d 4d c0	 lea	 ecx, DWORD PTR $T2[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Load@SMotionEventDataFly@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z$2:
  00010	8d 4d d8	 lea	 ecx, DWORD PTR $T4[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Load@SMotionEventDataFly@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z$3:
  00018	8d 4d d8	 lea	 ecx, DWORD PTR $T5[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
  00024	cc		 int	 3
__ehhandler$?Load@SMotionEventDataFly@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z:
  00025	90		 npad	 1
  00026	90		 npad	 1
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002e	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0003b	33 c8		 xor	 ecx, eax
  0003d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00042	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Load@SMotionEventDataFly@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z
  00047	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Load@SMotionEventDataFly@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z ENDP ; NMotionEvent::SMotionEventDataFly::Load
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
;	COMDAT ?Save@SMotionEventDataFly@NMotionEvent@@UAEXPAU_iobuf@@H@Z
_TEXT	SEGMENT
_File$ = 8						; size = 4
_iTabs$ = 12						; size = 4
?Save@SMotionEventDataFly@NMotionEvent@@UAEXPAU_iobuf@@H@Z PROC ; NMotionEvent::SMotionEventDataFly::Save, COMDAT
; _this$ = ecx

; 193  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 194  : 			PrintfTabs(File, iTabs, "\n");

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _File$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 0c	 mov	 edi, DWORD PTR _iTabs$[ebp]
  0000c	8b f1		 mov	 esi, ecx
  0000e	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  00013	57		 push	 edi
  00014	53		 push	 ebx
  00015	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs

; 195  : 			PrintfTabs(File, iTabs, "AttachingEnable      %d\n", isAttaching);

  0001a	ff 76 14	 push	 DWORD PTR [esi+20]
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@LAKEIKLD@AttachingEnable?5?5?5?5?5?5?$CFd?6@
  00022	57		 push	 edi
  00023	53		 push	 ebx
  00024	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2328 :         return _Mypair._Myval2._Myptr();

  00029	8d 46 18	 lea	 eax, DWORD PTR [esi+24]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 195  : 			PrintfTabs(File, iTabs, "AttachingEnable      %d\n", isAttaching);

  0002c	83 c4 1c	 add	 esp, 28			; 0000001cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0002f	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  00033	76 02		 jbe	 SHORT $LN7@Save

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00035	8b 00		 mov	 eax, DWORD PTR [eax]
$LN7@Save:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 196  : 			PrintfTabs(File, iTabs, "AttachingBoneName    \"%s\"\n", strAttachingBoneName.c_str());

  00037	50		 push	 eax
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@PLABIPOF@AttachingBoneName?5?5?5?5?$CC?$CFs?$CC?6@
  0003d	57		 push	 edi
  0003e	53		 push	 ebx
  0003f	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2328 :         return _Mypair._Myval2._Myptr();

  00044	8d 46 40	 lea	 eax, DWORD PTR [esi+64]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 196  : 			PrintfTabs(File, iTabs, "AttachingBoneName    \"%s\"\n", strAttachingBoneName.c_str());

  00047	83 c4 10	 add	 esp, 16			; 00000010H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0004a	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  0004e	76 02		 jbe	 SHORT $LN17@Save

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00050	8b 00		 mov	 eax, DWORD PTR [eax]
$LN17@Save:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 197  : 			PrintfTabs(File, iTabs, "FlyFileName       \"%s\"\n", strFlyFileName.c_str());

  00052	50		 push	 eax
  00053	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@MFBAEGBD@FlyFileName?5?5?5?5?5?5?5?$CC?$CFs?$CC?6@
  00058	57		 push	 edi
  00059	53		 push	 ebx
  0005a	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs
  0005f	f3 0f 10 46 38	 movss	 xmm0, DWORD PTR [esi+56]

; 198  : 			PrintfTabs(File, iTabs, "FlyPosition       %f %f %f\n", v3FlyPosition.x, v3FlyPosition.y, v3FlyPosition.z);

  00064	0f 5a c0	 cvtps2pd xmm0, xmm0
  00067	f2 0f 11 44 24
	08		 movsd	 QWORD PTR [esp+8], xmm0
  0006d	f3 0f 10 46 34	 movss	 xmm0, DWORD PTR [esi+52]
  00072	0f 5a c0	 cvtps2pd xmm0, xmm0
  00075	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0007a	83 ec 08	 sub	 esp, 8
  0007d	f3 0f 10 46 30	 movss	 xmm0, DWORD PTR [esi+48]
  00082	0f 5a c0	 cvtps2pd xmm0, xmm0
  00085	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0008a	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@LNHEOAC@FlyPosition?5?5?5?5?5?5?5?$CFf?5?$CFf?5?$CFf?6@
  0008f	57		 push	 edi
  00090	53		 push	 ebx
  00091	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs
  00096	83 c4 24	 add	 esp, 36			; 00000024H
  00099	5f		 pop	 edi
  0009a	5e		 pop	 esi
  0009b	5b		 pop	 ebx

; 199  : 		}

  0009c	5d		 pop	 ebp
  0009d	c2 08 00	 ret	 8
?Save@SMotionEventDataFly@NMotionEvent@@UAEXPAU_iobuf@@H@Z ENDP ; NMotionEvent::SMotionEventDataFly::Save
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
;	COMDAT ??1SMotionEventDataFly@NMotionEvent@@UAE@XZ
_TEXT	SEGMENT
??1SMotionEventDataFly@NMotionEvent@@UAE@XZ PROC	; NMotionEvent::SMotionEventDataFly::~SMotionEventDataFly, COMDAT
; _this$ = ecx

; 190  : 		virtual ~SMotionEventDataFly() {}

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SMotionEventDataFly@NMotionEvent@@6B@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00009	8b 4e 54	 mov	 ecx, DWORD PTR [esi+84]
  0000c	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0000f	76 28		 jbe	 SHORT $LN24@SMotionEve
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00011	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00014	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00015	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001b	72 12		 jb	 SHORT $LN35@SMotionEve

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001d	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00020	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00023	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00025	83 c0 fc	 add	 eax, -4			; fffffffcH
  00028	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002b	77 68		 ja	 SHORT $LN70@SMotionEve

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002d	8b c2		 mov	 eax, edx
$LN35@SMotionEve:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0002f	51		 push	 ecx
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00036	83 c4 08	 add	 esp, 8
$LN24@SMotionEve:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00039	c7 46 50 00 00
	00 00		 mov	 DWORD PTR [esi+80], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00040	c7 46 54 0f 00
	00 00		 mov	 DWORD PTR [esi+84], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00047	c6 46 40 00	 mov	 BYTE PTR [esi+64], 0

; 434  :         return _Myres > _Small_string_capacity;

  0004b	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  0004e	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00051	76 28		 jbe	 SHORT $LN62@SMotionEve
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00053	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00056	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00057	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0005d	72 12		 jb	 SHORT $LN73@SMotionEve

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0005f	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00062	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00065	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00067	83 c0 fc	 add	 eax, -4			; fffffffcH
  0006a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0006d	77 26		 ja	 SHORT $LN70@SMotionEve

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0006f	8b c2		 mov	 eax, edx
$LN73@SMotionEve:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00071	51		 push	 ecx
  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00078	83 c4 08	 add	 esp, 8
$LN62@SMotionEve:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  0007b	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00082	c7 46 2c 0f 00
	00 00		 mov	 DWORD PTR [esi+44], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00089	c6 46 18 00	 mov	 BYTE PTR [esi+24], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 190  : 		virtual ~SMotionEventDataFly() {}

  0008d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SMotionEventData@NMotionEvent@@6B@
  00093	5e		 pop	 esi
  00094	c3		 ret	 0
$LN70@SMotionEve:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00095	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN85@SMotionEve:
  0009a	cc		 int	 3
??1SMotionEventDataFly@NMotionEvent@@UAE@XZ ENDP	; NMotionEvent::SMotionEventDataFly::~SMotionEventDataFly
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??_GSMotionEventDataEffectToTarget@NMotionEvent@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GSMotionEventDataEffectToTarget@NMotionEvent@@UAEPAXI@Z PROC ; NMotionEvent::SMotionEventDataEffectToTarget::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 143  : 		virtual ~SMotionEventDataEffectToTarget() {}

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SMotionEventDataEffectToTarget@NMotionEvent@@6B@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0000c	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  0000f	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00012	76 28		 jbe	 SHORT $LN30@scalar
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00014	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00017	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 12		 jb	 SHORT $LN41@scalar

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00020	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00023	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00026	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00028	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002e	77 3c		 ja	 SHORT $LN38@scalar

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b c2		 mov	 eax, edx
$LN41@scalar:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00039	83 c4 08	 add	 esp, 8
$LN30@scalar:
  0003c	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00040	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00047	c7 46 2c 0f 00
	00 00		 mov	 DWORD PTR [esi+44], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0004e	c6 46 18 00	 mov	 BYTE PTR [esi+24], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 143  : 		virtual ~SMotionEventDataEffectToTarget() {}

  00052	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SMotionEventData@NMotionEvent@@6B@
  00058	74 0b		 je	 SHORT $LN2@scalar
  0005a	6a 44		 push	 68			; 00000044H
  0005c	56		 push	 esi
  0005d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00062	83 c4 08	 add	 esp, 8
$LN2@scalar:
  00065	8b c6		 mov	 eax, esi
  00067	5e		 pop	 esi
  00068	5d		 pop	 ebp
  00069	c2 04 00	 ret	 4
$LN38@scalar:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0006c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN53@scalar:
  00071	cc		 int	 3
??_GSMotionEventDataEffectToTarget@NMotionEvent@@UAEPAXI@Z ENDP ; NMotionEvent::SMotionEventDataEffectToTarget::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
;	COMDAT ?Load@SMotionEventDataEffectToTarget@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z
_TEXT	SEGMENT
_rTextFileLoader$GSCopy$1$ = -48			; size = 4
tv1396 = -44						; size = 4
tv1397 = -44						; size = 4
tv1398 = -44						; size = 4
tv1399 = -44						; size = 4
$T2 = -40						; size = 24
$T3 = -40						; size = 24
$T4 = -40						; size = 24
$T5 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rTextFileLoader$ = 8					; size = 4
?Load@SMotionEventDataEffectToTarget@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z PROC ; NMotionEvent::SMotionEventDataEffectToTarget::Load, COMDAT
; _this$ = ecx

; 154  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Load@SMotionEventDataEffectToTarget@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b f9		 mov	 edi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0002c	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_0P@MBGGNLC@effectfilename@+8
  00031	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 154  : 		{

  00034	8b 4d 08	 mov	 ecx, DWORD PTR _rTextFileLoader$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00037	0f 11 45 d8	 movups	 XMMWORD PTR $T2[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0003b	89 45 e0	 mov	 DWORD PTR $T2[ebp+8], eax
  0003e	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0P@MBGGNLC@effectfilename@
  00046	66 a1 0c 00 00
	00		 mov	 ax, WORD PTR ??_C@_0P@MBGGNLC@effectfilename@+12
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 154  : 		{

  0004c	89 4d d0	 mov	 DWORD PTR _rTextFileLoader$GSCopy$1$[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  0004f	c7 45 e8 0e 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 14 ; 0000000eH

; 867  :             _My_data._Myres  = _Small_string_capacity;

  00056	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 15 ; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0005d	66 0f d6 45 d8	 movq	 QWORD PTR $T2[ebp], xmm0
  00062	66 89 45 e4	 mov	 WORD PTR $T2[ebp+12], ax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00066	c6 45 e6 00	 mov	 BYTE PTR $T2[ebp+14], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 155  : 			if (!rTextFileLoader.GetTokenString("effectfilename", &strEffectFileName))

  0006a	8d 77 18	 lea	 esi, DWORD PTR [edi+24]
  0006d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00074	56		 push	 esi
  00075	8d 45 d8	 lea	 eax, DWORD PTR $T2[ebp]
  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 ?GetTokenString@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV23@@Z ; CTextFileLoader::GetTokenString
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0007e	8b 4d ec	 mov	 ecx, DWORD PTR $T2[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 155  : 			if (!rTextFileLoader.GetTokenString("effectfilename", &strEffectFileName))

  00081	89 45 d4	 mov	 DWORD PTR tv1399[ebp], eax
  00084	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0008b	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0008e	76 2f		 jbe	 SHORT $LN81@Load
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00090	8b 55 d8	 mov	 edx, DWORD PTR $T2[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00093	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00094	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00096	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0009c	72 14		 jb	 SHORT $LN92@Load

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0009e	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000a1	83 c1 23	 add	 ecx, 35			; 00000023H
  000a4	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a6	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a9	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000ac	0f 87 61 02 00
	00		 ja	 $LN389@Load
$LN92@Load:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000b2	51		 push	 ecx
  000b3	52		 push	 edx
  000b4	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000b9	8b 45 d4	 mov	 eax, DWORD PTR tv1399[ebp]
  000bc	83 c4 08	 add	 esp, 8
$LN81@Load:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 155  : 			if (!rTextFileLoader.GetTokenString("effectfilename", &strEffectFileName))

  000bf	85 c0		 test	 eax, eax
  000c1	0f 84 2d 02 00
	00		 je	 $LN384@Load
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c7	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_0P@PMGDNJPL@effectposition@+8
  000cc	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000cf	0f 11 45 d8	 movups	 XMMWORD PTR $T3[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d3	89 45 e0	 mov	 DWORD PTR $T3[ebp+8], eax
  000d6	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0P@PMGDNJPL@effectposition@
  000de	66 a1 0c 00 00
	00		 mov	 ax, WORD PTR ??_C@_0P@PMGDNJPL@effectposition@+12
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  000e4	c7 45 e8 0e 00
	00 00		 mov	 DWORD PTR $T3[ebp+16], 14 ; 0000000eH

; 867  :             _My_data._Myres  = _Small_string_capacity;

  000eb	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 15 ; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000f2	66 0f d6 45 d8	 movq	 QWORD PTR $T3[ebp], xmm0
  000f7	66 89 45 e4	 mov	 WORD PTR $T3[ebp+12], ax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  000fb	c6 45 e6 00	 mov	 BYTE PTR $T3[ebp+14], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 157  : 			if (!rTextFileLoader.GetTokenPosition("effectposition", &v3EffectPosition))

  000ff	8b 4d d0	 mov	 ecx, DWORD PTR _rTextFileLoader$GSCopy$1$[ebp]
  00102	8d 47 30	 lea	 eax, DWORD PTR [edi+48]
  00105	50		 push	 eax
  00106	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00109	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00110	50		 push	 eax
  00111	e8 00 00 00 00	 call	 ?GetTokenPosition@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXVECTOR3@@@Z ; CTextFileLoader::GetTokenPosition
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00116	8b 4d ec	 mov	 ecx, DWORD PTR $T3[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 157  : 			if (!rTextFileLoader.GetTokenPosition("effectposition", &v3EffectPosition))

  00119	89 45 d4	 mov	 DWORD PTR tv1398[ebp], eax
  0011c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00123	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00126	76 2f		 jbe	 SHORT $LN167@Load
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00128	8b 55 d8	 mov	 edx, DWORD PTR $T3[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0012b	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0012c	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0012e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00134	72 14		 jb	 SHORT $LN178@Load

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00136	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00139	83 c1 23	 add	 ecx, 35			; 00000023H
  0013c	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0013e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00141	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00144	0f 87 ce 01 00
	00		 ja	 $LN390@Load
$LN178@Load:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0014a	51		 push	 ecx
  0014b	52		 push	 edx
  0014c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00151	8b 45 d4	 mov	 eax, DWORD PTR tv1398[ebp]
  00154	83 c4 08	 add	 esp, 8
$LN167@Load:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 157  : 			if (!rTextFileLoader.GetTokenPosition("effectposition", &v3EffectPosition))

  00157	85 c0		 test	 eax, eax
  00159	0f 84 95 01 00
	00		 je	 $LN384@Load
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0015f	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_0BA@DEKLACIK@followingenable@+8
  00164	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00167	0f 11 45 d8	 movups	 XMMWORD PTR $T4[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0016b	89 45 e0	 mov	 DWORD PTR $T4[ebp+8], eax
  0016e	66 a1 0c 00 00
	00		 mov	 ax, WORD PTR ??_C@_0BA@DEKLACIK@followingenable@+12
  00174	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0BA@DEKLACIK@followingenable@
  0017c	66 89 45 e4	 mov	 WORD PTR $T4[ebp+12], ax
  00180	a0 0e 00 00 00	 mov	 al, BYTE PTR ??_C@_0BA@DEKLACIK@followingenable@+14
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  00185	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR $T4[ebp+16], 15 ; 0000000fH

; 867  :             _My_data._Myres  = _Small_string_capacity;

  0018c	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T4[ebp+20], 15 ; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00193	66 0f d6 45 d8	 movq	 QWORD PTR $T4[ebp], xmm0
  00198	88 45 e6	 mov	 BYTE PTR $T4[ebp+14], al
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  0019b	c6 45 e7 00	 mov	 BYTE PTR $T4[ebp+15], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 159  : 			if (!rTextFileLoader.GetTokenBoolean("followingenable", &isFollowing))

  0019f	8b 4d d0	 mov	 ecx, DWORD PTR _rTextFileLoader$GSCopy$1$[ebp]
  001a2	8d 47 3c	 lea	 eax, DWORD PTR [edi+60]
  001a5	50		 push	 eax
  001a6	8d 45 d8	 lea	 eax, DWORD PTR $T4[ebp]
  001a9	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  001b0	50		 push	 eax
  001b1	e8 00 00 00 00	 call	 ?GetTokenBoolean@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAH@Z ; CTextFileLoader::GetTokenBoolean
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  001b6	8b 4d ec	 mov	 ecx, DWORD PTR $T4[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 159  : 			if (!rTextFileLoader.GetTokenBoolean("followingenable", &isFollowing))

  001b9	89 45 d4	 mov	 DWORD PTR tv1397[ebp], eax
  001bc	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  001c3	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  001c6	76 2f		 jbe	 SHORT $LN253@Load
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001c8	8b 55 d8	 mov	 edx, DWORD PTR $T4[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  001cb	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001cc	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  001ce	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001d4	72 14		 jb	 SHORT $LN264@Load

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001d6	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  001d9	83 c1 23	 add	 ecx, 35			; 00000023H
  001dc	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001de	83 c0 fc	 add	 eax, -4			; fffffffcH
  001e1	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001e4	0f 87 33 01 00
	00		 ja	 $LN391@Load
$LN264@Load:

; 289  :         ::operator delete(_Ptr, _Bytes);

  001ea	51		 push	 ecx
  001eb	52		 push	 edx
  001ec	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001f1	8b 45 d4	 mov	 eax, DWORD PTR tv1397[ebp]
  001f4	83 c4 08	 add	 esp, 8
$LN253@Load:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 159  : 			if (!rTextFileLoader.GetTokenBoolean("followingenable", &isFollowing))

  001f7	85 c0		 test	 eax, eax
  001f9	75 03		 jne	 SHORT $LN4@Load

; 160  : 			{
; 161  : 				isFollowing = FALSE;

  001fb	89 47 3c	 mov	 DWORD PTR [edi+60], eax
$LN4@Load:
  001fe	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00201	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T5[ebp+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00208	6a 20		 push	 32			; 00000020H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0020a	0f 11 45 d8	 movups	 XMMWORD PTR $T5[ebp], xmm0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0020e	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T5[ebp+20], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00215	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0021a	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_0BC@PGIDKNAJ@fishingeffectflag@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00221	89 45 d8	 mov	 DWORD PTR $T5[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00224	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 891  :         _My_data._Mysize = _Count;

  00227	c7 45 e8 11 00
	00 00		 mov	 DWORD PTR $T5[ebp+16], 17 ; 00000011H

; 892  :         _My_data._Myres  = _New_capacity;

  0022e	c7 45 ec 1f 00
	00 00		 mov	 DWORD PTR $T5[ebp+20], 31 ; 0000001fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00235	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  00238	8a 15 10 00 00
	00		 mov	 dl, BYTE PTR ??_C@_0BC@PGIDKNAJ@fishingeffectflag@+16
  0023e	88 50 10	 mov	 BYTE PTR [eax+16], dl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  00241	c6 40 11 00	 mov	 BYTE PTR [eax+17], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 163  : 			if (!rTextFileLoader.GetTokenBoolean("fishingeffectflag", &isFishingEffect))

  00245	8b 4d d0	 mov	 ecx, DWORD PTR _rTextFileLoader$GSCopy$1$[ebp]
  00248	8d 47 40	 lea	 eax, DWORD PTR [edi+64]
  0024b	50		 push	 eax
  0024c	8d 45 d8	 lea	 eax, DWORD PTR $T5[ebp]
  0024f	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
  00256	50		 push	 eax
  00257	e8 00 00 00 00	 call	 ?GetTokenBoolean@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAH@Z ; CTextFileLoader::GetTokenBoolean
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0025c	8b 4d ec	 mov	 ecx, DWORD PTR $T5[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 163  : 			if (!rTextFileLoader.GetTokenBoolean("fishingeffectflag", &isFishingEffect))

  0025f	89 45 d4	 mov	 DWORD PTR tv1396[ebp], eax
  00262	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00269	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0026c	76 2f		 jbe	 SHORT $LN339@Load
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0026e	8b 55 d8	 mov	 edx, DWORD PTR $T5[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00271	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00272	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00274	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0027a	72 14		 jb	 SHORT $LN350@Load

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0027c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0027f	83 c1 23	 add	 ecx, 35			; 00000023H
  00282	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00284	83 c0 fc	 add	 eax, -4			; fffffffcH
  00287	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0028a	0f 87 92 00 00
	00		 ja	 $LN392@Load
$LN350@Load:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00290	51		 push	 ecx
  00291	52		 push	 edx
  00292	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00297	8b 45 d4	 mov	 eax, DWORD PTR tv1396[ebp]
  0029a	83 c4 08	 add	 esp, 8
$LN339@Load:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  0029d	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T5[ebp+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  002a4	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T5[ebp+20], 15 ; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  002ab	c6 45 d8 00	 mov	 BYTE PTR $T5[ebp], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 163  : 			if (!rTextFileLoader.GetTokenBoolean("fishingeffectflag", &isFishingEffect))

  002af	85 c0		 test	 eax, eax
  002b1	75 03		 jne	 SHORT $LN5@Load

; 164  : 			{
; 165  : 				isFishingEffect = FALSE;

  002b3	89 47 40	 mov	 DWORD PTR [edi+64], eax
$LN5@Load:

; 166  : 			}
; 167  : 			StringPath(strEffectFileName); // @fixme026

  002b6	56		 push	 esi
  002b7	e8 00 00 00 00	 call	 ?StringPath@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; StringPath
  002bc	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 425  :         const value_type* _Result = _Bx._Buf;

  002bf	8b c6		 mov	 eax, esi

; 434  :         return _Myres > _Small_string_capacity;

  002c1	83 7e 14 0f	 cmp	 DWORD PTR [esi+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  002c5	76 02		 jbe	 SHORT $LN383@Load

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  002c7	8b 06		 mov	 eax, DWORD PTR [esi]
$LN383@Load:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 168  : 			dwEffectIndex = GetCaseCRC32(strEffectFileName.c_str(), strEffectFileName.length());

  002c9	ff 77 28	 push	 DWORD PTR [edi+40]
  002cc	50		 push	 eax
  002cd	e8 00 00 00 00	 call	 ?GetCaseCRC32@@YAKPBDI@Z ; GetCaseCRC32
  002d2	83 c4 08	 add	 esp, 8
  002d5	89 47 14	 mov	 DWORD PTR [edi+20], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  002d8	83 7e 14 0f	 cmp	 DWORD PTR [esi+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  002dc	76 02		 jbe	 SHORT $LN373@Load

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  002de	8b 36		 mov	 esi, DWORD PTR [esi]
$LN373@Load:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 169  : 			CEffectManager::Instance().RegisterEffect(strEffectFileName.c_str()); // @fixme026 outside debug mode

  002e0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCEffectManager@@@@0PAVCEffectManager@@A ; CSingleton<CEffectManager>::ms_singleton
  002e6	6a 00		 push	 0
  002e8	6a 00		 push	 0
  002ea	56		 push	 esi
  002eb	e8 00 00 00 00	 call	 ?RegisterEffect@CEffectManager@@QAEHPBD_N1@Z ; CEffectManager::RegisterEffect

; 170  : 
; 171  : 			return true;

  002f0	b0 01		 mov	 al, 1
  002f2	eb 02		 jmp	 SHORT $LN1@Load
$LN384@Load:

; 158  : 				return false;

  002f4	32 c0		 xor	 al, al
$LN1@Load:

; 172  : 		}

  002f6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002f9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00300	59		 pop	 ecx
  00301	5f		 pop	 edi
  00302	5e		 pop	 esi
  00303	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00306	33 cd		 xor	 ecx, ebp
  00308	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0030d	8b e5		 mov	 esp, ebp
  0030f	5d		 pop	 ebp
  00310	c2 04 00	 ret	 4
$LN389@Load:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00313	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN390@Load:
  00318	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN391@Load:
  0031d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN392@Load:
  00322	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN387@Load:
  00327	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Load@SMotionEventDataEffectToTarget@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Load@SMotionEventDataEffectToTarget@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z$1:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Load@SMotionEventDataEffectToTarget@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z$2:
  00010	8d 4d d8	 lea	 ecx, DWORD PTR $T4[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Load@SMotionEventDataEffectToTarget@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z$3:
  00018	8d 4d d8	 lea	 ecx, DWORD PTR $T5[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
  00024	cc		 int	 3
__ehhandler$?Load@SMotionEventDataEffectToTarget@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z:
  00025	90		 npad	 1
  00026	90		 npad	 1
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002e	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0003b	33 c8		 xor	 ecx, eax
  0003d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00042	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Load@SMotionEventDataEffectToTarget@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z
  00047	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Load@SMotionEventDataEffectToTarget@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z ENDP ; NMotionEvent::SMotionEventDataEffectToTarget::Load
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
;	COMDAT ?Save@SMotionEventDataEffectToTarget@NMotionEvent@@UAEXPAU_iobuf@@H@Z
_TEXT	SEGMENT
_File$ = 8						; size = 4
_iTabs$ = 12						; size = 4
?Save@SMotionEventDataEffectToTarget@NMotionEvent@@UAEXPAU_iobuf@@H@Z PROC ; NMotionEvent::SMotionEventDataEffectToTarget::Save, COMDAT
; _this$ = ecx

; 146  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 147  : 			PrintfTabs(File, iTabs, "\n");

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _File$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 0c	 mov	 edi, DWORD PTR _iTabs$[ebp]
  0000c	8b f1		 mov	 esi, ecx
  0000e	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  00013	57		 push	 edi
  00014	53		 push	 ebx
  00015	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2328 :         return _Mypair._Myval2._Myptr();

  0001a	8d 46 18	 lea	 eax, DWORD PTR [esi+24]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 147  : 			PrintfTabs(File, iTabs, "\n");

  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00020	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  00024	76 02		 jbe	 SHORT $LN7@Save

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00026	8b 00		 mov	 eax, DWORD PTR [eax]
$LN7@Save:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 148  : 			PrintfTabs(File, iTabs, "EffectFileName       \"%s\"\n", strEffectFileName.c_str());

  00028	50		 push	 eax
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@OHMOOLCL@EffectFileName?5?5?5?5?5?5?5?$CC?$CFs?$CC?6@
  0002e	57		 push	 edi
  0002f	53		 push	 ebx
  00030	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs
  00035	f3 0f 10 46 38	 movss	 xmm0, DWORD PTR [esi+56]

; 149  : 			PrintfTabs(File, iTabs, "EffectPosition       %f %f %f\n", v3EffectPosition.x, v3EffectPosition.y, v3EffectPosition.z);

  0003a	0f 5a c0	 cvtps2pd xmm0, xmm0
  0003d	f2 0f 11 44 24
	08		 movsd	 QWORD PTR [esp+8], xmm0
  00043	f3 0f 10 46 34	 movss	 xmm0, DWORD PTR [esi+52]
  00048	0f 5a c0	 cvtps2pd xmm0, xmm0
  0004b	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00050	83 ec 08	 sub	 esp, 8
  00053	f3 0f 10 46 30	 movss	 xmm0, DWORD PTR [esi+48]
  00058	0f 5a c0	 cvtps2pd xmm0, xmm0
  0005b	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00060	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@CFDDPJAK@EffectPosition?5?5?5?5?5?5?5?$CFf?5?$CFf?5?$CFf?6@
  00065	57		 push	 edi
  00066	53		 push	 ebx
  00067	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs

; 150  : 			PrintfTabs(File, iTabs, "FollowingEnable      %d\n", isFollowing);

  0006c	ff 76 3c	 push	 DWORD PTR [esi+60]
  0006f	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@NDNPFOND@FollowingEnable?5?5?5?5?5?5?$CFd?6@
  00074	57		 push	 edi
  00075	53		 push	 ebx
  00076	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs

; 151  : 			PrintfTabs(File, iTabs, "FishingEffectFlag    %d\n", isFishingEffect);

  0007b	ff 76 40	 push	 DWORD PTR [esi+64]
  0007e	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@ECHDEMEM@FishingEffectFlag?5?5?5?5?$CFd?6@
  00083	57		 push	 edi
  00084	53		 push	 ebx
  00085	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs
  0008a	83 c4 44	 add	 esp, 68			; 00000044H
  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	5b		 pop	 ebx

; 152  : 		}

  00090	5d		 pop	 ebp
  00091	c2 08 00	 ret	 8
?Save@SMotionEventDataEffectToTarget@NMotionEvent@@UAEXPAU_iobuf@@H@Z ENDP ; NMotionEvent::SMotionEventDataEffectToTarget::Save
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
;	COMDAT ??1SMotionEventDataEffectToTarget@NMotionEvent@@UAE@XZ
_TEXT	SEGMENT
??1SMotionEventDataEffectToTarget@NMotionEvent@@UAE@XZ PROC ; NMotionEvent::SMotionEventDataEffectToTarget::~SMotionEventDataEffectToTarget, COMDAT
; _this$ = ecx

; 143  : 		virtual ~SMotionEventDataEffectToTarget() {}

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SMotionEventDataEffectToTarget@NMotionEvent@@6B@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00009	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  0000c	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0000f	76 28		 jbe	 SHORT $LN24@SMotionEve
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00011	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00014	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00015	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001b	72 12		 jb	 SHORT $LN35@SMotionEve

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001d	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00020	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00023	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00025	83 c0 fc	 add	 eax, -4			; fffffffcH
  00028	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002b	77 26		 ja	 SHORT $LN32@SMotionEve

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002d	8b c2		 mov	 eax, edx
$LN35@SMotionEve:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0002f	51		 push	 ecx
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00036	83 c4 08	 add	 esp, 8
$LN24@SMotionEve:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00039	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00040	c7 46 2c 0f 00
	00 00		 mov	 DWORD PTR [esi+44], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00047	c6 46 18 00	 mov	 BYTE PTR [esi+24], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 143  : 		virtual ~SMotionEventDataEffectToTarget() {}

  0004b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SMotionEventData@NMotionEvent@@6B@
  00051	5e		 pop	 esi
  00052	c3		 ret	 0
$LN32@SMotionEve:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00053	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN45@SMotionEve:
  00058	cc		 int	 3
??1SMotionEventDataEffectToTarget@NMotionEvent@@UAE@XZ ENDP ; NMotionEvent::SMotionEventDataEffectToTarget::~SMotionEventDataEffectToTarget
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??_GSMotionEventDataEffect@NMotionEvent@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GSMotionEventDataEffect@NMotionEvent@@UAEPAXI@Z PROC	; NMotionEvent::SMotionEventDataEffect::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 92   : 		virtual ~SMotionEventDataEffect() {}

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SMotionEventDataEffect@NMotionEvent@@6B@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0000c	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  0000f	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00012	76 28		 jbe	 SHORT $LN30@scalar
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00014	8b 46 48	 mov	 eax, DWORD PTR [esi+72]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00017	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 12		 jb	 SHORT $LN41@scalar

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00020	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00023	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00026	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00028	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002e	77 7e		 ja	 SHORT $LN76@scalar

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b c2		 mov	 eax, edx
$LN41@scalar:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00039	83 c4 08	 add	 esp, 8
$LN30@scalar:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  0003c	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00043	c7 46 5c 0f 00
	00 00		 mov	 DWORD PTR [esi+92], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0004a	c6 46 48 00	 mov	 BYTE PTR [esi+72], 0

; 434  :         return _Myres > _Small_string_capacity;

  0004e	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  00051	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00054	76 28		 jbe	 SHORT $LN68@scalar
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00056	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00059	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0005a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00060	72 12		 jb	 SHORT $LN79@scalar

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00062	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00065	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00068	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0006a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0006d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00070	77 3c		 ja	 SHORT $LN76@scalar

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00072	8b c2		 mov	 eax, edx
$LN79@scalar:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00074	51		 push	 ecx
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0007b	83 c4 08	 add	 esp, 8
$LN68@scalar:
  0007e	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00082	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00089	c7 46 34 0f 00
	00 00		 mov	 DWORD PTR [esi+52], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00090	c6 46 20 00	 mov	 BYTE PTR [esi+32], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 92   : 		virtual ~SMotionEventDataEffect() {}

  00094	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SMotionEventData@NMotionEvent@@6B@
  0009a	74 0b		 je	 SHORT $LN2@scalar
  0009c	6a 60		 push	 96			; 00000060H
  0009e	56		 push	 esi
  0009f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000a4	83 c4 08	 add	 esp, 8
$LN2@scalar:
  000a7	8b c6		 mov	 eax, esi
  000a9	5e		 pop	 esi
  000aa	5d		 pop	 ebp
  000ab	c2 04 00	 ret	 4
$LN76@scalar:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ae	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN93@scalar:
  000b3	cc		 int	 3
??_GSMotionEventDataEffect@NMotionEvent@@UAEPAXI@Z ENDP	; NMotionEvent::SMotionEventDataEffect::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
;	COMDAT ?Load@SMotionEventDataEffect@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z
_TEXT	SEGMENT
_rTextFileLoader$GSCopy$1$ = -72			; size = 4
tv1985 = -68						; size = 4
tv1987 = -68						; size = 4
tv1988 = -68						; size = 4
tv1991 = -68						; size = 4
$T2 = -64						; size = 24
$T3 = -40						; size = 24
$T4 = -40						; size = 24
$T5 = -40						; size = 24
$T6 = -40						; size = 24
$T7 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rTextFileLoader$ = 8					; size = 4
?Load@SMotionEventDataEffect@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z PROC ; NMotionEvent::SMotionEventDataEffect::Load, COMDAT
; _this$ = ecx

; 105  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Load@SMotionEventDataEffect@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b f9		 mov	 edi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0002c	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_0BA@MCOMBMGO@independentflag@+8
  00031	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 105  : 		{

  00034	8b 4d 08	 mov	 ecx, DWORD PTR _rTextFileLoader$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00037	0f 11 45 d8	 movups	 XMMWORD PTR $T3[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0003b	89 45 e0	 mov	 DWORD PTR $T3[ebp+8], eax
  0003e	66 a1 0c 00 00
	00		 mov	 ax, WORD PTR ??_C@_0BA@MCOMBMGO@independentflag@+12
  00044	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0BA@MCOMBMGO@independentflag@
  0004c	66 89 45 e4	 mov	 WORD PTR $T3[ebp+12], ax
  00050	a0 0e 00 00 00	 mov	 al, BYTE PTR ??_C@_0BA@MCOMBMGO@independentflag@+14
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 105  : 		{

  00055	89 4d b8	 mov	 DWORD PTR _rTextFileLoader$GSCopy$1$[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  00058	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR $T3[ebp+16], 15 ; 0000000fH

; 867  :             _My_data._Myres  = _Small_string_capacity;

  0005f	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 15 ; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00066	66 0f d6 45 d8	 movq	 QWORD PTR $T3[ebp], xmm0
  0006b	88 45 e6	 mov	 BYTE PTR $T3[ebp+14], al
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  0006e	c6 45 e7 00	 mov	 BYTE PTR $T3[ebp+15], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 106  : 			if (!rTextFileLoader.GetTokenBoolean("independentflag", &isIndependent))

  00072	8d 77 1c	 lea	 esi, DWORD PTR [edi+28]
  00075	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0007c	56		 push	 esi
  0007d	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00080	50		 push	 eax
  00081	e8 00 00 00 00	 call	 ?GetTokenBoolean@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAH@Z ; CTextFileLoader::GetTokenBoolean
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00086	8b 4d ec	 mov	 ecx, DWORD PTR $T3[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 106  : 			if (!rTextFileLoader.GetTokenBoolean("independentflag", &isIndependent))

  00089	89 45 bc	 mov	 DWORD PTR tv1991[ebp], eax
  0008c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00093	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00096	76 2f		 jbe	 SHORT $LN85@Load
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00098	8b 55 d8	 mov	 edx, DWORD PTR $T3[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0009b	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0009c	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0009e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000a4	72 14		 jb	 SHORT $LN96@Load

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000a6	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000a9	83 c1 23	 add	 ecx, 35			; 00000023H
  000ac	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ae	83 c0 fc	 add	 eax, -4			; fffffffcH
  000b1	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000b4	0f 87 90 03 00
	00		 ja	 $LN569@Load
$LN96@Load:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000ba	51		 push	 ecx
  000bb	52		 push	 edx
  000bc	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000c1	8b 45 bc	 mov	 eax, DWORD PTR tv1991[ebp]
  000c4	83 c4 08	 add	 esp, 8
$LN85@Load:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 106  : 			if (!rTextFileLoader.GetTokenBoolean("independentflag", &isIndependent))

  000c7	85 c0		 test	 eax, eax
  000c9	75 02		 jne	 SHORT $LN2@Load

; 107  : 				isIndependent = FALSE;

  000cb	89 06		 mov	 DWORD PTR [esi], eax
$LN2@Load:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000cd	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_0BA@HJAHPMOG@attachingenable@+8
  000d2	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000d5	0f 11 45 d8	 movups	 XMMWORD PTR $T4[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d9	89 45 e0	 mov	 DWORD PTR $T4[ebp+8], eax
  000dc	66 a1 0c 00 00
	00		 mov	 ax, WORD PTR ??_C@_0BA@HJAHPMOG@attachingenable@+12
  000e2	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0BA@HJAHPMOG@attachingenable@
  000ea	66 89 45 e4	 mov	 WORD PTR $T4[ebp+12], ax
  000ee	a0 0e 00 00 00	 mov	 al, BYTE PTR ??_C@_0BA@HJAHPMOG@attachingenable@+14
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  000f3	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR $T4[ebp+16], 15 ; 0000000fH

; 867  :             _My_data._Myres  = _Small_string_capacity;

  000fa	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T4[ebp+20], 15 ; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00101	66 0f d6 45 d8	 movq	 QWORD PTR $T4[ebp], xmm0
  00106	88 45 e6	 mov	 BYTE PTR $T4[ebp+14], al
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00109	c6 45 e7 00	 mov	 BYTE PTR $T4[ebp+15], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 108  : 			if (!rTextFileLoader.GetTokenBoolean("attachingenable", &isAttaching))

  0010d	8b 4d b8	 mov	 ecx, DWORD PTR _rTextFileLoader$GSCopy$1$[ebp]
  00110	8d 47 14	 lea	 eax, DWORD PTR [edi+20]
  00113	50		 push	 eax
  00114	8d 45 d8	 lea	 eax, DWORD PTR $T4[ebp]
  00117	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0011e	50		 push	 eax
  0011f	e8 00 00 00 00	 call	 ?GetTokenBoolean@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAH@Z ; CTextFileLoader::GetTokenBoolean
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00124	8b 4d ec	 mov	 ecx, DWORD PTR $T4[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 108  : 			if (!rTextFileLoader.GetTokenBoolean("attachingenable", &isAttaching))

  00127	8b f0		 mov	 esi, eax
  00129	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00130	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00133	76 2c		 jbe	 SHORT $LN171@Load
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00135	8b 55 d8	 mov	 edx, DWORD PTR $T4[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00138	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00139	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0013b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00141	72 14		 jb	 SHORT $LN182@Load

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00143	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00146	83 c1 23	 add	 ecx, 35			; 00000023H
  00149	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0014b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0014e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00151	0f 87 f8 02 00
	00		 ja	 $LN570@Load
$LN182@Load:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00157	51		 push	 ecx
  00158	52		 push	 edx
  00159	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0015e	83 c4 08	 add	 esp, 8
$LN171@Load:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 108  : 			if (!rTextFileLoader.GetTokenBoolean("attachingenable", &isAttaching))

  00161	85 f6		 test	 esi, esi
  00163	0f 84 c2 02 00
	00		 je	 $LN562@Load
  00169	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 498  :     size_type _Mysize = 0; // current length of string (size)

  0016c	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00173	6a 20		 push	 32			; 00000020H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00175	0f 11 45 c0	 movups	 XMMWORD PTR $T2[ebp], xmm0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00179	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00180	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00185	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_0BC@FCIOLNPK@attachingbonename@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0018c	89 45 c0	 mov	 DWORD PTR $T2[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  0018f	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 891  :         _My_data._Mysize = _Count;

  00192	c7 45 d0 11 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 17 ; 00000011H

; 892  :         _My_data._Myres  = _New_capacity;

  00199	c7 45 d4 1f 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 31 ; 0000001fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  001a0	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  001a3	8a 0d 10 00 00
	00		 mov	 cl, BYTE PTR ??_C@_0BC@FCIOLNPK@attachingbonename@+16
  001a9	88 48 10	 mov	 BYTE PTR [eax+16], cl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  001ac	c6 40 11 00	 mov	 BYTE PTR [eax+17], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 110  : 			if (!rTextFileLoader.GetTokenString("attachingbonename", &strAttachingBoneName))

  001b0	8b 4d b8	 mov	 ecx, DWORD PTR _rTextFileLoader$GSCopy$1$[ebp]
  001b3	8d 47 20	 lea	 eax, DWORD PTR [edi+32]
  001b6	50		 push	 eax
  001b7	8d 45 c0	 lea	 eax, DWORD PTR $T2[ebp]
  001ba	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  001c1	50		 push	 eax
  001c2	e8 00 00 00 00	 call	 ?GetTokenString@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV23@@Z ; CTextFileLoader::GetTokenString
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  001c7	8b 4d d4	 mov	 ecx, DWORD PTR $T2[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 110  : 			if (!rTextFileLoader.GetTokenString("attachingbonename", &strAttachingBoneName))

  001ca	8b f0		 mov	 esi, eax
  001cc	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  001d3	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  001d6	76 2c		 jbe	 SHORT $LN257@Load
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001d8	8b 55 c0	 mov	 edx, DWORD PTR $T2[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  001db	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001dc	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  001de	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001e4	72 14		 jb	 SHORT $LN268@Load

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001e6	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  001e9	83 c1 23	 add	 ecx, 35			; 00000023H
  001ec	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001ee	83 c0 fc	 add	 eax, -4			; fffffffcH
  001f1	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001f4	0f 87 5a 02 00
	00		 ja	 $LN571@Load
$LN268@Load:

; 289  :         ::operator delete(_Ptr, _Bytes);

  001fa	51		 push	 ecx
  001fb	52		 push	 edx
  001fc	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00201	83 c4 08	 add	 esp, 8
$LN257@Load:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 110  : 			if (!rTextFileLoader.GetTokenString("attachingbonename", &strAttachingBoneName))

  00204	85 f6		 test	 esi, esi
  00206	0f 84 1f 02 00
	00		 je	 $LN562@Load
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0020c	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_0P@MBGGNLC@effectfilename@+8
  00211	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00214	0f 11 45 d8	 movups	 XMMWORD PTR $T5[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00218	89 45 e0	 mov	 DWORD PTR $T5[ebp+8], eax
  0021b	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0P@MBGGNLC@effectfilename@
  00223	66 a1 0c 00 00
	00		 mov	 ax, WORD PTR ??_C@_0P@MBGGNLC@effectfilename@+12
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  00229	c7 45 e8 0e 00
	00 00		 mov	 DWORD PTR $T5[ebp+16], 14 ; 0000000eH

; 867  :             _My_data._Myres  = _Small_string_capacity;

  00230	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T5[ebp+20], 15 ; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00237	66 0f d6 45 d8	 movq	 QWORD PTR $T5[ebp], xmm0
  0023c	66 89 45 e4	 mov	 WORD PTR $T5[ebp+12], ax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00240	c6 45 e6 00	 mov	 BYTE PTR $T5[ebp+14], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 112  : 			if (!rTextFileLoader.GetTokenString("effectfilename", &strEffectFileName))

  00244	8b 4d b8	 mov	 ecx, DWORD PTR _rTextFileLoader$GSCopy$1$[ebp]
  00247	8d 77 48	 lea	 esi, DWORD PTR [edi+72]
  0024a	56		 push	 esi
  0024b	8d 45 d8	 lea	 eax, DWORD PTR $T5[ebp]
  0024e	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
  00255	50		 push	 eax
  00256	e8 00 00 00 00	 call	 ?GetTokenString@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV23@@Z ; CTextFileLoader::GetTokenString
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0025b	8b 4d ec	 mov	 ecx, DWORD PTR $T5[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 112  : 			if (!rTextFileLoader.GetTokenString("effectfilename", &strEffectFileName))

  0025e	89 45 bc	 mov	 DWORD PTR tv1988[ebp], eax
  00261	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00268	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0026b	76 2f		 jbe	 SHORT $LN343@Load
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0026d	8b 55 d8	 mov	 edx, DWORD PTR $T5[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00270	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00271	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00273	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00279	72 14		 jb	 SHORT $LN354@Load

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0027b	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0027e	83 c1 23	 add	 ecx, 35			; 00000023H
  00281	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00283	83 c0 fc	 add	 eax, -4			; fffffffcH
  00286	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00289	0f 87 ca 01 00
	00		 ja	 $LN572@Load
$LN354@Load:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0028f	51		 push	 ecx
  00290	52		 push	 edx
  00291	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00296	8b 45 bc	 mov	 eax, DWORD PTR tv1988[ebp]
  00299	83 c4 08	 add	 esp, 8
$LN343@Load:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 112  : 			if (!rTextFileLoader.GetTokenString("effectfilename", &strEffectFileName))

  0029c	85 c0		 test	 eax, eax
  0029e	0f 84 87 01 00
	00		 je	 $LN562@Load
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  002a4	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_0P@PMGDNJPL@effectposition@+8
  002a9	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  002ac	0f 11 45 d8	 movups	 XMMWORD PTR $T6[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  002b0	89 45 e0	 mov	 DWORD PTR $T6[ebp+8], eax
  002b3	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0P@PMGDNJPL@effectposition@
  002bb	66 a1 0c 00 00
	00		 mov	 ax, WORD PTR ??_C@_0P@PMGDNJPL@effectposition@+12
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  002c1	c7 45 e8 0e 00
	00 00		 mov	 DWORD PTR $T6[ebp+16], 14 ; 0000000eH

; 867  :             _My_data._Myres  = _Small_string_capacity;

  002c8	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T6[ebp+20], 15 ; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  002cf	66 0f d6 45 d8	 movq	 QWORD PTR $T6[ebp], xmm0
  002d4	66 89 45 e4	 mov	 WORD PTR $T6[ebp+12], ax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  002d8	c6 45 e6 00	 mov	 BYTE PTR $T6[ebp+14], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 114  : 			if (!rTextFileLoader.GetTokenPosition("effectposition", &v3EffectPosition))

  002dc	8b 4d b8	 mov	 ecx, DWORD PTR _rTextFileLoader$GSCopy$1$[ebp]
  002df	8d 47 38	 lea	 eax, DWORD PTR [edi+56]
  002e2	50		 push	 eax
  002e3	8d 45 d8	 lea	 eax, DWORD PTR $T6[ebp]
  002e6	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 4
  002ed	50		 push	 eax
  002ee	e8 00 00 00 00	 call	 ?GetTokenPosition@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXVECTOR3@@@Z ; CTextFileLoader::GetTokenPosition
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  002f3	8b 4d ec	 mov	 ecx, DWORD PTR $T6[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 114  : 			if (!rTextFileLoader.GetTokenPosition("effectposition", &v3EffectPosition))

  002f6	89 45 bc	 mov	 DWORD PTR tv1987[ebp], eax
  002f9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00300	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00303	76 2f		 jbe	 SHORT $LN429@Load
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00305	8b 55 d8	 mov	 edx, DWORD PTR $T6[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00308	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00309	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0030b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00311	72 14		 jb	 SHORT $LN440@Load

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00313	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00316	83 c1 23	 add	 ecx, 35			; 00000023H
  00319	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0031b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0031e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00321	0f 87 37 01 00
	00		 ja	 $LN573@Load
$LN440@Load:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00327	51		 push	 ecx
  00328	52		 push	 edx
  00329	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0032e	8b 45 bc	 mov	 eax, DWORD PTR tv1987[ebp]
  00331	83 c4 08	 add	 esp, 8
$LN429@Load:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 114  : 			if (!rTextFileLoader.GetTokenPosition("effectposition", &v3EffectPosition))

  00334	85 c0		 test	 eax, eax
  00336	0f 84 ef 00 00
	00		 je	 $LN562@Load
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0033c	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_0BA@DEKLACIK@followingenable@+8
  00341	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00344	0f 11 45 d8	 movups	 XMMWORD PTR $T7[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00348	89 45 e0	 mov	 DWORD PTR $T7[ebp+8], eax
  0034b	66 a1 0c 00 00
	00		 mov	 ax, WORD PTR ??_C@_0BA@DEKLACIK@followingenable@+12
  00351	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0BA@DEKLACIK@followingenable@
  00359	66 89 45 e4	 mov	 WORD PTR $T7[ebp+12], ax
  0035d	a0 0e 00 00 00	 mov	 al, BYTE PTR ??_C@_0BA@DEKLACIK@followingenable@+14
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  00362	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR $T7[ebp+16], 15 ; 0000000fH

; 867  :             _My_data._Myres  = _Small_string_capacity;

  00369	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T7[ebp+20], 15 ; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00370	66 0f d6 45 d8	 movq	 QWORD PTR $T7[ebp], xmm0
  00375	88 45 e6	 mov	 BYTE PTR $T7[ebp+14], al
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00378	c6 45 e7 00	 mov	 BYTE PTR $T7[ebp+15], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 116  : 			if (!rTextFileLoader.GetTokenBoolean("followingenable", &isFollowing))

  0037c	8b 4d b8	 mov	 ecx, DWORD PTR _rTextFileLoader$GSCopy$1$[ebp]
  0037f	8d 47 18	 lea	 eax, DWORD PTR [edi+24]
  00382	50		 push	 eax
  00383	8d 45 d8	 lea	 eax, DWORD PTR $T7[ebp]
  00386	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 5
  0038d	50		 push	 eax
  0038e	e8 00 00 00 00	 call	 ?GetTokenBoolean@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAH@Z ; CTextFileLoader::GetTokenBoolean
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00393	8b 4d ec	 mov	 ecx, DWORD PTR $T7[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 116  : 			if (!rTextFileLoader.GetTokenBoolean("followingenable", &isFollowing))

  00396	89 45 bc	 mov	 DWORD PTR tv1985[ebp], eax
  00399	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  003a0	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  003a3	76 2f		 jbe	 SHORT $LN515@Load
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  003a5	8b 55 d8	 mov	 edx, DWORD PTR $T7[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  003a8	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  003a9	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  003ab	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  003b1	72 14		 jb	 SHORT $LN526@Load

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  003b3	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  003b6	83 c1 23	 add	 ecx, 35			; 00000023H
  003b9	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  003bb	83 c0 fc	 add	 eax, -4			; fffffffcH
  003be	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  003c1	0f 87 9c 00 00
	00		 ja	 $LN574@Load
$LN526@Load:

; 289  :         ::operator delete(_Ptr, _Bytes);

  003c7	51		 push	 ecx
  003c8	52		 push	 edx
  003c9	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  003ce	8b 45 bc	 mov	 eax, DWORD PTR tv1985[ebp]
  003d1	83 c4 08	 add	 esp, 8
$LN515@Load:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  003d4	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T7[ebp+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  003db	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T7[ebp+20], 15 ; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  003e2	c6 45 d8 00	 mov	 BYTE PTR $T7[ebp], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 116  : 			if (!rTextFileLoader.GetTokenBoolean("followingenable", &isFollowing))

  003e6	85 c0		 test	 eax, eax
  003e8	75 03		 jne	 SHORT $LN7@Load

; 117  : 			{
; 118  : 				isFollowing = FALSE;

  003ea	89 47 18	 mov	 DWORD PTR [edi+24], eax
$LN7@Load:

; 119  : 			}
; 120  : 			StringPath(strEffectFileName); // @fixme026

  003ed	56		 push	 esi
  003ee	e8 00 00 00 00	 call	 ?StringPath@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; StringPath
  003f3	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 425  :         const value_type* _Result = _Bx._Buf;

  003f6	8b c6		 mov	 eax, esi

; 434  :         return _Myres > _Small_string_capacity;

  003f8	83 7e 14 0f	 cmp	 DWORD PTR [esi+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  003fc	76 02		 jbe	 SHORT $LN561@Load

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  003fe	8b 06		 mov	 eax, DWORD PTR [esi]
$LN561@Load:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 121  : 			dwEffectIndex = GetCaseCRC32(strEffectFileName.c_str(), strEffectFileName.length());

  00400	ff 77 58	 push	 DWORD PTR [edi+88]
  00403	50		 push	 eax
  00404	e8 00 00 00 00	 call	 ?GetCaseCRC32@@YAKPBDI@Z ; GetCaseCRC32
  00409	83 c4 08	 add	 esp, 8
  0040c	89 47 44	 mov	 DWORD PTR [edi+68], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0040f	83 7e 14 0f	 cmp	 DWORD PTR [esi+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  00413	76 02		 jbe	 SHORT $LN549@Load

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00415	8b 36		 mov	 esi, DWORD PTR [esi]
$LN549@Load:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 122  : 			CEffectManager::Instance().RegisterEffect(strEffectFileName.c_str());

  00417	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCEffectManager@@@@0PAVCEffectManager@@A ; CSingleton<CEffectManager>::ms_singleton
  0041d	6a 00		 push	 0
  0041f	6a 00		 push	 0
  00421	56		 push	 esi
  00422	e8 00 00 00 00	 call	 ?RegisterEffect@CEffectManager@@QAEHPBD_N1@Z ; CEffectManager::RegisterEffect

; 123  : 
; 124  : 			return true;

  00427	b0 01		 mov	 al, 1
  00429	eb 02		 jmp	 SHORT $LN1@Load
$LN562@Load:

; 115  : 				return false;

  0042b	32 c0		 xor	 al, al
$LN1@Load:

; 125  : 		}

  0042d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00430	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00437	59		 pop	 ecx
  00438	5f		 pop	 edi
  00439	5e		 pop	 esi
  0043a	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0043d	33 cd		 xor	 ecx, ebp
  0043f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00444	8b e5		 mov	 esp, ebp
  00446	5d		 pop	 ebp
  00447	c2 04 00	 ret	 4
$LN569@Load:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0044a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN570@Load:
  0044f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN571@Load:
  00454	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN572@Load:
  00459	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN573@Load:
  0045e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN574@Load:
  00463	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN567@Load:
  00468	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Load@SMotionEventDataEffect@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Load@SMotionEventDataEffect@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z$1:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR $T4[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Load@SMotionEventDataEffect@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z$2:
  00010	8d 4d c0	 lea	 ecx, DWORD PTR $T2[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Load@SMotionEventDataEffect@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z$3:
  00018	8d 4d d8	 lea	 ecx, DWORD PTR $T5[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Load@SMotionEventDataEffect@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z$4:
  00020	8d 4d d8	 lea	 ecx, DWORD PTR $T6[ebp]
  00023	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Load@SMotionEventDataEffect@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z$5:
  00028	8d 4d d8	 lea	 ecx, DWORD PTR $T7[ebp]
  0002b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00030	cc		 int	 3
  00031	cc		 int	 3
  00032	cc		 int	 3
  00033	cc		 int	 3
  00034	cc		 int	 3
__ehhandler$?Load@SMotionEventDataEffect@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z:
  00035	90		 npad	 1
  00036	90		 npad	 1
  00037	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0003b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003e	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  00041	33 c8		 xor	 ecx, eax
  00043	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00048	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0004b	33 c8		 xor	 ecx, eax
  0004d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00052	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Load@SMotionEventDataEffect@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z
  00057	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Load@SMotionEventDataEffect@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z ENDP ; NMotionEvent::SMotionEventDataEffect::Load
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
;	COMDAT ?Save@SMotionEventDataEffect@NMotionEvent@@UAEXPAU_iobuf@@H@Z
_TEXT	SEGMENT
_File$ = 8						; size = 4
_iTabs$ = 12						; size = 4
?Save@SMotionEventDataEffect@NMotionEvent@@UAEXPAU_iobuf@@H@Z PROC ; NMotionEvent::SMotionEventDataEffect::Save, COMDAT
; _this$ = ecx

; 95   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 96   : 			PrintfTabs(File, iTabs, "\n");

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _File$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 0c	 mov	 edi, DWORD PTR _iTabs$[ebp]
  0000c	8b f1		 mov	 esi, ecx
  0000e	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  00013	57		 push	 edi
  00014	53		 push	 ebx
  00015	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs

; 97   : 			PrintfTabs(File, iTabs, "IndependentFlag      %d\n", isIndependent);

  0001a	ff 76 1c	 push	 DWORD PTR [esi+28]
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@EFAIBPHL@IndependentFlag?5?5?5?5?5?5?$CFd?6@
  00022	57		 push	 edi
  00023	53		 push	 ebx
  00024	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs

; 98   : 			PrintfTabs(File, iTabs, "AttachingEnable      %d\n", isAttaching);

  00029	ff 76 14	 push	 DWORD PTR [esi+20]
  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@LAKEIKLD@AttachingEnable?5?5?5?5?5?5?$CFd?6@
  00031	57		 push	 edi
  00032	53		 push	 ebx
  00033	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2328 :         return _Mypair._Myval2._Myptr();

  00038	8d 46 20	 lea	 eax, DWORD PTR [esi+32]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 98   : 			PrintfTabs(File, iTabs, "AttachingEnable      %d\n", isAttaching);

  0003b	83 c4 2c	 add	 esp, 44			; 0000002cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0003e	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  00042	76 02		 jbe	 SHORT $LN7@Save

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00044	8b 00		 mov	 eax, DWORD PTR [eax]
$LN7@Save:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 99   : 			PrintfTabs(File, iTabs, "AttachingBoneName    \"%s\"\n", strAttachingBoneName.c_str());

  00046	50		 push	 eax
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@PLABIPOF@AttachingBoneName?5?5?5?5?$CC?$CFs?$CC?6@
  0004c	57		 push	 edi
  0004d	53		 push	 ebx
  0004e	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs

; 100  : 			PrintfTabs(File, iTabs, "FollowingEnable      %d\n", isFollowing);

  00053	ff 76 18	 push	 DWORD PTR [esi+24]
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@NDNPFOND@FollowingEnable?5?5?5?5?5?5?$CFd?6@
  0005b	57		 push	 edi
  0005c	53		 push	 ebx
  0005d	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2328 :         return _Mypair._Myval2._Myptr();

  00062	8d 46 48	 lea	 eax, DWORD PTR [esi+72]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 100  : 			PrintfTabs(File, iTabs, "FollowingEnable      %d\n", isFollowing);

  00065	83 c4 20	 add	 esp, 32			; 00000020H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00068	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  0006c	76 02		 jbe	 SHORT $LN17@Save

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0006e	8b 00		 mov	 eax, DWORD PTR [eax]
$LN17@Save:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 101  : 			PrintfTabs(File, iTabs, "EffectFileName       \"%s\"\n", strEffectFileName.c_str());

  00070	50		 push	 eax
  00071	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@OHMOOLCL@EffectFileName?5?5?5?5?5?5?5?$CC?$CFs?$CC?6@
  00076	57		 push	 edi
  00077	53		 push	 ebx
  00078	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs
  0007d	f3 0f 10 46 40	 movss	 xmm0, DWORD PTR [esi+64]

; 102  : 			PrintfTabs(File, iTabs, "EffectPosition       %f %f %f\n", v3EffectPosition.x, v3EffectPosition.y, v3EffectPosition.z);

  00082	0f 5a c0	 cvtps2pd xmm0, xmm0
  00085	f2 0f 11 44 24
	08		 movsd	 QWORD PTR [esp+8], xmm0
  0008b	f3 0f 10 46 3c	 movss	 xmm0, DWORD PTR [esi+60]
  00090	0f 5a c0	 cvtps2pd xmm0, xmm0
  00093	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00098	83 ec 08	 sub	 esp, 8
  0009b	f3 0f 10 46 38	 movss	 xmm0, DWORD PTR [esi+56]
  000a0	0f 5a c0	 cvtps2pd xmm0, xmm0
  000a3	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000a8	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@CFDDPJAK@EffectPosition?5?5?5?5?5?5?5?$CFf?5?$CFf?5?$CFf?6@
  000ad	57		 push	 edi
  000ae	53		 push	 ebx
  000af	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs
  000b4	83 c4 24	 add	 esp, 36			; 00000024H
  000b7	5f		 pop	 edi
  000b8	5e		 pop	 esi
  000b9	5b		 pop	 ebx

; 103  : 		}

  000ba	5d		 pop	 ebp
  000bb	c2 08 00	 ret	 8
?Save@SMotionEventDataEffect@NMotionEvent@@UAEXPAU_iobuf@@H@Z ENDP ; NMotionEvent::SMotionEventDataEffect::Save
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
;	COMDAT ??1SMotionEventDataEffect@NMotionEvent@@UAE@XZ
_TEXT	SEGMENT
??1SMotionEventDataEffect@NMotionEvent@@UAE@XZ PROC	; NMotionEvent::SMotionEventDataEffect::~SMotionEventDataEffect, COMDAT
; _this$ = ecx

; 92   : 		virtual ~SMotionEventDataEffect() {}

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SMotionEventDataEffect@NMotionEvent@@6B@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00009	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  0000c	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0000f	76 28		 jbe	 SHORT $LN24@SMotionEve
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00011	8b 46 48	 mov	 eax, DWORD PTR [esi+72]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00014	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00015	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001b	72 12		 jb	 SHORT $LN35@SMotionEve

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001d	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00020	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00023	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00025	83 c0 fc	 add	 eax, -4			; fffffffcH
  00028	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002b	77 68		 ja	 SHORT $LN70@SMotionEve

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002d	8b c2		 mov	 eax, edx
$LN35@SMotionEve:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0002f	51		 push	 ecx
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00036	83 c4 08	 add	 esp, 8
$LN24@SMotionEve:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00039	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00040	c7 46 5c 0f 00
	00 00		 mov	 DWORD PTR [esi+92], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00047	c6 46 48 00	 mov	 BYTE PTR [esi+72], 0

; 434  :         return _Myres > _Small_string_capacity;

  0004b	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  0004e	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00051	76 28		 jbe	 SHORT $LN62@SMotionEve
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00053	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00056	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00057	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0005d	72 12		 jb	 SHORT $LN73@SMotionEve

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0005f	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00062	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00065	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00067	83 c0 fc	 add	 eax, -4			; fffffffcH
  0006a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0006d	77 26		 ja	 SHORT $LN70@SMotionEve

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0006f	8b c2		 mov	 eax, edx
$LN73@SMotionEve:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00071	51		 push	 ecx
  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00078	83 c4 08	 add	 esp, 8
$LN62@SMotionEve:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  0007b	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00082	c7 46 34 0f 00
	00 00		 mov	 DWORD PTR [esi+52], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00089	c6 46 20 00	 mov	 BYTE PTR [esi+32], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 92   : 		virtual ~SMotionEventDataEffect() {}

  0008d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SMotionEventData@NMotionEvent@@6B@
  00093	5e		 pop	 esi
  00094	c3		 ret	 0
$LN70@SMotionEve:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00095	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN85@SMotionEve:
  0009a	cc		 int	 3
??1SMotionEventDataEffect@NMotionEvent@@UAE@XZ ENDP	; NMotionEvent::SMotionEventDataEffect::~SMotionEventDataEffect
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GSMotionEventDataScreenWaving@NMotionEvent@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GSMotionEventDataScreenWaving@NMotionEvent@@UAEPAXI@Z PROC ; NMotionEvent::SMotionEventDataScreenWaving::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SMotionEventData@NMotionEvent@@6B@
  00010	74 0b		 je	 SHORT $LN5@scalar
  00012	6a 1c		 push	 28			; 0000001cH
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_GSMotionEventDataScreenWaving@NMotionEvent@@UAEPAXI@Z ENDP ; NMotionEvent::SMotionEventDataScreenWaving::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
;	COMDAT ?Load@SMotionEventDataScreenWaving@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z
_TEXT	SEGMENT
_rTextFileLoader$GSCopy$1$ = -44			; size = 4
$T2 = -40						; size = 24
$T3 = -40						; size = 24
$T4 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rTextFileLoader$ = 8					; size = 4
?Load@SMotionEventDataScreenWaving@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z PROC ; NMotionEvent::SMotionEventDataScreenWaving::Load, COMDAT
; _this$ = ecx

; 48   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Load@SMotionEventDataScreenWaving@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b f9		 mov	 edi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0002c	66 a1 08 00 00
	00		 mov	 ax, WORD PTR ??_C@_0L@KJGFIEPL@duringtime@+8
  00032	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 48   : 		{

  00035	8b 4d 08	 mov	 ecx, DWORD PTR _rTextFileLoader$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00038	0f 11 45 d8	 movups	 XMMWORD PTR $T2[ebp], xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 48   : 		{

  0003c	89 4d d4	 mov	 DWORD PTR _rTextFileLoader$GSCopy$1$[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0003f	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0L@KJGFIEPL@duringtime@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  00047	c7 45 e8 0a 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 10 ; 0000000aH

; 867  :             _My_data._Myres  = _Small_string_capacity;

  0004e	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 15 ; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00055	66 0f d6 45 d8	 movq	 QWORD PTR $T2[ebp], xmm0
  0005a	66 89 45 e0	 mov	 WORD PTR $T2[ebp+8], ax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  0005e	c6 45 e2 00	 mov	 BYTE PTR $T2[ebp+10], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 49   : 			if (!rTextFileLoader.GetTokenFloat("duringtime", &fDurationTime))

  00062	8d 47 10	 lea	 eax, DWORD PTR [edi+16]
  00065	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006c	50		 push	 eax
  0006d	8d 45 d8	 lea	 eax, DWORD PTR $T2[ebp]
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ?GetTokenFloat@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAM@Z ; CTextFileLoader::GetTokenFloat
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00076	8b 4d ec	 mov	 ecx, DWORD PTR $T2[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 49   : 			if (!rTextFileLoader.GetTokenFloat("duringtime", &fDurationTime))

  00079	8b f0		 mov	 esi, eax
  0007b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00082	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00085	76 2c		 jbe	 SHORT $LN79@Load
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00087	8b 55 d8	 mov	 edx, DWORD PTR $T2[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0008a	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008b	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0008d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00093	72 14		 jb	 SHORT $LN90@Load

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00095	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00098	83 c1 23	 add	 ecx, 35			; 00000023H
  0009b	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0009d	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a0	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a3	0f 87 41 01 00
	00		 ja	 $LN276@Load
$LN90@Load:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000a9	51		 push	 ecx
  000aa	52		 push	 edx
  000ab	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000b0	83 c4 08	 add	 esp, 8
$LN79@Load:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 49   : 			if (!rTextFileLoader.GetTokenFloat("duringtime", &fDurationTime))

  000b3	85 f6		 test	 esi, esi
  000b5	0f 84 10 01 00
	00		 je	 $LN271@Load
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000bb	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05PLIADJJL@power@
  000c0	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000c3	0f 11 45 d8	 movups	 XMMWORD PTR $T3[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c7	89 45 d8	 mov	 DWORD PTR $T3[ebp], eax
  000ca	a0 04 00 00 00	 mov	 al, BYTE PTR ??_C@_05PLIADJJL@power@+4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  000cf	c7 45 e8 05 00
	00 00		 mov	 DWORD PTR $T3[ebp+16], 5

; 867  :             _My_data._Myres  = _Small_string_capacity;

  000d6	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 15 ; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000dd	88 45 dc	 mov	 BYTE PTR $T3[ebp+4], al
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  000e0	c6 45 dd 00	 mov	 BYTE PTR $T3[ebp+5], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 51   : 			if (!rTextFileLoader.GetTokenInteger("power", &iPower))

  000e4	8b 4d d4	 mov	 ecx, DWORD PTR _rTextFileLoader$GSCopy$1$[ebp]
  000e7	8d 47 14	 lea	 eax, DWORD PTR [edi+20]
  000ea	50		 push	 eax
  000eb	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  000ee	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  000f5	50		 push	 eax
  000f6	e8 00 00 00 00	 call	 ?GetTokenInteger@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAH@Z ; CTextFileLoader::GetTokenInteger
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  000fb	8b 4d ec	 mov	 ecx, DWORD PTR $T3[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 51   : 			if (!rTextFileLoader.GetTokenInteger("power", &iPower))

  000fe	8b f0		 mov	 esi, eax
  00100	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00107	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0010a	76 2c		 jbe	 SHORT $LN165@Load
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0010c	8b 55 d8	 mov	 edx, DWORD PTR $T3[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0010f	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00110	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00112	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00118	72 14		 jb	 SHORT $LN176@Load

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0011a	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0011d	83 c1 23	 add	 ecx, 35			; 00000023H
  00120	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00122	83 c0 fc	 add	 eax, -4			; fffffffcH
  00125	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00128	0f 87 c1 00 00
	00		 ja	 $LN277@Load
$LN176@Load:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0012e	51		 push	 ecx
  0012f	52		 push	 edx
  00130	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00135	83 c4 08	 add	 esp, 8
$LN165@Load:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 51   : 			if (!rTextFileLoader.GetTokenInteger("power", &iPower))

  00138	85 f6		 test	 esi, esi
  0013a	0f 84 8b 00 00
	00		 je	 $LN271@Load
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00140	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_0P@JIGGKKJB@affectingrange@+8
  00145	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00148	0f 11 45 d8	 movups	 XMMWORD PTR $T4[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0014c	89 45 e0	 mov	 DWORD PTR $T4[ebp+8], eax
  0014f	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0P@JIGGKKJB@affectingrange@
  00157	66 a1 0c 00 00
	00		 mov	 ax, WORD PTR ??_C@_0P@JIGGKKJB@affectingrange@+12
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  0015d	c7 45 e8 0e 00
	00 00		 mov	 DWORD PTR $T4[ebp+16], 14 ; 0000000eH

; 867  :             _My_data._Myres  = _Small_string_capacity;

  00164	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T4[ebp+20], 15 ; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0016b	66 0f d6 45 d8	 movq	 QWORD PTR $T4[ebp], xmm0
  00170	66 89 45 e4	 mov	 WORD PTR $T4[ebp+12], ax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00174	c6 45 e6 00	 mov	 BYTE PTR $T4[ebp+14], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 53   : 			if (!rTextFileLoader.GetTokenInteger("affectingrange", &iAffectingRange))

  00178	8b 4d d4	 mov	 ecx, DWORD PTR _rTextFileLoader$GSCopy$1$[ebp]
  0017b	8d 77 18	 lea	 esi, DWORD PTR [edi+24]
  0017e	56		 push	 esi
  0017f	8d 45 d8	 lea	 eax, DWORD PTR $T4[ebp]
  00182	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  00189	50		 push	 eax
  0018a	e8 00 00 00 00	 call	 ?GetTokenInteger@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAH@Z ; CTextFileLoader::GetTokenInteger
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0018f	8b 4d ec	 mov	 ecx, DWORD PTR $T4[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 53   : 			if (!rTextFileLoader.GetTokenInteger("affectingrange", &iAffectingRange))

  00192	8b f8		 mov	 edi, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00194	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00197	76 28		 jbe	 SHORT $LN251@Load
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00199	8b 55 d8	 mov	 edx, DWORD PTR $T4[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0019c	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0019d	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0019f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001a5	72 10		 jb	 SHORT $LN262@Load

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001a7	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  001aa	83 c1 23	 add	 ecx, 35			; 00000023H
  001ad	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001af	83 c0 fc	 add	 eax, -4			; fffffffcH
  001b2	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001b5	77 3d		 ja	 SHORT $LN278@Load
$LN262@Load:

; 289  :         ::operator delete(_Ptr, _Bytes);

  001b7	51		 push	 ecx
  001b8	52		 push	 edx
  001b9	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001be	83 c4 08	 add	 esp, 8
$LN251@Load:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h

; 53   : 			if (!rTextFileLoader.GetTokenInteger("affectingrange", &iAffectingRange))

  001c1	85 ff		 test	 edi, edi
  001c3	75 02		 jne	 SHORT $LN4@Load

; 54   : 				iAffectingRange = 0;

  001c5	89 3e		 mov	 DWORD PTR [esi], edi
$LN4@Load:

; 55   : 
; 56   : 			return true;

  001c7	b0 01		 mov	 al, 1
  001c9	eb 02		 jmp	 SHORT $LN1@Load
$LN271@Load:

; 52   : 				return false;

  001cb	32 c0		 xor	 al, al
$LN1@Load:

; 57   : 		}

  001cd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001d0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001d7	59		 pop	 ecx
  001d8	5f		 pop	 edi
  001d9	5e		 pop	 esi
  001da	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001dd	33 cd		 xor	 ecx, ebp
  001df	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e4	8b e5		 mov	 esp, ebp
  001e6	5d		 pop	 ebp
  001e7	c2 04 00	 ret	 4
$LN276@Load:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001ea	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN277@Load:
  001ef	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN278@Load:
  001f4	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN274@Load:
  001f9	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Load@SMotionEventDataScreenWaving@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Load@SMotionEventDataScreenWaving@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z$1:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Load@SMotionEventDataScreenWaving@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z$2:
  00010	8d 4d d8	 lea	 ecx, DWORD PTR $T4[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
__ehhandler$?Load@SMotionEventDataScreenWaving@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z:
  0001d	90		 npad	 1
  0001e	90		 npad	 1
  0001f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00023	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00026	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Load@SMotionEventDataScreenWaving@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z
  0003f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Load@SMotionEventDataScreenWaving@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z ENDP ; NMotionEvent::SMotionEventDataScreenWaving::Load
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
;	COMDAT ?Save@SMotionEventDataScreenWaving@NMotionEvent@@UAEXPAU_iobuf@@H@Z
_TEXT	SEGMENT
_File$ = 8						; size = 4
_iTabs$ = 12						; size = 4
?Save@SMotionEventDataScreenWaving@NMotionEvent@@UAEXPAU_iobuf@@H@Z PROC ; NMotionEvent::SMotionEventDataScreenWaving::Save, COMDAT
; _this$ = ecx

; 41   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 42   : 			PrintfTabs(File, iTabs, "\n");

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR _iTabs$[ebp]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR _File$[ebp]
  0000b	57		 push	 edi
  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	8b f9		 mov	 edi, ecx
  00015	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs
  0001a	f3 0f 10 47 10	 movss	 xmm0, DWORD PTR [edi+16]

; 43   : 			PrintfTabs(File, iTabs, "DuringTime           %f\n", fDurationTime);

  0001f	83 c4 04	 add	 esp, 4
  00022	0f 5a c0	 cvtps2pd xmm0, xmm0
  00025	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@JOLNCGNF@DuringTime?5?5?5?5?5?5?5?5?5?5?5?$CFf?6@
  0002f	53		 push	 ebx
  00030	56		 push	 esi
  00031	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs

; 44   : 			PrintfTabs(File, iTabs, "Power                %d\n", iPower);

  00036	ff 77 14	 push	 DWORD PTR [edi+20]
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@FEKHNOBC@Power?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?$CFd?6@
  0003e	53		 push	 ebx
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs

; 45   : 			PrintfTabs(File, iTabs, "AffectingRange       %d\n", iAffectingRange);

  00045	ff 77 18	 push	 DWORD PTR [edi+24]
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@KLBKOEEF@AffectingRange?5?5?5?5?5?5?5?$CFd?6@
  0004d	53		 push	 ebx
  0004e	56		 push	 esi
  0004f	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs
  00054	83 c4 34	 add	 esp, 52			; 00000034H
  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx

; 46   : 		}

  0005a	5d		 pop	 ebp
  0005b	c2 08 00	 ret	 8
?Save@SMotionEventDataScreenWaving@NMotionEvent@@UAEXPAU_iobuf@@H@Z ENDP ; NMotionEvent::SMotionEventDataScreenWaving::Save
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
;	COMDAT ??1SMotionEventDataScreenWaving@NMotionEvent@@UAE@XZ
_TEXT	SEGMENT
??1SMotionEventDataScreenWaving@NMotionEvent@@UAE@XZ PROC ; NMotionEvent::SMotionEventDataScreenWaving::~SMotionEventDataScreenWaving, COMDAT
; _this$ = ecx

; 38   : 		virtual ~SMotionEventDataScreenWaving() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7SMotionEventData@NMotionEvent@@6B@
  00006	c3		 ret	 0
??1SMotionEventDataScreenWaving@NMotionEvent@@UAE@XZ ENDP ; NMotionEvent::SMotionEventDataScreenWaving::~SMotionEventDataScreenWaving
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GSMotionEventData@NMotionEvent@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GSMotionEventData@NMotionEvent@@UAEPAXI@Z PROC	; NMotionEvent::SMotionEventData::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SMotionEventData@NMotionEvent@@6B@
  00010	74 0b		 je	 SHORT $LN5@scalar
  00012	6a 14		 push	 20			; 00000014H
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_GSMotionEventData@NMotionEvent@@UAEPAXI@Z ENDP	; NMotionEvent::SMotionEventData::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
;	COMDAT ?Load@SMotionEventData@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z
_TEXT	SEGMENT
_rTextFileLoader$ = 8					; size = 4
?Load@SMotionEventData@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z PROC ; NMotionEvent::SMotionEventData::Load, COMDAT
; _this$ = ecx

; 24   : 		virtual bool Load(CTextFileLoader & rTextFileLoader) { return true; }

  00000	b0 01		 mov	 al, 1
  00002	c2 04 00	 ret	 4
?Load@SMotionEventData@NMotionEvent@@UAE_NAAVCTextFileLoader@@@Z ENDP ; NMotionEvent::SMotionEventData::Load
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionDataEvent.h
;	COMDAT ??1SMotionEventData@NMotionEvent@@UAE@XZ
_TEXT	SEGMENT
??1SMotionEventData@NMotionEvent@@UAE@XZ PROC		; NMotionEvent::SMotionEventData::~SMotionEventData, COMDAT
; _this$ = ecx

; 21   : 		virtual ~SMotionEventData() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7SMotionEventData@NMotionEvent@@6B@
  00006	c3		 ret	 0
??1SMotionEventData@NMotionEvent@@UAE@XZ ENDP		; NMotionEvent::SMotionEventData::~SMotionEventData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??1?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@QAE@XZ PROC ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::~vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >, COMDAT
; _this$ = ecx

; 814  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 6d		 je	 SHORT $LN5@vector
  00009	57		 push	 edi

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);

  0000a	56		 push	 esi
  0000b	ff 76 04	 push	 DWORD PTR [esi+4]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAXPAUSSoundInstance@NSound@@QAU12@AAV?$allocator@USSoundInstance@NSound@@@0@@Z ; std::_Destroy_range<std::allocator<NSound::SSoundInstance> >

; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00014	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00017	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0001c	8b 3e		 mov	 edi, DWORD PTR [esi]
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00021	2b cf		 sub	 ecx, edi
  00023	f7 e9		 imul	 ecx
  00025	03 d1		 add	 edx, ecx
  00027	c1 fa 04	 sar	 edx, 4
  0002a	8b c2		 mov	 eax, edx
  0002c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0002f	03 c2		 add	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00031	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  00038	2b c8		 sub	 ecx, eax
  0003a	c1 e1 02	 shl	 ecx, 2

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0003d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00043	72 12		 jb	 SHORT $LN24@vector

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00045	8b 57 fc	 mov	 edx, DWORD PTR [edi-4]
  00048	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0004b	2b fa		 sub	 edi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004d	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  00050	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00053	77 23		 ja	 SHORT $LN21@vector

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00055	8b fa		 mov	 edi, edx
$LN24@vector:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00057	51		 push	 ecx
  00058	57		 push	 edi
  00059	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0005e	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00061	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 2081 :             _Mylast  = nullptr;

  00067	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2082 :             _Myend   = nullptr;

  0006e	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00075	5f		 pop	 edi
$LN5@vector:
  00076	5e		 pop	 esi

; 820  :     }

  00077	c3		 ret	 0
$LN21@vector:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00078	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN32@vector:
  0007d	cc		 int	 3
??1?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@QAE@XZ ENDP ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::~vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 182  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 183  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 184  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 185  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 136  :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 186  :         _Throw_bad_array_new_length(); // add overflow
; 187  :     }
; 188  : 
; 189  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 136  :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 191  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 192  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 193  : 
; 194  : #ifdef _DEBUG
; 195  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 196  : #endif // defined(_DEBUG)
; 197  :     return _Ptr;
; 198  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Find_last_vectorized@$$CBDD@std@@YAPBDQBD0D@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 1
??$_Find_last_vectorized@$$CBDD@std@@YAPBDQBD0D@Z PROC	; std::_Find_last_vectorized<char const ,char>, COMDAT

; 226  : _Ty* _Find_last_vectorized(_Ty* const _First, _Ty* const _Last, const _TVal _Val) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 227  :     if constexpr (is_pointer_v<_TVal> || is_null_pointer_v<_TVal>) {
; 228  : #ifdef _WIN64
; 229  :         return const_cast<_Ty*>(
; 230  :             static_cast<const _Ty*>(::__std_find_last_trivial_8(_First, _Last, reinterpret_cast<uint64_t>(_Val))));
; 231  : #else
; 232  :         return const_cast<_Ty*>(
; 233  :             static_cast<const _Ty*>(::__std_find_last_trivial_4(_First, _Last, reinterpret_cast<uint32_t>(_Val))));
; 234  : #endif
; 235  :     } else if constexpr (sizeof(_Ty) == 1) {
; 236  :         return const_cast<_Ty*>(

  00003	ff 75 10	 push	 DWORD PTR __Val$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00009	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000c	e8 00 00 00 00	 call	 ___std_find_last_trivial_1@12

; 237  :             static_cast<const _Ty*>(::__std_find_last_trivial_1(_First, _Last, static_cast<uint8_t>(_Val))));
; 238  :     } else if constexpr (sizeof(_Ty) == 2) {
; 239  :         return const_cast<_Ty*>(
; 240  :             static_cast<const _Ty*>(::__std_find_last_trivial_2(_First, _Last, static_cast<uint16_t>(_Val))));
; 241  :     } else if constexpr (sizeof(_Ty) == 4) {
; 242  :         return const_cast<_Ty*>(
; 243  :             static_cast<const _Ty*>(::__std_find_last_trivial_4(_First, _Last, static_cast<uint32_t>(_Val))));
; 244  :     } else if constexpr (sizeof(_Ty) == 8) {
; 245  :         return const_cast<_Ty*>(
; 246  :             static_cast<const _Ty*>(::__std_find_last_trivial_8(_First, _Last, static_cast<uint64_t>(_Val))));
; 247  :     } else {
; 248  :         _STL_INTERNAL_STATIC_ASSERT(false); // unexpected size
; 249  :     }
; 250  : }

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Find_last_vectorized@$$CBDD@std@@YAPBDQBD0D@Z ENDP	; std::_Find_last_vectorized<char const ,char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
__Count$ = 12						; size = 4
$T1 = 12						; size = 4
??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>, COMDAT
; _this$ = ecx

; 847  :     _CONSTEXPR20 void _Construct(const _Char_or_ptr _Arg, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 848  :         auto& _My_data = _Mypair._Myval2;
; 849  :         _STL_INTERNAL_CHECK(!_My_data._Large_mode_engaged());
; 850  : 
; 851  :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 852  :             _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Char_or_ptr, _Elem>);
; 853  :         } else {
; 854  :             _STL_INTERNAL_STATIC_ASSERT(_Is_elem_cptr<_Char_or_ptr>::value);
; 855  :         }
; 856  : 
; 857  :         if (_Count > max_size()) {

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Count$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  00010	0f 87 95 00 00
	00		 ja	 $LN40@Construct

; 859  :         }
; 860  : 
; 861  :         auto& _Al       = _Getal();
; 862  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 863  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 864  : 
; 865  :         if (_Count <= _Small_string_capacity) {

  00016	83 fe 0f	 cmp	 esi, 15			; 0000000fH
  00019	77 21		 ja	 SHORT $LN3@Construct
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0001b	56		 push	 esi
  0001c	ff 75 08	 push	 DWORD PTR __Arg$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  0001f	89 73 10	 mov	 DWORD PTR [ebx+16], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00022	53		 push	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 867  :             _My_data._Myres  = _Small_string_capacity;

  00023	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0002a	e8 00 00 00 00	 call	 _memcpy
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00032	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0
  00036	5e		 pop	 esi

; 899  :         } else { // _Strat == _Construct_strategy::_From_string
; 900  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);
; 901  :         }
; 902  : 
; 903  :         _ASAN_STRING_CREATE(*this);
; 904  :         _Proxy._Release();
; 905  :     }

  00037	5b		 pop	 ebx
  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
$LN3@Construct:
  0003c	57		 push	 edi

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  0003d	8b fe		 mov	 edi, esi
  0003f	83 cf 0f	 or	 edi, 15			; 0000000fH
  00042	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00048	76 12		 jbe	 SHORT $LN9@Construct

; 2944 :             return _Max;

  0004a	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0004f	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0005a	eb 26		 jmp	 SHORT $LN38@Construct
$LN9@Construct:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0005c	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00061	3b f8		 cmp	 edi, eax
  00063	0f 42 f8	 cmovb	 edi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  00066	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  00069	85 c0		 test	 eax, eax
  0006b	74 18		 je	 SHORT $LN37@Construct
$LN23@Construct:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  0006d	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00072	72 08		 jb	 SHORT $LN24@Construct

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0007a	eb 06		 jmp	 SHORT $LN38@Construct
$LN24@Construct:

; 136  :         return ::operator new(_Bytes);

  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN38@Construct:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00082	83 c4 04	 add	 esp, 4
$LN37@Construct:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00085	56		 push	 esi
  00086	ff 75 08	 push	 DWORD PTR __Arg$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00089	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0008c	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0008d	89 03		 mov	 DWORD PTR [ebx], eax

; 890  : 
; 891  :         _My_data._Mysize = _Count;

  0008f	89 73 10	 mov	 DWORD PTR [ebx+16], esi

; 892  :         _My_data._Myres  = _New_capacity;

  00092	89 7b 14	 mov	 DWORD PTR [ebx+20], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00095	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  0009a	8b 45 0c	 mov	 eax, DWORD PTR $T1[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0009d	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000a0	5f		 pop	 edi
  000a1	c6 04 30 00	 mov	 BYTE PTR [eax+esi], 0
  000a5	5e		 pop	 esi

; 899  :         } else { // _Strat == _Construct_strategy::_From_string
; 900  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);
; 901  :         }
; 902  : 
; 903  :         _ASAN_STRING_CREATE(*this);
; 904  :         _Proxy._Release();
; 905  :     }

  000a6	5b		 pop	 ebx
  000a7	5d		 pop	 ebp
  000a8	c2 08 00	 ret	 8
$LN40@Construct:

; 858  :             _Xlen_string(); // result too long

  000ab	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN36@Construct:
  000b0	cc		 int	 3
??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\GameType.h
;	COMDAT ??_GSCollisionData@NRaceData@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GSCollisionData@NRaceData@@UAEPAXI@Z PROC		; NRaceData::SCollisionData::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 120  : 		virtual ~SCollisionData() {}

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SCollisionData@NRaceData@@6B@
  0000f	e8 00 00 00 00	 call	 ??1?$vector@VCSphereCollisionInstance@@V?$allocator@VCSphereCollisionInstance@@@std@@@std@@QAE@XZ ; std::vector<CSphereCollisionInstance,std::allocator<CSphereCollisionInstance> >::~vector<CSphereCollisionInstance,std::allocator<CSphereCollisionInstance> >
  00014	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00018	74 0b		 je	 SHORT $LN10@scalar
  0001a	6a 14		 push	 20			; 00000014H
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00022	83 c4 08	 add	 esp, 8
$LN10@scalar:
  00025	8b c6		 mov	 eax, esi
  00027	5e		 pop	 esi
  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
??_GSCollisionData@NRaceData@@UAEPAXI@Z ENDP		; NRaceData::SCollisionData::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\GameType.h
;	COMDAT ??1SCollisionData@NRaceData@@UAE@XZ
_TEXT	SEGMENT
??1SCollisionData@NRaceData@@UAE@XZ PROC		; NRaceData::SCollisionData::~SCollisionData, COMDAT
; _this$ = ecx

; 120  : 		virtual ~SCollisionData() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7SCollisionData@NRaceData@@6B@
  00006	83 c1 08	 add	 ecx, 8
  00009	e9 00 00 00 00	 jmp	 ??1?$vector@VCSphereCollisionInstance@@V?$allocator@VCSphereCollisionInstance@@@std@@@std@@QAE@XZ ; std::vector<CSphereCollisionInstance,std::allocator<CSphereCollisionInstance> >::~vector<CSphereCollisionInstance,std::allocator<CSphereCollisionInstance> >
??1SCollisionData@NRaceData@@UAE@XZ ENDP		; NRaceData::SCollisionData::~SCollisionData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??1?$vector@VCSphereCollisionInstance@@V?$allocator@VCSphereCollisionInstance@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@VCSphereCollisionInstance@@V?$allocator@VCSphereCollisionInstance@@@std@@@std@@QAE@XZ PROC ; std::vector<CSphereCollisionInstance,std::allocator<CSphereCollisionInstance> >::~vector<CSphereCollisionInstance,std::allocator<CSphereCollisionInstance> >, COMDAT
; _this$ = ecx

; 814  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	85 f6		 test	 esi, esi
  00008	74 54		 je	 SHORT $LN5@vector

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000a	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0000d	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00012	2b ce		 sub	 ecx, esi
  00014	f7 e9		 imul	 ecx
  00016	c1 fa 03	 sar	 edx, 3
  00019	8b c2		 mov	 eax, edx
  0001b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001e	03 c2		 add	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00020	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  00023	c1 e1 02	 shl	 ecx, 2

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00026	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002c	72 12		 jb	 SHORT $LN24@vector

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0002e	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00031	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00034	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00036	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00039	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0003c	77 23		 ja	 SHORT $LN21@vector

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0003e	8b f2		 mov	 esi, edx
$LN24@vector:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00040	51		 push	 ecx
  00041	56		 push	 esi
  00042	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00047	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0004d	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00050	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 2082 :             _Myend   = nullptr;

  00057	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN5@vector:
  0005e	5f		 pop	 edi

; 820  :     }

  0005f	5e		 pop	 esi
  00060	c3		 ret	 0
$LN21@vector:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00061	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN32@vector:
  00066	cc		 int	 3
??1?$vector@VCSphereCollisionInstance@@V?$allocator@VCSphereCollisionInstance@@@std@@@std@@QAE@XZ ENDP ; std::vector<CSphereCollisionInstance,std::allocator<CSphereCollisionInstance> >::~vector<CSphereCollisionInstance,std::allocator<CSphereCollisionInstance> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??1?$vector@USHitData@NRaceData@@V?$allocator@USHitData@NRaceData@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$1$ = -8						; size = 4
__Last$1$ = -4						; size = 4
??1?$vector@USHitData@NRaceData@@V?$allocator@USHitData@NRaceData@@@std@@@std@@QAE@XZ PROC ; std::vector<NRaceData::SHitData,std::allocator<NRaceData::SHitData> >::~vector<NRaceData::SHitData,std::allocator<NRaceData::SHitData> >, COMDAT
; _this$ = ecx

; 814  :     _CONSTEXPR20 ~vector() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	89 7d f8	 mov	 DWORD PTR _this$1$[ebp], edi

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  0000d	8b 1f		 mov	 ebx, DWORD PTR [edi]
  0000f	85 db		 test	 ebx, ebx
  00011	0f 84 01 01 00
	00		 je	 $LN5@vector

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);

  00017	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0001a	89 45 fc	 mov	 DWORD PTR __Last$1$[ebp], eax
  0001d	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1098 :         for (; _First != _Last; ++_First) {

  0001e	3b d8		 cmp	 ebx, eax
  00020	0f 84 9e 00 00
	00		 je	 $LN171@vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);

  00026	8d 7b 24	 lea	 edi, DWORD PTR [ebx+36]
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL11@vector:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 767  :         _Erase_tree(_Al, _Myhead->_Parent);

  00030	8b 37		 mov	 esi, DWORD PTR [edi]
  00032	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00035	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00039	75 25		 jne	 SHORT $LN38@vector
  0003b	0f 1f 44 00 00	 npad	 5
$LL37@vector:

; 759  :             _Erase_tree(_Al, _Rootnode->_Right);

  00040	ff 76 08	 push	 DWORD PTR [esi+8]
  00043	8b cf		 mov	 ecx, edi
  00045	57		 push	 edi
  00046	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBMUCDynamicSphereInstance@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMUCDynamicSphereInstance@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBMUCDynamicSphereInstance@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBMUCDynamicSphereInstance@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,CDynamicSphereInstance> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<float const ,CDynamicSphereInstance>,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0004b	8b c6		 mov	 eax, esi

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  0004d	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0004f	6a 30		 push	 48			; 00000030H
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00057	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0005a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0005e	74 e0		 je	 SHORT $LL37@vector
$LN38@vector:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00060	6a 30		 push	 48			; 00000030H
  00062	ff 37		 push	 DWORD PTR [edi]
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00069	8b 4f fc	 mov	 ecx, DWORD PTR [edi-4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0006c	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0006f	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00072	76 2c		 jbe	 SHORT $LN170@vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00074	8b 47 e8	 mov	 eax, DWORD PTR [edi-24]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00077	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00078	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0007e	72 16		 jb	 SHORT $LN130@vector

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00080	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00083	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00086	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00088	83 c0 fc	 add	 eax, -4			; fffffffcH
  0008b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0008e	0f 87 8a 00 00
	00		 ja	 $LN153@vector

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00094	8b c2		 mov	 eax, edx
$LN130@vector:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00096	51		 push	 ecx
  00097	50		 push	 eax
  00098	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0009d	83 c4 08	 add	 esp, 8
$LN170@vector:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  000a0	c7 47 f8 00 00
	00 00		 mov	 DWORD PTR [edi-8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1098 :         for (; _First != _Last; ++_First) {

  000a7	83 c3 2c	 add	 ebx, 44			; 0000002cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  000aa	c7 47 fc 0f 00
	00 00		 mov	 DWORD PTR [edi-4], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000b1	c6 47 e8 00	 mov	 BYTE PTR [edi-24], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1098 :         for (; _First != _Last; ++_First) {

  000b5	83 c7 2c	 add	 edi, 44			; 0000002cH
  000b8	3b 5d fc	 cmp	 ebx, DWORD PTR __Last$1$[ebp]
  000bb	0f 85 6f ff ff
	ff		 jne	 $LL11@vector
  000c1	8b 7d f8	 mov	 edi, DWORD PTR _this$1$[ebp]
$LN171@vector:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000c4	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  000c7	b8 e9 a2 8b 2e	 mov	 eax, 780903145		; 2e8ba2e9H
  000cc	8b 37		 mov	 esi, DWORD PTR [edi]
  000ce	2b ce		 sub	 ecx, esi
  000d0	f7 e9		 imul	 ecx
  000d2	c1 fa 03	 sar	 edx, 3
  000d5	8b c2		 mov	 eax, edx
  000d7	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000da	03 c2		 add	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000dc	6b c8 2c	 imul	 ecx, eax, 44

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000df	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000e5	72 12		 jb	 SHORT $LN156@vector

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000e7	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  000ea	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000ed	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ef	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  000f2	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000f5	77 27		 ja	 SHORT $LN153@vector

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000f7	8b f2		 mov	 esi, edx
$LN156@vector:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000f9	51		 push	 ecx
  000fa	56		 push	 esi
  000fb	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00100	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00103	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0

; 2081 :             _Mylast  = nullptr;

  00109	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 2082 :             _Myend   = nullptr;

  00110	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  00117	5e		 pop	 esi
$LN5@vector:
  00118	5f		 pop	 edi

; 820  :     }

  00119	5b		 pop	 ebx
  0011a	8b e5		 mov	 esp, ebp
  0011c	5d		 pop	 ebp
  0011d	c3		 ret	 0
$LN153@vector:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0011e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN181@vector:
  00123	cc		 int	 3
??1?$vector@USHitData@NRaceData@@V?$allocator@USHitData@NRaceData@@@std@@@std@@QAE@XZ ENDP ; std::vector<NRaceData::SHitData,std::allocator<NRaceData::SHitData> >::~vector<NRaceData::SHitData,std::allocator<NRaceData::SHitData> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\TextFileLoader.h
;	COMDAT ??1CGotoChild@CTextFileLoader@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CGotoChild@CTextFileLoader@@QAE@XZ PROC		; CTextFileLoader::CGotoChild::~CGotoChild, COMDAT
; _this$ = ecx

; 54   : 			{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CGotoChild@CTextFileLoader@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 55   : 				m_pOwner->SetParentNode();

  00022	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00024	e8 00 00 00 00	 call	 ?SetParentNode@CTextFileLoader@@QAEHXZ ; CTextFileLoader::SetParentNode

; 56   : 			}

  00029	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0002c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00033	59		 pop	 ecx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
  00038	cc		 int	 3
  00039	cc		 int	 3
  0003a	cc		 int	 3
  0003b	cc		 int	 3
  0003c	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CGotoChild@CTextFileLoader@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CGotoChild@CTextFileLoader@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CGotoChild@CTextFileLoader@@QAE@XZ ENDP		; CTextFileLoader::CGotoChild::~CGotoChild
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange, COMDAT

; 2173 :         _Xout_of_range("invalid vector subscript");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN3@Xrange:
  0000a	cc		 int	 3
?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?at@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
?at@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::at, COMDAT
; _this$ = ecx

; 1932 :     _NODISCARD _CONSTEXPR20 _Ty& at(const size_type _Pos) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1933 :         auto& _My_data = _Mypair._Myval2;
; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00004	8b 31		 mov	 esi, DWORD PTR [ecx]
  00006	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0000e	2b ce		 sub	 ecx, esi
  00010	f7 e9		 imul	 ecx
  00012	8b 4d 08	 mov	 ecx, DWORD PTR __Pos$[ebp]
  00015	c1 fa 02	 sar	 edx, 2
  00018	8b c2		 mov	 eax, edx
  0001a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001d	03 c2		 add	 eax, edx
  0001f	3b c1		 cmp	 eax, ecx
  00021	76 0b		 jbe	 SHORT $LN7@at

; 1936 :         }
; 1937 : 
; 1938 :         return _My_data._Myfirst[_Pos];

  00023	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
  00026	8d 04 c6	 lea	 eax, DWORD PTR [esi+eax*8]

; 1939 :     }

  00029	5e		 pop	 esi
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
$LN7@at:

; 1935 :             _Xrange();

  0002e	e8 00 00 00 00	 call	 ?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
$LN5@at:
  00033	cc		 int	 3
?at@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::at
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::size, COMDAT
; _this$ = ecx

; 1899 :         auto& _My_data = _Mypair._Myval2;
; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00008	2b 11		 sub	 edx, DWORD PTR [ecx]
  0000a	f7 ea		 imul	 edx
  0000c	c1 fa 02	 sar	 edx, 2
  0000f	8b c2		 mov	 eax, edx
  00011	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00014	03 c2		 add	 eax, edx

; 1901 :     }

  00016	c3		 ret	 0
?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
;	COMDAT ?NoExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z
_TEXT	SEGMENT
__Result$1$ = -8					; size = 4
tv678 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_str$ = 12						; size = 4
__Count$1$ = 12						; size = 4
tv680 = 12						; size = 4
?NoExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z PROC ; CFileNameHelper::NoExtension, COMDAT

; 333  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 425  :         const value_type* _Result = _Bx._Buf;

  00009	8b 7d 0c	 mov	 edi, DWORD PTR _str$[ebp]
  0000c	8b d7		 mov	 edx, edi

; 434  :         return _Myres > _Small_string_capacity;

  0000e	83 7f 14 0f	 cmp	 DWORD PTR [edi+20], 15	; 0000000fH
  00012	8d 5f 14	 lea	 ebx, DWORD PTR [edi+20]

; 425  :         const value_type* _Result = _Bx._Buf;

  00015	89 7d f8	 mov	 DWORD PTR __Result$1$[ebp], edi

; 434  :         return _Myres > _Small_string_capacity;

  00018	89 5d fc	 mov	 DWORD PTR tv678[ebp], ebx

; 426  :         if (_Large_mode_engaged()) {

  0001b	76 05		 jbe	 SHORT $LN128@NoExtensio

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0001d	8b 17		 mov	 edx, DWORD PTR [edi]
  0001f	89 55 f8	 mov	 DWORD PTR __Result$1$[ebp], edx
$LN128@NoExtensio:

; 2704 :         return static_cast<size_type>(

  00022	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00025	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  00028	89 4d 0c	 mov	 DWORD PTR tv680[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 723  :     if (_Hay_size == 0) { // no room for match

  0002b	85 c0		 test	 eax, eax
  0002d	74 66		 je	 SHORT $LN2@NoExtensio

; 724  :         return static_cast<size_t>(-1);
; 725  :     }
; 726  : 
; 727  :     const size_t _Actual_start_at = (_STD min)(_Start_at, _Hay_size - 1);

  0002f	48		 dec	 eax
  00030	83 c9 ff	 or	 ecx, -1
  00033	3b c1		 cmp	 eax, ecx

; 728  : 
; 729  : #if _USE_STD_VECTOR_ALGORITHMS
; 730  :     if constexpr (_Is_implementation_handled_char_traits<_Traits>) {
; 731  :         if (!_STD _Is_constant_evaluated()) {
; 732  :             const auto _End = _Haystack + _Actual_start_at + 1;
; 733  :             const auto _Ptr = _STD _Find_last_vectorized(_Haystack, _End, _Ch);

  00035	6a 2e		 push	 46			; 0000002eH
  00037	0f 42 c8	 cmovb	 ecx, eax
  0003a	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
  0003d	03 f2		 add	 esi, edx
  0003f	56		 push	 esi
  00040	52		 push	 edx
  00041	e8 00 00 00 00	 call	 ??$_Find_last_vectorized@$$CBDD@std@@YAPBDQBD0D@Z ; std::_Find_last_vectorized<char const ,char>
  00046	8b c8		 mov	 ecx, eax

; 734  : 
; 735  :             if (_Ptr != _End) {

  00048	89 5d fc	 mov	 DWORD PTR tv678[ebp], ebx
  0004b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004e	3b ce		 cmp	 ecx, esi
  00050	74 40		 je	 SHORT $LN130@NoExtensio

; 736  :                 return static_cast<size_t>(_Ptr - _Haystack);

  00052	2b 4d f8	 sub	 ecx, DWORD PTR __Result$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h

; 336  : 	if (string::npos != npos)

  00055	83 f9 ff	 cmp	 ecx, -1
  00058	74 38		 je	 SHORT $LN130@NoExtensio
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0005a	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0005d	0f 57 c0	 xorps	 xmm0, xmm0

; 450  :         if (_Mysize < _Off) {

  00060	8b 45 0c	 mov	 eax, DWORD PTR tv680[ebp]

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00063	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00066	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0006d	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 468  :         return (_STD min)(_Size, _Mysize - _Off);

  00074	39 08		 cmp	 DWORD PTR [eax], ecx
  00076	0f 42 08	 cmovb	 ecx, DWORD PTR [eax]

; 434  :         return _Myres > _Small_string_capacity;

  00079	83 3b 0f	 cmp	 DWORD PTR [ebx], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  0007c	76 02		 jbe	 SHORT $LN60@NoExtensio

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0007e	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN60@NoExtensio:

; 713  :         _Construct<_Construct_strategy::_From_ptr>(

  00080	51		 push	 ecx
  00081	57		 push	 edi
  00082	8b ce		 mov	 ecx, esi
  00084	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
  00089	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h

; 337  : 		return std::string(str, 0, npos);

  0008a	8b c6		 mov	 eax, esi

; 340  : }

  0008c	5e		 pop	 esi
  0008d	5b		 pop	 ebx
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c3		 ret	 0
$LN130@NoExtensio:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00092	8b 4d 0c	 mov	 ecx, DWORD PTR tv680[ebp]
$LN2@NoExtensio:
  00095	8b 5d 08	 mov	 ebx, DWORD PTR ___$ReturnUdt$[ebp]
  00098	0f 57 c0	 xorps	 xmm0, xmm0

; 434  :         return _Myres > _Small_string_capacity;

  0009b	8b 45 fc	 mov	 eax, DWORD PTR tv678[ebp]

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0009e	0f 11 03	 movups	 XMMWORD PTR [ebx], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  000a1	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  000a8	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0

; 434  :         return _Myres > _Small_string_capacity;

  000af	83 38 0f	 cmp	 DWORD PTR [eax], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  000b2	76 02		 jbe	 SHORT $LN83@NoExtensio

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  000b4	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN83@NoExtensio:

; 694  :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  000b6	8b 01		 mov	 eax, DWORD PTR [ecx]
  000b8	89 45 0c	 mov	 DWORD PTR __Count$1$[ebp], eax

; 857  :         if (_Count > max_size()) {

  000bb	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  000c0	0f 87 8f 00 00
	00		 ja	 $LN144@NoExtensio

; 859  :         }
; 860  : 
; 861  :         auto& _Al       = _Getal();
; 862  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 863  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 864  : 
; 865  :         if (_Count <= _Small_string_capacity) {

  000c6	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  000c9	77 19		 ja	 SHORT $LN91@NoExtensio

; 866  :             _My_data._Mysize = _Count;

  000cb	89 43 10	 mov	 DWORD PTR [ebx+16], eax
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h

; 339  : 	return str;

  000ce	8b c3		 mov	 eax, ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 867  :             _My_data._Myres  = _Small_string_capacity;

  000d0	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d7	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
  000da	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h

; 340  : }

  000db	5e		 pop	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000dc	0f 11 03	 movups	 XMMWORD PTR [ebx], xmm0
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h

; 340  : }

  000df	5b		 pop	 ebx
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c3		 ret	 0
$LN91@NoExtensio:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  000e4	8b f0		 mov	 esi, eax
  000e6	83 ce 0f	 or	 esi, 15			; 0000000fH
  000e9	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  000ef	76 12		 jbe	 SHORT $LN97@NoExtensio

; 2944 :             return _Max;

  000f1	b9 00 00 00 80	 mov	 ecx, -2147483648	; 80000000H
  000f6	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000fb	51		 push	 ecx
  000fc	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00101	eb 2b		 jmp	 SHORT $LN142@NoExtensio
$LN97@NoExtensio:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00103	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  00108	3b f1		 cmp	 esi, ecx
  0010a	0f 42 f1	 cmovb	 esi, ecx

; 801  :         ++_Capacity; // Take null terminator into consideration

  0010d	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  00110	85 c9		 test	 ecx, ecx
  00112	75 04		 jne	 SHORT $LN111@NoExtensio

; 228  :         return nullptr;

  00114	33 d2		 xor	 edx, edx
  00116	eb 1e		 jmp	 SHORT $LN110@NoExtensio
$LN111@NoExtensio:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00118	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0011e	72 08		 jb	 SHORT $LN112@NoExtensio

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00120	51		 push	 ecx
  00121	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00126	eb 06		 jmp	 SHORT $LN142@NoExtensio
$LN112@NoExtensio:

; 136  :         return ::operator new(_Bytes);

  00128	51		 push	 ecx
  00129	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN142@NoExtensio:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0012e	8b d0		 mov	 edx, eax
  00130	83 c4 04	 add	 esp, 4
  00133	8b 45 0c	 mov	 eax, DWORD PTR __Count$1$[ebp]
$LN110@NoExtensio:

; 893  :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 894  :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 895  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 896  :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 897  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);
; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 899  :         } else { // _Strat == _Construct_strategy::_From_string
; 900  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);

  00136	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  00139	89 13		 mov	 DWORD PTR [ebx], edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0013b	51		 push	 ecx
  0013c	57		 push	 edi
  0013d	52		 push	 edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 891  :         _My_data._Mysize = _Count;

  0013e	89 43 10	 mov	 DWORD PTR [ebx+16], eax

; 892  :         _My_data._Myres  = _New_capacity;

  00141	89 73 14	 mov	 DWORD PTR [ebx+20], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00144	e8 00 00 00 00	 call	 _memcpy
  00149	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h

; 339  : 	return str;

  0014c	8b c3		 mov	 eax, ebx
  0014e	5f		 pop	 edi

; 340  : }

  0014f	5e		 pop	 esi
  00150	5b		 pop	 ebx
  00151	8b e5		 mov	 esp, ebp
  00153	5d		 pop	 ebp
  00154	c3		 ret	 0
$LN144@NoExtensio:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 858  :             _Xlen_string(); // result too long

  00155	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN141@NoExtensio:
  0015a	cc		 int	 3
?NoExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ENDP ; CFileNameHelper::NoExtension
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHQBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHQBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare, COMDAT
; _this$ = ecx

; 2874 :     _NODISCARD _CONSTEXPR20 int compare(_In_z_ const _Elem* const _Ptr) const noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00005	8b 75 08	 mov	 esi, DWORD PTR __Ptr$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2874 :     _NODISCARD _CONSTEXPR20 int compare(_In_z_ const _Elem* const _Ptr) const noexcept /* strengthened */ {

  00008	8b d1		 mov	 edx, ecx
  0000a	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0000b	8b fe		 mov	 edi, esi
  0000d	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
$LL26@compare:
  00010	8a 07		 mov	 al, BYTE PTR [edi]
  00012	47		 inc	 edi
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL26@compare
  00017	2b f9		 sub	 edi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00019	83 7a 14 0f	 cmp	 DWORD PTR [edx+20], 15	; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  0001d	8b ca		 mov	 ecx, edx

; 426  :         if (_Large_mode_engaged()) {

  0001f	76 02		 jbe	 SHORT $LN8@compare

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00021	8b 0a		 mov	 ecx, DWORD PTR [edx]
$LN8@compare:

; 2875 :         // compare [0, size()) with [_Ptr, <null>)
; 2876 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize, _Ptr, _Traits::length(_Ptr));

  00023	8b 5a 10	 mov	 ebx, DWORD PTR [edx+16]
  00026	3b fb		 cmp	 edi, ebx
  00028	8b d3		 mov	 edx, ebx
  0002a	0f 42 d7	 cmovb	 edx, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 413  :         return _CSTD memcmp(_First1, _First2, _Count);

  0002d	83 ea 04	 sub	 edx, 4
  00030	72 11		 jb	 SHORT $LN29@compare
$LL30@compare:
  00032	8b 01		 mov	 eax, DWORD PTR [ecx]
  00034	3b 06		 cmp	 eax, DWORD PTR [esi]
  00036	75 10		 jne	 SHORT $LN28@compare
  00038	83 c1 04	 add	 ecx, 4
  0003b	83 c6 04	 add	 esi, 4
  0003e	83 ea 04	 sub	 edx, 4
  00041	73 ef		 jae	 SHORT $LL30@compare
$LN29@compare:
  00043	83 fa fc	 cmp	 edx, -4			; fffffffcH
  00046	74 34		 je	 SHORT $LN27@compare
$LN28@compare:
  00048	8a 01		 mov	 al, BYTE PTR [ecx]
  0004a	3a 06		 cmp	 al, BYTE PTR [esi]
  0004c	75 27		 jne	 SHORT $LN31@compare
  0004e	83 fa fd	 cmp	 edx, -3			; fffffffdH
  00051	74 29		 je	 SHORT $LN27@compare
  00053	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  00056	3a 46 01	 cmp	 al, BYTE PTR [esi+1]
  00059	75 1a		 jne	 SHORT $LN31@compare
  0005b	83 fa fe	 cmp	 edx, -2			; fffffffeH
  0005e	74 1c		 je	 SHORT $LN27@compare
  00060	8a 41 02	 mov	 al, BYTE PTR [ecx+2]
  00063	3a 46 02	 cmp	 al, BYTE PTR [esi+2]
  00066	75 0d		 jne	 SHORT $LN31@compare
  00068	83 fa ff	 cmp	 edx, -1
  0006b	74 0f		 je	 SHORT $LN27@compare
  0006d	8a 41 03	 mov	 al, BYTE PTR [ecx+3]
  00070	3a 46 03	 cmp	 al, BYTE PTR [esi+3]
  00073	74 07		 je	 SHORT $LN27@compare
$LN31@compare:
  00075	1b c0		 sbb	 eax, eax
  00077	83 c8 01	 or	 eax, 1
  0007a	eb 02		 jmp	 SHORT $LN32@compare
$LN27@compare:
  0007c	33 c0		 xor	 eax, eax
$LN32@compare:

; 595  :     if (_Ans != 0) {

  0007e	85 c0		 test	 eax, eax
  00080	75 12		 jne	 SHORT $LN17@compare

; 596  :         return _Ans;
; 597  :     }
; 598  : 
; 599  :     if (_Left_size < _Right_size) {

  00082	3b fb		 cmp	 edi, ebx
  00084	76 0a		 jbe	 SHORT $LN45@compare
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2877 :     }

  00086	5f		 pop	 edi
  00087	5e		 pop	 esi
  00088	83 c8 ff	 or	 eax, -1
  0008b	5b		 pop	 ebx
  0008c	5d		 pop	 ebp
  0008d	c2 04 00	 ret	 4
$LN45@compare:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 603  :     if (_Left_size > _Right_size) {

  00090	1b c0		 sbb	 eax, eax
  00092	f7 d8		 neg	 eax
$LN17@compare:
  00094	5f		 pop	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2877 :     }

  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx
  00097	5d		 pop	 ebp
  00098	c2 04 00	 ret	 4
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHQBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__New_size$1$ = -16					; size = 4
tv518 = -16						; size = 4
__Old_size$1$ = -12					; size = 4
__Old$1$ = -8						; size = 4
$T1 = -4						; size = 4
tv508 = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
tv503 = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 1486 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 1487 :         // append [_Ptr, _Ptr + _Count)
; 1488 :         const size_type _Old_size = _Mypair._Myval2._Mysize;
; 1489 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00011	8b c2		 mov	 eax, edx
  00013	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00016	2b c1		 sub	 eax, ecx
  00018	89 4d f4	 mov	 DWORD PTR __Old_size$1$[ebp], ecx
  0001b	89 55 f8	 mov	 DWORD PTR __Old$1$[ebp], edx
  0001e	3b d8		 cmp	 ebx, eax
  00020	77 2e		 ja	 SHORT $LN2@append

; 1490 :             _ASAN_STRING_MODIFY(*this, _Old_size, _Old_size + _Count);
; 1491 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00022	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  00025	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 416  :         value_type* _Result = _Bx._Buf;

  00028	8b c7		 mov	 eax, edi

; 434  :         return _Myres > _Small_string_capacity;

  0002a	83 fa 0f	 cmp	 edx, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  0002d	76 02		 jbe	 SHORT $LN5@append

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  0002f	8b 07		 mov	 eax, DWORD PTR [edi]
$LN5@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00031	53		 push	 ebx
  00032	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1493 :             _Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

  00035	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 _memmove
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1494 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  00041	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 1507 :     }

  00045	8b c7		 mov	 eax, edi
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
$LN2@append:

; 2993 :         if (max_size() - _Old_size < _Size_increase) {

  00050	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00055	2b c1		 sub	 eax, ecx
  00057	3b c3		 cmp	 eax, ebx
  00059	0f 82 1d 01 00
	00		 jb	 $LN98@append

; 2995 :         }
; 2996 : 
; 2997 :         const size_type _New_size     = _Old_size + _Size_increase;

  0005f	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00062	8b f0		 mov	 esi, eax

; 2997 :         const size_type _New_size     = _Old_size + _Size_increase;

  00064	89 45 f0	 mov	 DWORD PTR __New_size$1$[ebp], eax

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00067	83 ce 0f	 or	 esi, 15			; 0000000fH
  0006a	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00070	76 12		 jbe	 SHORT $LN23@append

; 2944 :             return _Max;

  00072	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00077	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00082	eb 4b		 jmp	 SHORT $LN96@append
$LN23@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2947 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00084	8b c2		 mov	 eax, edx
  00086	d1 e8		 shr	 eax, 1
  00088	89 45 fc	 mov	 DWORD PTR tv508[ebp], eax
  0008b	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00090	2b 45 fc	 sub	 eax, DWORD PTR tv508[ebp]
  00093	3b d0		 cmp	 edx, eax
  00095	76 12		 jbe	 SHORT $LN24@append

; 2948 :             return _Max;

  00097	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0009c	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a7	eb 26		 jmp	 SHORT $LN96@append
$LN24@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000a9	8b 45 fc	 mov	 eax, DWORD PTR tv508[ebp]
  000ac	03 c2		 add	 eax, edx
  000ae	3b f0		 cmp	 esi, eax
  000b0	0f 42 f0	 cmovb	 esi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  000b3	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  000b6	85 c0		 test	 eax, eax
  000b8	74 1e		 je	 SHORT $LN95@append
$LN37@append:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  000ba	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000bf	72 08		 jb	 SHORT $LN38@append

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000c1	50		 push	 eax
  000c2	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000c7	eb 06		 jmp	 SHORT $LN96@append
$LN38@append:

; 136  :         return ::operator new(_Bytes);

  000c9	50		 push	 eax
  000ca	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN96@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3005 :         _My_data._Mysize      = _New_size;

  000cf	8b 55 f8	 mov	 edx, DWORD PTR __Old$1$[ebp]
  000d2	83 c4 04	 add	 esp, 4
  000d5	8b 4d f4	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
$LN95@append:
  000d8	8b 5d f0	 mov	 ebx, DWORD PTR __New_size$1$[ebp]
  000db	89 5f 10	 mov	 DWORD PTR [edi+16], ebx

; 3006 :         _My_data._Myres       = _New_capacity;
; 3007 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  000de	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  000e1	89 77 14	 mov	 DWORD PTR [edi+20], esi
  000e4	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
  000e7	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  000ea	89 75 f0	 mov	 DWORD PTR tv518[ebp], esi
  000ed	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]
  000f0	89 45 0c	 mov	 DWORD PTR tv503[ebp], eax

; 3008 :         if (_Old_capacity > _Small_string_capacity) {

  000f3	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
  000f6	51		 push	 ecx
  000f7	83 fa 0f	 cmp	 edx, 15			; 0000000fH
  000fa	76 56		 jbe	 SHORT $LN16@append

; 3009 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000fc	8b 37		 mov	 esi, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000fe	56		 push	 esi
  000ff	50		 push	 eax
  00100	e8 00 00 00 00	 call	 _memcpy
  00105	53		 push	 ebx
  00106	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00109	ff 75 f0	 push	 DWORD PTR tv518[ebp]
  0010c	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1504 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00111	8b 45 0c	 mov	 eax, DWORD PTR tv503[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00114	83 c4 18	 add	 esp, 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00117	8b 4d f8	 mov	 ecx, DWORD PTR __Old$1$[ebp]
  0011a	41		 inc	 ecx

; 1504 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0011b	c6 00 00	 mov	 BYTE PTR [eax], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0011e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00124	72 12		 jb	 SHORT $LN69@append

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00126	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00129	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0012c	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0012e	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00131	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00134	77 4b		 ja	 SHORT $LN66@append

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00136	8b f2		 mov	 esi, edx
$LN69@append:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00138	51		 push	 ecx
  00139	56		 push	 esi
  0013a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1498 :         return _Reallocate_grow_by(

  0013f	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00142	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1498 :         return _Reallocate_grow_by(

  00145	89 07		 mov	 DWORD PTR [edi], eax

; 1507 :     }

  00147	8b c7		 mov	 eax, edi
  00149	5f		 pop	 edi
  0014a	5e		 pop	 esi
  0014b	5b		 pop	 ebx
  0014c	8b e5		 mov	 esp, ebp
  0014e	5d		 pop	 ebp
  0014f	c2 08 00	 ret	 8
$LN16@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00152	57		 push	 edi
  00153	50		 push	 eax
  00154	e8 00 00 00 00	 call	 _memcpy
  00159	53		 push	 ebx
  0015a	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0015d	56		 push	 esi
  0015e	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1504 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00163	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00166	83 c4 18	 add	 esp, 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1504 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00169	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1498 :         return _Reallocate_grow_by(

  0016c	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
  0016f	89 07		 mov	 DWORD PTR [edi], eax

; 1507 :     }

  00171	8b c7		 mov	 eax, edi
  00173	5f		 pop	 edi
  00174	5e		 pop	 esi
  00175	5b		 pop	 ebx
  00176	8b e5		 mov	 esp, ebp
  00178	5d		 pop	 ebp
  00179	c2 08 00	 ret	 8
$LN98@append:

; 2994 :             _Xlen_string(); // result too long

  0017c	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN66@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00181	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN93@append:
  00186	cc		 int	 3
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 1358 :     _CONSTEXPR20 ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 434  :         return _Myres > _Small_string_capacity;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00009	76 27		 jbe	 SHORT $LN19@basic_stri
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0000d	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN30@basic_stri

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN27@basic_stri

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN30@basic_stri:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN19@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 1366 :     }

  00044	c3		 ret	 0
$LN27@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN39@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 512  :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 107  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 108  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN18@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN18@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 144  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 145  :     }

  00003	8b c1		 mov	 eax, ecx

; 66   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 67   :     {
; 68   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 144  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 145  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN13@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN8@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 96   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 97   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 92   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 73   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 75   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceMotionData.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
