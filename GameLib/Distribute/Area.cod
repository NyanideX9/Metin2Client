; Listing generated by Microsoft (R) Optimizing Compiler Version 19.37.32822.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\GameLib\Distribute\Area.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPool@USObjectInstance@CArea@@@@6B@ ; CDynamicPool<CArea::SObjectInstance>::`vftable'
PUBLIC	??_G?$CDynamicPool@USObjectInstance@CArea@@@@UAEPAXI@Z ; CDynamicPool<CArea::SObjectInstance>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPool@VCAttributeInstance@@@@6B@	; CDynamicPool<CAttributeInstance>::`vftable'
PUBLIC	??_G?$CDynamicPool@VCAttributeInstance@@@@UAEPAXI@Z ; CDynamicPool<CAttributeInstance>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPool@USAmbienceInstance@CArea@@@@6B@ ; CDynamicPool<CArea::SAmbienceInstance>::`vftable'
PUBLIC	??_G?$CDynamicPool@USAmbienceInstance@CArea@@@@UAEPAXI@Z ; CDynamicPool<CArea::SAmbienceInstance>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPool@VCDungeonBlock@@@@6B@	; CDynamicPool<CDungeonBlock>::`vftable'
PUBLIC	??_G?$CDynamicPool@VCDungeonBlock@@@@UAEPAXI@Z	; CDynamicPool<CDungeonBlock>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPool@VCArea@@@@6B@		; CDynamicPool<CArea>::`vftable'
PUBLIC	??_G?$CDynamicPool@VCArea@@@@UAEPAXI@Z		; CDynamicPool<CArea>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`scalar deleting destructor'
PUBLIC	??_R4?$CDynamicPool@VCAttributeInstance@@@@6B@	; CDynamicPool<CAttributeInstance>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPool@VCAttributeInstance@@@@@8 ; CDynamicPool<CAttributeInstance> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPool@VCAttributeInstance@@@@8	; CDynamicPool<CAttributeInstance>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPool@VCAttributeInstance@@@@8	; CDynamicPool<CAttributeInstance>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPool@VCAttributeInstance@@@@8 ; CDynamicPool<CAttributeInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPool@USObjectInstance@CArea@@@@6B@ ; CDynamicPool<CArea::SObjectInstance>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPool@USObjectInstance@CArea@@@@@8 ; CDynamicPool<CArea::SObjectInstance> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPool@USObjectInstance@CArea@@@@8	; CDynamicPool<CArea::SObjectInstance>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPool@USObjectInstance@CArea@@@@8	; CDynamicPool<CArea::SObjectInstance>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPool@USObjectInstance@CArea@@@@8 ; CDynamicPool<CArea::SObjectInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPool@USAmbienceInstance@CArea@@@@6B@ ; CDynamicPool<CArea::SAmbienceInstance>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPool@USAmbienceInstance@CArea@@@@@8 ; CDynamicPool<CArea::SAmbienceInstance> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPool@USAmbienceInstance@CArea@@@@8 ; CDynamicPool<CArea::SAmbienceInstance>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPool@USAmbienceInstance@CArea@@@@8 ; CDynamicPool<CArea::SAmbienceInstance>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPool@USAmbienceInstance@CArea@@@@8 ; CDynamicPool<CArea::SAmbienceInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPool@VCDungeonBlock@@@@6B@	; CDynamicPool<CDungeonBlock>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPool@VCDungeonBlock@@@@@8	; CDynamicPool<CDungeonBlock> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPool@VCDungeonBlock@@@@8		; CDynamicPool<CDungeonBlock>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPool@VCDungeonBlock@@@@8		; CDynamicPool<CDungeonBlock>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPool@VCDungeonBlock@@@@8 ; CDynamicPool<CDungeonBlock>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPool@VCArea@@@@6B@		; CDynamicPool<CArea>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPool@VCArea@@@@@8		; CDynamicPool<CArea> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPool@VCArea@@@@8			; CDynamicPool<CArea>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPool@VCArea@@@@8			; CDynamicPool<CArea>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPool@VCArea@@@@8	; CDynamicPool<CArea>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`scalar deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPool@USObjectInstance@CArea@@@@UAEPAXI@Z:PROC ; CDynamicPool<CArea::SObjectInstance>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPool@VCAttributeInstance@@@@UAEPAXI@Z:PROC ; CDynamicPool<CAttributeInstance>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPool@USAmbienceInstance@CArea@@@@UAEPAXI@Z:PROC ; CDynamicPool<CArea::SAmbienceInstance>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPool@VCDungeonBlock@@@@UAEPAXI@Z:PROC ; CDynamicPool<CDungeonBlock>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPool@VCArea@@@@UAEPAXI@Z:PROC	; CDynamicPool<CArea>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPool@VCArea@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPool@VCArea@@@@8 DD FLAT:??_R0?AV?$CDynamicPool@VCArea@@@@@8 ; CDynamicPool<CArea>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPool@VCArea@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPool@VCArea@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPool@VCArea@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPool@VCArea@@@@8 ; CDynamicPool<CArea>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPool@VCArea@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPool@VCArea@@@@8 DD 00H			; CDynamicPool<CArea>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPool@VCArea@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPool@VCArea@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPool@VCArea@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPool<CArea> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPool@VCArea@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPool@VCArea@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPool@VCArea@@@@6B@ DD 00H		; CDynamicPool<CArea>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPool@VCArea@@@@@8
	DD	FLAT:??_R3?$CDynamicPool@VCArea@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPool@VCDungeonBlock@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPool@VCDungeonBlock@@@@8 DD FLAT:??_R0?AV?$CDynamicPool@VCDungeonBlock@@@@@8 ; CDynamicPool<CDungeonBlock>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPool@VCDungeonBlock@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPool@VCDungeonBlock@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPool@VCDungeonBlock@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPool@VCDungeonBlock@@@@8 ; CDynamicPool<CDungeonBlock>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPool@VCDungeonBlock@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPool@VCDungeonBlock@@@@8 DD 00H		; CDynamicPool<CDungeonBlock>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPool@VCDungeonBlock@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPool@VCDungeonBlock@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPool@VCDungeonBlock@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPool<CDungeonBlock> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPool@VCDungeonBlock@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPool@VCDungeonBlock@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPool@VCDungeonBlock@@@@6B@ DD 00H	; CDynamicPool<CDungeonBlock>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPool@VCDungeonBlock@@@@@8
	DD	FLAT:??_R3?$CDynamicPool@VCDungeonBlock@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPool@USAmbienceInstance@CArea@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPool@USAmbienceInstance@CArea@@@@8 DD FLAT:??_R0?AV?$CDynamicPool@USAmbienceInstance@CArea@@@@@8 ; CDynamicPool<CArea::SAmbienceInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPool@USAmbienceInstance@CArea@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPool@USAmbienceInstance@CArea@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPool@USAmbienceInstance@CArea@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPool@USAmbienceInstance@CArea@@@@8 ; CDynamicPool<CArea::SAmbienceInstance>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPool@USAmbienceInstance@CArea@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPool@USAmbienceInstance@CArea@@@@8 DD 00H ; CDynamicPool<CArea::SAmbienceInstance>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPool@USAmbienceInstance@CArea@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPool@USAmbienceInstance@CArea@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPool@USAmbienceInstance@CArea@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPool<CArea::SAmbienceInstance> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPool@USAmbienceInstance@CArea@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPool@USAmbienceInstance@CArea@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPool@USAmbienceInstance@CArea@@@@6B@ DD 00H ; CDynamicPool<CArea::SAmbienceInstance>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPool@USAmbienceInstance@CArea@@@@@8
	DD	FLAT:??_R3?$CDynamicPool@USAmbienceInstance@CArea@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPool@USObjectInstance@CArea@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPool@USObjectInstance@CArea@@@@8 DD FLAT:??_R0?AV?$CDynamicPool@USObjectInstance@CArea@@@@@8 ; CDynamicPool<CArea::SObjectInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPool@USObjectInstance@CArea@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPool@USObjectInstance@CArea@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPool@USObjectInstance@CArea@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPool@USObjectInstance@CArea@@@@8 ; CDynamicPool<CArea::SObjectInstance>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPool@USObjectInstance@CArea@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPool@USObjectInstance@CArea@@@@8 DD 00H	; CDynamicPool<CArea::SObjectInstance>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPool@USObjectInstance@CArea@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPool@USObjectInstance@CArea@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPool@USObjectInstance@CArea@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPool<CArea::SObjectInstance> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPool@USObjectInstance@CArea@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPool@USObjectInstance@CArea@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPool@USObjectInstance@CArea@@@@6B@ DD 00H ; CDynamicPool<CArea::SObjectInstance>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPool@USObjectInstance@CArea@@@@@8
	DD	FLAT:??_R3?$CDynamicPool@USObjectInstance@CArea@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDe'
	DB	'corator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDec'
	DB	'orator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpd'
	DB	'ateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@N'
	DB	'EffectUpdateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEff'
	DB	'ectUpdateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffe'
	DB	'ctUpdateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecora'
	DB	'tor@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDeco'
	DB	'rator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPool@VCAttributeInstance@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPool@VCAttributeInstance@@@@8 DD FLAT:??_R0?AV?$CDynamicPool@VCAttributeInstance@@@@@8 ; CDynamicPool<CAttributeInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPool@VCAttributeInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPool@VCAttributeInstance@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPool@VCAttributeInstance@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPool@VCAttributeInstance@@@@8 ; CDynamicPool<CAttributeInstance>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPool@VCAttributeInstance@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPool@VCAttributeInstance@@@@8 DD 00H	; CDynamicPool<CAttributeInstance>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPool@VCAttributeInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPool@VCAttributeInstance@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPool@VCAttributeInstance@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPool<CAttributeInstance> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPool@VCAttributeInstance@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPool@VCAttributeInstance@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPool@VCAttributeInstance@@@@6B@ DD 00H	; CDynamicPool<CAttributeInstance>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPool@VCAttributeInstance@@@@@8
	DD	FLAT:??_R3?$CDynamicPool@VCAttributeInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPool@VCArea@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPool@VCArea@@@@6B@ DD FLAT:??_R4?$CDynamicPool@VCArea@@@@6B@ ; CDynamicPool<CArea>::`vftable'
	DD	FLAT:??_E?$CDynamicPool@VCArea@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
?piecewise_construct@std@@3Upiecewise_construct_t@1@B	ORG $+1 ; std::piecewise_construct
CONST	ENDS
;	COMDAT ??_7?$CDynamicPool@VCDungeonBlock@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPool@VCDungeonBlock@@@@6B@ DD FLAT:??_R4?$CDynamicPool@VCDungeonBlock@@@@6B@ ; CDynamicPool<CDungeonBlock>::`vftable'
	DD	FLAT:??_E?$CDynamicPool@VCDungeonBlock@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPool@USAmbienceInstance@CArea@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPool@USAmbienceInstance@CArea@@@@6B@ DD FLAT:??_R4?$CDynamicPool@USAmbienceInstance@CArea@@@@6B@ ; CDynamicPool<CArea::SAmbienceInstance>::`vftable'
	DD	FLAT:??_E?$CDynamicPool@USAmbienceInstance@CArea@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPool@VCAttributeInstance@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPool@VCAttributeInstance@@@@6B@ DD FLAT:??_R4?$CDynamicPool@VCAttributeInstance@@@@6B@ ; CDynamicPool<CAttributeInstance>::`vftable'
	DD	FLAT:??_E?$CDynamicPool@VCAttributeInstance@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPool@USObjectInstance@CArea@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPool@USObjectInstance@CArea@@@@6B@ DD FLAT:??_R4?$CDynamicPool@USObjectInstance@CArea@@@@6B@ ; CDynamicPool<CArea::SObjectInstance>::`vftable'
	DD	FLAT:??_E?$CDynamicPool@USObjectInstance@CArea@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0D3DXMATRIX@@QAE@XZ				; D3DXMATRIX::D3DXMATRIX
PUBLIC	___local_stdio_printf_options
PUBLIC	_sprintf
PUBLIC	__snprintf
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
PUBLIC	?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
PUBLIC	?_Throw_tree_length_error@std@@YAXXZ		; std::_Throw_tree_length_error
PUBLIC	??0bad_cast@std@@QAE@XZ				; std::bad_cast::bad_cast
PUBLIC	??1bad_cast@std@@UAE@XZ				; std::bad_cast::~bad_cast
PUBLIC	??0bad_cast@std@@QAE@ABV01@@Z			; std::bad_cast::bad_cast
PUBLIC	??_Gbad_cast@std@@UAEPAXI@Z			; std::bad_cast::`scalar deleting destructor'
PUBLIC	?_Throw_bad_cast@std@@YAXXZ			; std::_Throw_bad_cast
PUBLIC	??1_Facet_base@std@@UAE@XZ			; std::_Facet_base::~_Facet_base
PUBLIC	??_G_Facet_base@std@@UAEPAXI@Z			; std::_Facet_base::`scalar deleting destructor'
PUBLIC	??1?$_Yarn@D@std@@QAE@XZ			; std::_Yarn<char>::~_Yarn<char>
PUBLIC	??1?$_Yarn@_W@std@@QAE@XZ			; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
PUBLIC	?_Incref@facet@locale@std@@UAEXXZ		; std::locale::facet::_Incref
PUBLIC	?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ ; std::locale::facet::_Decref
PUBLIC	??1facet@locale@std@@MAE@XZ			; std::locale::facet::~facet
PUBLIC	??_Gfacet@locale@std@@MAEPAXI@Z			; std::locale::facet::`scalar deleting destructor'
PUBLIC	??1locale@std@@QAE@XZ				; std::locale::~locale
PUBLIC	??1ctype_base@std@@UAE@XZ			; std::ctype_base::~ctype_base
PUBLIC	??_Gctype_base@std@@UAEPAXI@Z			; std::ctype_base::`scalar deleting destructor'
PUBLIC	?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::ctype<char>::_Getcat
PUBLIC	??1?$ctype@D@std@@MAE@XZ			; std::ctype<char>::~ctype<char>
PUBLIC	?do_tolower@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_tolower
PUBLIC	?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z	; std::ctype<char>::do_tolower
PUBLIC	?do_toupper@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_toupper
PUBLIC	?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z	; std::ctype<char>::do_toupper
PUBLIC	?do_widen@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_widen
PUBLIC	?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z	; std::ctype<char>::do_widen
PUBLIC	?do_narrow@?$ctype@D@std@@MBEDDD@Z		; std::ctype<char>::do_narrow
PUBLIC	?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z	; std::ctype<char>::do_narrow
PUBLIC	??_G?$ctype@D@std@@MAEPAXI@Z			; std::ctype<char>::`scalar deleting destructor'
PUBLIC	??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
PUBLIC	??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??1TPropertyBuilding@prt@@QAE@XZ		; prt::TPropertyBuilding::~TPropertyBuilding
PUBLIC	??1TPropertyEffect@prt@@QAE@XZ			; prt::TPropertyEffect::~TPropertyEffect
PUBLIC	??1TPropertyAmbience@prt@@QAE@XZ		; prt::TPropertyAmbience::~TPropertyAmbience
PUBLIC	??1TPropertyDungeonBlock@prt@@QAE@XZ		; prt::TPropertyDungeonBlock::~TPropertyDungeonBlock
PUBLIC	??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z ; std::_Traits_compare<std::char_traits<char> >
PUBLIC	??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
PUBLIC	??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??1?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> >,0> >
PUBLIC	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >::_Lrotate
PUBLIC	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >::_Rrotate
PUBLIC	?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >::_Extract
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >::_Insert_node
PUBLIC	??1?$map@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@@std@@QAE@XZ ; std::map<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> > >::~map<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> > >
PUBLIC	??1?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@QAE@XZ ; std::vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >::~vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >
PUBLIC	?_Xlength@?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@CAXXZ ; std::vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >::_Xlength
PUBLIC	?InitializeRotation@SObjectData@CArea@@QAEXXZ	; CArea::SObjectData::InitializeRotation
PUBLIC	??1?$vector@USObjectData@CArea@@V?$allocator@USObjectData@CArea@@@std@@@std@@QAE@XZ ; std::vector<CArea::SObjectData,std::allocator<CArea::SObjectData> >::~vector<CArea::SObjectData,std::allocator<CArea::SObjectData> >
PUBLIC	?_Xlength@?$vector@USObjectData@CArea@@V?$allocator@USObjectData@CArea@@@std@@@std@@CAXXZ ; std::vector<CArea::SObjectData,std::allocator<CArea::SObjectData> >::_Xlength
PUBLIC	??0SAmbienceInstance@CArea@@QAE@XZ		; CArea::SAmbienceInstance::SAmbienceInstance
PUBLIC	??1SAmbienceInstance@CArea@@UAE@XZ		; CArea::SAmbienceInstance::~SAmbienceInstance
PUBLIC	?__Update@SAmbienceInstance@CArea@@QAEXMMM@Z	; CArea::SAmbienceInstance::__Update
PUBLIC	?UpdateOnceSound@SAmbienceInstance@CArea@@QAEXMMM@Z ; CArea::SAmbienceInstance::UpdateOnceSound
PUBLIC	?UpdateStepSound@SAmbienceInstance@CArea@@QAEXMMM@Z ; CArea::SAmbienceInstance::UpdateStepSound
PUBLIC	?UpdateLoopSound@SAmbienceInstance@CArea@@QAEXMMM@Z ; CArea::SAmbienceInstance::UpdateLoopSound
PUBLIC	?Render@SAmbienceInstance@CArea@@QAEXXZ		; CArea::SAmbienceInstance::Render
PUBLIC	?Picking@SAmbienceInstance@CArea@@QAE_NXZ	; CArea::SAmbienceInstance::Picking
PUBLIC	?__GetVolumeFromDistance@SAmbienceInstance@CArea@@QAEMM@Z ; CArea::SAmbienceInstance::__GetVolumeFromDistance
PUBLIC	??_GSAmbienceInstance@CArea@@UAEPAXI@Z		; CArea::SAmbienceInstance::`scalar deleting destructor'
PUBLIC	?SetTree@SObjectInstance@CArea@@QAEXMMMKPBD@Z	; CArea::SObjectInstance::SetTree
PUBLIC	??1SObjectInstance@CArea@@UAE@XZ		; CArea::SObjectInstance::~SObjectInstance
PUBLIC	??_GSObjectInstance@CArea@@UAEPAXI@Z		; CArea::SObjectInstance::`scalar deleting destructor'
PUBLIC	??0CArea@@QAE@XZ				; CArea::CArea
PUBLIC	??1CArea@@UAE@XZ				; CArea::~CArea
PUBLIC	?CollectRenderingObject@CArea@@QAEXAAV?$vector@PAVCGraphicThingInstance@@V?$allocator@PAVCGraphicThingInstance@@@std@@@std@@@Z ; CArea::CollectRenderingObject
PUBLIC	?CollectBlendRenderingObject@CArea@@QAEXAAV?$vector@PAVCGraphicThingInstance@@V?$allocator@PAVCGraphicThingInstance@@@std@@@std@@@Z ; CArea::CollectBlendRenderingObject
PUBLIC	?SetMapOutDoor@CArea@@QAEXPAVCMapOutdoor@@@Z	; CArea::SetMapOutDoor
PUBLIC	?Clear@CArea@@QAEXXZ				; CArea::Clear
PUBLIC	?Load@CArea@@QAE_NPBD@Z				; CArea::Load
PUBLIC	?GetObjectDataCount@CArea@@QAEKXZ		; CArea::GetObjectDataCount
PUBLIC	?GetObjectDataPointer@CArea@@QBE_NKPAPBUSObjectData@1@@Z ; CArea::GetObjectDataPointer
PUBLIC	?GetObjectInstanceCount@CArea@@QBE?BKXZ		; CArea::GetObjectInstanceCount
PUBLIC	?GetObjectInstancePointer@CArea@@QBE?B_NABKPAPBUSObjectInstance@1@@Z ; CArea::GetObjectInstancePointer
PUBLIC	?EnablePortal@CArea@@QAEXH@Z			; CArea::EnablePortal
PUBLIC	?ClearPortal@CArea@@QAEXXZ			; CArea::ClearPortal
PUBLIC	?AddShowingPortalID@CArea@@QAEXH@Z		; CArea::AddShowingPortalID
PUBLIC	?RefreshPortal@CArea@@QAEXXZ			; CArea::RefreshPortal
PUBLIC	?Update@CArea@@QAEXXZ				; CArea::Update
PUBLIC	?UpdateAroundAmbience@CArea@@QAEXMMM@Z		; CArea::UpdateAroundAmbience
PUBLIC	?Render@CArea@@QAEXXZ				; CArea::Render
PUBLIC	?RenderEffect@CArea@@QAEXXZ			; CArea::RenderEffect
PUBLIC	?RenderCollision@CArea@@QAEXXZ			; CArea::RenderCollision
PUBLIC	?RenderAmbience@CArea@@QAEXXZ			; CArea::RenderAmbience
PUBLIC	?RenderDungeon@CArea@@QAEXXZ			; CArea::RenderDungeon
PUBLIC	?Refresh@CArea@@QAEXXZ				; CArea::Refresh
PUBLIC	?SetCoordinate@CArea@@QAEXABG0@Z		; CArea::SetCoordinate
PUBLIC	?GetCoordinate@CArea@@QAEXPAG0@Z		; CArea::GetCoordinate
PUBLIC	?DEBUG_GetRenderedCRCNum@CArea@@QAEKXZ		; CArea::DEBUG_GetRenderedCRCNum
PUBLIC	?DEBUG_GetRenderedCRCWithNumVector@CArea@@QAEAAV?$vector@USCRCWithNumber@CArea@@V?$allocator@USCRCWithNumber@CArea@@@std@@@std@@XZ ; CArea::DEBUG_GetRenderedCRCWithNumVector
PUBLIC	?DEBUG_GetRenderedGrapphicThingInstanceNum@CArea@@QAEKXZ ; CArea::DEBUG_GetRenderedGrapphicThingInstanceNum
PUBLIC	?CheckObjectIndex@CArea@@IBE_NK@Z		; CArea::CheckObjectIndex
PUBLIC	?__Load_LoadObject@CArea@@IAE_NPBD@Z		; CArea::__Load_LoadObject
PUBLIC	?__Load_LoadAmbience@CArea@@IAE_NPBD@Z		; CArea::__Load_LoadAmbience
PUBLIC	?__Load_BuildObjectInstances@CArea@@IAEXXZ	; CArea::__Load_BuildObjectInstances
PUBLIC	?__UpdateAniThingList@CArea@@IAEXXZ		; CArea::__UpdateAniThingList
PUBLIC	?__UpdateEffectList@CArea@@IAEXXZ		; CArea::__UpdateEffectList
PUBLIC	?__LoadAttribute@CArea@@IAEXPAUSObjectInstance@1@PBD@Z ; CArea::__LoadAttribute
PUBLIC	?__Clear_DestroyObjectInstance@CArea@@IAEXPAUSObjectInstance@1@@Z ; CArea::__Clear_DestroyObjectInstance
PUBLIC	?__SetObjectInstance@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@@Z ; CArea::__SetObjectInstance
PUBLIC	?__SetObjectInstance_SetTree@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z ; CArea::__SetObjectInstance_SetTree
PUBLIC	?__SetObjectInstance_SetBuilding@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z ; CArea::__SetObjectInstance_SetBuilding
PUBLIC	?__SetObjectInstance_SetEffect@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z ; CArea::__SetObjectInstance_SetEffect
PUBLIC	?__SetObjectInstance_SetAmbience@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z ; CArea::__SetObjectInstance_SetAmbience
PUBLIC	?__SetObjectInstance_SetDungeonBlock@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z ; CArea::__SetObjectInstance_SetDungeonBlock
PUBLIC	??1?$vector@PAUSObjectInstance@CArea@@V?$allocator@PAUSObjectInstance@CArea@@@std@@@std@@QAE@XZ ; std::vector<CArea::SObjectInstance *,std::allocator<CArea::SObjectInstance *> >::~vector<CArea::SObjectInstance *,std::allocator<CArea::SObjectInstance *> >
PUBLIC	?_Change_array@?$vector@PAUSObjectInstance@CArea@@V?$allocator@PAUSObjectInstance@CArea@@@std@@@std@@AAEXQAPAUSObjectInstance@CArea@@II@Z ; std::vector<CArea::SObjectInstance *,std::allocator<CArea::SObjectInstance *> >::_Change_array
PUBLIC	?_Xlength@?$vector@PAUSObjectInstance@CArea@@V?$allocator@PAUSObjectInstance@CArea@@@std@@@std@@CAXXZ ; std::vector<CArea::SObjectInstance *,std::allocator<CArea::SObjectInstance *> >::_Xlength
PUBLIC	??1?$vector@PAVCGraphicThingInstance@@V?$allocator@PAVCGraphicThingInstance@@@std@@@std@@QAE@XZ ; std::vector<CGraphicThingInstance *,std::allocator<CGraphicThingInstance *> >::~vector<CGraphicThingInstance *,std::allocator<CGraphicThingInstance *> >
PUBLIC	?_Xlength@?$vector@PAVCGraphicThingInstance@@V?$allocator@PAVCGraphicThingInstance@@@std@@@std@@CAXXZ ; std::vector<CGraphicThingInstance *,std::allocator<CGraphicThingInstance *> >::_Xlength
PUBLIC	??1?$vector@PAVCDungeonBlock@@V?$allocator@PAVCDungeonBlock@@@std@@@std@@QAE@XZ ; std::vector<CDungeonBlock *,std::allocator<CDungeonBlock *> >::~vector<CDungeonBlock *,std::allocator<CDungeonBlock *> >
PUBLIC	?_Xlength@?$vector@PAVCDungeonBlock@@V?$allocator@PAVCDungeonBlock@@@std@@@std@@CAXXZ ; std::vector<CDungeonBlock *,std::allocator<CDungeonBlock *> >::_Xlength
PUBLIC	??1?$vector@PAUSAmbienceInstance@CArea@@V?$allocator@PAUSAmbienceInstance@CArea@@@std@@@std@@QAE@XZ ; std::vector<CArea::SAmbienceInstance *,std::allocator<CArea::SAmbienceInstance *> >::~vector<CArea::SAmbienceInstance *,std::allocator<CArea::SAmbienceInstance *> >
PUBLIC	?_Xlength@?$vector@PAUSAmbienceInstance@CArea@@V?$allocator@PAUSAmbienceInstance@CArea@@@std@@@std@@CAXXZ ; std::vector<CArea::SAmbienceInstance *,std::allocator<CArea::SAmbienceInstance *> >::_Xlength
PUBLIC	??1?$_Tree@V?$_Tmap_traits@PAVCGraphicThingInstance@@KU?$less@PAVCGraphicThingInstance@@@std@@V?$allocator@U?$pair@QAVCGraphicThingInstance@@K@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<CGraphicThingInstance *,unsigned long,std::less<CGraphicThingInstance *>,std::allocator<std::pair<CGraphicThingInstance * const,unsigned long> >,0> >::~_Tree<std::_Tmap_traits<CGraphicThingInstance *,unsigned long,std::less<CGraphicThingInstance *>,std::allocator<std::pair<CGraphicThingInstance * const,unsigned long> >,0> >
PUBLIC	?clear@?$_Tree@V?$_Tmap_traits@PAVCGraphicThingInstance@@KU?$less@PAVCGraphicThingInstance@@@std@@V?$allocator@U?$pair@QAVCGraphicThingInstance@@K@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<CGraphicThingInstance *,unsigned long,std::less<CGraphicThingInstance *>,std::allocator<std::pair<CGraphicThingInstance * const,unsigned long> >,0> >::clear
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCGraphicThingInstance@@K@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<CGraphicThingInstance * const,unsigned long> > >::_Insert_node
PUBLIC	??1?$map@PAVCGraphicThingInstance@@KU?$less@PAVCGraphicThingInstance@@@std@@V?$allocator@U?$pair@QAVCGraphicThingInstance@@K@std@@@3@@std@@QAE@XZ ; std::map<CGraphicThingInstance *,unsigned long,std::less<CGraphicThingInstance *>,std::allocator<std::pair<CGraphicThingInstance * const,unsigned long> > >::~map<CGraphicThingInstance *,unsigned long,std::less<CGraphicThingInstance *>,std::allocator<std::pair<CGraphicThingInstance * const,unsigned long> > >
PUBLIC	??1?$vector@USCRCWithNumber@CArea@@V?$allocator@USCRCWithNumber@CArea@@@std@@@std@@QAE@XZ ; std::vector<CArea::SCRCWithNumber,std::allocator<CArea::SCRCWithNumber> >::~vector<CArea::SCRCWithNumber,std::allocator<CArea::SCRCWithNumber> >
PUBLIC	?_Xlength@?$vector@USCRCWithNumber@CArea@@V?$allocator@USCRCWithNumber@CArea@@@std@@@std@@CAXXZ ; std::vector<CArea::SCRCWithNumber,std::allocator<CArea::SCRCWithNumber> >::_Xlength
PUBLIC	??1?$_Tree@V?$_Tset_traits@HU?$less@H@std@@V?$allocator@H@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tset_traits<int,std::less<int>,std::allocator<int>,0> >::~_Tree<std::_Tset_traits<int,std::less<int>,std::allocator<int>,0> >
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@H@std@@@std@@QAEPAU?$_Tree_node@HPAX@2@U?$_Tree_id@PAU?$_Tree_node@HPAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<int> >::_Insert_node
PUBLIC	?DestroySystem@CArea@@SAXXZ			; CArea::DestroySystem
PUBLIC	?New@CArea@@SAPAV1@XZ				; CArea::New
PUBLIC	?Delete@CArea@@SAXPAV1@@Z			; CArea::Delete
PUBLIC	??_GCArea@@UAEPAXI@Z				; CArea::`scalar deleting destructor'
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >::_Insert_node
PUBLIC	??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@@std@@QAE@XZ ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >::~map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >
PUBLIC	??1?$CDynamicPool@USObjectInstance@CArea@@@@UAE@XZ ; CDynamicPool<CArea::SObjectInstance>::~CDynamicPool<CArea::SObjectInstance>
PUBLIC	?Delete@?$CDynamicPool@USObjectInstance@CArea@@@@KAXPAUSObjectInstance@CArea@@@Z ; CDynamicPool<CArea::SObjectInstance>::Delete
PUBLIC	??1?$CDynamicPool@VCAttributeInstance@@@@UAE@XZ	; CDynamicPool<CAttributeInstance>::~CDynamicPool<CAttributeInstance>
PUBLIC	?Delete@?$CDynamicPool@VCAttributeInstance@@@@KAXPAVCAttributeInstance@@@Z ; CDynamicPool<CAttributeInstance>::Delete
PUBLIC	?_Xlength@?$vector@PAVCAttributeInstance@@V?$allocator@PAVCAttributeInstance@@@std@@@std@@CAXXZ ; std::vector<CAttributeInstance *,std::allocator<CAttributeInstance *> >::_Xlength
PUBLIC	??1?$CDynamicPool@USAmbienceInstance@CArea@@@@UAE@XZ ; CDynamicPool<CArea::SAmbienceInstance>::~CDynamicPool<CArea::SAmbienceInstance>
PUBLIC	?Delete@?$CDynamicPool@USAmbienceInstance@CArea@@@@KAXPAUSAmbienceInstance@CArea@@@Z ; CDynamicPool<CArea::SAmbienceInstance>::Delete
PUBLIC	??1?$CDynamicPool@VCDungeonBlock@@@@UAE@XZ	; CDynamicPool<CDungeonBlock>::~CDynamicPool<CDungeonBlock>
PUBLIC	?Delete@?$CDynamicPool@VCDungeonBlock@@@@KAXPAVCDungeonBlock@@@Z ; CDynamicPool<CDungeonBlock>::Delete
PUBLIC	??1?$CDynamicPool@VCArea@@@@UAE@XZ		; CDynamicPool<CArea>::~CDynamicPool<CArea>
PUBLIC	?Delete@?$CDynamicPool@VCArea@@@@KAXPAVCArea@@@Z ; CDynamicPool<CArea>::Delete
PUBLIC	?_Xlength@?$vector@PAVCArea@@V?$allocator@PAVCArea@@@std@@@std@@CAXXZ ; std::vector<CArea *,std::allocator<CArea *> >::_Xlength
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >,std::_Iterator_base0>::operator++
PUBLIC	?_Xlength@?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@CAXXZ ; std::vector<CEffectInstance *,std::allocator<CEffectInstance *> >::_Xlength
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD$$QAV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$_Tree@V?$_Tset_traits@PAUSObjectInstance@CArea@@U?$less@PAUSObjectInstance@CArea@@@std@@V?$allocator@PAUSObjectInstance@CArea@@@4@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tset_traits<CArea::SObjectInstance *,std::less<CArea::SObjectInstance *>,std::allocator<CArea::SObjectInstance *>,0> >::~_Tree<std::_Tset_traits<CArea::SObjectInstance *,std::less<CArea::SObjectInstance *>,std::allocator<CArea::SObjectInstance *>,0> >
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@PAUSObjectInstance@CArea@@@std@@@std@@QAEPAU?$_Tree_node@PAUSObjectInstance@CArea@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@PAUSObjectInstance@CArea@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<CArea::SObjectInstance *> >::_Insert_node
PUBLIC	??1?$set@PAUSObjectInstance@CArea@@U?$less@PAUSObjectInstance@CArea@@@std@@V?$allocator@PAUSObjectInstance@CArea@@@4@@std@@QAE@XZ ; std::set<CArea::SObjectInstance *,std::less<CArea::SObjectInstance *>,std::allocator<CArea::SObjectInstance *> >::~set<CArea::SObjectInstance *,std::less<CArea::SObjectInstance *>,std::allocator<CArea::SObjectInstance *> >
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@PAUSObjectInstance@CArea@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@PAUSObjectInstance@CArea@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@PAUSObjectInstance@CArea@@PAX@std@@@1@PAU?$_Tree_node@PAUSObjectInstance@CArea@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<CArea::SObjectInstance *> >::_Erase_tree<std::allocator<std::_Tree_node<CArea::SObjectInstance *,void *> > >
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@HPAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@H@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@HPAX@std@@@1@PAU?$_Tree_node@HPAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<int> >::_Erase_tree<std::allocator<std::_Tree_node<int,void *> > >
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCGraphicThingInstance@@K@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<CGraphicThingInstance * const,unsigned long> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<CGraphicThingInstance * const,unsigned long>,void *> > >
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CEffectInstance *>,void *> > >
PUBLIC	??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@KAXPAVCRotationDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@KAXPAVCGravityDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@KAXPAVCAirResistanceDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@KAXPAVCNullDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@KAXPAVCHeaderDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::Delete
PUBLIC	??$_Sort_unchecked@PAPAVCEffectInstance@@UCArea_LessEffectInstancePtrRenderOrder@@@std@@YAXPAPAVCEffectInstance@@0HUCArea_LessEffectInstancePtrRenderOrder@@@Z ; std::_Sort_unchecked<CEffectInstance * *,CArea_LessEffectInstancePtrRenderOrder>
PUBLIC	??$_Sort_unchecked@PAUSCRCWithNumber@CArea@@UCRCNumComp@2@@std@@YAXPAUSCRCWithNumber@CArea@@0HUCRCNumComp@2@@Z ; std::_Sort_unchecked<CArea::SCRCWithNumber *,CArea::CRCNumComp>
PUBLIC	??$_Sort_unchecked@PAUSObjectData@CArea@@UObjectDataComp@2@@std@@YAXPAUSObjectData@CArea@@0HUObjectDataComp@2@@Z ; std::_Sort_unchecked<CArea::SObjectData *,CArea::ObjectDataComp>
PUBLIC	??$transform_range@V?$iterator_range@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@boost@@U?$to_lowerF@D@detail@algorithm@2@@detail@algorithm@boost@@YAXABV?$iterator_range@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@2@U?$to_lowerF@D@012@@Z ; boost::algorithm::detail::transform_range<boost::iterator_range<std::_String_iterator<std::_String_val<std::_Simple_types<char> > > >,boost::algorithm::detail::to_lowerF<char> >
PUBLIC	??$_Find_lower_bound@PAUSObjectInstance@CArea@@@?$_Tree@V?$_Tset_traits@PAUSObjectInstance@CArea@@U?$less@PAUSObjectInstance@CArea@@@std@@V?$allocator@PAUSObjectInstance@CArea@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@PAUSObjectInstance@CArea@@PAX@std@@@1@ABQAUSObjectInstance@CArea@@@Z ; std::_Tree<std::_Tset_traits<CArea::SObjectInstance *,std::less<CArea::SObjectInstance *>,std::allocator<CArea::SObjectInstance *>,0> >::_Find_lower_bound<CArea::SObjectInstance *>
PUBLIC	??$_Emplace_reallocate@ABQAVCEffectInstance@@@?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@AAEPAPAVCEffectInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CEffectInstance *,std::allocator<CEffectInstance *> >::_Emplace_reallocate<CEffectInstance * const &>
PUBLIC	??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >
PUBLIC	??$_Find_lower_bound@H@?$_Tree@V?$_Tset_traits@HU?$less@H@std@@V?$allocator@H@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@HPAX@std@@@1@ABH@Z ; std::_Tree<std::_Tset_traits<int,std::less<int>,std::allocator<int>,0> >::_Find_lower_bound<int>
PUBLIC	??$_Emplace_reallocate@ABUSCRCWithNumber@CArea@@@?$vector@USCRCWithNumber@CArea@@V?$allocator@USCRCWithNumber@CArea@@@std@@@std@@AAEPAUSCRCWithNumber@CArea@@QAU23@ABU23@@Z ; std::vector<CArea::SCRCWithNumber,std::allocator<CArea::SCRCWithNumber> >::_Emplace_reallocate<CArea::SCRCWithNumber const &>
PUBLIC	??$_Find_lower_bound@PAVCGraphicThingInstance@@@?$_Tree@V?$_Tmap_traits@PAVCGraphicThingInstance@@KU?$less@PAVCGraphicThingInstance@@@std@@V?$allocator@U?$pair@QAVCGraphicThingInstance@@K@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@std@@@1@ABQAVCGraphicThingInstance@@@Z ; std::_Tree<std::_Tmap_traits<CGraphicThingInstance *,unsigned long,std::less<CGraphicThingInstance *>,std::allocator<std::pair<CGraphicThingInstance * const,unsigned long> >,0> >::_Find_lower_bound<CGraphicThingInstance *>
PUBLIC	??$_Emplace_reallocate@ABQAUSAmbienceInstance@CArea@@@?$vector@PAUSAmbienceInstance@CArea@@V?$allocator@PAUSAmbienceInstance@CArea@@@std@@@std@@AAEPAPAUSAmbienceInstance@CArea@@QAPAU23@ABQAU23@@Z ; std::vector<CArea::SAmbienceInstance *,std::allocator<CArea::SAmbienceInstance *> >::_Emplace_reallocate<CArea::SAmbienceInstance * const &>
PUBLIC	??$_Emplace_reallocate@ABQAVCDungeonBlock@@@?$vector@PAVCDungeonBlock@@V?$allocator@PAVCDungeonBlock@@@std@@@std@@AAEPAPAVCDungeonBlock@@QAPAV2@ABQAV2@@Z ; std::vector<CDungeonBlock *,std::allocator<CDungeonBlock *> >::_Emplace_reallocate<CDungeonBlock * const &>
PUBLIC	??$_Emplace_reallocate@ABQAVCGraphicThingInstance@@@?$vector@PAVCGraphicThingInstance@@V?$allocator@PAVCGraphicThingInstance@@@std@@@std@@AAEPAPAVCGraphicThingInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CGraphicThingInstance *,std::allocator<CGraphicThingInstance *> >::_Emplace_reallocate<CGraphicThingInstance * const &>
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUSObjectInstance@CArea@@V?$allocator@PAUSObjectInstance@CArea@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<CArea::SObjectInstance *,std::allocator<CArea::SObjectInstance *> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Emplace_reallocate@ABUSObjectData@CArea@@@?$vector@USObjectData@CArea@@V?$allocator@USObjectData@CArea@@@std@@@std@@AAEPAUSObjectData@CArea@@QAU23@ABU23@@Z ; std::vector<CArea::SObjectData,std::allocator<CArea::SObjectData> >::_Emplace_reallocate<CArea::SObjectData const &>
PUBLIC	??$_Emplace_reallocate@ABQAVCSpeedTreeWrapper@@@?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@AAEPAPAVCSpeedTreeWrapper@@QAPAV2@ABQAV2@@Z ; std::vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >::_Emplace_reallocate<CSpeedTreeWrapper * const &>
PUBLIC	??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> >,0> >::_Find_lower_bound<unsigned long>
PUBLIC	??$_Emplace_reallocate@ABQAVCArea@@@?$vector@PAVCArea@@V?$allocator@PAVCArea@@@std@@@std@@AAEPAPAVCArea@@QAPAV2@ABQAV2@@Z ; std::vector<CArea *,std::allocator<CArea *> >::_Emplace_reallocate<CArea * const &>
PUBLIC	??$_Emplace_reallocate@ABQAVCAttributeInstance@@@?$vector@PAVCAttributeInstance@@V?$allocator@PAVCAttributeInstance@@@std@@@std@@AAEPAPAVCAttributeInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CAttributeInstance *,std::allocator<CAttributeInstance *> >::_Emplace_reallocate<CAttributeInstance * const &>
PUBLIC	??$_Emplace_reallocate@ABQAUSObjectInstance@CArea@@@?$vector@PAUSObjectInstance@CArea@@V?$allocator@PAUSObjectInstance@CArea@@@std@@@std@@AAEPAPAUSObjectInstance@CArea@@QAPAU23@ABQAU23@@Z ; std::vector<CArea::SObjectInstance *,std::allocator<CArea::SObjectInstance *> >::_Emplace_reallocate<CArea::SObjectInstance * const &>
PUBLIC	??$destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >::destroy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >
PUBLIC	??$_Reallocate_grow_by@V<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_4d79bb85f269e6e8002a4599002d832c>,unsigned int,char const *,unsigned int>
PUBLIC	??$_Partition_by_median_guess_unchecked@PAPAVCEffectInstance@@UCArea_LessEffectInstancePtrRenderOrder@@@std@@YA?AU?$pair@PAPAVCEffectInstance@@PAPAV1@@0@PAPAVCEffectInstance@@0UCArea_LessEffectInstancePtrRenderOrder@@@Z ; std::_Partition_by_median_guess_unchecked<CEffectInstance * *,CArea_LessEffectInstancePtrRenderOrder>
PUBLIC	??$_Partition_by_median_guess_unchecked@PAUSCRCWithNumber@CArea@@UCRCNumComp@2@@std@@YA?AU?$pair@PAUSCRCWithNumber@CArea@@PAU12@@0@PAUSCRCWithNumber@CArea@@0UCRCNumComp@3@@Z ; std::_Partition_by_median_guess_unchecked<CArea::SCRCWithNumber *,CArea::CRCNumComp>
PUBLIC	??$_Make_heap_unchecked@PAUSObjectData@CArea@@UObjectDataComp@2@@std@@YAXPAUSObjectData@CArea@@0UObjectDataComp@2@@Z ; std::_Make_heap_unchecked<CArea::SObjectData *,CArea::ObjectDataComp>
PUBLIC	??$_Partition_by_median_guess_unchecked@PAUSObjectData@CArea@@UObjectDataComp@2@@std@@YA?AU?$pair@PAUSObjectData@CArea@@PAU12@@0@PAUSObjectData@CArea@@0UObjectDataComp@3@@Z ; std::_Partition_by_median_guess_unchecked<CArea::SObjectData *,CArea::ObjectDataComp>
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<CGraphicThingInstance * const,unsigned long>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<CGraphicThingInstance * const,unsigned long>,void *> > >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CEffectInstance *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CEffectInstance *>,void *> > >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@HPAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<int,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<int,void *> > >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@PAUSObjectInstance@CArea@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<CArea::SObjectInstance *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<CArea::SObjectInstance *,void *> > >
PUBLIC	??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$_Zero_range@PAPAUSObjectInstance@CArea@@@std@@YAPAPAUSObjectInstance@CArea@@QAPAU12@0@Z ; std::_Zero_range<CArea::SObjectInstance * *>
PUBLIC	??$_Pop_heap_hole_by_index@PAPAVCEffectInstance@@PAV1@UCArea_LessEffectInstancePtrRenderOrder@@@std@@YAXPAPAVCEffectInstance@@HH$$QAPAV1@UCArea_LessEffectInstancePtrRenderOrder@@@Z ; std::_Pop_heap_hole_by_index<CEffectInstance * *,CEffectInstance *,CArea_LessEffectInstancePtrRenderOrder>
PUBLIC	??$_Guess_median_unchecked@PAPAVCEffectInstance@@UCArea_LessEffectInstancePtrRenderOrder@@@std@@YAXPAPAVCEffectInstance@@00UCArea_LessEffectInstancePtrRenderOrder@@@Z ; std::_Guess_median_unchecked<CEffectInstance * *,CArea_LessEffectInstancePtrRenderOrder>
PUBLIC	??$_Pop_heap_hole_by_index@PAUSCRCWithNumber@CArea@@U12@UCRCNumComp@2@@std@@YAXPAUSCRCWithNumber@CArea@@HH$$QAU12@UCRCNumComp@2@@Z ; std::_Pop_heap_hole_by_index<CArea::SCRCWithNumber *,CArea::SCRCWithNumber,CArea::CRCNumComp>
PUBLIC	??$_Pop_heap_hole_by_index@PAUSObjectData@CArea@@U12@UObjectDataComp@2@@std@@YAXPAUSObjectData@CArea@@HH$$QAU12@UObjectDataComp@2@@Z ; std::_Pop_heap_hole_by_index<CArea::SObjectData *,CArea::SObjectData,CArea::ObjectDataComp>
PUBLIC	??$_Copy_memmove@PAPAVCEffectInstance@@PAPAV1@@std@@YAPAPAVCEffectInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CEffectInstance * *,CEffectInstance * *>
PUBLIC	??$_Copy_memmove@PAUSCRCWithNumber@CArea@@PAU12@@std@@YAPAUSCRCWithNumber@CArea@@PAU12@00@Z ; std::_Copy_memmove<CArea::SCRCWithNumber *,CArea::SCRCWithNumber *>
PUBLIC	??$_Copy_memmove@PAPAUSAmbienceInstance@CArea@@PAPAU12@@std@@YAPAPAUSAmbienceInstance@CArea@@PAPAU12@00@Z ; std::_Copy_memmove<CArea::SAmbienceInstance * *,CArea::SAmbienceInstance * *>
PUBLIC	??$_Copy_memmove@PAPAVCDungeonBlock@@PAPAV1@@std@@YAPAPAVCDungeonBlock@@PAPAV1@00@Z ; std::_Copy_memmove<CDungeonBlock * *,CDungeonBlock * *>
PUBLIC	??$_Copy_memmove@PAPAVCGraphicThingInstance@@PAPAV1@@std@@YAPAPAVCGraphicThingInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicThingInstance * *,CGraphicThingInstance * *>
PUBLIC	??$_Copy_memmove@PAPAUSObjectInstance@CArea@@PAPAU12@@std@@YAPAPAUSObjectInstance@CArea@@PAPAU12@00@Z ; std::_Copy_memmove<CArea::SObjectInstance * *,CArea::SObjectInstance * *>
PUBLIC	??$_Copy_memmove@PAUSObjectData@CArea@@PAU12@@std@@YAPAUSObjectData@CArea@@PAU12@00@Z ; std::_Copy_memmove<CArea::SObjectData *,CArea::SObjectData *>
PUBLIC	??$_Copy_memmove@PAPAVCSpeedTreeWrapper@@PAPAV1@@std@@YAPAPAVCSpeedTreeWrapper@@PAPAV1@00@Z ; std::_Copy_memmove<CSpeedTreeWrapper * *,CSpeedTreeWrapper * *>
PUBLIC	??$_Copy_memmove@PAPAVCArea@@PAPAV1@@std@@YAPAPAVCArea@@PAPAV1@00@Z ; std::_Copy_memmove<CArea * *,CArea * *>
PUBLIC	??$_Copy_memmove@PAPAVCAttributeInstance@@PAPAV1@@std@@YAPAPAVCAttributeInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CAttributeInstance * *,CAttributeInstance * *>
PUBLIC	??$tolower@D@std@@YADDABVlocale@0@@Z		; std::tolower<char>
PUBLIC	??$_Copy_backward_memmove@PAPAVCEffectInstance@@PAPAV1@@std@@YAPAPAVCEffectInstance@@PAPAV1@00@Z ; std::_Copy_backward_memmove<CEffectInstance * *,CEffectInstance * *>
PUBLIC	??$_Copy_backward_memmove@PAUSCRCWithNumber@CArea@@PAU12@@std@@YAPAUSCRCWithNumber@CArea@@PAU12@00@Z ; std::_Copy_backward_memmove<CArea::SCRCWithNumber *,CArea::SCRCWithNumber *>
PUBLIC	??$_Med3_unchecked@PAUSCRCWithNumber@CArea@@UCRCNumComp@2@@std@@YAXPAUSCRCWithNumber@CArea@@00UCRCNumComp@2@@Z ; std::_Med3_unchecked<CArea::SCRCWithNumber *,CArea::CRCNumComp>
PUBLIC	??$_Copy_backward_memmove@PAUSObjectData@CArea@@PAU12@@std@@YAPAUSObjectData@CArea@@PAU12@00@Z ; std::_Copy_backward_memmove<CArea::SObjectData *,CArea::SObjectData *>
PUBLIC	??$_Med3_unchecked@PAUSObjectData@CArea@@UObjectDataComp@2@@std@@YAXPAUSObjectData@CArea@@00UObjectDataComp@2@@Z ; std::_Med3_unchecked<CArea::SObjectData *,CArea::ObjectDataComp>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_0BB@GCADKGJO@map?1set?5too?5long@		; `string'
PUBLIC	?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
PUBLIC	??_7bad_cast@std@@6B@				; std::bad_cast::`vftable'
PUBLIC	??_C@_08EPJLHIJG@bad?5cast@			; `string'
PUBLIC	__TI2?AVbad_cast@std@@
PUBLIC	__CTA2?AVbad_cast@std@@
PUBLIC	??_R0?AVbad_cast@std@@@8			; std::bad_cast `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
PUBLIC	??_7_Facet_base@std@@6B@			; std::_Facet_base::`vftable'
PUBLIC	??_C@_0BA@ELKIONDK@bad?5locale?5name@		; `string'
PUBLIC	??_7facet@locale@std@@6B@			; std::locale::facet::`vftable'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_7ctype_base@std@@6B@				; std::ctype_base::`vftable'
PUBLIC	??_7?$ctype@D@std@@6B@				; std::ctype<char>::`vftable'
PUBLIC	?ms_singleton@?$CSingleton@VCSoundManager@@@@0PAVCSoundManager@@A ; CSingleton<CSoundManager>::ms_singleton
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position@	; `string'
PUBLIC	?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_cast@std@@6B@				; std::bad_cast::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_cast@std@@8				; std::bad_cast::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_cast@std@@8				; std::bad_cast::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_cast@std@@8			; std::bad_cast::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Facet_base@std@@6B@			; std::_Facet_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Facet_base@std@@@8			; std::_Facet_base `RTTI Type Descriptor'
PUBLIC	??_R3_Facet_base@std@@8				; std::_Facet_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Facet_base@std@@8				; std::_Facet_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Facet_base@std@@8		; std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4facet@locale@std@@6B@			; std::locale::facet::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVfacet@locale@std@@@8			; std::locale::facet `RTTI Type Descriptor'
PUBLIC	??_R3facet@locale@std@@8			; std::locale::facet::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2facet@locale@std@@8			; std::locale::facet::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@facet@locale@std@@8		; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@_Crt_new_delete@std@@8		; std::_Crt_new_delete::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AU_Crt_new_delete@std@@@8			; std::_Crt_new_delete `RTTI Type Descriptor'
PUBLIC	??_R3_Crt_new_delete@std@@8			; std::_Crt_new_delete::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Crt_new_delete@std@@8			; std::_Crt_new_delete::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Crt_new_delete@std@@8		; std::_Crt_new_delete::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4ctype_base@std@@6B@			; std::ctype_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUctype_base@std@@@8			; std::ctype_base `RTTI Type Descriptor'
PUBLIC	??_R3ctype_base@std@@8				; std::ctype_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ctype_base@std@@8				; std::ctype_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ctype_base@std@@8			; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ctype@D@std@@6B@				; std::ctype<char>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ctype@D@std@@@8			; std::ctype<char> `RTTI Type Descriptor'
PUBLIC	??_R3?$ctype@D@std@@8				; std::ctype<char>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ctype@D@std@@8				; std::ctype<char>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ctype@D@std@@8			; std::ctype<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
PUBLIC	?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
PUBLIC	?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool
PUBLIC	?ms_singleton@?$CSingleton@VCEffectManager@@@@0PAVCEffectManager@@A ; CSingleton<CEffectManager>::ms_singleton
PUBLIC	?ms_singleton@?$CSingleton@VCSpeedTreeForestDirectX8@@@@0PAVCSpeedTreeForestDirectX8@@A ; CSingleton<CSpeedTreeForestDirectX8>::ms_singleton
PUBLIC	??_7SAmbienceInstance@CArea@@6B@		; CArea::SAmbienceInstance::`vftable'
PUBLIC	??_7SObjectInstance@CArea@@6B@			; CArea::SObjectInstance::`vftable'
PUBLIC	?ms_ObjectInstancePool@CArea@@1V?$CDynamicPool@USObjectInstance@CArea@@@@A ; CArea::ms_ObjectInstancePool
PUBLIC	?ms_AttributeInstancePool@CArea@@1V?$CDynamicPool@VCAttributeInstance@@@@A ; CArea::ms_AttributeInstancePool
PUBLIC	?ms_AmbienceInstancePool@CArea@@1V?$CDynamicPool@USAmbienceInstance@CArea@@@@A ; CArea::ms_AmbienceInstancePool
PUBLIC	?ms_DungeonBlockInstancePool@CArea@@1V?$CDynamicPool@VCDungeonBlock@@@@A ; CArea::ms_DungeonBlockInstancePool
PUBLIC	?ms_kPool@CArea@@2V?$CDynamicPool@VCArea@@@@A	; CArea::ms_kPool
PUBLIC	??_7CArea@@6B@					; CArea::`vftable'
PUBLIC	?ms_singleton@?$CSingleton@VCPropertyManager@@@@0PAVCPropertyManager@@A ; CSingleton<CPropertyManager>::ms_singleton
PUBLIC	??_C@_0N@FPEBPNJJ@PropertyType@			; `string'
PUBLIC	??_C@_0CL@BOJNBGJP@CArea?3?3SetEffect?5effect?5registe@ ; `string'
PUBLIC	??_C@_08JBFACIKL@TreeFile@			; `string'
PUBLIC	??_C@_0O@NDEAKJNP@_lod_?$CF?42d?4gr2@		; `string'
PUBLIC	??_C@_04GHGHGAKN@ONCE@				; `string'
PUBLIC	??_C@_04MOOLDHHD@STEP@				; `string'
PUBLIC	??_C@_04KGNEGCGI@LOOP@				; `string'
PUBLIC	??_C@_09OLKGEJPN@?1dungeon?1@			; `string'
PUBLIC	??_C@_09PCMKFNFD@?2dungeon?2@			; `string'
PUBLIC	??_C@_0BC@NJPKAPFJ@DummyCollisionOBB@		; `string'
PUBLIC	??_C@_0N@IIOKECFB@AreaData?4txt@		; `string'
PUBLIC	??_C@_0BF@EMGBEFOB@AreaAmbienceData?4txt@	; `string'
PUBLIC	??_C@_0CA@NNOAMPKE@?5CArea?3?3Load?5File?5Load?5?$CFs?5ERROR@ ; `string'
PUBLIC	??_C@_0N@DLGDDPHB@areadatafile@			; `string'
PUBLIC	??_C@_0CM@CJHDNGEF@?5CArea?3?3__LoadObject?5File?5Forma@ ; `string'
PUBLIC	??_C@_0M@IANPHBDM@objectcount@			; `string'
PUBLIC	??_C@_0CM@CFOIFIG@?5CArea?3?3__LoadObject?5File?5Forma@ ; `string'
PUBLIC	??_C@_0L@CHFLOJFF@object?$CF03d@		; `string'
PUBLIC	??_C@_0CL@HHDKLHOE@?5CArea?3?3LoadObject?5Property?$CI?$CFu?$CJ@ ; `string'
PUBLIC	??_C@_0BF@PFPNGEBG@areaambiencedatafile@	; `string'
PUBLIC	??_C@_0CO@ECPJGBAI@?5CArea?3?3__LoadAmbience?5File?5For@ ; `string'
PUBLIC	??_C@_0CO@GJNEDCML@?5CArea?3?3__LoadAmbience?5File?5For@ ; `string'
PUBLIC	??_C@_0CN@BAHENMHD@?5CArea?3?3LoadAmbience?5Property?$CI?$CF@ ; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CArea@@6B@					; CArea::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCArea@@@8				; CArea `RTTI Type Descriptor'
PUBLIC	??_R3CArea@@8					; CArea::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CArea@@8					; CArea::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CArea@@8				; CArea::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4SAmbienceInstance@CArea@@6B@		; CArea::SAmbienceInstance::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUSAmbienceInstance@CArea@@@8		; CArea::SAmbienceInstance `RTTI Type Descriptor'
PUBLIC	??_R3SAmbienceInstance@CArea@@8			; CArea::SAmbienceInstance::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SAmbienceInstance@CArea@@8			; CArea::SAmbienceInstance::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SAmbienceInstance@CArea@@8	; CArea::SAmbienceInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CScreen@@8			; CScreen::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCScreen@@@8				; CScreen `RTTI Type Descriptor'
PUBLIC	??_R3CScreen@@8					; CScreen::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CScreen@@8					; CScreen::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicCollisionObject@@8	; CGraphicCollisionObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicCollisionObject@@@8		; CGraphicCollisionObject `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicCollisionObject@@8			; CGraphicCollisionObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicCollisionObject@@8			; CGraphicCollisionObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicBase@@8			; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicBase@@@8			; CGraphicBase `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicBase@@8				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicBase@@8				; CGraphicBase::`RTTI Base Class Array'
PUBLIC	??_R4SObjectInstance@CArea@@6B@			; CArea::SObjectInstance::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUSObjectInstance@CArea@@@8		; CArea::SObjectInstance `RTTI Type Descriptor'
PUBLIC	??_R3SObjectInstance@CArea@@8			; CArea::SObjectInstance::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SObjectInstance@CArea@@8			; CArea::SObjectInstance::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SObjectInstance@CArea@@8		; CArea::SObjectInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@3c8efa35
PUBLIC	__real@3e800000
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@40490fdb
PUBLIC	__real@41200000
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	___std_terminate:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_free:PROC
EXTRN	_atof:PROC
EXTRN	__atoi64:PROC
EXTRN	_D3DXMatrixRotationYawPitchRoll@16:PROC
EXTRN	_D3DXQuaternionRotationYawPitchRoll@16:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	??0_Lockit@std@@QAE@H@Z:PROC			; std::_Lockit::_Lockit
EXTRN	??1_Lockit@std@@QAE@XZ:PROC			; std::_Lockit::~_Lockit
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?_Xruntime_error@std@@YAXPBD@Z:PROC		; std::_Xruntime_error
EXTRN	?TraceError@@YAXPBDZZ:PROC			; TraceError
EXTRN	?GetCaseCRC32@@YAKPBDI@Z:PROC			; GetCaseCRC32
EXTRN	?GetCurrentSecond@CTimer@@QAEMXZ:PROC		; CTimer::GetCurrentSecond
EXTRN	??_Ebad_cast@std@@UAEPAXI@Z:PROC		; std::bad_cast::`vector deleting destructor'
EXTRN	??_E_Facet_base@std@@UAEPAXI@Z:PROC		; std::_Facet_base::`vector deleting destructor'
EXTRN	?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z:PROC ; std::_Facet_Register
EXTRN	__Getctype:PROC
EXTRN	__Tolower:PROC
EXTRN	__Toupper:PROC
EXTRN	?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@PBD@Z:PROC ; std::_Locinfo::_Locinfo_ctor
EXTRN	?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z:PROC	; std::_Locinfo::_Locinfo_dtor
EXTRN	??_Efacet@locale@std@@MAEPAXI@Z:PROC		; std::locale::facet::`vector deleting destructor'
EXTRN	?_Init@locale@std@@CAPAV_Locimp@12@_N@Z:PROC	; std::locale::_Init
EXTRN	?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ:PROC ; std::locale::_Getgloballocale
EXTRN	??_Ectype_base@std@@UAEPAXI@Z:PROC		; std::ctype_base::`vector deleting destructor'
EXTRN	??_E?$ctype@D@std@@MAEPAXI@Z:PROC		; std::ctype<char>::`vector deleting destructor'
EXTRN	?LoadMultipleTextData@@YA_NPBDAAV?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@@std@@@Z:PROC ; LoadMultipleTextData
EXTRN	?frandom@@YAMMM@Z:PROC				; frandom
EXTRN	?IntersectSphere@CGraphicCollisionObject@@IAE_NABUD3DXVECTOR3@@M@Z:PROC ; CGraphicCollisionObject::IntersectSphere
EXTRN	??0CScreen@@QAE@XZ:PROC				; CScreen::CScreen
EXTRN	??1CScreen@@UAE@XZ:PROC				; CScreen::~CScreen
EXTRN	?Clear@CScreen@@QAEXXZ:PROC			; CScreen::Clear
EXTRN	?RenderLine2d@CScreen@@QAEXMMMMM@Z:PROC		; CScreen::RenderLine2d
EXTRN	?RenderCircle2d@CScreen@@QAEXMMMMH@Z:PROC	; CScreen::RenderCircle2d
EXTRN	?RenderCube@CScreen@@QAEXMMMMMM@Z:PROC		; CScreen::RenderCube
EXTRN	?RenderSphere@CScreen@@QAEXPBUD3DXMATRIX@@MMMMW4_D3DFILLMODE@@@Z:PROC ; CScreen::RenderSphere
EXTRN	?AddReference@CReferenceObject@@QAEXXZ:PROC	; CReferenceObject::AddReference
EXTRN	?Release@CReferenceObject@@QAEXXZ:PROC		; CReferenceObject::Release
EXTRN	?IsEmpty@CResource@@QBE_NXZ:PROC		; CResource::IsEmpty
EXTRN	?StopSound3D@CSoundManager@@QAEXH@Z:PROC	; CSoundManager::StopSound3D
EXTRN	?PlayAmbienceSound3D@CSoundManager@@QAEHMMMPBDH@Z:PROC ; CSoundManager::PlayAmbienceSound3D
EXTRN	?SetSoundVolume3D@CSoundManager@@QAEXHM@Z:PROC	; CSoundManager::SetSoundVolume3D
EXTRN	?GetPropertyType@prt@@YAKPBD@Z:PROC		; prt::GetPropertyType
EXTRN	?PropertyBuildingStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyBuilding@1@@Z:PROC ; prt::PropertyBuildingStringToData
EXTRN	?PropertyEffectStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyEffect@1@@Z:PROC ; prt::PropertyEffectStringToData
EXTRN	?PropertyAmbienceStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyAmbience@1@@Z:PROC ; prt::PropertyAmbienceStringToData
EXTRN	?PropertyDungeonBlockStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyDungeonBlock@1@@Z:PROC ; prt::PropertyDungeonBlockStringToData
EXTRN	?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z:PROC ; CResourceManager::GetResourcePointer
EXTRN	?IsFileExist@CResourceManager@@QAE_NPBD@Z:PROC	; CResourceManager::IsFileExist
EXTRN	?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; CStateManager::SaveRenderState
EXTRN	?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z:PROC ; CStateManager::RestoreRenderState
EXTRN	?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; CStateManager::SetRenderState
EXTRN	?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z:PROC ; CStateManager::SetTexture
EXTRN	?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z:PROC ; CStateManager::SetTextureStageState
EXTRN	?GetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@PAK@Z:PROC ; CStateManager::GetTextureStageState
EXTRN	?GetCollisionDataVector@CAttributeData@@QBEABV?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@XZ:PROC ; CAttributeData::GetCollisionDataVector
EXTRN	?AddCollisionData@CAttributeData@@QAEIABVCStaticCollisionData@@@Z:PROC ; CAttributeData::AddCollisionData
EXTRN	??0CAttributeInstance@@QAE@XZ:PROC		; CAttributeInstance::CAttributeInstance
EXTRN	?Clear@CAttributeInstance@@QAEXXZ:PROC		; CAttributeInstance::Clear
EXTRN	?SetObjectPointer@CAttributeInstance@@QAEXPAVCAttributeData@@@Z:PROC ; CAttributeInstance::SetObjectPointer
EXTRN	?RefreshObject@CAttributeInstance@@QAEXABUD3DXMATRIX@@@Z:PROC ; CAttributeInstance::RefreshObject
EXTRN	?GetObjectPointer@CAttributeInstance@@QBEPAVCAttributeData@@XZ:PROC ; CAttributeInstance::GetObjectPointer
EXTRN	?GetYaw@CGraphicObjectInstance@@QAEMXZ:PROC	; CGraphicObjectInstance::GetYaw
EXTRN	?GetPitch@CGraphicObjectInstance@@QAEMXZ:PROC	; CGraphicObjectInstance::GetPitch
EXTRN	?GetRoll@CGraphicObjectInstance@@QAEMXZ:PROC	; CGraphicObjectInstance::GetRoll
EXTRN	?SetPosition@CGraphicObjectInstance@@QAEXMMM@Z:PROC ; CGraphicObjectInstance::SetPosition
EXTRN	?SetRotation@CGraphicObjectInstance@@QAEXMMM@Z:PROC ; CGraphicObjectInstance::SetRotation
EXTRN	?Clear@CGraphicObjectInstance@@QAEXXZ:PROC	; CGraphicObjectInstance::Clear
EXTRN	?Update@CGraphicObjectInstance@@QAEXXZ:PROC	; CGraphicObjectInstance::Update
EXTRN	?Render@CGraphicObjectInstance@@QAE_NXZ:PROC	; CGraphicObjectInstance::Render
EXTRN	?Deform@CGraphicObjectInstance@@QAEXXZ:PROC	; CGraphicObjectInstance::Deform
EXTRN	?Transform@CGraphicObjectInstance@@QAEXXZ:PROC	; CGraphicObjectInstance::Transform
EXTRN	?Show@CGraphicObjectInstance@@QAEXXZ:PROC	; CGraphicObjectInstance::Show
EXTRN	?isShow@CGraphicObjectInstance@@QAE_NXZ:PROC	; CGraphicObjectInstance::isShow
EXTRN	?GetTransform@CGraphicObjectInstance@@QAEAAUD3DXMATRIX@@XZ:PROC ; CGraphicObjectInstance::GetTransform
EXTRN	?SetPortal@CGraphicObjectInstance@@QAEXKH@Z:PROC ; CGraphicObjectInstance::SetPortal
EXTRN	?Initialize@CGraphicObjectInstance@@QAEXXZ:PROC	; CGraphicObjectInstance::Initialize
EXTRN	?UpdateBoundingSphere@CGraphicObjectInstance@@QAEXXZ:PROC ; CGraphicObjectInstance::UpdateBoundingSphere
EXTRN	?RegisterBoundingSphere@CGraphicObjectInstance@@QAEXXZ:PROC ; CGraphicObjectInstance::RegisterBoundingSphere
EXTRN	?UpdateCollisionData@CGraphicObjectInstance@@QAEXPBV?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@@Z:PROC ; CGraphicObjectInstance::UpdateCollisionData
EXTRN	?GetCollisionInstanceCount@CGraphicObjectInstance@@QAEKXZ:PROC ; CGraphicObjectInstance::GetCollisionInstanceCount
EXTRN	?GetCollisionInstanceData@CGraphicObjectInstance@@QAEPAVCBaseCollisionInstance@@K@Z:PROC ; CGraphicObjectInstance::GetCollisionInstanceData
EXTRN	?UpdateHeightInstance@CGraphicObjectInstance@@QAEXPAVCAttributeInstance@@@Z:PROC ; CGraphicObjectInstance::UpdateHeightInstance
EXTRN	?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z:PROC ; CEffectInstance::LessRenderOrder
EXTRN	?isAlive@CEffectInstance@@QAEHXZ:PROC		; CEffectInstance::isAlive
EXTRN	?SetGlobalMatrix@CEffectInstance@@QAEXABUD3DXMATRIX@@@Z:PROC ; CEffectInstance::SetGlobalMatrix
EXTRN	?RegisterEffect@CEffectManager@@QAEHPBD_N1@Z:PROC ; CEffectManager::RegisterEffect
EXTRN	?GetEffectData@CEffectManager@@QAE_NKPAPAVCEffectData@@@Z:PROC ; CEffectManager::GetEffectData
EXTRN	?CreateUnsafeEffectInstance@CEffectManager@@QAEXKPAPAVCEffectInstance@@@Z:PROC ; CEffectManager::CreateUnsafeEffectInstance
EXTRN	?DestroyUnsafeEffectInstance@CEffectManager@@QAE_NPAVCEffectInstance@@@Z:PROC ; CEffectManager::DestroyUnsafeEffectInstance
EXTRN	?GetPosition@CSpeedTreeWrapper@@QAEPBMXZ:PROC	; CSpeedTreeWrapper::GetPosition
EXTRN	?CreateInstance@CSpeedTreeForest@@QAEPAVCSpeedTreeWrapper@@MMMKPBD@Z:PROC ; CSpeedTreeForest::CreateInstance
EXTRN	?DeleteInstance@CSpeedTreeForest@@QAEXPAVCSpeedTreeWrapper@@@Z:PROC ; CSpeedTreeForest::DeleteInstance
EXTRN	?GetModelCount@CGraphicThing@@QBEHXZ:PROC	; CGraphicThing::GetModelCount
EXTRN	?GetMotionCount@CGraphicThing@@QBEHXZ:PROC	; CGraphicThing::GetMotionCount
EXTRN	?UpdateLODLevel@CGraphicThingInstance@@QAEXXZ:PROC ; CGraphicThingInstance::UpdateLODLevel
EXTRN	?DeformAll@CGraphicThingInstance@@QAEXXZ:PROC	; CGraphicThingInstance::DeformAll
EXTRN	?ReserveModelInstance@CGraphicThingInstance@@QAEXH@Z:PROC ; CGraphicThingInstance::ReserveModelInstance
EXTRN	?ReserveModelThing@CGraphicThingInstance@@QAEXH@Z:PROC ; CGraphicThingInstance::ReserveModelThing
EXTRN	?IsMotionThing@CGraphicThingInstance@@QAE_NXZ:PROC ; CGraphicThingInstance::IsMotionThing
EXTRN	?RegisterModelThing@CGraphicThingInstance@@QAEXHPAVCGraphicThing@@@Z:PROC ; CGraphicThingInstance::RegisterModelThing
EXTRN	?RegisterLODThing@CGraphicThingInstance@@QAEXHPAVCGraphicThing@@@Z:PROC ; CGraphicThingInstance::RegisterLODThing
EXTRN	?RegisterMotionThing@CGraphicThingInstance@@QAEXKPAVCGraphicThing@@@Z:PROC ; CGraphicThingInstance::RegisterMotionThing
EXTRN	?SetModelInstance@CGraphicThingInstance@@QAE_NHHHH@Z:PROC ; CGraphicThingInstance::SetModelInstance
EXTRN	?SetMotion@CGraphicThingInstance@@QAE_NKMHM@Z:PROC ; CGraphicThingInstance::SetMotion
EXTRN	?BuildBoundingSphere@CGraphicThingInstance@@QAEXXZ:PROC ; CGraphicThingInstance::BuildBoundingSphere
EXTRN	?New@CGraphicThingInstance@@SAPAV1@XZ:PROC	; CGraphicThingInstance::New
EXTRN	?Delete@CGraphicThingInstance@@SAXPAV1@@Z:PROC	; CGraphicThingInstance::Delete
EXTRN	?HaveBlendThing@CGraphicThingInstance@@QAE_NXZ:PROC ; CGraphicThingInstance::HaveBlendThing
EXTRN	??0CDungeonBlock@@QAE@XZ:PROC			; CDungeonBlock::CDungeonBlock
EXTRN	?BuildBoundingSphere@CDungeonBlock@@QAEXXZ:PROC	; CDungeonBlock::BuildBoundingSphere
EXTRN	?Load@CDungeonBlock@@QAE_NPBD@Z:PROC		; CDungeonBlock::Load
EXTRN	?Update@CDungeonBlock@@QAEXXZ:PROC		; CDungeonBlock::Update
EXTRN	?Render@CDungeonBlock@@QAEXXZ:PROC		; CDungeonBlock::Render
EXTRN	??_ESAmbienceInstance@CArea@@UAEPAXI@Z:PROC	; CArea::SAmbienceInstance::`vector deleting destructor'
EXTRN	??_ESObjectInstance@CArea@@UAEPAXI@Z:PROC	; CArea::SObjectInstance::`vector deleting destructor'
EXTRN	??_ECArea@@UAEPAXI@Z:PROC			; CArea::`vector deleting destructor'
EXTRN	?Get@CPropertyManager@@QAE_NKPAPAVCProperty@@@Z:PROC ; CPropertyManager::Get
EXTRN	?GetString@CProperty@@QAE_NPBDPAPBD@Z:PROC	; CProperty::GetString
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__ftol3:PROC
EXTRN	__libm_sse2_cos_precise:PROC
EXTRN	__libm_sse2_sin_precise:PROC
EXTRN	__libm_sse2_sqrt_precise:PROC
EXTRN	__ltod3:PROC
EXTRN	_memchr:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	?_Id_cnt@id@locale@std@@0HA:DWORD		; std::locale::id::_Id_cnt
EXTRN	?id@?$ctype@D@std@@2V0locale@2@A:DWORD		; std::ctype<char>::id
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A DD 01H DUP (?) ; CSingleton<CTimer>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCSoundManager@@@@0PAVCSoundManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCSoundManager@@@@0PAVCSoundManager@@A DD 01H DUP (?) ; CSingleton<CSoundManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::ctype<char> >::_Psave
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A DD 01H DUP (?) ; CSingleton<CResourceManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A DD 01H DUP (?) ; CSingleton<CStateManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCEffectManager@@@@0PAVCEffectManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCEffectManager@@@@0PAVCEffectManager@@A DD 01H DUP (?) ; CSingleton<CEffectManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCSpeedTreeForestDirectX8@@@@0PAVCSpeedTreeForestDirectX8@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCSpeedTreeForestDirectX8@@@@0PAVCSpeedTreeForestDirectX8@@A DD 01H DUP (?) ; CSingleton<CSpeedTreeForestDirectX8>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCPropertyManager@@@@0PAVCPropertyManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCPropertyManager@@@@0PAVCPropertyManager@@A DD 01H DUP (?) ; CSingleton<CPropertyManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?s_kVct_pkEftInstSort@?8??RenderEffect@CArea@@QAEXXZ@4V?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@A
_BSS	SEGMENT
?s_kVct_pkEftInstSort@?8??RenderEffect@CArea@@QAEXXZ@4V?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@A DB 0cH DUP (?) ; `CArea::RenderEffect'::`9'::s_kVct_pkEftInstSort
_BSS	ENDS
;	COMDAT ?$TSS0@?8??RenderEffect@CArea@@QAEXXZ@4HA
_BSS	SEGMENT
?$TSS0@?8??RenderEffect@CArea@@QAEXXZ@4HA DD 01H DUP (?) ; `CArea::RenderEffect'::`9'::$TSS0
_BSS	ENDS
CRT$XCU	SEGMENT
??ms_ObjectInstancePool$initializer$@CArea@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_ObjectInstancePool@CArea@@1V?$CDynamicPool@USObjectInstance@CArea@@@@A@@YAXXZ ; ??ms_ObjectInstancePool$initializer$@CArea@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@40490fdb
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3c8efa35
CONST	SEGMENT
__real@3c8efa35 DD 03c8efa35r			; 0.0174533
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@SObjectInstance@CArea@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SObjectInstance@CArea@@8 DD FLAT:??_R0?AUSObjectInstance@CArea@@@8 ; CArea::SObjectInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SObjectInstance@CArea@@8
rdata$r	ENDS
;	COMDAT ??_R2SObjectInstance@CArea@@8
rdata$r	SEGMENT
??_R2SObjectInstance@CArea@@8 DD FLAT:??_R1A@?0A@EA@SObjectInstance@CArea@@8 ; CArea::SObjectInstance::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3SObjectInstance@CArea@@8
rdata$r	SEGMENT
??_R3SObjectInstance@CArea@@8 DD 00H			; CArea::SObjectInstance::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2SObjectInstance@CArea@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUSObjectInstance@CArea@@@8
data$rs	SEGMENT
??_R0?AUSObjectInstance@CArea@@@8 DD FLAT:??_7type_info@@6B@ ; CArea::SObjectInstance `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUSObjectInstance@CArea@@', 00H
data$rs	ENDS
;	COMDAT ??_R4SObjectInstance@CArea@@6B@
rdata$r	SEGMENT
??_R4SObjectInstance@CArea@@6B@ DD 00H			; CArea::SObjectInstance::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUSObjectInstance@CArea@@@8
	DD	FLAT:??_R3SObjectInstance@CArea@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicBase@@8
rdata$r	SEGMENT
??_R2CGraphicBase@@8 DD FLAT:??_R1A@?0A@EA@CGraphicBase@@8 ; CGraphicBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGraphicBase@@8
rdata$r	SEGMENT
??_R3CGraphicBase@@8 DD 00H				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicBase@@@8
data$rs	SEGMENT
??_R0?AVCGraphicBase@@@8 DD FLAT:??_7type_info@@6B@	; CGraphicBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicBase@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicBase@@8 DD FLAT:??_R0?AVCGraphicBase@@@8 ; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R2CGraphicCollisionObject@@8 DD FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8 ; CGraphicCollisionObject::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R3CGraphicCollisionObject@@8 DD 00H			; CGraphicCollisionObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CGraphicCollisionObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicCollisionObject@@@8
data$rs	SEGMENT
??_R0?AVCGraphicCollisionObject@@@8 DD FLAT:??_7type_info@@6B@ ; CGraphicCollisionObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicCollisionObject@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicCollisionObject@@8 DD FLAT:??_R0?AVCGraphicCollisionObject@@@8 ; CGraphicCollisionObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicCollisionObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CScreen@@8
rdata$r	SEGMENT
??_R2CScreen@@8 DD FLAT:??_R1A@?0A@EA@CScreen@@8	; CScreen::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CScreen@@8
rdata$r	SEGMENT
??_R3CScreen@@8 DD 00H					; CScreen::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CScreen@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCScreen@@@8
data$rs	SEGMENT
??_R0?AVCScreen@@@8 DD FLAT:??_7type_info@@6B@		; CScreen `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCScreen@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CScreen@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CScreen@@8 DD FLAT:??_R0?AVCScreen@@@8	; CScreen::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CScreen@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@SAmbienceInstance@CArea@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SAmbienceInstance@CArea@@8 DD FLAT:??_R0?AUSAmbienceInstance@CArea@@@8 ; CArea::SAmbienceInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SAmbienceInstance@CArea@@8
rdata$r	ENDS
;	COMDAT ??_R2SAmbienceInstance@CArea@@8
rdata$r	SEGMENT
??_R2SAmbienceInstance@CArea@@8 DD FLAT:??_R1A@?0A@EA@SAmbienceInstance@CArea@@8 ; CArea::SAmbienceInstance::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CScreen@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3SAmbienceInstance@CArea@@8
rdata$r	SEGMENT
??_R3SAmbienceInstance@CArea@@8 DD 00H			; CArea::SAmbienceInstance::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2SAmbienceInstance@CArea@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUSAmbienceInstance@CArea@@@8
data$rs	SEGMENT
??_R0?AUSAmbienceInstance@CArea@@@8 DD FLAT:??_7type_info@@6B@ ; CArea::SAmbienceInstance `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUSAmbienceInstance@CArea@@', 00H
data$rs	ENDS
;	COMDAT ??_R4SAmbienceInstance@CArea@@6B@
rdata$r	SEGMENT
??_R4SAmbienceInstance@CArea@@6B@ DD 00H		; CArea::SAmbienceInstance::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUSAmbienceInstance@CArea@@@8
	DD	FLAT:??_R3SAmbienceInstance@CArea@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CArea@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CArea@@8 DD FLAT:??_R0?AVCArea@@@8	; CArea::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CArea@@8
rdata$r	ENDS
;	COMDAT ??_R2CArea@@8
rdata$r	SEGMENT
??_R2CArea@@8 DD FLAT:??_R1A@?0A@EA@CArea@@8		; CArea::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CArea@@8
rdata$r	SEGMENT
??_R3CArea@@8 DD 00H					; CArea::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CArea@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCArea@@@8
data$rs	SEGMENT
??_R0?AVCArea@@@8 DD FLAT:??_7type_info@@6B@		; CArea `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCArea@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CArea@@6B@
rdata$r	SEGMENT
??_R4CArea@@6B@ DD 00H					; CArea::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCArea@@@8
	DD	FLAT:??_R3CArea@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@BAHENMHD@?5CArea?3?3LoadAmbience?5Property?$CI?$CF@
CONST	SEGMENT
??_C@_0CN@BAHENMHD@?5CArea?3?3LoadAmbience?5Property?$CI?$CF@ DB ' CArea:'
	DB	':LoadAmbience Property(%d) Load ERROR', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@GJNEDCML@?5CArea?3?3__LoadAmbience?5File?5For@
CONST	SEGMENT
??_C@_0CO@GJNEDCML@?5CArea?3?3__LoadAmbience?5File?5For@ DB ' CArea::__Lo'
	DB	'adAmbience File Format %s ERROR 2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@ECPJGBAI@?5CArea?3?3__LoadAmbience?5File?5For@
CONST	SEGMENT
??_C@_0CO@ECPJGBAI@?5CArea?3?3__LoadAmbience?5File?5For@ DB ' CArea::__Lo'
	DB	'adAmbience File Format %s ERROR 1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PFPNGEBG@areaambiencedatafile@
CONST	SEGMENT
??_C@_0BF@PFPNGEBG@areaambiencedatafile@ DB 'areaambiencedatafile', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@HHDKLHOE@?5CArea?3?3LoadObject?5Property?$CI?$CFu?$CJ@
CONST	SEGMENT
??_C@_0CL@HHDKLHOE@?5CArea?3?3LoadObject?5Property?$CI?$CFu?$CJ@ DB ' CAr'
	DB	'ea::LoadObject Property(%u) Load ERROR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CHFLOJFF@object?$CF03d@
CONST	SEGMENT
??_C@_0L@CHFLOJFF@object?$CF03d@ DB 'object%03d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@CFOIFIG@?5CArea?3?3__LoadObject?5File?5Forma@
CONST	SEGMENT
??_C@_0CM@CFOIFIG@?5CArea?3?3__LoadObject?5File?5Forma@ DB ' CArea::__Loa'
	DB	'dObject File Format %s ERROR 2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IANPHBDM@objectcount@
CONST	SEGMENT
??_C@_0M@IANPHBDM@objectcount@ DB 'objectcount', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@CJHDNGEF@?5CArea?3?3__LoadObject?5File?5Forma@
CONST	SEGMENT
??_C@_0CM@CJHDNGEF@?5CArea?3?3__LoadObject?5File?5Forma@ DB ' CArea::__Lo'
	DB	'adObject File Format %s ERROR 1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DLGDDPHB@areadatafile@
CONST	SEGMENT
??_C@_0N@DLGDDPHB@areadatafile@ DB 'areadatafile', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@NNOAMPKE@?5CArea?3?3Load?5File?5Load?5?$CFs?5ERROR@
CONST	SEGMENT
??_C@_0CA@NNOAMPKE@?5CArea?3?3Load?5File?5Load?5?$CFs?5ERROR@ DB ' CArea:'
	DB	':Load File Load %s ERROR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EMGBEFOB@AreaAmbienceData?4txt@
CONST	SEGMENT
??_C@_0BF@EMGBEFOB@AreaAmbienceData?4txt@ DB 'AreaAmbienceData.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IIOKECFB@AreaData?4txt@
CONST	SEGMENT
??_C@_0N@IIOKECFB@AreaData?4txt@ DB 'AreaData.txt', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NJPKAPFJ@DummyCollisionOBB@
CONST	SEGMENT
??_C@_0BC@NJPKAPFJ@DummyCollisionOBB@ DB 'DummyCollisionOBB', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09PCMKFNFD@?2dungeon?2@
CONST	SEGMENT
??_C@_09PCMKFNFD@?2dungeon?2@ DB '\dungeon\', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09OLKGEJPN@?1dungeon?1@
CONST	SEGMENT
??_C@_09OLKGEJPN@?1dungeon?1@ DB '/dungeon/', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04KGNEGCGI@LOOP@
CONST	SEGMENT
??_C@_04KGNEGCGI@LOOP@ DB 'LOOP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04MOOLDHHD@STEP@
CONST	SEGMENT
??_C@_04MOOLDHHD@STEP@ DB 'STEP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04GHGHGAKN@ONCE@
CONST	SEGMENT
??_C@_04GHGHGAKN@ONCE@ DB 'ONCE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NDEAKJNP@_lod_?$CF?42d?4gr2@
CONST	SEGMENT
??_C@_0O@NDEAKJNP@_lod_?$CF?42d?4gr2@ DB '_lod_%.2d.gr2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08JBFACIKL@TreeFile@
CONST	SEGMENT
??_C@_08JBFACIKL@TreeFile@ DB 'TreeFile', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@BOJNBGJP@CArea?3?3SetEffect?5effect?5registe@
CONST	SEGMENT
??_C@_0CL@BOJNBGJP@CArea?3?3SetEffect?5effect?5registe@ DB 'CArea::SetEff'
	DB	'ect effect register error %s', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FPEBPNJJ@PropertyType@
CONST	SEGMENT
??_C@_0N@FPEBPNJJ@PropertyType@ DB 'PropertyType', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7CArea@@6B@
CONST	SEGMENT
??_7CArea@@6B@ DD FLAT:??_R4CArea@@6B@			; CArea::`vftable'
	DD	FLAT:??_ECArea@@UAEPAXI@Z
CONST	ENDS
_DATA	SEGMENT
?ms_ObjectInstancePool@CArea@@1V?$CDynamicPool@USObjectInstance@CArea@@@@A DD FLAT:??_7?$CDynamicPool@USObjectInstance@CArea@@@@6B@ ; CArea::ms_ObjectInstancePool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
?ms_AttributeInstancePool@CArea@@1V?$CDynamicPool@VCAttributeInstance@@@@A DD FLAT:??_7?$CDynamicPool@VCAttributeInstance@@@@6B@ ; CArea::ms_AttributeInstancePool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
?ms_AmbienceInstancePool@CArea@@1V?$CDynamicPool@USAmbienceInstance@CArea@@@@A DD FLAT:??_7?$CDynamicPool@USAmbienceInstance@CArea@@@@6B@ ; CArea::ms_AmbienceInstancePool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
?ms_DungeonBlockInstancePool@CArea@@1V?$CDynamicPool@VCDungeonBlock@@@@A DD FLAT:??_7?$CDynamicPool@VCDungeonBlock@@@@6B@ ; CArea::ms_DungeonBlockInstancePool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
?ms_kPool@CArea@@2V?$CDynamicPool@VCArea@@@@A DD FLAT:??_7?$CDynamicPool@VCArea@@@@6B@ ; CArea::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ??_7SObjectInstance@CArea@@6B@
CONST	SEGMENT
??_7SObjectInstance@CArea@@6B@ DD FLAT:??_R4SObjectInstance@CArea@@6B@ ; CArea::SObjectInstance::`vftable'
	DD	FLAT:??_ESObjectInstance@CArea@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7SAmbienceInstance@CArea@@6B@
CONST	SEGMENT
??_7SAmbienceInstance@CArea@@6B@ DD FLAT:??_R4SAmbienceInstance@CArea@@6B@ ; CArea::SAmbienceInstance::`vftable'
	DD	FLAT:??_ESAmbienceInstance@CArea@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ctype@D@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ctype@D@std@@8 DD FLAT:??_R0?AV?$ctype@D@std@@@8 ; std::ctype<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@D@std@@8
rdata$r	SEGMENT
??_R2?$ctype@D@std@@8 DD FLAT:??_R1A@?0A@EA@?$ctype@D@std@@8 ; std::ctype<char>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ctype_base@std@@8
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ctype@D@std@@8
rdata$r	SEGMENT
??_R3?$ctype@D@std@@8 DD 00H				; std::ctype<char>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@D@std@@@8
data$rs	SEGMENT
??_R0?AV?$ctype@D@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ctype<char> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ctype@D@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$ctype@D@std@@6B@
rdata$r	SEGMENT
??_R4?$ctype@D@std@@6B@ DD 00H				; std::ctype<char>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ctype@D@std@@@8
	DD	FLAT:??_R3?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ctype_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ctype_base@std@@8 DD FLAT:??_R0?AUctype_base@std@@@8 ; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ctype_base@std@@8
rdata$r	SEGMENT
??_R2ctype_base@std@@8 DD FLAT:??_R1A@?0A@EA@ctype_base@std@@8 ; std::ctype_base::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ctype_base@std@@8
rdata$r	SEGMENT
??_R3ctype_base@std@@8 DD 00H				; std::ctype_base::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
data$rs	SEGMENT
??_R0?AUctype_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ctype_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUctype_base@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4ctype_base@std@@6B@
rdata$r	SEGMENT
??_R4ctype_base@std@@6B@ DD 00H				; std::ctype_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUctype_base@std@@@8
	DD	FLAT:??_R3ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Crt_new_delete@std@@8 DD FLAT:??_R0?AU_Crt_new_delete@std@@@8 ; std::_Crt_new_delete::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R2_Crt_new_delete@std@@8 DD FLAT:??_R1A@?0A@EA@_Crt_new_delete@std@@8 ; std::_Crt_new_delete::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R3_Crt_new_delete@std@@8 DD 00H			; std::_Crt_new_delete::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU_Crt_new_delete@std@@@8
data$rs	SEGMENT
??_R0?AU_Crt_new_delete@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Crt_new_delete `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU_Crt_new_delete@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R13?0A@EA@_Crt_new_delete@std@@8 DD FLAT:??_R0?AU_Crt_new_delete@std@@@8 ; std::_Crt_new_delete::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@facet@locale@std@@8 DD FLAT:??_R0?AVfacet@locale@std@@@8 ; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R2facet@locale@std@@8
rdata$r	SEGMENT
??_R2facet@locale@std@@8 DD FLAT:??_R1A@?0A@EA@facet@locale@std@@8 ; std::locale::facet::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3facet@locale@std@@8
rdata$r	SEGMENT
??_R3facet@locale@std@@8 DD 00H				; std::locale::facet::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	03H
	DD	FLAT:??_R2facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
data$rs	SEGMENT
??_R0?AVfacet@locale@std@@@8 DD FLAT:??_7type_info@@6B@	; std::locale::facet `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVfacet@locale@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4facet@locale@std@@6B@
rdata$r	SEGMENT
??_R4facet@locale@std@@6B@ DD 00H			; std::locale::facet::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVfacet@locale@std@@@8
	DD	FLAT:??_R3facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Facet_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Facet_base@std@@8 DD FLAT:??_R0?AV_Facet_base@std@@@8 ; std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Facet_base@std@@8
rdata$r	SEGMENT
??_R2_Facet_base@std@@8 DD FLAT:??_R1A@?0A@EA@_Facet_base@std@@8 ; std::_Facet_base::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3_Facet_base@std@@8
rdata$r	SEGMENT
??_R3_Facet_base@std@@8 DD 00H				; std::_Facet_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Facet_base@std@@@8
data$rs	SEGMENT
??_R0?AV_Facet_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::_Facet_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Facet_base@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4_Facet_base@std@@6B@
rdata$r	SEGMENT
??_R4_Facet_base@std@@6B@ DD 00H			; std::_Facet_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Facet_base@std@@@8
	DD	FLAT:??_R3_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_cast@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_cast@std@@8 DD FLAT:??_R0?AVbad_cast@std@@@8 ; std::bad_cast::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_cast@std@@8
rdata$r	SEGMENT
??_R2bad_cast@std@@8 DD FLAT:??_R1A@?0A@EA@bad_cast@std@@8 ; std::bad_cast::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_cast@std@@8
rdata$r	SEGMENT
??_R3bad_cast@std@@8 DD 00H				; std::bad_cast::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_cast@std@@6B@
rdata$r	SEGMENT
??_R4bad_cast@std@@6B@ DD 00H				; std::bad_cast::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_cast@std@@@8
	DD	FLAT:??_R3bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position@ DB 'invalid string position'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_7?$ctype@D@std@@6B@
CONST	SEGMENT
??_7?$ctype@D@std@@6B@ DD FLAT:??_R4?$ctype@D@std@@6B@	; std::ctype<char>::`vftable'
	DD	FLAT:??_E?$ctype@D@std@@MAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
	DD	FLAT:?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z
	DD	FLAT:?do_tolower@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z
	DD	FLAT:?do_toupper@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z
	DD	FLAT:?do_widen@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z
	DD	FLAT:?do_narrow@?$ctype@D@std@@MBEDDD@Z
CONST	ENDS
;	COMDAT ??_7ctype_base@std@@6B@
CONST	SEGMENT
??_7ctype_base@std@@6B@ DD FLAT:??_R4ctype_base@std@@6B@ ; std::ctype_base::`vftable'
	DD	FLAT:??_Ectype_base@std@@UAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_7facet@locale@std@@6B@
CONST	SEGMENT
??_7facet@locale@std@@6B@ DD FLAT:??_R4facet@locale@std@@6B@ ; std::locale::facet::`vftable'
	DD	FLAT:??_Efacet@locale@std@@MAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
CONST	ENDS
;	COMDAT ??_C@_0BA@ELKIONDK@bad?5locale?5name@
CONST	SEGMENT
??_C@_0BA@ELKIONDK@bad?5locale?5name@ DB 'bad locale name', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7_Facet_base@std@@6B@
CONST	SEGMENT
??_7_Facet_base@std@@6B@ DD FLAT:??_R4_Facet_base@std@@6B@ ; std::_Facet_base::`vftable'
	DD	FLAT:??_E_Facet_base@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_cast@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_cast@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@std@@@8
data$r	SEGMENT
??_R0?AVbad_cast@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_cast `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_cast@std@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVbad_cast@std@@
xdata$x	SEGMENT
__CTA2?AVbad_cast@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_cast@std@@
xdata$x	SEGMENT
__TI2?AVbad_cast@std@@ DD 00H
	DD	FLAT:??1bad_cast@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_cast@std@@
xdata$x	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast@
CONST	SEGMENT
??_C@_08EPJLHIJG@bad?5cast@ DB 'bad cast', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7bad_cast@std@@6B@
CONST	SEGMENT
??_7bad_cast@std@@6B@ DD FLAT:??_R4bad_cast@std@@6B@	; std::bad_cast::`vftable'
	DD	FLAT:??_Ebad_cast@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
CONST	SEGMENT
??_C@_0BB@GCADKGJO@map?1set?5too?5long@ DB 'map/set too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABQAUSObjectInstance@CArea@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@PAUSObjectInstance@CArea@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PAUSObjectInstance@CArea@@PAX@std@@@1@PAU?$_Tree_node@PAUSObjectInstance@CArea@@PAX@1@ABQAUSObjectInstance@CArea@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABQAUSObjectInstance@CArea@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@PAUSObjectInstance@CArea@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PAUSObjectInstance@CArea@@PAX@std@@@1@PAU?$_Tree_node@PAUSObjectInstance@CArea@@PAX@1@ABQAUSObjectInstance@CArea@@@Z$1
__ehfuncinfo$??$?0ABQAUSObjectInstance@CArea@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@PAUSObjectInstance@CArea@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PAUSObjectInstance@CArea@@PAX@std@@@1@PAU?$_Tree_node@PAUSObjectInstance@CArea@@PAX@1@ABQAUSObjectInstance@CArea@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0ABQAUSObjectInstance@CArea@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@PAUSObjectInstance@CArea@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PAUSObjectInstance@CArea@@PAX@std@@@1@PAU?$_Tree_node@PAUSObjectInstance@CArea@@PAX@1@ABQAUSObjectInstance@CArea@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@PAUSObjectInstance@CArea@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PAUSObjectInstance@CArea@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@PAUSObjectInstance@CArea@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PAUSObjectInstance@CArea@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@PAUSObjectInstance@CArea@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PAUSObjectInstance@CArea@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@PAUSObjectInstance@CArea@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PAUSObjectInstance@CArea@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABH@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@HPAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@HPAX@std@@@1@PAU?$_Tree_node@HPAX@1@ABH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABH@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@HPAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@HPAX@std@@@1@PAU?$_Tree_node@HPAX@1@ABH@Z$1
__ehfuncinfo$??$?0ABH@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@HPAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@HPAX@std@@@1@PAU?$_Tree_node@HPAX@1@ABH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0ABH@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@HPAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@HPAX@std@@@1@PAU?$_Tree_node@HPAX@1@ABH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@HPAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@HPAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@HPAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@HPAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@HPAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@HPAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@HPAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@HPAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0U?$pair@$$CBKPAVCEffectInstance@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@1@$$QAU?$pair@$$CBKPAVCEffectInstance@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@$$CBKPAVCEffectInstance@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@1@$$QAU?$pair@$$CBKPAVCEffectInstance@@@1@@Z$1
__ehfuncinfo$??$?0U?$pair@$$CBKPAVCEffectInstance@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@1@$$QAU?$pair@$$CBKPAVCEffectInstance@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0U?$pair@$$CBKPAVCEffectInstance@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@1@$$QAU?$pair@$$CBKPAVCEffectInstance@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0U?$pair@QAVCGraphicThingInstance@@K@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@1@$$QAU?$pair@QAVCGraphicThingInstance@@K@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@QAVCGraphicThingInstance@@K@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@1@$$QAU?$pair@QAVCGraphicThingInstance@@K@1@@Z$1
__ehfuncinfo$??$?0U?$pair@QAVCGraphicThingInstance@@K@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@1@$$QAU?$pair@QAVCGraphicThingInstance@@K@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0U?$pair@QAVCGraphicThingInstance@@K@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@1@$$QAU?$pair@QAVCGraphicThingInstance@@K@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABUpiecewise_construct_t@std@@V?$tuple@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABUpiecewise_construct_t@std@@V?$tuple@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z$1
__ehfuncinfo$??$?0ABUpiecewise_construct_t@std@@V?$tuple@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0ABUpiecewise_construct_t@std@@V?$tuple@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@ABQAUSObjectInstance@CArea@@@?$_Tree@V?$_Tset_traits@PAUSObjectInstance@CArea@@U?$less@PAUSObjectInstance@CArea@@@std@@V?$allocator@PAUSObjectInstance@CArea@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@PAUSObjectInstance@CArea@@PAX@std@@_N@1@ABQAUSObjectInstance@CArea@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@ABQAUSObjectInstance@CArea@@@?$_Tree@V?$_Tset_traits@PAUSObjectInstance@CArea@@U?$less@PAUSObjectInstance@CArea@@@std@@V?$allocator@PAUSObjectInstance@CArea@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@PAUSObjectInstance@CArea@@PAX@std@@_N@1@ABQAUSObjectInstance@CArea@@@Z$2
__ehfuncinfo$??$_Emplace@ABQAUSObjectInstance@CArea@@@?$_Tree@V?$_Tset_traits@PAUSObjectInstance@CArea@@U?$less@PAUSObjectInstance@CArea@@@std@@V?$allocator@PAUSObjectInstance@CArea@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@PAUSObjectInstance@CArea@@PAX@std@@_N@1@ABQAUSObjectInstance@CArea@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@ABQAUSObjectInstance@CArea@@@?$_Tree@V?$_Tset_traits@PAUSObjectInstance@CArea@@U?$less@PAUSObjectInstance@CArea@@@std@@V?$allocator@PAUSObjectInstance@CArea@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@PAUSObjectInstance@CArea@@PAX@std@@_N@1@ABQAUSObjectInstance@CArea@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@ABH@?$_Tree@V?$_Tset_traits@HU?$less@H@std@@V?$allocator@H@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@HPAX@std@@_N@1@ABH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@ABH@?$_Tree@V?$_Tset_traits@HU?$less@H@std@@V?$allocator@H@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@HPAX@std@@_N@1@ABH@Z$2
__ehfuncinfo$??$_Emplace@ABH@?$_Tree@V?$_Tset_traits@HU?$less@H@std@@V?$allocator@H@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@HPAX@std@@_N@1@ABH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@ABH@?$_Tree@V?$_Tset_traits@HU?$less@H@std@@V?$allocator@H@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@HPAX@std@@_N@1@ABH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@U?$pair@$$CBKPAVCEffectInstance@@@std@@@?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAVCEffectInstance@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@U?$pair@$$CBKPAVCEffectInstance@@@std@@@?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAVCEffectInstance@@@1@@Z$2
__ehfuncinfo$??$_Emplace@U?$pair@$$CBKPAVCEffectInstance@@@std@@@?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAVCEffectInstance@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@U?$pair@$$CBKPAVCEffectInstance@@@std@@@?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAVCEffectInstance@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@U?$pair@QAVCGraphicThingInstance@@K@std@@@?$_Tree@V?$_Tmap_traits@PAVCGraphicThingInstance@@KU?$less@PAVCGraphicThingInstance@@@std@@V?$allocator@U?$pair@QAVCGraphicThingInstance@@K@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@std@@_N@1@$$QAU?$pair@QAVCGraphicThingInstance@@K@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@U?$pair@QAVCGraphicThingInstance@@K@std@@@?$_Tree@V?$_Tmap_traits@PAVCGraphicThingInstance@@KU?$less@PAVCGraphicThingInstance@@@std@@V?$allocator@U?$pair@QAVCGraphicThingInstance@@K@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@std@@_N@1@$$QAU?$pair@QAVCGraphicThingInstance@@K@1@@Z$2
__ehfuncinfo$??$_Emplace@U?$pair@QAVCGraphicThingInstance@@K@std@@@?$_Tree@V?$_Tmap_traits@PAVCGraphicThingInstance@@KU?$less@PAVCGraphicThingInstance@@@std@@V?$allocator@U?$pair@QAVCGraphicThingInstance@@K@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@std@@_N@1@$$QAU?$pair@QAVCGraphicThingInstance@@K@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@U?$pair@QAVCGraphicThingInstance@@K@std@@@?$_Tree@V?$_Tmap_traits@PAVCGraphicThingInstance@@KU?$less@PAVCGraphicThingInstance@@@std@@V?$allocator@U?$pair@QAVCGraphicThingInstance@@K@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@std@@_N@1@$$QAU?$pair@QAVCGraphicThingInstance@@K@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Try_emplace@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@_N@1@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Try_emplace@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@_N@1@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$2
__ehfuncinfo$??$_Try_emplace@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@_N@1@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Try_emplace@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@_N@1@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@PAUSObjectInstance@CArea@@U?$less@PAUSObjectInstance@CArea@@@std@@V?$allocator@PAUSObjectInstance@CArea@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUSObjectInstance@CArea@@@std@@@std@@@std@@_N@1@ABQAUSObjectInstance@CArea@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@PAUSObjectInstance@CArea@@U?$less@PAUSObjectInstance@CArea@@@std@@V?$allocator@PAUSObjectInstance@CArea@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUSObjectInstance@CArea@@@std@@@std@@@std@@_N@1@ABQAUSObjectInstance@CArea@@@Z$2
__ehfuncinfo$??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@PAUSObjectInstance@CArea@@U?$less@PAUSObjectInstance@CArea@@@std@@V?$allocator@PAUSObjectInstance@CArea@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUSObjectInstance@CArea@@@std@@@std@@@std@@_N@1@ABQAUSObjectInstance@CArea@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@PAUSObjectInstance@CArea@@U?$less@PAUSObjectInstance@CArea@@@std@@V?$allocator@PAUSObjectInstance@CArea@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUSObjectInstance@CArea@@@std@@@std@@@std@@_N@1@ABQAUSObjectInstance@CArea@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@HU?$less@H@std@@V?$allocator@H@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@H@std@@@std@@@std@@_N@1@ABH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@HU?$less@H@std@@V?$allocator@H@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@H@std@@@std@@@std@@_N@1@ABH@Z$2
__ehfuncinfo$??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@HU?$less@H@std@@V?$allocator@H@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@H@std@@@std@@@std@@_N@1@ABH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@HU?$less@H@std@@V?$allocator@H@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@H@std@@@std@@@std@@_N@1@ABH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCEffectInstance@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCEffectInstance@@@1@@Z$2
__ehfuncinfo$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCEffectInstance@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCEffectInstance@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@PAVCGraphicThingInstance@@KU?$less@PAVCGraphicThingInstance@@@std@@V?$allocator@U?$pair@QAVCGraphicThingInstance@@K@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCGraphicThingInstance@@K@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@QAVCGraphicThingInstance@@K@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@PAVCGraphicThingInstance@@KU?$less@PAVCGraphicThingInstance@@@std@@V?$allocator@U?$pair@QAVCGraphicThingInstance@@K@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCGraphicThingInstance@@K@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@QAVCGraphicThingInstance@@K@1@@Z$2
__ehfuncinfo$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@PAVCGraphicThingInstance@@KU?$less@PAVCGraphicThingInstance@@@std@@V?$allocator@U?$pair@QAVCGraphicThingInstance@@K@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCGraphicThingInstance@@K@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@QAVCGraphicThingInstance@@K@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@PAVCGraphicThingInstance@@KU?$less@PAVCGraphicThingInstance@@@std@@V?$allocator@U?$pair@QAVCGraphicThingInstance@@K@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCGraphicThingInstance@@K@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@QAVCGraphicThingInstance@@K@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Alloc@?$CDynamicPool@VCArea@@@@QAEPAVCArea@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Alloc@?$CDynamicPool@VCArea@@@@QAEPAVCArea@@XZ$0
__ehfuncinfo$?Alloc@?$CDynamicPool@VCArea@@@@QAEPAVCArea@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Alloc@?$CDynamicPool@VCArea@@@@QAEPAVCArea@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Alloc@?$CDynamicPool@VCDungeonBlock@@@@QAEPAVCDungeonBlock@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Alloc@?$CDynamicPool@VCDungeonBlock@@@@QAEPAVCDungeonBlock@@XZ$0
__ehfuncinfo$?Alloc@?$CDynamicPool@VCDungeonBlock@@@@QAEPAVCDungeonBlock@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Alloc@?$CDynamicPool@VCDungeonBlock@@@@QAEPAVCDungeonBlock@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Alloc@?$CDynamicPool@USAmbienceInstance@CArea@@@@QAEPAUSAmbienceInstance@CArea@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Alloc@?$CDynamicPool@USAmbienceInstance@CArea@@@@QAEPAUSAmbienceInstance@CArea@@XZ$0
__ehfuncinfo$?Alloc@?$CDynamicPool@USAmbienceInstance@CArea@@@@QAEPAUSAmbienceInstance@CArea@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Alloc@?$CDynamicPool@USAmbienceInstance@CArea@@@@QAEPAUSAmbienceInstance@CArea@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Alloc@?$CDynamicPool@VCAttributeInstance@@@@QAEPAVCAttributeInstance@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Alloc@?$CDynamicPool@VCAttributeInstance@@@@QAEPAVCAttributeInstance@@XZ$0
__ehfuncinfo$?Alloc@?$CDynamicPool@VCAttributeInstance@@@@QAEPAVCAttributeInstance@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Alloc@?$CDynamicPool@VCAttributeInstance@@@@QAEPAVCAttributeInstance@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@@std@@QAEAAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@@std@@QAEAAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$2
__ehfuncinfo$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@@std@@QAEAAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@@std@@QAEAAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?New@CArea@@SAPAV1@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?New@CArea@@SAPAV1@XZ$0
__ehfuncinfo$?New@CArea@@SAPAV1@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?New@CArea@@SAPAV1@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?__SetObjectInstance_SetDungeonBlock@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?__SetObjectInstance_SetDungeonBlock@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?__SetObjectInstance_SetDungeonBlock@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z$11
__ehfuncinfo$?__SetObjectInstance_SetDungeonBlock@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?__SetObjectInstance_SetDungeonBlock@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?__SetObjectInstance_SetAmbience@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?__SetObjectInstance_SetAmbience@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z$0
__ehfuncinfo$?__SetObjectInstance_SetAmbience@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?__SetObjectInstance_SetAmbience@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?__SetObjectInstance_SetEffect@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?__SetObjectInstance_SetEffect@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?__SetObjectInstance_SetEffect@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z$10
__ehfuncinfo$?__SetObjectInstance_SetEffect@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?__SetObjectInstance_SetEffect@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?__SetObjectInstance_SetBuilding@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?__SetObjectInstance_SetBuilding@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?__SetObjectInstance_SetBuilding@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?__SetObjectInstance_SetBuilding@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?__SetObjectInstance_SetBuilding@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z$3
__ehfuncinfo$?__SetObjectInstance_SetBuilding@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?__SetObjectInstance_SetBuilding@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?__LoadAttribute@CArea@@IAEXPAUSObjectInstance@1@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?__LoadAttribute@CArea@@IAEXPAUSObjectInstance@1@PBD@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?__LoadAttribute@CArea@@IAEXPAUSObjectInstance@1@PBD@Z$0
	DD	01H
	DD	FLAT:___std_terminate
	DD	01H
	DD	FLAT:__unwindfunclet$?__LoadAttribute@CArea@@IAEXPAUSObjectInstance@1@PBD@Z$1
__ehfuncinfo$?__LoadAttribute@CArea@@IAEXPAUSObjectInstance@1@PBD@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?__LoadAttribute@CArea@@IAEXPAUSObjectInstance@1@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?__Load_BuildObjectInstances@CArea@@IAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?__Load_BuildObjectInstances@CArea@@IAEXXZ$3
__ehfuncinfo$?__Load_BuildObjectInstances@CArea@@IAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?__Load_BuildObjectInstances@CArea@@IAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?__Load_LoadAmbience@CArea@@IAE_NPBD@Z DD 019930522H
	DD	0aH
	DD	FLAT:__unwindtable$?__Load_LoadAmbience@CArea@@IAE_NPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?__Load_LoadAmbience@CArea@@IAE_NPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?__Load_LoadAmbience@CArea@@IAE_NPBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?__Load_LoadAmbience@CArea@@IAE_NPBD@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$?__Load_LoadAmbience@CArea@@IAE_NPBD@Z$59
	DD	00H
	DD	FLAT:__unwindfunclet$?__Load_LoadAmbience@CArea@@IAE_NPBD@Z$5
	DD	03H
	DD	FLAT:__unwindfunclet$?__Load_LoadAmbience@CArea@@IAE_NPBD@Z$34
	DD	00H
	DD	FLAT:__unwindfunclet$?__Load_LoadAmbience@CArea@@IAE_NPBD@Z$6
	DD	05H
	DD	FLAT:__unwindfunclet$?__Load_LoadAmbience@CArea@@IAE_NPBD@Z$7
	DD	06H
	DD	FLAT:__unwindfunclet$?__Load_LoadAmbience@CArea@@IAE_NPBD@Z$8
	DD	07H
	DD	FLAT:__unwindfunclet$?__Load_LoadAmbience@CArea@@IAE_NPBD@Z$9
	DD	08H
	DD	FLAT:__unwindfunclet$?__Load_LoadAmbience@CArea@@IAE_NPBD@Z$10
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?__Load_LoadObject@CArea@@IAE_NPBD@Z DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$?__Load_LoadObject@CArea@@IAE_NPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?__Load_LoadObject@CArea@@IAE_NPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?__Load_LoadObject@CArea@@IAE_NPBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?__Load_LoadObject@CArea@@IAE_NPBD@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$?__Load_LoadObject@CArea@@IAE_NPBD@Z$53
	DD	00H
	DD	FLAT:__unwindfunclet$?__Load_LoadObject@CArea@@IAE_NPBD@Z$5
	DD	03H
	DD	FLAT:__unwindfunclet$?__Load_LoadObject@CArea@@IAE_NPBD@Z$33
	DD	00H
	DD	FLAT:__unwindfunclet$?__Load_LoadObject@CArea@@IAE_NPBD@Z$6
	DD	05H
	DD	FLAT:__unwindfunclet$?__Load_LoadObject@CArea@@IAE_NPBD@Z$7
	DD	06H
	DD	FLAT:__unwindfunclet$?__Load_LoadObject@CArea@@IAE_NPBD@Z$8
	DD	07H
	DD	FLAT:__unwindfunclet$?__Load_LoadObject@CArea@@IAE_NPBD@Z$9
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RefreshPortal@CArea@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RefreshPortal@CArea@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?RefreshPortal@CArea@@QAEXXZ$4
__ehfuncinfo$?RefreshPortal@CArea@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RefreshPortal@CArea@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddShowingPortalID@CArea@@QAEXH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddShowingPortalID@CArea@@QAEXH@Z$2
__ehfuncinfo$?AddShowingPortalID@CArea@@QAEXH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddShowingPortalID@CArea@@QAEXH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?Load@CArea@@QAE_NPBD@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?Load@CArea@@QAE_NPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Load@CArea@@QAE_NPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Load@CArea@@QAE_NPBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Load@CArea@@QAE_NPBD@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Load@CArea@@QAE_NPBD@Z$1
	DD	02H
	DD	FLAT:__unwindfunclet$?Load@CArea@@QAE_NPBD@Z$2
	DD	03H
	DD	FLAT:__unwindfunclet$?Load@CArea@@QAE_NPBD@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$?Load@CArea@@QAE_NPBD@Z$3
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CArea@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CArea@@QAE@XZ DD 019930522H
	DD	0cH
	DD	FLAT:__unwindtable$??0CArea@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CArea@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CArea@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CArea@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CArea@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CArea@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CArea@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0CArea@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0CArea@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??0CArea@@QAE@XZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$??0CArea@@QAE@XZ$8
	DD	08H
	DD	FLAT:__unwindfunclet$??0CArea@@QAE@XZ$9
	DD	09H
	DD	FLAT:__unwindfunclet$??0CArea@@QAE@XZ$10
	DD	0aH
	DD	FLAT:__unwindfunclet$??0CArea@@QAE@XZ$11
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$1
__ehfuncinfo$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$4
	DD	03H
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$5
	DD	04H
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$6
	DD	05H
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$7
	DD	06H
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$8
	DD	0ffffffffH
	DD	FLAT:___std_terminate
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0locale@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Locinfo@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0_Locinfo@std@@QAE@PBD@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??0_Locinfo@std@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0_Locinfo@std@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$6
xdata$x	ENDS
CRT$XCU	SEGMENT
??ms_AttributeInstancePool$initializer$@CArea@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_AttributeInstancePool@CArea@@1V?$CDynamicPool@VCAttributeInstance@@@@A@@YAXXZ ; ??ms_AttributeInstancePool$initializer$@CArea@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
CRT$XCU	SEGMENT
??ms_AmbienceInstancePool$initializer$@CArea@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_AmbienceInstancePool@CArea@@1V?$CDynamicPool@USAmbienceInstance@CArea@@@@A@@YAXXZ ; ??ms_AmbienceInstancePool$initializer$@CArea@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
CRT$XCU	SEGMENT
??ms_DungeonBlockInstancePool$initializer$@CArea@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_DungeonBlockInstancePool@CArea@@1V?$CDynamicPool@VCDungeonBlock@@@@A@@YAXXZ ; ??ms_DungeonBlockInstancePool$initializer$@CArea@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
CRT$XCU	SEGMENT
??ms_kPool$initializer$@CArea@@2P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@CArea@@2V?$CDynamicPool@VCArea@@@@A@@YAXXZ ; ??ms_kPool$initializer$@CArea@@2P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
;	COMDAT ??$_Med3_unchecked@PAUSObjectData@CArea@@UObjectDataComp@2@@std@@YAXPAUSObjectData@CArea@@00UObjectDataComp@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Med3_unchecked@PAUSObjectData@CArea@@UObjectDataComp@2@@std@@YAXPAUSObjectData@CArea@@00UObjectDataComp@2@@Z PROC ; std::_Med3_unchecked<CArea::SObjectData *,CArea::ObjectDataComp>, COMDAT

; 7929 : _CONSTEXPR20 void _Med3_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h

; 57   : 				return lhs.dwCRC < rhs.dwCRC;

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Mid$[ebp]
  00006	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00009	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0000c	3b 42 0c	 cmp	 eax, DWORD PTR [edx+12]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7931 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  0000f	73 2c		 jae	 SHORT $LN9@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 100  :     _Left    = _STD move(_Right);

  00011	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  00014	0f 10 09	 movups	 xmm1, XMMWORD PTR [ecx]
  00017	0f 10 51 10	 movups	 xmm2, XMMWORD PTR [ecx+16]
  0001b	0f 10 59 20	 movups	 xmm3, XMMWORD PTR [ecx+32]
  0001f	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00022	0f 10 42 10	 movups	 xmm0, XMMWORD PTR [edx+16]
  00026	0f 11 41 10	 movups	 XMMWORD PTR [ecx+16], xmm0
  0002a	0f 10 42 20	 movups	 xmm0, XMMWORD PTR [edx+32]
  0002e	0f 11 41 20	 movups	 XMMWORD PTR [ecx+32], xmm0

; 101  :     _Right   = _STD move(_Tmp);

  00032	0f 11 0a	 movups	 XMMWORD PTR [edx], xmm1
  00035	0f 11 52 10	 movups	 XMMWORD PTR [edx+16], xmm2
  00039	0f 11 5a 20	 movups	 XMMWORD PTR [edx+32], xmm3
$LN9@Med3_unche:
  0003d	56		 push	 esi
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h

; 57   : 				return lhs.dwCRC < rhs.dwCRC;

  0003e	8b 75 10	 mov	 esi, DWORD PTR __Last$[ebp]
  00041	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00044	3b 41 0c	 cmp	 eax, DWORD PTR [ecx+12]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7935 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

  00047	73 55		 jae	 SHORT $LN17@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 100  :     _Left    = _STD move(_Right);

  00049	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  0004c	0f 10 0e	 movups	 xmm1, XMMWORD PTR [esi]
  0004f	0f 10 56 10	 movups	 xmm2, XMMWORD PTR [esi+16]
  00053	0f 10 5e 20	 movups	 xmm3, XMMWORD PTR [esi+32]
  00057	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  0005a	0f 10 41 10	 movups	 xmm0, XMMWORD PTR [ecx+16]
  0005e	0f 11 46 10	 movups	 XMMWORD PTR [esi+16], xmm0
  00062	0f 10 41 20	 movups	 xmm0, XMMWORD PTR [ecx+32]
  00066	0f 11 46 20	 movups	 XMMWORD PTR [esi+32], xmm0

; 101  :     _Right   = _STD move(_Tmp);

  0006a	0f 11 09	 movups	 XMMWORD PTR [ecx], xmm1
  0006d	0f 11 51 10	 movups	 XMMWORD PTR [ecx+16], xmm2
  00071	0f 11 59 20	 movups	 XMMWORD PTR [ecx+32], xmm3
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h

; 57   : 				return lhs.dwCRC < rhs.dwCRC;

  00075	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00078	3b 42 0c	 cmp	 eax, DWORD PTR [edx+12]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7938 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  0007b	73 21		 jae	 SHORT $LN17@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 100  :     _Left    = _STD move(_Right);

  0007d	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  00080	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00083	0f 10 42 10	 movups	 xmm0, XMMWORD PTR [edx+16]
  00087	0f 11 41 10	 movups	 XMMWORD PTR [ecx+16], xmm0
  0008b	0f 10 42 20	 movups	 xmm0, XMMWORD PTR [edx+32]
  0008f	0f 11 41 20	 movups	 XMMWORD PTR [ecx+32], xmm0

; 101  :     _Right   = _STD move(_Tmp);

  00093	0f 11 0a	 movups	 XMMWORD PTR [edx], xmm1
  00096	0f 11 52 10	 movups	 XMMWORD PTR [edx+16], xmm2
  0009a	0f 11 5a 20	 movups	 XMMWORD PTR [edx+32], xmm3
$LN17@Med3_unche:
  0009e	5e		 pop	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7942 : }

  0009f	5d		 pop	 ebp
  000a0	c3		 ret	 0
??$_Med3_unchecked@PAUSObjectData@CArea@@UObjectDataComp@2@@std@@YAXPAUSObjectData@CArea@@00UObjectDataComp@2@@Z ENDP ; std::_Med3_unchecked<CArea::SObjectData *,CArea::ObjectDataComp>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$_Copy_backward_memmove@PAUSObjectData@CArea@@PAU12@@std@@YAPAUSObjectData@CArea@@PAU12@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_backward_memmove@PAUSObjectData@CArea@@PAU12@@std@@YAPAUSObjectData@CArea@@PAU12@00@Z PROC ; std::_Copy_backward_memmove<CArea::SObjectData *,CArea::SObjectData *>, COMDAT

; 4833 : _CtgIt2 _Copy_backward_memmove(_CtgIt1 _First, _CtgIt1 _Last, _CtgIt2 _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4834 :     // implement copy_backward-like function as memmove
; 4835 :     auto _FirstPtr              = _To_address(_First);
; 4836 :     auto _LastPtr               = _To_address(_Last);
; 4837 :     auto _DestPtr               = _To_address(_Dest);
; 4838 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4839 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4840 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4841 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b c8		 sub	 ecx, eax

; 4842 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

  0000b	51		 push	 ecx
  0000c	50		 push	 eax
  0000d	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00010	2b c1		 sub	 eax, ecx
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4843 :     if constexpr (is_pointer_v<_CtgIt2>) {
; 4844 :         return static_cast<_CtgIt2>(_Result);
; 4845 :     } else {
; 4846 :         return _Dest - (_LastPtr - _FirstPtr);
; 4847 :     }
; 4848 : }

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??$_Copy_backward_memmove@PAUSObjectData@CArea@@PAU12@@std@@YAPAUSObjectData@CArea@@PAU12@00@Z ENDP ; std::_Copy_backward_memmove<CArea::SObjectData *,CArea::SObjectData *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
;	COMDAT ??$_Med3_unchecked@PAUSCRCWithNumber@CArea@@UCRCNumComp@2@@std@@YAXPAUSCRCWithNumber@CArea@@00UCRCNumComp@2@@Z
_TEXT	SEGMENT
__Tmp$1$ = 8						; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Med3_unchecked@PAUSCRCWithNumber@CArea@@UCRCNumComp@2@@std@@YAXPAUSCRCWithNumber@CArea@@00UCRCNumComp@2@@Z PROC ; std::_Med3_unchecked<CArea::SCRCWithNumber *,CArea::CRCNumComp>, COMDAT

; 7929 : _CONSTEXPR20 void _Med3_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h

; 190  : 				return lhs.dwNumber > rhs.dwNumber;

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7929 : _CONSTEXPR20 void _Med3_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

  00007	56		 push	 esi
  00008	57		 push	 edi
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h

; 190  : 				return lhs.dwNumber > rhs.dwNumber;

  00009	8b 7d 0c	 mov	 edi, DWORD PTR __Mid$[ebp]
  0000c	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0000f	3b 43 04	 cmp	 eax, DWORD PTR [ebx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7931 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  00012	76 13		 jbe	 SHORT $LN19@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 99   :     _Ty _Tmp = _STD move(_Left);

  00014	8b 17		 mov	 edx, DWORD PTR [edi]
  00016	8b f0		 mov	 esi, eax

; 100  :     _Left    = _STD move(_Right);

  00018	8b 03		 mov	 eax, DWORD PTR [ebx]
  0001a	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0001d	89 07		 mov	 DWORD PTR [edi], eax
  0001f	89 4f 04	 mov	 DWORD PTR [edi+4], ecx

; 101  :     _Right   = _STD move(_Tmp);

  00022	89 13		 mov	 DWORD PTR [ebx], edx
  00024	89 73 04	 mov	 DWORD PTR [ebx+4], esi
$LN19@Med3_unche:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h

; 190  : 				return lhs.dwNumber > rhs.dwNumber;

  00027	8b 55 10	 mov	 edx, DWORD PTR __Last$[ebp]
  0002a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0002d	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7935 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

  00030	76 2e		 jbe	 SHORT $LN17@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 99   :     _Ty _Tmp = _STD move(_Left);

  00032	8b 02		 mov	 eax, DWORD PTR [edx]
  00034	8b 72 04	 mov	 esi, DWORD PTR [edx+4]

; 100  :     _Left    = _STD move(_Right);

  00037	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0003a	89 45 08	 mov	 DWORD PTR __Tmp$1$[ebp], eax
  0003d	8b 07		 mov	 eax, DWORD PTR [edi]
  0003f	89 02		 mov	 DWORD PTR [edx], eax
  00041	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 101  :     _Right   = _STD move(_Tmp);

  00044	8b 55 08	 mov	 edx, DWORD PTR __Tmp$1$[ebp]
  00047	89 17		 mov	 DWORD PTR [edi], edx
  00049	89 77 04	 mov	 DWORD PTR [edi+4], esi
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h

; 190  : 				return lhs.dwNumber > rhs.dwNumber;

  0004c	3b 73 04	 cmp	 esi, DWORD PTR [ebx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7938 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  0004f	76 0f		 jbe	 SHORT $LN17@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 100  :     _Left    = _STD move(_Right);

  00051	8b 03		 mov	 eax, DWORD PTR [ebx]
  00053	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00056	89 07		 mov	 DWORD PTR [edi], eax
  00058	89 4f 04	 mov	 DWORD PTR [edi+4], ecx

; 101  :     _Right   = _STD move(_Tmp);

  0005b	89 13		 mov	 DWORD PTR [ebx], edx
  0005d	89 73 04	 mov	 DWORD PTR [ebx+4], esi
$LN17@Med3_unche:
  00060	5f		 pop	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7942 : }

  00061	5e		 pop	 esi
  00062	5b		 pop	 ebx
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
??$_Med3_unchecked@PAUSCRCWithNumber@CArea@@UCRCNumComp@2@@std@@YAXPAUSCRCWithNumber@CArea@@00UCRCNumComp@2@@Z ENDP ; std::_Med3_unchecked<CArea::SCRCWithNumber *,CArea::CRCNumComp>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$_Copy_backward_memmove@PAUSCRCWithNumber@CArea@@PAU12@@std@@YAPAUSCRCWithNumber@CArea@@PAU12@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_backward_memmove@PAUSCRCWithNumber@CArea@@PAU12@@std@@YAPAUSCRCWithNumber@CArea@@PAU12@00@Z PROC ; std::_Copy_backward_memmove<CArea::SCRCWithNumber *,CArea::SCRCWithNumber *>, COMDAT

; 4833 : _CtgIt2 _Copy_backward_memmove(_CtgIt1 _First, _CtgIt1 _Last, _CtgIt2 _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4834 :     // implement copy_backward-like function as memmove
; 4835 :     auto _FirstPtr              = _To_address(_First);
; 4836 :     auto _LastPtr               = _To_address(_Last);
; 4837 :     auto _DestPtr               = _To_address(_Dest);
; 4838 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4839 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4840 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4841 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b c8		 sub	 ecx, eax

; 4842 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

  0000b	51		 push	 ecx
  0000c	50		 push	 eax
  0000d	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00010	2b c1		 sub	 eax, ecx
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4843 :     if constexpr (is_pointer_v<_CtgIt2>) {
; 4844 :         return static_cast<_CtgIt2>(_Result);
; 4845 :     } else {
; 4846 :         return _Dest - (_LastPtr - _FirstPtr);
; 4847 :     }
; 4848 : }

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??$_Copy_backward_memmove@PAUSCRCWithNumber@CArea@@PAU12@@std@@YAPAUSCRCWithNumber@CArea@@PAU12@00@Z ENDP ; std::_Copy_backward_memmove<CArea::SCRCWithNumber *,CArea::SCRCWithNumber *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$_Copy_backward_memmove@PAPAVCEffectInstance@@PAPAV1@@std@@YAPAPAVCEffectInstance@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_backward_memmove@PAPAVCEffectInstance@@PAPAV1@@std@@YAPAPAVCEffectInstance@@PAPAV1@00@Z PROC ; std::_Copy_backward_memmove<CEffectInstance * *,CEffectInstance * *>, COMDAT

; 4833 : _CtgIt2 _Copy_backward_memmove(_CtgIt1 _First, _CtgIt1 _Last, _CtgIt2 _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4834 :     // implement copy_backward-like function as memmove
; 4835 :     auto _FirstPtr              = _To_address(_First);
; 4836 :     auto _LastPtr               = _To_address(_Last);
; 4837 :     auto _DestPtr               = _To_address(_Dest);
; 4838 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4839 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4840 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4841 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b c8		 sub	 ecx, eax

; 4842 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

  0000b	51		 push	 ecx
  0000c	50		 push	 eax
  0000d	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00010	2b c1		 sub	 eax, ecx
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4843 :     if constexpr (is_pointer_v<_CtgIt2>) {
; 4844 :         return static_cast<_CtgIt2>(_Result);
; 4845 :     } else {
; 4846 :         return _Dest - (_LastPtr - _FirstPtr);
; 4847 :     }
; 4848 : }

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??$_Copy_backward_memmove@PAPAVCEffectInstance@@PAPAV1@@std@@YAPAPAVCEffectInstance@@PAPAV1@00@Z ENDP ; std::_Copy_backward_memmove<CEffectInstance * *,CEffectInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\locale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\locale
;	COMDAT ??$tolower@D@std@@YADDABVlocale@0@@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
__Loc$ = 12						; size = 4
??$tolower@D@std@@YADDABVlocale@0@@Z PROC		; std::tolower<char>, COMDAT

; 227  : _NODISCARD _Elem tolower(_Elem _Ch, const locale& _Loc) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 228  :     return _STD use_facet<ctype<_Elem>>(_Loc).tolower(_Ch);

  00003	ff 75 0c	 push	 DWORD PTR __Loc$[ebp]
  00006	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
  0000b	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocale

; 2659 :         return do_tolower(_Ch);

  0000e	8b c8		 mov	 ecx, eax
  00010	8b 10		 mov	 edx, DWORD PTR [eax]
  00012	ff 75 08	 push	 DWORD PTR __Ch$[ebp]
  00015	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00018	ff d0		 call	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\locale

; 229  : }

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$tolower@D@std@@YADDABVlocale@0@@Z ENDP		; std::tolower<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCAttributeInstance@@PAPAV1@@std@@YAPAPAVCAttributeInstance@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCAttributeInstance@@PAPAV1@@std@@YAPAPAVCAttributeInstance@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CAttributeInstance * *,CAttributeInstance * *>, COMDAT

; 4526 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4527 :     auto _FirstPtr              = _To_address(_First);
; 4528 :     auto _LastPtr               = _To_address(_Last);
; 4529 :     auto _DestPtr               = _To_address(_Dest);
; 4530 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4531 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4532 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4533 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4535 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4536 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4537 :     } else {
; 4538 :         return _Dest + (_LastPtr - _FirstPtr);
; 4539 :     }
; 4540 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAVCAttributeInstance@@PAPAV1@@std@@YAPAPAVCAttributeInstance@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CAttributeInstance * *,CAttributeInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCArea@@PAPAV1@@std@@YAPAPAVCArea@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCArea@@PAPAV1@@std@@YAPAPAVCArea@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CArea * *,CArea * *>, COMDAT

; 4526 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4527 :     auto _FirstPtr              = _To_address(_First);
; 4528 :     auto _LastPtr               = _To_address(_Last);
; 4529 :     auto _DestPtr               = _To_address(_Dest);
; 4530 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4531 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4532 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4533 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4535 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4536 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4537 :     } else {
; 4538 :         return _Dest + (_LastPtr - _FirstPtr);
; 4539 :     }
; 4540 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAVCArea@@PAPAV1@@std@@YAPAPAVCArea@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CArea * *,CArea * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCSpeedTreeWrapper@@PAPAV1@@std@@YAPAPAVCSpeedTreeWrapper@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCSpeedTreeWrapper@@PAPAV1@@std@@YAPAPAVCSpeedTreeWrapper@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CSpeedTreeWrapper * *,CSpeedTreeWrapper * *>, COMDAT

; 4526 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4527 :     auto _FirstPtr              = _To_address(_First);
; 4528 :     auto _LastPtr               = _To_address(_Last);
; 4529 :     auto _DestPtr               = _To_address(_Dest);
; 4530 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4531 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4532 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4533 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4535 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4536 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4537 :     } else {
; 4538 :         return _Dest + (_LastPtr - _FirstPtr);
; 4539 :     }
; 4540 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAVCSpeedTreeWrapper@@PAPAV1@@std@@YAPAPAVCSpeedTreeWrapper@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CSpeedTreeWrapper * *,CSpeedTreeWrapper * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$_Copy_memmove@PAUSObjectData@CArea@@PAU12@@std@@YAPAUSObjectData@CArea@@PAU12@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAUSObjectData@CArea@@PAU12@@std@@YAPAUSObjectData@CArea@@PAU12@00@Z PROC ; std::_Copy_memmove<CArea::SObjectData *,CArea::SObjectData *>, COMDAT

; 4526 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4527 :     auto _FirstPtr              = _To_address(_First);
; 4528 :     auto _LastPtr               = _To_address(_Last);
; 4529 :     auto _DestPtr               = _To_address(_Dest);
; 4530 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4531 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4532 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4533 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4535 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4536 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4537 :     } else {
; 4538 :         return _Dest + (_LastPtr - _FirstPtr);
; 4539 :     }
; 4540 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAUSObjectData@CArea@@PAU12@@std@@YAPAUSObjectData@CArea@@PAU12@00@Z ENDP ; std::_Copy_memmove<CArea::SObjectData *,CArea::SObjectData *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAUSObjectInstance@CArea@@PAPAU12@@std@@YAPAPAUSObjectInstance@CArea@@PAPAU12@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAUSObjectInstance@CArea@@PAPAU12@@std@@YAPAPAUSObjectInstance@CArea@@PAPAU12@00@Z PROC ; std::_Copy_memmove<CArea::SObjectInstance * *,CArea::SObjectInstance * *>, COMDAT

; 4526 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4527 :     auto _FirstPtr              = _To_address(_First);
; 4528 :     auto _LastPtr               = _To_address(_Last);
; 4529 :     auto _DestPtr               = _To_address(_Dest);
; 4530 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4531 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4532 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4533 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4535 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4536 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4537 :     } else {
; 4538 :         return _Dest + (_LastPtr - _FirstPtr);
; 4539 :     }
; 4540 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAUSObjectInstance@CArea@@PAPAU12@@std@@YAPAPAUSObjectInstance@CArea@@PAPAU12@00@Z ENDP ; std::_Copy_memmove<CArea::SObjectInstance * *,CArea::SObjectInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCGraphicThingInstance@@PAPAV1@@std@@YAPAPAVCGraphicThingInstance@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCGraphicThingInstance@@PAPAV1@@std@@YAPAPAVCGraphicThingInstance@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CGraphicThingInstance * *,CGraphicThingInstance * *>, COMDAT

; 4526 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4527 :     auto _FirstPtr              = _To_address(_First);
; 4528 :     auto _LastPtr               = _To_address(_Last);
; 4529 :     auto _DestPtr               = _To_address(_Dest);
; 4530 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4531 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4532 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4533 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4535 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4536 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4537 :     } else {
; 4538 :         return _Dest + (_LastPtr - _FirstPtr);
; 4539 :     }
; 4540 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAVCGraphicThingInstance@@PAPAV1@@std@@YAPAPAVCGraphicThingInstance@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CGraphicThingInstance * *,CGraphicThingInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCDungeonBlock@@PAPAV1@@std@@YAPAPAVCDungeonBlock@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCDungeonBlock@@PAPAV1@@std@@YAPAPAVCDungeonBlock@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CDungeonBlock * *,CDungeonBlock * *>, COMDAT

; 4526 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4527 :     auto _FirstPtr              = _To_address(_First);
; 4528 :     auto _LastPtr               = _To_address(_Last);
; 4529 :     auto _DestPtr               = _To_address(_Dest);
; 4530 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4531 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4532 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4533 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4535 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4536 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4537 :     } else {
; 4538 :         return _Dest + (_LastPtr - _FirstPtr);
; 4539 :     }
; 4540 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAVCDungeonBlock@@PAPAV1@@std@@YAPAPAVCDungeonBlock@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CDungeonBlock * *,CDungeonBlock * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAUSAmbienceInstance@CArea@@PAPAU12@@std@@YAPAPAUSAmbienceInstance@CArea@@PAPAU12@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAUSAmbienceInstance@CArea@@PAPAU12@@std@@YAPAPAUSAmbienceInstance@CArea@@PAPAU12@00@Z PROC ; std::_Copy_memmove<CArea::SAmbienceInstance * *,CArea::SAmbienceInstance * *>, COMDAT

; 4526 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4527 :     auto _FirstPtr              = _To_address(_First);
; 4528 :     auto _LastPtr               = _To_address(_Last);
; 4529 :     auto _DestPtr               = _To_address(_Dest);
; 4530 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4531 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4532 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4533 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4535 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4536 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4537 :     } else {
; 4538 :         return _Dest + (_LastPtr - _FirstPtr);
; 4539 :     }
; 4540 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAUSAmbienceInstance@CArea@@PAPAU12@@std@@YAPAPAUSAmbienceInstance@CArea@@PAPAU12@00@Z ENDP ; std::_Copy_memmove<CArea::SAmbienceInstance * *,CArea::SAmbienceInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$_Copy_memmove@PAUSCRCWithNumber@CArea@@PAU12@@std@@YAPAUSCRCWithNumber@CArea@@PAU12@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAUSCRCWithNumber@CArea@@PAU12@@std@@YAPAUSCRCWithNumber@CArea@@PAU12@00@Z PROC ; std::_Copy_memmove<CArea::SCRCWithNumber *,CArea::SCRCWithNumber *>, COMDAT

; 4526 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4527 :     auto _FirstPtr              = _To_address(_First);
; 4528 :     auto _LastPtr               = _To_address(_Last);
; 4529 :     auto _DestPtr               = _To_address(_Dest);
; 4530 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4531 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4532 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4533 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4535 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4536 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4537 :     } else {
; 4538 :         return _Dest + (_LastPtr - _FirstPtr);
; 4539 :     }
; 4540 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAUSCRCWithNumber@CArea@@PAU12@@std@@YAPAUSCRCWithNumber@CArea@@PAU12@00@Z ENDP ; std::_Copy_memmove<CArea::SCRCWithNumber *,CArea::SCRCWithNumber *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCEffectInstance@@PAPAV1@@std@@YAPAPAVCEffectInstance@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCEffectInstance@@PAPAV1@@std@@YAPAPAVCEffectInstance@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CEffectInstance * *,CEffectInstance * *>, COMDAT

; 4526 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4527 :     auto _FirstPtr              = _To_address(_First);
; 4528 :     auto _LastPtr               = _To_address(_Last);
; 4529 :     auto _DestPtr               = _To_address(_Dest);
; 4530 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4531 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4532 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4533 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4535 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4536 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4537 :     } else {
; 4538 :         return _Dest + (_LastPtr - _FirstPtr);
; 4539 :     }
; 4540 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAVCEffectInstance@@PAPAV1@@std@@YAPAPAVCEffectInstance@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CEffectInstance * *,CEffectInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
;	COMDAT ??$_Pop_heap_hole_by_index@PAUSObjectData@CArea@@U12@UObjectDataComp@2@@std@@YAXPAUSObjectData@CArea@@HH$$QAU12@UObjectDataComp@2@@Z
_TEXT	SEGMENT
tv333 = -4						; size = 4
__First$ = 8						; size = 4
__Top$1$ = 12						; size = 4
__Hole$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Pop_heap_hole_by_index@PAUSObjectData@CArea@@U12@UObjectDataComp@2@@std@@YAXPAUSObjectData@CArea@@HH$$QAU12@UObjectDataComp@2@@Z PROC ; std::_Pop_heap_hole_by_index<CArea::SObjectData *,CArea::SObjectData,CArea::ObjectDataComp>, COMDAT

; 6432 :     _RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Bottom, _Ty&& _Val, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 6433 :     // percolate _Hole to _Bottom, then push _Val
; 6434 :     _STL_INTERNAL_CHECK(_Bottom > 0);
; 6435 : 
; 6436 :     using _Diff      = _Iter_diff_t<_RanIt>;
; 6437 :     const _Diff _Top = _Hole;
; 6438 :     _Diff _Idx       = _Hole;
; 6439 : 
; 6440 :     // Check whether _Idx can have a child before calculating that child's index, since
; 6441 :     // calculating the child's index can trigger integer overflows
; 6442 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen

  00004	8b 45 10	 mov	 eax, DWORD PTR __Bottom$[ebp]
  00007	53		 push	 ebx
  00008	56		 push	 esi
  00009	8b 75 0c	 mov	 esi, DWORD PTR __Hole$[ebp]
  0000c	8b d6		 mov	 edx, esi
  0000e	8d 48 ff	 lea	 ecx, DWORD PTR [eax-1]
  00011	89 75 0c	 mov	 DWORD PTR __Top$1$[ebp], esi
  00014	8b d9		 mov	 ebx, ecx
  00016	89 4d fc	 mov	 DWORD PTR tv333[ebp], ecx
  00019	d1 fb		 sar	 ebx, 1
  0001b	57		 push	 edi

; 6443 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

  0001c	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  0001f	3b f3		 cmp	 esi, ebx
  00021	7d 45		 jge	 SHORT $LN3@Pop_heap_h
$LL2@Pop_heap_h:

; 6444 :         _Idx = 2 * _Idx + 2;

  00023	03 d2		 add	 edx, edx

; 6445 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

  00025	8d 0c 52	 lea	 ecx, DWORD PTR [edx+edx*2]
  00028	03 c9		 add	 ecx, ecx

; 6446 :             --_Idx;
; 6447 :         }
; 6448 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  0002a	8b 44 cf 6c	 mov	 eax, DWORD PTR [edi+ecx*8+108]
  0002e	3b 44 cf 3c	 cmp	 eax, DWORD PTR [edi+ecx*8+60]
  00032	1b c0		 sbb	 eax, eax
  00034	83 c0 02	 add	 eax, 2
  00037	03 d0		 add	 edx, eax
  00039	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  0003c	03 c0		 add	 eax, eax

; 6449 :         _Hole             = _Idx;

  0003e	8b f2		 mov	 esi, edx
  00040	8d 0c 52	 lea	 ecx, DWORD PTR [edx+edx*2]
  00043	03 c9		 add	 ecx, ecx
  00045	0f 10 04 cf	 movups	 xmm0, XMMWORD PTR [edi+ecx*8]
  00049	0f 11 04 c7	 movups	 XMMWORD PTR [edi+eax*8], xmm0
  0004d	0f 10 44 cf 10	 movups	 xmm0, XMMWORD PTR [edi+ecx*8+16]
  00052	0f 11 44 c7 10	 movups	 XMMWORD PTR [edi+eax*8+16], xmm0
  00057	0f 10 44 cf 20	 movups	 xmm0, XMMWORD PTR [edi+ecx*8+32]
  0005c	0f 11 44 c7 20	 movups	 XMMWORD PTR [edi+eax*8+32], xmm0
  00061	3b d3		 cmp	 edx, ebx
  00063	7c be		 jl	 SHORT $LL2@Pop_heap_h
  00065	8b 45 10	 mov	 eax, DWORD PTR __Bottom$[ebp]
$LN3@Pop_heap_h:

; 6450 :     }
; 6451 : 
; 6452 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

  00068	3b d3		 cmp	 edx, ebx
  0006a	75 2e		 jne	 SHORT $LN5@Pop_heap_h
  0006c	a8 01		 test	 al, 1
  0006e	75 2a		 jne	 SHORT $LN5@Pop_heap_h

; 6453 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

  00070	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00073	03 c9		 add	 ecx, ecx
  00075	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]

; 6454 :         _Hole             = _Bottom - 1;

  00078	8b 75 fc	 mov	 esi, DWORD PTR tv333[ebp]
  0007b	03 c0		 add	 eax, eax
  0007d	0f 10 44 cf d0	 movups	 xmm0, XMMWORD PTR [edi+ecx*8-48]
  00082	0f 11 04 c7	 movups	 XMMWORD PTR [edi+eax*8], xmm0
  00086	0f 10 44 cf e0	 movups	 xmm0, XMMWORD PTR [edi+ecx*8-32]
  0008b	0f 11 44 c7 10	 movups	 XMMWORD PTR [edi+eax*8+16], xmm0
  00090	0f 10 44 cf f0	 movups	 xmm0, XMMWORD PTR [edi+ecx*8-16]
  00095	0f 11 44 c7 20	 movups	 XMMWORD PTR [edi+eax*8+32], xmm0
$LN5@Pop_heap_h:

; 6328 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

  0009a	8b 5d 14	 mov	 ebx, DWORD PTR __Val$[ebp]
  0009d	39 75 0c	 cmp	 DWORD PTR __Top$1$[ebp], esi
  000a0	7d 3a		 jge	 SHORT $LN24@Pop_heap_h
$LL12@Pop_heap_h:

; 6327 :     for (_Diff _Idx = (_Hole - 1) >> 1; // shift for codegen

  000a2	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  000a5	d1 f8		 sar	 eax, 1

; 6328 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

  000a7	8d 14 40	 lea	 edx, DWORD PTR [eax+eax*2]
  000aa	c1 e2 04	 shl	 edx, 4
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h

; 57   : 				return lhs.dwCRC < rhs.dwCRC;

  000ad	03 d7		 add	 edx, edi
  000af	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  000b2	3b 4b 0c	 cmp	 ecx, DWORD PTR [ebx+12]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 6328 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

  000b5	73 25		 jae	 SHORT $LN24@Pop_heap_h

; 6329 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 6330 :         // move _Hole up to parent
; 6331 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  000b7	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  000ba	8d 0c 76	 lea	 ecx, DWORD PTR [esi+esi*2]

; 6332 :         _Hole             = _Idx;

  000bd	8b f0		 mov	 esi, eax
  000bf	03 c9		 add	 ecx, ecx
  000c1	0f 11 04 cf	 movups	 XMMWORD PTR [edi+ecx*8], xmm0
  000c5	0f 10 42 10	 movups	 xmm0, XMMWORD PTR [edx+16]
  000c9	0f 11 44 cf 10	 movups	 XMMWORD PTR [edi+ecx*8+16], xmm0
  000ce	0f 10 42 20	 movups	 xmm0, XMMWORD PTR [edx+32]
  000d2	0f 11 44 cf 20	 movups	 XMMWORD PTR [edi+ecx*8+32], xmm0
  000d7	39 45 0c	 cmp	 DWORD PTR __Top$1$[ebp], eax
  000da	7c c6		 jl	 SHORT $LL12@Pop_heap_h
$LN24@Pop_heap_h:

; 6333 :     }
; 6334 : 
; 6335 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

  000dc	0f 10 03	 movups	 xmm0, XMMWORD PTR [ebx]
  000df	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  000e2	03 c0		 add	 eax, eax
  000e4	0f 11 04 c7	 movups	 XMMWORD PTR [edi+eax*8], xmm0
  000e8	0f 10 43 10	 movups	 xmm0, XMMWORD PTR [ebx+16]
  000ec	0f 11 44 c7 10	 movups	 XMMWORD PTR [edi+eax*8+16], xmm0
  000f1	0f 10 43 20	 movups	 xmm0, XMMWORD PTR [ebx+32]
  000f5	0f 11 44 c7 20	 movups	 XMMWORD PTR [edi+eax*8+32], xmm0
  000fa	5f		 pop	 edi
  000fb	5e		 pop	 esi
  000fc	5b		 pop	 ebx

; 6455 :     }
; 6456 : 
; 6457 :     _STD _Push_heap_by_index(_First, _Hole, _Top, _STD forward<_Ty>(_Val), _Pred);
; 6458 : }

  000fd	8b e5		 mov	 esp, ebp
  000ff	5d		 pop	 ebp
  00100	c3		 ret	 0
??$_Pop_heap_hole_by_index@PAUSObjectData@CArea@@U12@UObjectDataComp@2@@std@@YAXPAUSObjectData@CArea@@HH$$QAU12@UObjectDataComp@2@@Z ENDP ; std::_Pop_heap_hole_by_index<CArea::SObjectData *,CArea::SObjectData,CArea::ObjectDataComp>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
;	COMDAT ??$_Pop_heap_hole_by_index@PAUSCRCWithNumber@CArea@@U12@UCRCNumComp@2@@std@@YAXPAUSCRCWithNumber@CArea@@HH$$QAU12@UCRCNumComp@2@@Z
_TEXT	SEGMENT
tv384 = -4						; size = 4
__First$ = 8						; size = 4
__Top$1$ = 12						; size = 4
__Hole$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Pop_heap_hole_by_index@PAUSCRCWithNumber@CArea@@U12@UCRCNumComp@2@@std@@YAXPAUSCRCWithNumber@CArea@@HH$$QAU12@UCRCNumComp@2@@Z PROC ; std::_Pop_heap_hole_by_index<CArea::SCRCWithNumber *,CArea::SCRCWithNumber,CArea::CRCNumComp>, COMDAT

; 6432 :     _RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Bottom, _Ty&& _Val, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 6433 :     // percolate _Hole to _Bottom, then push _Val
; 6434 :     _STL_INTERNAL_CHECK(_Bottom > 0);
; 6435 : 
; 6436 :     using _Diff      = _Iter_diff_t<_RanIt>;
; 6437 :     const _Diff _Top = _Hole;
; 6438 :     _Diff _Idx       = _Hole;
; 6439 : 
; 6440 :     // Check whether _Idx can have a child before calculating that child's index, since
; 6441 :     // calculating the child's index can trigger integer overflows
; 6442 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen

  00004	8b 55 10	 mov	 edx, DWORD PTR __Bottom$[ebp]
  00007	8b 45 0c	 mov	 eax, DWORD PTR __Hole$[ebp]
  0000a	53		 push	 ebx
  0000b	56		 push	 esi

; 6443 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

  0000c	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000f	8d 4a ff	 lea	 ecx, DWORD PTR [edx-1]
  00012	8b d9		 mov	 ebx, ecx
  00014	89 45 0c	 mov	 DWORD PTR __Top$1$[ebp], eax
  00017	d1 fb		 sar	 ebx, 1
  00019	89 4d fc	 mov	 DWORD PTR tv384[ebp], ecx
  0001c	57		 push	 edi
  0001d	8b f8		 mov	 edi, eax
  0001f	3b c3		 cmp	 eax, ebx
  00021	7d 29		 jge	 SHORT $LN3@Pop_heap_h
$LL2@Pop_heap_h:

; 6444 :         _Idx = 2 * _Idx + 2;

  00023	8d 14 3f	 lea	 edx, DWORD PTR [edi+edi]

; 6445 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {
; 6446 :             --_Idx;
; 6447 :         }
; 6448 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  00026	8b 4c d6 14	 mov	 ecx, DWORD PTR [esi+edx*8+20]
  0002a	39 4c d6 0c	 cmp	 DWORD PTR [esi+edx*8+12], ecx
  0002e	1b c9		 sbb	 ecx, ecx
  00030	8d 79 02	 lea	 edi, DWORD PTR [ecx+2]
  00033	03 fa		 add	 edi, edx
  00035	8b 0c fe	 mov	 ecx, DWORD PTR [esi+edi*8]
  00038	8b 54 fe 04	 mov	 edx, DWORD PTR [esi+edi*8+4]
  0003c	89 0c c6	 mov	 DWORD PTR [esi+eax*8], ecx
  0003f	89 54 c6 04	 mov	 DWORD PTR [esi+eax*8+4], edx

; 6449 :         _Hole             = _Idx;

  00043	8b c7		 mov	 eax, edi
  00045	3b fb		 cmp	 edi, ebx
  00047	7c da		 jl	 SHORT $LL2@Pop_heap_h
  00049	8b 55 10	 mov	 edx, DWORD PTR __Bottom$[ebp]
$LN3@Pop_heap_h:

; 6450 :     }
; 6451 : 
; 6452 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

  0004c	3b fb		 cmp	 edi, ebx
  0004e	75 17		 jne	 SHORT $LN5@Pop_heap_h
  00050	f6 c2 01	 test	 dl, 1
  00053	75 12		 jne	 SHORT $LN5@Pop_heap_h

; 6453 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

  00055	8b 4c d6 f8	 mov	 ecx, DWORD PTR [esi+edx*8-8]
  00059	8b 54 d6 fc	 mov	 edx, DWORD PTR [esi+edx*8-4]
  0005d	89 0c c6	 mov	 DWORD PTR [esi+eax*8], ecx
  00060	89 54 c6 04	 mov	 DWORD PTR [esi+eax*8+4], edx

; 6454 :         _Hole             = _Bottom - 1;

  00064	8b 45 fc	 mov	 eax, DWORD PTR tv384[ebp]
$LN5@Pop_heap_h:

; 6328 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

  00067	8b 5d 14	 mov	 ebx, DWORD PTR __Val$[ebp]
  0006a	39 45 0c	 cmp	 DWORD PTR __Top$1$[ebp], eax
  0006d	7d 24		 jge	 SHORT $LN24@Pop_heap_h
  0006f	90		 npad	 1
$LL12@Pop_heap_h:

; 6327 :     for (_Diff _Idx = (_Hole - 1) >> 1; // shift for codegen

  00070	8d 78 ff	 lea	 edi, DWORD PTR [eax-1]
  00073	d1 ff		 sar	 edi, 1
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h

; 190  : 				return lhs.dwNumber > rhs.dwNumber;

  00075	8b 4c fe 04	 mov	 ecx, DWORD PTR [esi+edi*8+4]
  00079	3b 4b 04	 cmp	 ecx, DWORD PTR [ebx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 6328 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

  0007c	76 15		 jbe	 SHORT $LN24@Pop_heap_h

; 6329 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 6330 :         // move _Hole up to parent
; 6331 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  0007e	8b 0c fe	 mov	 ecx, DWORD PTR [esi+edi*8]
  00081	8b 54 fe 04	 mov	 edx, DWORD PTR [esi+edi*8+4]
  00085	89 0c c6	 mov	 DWORD PTR [esi+eax*8], ecx
  00088	89 54 c6 04	 mov	 DWORD PTR [esi+eax*8+4], edx

; 6332 :         _Hole             = _Idx;

  0008c	8b c7		 mov	 eax, edi
  0008e	39 7d 0c	 cmp	 DWORD PTR __Top$1$[ebp], edi
  00091	7c dd		 jl	 SHORT $LL12@Pop_heap_h
$LN24@Pop_heap_h:

; 6333 :     }
; 6334 : 
; 6335 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

  00093	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00095	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  00098	5f		 pop	 edi
  00099	89 0c c6	 mov	 DWORD PTR [esi+eax*8], ecx
  0009c	89 54 c6 04	 mov	 DWORD PTR [esi+eax*8+4], edx
  000a0	5e		 pop	 esi
  000a1	5b		 pop	 ebx

; 6455 :     }
; 6456 : 
; 6457 :     _STD _Push_heap_by_index(_First, _Hole, _Top, _STD forward<_Ty>(_Val), _Pred);
; 6458 : }

  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c3		 ret	 0
??$_Pop_heap_hole_by_index@PAUSCRCWithNumber@CArea@@U12@UCRCNumComp@2@@std@@YAXPAUSCRCWithNumber@CArea@@HH$$QAU12@UCRCNumComp@2@@Z ENDP ; std::_Pop_heap_hole_by_index<CArea::SCRCWithNumber *,CArea::SCRCWithNumber,CArea::CRCNumComp>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
;	COMDAT ??$_Guess_median_unchecked@PAPAVCEffectInstance@@UCArea_LessEffectInstancePtrRenderOrder@@@std@@YAXPAPAVCEffectInstance@@00UCArea_LessEffectInstancePtrRenderOrder@@@Z
_TEXT	SEGMENT
tv495 = -8						; size = 4
__First$1$ = -4						; size = 4
tv496 = 8						; size = 4
__First$1$ = 8						; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Guess_median_unchecked@PAPAVCEffectInstance@@UCArea_LessEffectInstancePtrRenderOrder@@@std@@YAXPAPAVCEffectInstance@@00UCArea_LessEffectInstancePtrRenderOrder@@@Z PROC ; std::_Guess_median_unchecked<CEffectInstance * *,CArea_LessEffectInstancePtrRenderOrder>, COMDAT

; 7945 : _CONSTEXPR20 void _Guess_median_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 7946 :     // sort median element to middle
; 7947 :     using _Diff        = _Iter_diff_t<_RanIt>;
; 7948 :     const _Diff _Count = _Last - _First;

  00007	8b 5d 10	 mov	 ebx, DWORD PTR __Last$[ebp]
  0000a	8b c3		 mov	 eax, ebx
  0000c	56		 push	 esi
  0000d	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00010	2b c6		 sub	 eax, esi
  00012	c1 f8 02	 sar	 eax, 2
  00015	57		 push	 edi
  00016	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 7949 :     if (40 < _Count) { // Tukey's ninther

  00018	51		 push	 ecx
  00019	83 f8 28	 cmp	 eax, 40			; 00000028H
  0001c	0f 8e 52 01 00
	00		 jle	 $LN2@Guess_medi

; 7950 :         const _Diff _Step     = (_Count + 1) >> 3; // +1 can't overflow because range was made inclusive in caller

  00022	40		 inc	 eax
  00023	c1 f8 03	 sar	 eax, 3

; 7952 :         _Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);

  00026	8d 14 c5 00 00
	00 00		 lea	 edx, DWORD PTR [eax*8]
  0002d	c1 e0 02	 shl	 eax, 2
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 120  : 		return pkLeft->LessRenderOrder(pkRight);

  00030	8b 0c 30	 mov	 ecx, DWORD PTR [eax+esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7952 :         _Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);

  00033	8d 3c 30	 lea	 edi, DWORD PTR [eax+esi]
  00036	89 55 f8	 mov	 DWORD PTR tv495[ebp], edx
  00039	89 45 08	 mov	 DWORD PTR tv496[ebp], eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 120  : 		return pkLeft->LessRenderOrder(pkRight);

  0003c	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7931 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  00041	84 c0		 test	 al, al
  00043	74 08		 je	 SHORT $LN95@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 99   :     _Ty _Tmp = _STD move(_Left);

  00045	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 100  :     _Left    = _STD move(_Right);

  00047	8b 06		 mov	 eax, DWORD PTR [esi]
  00049	89 07		 mov	 DWORD PTR [edi], eax

; 101  :     _Right   = _STD move(_Tmp);

  0004b	89 0e		 mov	 DWORD PTR [esi], ecx
$LN95@Guess_medi:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 120  : 		return pkLeft->LessRenderOrder(pkRight);

  0004d	8b 45 f8	 mov	 eax, DWORD PTR tv495[ebp]
  00050	ff 37		 push	 DWORD PTR [edi]
  00052	8b 0c 30	 mov	 ecx, DWORD PTR [eax+esi]
  00055	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7935 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

  0005a	84 c0		 test	 al, al
  0005c	74 20		 je	 SHORT $LN21@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 99   :     _Ty _Tmp = _STD move(_Left);

  0005e	8b 55 f8	 mov	 edx, DWORD PTR tv495[ebp]

; 100  :     _Left    = _STD move(_Right);

  00061	8b 07		 mov	 eax, DWORD PTR [edi]
  00063	8b 0c 32	 mov	 ecx, DWORD PTR [edx+esi]
  00066	89 04 32	 mov	 DWORD PTR [edx+esi], eax

; 101  :     _Right   = _STD move(_Tmp);

  00069	89 0f		 mov	 DWORD PTR [edi], ecx
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 120  : 		return pkLeft->LessRenderOrder(pkRight);

  0006b	ff 36		 push	 DWORD PTR [esi]
  0006d	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7938 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  00072	84 c0		 test	 al, al
  00074	74 08		 je	 SHORT $LN21@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 99   :     _Ty _Tmp = _STD move(_Left);

  00076	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 100  :     _Left    = _STD move(_Right);

  00078	8b 06		 mov	 eax, DWORD PTR [esi]
  0007a	89 07		 mov	 DWORD PTR [edi], eax

; 101  :     _Right   = _STD move(_Tmp);

  0007c	89 0e		 mov	 DWORD PTR [esi], ecx
$LN21@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7953 :         _Med3_unchecked(_Mid - _Step, _Mid, _Mid + _Step, _Pred);

  0007e	8b 75 0c	 mov	 esi, DWORD PTR __Mid$[ebp]
  00081	8b c6		 mov	 eax, esi
  00083	2b 45 08	 sub	 eax, DWORD PTR tv496[ebp]
  00086	89 45 fc	 mov	 DWORD PTR __First$1$[ebp], eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 120  : 		return pkLeft->LessRenderOrder(pkRight);

  00089	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008b	ff 30		 push	 DWORD PTR [eax]
  0008d	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7931 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  00092	84 c0		 test	 al, al
  00094	74 0b		 je	 SHORT $LN96@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 100  :     _Left    = _STD move(_Right);

  00096	8b 55 fc	 mov	 edx, DWORD PTR __First$1$[ebp]
  00099	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0009b	8b 02		 mov	 eax, DWORD PTR [edx]
  0009d	89 06		 mov	 DWORD PTR [esi], eax

; 101  :     _Right   = _STD move(_Tmp);

  0009f	89 0a		 mov	 DWORD PTR [edx], ecx
$LN96@Guess_medi:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 120  : 		return pkLeft->LessRenderOrder(pkRight);

  000a1	8b 45 08	 mov	 eax, DWORD PTR tv496[ebp]
  000a4	ff 36		 push	 DWORD PTR [esi]
  000a6	8b 0c 30	 mov	 ecx, DWORD PTR [eax+esi]
  000a9	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7935 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

  000ae	84 c0		 test	 al, al
  000b0	74 26		 je	 SHORT $LN38@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 99   :     _Ty _Tmp = _STD move(_Left);

  000b2	8b 55 08	 mov	 edx, DWORD PTR tv496[ebp]

; 100  :     _Left    = _STD move(_Right);

  000b5	8b 06		 mov	 eax, DWORD PTR [esi]
  000b7	8b 0c 32	 mov	 ecx, DWORD PTR [edx+esi]
  000ba	89 04 32	 mov	 DWORD PTR [edx+esi], eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 120  : 		return pkLeft->LessRenderOrder(pkRight);

  000bd	8b 45 fc	 mov	 eax, DWORD PTR __First$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 101  :     _Right   = _STD move(_Tmp);

  000c0	89 0e		 mov	 DWORD PTR [esi], ecx
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 120  : 		return pkLeft->LessRenderOrder(pkRight);

  000c2	ff 30		 push	 DWORD PTR [eax]
  000c4	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7938 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  000c9	84 c0		 test	 al, al
  000cb	74 0b		 je	 SHORT $LN38@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 100  :     _Left    = _STD move(_Right);

  000cd	8b 55 fc	 mov	 edx, DWORD PTR __First$1$[ebp]
  000d0	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000d2	8b 02		 mov	 eax, DWORD PTR [edx]
  000d4	89 06		 mov	 DWORD PTR [esi], eax

; 101  :     _Right   = _STD move(_Tmp);

  000d6	89 0a		 mov	 DWORD PTR [edx], ecx
$LN38@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7954 :         _Med3_unchecked(_Last - _Two_step, _Last - _Step, _Last, _Pred);

  000d8	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  000db	2b 45 f8	 sub	 eax, DWORD PTR tv495[ebp]
  000de	2b 5d 08	 sub	 ebx, DWORD PTR tv496[ebp]
  000e1	89 45 08	 mov	 DWORD PTR __First$1$[ebp], eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 120  : 		return pkLeft->LessRenderOrder(pkRight);

  000e4	ff 30		 push	 DWORD PTR [eax]
  000e6	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000e8	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7931 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  000ed	84 c0		 test	 al, al
  000ef	74 0b		 je	 SHORT $LN97@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 100  :     _Left    = _STD move(_Right);

  000f1	8b 55 08	 mov	 edx, DWORD PTR __First$1$[ebp]
  000f4	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000f6	8b 02		 mov	 eax, DWORD PTR [edx]
  000f8	89 03		 mov	 DWORD PTR [ebx], eax

; 101  :     _Right   = _STD move(_Tmp);

  000fa	89 0a		 mov	 DWORD PTR [edx], ecx
$LN97@Guess_medi:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 120  : 		return pkLeft->LessRenderOrder(pkRight);

  000fc	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  000ff	ff 33		 push	 DWORD PTR [ebx]
  00101	8b 08		 mov	 ecx, DWORD PTR [eax]
  00103	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7935 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

  00108	84 c0		 test	 al, al
  0010a	74 24		 je	 SHORT $LN55@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 99   :     _Ty _Tmp = _STD move(_Left);

  0010c	8b 55 10	 mov	 edx, DWORD PTR __Last$[ebp]

; 100  :     _Left    = _STD move(_Right);

  0010f	8b 03		 mov	 eax, DWORD PTR [ebx]
  00111	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00113	89 02		 mov	 DWORD PTR [edx], eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 120  : 		return pkLeft->LessRenderOrder(pkRight);

  00115	8b 45 08	 mov	 eax, DWORD PTR __First$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 101  :     _Right   = _STD move(_Tmp);

  00118	89 0b		 mov	 DWORD PTR [ebx], ecx
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 120  : 		return pkLeft->LessRenderOrder(pkRight);

  0011a	ff 30		 push	 DWORD PTR [eax]
  0011c	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7938 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  00121	84 c0		 test	 al, al
  00123	74 0b		 je	 SHORT $LN55@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 100  :     _Left    = _STD move(_Right);

  00125	8b 55 08	 mov	 edx, DWORD PTR __First$1$[ebp]
  00128	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0012a	8b 02		 mov	 eax, DWORD PTR [edx]
  0012c	89 03		 mov	 DWORD PTR [ebx], eax

; 101  :     _Right   = _STD move(_Tmp);

  0012e	89 0a		 mov	 DWORD PTR [edx], ecx
$LN55@Guess_medi:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 120  : 		return pkLeft->LessRenderOrder(pkRight);

  00130	ff 37		 push	 DWORD PTR [edi]
  00132	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00134	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7931 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  00139	84 c0		 test	 al, al
  0013b	74 08		 je	 SHORT $LN98@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 99   :     _Ty _Tmp = _STD move(_Left);

  0013d	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 100  :     _Left    = _STD move(_Right);

  0013f	8b 07		 mov	 eax, DWORD PTR [edi]
  00141	89 06		 mov	 DWORD PTR [esi], eax

; 101  :     _Right   = _STD move(_Tmp);

  00143	89 0f		 mov	 DWORD PTR [edi], ecx
$LN98@Guess_medi:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 120  : 		return pkLeft->LessRenderOrder(pkRight);

  00145	ff 36		 push	 DWORD PTR [esi]
  00147	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00149	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7935 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

  0014e	84 c0		 test	 al, al
  00150	74 60		 je	 SHORT $LN89@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 99   :     _Ty _Tmp = _STD move(_Left);

  00152	8b 0b		 mov	 ecx, DWORD PTR [ebx]

; 100  :     _Left    = _STD move(_Right);

  00154	8b 06		 mov	 eax, DWORD PTR [esi]
  00156	89 03		 mov	 DWORD PTR [ebx], eax

; 101  :     _Right   = _STD move(_Tmp);

  00158	89 0e		 mov	 DWORD PTR [esi], ecx
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 120  : 		return pkLeft->LessRenderOrder(pkRight);

  0015a	ff 37		 push	 DWORD PTR [edi]
  0015c	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7938 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  00161	84 c0		 test	 al, al
  00163	74 4d		 je	 SHORT $LN89@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 99   :     _Ty _Tmp = _STD move(_Left);

  00165	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 100  :     _Left    = _STD move(_Right);

  00167	8b 07		 mov	 eax, DWORD PTR [edi]
  00169	89 06		 mov	 DWORD PTR [esi], eax

; 101  :     _Right   = _STD move(_Tmp);

  0016b	89 0f		 mov	 DWORD PTR [edi], ecx
  0016d	5f		 pop	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7959 : }

  0016e	5e		 pop	 esi
  0016f	5b		 pop	 ebx
  00170	8b e5		 mov	 esp, ebp
  00172	5d		 pop	 ebp
  00173	c3		 ret	 0
$LN2@Guess_medi:

; 7931 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  00174	8b 7d 0c	 mov	 edi, DWORD PTR __Mid$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 120  : 		return pkLeft->LessRenderOrder(pkRight);

  00177	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00179	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7931 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  0017e	84 c0		 test	 al, al
  00180	74 08		 je	 SHORT $LN99@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 99   :     _Ty _Tmp = _STD move(_Left);

  00182	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 100  :     _Left    = _STD move(_Right);

  00184	8b 06		 mov	 eax, DWORD PTR [esi]
  00186	89 07		 mov	 DWORD PTR [edi], eax

; 101  :     _Right   = _STD move(_Tmp);

  00188	89 0e		 mov	 DWORD PTR [esi], ecx
$LN99@Guess_medi:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 120  : 		return pkLeft->LessRenderOrder(pkRight);

  0018a	ff 37		 push	 DWORD PTR [edi]
  0018c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0018e	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7935 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

  00193	84 c0		 test	 al, al
  00195	74 1b		 je	 SHORT $LN89@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 99   :     _Ty _Tmp = _STD move(_Left);

  00197	8b 0b		 mov	 ecx, DWORD PTR [ebx]

; 100  :     _Left    = _STD move(_Right);

  00199	8b 07		 mov	 eax, DWORD PTR [edi]
  0019b	89 03		 mov	 DWORD PTR [ebx], eax

; 101  :     _Right   = _STD move(_Tmp);

  0019d	89 0f		 mov	 DWORD PTR [edi], ecx
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 120  : 		return pkLeft->LessRenderOrder(pkRight);

  0019f	ff 36		 push	 DWORD PTR [esi]
  001a1	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7938 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  001a6	84 c0		 test	 al, al
  001a8	74 08		 je	 SHORT $LN89@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 99   :     _Ty _Tmp = _STD move(_Left);

  001aa	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 100  :     _Left    = _STD move(_Right);

  001ac	8b 06		 mov	 eax, DWORD PTR [esi]
  001ae	89 07		 mov	 DWORD PTR [edi], eax

; 101  :     _Right   = _STD move(_Tmp);

  001b0	89 0e		 mov	 DWORD PTR [esi], ecx
$LN89@Guess_medi:
  001b2	5f		 pop	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7959 : }

  001b3	5e		 pop	 esi
  001b4	5b		 pop	 ebx
  001b5	8b e5		 mov	 esp, ebp
  001b7	5d		 pop	 ebp
  001b8	c3		 ret	 0
??$_Guess_median_unchecked@PAPAVCEffectInstance@@UCArea_LessEffectInstancePtrRenderOrder@@@std@@YAXPAPAVCEffectInstance@@00UCArea_LessEffectInstancePtrRenderOrder@@@Z ENDP ; std::_Guess_median_unchecked<CEffectInstance * *,CArea_LessEffectInstancePtrRenderOrder>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
;	COMDAT ??$_Pop_heap_hole_by_index@PAPAVCEffectInstance@@PAV1@UCArea_LessEffectInstancePtrRenderOrder@@@std@@YAXPAPAVCEffectInstance@@HH$$QAPAV1@UCArea_LessEffectInstancePtrRenderOrder@@@Z
_TEXT	SEGMENT
tv389 = -8						; size = 4
__Max_sequence_non_leaf$1$ = -4				; size = 4
__First$ = 8						; size = 4
__Top$1$ = 12						; size = 4
__Hole$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Pop_heap_hole_by_index@PAPAVCEffectInstance@@PAV1@UCArea_LessEffectInstancePtrRenderOrder@@@std@@YAXPAPAVCEffectInstance@@HH$$QAPAV1@UCArea_LessEffectInstancePtrRenderOrder@@@Z PROC ; std::_Pop_heap_hole_by_index<CEffectInstance * *,CEffectInstance *,CArea_LessEffectInstancePtrRenderOrder>, COMDAT

; 6432 :     _RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Bottom, _Ty&& _Val, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 6433 :     // percolate _Hole to _Bottom, then push _Val
; 6434 :     _STL_INTERNAL_CHECK(_Bottom > 0);
; 6435 : 
; 6436 :     using _Diff      = _Iter_diff_t<_RanIt>;
; 6437 :     const _Diff _Top = _Hole;
; 6438 :     _Diff _Idx       = _Hole;
; 6439 : 
; 6440 :     // Check whether _Idx can have a child before calculating that child's index, since
; 6441 :     // calculating the child's index can trigger integer overflows
; 6442 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen
; 6443 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  0000a	56		 push	 esi
  0000b	8b 75 0c	 mov	 esi, DWORD PTR __Hole$[ebp]
  0000e	8b d6		 mov	 edx, esi
  00010	57		 push	 edi
  00011	8b 7d 10	 mov	 edi, DWORD PTR __Bottom$[ebp]
  00014	8b ce		 mov	 ecx, esi
  00016	4f		 dec	 edi
  00017	89 55 0c	 mov	 DWORD PTR __Top$1$[ebp], edx
  0001a	8b c7		 mov	 eax, edi
  0001c	89 7d f8	 mov	 DWORD PTR tv389[ebp], edi
  0001f	d1 f8		 sar	 eax, 1
  00021	89 45 fc	 mov	 DWORD PTR __Max_sequence_non_leaf$1$[ebp], eax
  00024	3b f0		 cmp	 esi, eax
  00026	7d 36		 jge	 SHORT $LN3@Pop_heap_h
  00028	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL2@Pop_heap_h:

; 6444 :         _Idx = 2 * _Idx + 2;

  00030	8d 3c 09	 lea	 edi, DWORD PTR [ecx+ecx]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 120  : 		return pkLeft->LessRenderOrder(pkRight);

  00033	ff 74 bb 04	 push	 DWORD PTR [ebx+edi*4+4]
  00037	8b 4c bb 08	 mov	 ecx, DWORD PTR [ebx+edi*4+8]
  0003b	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 6448 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  00040	0f b6 c8	 movzx	 ecx, al
  00043	83 f1 01	 xor	 ecx, 1
  00046	41		 inc	 ecx
  00047	03 cf		 add	 ecx, edi
  00049	8b 04 8b	 mov	 eax, DWORD PTR [ebx+ecx*4]
  0004c	89 04 b3	 mov	 DWORD PTR [ebx+esi*4], eax

; 6449 :         _Hole             = _Idx;

  0004f	8b f1		 mov	 esi, ecx
  00051	8b 45 fc	 mov	 eax, DWORD PTR __Max_sequence_non_leaf$1$[ebp]
  00054	3b c8		 cmp	 ecx, eax
  00056	7c d8		 jl	 SHORT $LL2@Pop_heap_h
  00058	8b 55 0c	 mov	 edx, DWORD PTR __Top$1$[ebp]
  0005b	8b 7d f8	 mov	 edi, DWORD PTR tv389[ebp]
$LN3@Pop_heap_h:

; 6450 :     }
; 6451 : 
; 6452 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

  0005e	3b c8		 cmp	 ecx, eax
  00060	75 10		 jne	 SHORT $LN5@Pop_heap_h
  00062	8b 45 10	 mov	 eax, DWORD PTR __Bottom$[ebp]
  00065	a8 01		 test	 al, 1
  00067	75 09		 jne	 SHORT $LN5@Pop_heap_h

; 6453 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

  00069	8b 44 83 fc	 mov	 eax, DWORD PTR [ebx+eax*4-4]
  0006d	89 04 b3	 mov	 DWORD PTR [ebx+esi*4], eax

; 6454 :         _Hole             = _Bottom - 1;

  00070	8b f7		 mov	 esi, edi
$LN5@Pop_heap_h:

; 6328 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

  00072	3b d6		 cmp	 edx, esi
  00074	7d 23		 jge	 SHORT $LN24@Pop_heap_h
$LL12@Pop_heap_h:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 120  : 		return pkLeft->LessRenderOrder(pkRight);

  00076	8b 45 14	 mov	 eax, DWORD PTR __Val$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 6327 :     for (_Diff _Idx = (_Hole - 1) >> 1; // shift for codegen

  00079	8d 7e ff	 lea	 edi, DWORD PTR [esi-1]
  0007c	d1 ff		 sar	 edi, 1
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 120  : 		return pkLeft->LessRenderOrder(pkRight);

  0007e	ff 30		 push	 DWORD PTR [eax]
  00080	8b 0c bb	 mov	 ecx, DWORD PTR [ebx+edi*4]
  00083	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 6328 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

  00088	84 c0		 test	 al, al
  0008a	74 0d		 je	 SHORT $LN24@Pop_heap_h

; 6329 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 6330 :         // move _Hole up to parent
; 6331 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  0008c	8b 04 bb	 mov	 eax, DWORD PTR [ebx+edi*4]
  0008f	89 04 b3	 mov	 DWORD PTR [ebx+esi*4], eax

; 6332 :         _Hole             = _Idx;

  00092	8b f7		 mov	 esi, edi
  00094	39 7d 0c	 cmp	 DWORD PTR __Top$1$[ebp], edi
  00097	7c dd		 jl	 SHORT $LL12@Pop_heap_h
$LN24@Pop_heap_h:

; 6455 :     }
; 6456 : 
; 6457 :     _STD _Push_heap_by_index(_First, _Hole, _Top, _STD forward<_Ty>(_Val), _Pred);
; 6458 : }

  00099	8b 45 14	 mov	 eax, DWORD PTR __Val$[ebp]
  0009c	5f		 pop	 edi
  0009d	8b 00		 mov	 eax, DWORD PTR [eax]
  0009f	89 04 b3	 mov	 DWORD PTR [ebx+esi*4], eax
  000a2	5e		 pop	 esi
  000a3	5b		 pop	 ebx
  000a4	8b e5		 mov	 esp, ebp
  000a6	5d		 pop	 ebp
  000a7	c3		 ret	 0
??$_Pop_heap_hole_by_index@PAPAVCEffectInstance@@PAV1@UCArea_LessEffectInstancePtrRenderOrder@@@std@@YAXPAPAVCEffectInstance@@HH$$QAPAV1@UCArea_LessEffectInstancePtrRenderOrder@@@Z ENDP ; std::_Pop_heap_hole_by_index<CEffectInstance * *,CEffectInstance *,CArea_LessEffectInstancePtrRenderOrder>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$_Zero_range@PAPAUSObjectInstance@CArea@@@std@@YAPAPAUSObjectInstance@CArea@@QAPAU12@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Zero_range@PAPAUSObjectInstance@CArea@@@std@@YAPAPAUSObjectInstance@CArea@@QAPAU12@0@Z PROC ; std::_Zero_range<CArea::SObjectInstance * *>, COMDAT

; 2017 : _Ptr _Zero_range(const _Ptr _First, const _Ptr _Last) { // fill [_First, _Last) with zeroes

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2018 :     char* const _First_ch = reinterpret_cast<char*>(_To_address(_First));
; 2019 :     char* const _Last_ch  = reinterpret_cast<char*>(_To_address(_Last));
; 2020 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	51		 push	 ecx
  0000c	6a 00		 push	 0
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 _memset

; 2021 :     return _Last;

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2022 : }

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Zero_range@PAPAUSObjectInstance@CArea@@@std@@YAPAPAUSObjectInstance@CArea@@QAPAU12@0@Z ENDP ; std::_Zero_range<CArea::SObjectInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
;	COMDAT ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z PROC ; std::operator<<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 5056 :     const basic_string<_Elem, _Traits, _Alloc>& _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2235 :         const value_type* _Result = _Bx._Buf;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b d0		 mov	 edx, eax

; 2244 :         return _BUF_SIZE <= _Myres;

  00008	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2236 :         if (_Large_string_engaged()) {

  0000c	72 02		 jb	 SHORT $LN6@operator

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  0000e	8b 10		 mov	 edx, DWORD PTR [eax]
$LN6@operator:

; 2235 :         const value_type* _Result = _Bx._Buf;

  00010	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00013	56		 push	 esi
  00014	8b f1		 mov	 esi, ecx

; 2244 :         return _BUF_SIZE <= _Myres;

  00016	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 2236 :         if (_Large_string_engaged()) {

  0001a	72 02		 jb	 SHORT $LN11@operator

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  0001c	8b 31		 mov	 esi, DWORD PTR [ecx]
$LN11@operator:

; 4626 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  0001e	ff 70 10	 push	 DWORD PTR [eax+16]
  00021	52		 push	 edx
  00022	ff 71 10	 push	 DWORD PTR [ecx+16]
  00025	56		 push	 esi
  00026	e8 00 00 00 00	 call	 ??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z ; std::_Traits_compare<std::char_traits<char> >
  0002b	83 c4 10	 add	 esp, 16			; 00000010H

; 5057 :     return _Left.compare(_Right) < 0;

  0002e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00031	5e		 pop	 esi

; 5058 : }

  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ENDP ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@PAUSObjectInstance@CArea@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@PAUSObjectInstance@CArea@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<CArea::SObjectInstance *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<CArea::SObjectInstance *,void *> > >, COMDAT
; _this$ = ecx

; 1156 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 265  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 14		 push	 20			; 00000014H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 1157 :             _Al.deallocate(_Ptr, 1);
; 1158 :         }
; 1159 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@PAUSObjectInstance@CArea@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<CArea::SObjectInstance *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<CArea::SObjectInstance *,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@HPAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@HPAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<int,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<int,void *> > >, COMDAT
; _this$ = ecx

; 1156 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 265  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 14		 push	 20			; 00000014H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 1157 :             _Al.deallocate(_Ptr, 1);
; 1158 :         }
; 1159 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@HPAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<int,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<int,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CEffectInstance *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CEffectInstance *>,void *> > >, COMDAT
; _this$ = ecx

; 1156 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 265  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 18		 push	 24			; 00000018H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 1157 :             _Al.deallocate(_Ptr, 1);
; 1158 :         }
; 1159 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CEffectInstance *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CEffectInstance *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<CGraphicThingInstance * const,unsigned long>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<CGraphicThingInstance * const,unsigned long>,void *> > >, COMDAT
; _this$ = ecx

; 1156 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 265  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 18		 push	 24			; 00000018H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 1157 :             _Al.deallocate(_Ptr, 1);
; 1158 :         }
; 1159 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<CGraphicThingInstance * const,unsigned long>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<CGraphicThingInstance * const,unsigned long>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
;	COMDAT ??$_Partition_by_median_guess_unchecked@PAUSObjectData@CArea@@UObjectDataComp@2@@std@@YA?AU?$pair@PAUSObjectData@CArea@@PAU12@@0@PAUSObjectData@CArea@@0UObjectDataComp@3@@Z
_TEXT	SEGMENT
tv554 = -12						; size = 4
tv555 = -8						; size = 4
__Last$1$ = -4						; size = 4
__Gfirst$1$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Glast$1$ = 20						; size = 4
__Pred$ = 20						; size = 1
??$_Partition_by_median_guess_unchecked@PAUSObjectData@CArea@@UObjectDataComp@2@@std@@YA?AU?$pair@PAUSObjectData@CArea@@PAU12@@0@PAUSObjectData@CArea@@0UObjectDataComp@3@@Z PROC ; std::_Partition_by_median_guess_unchecked<CArea::SObjectData *,CArea::ObjectDataComp>, COMDAT

; 7962 : _CONSTEXPR20 pair<_RanIt, _RanIt> _Partition_by_median_guess_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 7963 :     // partition [_First, _Last)
; 7964 :     _RanIt _Mid = _First + ((_Last - _First) >> 1); // shift for codegen

  00007	8b 5d 10	 mov	 ebx, DWORD PTR __Last$[ebp]
  0000a	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	8b 7d 0c	 mov	 edi, DWORD PTR __First$[ebp]
  00014	8b cb		 mov	 ecx, ebx
  00016	2b cf		 sub	 ecx, edi
  00018	f7 e9		 imul	 ecx

; 7965 :     _Guess_median_unchecked(_First, _Mid, _Prev_iter(_Last), _Pred);

  0001a	8d 43 d0	 lea	 eax, DWORD PTR [ebx-48]
  0001d	c1 fa 03	 sar	 edx, 3
  00020	8b ca		 mov	 ecx, edx
  00022	89 45 fc	 mov	 DWORD PTR __Last$1$[ebp], eax
  00025	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00028	03 ca		 add	 ecx, edx
  0002a	d1 f9		 sar	 ecx, 1
  0002c	8d 34 49	 lea	 esi, DWORD PTR [ecx+ecx*2]

; 7948 :     const _Diff _Count = _Last - _First;

  0002f	8b c8		 mov	 ecx, eax
  00031	2b cf		 sub	 ecx, edi

; 7963 :     // partition [_First, _Last)
; 7964 :     _RanIt _Mid = _First + ((_Last - _First) >> 1); // shift for codegen

  00033	c1 e6 04	 shl	 esi, 4

; 7948 :     const _Diff _Count = _Last - _First;

  00036	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH

; 7963 :     // partition [_First, _Last)
; 7964 :     _RanIt _Mid = _First + ((_Last - _First) >> 1); // shift for codegen

  0003b	03 f7		 add	 esi, edi

; 7948 :     const _Diff _Count = _Last - _First;

  0003d	f7 e9		 imul	 ecx
  0003f	c1 fa 03	 sar	 edx, 3
  00042	8b c2		 mov	 eax, edx
  00044	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00047	03 c2		 add	 eax, edx

; 7949 :     if (40 < _Count) { // Tukey's ninther

  00049	83 f8 28	 cmp	 eax, 40			; 00000028H
  0004c	7e 68		 jle	 SHORT $LN67@Partition_

; 7950 :         const _Diff _Step     = (_Count + 1) >> 3; // +1 can't overflow because range was made inclusive in caller

  0004e	40		 inc	 eax
  0004f	c1 f8 03	 sar	 eax, 3

; 7951 :         const _Diff _Two_step = _Step << 1; // note: intentionally discards low-order bit
; 7952 :         _Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);

  00052	8d 1c 40	 lea	 ebx, DWORD PTR [eax+eax*2]
  00055	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00058	c1 e3 04	 shl	 ebx, 4
  0005b	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  0005e	c1 e1 05	 shl	 ecx, 5
  00061	03 c1		 add	 eax, ecx
  00063	89 4d f8	 mov	 DWORD PTR tv555[ebp], ecx
  00066	8d 14 3b	 lea	 edx, DWORD PTR [ebx+edi]
  00069	8b 7d 14	 mov	 edi, DWORD PTR __Pred$[ebp]
  0006c	57		 push	 edi
  0006d	50		 push	 eax
  0006e	52		 push	 edx
  0006f	ff 75 0c	 push	 DWORD PTR __First$[ebp]
  00072	89 55 f4	 mov	 DWORD PTR tv554[ebp], edx
  00075	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAUSObjectData@CArea@@UObjectDataComp@2@@std@@YAXPAUSObjectData@CArea@@00UObjectDataComp@2@@Z ; std::_Med3_unchecked<CArea::SObjectData *,CArea::ObjectDataComp>

; 7953 :         _Med3_unchecked(_Mid - _Step, _Mid, _Mid + _Step, _Pred);

  0007a	57		 push	 edi
  0007b	8d 04 33	 lea	 eax, DWORD PTR [ebx+esi]
  0007e	50		 push	 eax
  0007f	8b c6		 mov	 eax, esi
  00081	2b c3		 sub	 eax, ebx
  00083	56		 push	 esi
  00084	50		 push	 eax
  00085	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAUSObjectData@CArea@@UObjectDataComp@2@@std@@YAXPAUSObjectData@CArea@@00UObjectDataComp@2@@Z ; std::_Med3_unchecked<CArea::SObjectData *,CArea::ObjectDataComp>

; 7954 :         _Med3_unchecked(_Last - _Two_step, _Last - _Step, _Last, _Pred);

  0008a	8b 45 fc	 mov	 eax, DWORD PTR __Last$1$[ebp]
  0008d	8b f8		 mov	 edi, eax
  0008f	2b fb		 sub	 edi, ebx
  00091	8b 5d 14	 mov	 ebx, DWORD PTR __Pred$[ebp]
  00094	53		 push	 ebx
  00095	50		 push	 eax
  00096	2b 45 f8	 sub	 eax, DWORD PTR tv555[ebp]
  00099	57		 push	 edi
  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAUSObjectData@CArea@@UObjectDataComp@2@@std@@YAXPAUSObjectData@CArea@@00UObjectDataComp@2@@Z ; std::_Med3_unchecked<CArea::SObjectData *,CArea::ObjectDataComp>

; 7955 :         _Med3_unchecked(_First + _Step, _Mid, _Last - _Step, _Pred);

  000a0	53		 push	 ebx
  000a1	57		 push	 edi
  000a2	56		 push	 esi
  000a3	ff 75 f4	 push	 DWORD PTR tv554[ebp]
  000a6	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAUSObjectData@CArea@@UObjectDataComp@2@@std@@YAXPAUSObjectData@CArea@@00UObjectDataComp@2@@Z ; std::_Med3_unchecked<CArea::SObjectData *,CArea::ObjectDataComp>

; 7956 :     } else {

  000ab	8b 5d 10	 mov	 ebx, DWORD PTR __Last$[ebp]
  000ae	83 c4 40	 add	 esp, 64			; 00000040H
  000b1	8b 7d 0c	 mov	 edi, DWORD PTR __First$[ebp]
  000b4	eb 11		 jmp	 SHORT $LN68@Partition_
$LN67@Partition_:

; 7957 :         _Med3_unchecked(_First, _Mid, _Last, _Pred);

  000b6	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  000b9	8d 43 d0	 lea	 eax, DWORD PTR [ebx-48]
  000bc	50		 push	 eax
  000bd	56		 push	 esi
  000be	57		 push	 edi
  000bf	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAUSObjectData@CArea@@UObjectDataComp@2@@std@@YAXPAUSObjectData@CArea@@00UObjectDataComp@2@@Z ; std::_Med3_unchecked<CArea::SObjectData *,CArea::ObjectDataComp>
  000c4	83 c4 10	 add	 esp, 16			; 00000010H
$LN68@Partition_:

; 7966 :     _RanIt _Pfirst = _Mid;
; 7967 :     _RanIt _Plast  = _Next_iter(_Pfirst);

  000c7	8d 4e 30	 lea	 ecx, DWORD PTR [esi+48]

; 7970 :            && !_Pred(*_Pfirst, *_Prev_iter(_Pfirst))) {

  000ca	3b fe		 cmp	 edi, esi
  000cc	73 13		 jae	 SHORT $LN96@Partition_
  000ce	66 90		 npad	 2
$LL2@Partition_:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h

; 57   : 				return lhs.dwCRC < rhs.dwCRC;

  000d0	8b 46 dc	 mov	 eax, DWORD PTR [esi-36]
  000d3	3b 46 0c	 cmp	 eax, DWORD PTR [esi+12]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7970 :            && !_Pred(*_Pfirst, *_Prev_iter(_Pfirst))) {

  000d6	72 09		 jb	 SHORT $LN96@Partition_
  000d8	77 07		 ja	 SHORT $LN96@Partition_

; 7971 :         --_Pfirst;

  000da	83 ee 30	 sub	 esi, 48			; 00000030H
  000dd	3b fe		 cmp	 edi, esi
  000df	72 ef		 jb	 SHORT $LL2@Partition_
$LN96@Partition_:

; 7974 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

  000e1	3b cb		 cmp	 ecx, ebx
  000e3	73 11		 jae	 SHORT $LN97@Partition_
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h

; 57   : 				return lhs.dwCRC < rhs.dwCRC;

  000e5	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
$LL4@Partition_:
  000e8	39 51 0c	 cmp	 DWORD PTR [ecx+12], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7974 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

  000eb	72 09		 jb	 SHORT $LN97@Partition_
  000ed	77 07		 ja	 SHORT $LN97@Partition_

; 7975 :         ++_Plast;

  000ef	83 c1 30	 add	 ecx, 48			; 00000030H
  000f2	3b cb		 cmp	 ecx, ebx
  000f4	72 f2		 jb	 SHORT $LL4@Partition_
$LN97@Partition_:
  000f6	8b 55 0c	 mov	 edx, DWORD PTR __First$[ebp]

; 7976 :     }
; 7977 : 
; 7978 :     _RanIt _Gfirst = _Plast;

  000f9	8b c1		 mov	 eax, ecx

; 7979 :     _RanIt _Glast  = _Pfirst;

  000fb	8b fe		 mov	 edi, esi
$LN126@Partition_:

; 7982 :         for (; _Gfirst < _Last; ++_Gfirst) {

  000fd	89 7d 14	 mov	 DWORD PTR __Glast$1$[ebp], edi
$LN125@Partition_:
  00100	89 45 fc	 mov	 DWORD PTR __Gfirst$1$[ebp], eax
$LL6@Partition_:
  00103	3b c3		 cmp	 eax, ebx
  00105	73 56		 jae	 SHORT $LN76@Partition_
  00107	8b 7d 10	 mov	 edi, DWORD PTR __Last$[ebp]
  0010a	66 0f 1f 44 00
	00		 npad	 6
$LL11@Partition_:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h

; 57   : 				return lhs.dwCRC < rhs.dwCRC;

  00110	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  00113	3b 50 0c	 cmp	 edx, DWORD PTR [eax+12]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7983 :             if (_DEBUG_LT_PRED(_Pred, *_Pfirst, *_Gfirst)) {

  00116	72 35		 jb	 SHORT $LN9@Partition_

; 7984 :                 continue;
; 7985 :             } else if (_Pred(*_Gfirst, *_Pfirst)) {

  00118	77 3a		 ja	 SHORT $LN98@Partition_

; 7986 :                 break;
; 7987 :             } else if (_Plast != _Gfirst) {

  0011a	3b c8		 cmp	 ecx, eax
  0011c	74 2c		 je	 SHORT $LN19@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 100  :     _Left    = _STD move(_Right);

  0011e	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00121	0f 10 09	 movups	 xmm1, XMMWORD PTR [ecx]
  00124	0f 10 51 10	 movups	 xmm2, XMMWORD PTR [ecx+16]
  00128	0f 10 59 20	 movups	 xmm3, XMMWORD PTR [ecx+32]
  0012c	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  0012f	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  00133	0f 11 41 10	 movups	 XMMWORD PTR [ecx+16], xmm0
  00137	0f 10 40 20	 movups	 xmm0, XMMWORD PTR [eax+32]
  0013b	0f 11 41 20	 movups	 XMMWORD PTR [ecx+32], xmm0

; 101  :     _Right   = _STD move(_Tmp);

  0013f	0f 11 08	 movups	 XMMWORD PTR [eax], xmm1
  00142	0f 11 50 10	 movups	 XMMWORD PTR [eax+16], xmm2
  00146	0f 11 58 20	 movups	 XMMWORD PTR [eax+32], xmm3
$LN19@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7982 :         for (; _Gfirst < _Last; ++_Gfirst) {

  0014a	83 c1 30	 add	 ecx, 48			; 00000030H
$LN9@Partition_:
  0014d	83 c0 30	 add	 eax, 48			; 00000030H
  00150	3b c7		 cmp	 eax, edi
  00152	72 bc		 jb	 SHORT $LL11@Partition_
$LN98@Partition_:
  00154	8b 7d 14	 mov	 edi, DWORD PTR __Glast$1$[ebp]
  00157	8b 55 0c	 mov	 edx, DWORD PTR __First$[ebp]
  0015a	89 45 fc	 mov	 DWORD PTR __Gfirst$1$[ebp], eax
$LN76@Partition_:

; 7995 :         for (; _First < _Glast; --_Glast) {

  0015d	3b fa		 cmp	 edi, edx
  0015f	76 58		 jbe	 SHORT $LN124@Partition_
  00161	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  00164	8d 57 d0	 lea	 edx, DWORD PTR [edi-48]
$LL14@Partition_:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h

; 57   : 				return lhs.dwCRC < rhs.dwCRC;

  00167	8b 5a 0c	 mov	 ebx, DWORD PTR [edx+12]
  0016a	3b 5e 0c	 cmp	 ebx, DWORD PTR [esi+12]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7997 :             if (_DEBUG_LT_PRED(_Pred, *_Glast_prev, *_Pfirst)) {

  0016d	72 35		 jb	 SHORT $LN12@Partition_

; 7998 :                 continue;
; 7999 :             } else if (_Pred(*_Pfirst, *_Glast_prev)) {

  0016f	77 3d		 ja	 SHORT $LN99@Partition_

; 8000 :                 break;
; 8001 :             } else if (--_Pfirst != _Glast_prev) {

  00171	83 ee 30	 sub	 esi, 48			; 00000030H
  00174	3b f2		 cmp	 esi, edx
  00176	74 2c		 je	 SHORT $LN12@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 100  :     _Left    = _STD move(_Right);

  00178	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  0017b	0f 10 0e	 movups	 xmm1, XMMWORD PTR [esi]
  0017e	0f 10 56 10	 movups	 xmm2, XMMWORD PTR [esi+16]
  00182	0f 10 5e 20	 movups	 xmm3, XMMWORD PTR [esi+32]
  00186	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  00189	0f 10 42 10	 movups	 xmm0, XMMWORD PTR [edx+16]
  0018d	0f 11 46 10	 movups	 XMMWORD PTR [esi+16], xmm0
  00191	0f 10 42 20	 movups	 xmm0, XMMWORD PTR [edx+32]
  00195	0f 11 46 20	 movups	 XMMWORD PTR [esi+32], xmm0

; 101  :     _Right   = _STD move(_Tmp);

  00199	0f 11 0a	 movups	 XMMWORD PTR [edx], xmm1
  0019c	0f 11 52 10	 movups	 XMMWORD PTR [edx+16], xmm2
  001a0	0f 11 5a 20	 movups	 XMMWORD PTR [edx+32], xmm3
$LN12@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7995 :         for (; _First < _Glast; --_Glast) {

  001a4	83 ef 30	 sub	 edi, 48			; 00000030H
  001a7	83 ea 30	 sub	 edx, 48			; 00000030H
  001aa	3b c7		 cmp	 eax, edi
  001ac	72 b9		 jb	 SHORT $LL14@Partition_
$LN99@Partition_:
  001ae	8b 55 0c	 mov	 edx, DWORD PTR __First$[ebp]

; 8002 :                 swap(*_Pfirst, *_Glast_prev); // intentional ADL
; 8003 :             }
; 8004 :         }
; 8005 : 
; 8006 :         if (_Glast == _First && _Gfirst == _Last) {

  001b1	3b fa		 cmp	 edi, edx
  001b3	8b 45 fc	 mov	 eax, DWORD PTR __Gfirst$1$[ebp]
  001b6	89 7d 14	 mov	 DWORD PTR __Glast$1$[ebp], edi
$LN124@Partition_:
  001b9	8b 5d 10	 mov	 ebx, DWORD PTR __Last$[ebp]
  001bc	75 72		 jne	 SHORT $LN27@Partition_
  001be	3b c3		 cmp	 eax, ebx
  001c0	0f 84 10 01 00
	00		 je	 $LN78@Partition_

; 8008 :         }
; 8009 : 
; 8010 :         if (_Glast == _First) { // no room at bottom, rotate pivot upward
; 8011 :             if (_Plast != _Gfirst) {

  001c6	3b c8		 cmp	 ecx, eax
  001c8	74 2c		 je	 SHORT $LN43@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 100  :     _Left    = _STD move(_Right);

  001ca	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  001cd	0f 10 0e	 movups	 xmm1, XMMWORD PTR [esi]
  001d0	0f 10 56 10	 movups	 xmm2, XMMWORD PTR [esi+16]
  001d4	0f 10 5e 20	 movups	 xmm3, XMMWORD PTR [esi+32]
  001d8	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  001db	0f 10 41 10	 movups	 xmm0, XMMWORD PTR [ecx+16]
  001df	0f 11 46 10	 movups	 XMMWORD PTR [esi+16], xmm0
  001e3	0f 10 41 20	 movups	 xmm0, XMMWORD PTR [ecx+32]
  001e7	0f 11 46 20	 movups	 XMMWORD PTR [esi+32], xmm0

; 101  :     _Right   = _STD move(_Tmp);

  001eb	0f 11 09	 movups	 XMMWORD PTR [ecx], xmm1
  001ee	0f 11 51 10	 movups	 XMMWORD PTR [ecx+16], xmm2
  001f2	0f 11 59 20	 movups	 XMMWORD PTR [ecx+32], xmm3
$LN43@Partition_:

; 100  :     _Left    = _STD move(_Right);

  001f6	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8015 :             ++_Plast;

  001f9	83 c1 30	 add	 ecx, 48			; 00000030H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 99   :     _Ty _Tmp = _STD move(_Left);

  001fc	0f 10 0e	 movups	 xmm1, XMMWORD PTR [esi]
  001ff	0f 10 56 10	 movups	 xmm2, XMMWORD PTR [esi+16]
  00203	0f 10 5e 20	 movups	 xmm3, XMMWORD PTR [esi+32]

; 100  :     _Left    = _STD move(_Right);

  00207	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  0020a	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  0020e	0f 11 46 10	 movups	 XMMWORD PTR [esi+16], xmm0
  00212	0f 10 40 20	 movups	 xmm0, XMMWORD PTR [eax+32]
  00216	0f 11 46 20	 movups	 XMMWORD PTR [esi+32], xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8017 :             ++_Pfirst;

  0021a	83 c6 30	 add	 esi, 48			; 00000030H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 101  :     _Right   = _STD move(_Tmp);

  0021d	0f 11 08	 movups	 XMMWORD PTR [eax], xmm1
  00220	0f 11 50 10	 movups	 XMMWORD PTR [eax+16], xmm2
  00224	0f 11 58 20	 movups	 XMMWORD PTR [eax+32], xmm3
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8018 :             ++_Gfirst;

  00228	83 c0 30	 add	 eax, 48			; 00000030H
  0022b	e9 d0 fe ff ff	 jmp	 $LN125@Partition_
$LN27@Partition_:

; 8019 :         } else if (_Gfirst == _Last) { // no room at top, rotate pivot downward

  00230	83 c7 d0	 add	 edi, -48		; ffffffd0H
  00233	89 7d 14	 mov	 DWORD PTR __Glast$1$[ebp], edi
  00236	3b c3		 cmp	 eax, ebx
  00238	75 68		 jne	 SHORT $LN30@Partition_

; 8020 :             if (--_Glast != --_Pfirst) {

  0023a	83 ee 30	 sub	 esi, 48			; 00000030H
  0023d	3b fe		 cmp	 edi, esi
  0023f	74 2c		 je	 SHORT $LN53@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 100  :     _Left    = _STD move(_Right);

  00241	0f 10 06	 movups	 xmm0, XMMWORD PTR [esi]
  00244	0f 10 0f	 movups	 xmm1, XMMWORD PTR [edi]
  00247	0f 10 57 10	 movups	 xmm2, XMMWORD PTR [edi+16]
  0024b	0f 10 5f 20	 movups	 xmm3, XMMWORD PTR [edi+32]
  0024f	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0
  00252	0f 10 46 10	 movups	 xmm0, XMMWORD PTR [esi+16]
  00256	0f 11 47 10	 movups	 XMMWORD PTR [edi+16], xmm0
  0025a	0f 10 46 20	 movups	 xmm0, XMMWORD PTR [esi+32]
  0025e	0f 11 47 20	 movups	 XMMWORD PTR [edi+32], xmm0

; 101  :     _Right   = _STD move(_Tmp);

  00262	0f 11 0e	 movups	 XMMWORD PTR [esi], xmm1
  00265	0f 11 56 10	 movups	 XMMWORD PTR [esi+16], xmm2
  00269	0f 11 5e 20	 movups	 XMMWORD PTR [esi+32], xmm3
$LN53@Partition_:

; 100  :     _Left    = _STD move(_Right);

  0026d	0f 10 41 d0	 movups	 xmm0, XMMWORD PTR [ecx-48]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8024 :             swap(*_Pfirst, *--_Plast); // intentional ADL

  00271	83 e9 30	 sub	 ecx, 48			; 00000030H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 99   :     _Ty _Tmp = _STD move(_Left);

  00274	0f 10 0e	 movups	 xmm1, XMMWORD PTR [esi]
  00277	0f 10 56 10	 movups	 xmm2, XMMWORD PTR [esi+16]
  0027b	0f 10 5e 20	 movups	 xmm3, XMMWORD PTR [esi+32]

; 100  :     _Left    = _STD move(_Right);

  0027f	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  00282	0f 10 41 10	 movups	 xmm0, XMMWORD PTR [ecx+16]
  00286	0f 11 46 10	 movups	 XMMWORD PTR [esi+16], xmm0
  0028a	0f 10 41 20	 movups	 xmm0, XMMWORD PTR [ecx+32]
  0028e	0f 11 46 20	 movups	 XMMWORD PTR [esi+32], xmm0

; 101  :     _Right   = _STD move(_Tmp);

  00292	0f 11 09	 movups	 XMMWORD PTR [ecx], xmm1
  00295	0f 11 51 10	 movups	 XMMWORD PTR [ecx+16], xmm2
  00299	0f 11 59 20	 movups	 XMMWORD PTR [ecx+32], xmm3
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8025 :         } else {

  0029d	e9 61 fe ff ff	 jmp	 $LL6@Partition_
$LN30@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 100  :     _Left    = _STD move(_Right);

  002a2	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
  002a5	0f 10 08	 movups	 xmm1, XMMWORD PTR [eax]
  002a8	0f 10 50 10	 movups	 xmm2, XMMWORD PTR [eax+16]
  002ac	0f 10 58 20	 movups	 xmm3, XMMWORD PTR [eax+32]
  002b0	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  002b3	0f 10 47 10	 movups	 xmm0, XMMWORD PTR [edi+16]
  002b7	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0
  002bb	0f 10 47 20	 movups	 xmm0, XMMWORD PTR [edi+32]
  002bf	0f 11 40 20	 movups	 XMMWORD PTR [eax+32], xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8027 :             ++_Gfirst;

  002c3	83 c0 30	 add	 eax, 48			; 00000030H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 101  :     _Right   = _STD move(_Tmp);

  002c6	0f 11 0f	 movups	 XMMWORD PTR [edi], xmm1
  002c9	0f 11 57 10	 movups	 XMMWORD PTR [edi+16], xmm2
  002cd	0f 11 5f 20	 movups	 XMMWORD PTR [edi+32], xmm3
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8029 :     }

  002d1	e9 27 fe ff ff	 jmp	 $LN126@Partition_
$LN78@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  002d6	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8007 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

  002d9	5f		 pop	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  002da	89 30		 mov	 DWORD PTR [eax], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8007 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

  002dc	5e		 pop	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  002dd	89 48 04	 mov	 DWORD PTR [eax+4], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8007 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

  002e0	5b		 pop	 ebx

; 8030 : }

  002e1	8b e5		 mov	 esp, ebp
  002e3	5d		 pop	 ebp
  002e4	c3		 ret	 0
??$_Partition_by_median_guess_unchecked@PAUSObjectData@CArea@@UObjectDataComp@2@@std@@YA?AU?$pair@PAUSObjectData@CArea@@PAU12@@0@PAUSObjectData@CArea@@0UObjectDataComp@3@@Z ENDP ; std::_Partition_by_median_guess_unchecked<CArea::SObjectData *,CArea::ObjectDataComp>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
;	COMDAT ??$_Make_heap_unchecked@PAUSObjectData@CArea@@UObjectDataComp@2@@std@@YAXPAUSObjectData@CArea@@0UObjectDataComp@2@@Z
_TEXT	SEGMENT
__Val$1 = -60						; size = 48
tv341 = -12						; size = 4
tv363 = -8						; size = 4
__Bottom$1$ = -4					; size = 4
__Hole$1$ = 8						; size = 4
__First$ = 8						; size = 4
__Max_sequence_non_leaf$1$ = 12				; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Make_heap_unchecked@PAUSObjectData@CArea@@UObjectDataComp@2@@std@@YAXPAUSObjectData@CArea@@0UObjectDataComp@2@@Z PROC ; std::_Make_heap_unchecked<CArea::SObjectData *,CArea::ObjectDataComp>, COMDAT

; 6593 : _CONSTEXPR20 void _Make_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH

; 6594 :     // make [_First, _Last) into a heap
; 6595 :     using _Diff   = _Iter_diff_t<_RanIt>;
; 6596 :     _Diff _Bottom = _Last - _First;

  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000e	53		 push	 ebx
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  00013	2b cf		 sub	 ecx, edi
  00015	f7 e9		 imul	 ecx
  00017	c1 fa 03	 sar	 edx, 3
  0001a	8b c2		 mov	 eax, edx
  0001c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001f	03 c2		 add	 eax, edx

; 6597 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

  00021	8b d8		 mov	 ebx, eax
  00023	89 45 fc	 mov	 DWORD PTR __Bottom$1$[ebp], eax
  00026	d1 fb		 sar	 ebx, 1
  00028	85 db		 test	 ebx, ebx
  0002a	0f 8e 1c 01 00
	00		 jle	 $LN3@Make_heap_

; 6594 :     // make [_First, _Last) into a heap
; 6595 :     using _Diff   = _Iter_diff_t<_RanIt>;
; 6596 :     _Diff _Bottom = _Last - _First;

  00030	48		 dec	 eax
  00031	8b c8		 mov	 ecx, eax
  00033	89 45 f8	 mov	 DWORD PTR tv363[ebp], eax
  00036	8d 04 5b	 lea	 eax, DWORD PTR [ebx+ebx*2]
  00039	d1 f9		 sar	 ecx, 1
  0003b	c1 e0 04	 shl	 eax, 4
  0003e	89 4d 0c	 mov	 DWORD PTR __Max_sequence_non_leaf$1$[ebp], ecx
  00041	03 c7		 add	 eax, edi
  00043	56		 push	 esi
$LL2@Make_heap_:

; 6598 :         // reheap top half, bottom to top
; 6599 :         --_Hole;
; 6600 :         _Iter_value_t<_RanIt> _Val = _STD move(*(_First + _Hole));

  00044	0f 10 48 d0	 movups	 xmm1, XMMWORD PTR [eax-48]
  00048	83 e8 30	 sub	 eax, 48			; 00000030H
  0004b	4b		 dec	 ebx
  0004c	89 5d 08	 mov	 DWORD PTR __Hole$1$[ebp], ebx

; 6601 :         _STD _Pop_heap_hole_by_index(_First, _Hole, _Bottom, _STD move(_Val), _Pred);

  0004f	8b f3		 mov	 esi, ebx
  00051	89 45 f4	 mov	 DWORD PTR tv341[ebp], eax

; 6438 :     _Diff _Idx       = _Hole;

  00054	8b d3		 mov	 edx, ebx

; 6598 :         // reheap top half, bottom to top
; 6599 :         --_Hole;
; 6600 :         _Iter_value_t<_RanIt> _Val = _STD move(*(_First + _Hole));

  00056	0f 11 4d c4	 movups	 XMMWORD PTR __Val$1[ebp], xmm1
  0005a	0f 10 50 10	 movups	 xmm2, XMMWORD PTR [eax+16]
  0005e	0f 10 58 20	 movups	 xmm3, XMMWORD PTR [eax+32]

; 6443 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

  00062	3b d9		 cmp	 ebx, ecx
  00064	7d 52		 jge	 SHORT $LN8@Make_heap_
  00066	8b 5d 0c	 mov	 ebx, DWORD PTR __Max_sequence_non_leaf$1$[ebp]
  00069	0f 1f 80 00 00
	00 00		 npad	 7
$LL7@Make_heap_:

; 6444 :         _Idx = 2 * _Idx + 2;

  00070	03 d2		 add	 edx, edx

; 6445 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

  00072	8d 0c 52	 lea	 ecx, DWORD PTR [edx+edx*2]
  00075	03 c9		 add	 ecx, ecx

; 6446 :             --_Idx;
; 6447 :         }
; 6448 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  00077	8b 44 cf 6c	 mov	 eax, DWORD PTR [edi+ecx*8+108]
  0007b	3b 44 cf 3c	 cmp	 eax, DWORD PTR [edi+ecx*8+60]
  0007f	1b c0		 sbb	 eax, eax
  00081	83 c0 02	 add	 eax, 2
  00084	03 d0		 add	 edx, eax
  00086	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  00089	03 c0		 add	 eax, eax

; 6449 :         _Hole             = _Idx;

  0008b	8b f2		 mov	 esi, edx
  0008d	8d 0c 52	 lea	 ecx, DWORD PTR [edx+edx*2]
  00090	03 c9		 add	 ecx, ecx
  00092	0f 10 04 cf	 movups	 xmm0, XMMWORD PTR [edi+ecx*8]
  00096	0f 11 04 c7	 movups	 XMMWORD PTR [edi+eax*8], xmm0
  0009a	0f 10 44 cf 10	 movups	 xmm0, XMMWORD PTR [edi+ecx*8+16]
  0009f	0f 11 44 c7 10	 movups	 XMMWORD PTR [edi+eax*8+16], xmm0
  000a4	0f 10 44 cf 20	 movups	 xmm0, XMMWORD PTR [edi+ecx*8+32]
  000a9	0f 11 44 c7 20	 movups	 XMMWORD PTR [edi+eax*8+32], xmm0
  000ae	3b d3		 cmp	 edx, ebx
  000b0	7c be		 jl	 SHORT $LL7@Make_heap_
  000b2	8b 5d 08	 mov	 ebx, DWORD PTR __Hole$1$[ebp]
  000b5	8b 4d 0c	 mov	 ecx, DWORD PTR __Max_sequence_non_leaf$1$[ebp]
$LN8@Make_heap_:

; 6450 :     }
; 6451 : 
; 6452 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

  000b8	3b f1		 cmp	 esi, ecx
  000ba	75 31		 jne	 SHORT $LN10@Make_heap_
  000bc	8b 45 fc	 mov	 eax, DWORD PTR __Bottom$1$[ebp]
  000bf	a8 01		 test	 al, 1
  000c1	75 2a		 jne	 SHORT $LN10@Make_heap_

; 6453 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

  000c3	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  000c6	03 c9		 add	 ecx, ecx
  000c8	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]

; 6454 :         _Hole             = _Bottom - 1;

  000cb	8b 75 f8	 mov	 esi, DWORD PTR tv363[ebp]
  000ce	03 c0		 add	 eax, eax
  000d0	0f 10 44 cf d0	 movups	 xmm0, XMMWORD PTR [edi+ecx*8-48]
  000d5	0f 11 04 c7	 movups	 XMMWORD PTR [edi+eax*8], xmm0
  000d9	0f 10 44 cf e0	 movups	 xmm0, XMMWORD PTR [edi+ecx*8-32]
  000de	0f 11 44 c7 10	 movups	 XMMWORD PTR [edi+eax*8+16], xmm0
  000e3	0f 10 44 cf f0	 movups	 xmm0, XMMWORD PTR [edi+ecx*8-16]
  000e8	0f 11 44 c7 20	 movups	 XMMWORD PTR [edi+eax*8+32], xmm0
$LN10@Make_heap_:

; 6328 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

  000ed	3b de		 cmp	 ebx, esi
  000ef	7d 39		 jge	 SHORT $LN33@Make_heap_
$LL17@Make_heap_:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h

; 57   : 				return lhs.dwCRC < rhs.dwCRC;

  000f1	8b 4d d0	 mov	 ecx, DWORD PTR __Val$1[ebp+12]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 6327 :     for (_Diff _Idx = (_Hole - 1) >> 1; // shift for codegen

  000f4	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  000f7	d1 f8		 sar	 eax, 1

; 6328 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

  000f9	8d 14 40	 lea	 edx, DWORD PTR [eax+eax*2]
  000fc	c1 e2 04	 shl	 edx, 4
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h

; 57   : 				return lhs.dwCRC < rhs.dwCRC;

  000ff	03 d7		 add	 edx, edi
  00101	39 4a 0c	 cmp	 DWORD PTR [edx+12], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 6328 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

  00104	73 24		 jae	 SHORT $LN33@Make_heap_

; 6329 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 6330 :         // move _Hole up to parent
; 6331 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  00106	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  00109	8d 0c 76	 lea	 ecx, DWORD PTR [esi+esi*2]

; 6332 :         _Hole             = _Idx;

  0010c	8b f0		 mov	 esi, eax
  0010e	03 c9		 add	 ecx, ecx
  00110	0f 11 04 cf	 movups	 XMMWORD PTR [edi+ecx*8], xmm0
  00114	0f 10 42 10	 movups	 xmm0, XMMWORD PTR [edx+16]
  00118	0f 11 44 cf 10	 movups	 XMMWORD PTR [edi+ecx*8+16], xmm0
  0011d	0f 10 42 20	 movups	 xmm0, XMMWORD PTR [edx+32]
  00121	0f 11 44 cf 20	 movups	 XMMWORD PTR [edi+ecx*8+32], xmm0
  00126	3b d8		 cmp	 ebx, eax
  00128	7c c7		 jl	 SHORT $LL17@Make_heap_
$LN33@Make_heap_:

; 6597 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

  0012a	8b 4d 0c	 mov	 ecx, DWORD PTR __Max_sequence_non_leaf$1$[ebp]

; 6335 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

  0012d	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  00130	03 c0		 add	 eax, eax
  00132	0f 11 0c c7	 movups	 XMMWORD PTR [edi+eax*8], xmm1
  00136	0f 11 54 c7 10	 movups	 XMMWORD PTR [edi+eax*8+16], xmm2
  0013b	0f 11 5c c7 20	 movups	 XMMWORD PTR [edi+eax*8+32], xmm3

; 6597 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

  00140	8b 45 f4	 mov	 eax, DWORD PTR tv341[ebp]
  00143	85 db		 test	 ebx, ebx
  00145	0f 8f f9 fe ff
	ff		 jg	 $LL2@Make_heap_
  0014b	5e		 pop	 esi
$LN3@Make_heap_:
  0014c	5f		 pop	 edi

; 6602 :     }
; 6603 : }

  0014d	5b		 pop	 ebx
  0014e	8b e5		 mov	 esp, ebp
  00150	5d		 pop	 ebp
  00151	c3		 ret	 0
??$_Make_heap_unchecked@PAUSObjectData@CArea@@UObjectDataComp@2@@std@@YAXPAUSObjectData@CArea@@0UObjectDataComp@2@@Z ENDP ; std::_Make_heap_unchecked<CArea::SObjectData *,CArea::ObjectDataComp>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
;	COMDAT ??$_Partition_by_median_guess_unchecked@PAUSCRCWithNumber@CArea@@UCRCNumComp@2@@std@@YA?AU?$pair@PAUSCRCWithNumber@CArea@@PAU12@@0@PAUSCRCWithNumber@CArea@@0UCRCNumComp@3@@Z
_TEXT	SEGMENT
tv626 = -12						; size = 4
__Tmp$1$ = -12						; size = 4
tv632 = -8						; size = 4
__Last$1$ = -8						; size = 4
__Gfirst$1$ = -8					; size = 4
tv627 = -4						; size = 4
__Glast$1$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Plast$1$ = 20						; size = 4
__Pred$ = 20						; size = 1
??$_Partition_by_median_guess_unchecked@PAUSCRCWithNumber@CArea@@UCRCNumComp@2@@std@@YA?AU?$pair@PAUSCRCWithNumber@CArea@@PAU12@@0@PAUSCRCWithNumber@CArea@@0UCRCNumComp@3@@Z PROC ; std::_Partition_by_median_guess_unchecked<CArea::SCRCWithNumber *,CArea::CRCNumComp>, COMDAT

; 7962 : _CONSTEXPR20 pair<_RanIt, _RanIt> _Partition_by_median_guess_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 7963 :     // partition [_First, _Last)
; 7964 :     _RanIt _Mid = _First + ((_Last - _First) >> 1); // shift for codegen

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __First$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 7d 10	 mov	 edi, DWORD PTR __Last$[ebp]
  0000f	8b c7		 mov	 eax, edi
  00011	2b c3		 sub	 eax, ebx
  00013	c1 f8 04	 sar	 eax, 4

; 7965 :     _Guess_median_unchecked(_First, _Mid, _Prev_iter(_Last), _Pred);

  00016	8d 4f f8	 lea	 ecx, DWORD PTR [edi-8]
  00019	89 4d f8	 mov	 DWORD PTR __Last$1$[ebp], ecx
  0001c	8d 34 c3	 lea	 esi, DWORD PTR [ebx+eax*8]

; 7948 :     const _Diff _Count = _Last - _First;

  0001f	8b c1		 mov	 eax, ecx
  00021	2b c3		 sub	 eax, ebx
  00023	c1 f8 03	 sar	 eax, 3

; 7949 :     if (40 < _Count) { // Tukey's ninther

  00026	83 f8 28	 cmp	 eax, 40			; 00000028H
  00029	7e 68		 jle	 SHORT $LN67@Partition_

; 7950 :         const _Diff _Step     = (_Count + 1) >> 3; // +1 can't overflow because range was made inclusive in caller
; 7951 :         const _Diff _Two_step = _Step << 1; // note: intentionally discards low-order bit
; 7952 :         _Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);

  0002b	8b 7d 14	 mov	 edi, DWORD PTR __Pred$[ebp]
  0002e	40		 inc	 eax
  0002f	c1 f8 03	 sar	 eax, 3
  00032	8b c8		 mov	 ecx, eax
  00034	c1 e1 04	 shl	 ecx, 4
  00037	57		 push	 edi
  00038	8d 1c c5 00 00
	00 00		 lea	 ebx, DWORD PTR [eax*8]
  0003f	89 4d fc	 mov	 DWORD PTR tv627[ebp], ecx
  00042	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  00045	8d 14 03	 lea	 edx, DWORD PTR [ebx+eax]
  00048	03 c1		 add	 eax, ecx
  0004a	50		 push	 eax
  0004b	52		 push	 edx
  0004c	ff 75 0c	 push	 DWORD PTR __First$[ebp]
  0004f	89 55 f4	 mov	 DWORD PTR tv626[ebp], edx
  00052	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAUSCRCWithNumber@CArea@@UCRCNumComp@2@@std@@YAXPAUSCRCWithNumber@CArea@@00UCRCNumComp@2@@Z ; std::_Med3_unchecked<CArea::SCRCWithNumber *,CArea::CRCNumComp>

; 7953 :         _Med3_unchecked(_Mid - _Step, _Mid, _Mid + _Step, _Pred);

  00057	57		 push	 edi
  00058	8d 04 33	 lea	 eax, DWORD PTR [ebx+esi]
  0005b	50		 push	 eax
  0005c	8b c6		 mov	 eax, esi
  0005e	2b c3		 sub	 eax, ebx
  00060	56		 push	 esi
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAUSCRCWithNumber@CArea@@UCRCNumComp@2@@std@@YAXPAUSCRCWithNumber@CArea@@00UCRCNumComp@2@@Z ; std::_Med3_unchecked<CArea::SCRCWithNumber *,CArea::CRCNumComp>

; 7954 :         _Med3_unchecked(_Last - _Two_step, _Last - _Step, _Last, _Pred);

  00067	8b 45 f8	 mov	 eax, DWORD PTR __Last$1$[ebp]
  0006a	8b f8		 mov	 edi, eax
  0006c	2b fb		 sub	 edi, ebx
  0006e	8b 5d 14	 mov	 ebx, DWORD PTR __Pred$[ebp]
  00071	53		 push	 ebx
  00072	50		 push	 eax
  00073	2b 45 fc	 sub	 eax, DWORD PTR tv627[ebp]
  00076	57		 push	 edi
  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAUSCRCWithNumber@CArea@@UCRCNumComp@2@@std@@YAXPAUSCRCWithNumber@CArea@@00UCRCNumComp@2@@Z ; std::_Med3_unchecked<CArea::SCRCWithNumber *,CArea::CRCNumComp>

; 7955 :         _Med3_unchecked(_First + _Step, _Mid, _Last - _Step, _Pred);

  0007d	53		 push	 ebx
  0007e	57		 push	 edi
  0007f	56		 push	 esi
  00080	ff 75 f4	 push	 DWORD PTR tv626[ebp]
  00083	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAUSCRCWithNumber@CArea@@UCRCNumComp@2@@std@@YAXPAUSCRCWithNumber@CArea@@00UCRCNumComp@2@@Z ; std::_Med3_unchecked<CArea::SCRCWithNumber *,CArea::CRCNumComp>

; 7956 :     } else {

  00088	8b 7d 10	 mov	 edi, DWORD PTR __Last$[ebp]
  0008b	83 c4 40	 add	 esp, 64			; 00000040H
  0008e	8b 5d 0c	 mov	 ebx, DWORD PTR __First$[ebp]
  00091	eb 0e		 jmp	 SHORT $LN68@Partition_
$LN67@Partition_:

; 7957 :         _Med3_unchecked(_First, _Mid, _Last, _Pred);

  00093	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  00096	51		 push	 ecx
  00097	56		 push	 esi
  00098	53		 push	 ebx
  00099	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAUSCRCWithNumber@CArea@@UCRCNumComp@2@@std@@YAXPAUSCRCWithNumber@CArea@@00UCRCNumComp@2@@Z ; std::_Med3_unchecked<CArea::SCRCWithNumber *,CArea::CRCNumComp>
  0009e	83 c4 10	 add	 esp, 16			; 00000010H
$LN68@Partition_:

; 7966 :     _RanIt _Pfirst = _Mid;
; 7967 :     _RanIt _Plast  = _Next_iter(_Pfirst);

  000a1	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  000a4	89 45 14	 mov	 DWORD PTR __Plast$1$[ebp], eax

; 7970 :            && !_Pred(*_Pfirst, *_Prev_iter(_Pfirst))) {

  000a7	3b de		 cmp	 ebx, esi
  000a9	73 16		 jae	 SHORT $LN98@Partition_
  000ab	0f 1f 44 00 00	 npad	 5
$LL2@Partition_:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h

; 190  : 				return lhs.dwNumber > rhs.dwNumber;

  000b0	8b 4e fc	 mov	 ecx, DWORD PTR [esi-4]
  000b3	3b 4e 04	 cmp	 ecx, DWORD PTR [esi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7970 :            && !_Pred(*_Pfirst, *_Prev_iter(_Pfirst))) {

  000b6	77 09		 ja	 SHORT $LN98@Partition_
  000b8	72 07		 jb	 SHORT $LN98@Partition_

; 7971 :         --_Pfirst;

  000ba	83 ee 08	 sub	 esi, 8
  000bd	3b de		 cmp	 ebx, esi
  000bf	72 ef		 jb	 SHORT $LL2@Partition_
$LN98@Partition_:

; 7974 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

  000c1	3b c7		 cmp	 eax, edi
  000c3	73 14		 jae	 SHORT $LN5@Partition_
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h

; 190  : 				return lhs.dwNumber > rhs.dwNumber;

  000c5	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
$LL4@Partition_:
  000c8	39 50 04	 cmp	 DWORD PTR [eax+4], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7974 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

  000cb	77 09		 ja	 SHORT $LN99@Partition_
  000cd	72 07		 jb	 SHORT $LN99@Partition_

; 7975 :         ++_Plast;

  000cf	83 c0 08	 add	 eax, 8
  000d2	3b c7		 cmp	 eax, edi
  000d4	72 f2		 jb	 SHORT $LL4@Partition_
$LN99@Partition_:
  000d6	89 45 14	 mov	 DWORD PTR __Plast$1$[ebp], eax
$LN5@Partition_:

; 7976 :     }
; 7977 : 
; 7978 :     _RanIt _Gfirst = _Plast;
; 7979 :     _RanIt _Glast  = _Pfirst;

  000d9	8b ce		 mov	 ecx, esi
  000db	8b d8		 mov	 ebx, eax
  000dd	89 4d fc	 mov	 DWORD PTR __Glast$1$[ebp], ecx
$LN128@Partition_:

; 7980 : 
; 7981 :     for (;;) { // partition
; 7982 :         for (; _Gfirst < _Last; ++_Gfirst) {

  000e0	89 5d f8	 mov	 DWORD PTR __Gfirst$1$[ebp], ebx
$LL6@Partition_:
  000e3	3b df		 cmp	 ebx, edi
  000e5	73 4d		 jae	 SHORT $LN76@Partition_
$LL11@Partition_:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h

; 190  : 				return lhs.dwNumber > rhs.dwNumber;

  000e7	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000ea	3b 4b 04	 cmp	 ecx, DWORD PTR [ebx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7983 :             if (_DEBUG_LT_PRED(_Pred, *_Pfirst, *_Gfirst)) {

  000ed	77 38		 ja	 SHORT $LN9@Partition_

; 7984 :                 continue;
; 7985 :             } else if (_Pred(*_Gfirst, *_Pfirst)) {

  000ef	72 3d		 jb	 SHORT $LN100@Partition_

; 7986 :                 break;
; 7987 :             } else if (_Plast != _Gfirst) {

  000f1	8d 48 08	 lea	 ecx, DWORD PTR [eax+8]
  000f4	89 4d f8	 mov	 DWORD PTR tv632[ebp], ecx
  000f7	3b c3		 cmp	 eax, ebx
  000f9	74 27		 je	 SHORT $LN19@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 99   :     _Ty _Tmp = _STD move(_Left);

  000fb	8b 10		 mov	 edx, DWORD PTR [eax]
  000fd	8b 78 04	 mov	 edi, DWORD PTR [eax+4]

; 100  :     _Left    = _STD move(_Right);

  00100	8b 03		 mov	 eax, DWORD PTR [ebx]
  00102	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00105	89 55 f4	 mov	 DWORD PTR __Tmp$1$[ebp], edx
  00108	8b 55 14	 mov	 edx, DWORD PTR __Plast$1$[ebp]
  0010b	89 02		 mov	 DWORD PTR [edx], eax
  0010d	8b c2		 mov	 eax, edx

; 101  :     _Right   = _STD move(_Tmp);

  0010f	8b 55 f4	 mov	 edx, DWORD PTR __Tmp$1$[ebp]
  00112	89 48 04	 mov	 DWORD PTR [eax+4], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7989 :                 ++_Plast;

  00115	8b 45 f8	 mov	 eax, DWORD PTR tv632[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 101  :     _Right   = _STD move(_Tmp);

  00118	89 7b 04	 mov	 DWORD PTR [ebx+4], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7990 :             } else {

  0011b	8b 7d 10	 mov	 edi, DWORD PTR __Last$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 101  :     _Right   = _STD move(_Tmp);

  0011e	89 13		 mov	 DWORD PTR [ebx], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7990 :             } else {

  00120	eb 02		 jmp	 SHORT $LN126@Partition_
$LN19@Partition_:

; 7991 :                 ++_Plast;

  00122	8b c1		 mov	 eax, ecx
$LN126@Partition_:

; 7980 : 
; 7981 :     for (;;) { // partition
; 7982 :         for (; _Gfirst < _Last; ++_Gfirst) {

  00124	89 45 14	 mov	 DWORD PTR __Plast$1$[ebp], eax
$LN9@Partition_:
  00127	83 c3 08	 add	 ebx, 8
  0012a	3b df		 cmp	 ebx, edi
  0012c	72 b9		 jb	 SHORT $LL11@Partition_
$LN100@Partition_:
  0012e	8b 4d fc	 mov	 ecx, DWORD PTR __Glast$1$[ebp]
  00131	89 5d f8	 mov	 DWORD PTR __Gfirst$1$[ebp], ebx
$LN76@Partition_:

; 7995 :         for (; _First < _Glast; --_Glast) {

  00134	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  00137	3b c8		 cmp	 ecx, eax
  00139	76 4a		 jbe	 SHORT $LN127@Partition_
  0013b	8d 59 f8	 lea	 ebx, DWORD PTR [ecx-8]
  0013e	66 90		 npad	 2
$LL14@Partition_:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h

; 190  : 				return lhs.dwNumber > rhs.dwNumber;

  00140	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00143	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7997 :             if (_DEBUG_LT_PRED(_Pred, *_Glast_prev, *_Pfirst)) {

  00146	77 20		 ja	 SHORT $LN12@Partition_

; 7998 :                 continue;
; 7999 :             } else if (_Pred(*_Pfirst, *_Glast_prev)) {

  00148	72 30		 jb	 SHORT $LN102@Partition_

; 8000 :                 break;
; 8001 :             } else if (--_Pfirst != _Glast_prev) {

  0014a	83 ee 08	 sub	 esi, 8
  0014d	3b f3		 cmp	 esi, ebx
  0014f	74 17		 je	 SHORT $LN12@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 100  :     _Left    = _STD move(_Right);

  00151	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00154	8b 16		 mov	 edx, DWORD PTR [esi]
  00156	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  00159	8b 03		 mov	 eax, DWORD PTR [ebx]
  0015b	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  0015e	8b 4d fc	 mov	 ecx, DWORD PTR __Glast$1$[ebp]
  00161	89 06		 mov	 DWORD PTR [esi], eax

; 101  :     _Right   = _STD move(_Tmp);

  00163	89 13		 mov	 DWORD PTR [ebx], edx
  00165	89 7b 04	 mov	 DWORD PTR [ebx+4], edi
$LN12@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7995 :         for (; _First < _Glast; --_Glast) {

  00168	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  0016b	83 e9 08	 sub	 ecx, 8
  0016e	83 eb 08	 sub	 ebx, 8
  00171	89 4d fc	 mov	 DWORD PTR __Glast$1$[ebp], ecx
  00174	3b c1		 cmp	 eax, ecx
  00176	72 c8		 jb	 SHORT $LL14@Partition_

; 7998 :                 continue;
; 7999 :             } else if (_Pred(*_Pfirst, *_Glast_prev)) {

  00178	eb 03		 jmp	 SHORT $LN101@Partition_
$LN102@Partition_:
  0017a	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
$LN101@Partition_:
  0017d	8b 5d f8	 mov	 ebx, DWORD PTR __Gfirst$1$[ebp]

; 8002 :                 swap(*_Pfirst, *_Glast_prev); // intentional ADL
; 8003 :             }
; 8004 :         }
; 8005 : 
; 8006 :         if (_Glast == _First && _Gfirst == _Last) {

  00180	3b c8		 cmp	 ecx, eax
  00182	8b 7d 10	 mov	 edi, DWORD PTR __Last$[ebp]
$LN127@Partition_:
  00185	75 54		 jne	 SHORT $LN27@Partition_
  00187	8b 4d 14	 mov	 ecx, DWORD PTR __Plast$1$[ebp]
  0018a	3b df		 cmp	 ebx, edi
  0018c	0f 84 c9 00 00
	00		 je	 $LN78@Partition_

; 8008 :         }
; 8009 : 
; 8010 :         if (_Glast == _First) { // no room at bottom, rotate pivot upward
; 8011 :             if (_Plast != _Gfirst) {

  00192	3b cb		 cmp	 ecx, ebx
  00194	74 17		 je	 SHORT $LN43@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 100  :     _Left    = _STD move(_Right);

  00196	8b 01		 mov	 eax, DWORD PTR [ecx]
  00198	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0019b	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  0019e	8b 16		 mov	 edx, DWORD PTR [esi]
  001a0	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 101  :     _Right   = _STD move(_Tmp);

  001a3	8b 4d 14	 mov	 ecx, DWORD PTR __Plast$1$[ebp]
  001a6	89 06		 mov	 DWORD PTR [esi], eax
  001a8	89 11		 mov	 DWORD PTR [ecx], edx
  001aa	89 79 04	 mov	 DWORD PTR [ecx+4], edi
$LN43@Partition_:

; 99   :     _Ty _Tmp = _STD move(_Left);

  001ad	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8015 :             ++_Plast;

  001b0	83 c1 08	 add	 ecx, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 100  :     _Left    = _STD move(_Right);

  001b3	8b 03		 mov	 eax, DWORD PTR [ebx]
  001b5	8b 16		 mov	 edx, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8015 :             ++_Plast;

  001b7	89 4d 14	 mov	 DWORD PTR __Plast$1$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 100  :     _Left    = _STD move(_Right);

  001ba	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  001bd	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8018 :             ++_Gfirst;

  001bf	8b 45 14	 mov	 eax, DWORD PTR __Plast$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 100  :     _Left    = _STD move(_Right);

  001c2	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8017 :             ++_Pfirst;

  001c5	83 c6 08	 add	 esi, 8

; 8018 :             ++_Gfirst;

  001c8	8b 4d fc	 mov	 ecx, DWORD PTR __Glast$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 101  :     _Right   = _STD move(_Tmp);

  001cb	89 7b 04	 mov	 DWORD PTR [ebx+4], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8018 :             ++_Gfirst;

  001ce	8b 7d 10	 mov	 edi, DWORD PTR __Last$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 101  :     _Right   = _STD move(_Tmp);

  001d1	89 13		 mov	 DWORD PTR [ebx], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8018 :             ++_Gfirst;

  001d3	83 c3 08	 add	 ebx, 8
  001d6	e9 05 ff ff ff	 jmp	 $LN128@Partition_
$LN27@Partition_:

; 8019 :         } else if (_Gfirst == _Last) { // no room at top, rotate pivot downward

  001db	83 c1 f8	 add	 ecx, -8			; fffffff8H
  001de	89 4d fc	 mov	 DWORD PTR __Glast$1$[ebp], ecx
  001e1	3b df		 cmp	 ebx, edi
  001e3	75 4e		 jne	 SHORT $LN30@Partition_

; 8020 :             if (--_Glast != --_Pfirst) {

  001e5	83 ee 08	 sub	 esi, 8
  001e8	3b ce		 cmp	 ecx, esi
  001ea	74 1c		 je	 SHORT $LN94@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 100  :     _Left    = _STD move(_Right);

  001ec	8b 5d fc	 mov	 ebx, DWORD PTR __Glast$1$[ebp]
  001ef	8b 11		 mov	 edx, DWORD PTR [ecx]
  001f1	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
  001f4	8b 06		 mov	 eax, DWORD PTR [esi]
  001f6	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  001f9	89 03		 mov	 DWORD PTR [ebx], eax
  001fb	8b c3		 mov	 eax, ebx
  001fd	8b 5d f8	 mov	 ebx, DWORD PTR __Gfirst$1$[ebp]
  00200	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 101  :     _Right   = _STD move(_Tmp);

  00203	89 16		 mov	 DWORD PTR [esi], edx
  00205	89 7e 04	 mov	 DWORD PTR [esi+4], edi
$LN94@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8024 :             swap(*_Pfirst, *--_Plast); // intentional ADL

  00208	8b 4d 14	 mov	 ecx, DWORD PTR __Plast$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 99   :     _Ty _Tmp = _STD move(_Left);

  0020b	8b 16		 mov	 edx, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8024 :             swap(*_Pfirst, *--_Plast); // intentional ADL

  0020d	83 e9 08	 sub	 ecx, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 99   :     _Ty _Tmp = _STD move(_Left);

  00210	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8024 :             swap(*_Pfirst, *--_Plast); // intentional ADL

  00213	89 4d 14	 mov	 DWORD PTR __Plast$1$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 100  :     _Left    = _STD move(_Right);

  00216	8b 01		 mov	 eax, DWORD PTR [ecx]
  00218	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0021b	89 06		 mov	 DWORD PTR [esi], eax

; 101  :     _Right   = _STD move(_Tmp);

  0021d	8b 45 14	 mov	 eax, DWORD PTR __Plast$1$[ebp]
  00220	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8025 :         } else {

  00223	8b 4d fc	 mov	 ecx, DWORD PTR __Glast$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 101  :     _Right   = _STD move(_Tmp);

  00226	89 78 04	 mov	 DWORD PTR [eax+4], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8025 :         } else {

  00229	8b 7d 10	 mov	 edi, DWORD PTR __Last$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 101  :     _Right   = _STD move(_Tmp);

  0022c	89 10		 mov	 DWORD PTR [eax], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8025 :         } else {

  0022e	e9 b0 fe ff ff	 jmp	 $LL6@Partition_
$LN30@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 100  :     _Left    = _STD move(_Right);

  00233	8b 01		 mov	 eax, DWORD PTR [ecx]
  00235	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  00238	8b 13		 mov	 edx, DWORD PTR [ebx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8026 :             swap(*_Gfirst, *--_Glast); // intentional ADL

  0023a	89 4d fc	 mov	 DWORD PTR __Glast$1$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 100  :     _Left    = _STD move(_Right);

  0023d	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00240	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx

; 101  :     _Right   = _STD move(_Tmp);

  00243	8b 4d fc	 mov	 ecx, DWORD PTR __Glast$1$[ebp]
  00246	89 03		 mov	 DWORD PTR [ebx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8027 :             ++_Gfirst;

  00248	83 c3 08	 add	 ebx, 8

; 8029 :     }

  0024b	8b 45 14	 mov	 eax, DWORD PTR __Plast$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 101  :     _Right   = _STD move(_Tmp);

  0024e	89 79 04	 mov	 DWORD PTR [ecx+4], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8029 :     }

  00251	8b 7d 10	 mov	 edi, DWORD PTR __Last$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 101  :     _Right   = _STD move(_Tmp);

  00254	89 11		 mov	 DWORD PTR [ecx], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8029 :     }

  00256	e9 85 fe ff ff	 jmp	 $LN128@Partition_
$LN78@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  0025b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8007 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

  0025e	5f		 pop	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  0025f	89 30		 mov	 DWORD PTR [eax], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8007 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

  00261	5e		 pop	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00262	89 48 04	 mov	 DWORD PTR [eax+4], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8007 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

  00265	5b		 pop	 ebx

; 8030 : }

  00266	8b e5		 mov	 esp, ebp
  00268	5d		 pop	 ebp
  00269	c3		 ret	 0
??$_Partition_by_median_guess_unchecked@PAUSCRCWithNumber@CArea@@UCRCNumComp@2@@std@@YA?AU?$pair@PAUSCRCWithNumber@CArea@@PAU12@@0@PAUSCRCWithNumber@CArea@@0UCRCNumComp@3@@Z ENDP ; std::_Partition_by_median_guess_unchecked<CArea::SCRCWithNumber *,CArea::CRCNumComp>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
;	COMDAT ??$_Partition_by_median_guess_unchecked@PAPAVCEffectInstance@@UCArea_LessEffectInstancePtrRenderOrder@@@std@@YA?AU?$pair@PAPAVCEffectInstance@@PAPAV1@@0@PAPAVCEffectInstance@@0UCArea_LessEffectInstancePtrRenderOrder@@@Z
_TEXT	SEGMENT
__Gfirst$1$ = -12					; size = 4
__Glast$1$ = -8						; size = 4
__Plast$1$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Partition_by_median_guess_unchecked@PAPAVCEffectInstance@@UCArea_LessEffectInstancePtrRenderOrder@@@std@@YA?AU?$pair@PAPAVCEffectInstance@@PAPAV1@@0@PAPAVCEffectInstance@@0UCArea_LessEffectInstancePtrRenderOrder@@@Z PROC ; std::_Partition_by_median_guess_unchecked<CEffectInstance * *,CArea_LessEffectInstancePtrRenderOrder>, COMDAT

; 7962 : _CONSTEXPR20 pair<_RanIt, _RanIt> _Partition_by_median_guess_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 7963 :     // partition [_First, _Last)
; 7964 :     _RanIt _Mid = _First + ((_Last - _First) >> 1); // shift for codegen

  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __First$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 7d 10	 mov	 edi, DWORD PTR __Last$[ebp]
  0000f	8b c7		 mov	 eax, edi

; 7965 :     _Guess_median_unchecked(_First, _Mid, _Prev_iter(_Last), _Pred);

  00011	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  00014	2b c1		 sub	 eax, ecx
  00016	c1 f8 03	 sar	 eax, 3
  00019	8d 34 81	 lea	 esi, DWORD PTR [ecx+eax*4]
  0001c	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  0001f	50		 push	 eax
  00020	56		 push	 esi
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 ??$_Guess_median_unchecked@PAPAVCEffectInstance@@UCArea_LessEffectInstancePtrRenderOrder@@@std@@YAXPAPAVCEffectInstance@@00UCArea_LessEffectInstancePtrRenderOrder@@@Z ; std::_Guess_median_unchecked<CEffectInstance * *,CArea_LessEffectInstancePtrRenderOrder>
  00027	83 c4 10	 add	 esp, 16			; 00000010H

; 7966 :     _RanIt _Pfirst = _Mid;
; 7967 :     _RanIt _Plast  = _Next_iter(_Pfirst);

  0002a	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  0002d	89 5d fc	 mov	 DWORD PTR __Plast$1$[ebp], ebx

; 7970 :            && !_Pred(*_Pfirst, *_Prev_iter(_Pfirst))) {

  00030	39 75 0c	 cmp	 DWORD PTR __First$[ebp], esi
  00033	73 31		 jae	 SHORT $LN68@Partition_
  00035	8b 5d 0c	 mov	 ebx, DWORD PTR __First$[ebp]
  00038	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL2@Partition_:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 120  : 		return pkLeft->LessRenderOrder(pkRight);

  00040	ff 36		 push	 DWORD PTR [esi]
  00042	8b 4e fc	 mov	 ecx, DWORD PTR [esi-4]
  00045	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7970 :            && !_Pred(*_Pfirst, *_Prev_iter(_Pfirst))) {

  0004a	84 c0		 test	 al, al
  0004c	75 15		 jne	 SHORT $LN94@Partition_
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 120  : 		return pkLeft->LessRenderOrder(pkRight);

  0004e	ff 76 fc	 push	 DWORD PTR [esi-4]
  00051	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00053	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7970 :            && !_Pred(*_Pfirst, *_Prev_iter(_Pfirst))) {

  00058	84 c0		 test	 al, al
  0005a	75 07		 jne	 SHORT $LN94@Partition_

; 7971 :         --_Pfirst;

  0005c	83 c6 fc	 add	 esi, -4			; fffffffcH
  0005f	3b de		 cmp	 ebx, esi
  00061	72 dd		 jb	 SHORT $LL2@Partition_
$LN94@Partition_:
  00063	8b 5d fc	 mov	 ebx, DWORD PTR __Plast$1$[ebp]
$LN68@Partition_:

; 7974 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

  00066	3b df		 cmp	 ebx, edi
  00068	73 2a		 jae	 SHORT $LN5@Partition_
  0006a	66 0f 1f 44 00
	00		 npad	 6
$LL4@Partition_:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 120  : 		return pkLeft->LessRenderOrder(pkRight);

  00070	ff 36		 push	 DWORD PTR [esi]
  00072	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00074	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7974 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

  00079	84 c0		 test	 al, al
  0007b	75 14		 jne	 SHORT $LN95@Partition_
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 120  : 		return pkLeft->LessRenderOrder(pkRight);

  0007d	ff 33		 push	 DWORD PTR [ebx]
  0007f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00081	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7974 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

  00086	84 c0		 test	 al, al
  00088	75 07		 jne	 SHORT $LN95@Partition_

; 7975 :         ++_Plast;

  0008a	83 c3 04	 add	 ebx, 4
  0008d	3b df		 cmp	 ebx, edi
  0008f	72 df		 jb	 SHORT $LL4@Partition_
$LN95@Partition_:
  00091	89 5d fc	 mov	 DWORD PTR __Plast$1$[ebp], ebx
$LN5@Partition_:

; 7976 :     }
; 7977 : 
; 7978 :     _RanIt _Gfirst = _Plast;

  00094	8b fb		 mov	 edi, ebx

; 7979 :     _RanIt _Glast  = _Pfirst;

  00096	8b d6		 mov	 edx, esi
$LN122@Partition_:

; 7982 :         for (; _Gfirst < _Last; ++_Gfirst) {

  00098	89 55 f8	 mov	 DWORD PTR __Glast$1$[ebp], edx
$LN121@Partition_:
  0009b	89 7d f4	 mov	 DWORD PTR __Gfirst$1$[ebp], edi
  0009e	66 90		 npad	 2
$LL6@Partition_:
  000a0	3b 7d 10	 cmp	 edi, DWORD PTR __Last$[ebp]
  000a3	73 3a		 jae	 SHORT $LN72@Partition_
$LL11@Partition_:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 120  : 		return pkLeft->LessRenderOrder(pkRight);

  000a5	ff 37		 push	 DWORD PTR [edi]
  000a7	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000a9	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7983 :             if (_DEBUG_LT_PRED(_Pred, *_Pfirst, *_Gfirst)) {

  000ae	84 c0		 test	 al, al
  000b0	75 1c		 jne	 SHORT $LN9@Partition_
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 120  : 		return pkLeft->LessRenderOrder(pkRight);

  000b2	ff 36		 push	 DWORD PTR [esi]
  000b4	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000b6	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7985 :             } else if (_Pred(*_Gfirst, *_Pfirst)) {

  000bb	84 c0		 test	 al, al
  000bd	75 17		 jne	 SHORT $LN96@Partition_

; 7986 :                 break;
; 7987 :             } else if (_Plast != _Gfirst) {

  000bf	3b df		 cmp	 ebx, edi
  000c1	74 08		 je	 SHORT $LN19@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 99   :     _Ty _Tmp = _STD move(_Left);

  000c3	8b 0b		 mov	 ecx, DWORD PTR [ebx]

; 100  :     _Left    = _STD move(_Right);

  000c5	8b 07		 mov	 eax, DWORD PTR [edi]
  000c7	89 03		 mov	 DWORD PTR [ebx], eax

; 101  :     _Right   = _STD move(_Tmp);

  000c9	89 0f		 mov	 DWORD PTR [edi], ecx
$LN19@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7982 :         for (; _Gfirst < _Last; ++_Gfirst) {

  000cb	83 c3 04	 add	 ebx, 4
$LN9@Partition_:
  000ce	83 c7 04	 add	 edi, 4
  000d1	3b 7d 10	 cmp	 edi, DWORD PTR __Last$[ebp]
  000d4	72 cf		 jb	 SHORT $LL11@Partition_
$LN96@Partition_:
  000d6	8b 55 f8	 mov	 edx, DWORD PTR __Glast$1$[ebp]
  000d9	89 5d fc	 mov	 DWORD PTR __Plast$1$[ebp], ebx
  000dc	89 7d f4	 mov	 DWORD PTR __Gfirst$1$[ebp], edi
$LN72@Partition_:

; 7995 :         for (; _First < _Glast; --_Glast) {

  000df	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  000e2	3b d0		 cmp	 edx, eax
  000e4	76 53		 jbe	 SHORT $LN120@Partition_
  000e6	8b 5d f8	 mov	 ebx, DWORD PTR __Glast$1$[ebp]
  000e9	8d 7b fc	 lea	 edi, DWORD PTR [ebx-4]
  000ec	0f 1f 40 00	 npad	 4
$LL14@Partition_:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 120  : 		return pkLeft->LessRenderOrder(pkRight);

  000f0	ff 36		 push	 DWORD PTR [esi]
  000f2	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000f4	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7997 :             if (_DEBUG_LT_PRED(_Pred, *_Glast_prev, *_Pfirst)) {

  000f9	84 c0		 test	 al, al
  000fb	75 1c		 jne	 SHORT $LN12@Partition_
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 120  : 		return pkLeft->LessRenderOrder(pkRight);

  000fd	ff 37		 push	 DWORD PTR [edi]
  000ff	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00101	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7999 :             } else if (_Pred(*_Pfirst, *_Glast_prev)) {

  00106	84 c0		 test	 al, al
  00108	75 1e		 jne	 SHORT $LN98@Partition_

; 8000 :                 break;
; 8001 :             } else if (--_Pfirst != _Glast_prev) {

  0010a	83 ee 04	 sub	 esi, 4
  0010d	3b f7		 cmp	 esi, edi
  0010f	74 08		 je	 SHORT $LN12@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 99   :     _Ty _Tmp = _STD move(_Left);

  00111	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 100  :     _Left    = _STD move(_Right);

  00113	8b 07		 mov	 eax, DWORD PTR [edi]
  00115	89 06		 mov	 DWORD PTR [esi], eax

; 101  :     _Right   = _STD move(_Tmp);

  00117	89 0f		 mov	 DWORD PTR [edi], ecx
$LN12@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7995 :         for (; _First < _Glast; --_Glast) {

  00119	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  0011c	83 eb 04	 sub	 ebx, 4
  0011f	83 ef 04	 sub	 edi, 4
  00122	3b c3		 cmp	 eax, ebx
  00124	72 ca		 jb	 SHORT $LL14@Partition_

; 7999 :             } else if (_Pred(*_Pfirst, *_Glast_prev)) {

  00126	eb 03		 jmp	 SHORT $LN97@Partition_
$LN98@Partition_:
  00128	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
$LN97@Partition_:
  0012b	8b 7d f4	 mov	 edi, DWORD PTR __Gfirst$1$[ebp]
  0012e	89 5d f8	 mov	 DWORD PTR __Glast$1$[ebp], ebx
  00131	8b 55 f8	 mov	 edx, DWORD PTR __Glast$1$[ebp]

; 8002 :                 swap(*_Pfirst, *_Glast_prev); // intentional ADL
; 8003 :             }
; 8004 :         }
; 8005 : 
; 8006 :         if (_Glast == _First && _Gfirst == _Last) {

  00134	3b d0		 cmp	 edx, eax
  00136	8b 5d fc	 mov	 ebx, DWORD PTR __Plast$1$[ebp]
$LN120@Partition_:
  00139	75 2a		 jne	 SHORT $LN27@Partition_
  0013b	3b 7d 10	 cmp	 edi, DWORD PTR __Last$[ebp]
  0013e	74 62		 je	 SHORT $LN74@Partition_

; 8008 :         }
; 8009 : 
; 8010 :         if (_Glast == _First) { // no room at bottom, rotate pivot upward
; 8011 :             if (_Plast != _Gfirst) {

  00140	3b df		 cmp	 ebx, edi
  00142	74 08		 je	 SHORT $LN43@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 99   :     _Ty _Tmp = _STD move(_Left);

  00144	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 100  :     _Left    = _STD move(_Right);

  00146	8b 03		 mov	 eax, DWORD PTR [ebx]
  00148	89 06		 mov	 DWORD PTR [esi], eax

; 101  :     _Right   = _STD move(_Tmp);

  0014a	89 0b		 mov	 DWORD PTR [ebx], ecx
$LN43@Partition_:

; 99   :     _Ty _Tmp = _STD move(_Left);

  0014c	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8015 :             ++_Plast;

  0014e	83 c3 04	 add	 ebx, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 100  :     _Left    = _STD move(_Right);

  00151	8b 07		 mov	 eax, DWORD PTR [edi]
  00153	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8017 :             ++_Pfirst;

  00155	83 c6 04	 add	 esi, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 101  :     _Right   = _STD move(_Tmp);

  00158	89 0f		 mov	 DWORD PTR [edi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8018 :             ++_Gfirst;

  0015a	83 c7 04	 add	 edi, 4
  0015d	89 5d fc	 mov	 DWORD PTR __Plast$1$[ebp], ebx
  00160	e9 36 ff ff ff	 jmp	 $LN121@Partition_
$LN27@Partition_:

; 8019 :         } else if (_Gfirst == _Last) { // no room at top, rotate pivot downward

  00165	83 c2 fc	 add	 edx, -4			; fffffffcH
  00168	89 55 f8	 mov	 DWORD PTR __Glast$1$[ebp], edx
  0016b	3b 7d 10	 cmp	 edi, DWORD PTR __Last$[ebp]
  0016e	75 22		 jne	 SHORT $LN30@Partition_

; 8020 :             if (--_Glast != --_Pfirst) {

  00170	83 ee 04	 sub	 esi, 4
  00173	3b d6		 cmp	 edx, esi
  00175	74 08		 je	 SHORT $LN90@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 99   :     _Ty _Tmp = _STD move(_Left);

  00177	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 100  :     _Left    = _STD move(_Right);

  00179	8b 06		 mov	 eax, DWORD PTR [esi]
  0017b	89 02		 mov	 DWORD PTR [edx], eax

; 101  :     _Right   = _STD move(_Tmp);

  0017d	89 0e		 mov	 DWORD PTR [esi], ecx
$LN90@Partition_:

; 99   :     _Ty _Tmp = _STD move(_Left);

  0017f	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8024 :             swap(*_Pfirst, *--_Plast); // intentional ADL

  00181	83 eb 04	 sub	 ebx, 4
  00184	89 5d fc	 mov	 DWORD PTR __Plast$1$[ebp], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 100  :     _Left    = _STD move(_Right);

  00187	8b 03		 mov	 eax, DWORD PTR [ebx]
  00189	89 06		 mov	 DWORD PTR [esi], eax

; 101  :     _Right   = _STD move(_Tmp);

  0018b	89 0b		 mov	 DWORD PTR [ebx], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8025 :         } else {

  0018d	e9 0e ff ff ff	 jmp	 $LL6@Partition_
$LN30@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 99   :     _Ty _Tmp = _STD move(_Left);

  00192	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 100  :     _Left    = _STD move(_Right);

  00194	8b 02		 mov	 eax, DWORD PTR [edx]
  00196	89 07		 mov	 DWORD PTR [edi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8027 :             ++_Gfirst;

  00198	83 c7 04	 add	 edi, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 101  :     _Right   = _STD move(_Tmp);

  0019b	89 0a		 mov	 DWORD PTR [edx], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8029 :     }

  0019d	e9 f6 fe ff ff	 jmp	 $LN122@Partition_
$LN74@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  001a2	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8007 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

  001a5	5f		 pop	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  001a6	89 30		 mov	 DWORD PTR [eax], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8007 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

  001a8	5e		 pop	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  001a9	89 58 04	 mov	 DWORD PTR [eax+4], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8007 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

  001ac	5b		 pop	 ebx

; 8030 : }

  001ad	8b e5		 mov	 esp, ebp
  001af	5d		 pop	 ebp
  001b0	c3		 ret	 0
??$_Partition_by_median_guess_unchecked@PAPAVCEffectInstance@@UCArea_LessEffectInstancePtrRenderOrder@@@std@@YA?AU?$pair@PAPAVCEffectInstance@@PAPAV1@@0@PAPAVCEffectInstance@@0UCArea_LessEffectInstancePtrRenderOrder@@@Z ENDP ; std::_Partition_by_median_guess_unchecked<CEffectInstance * *,CArea_LessEffectInstancePtrRenderOrder>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@Z
_TEXT	SEGMENT
tv452 = -12						; size = 4
tv449 = -8						; size = 4
__New_size$1$ = -8					; size = 4
tv451 = -4						; size = 4
__Old_size$1$ = -4					; size = 4
__Old$1$ = 8						; size = 4
__Size_increase$ = 8					; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
_<_Args_1>$ = 20					; size = 4
_<_Args_2>$ = 24					; size = 4
??$_Reallocate_grow_by@V<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_4d79bb85f269e6e8002a4599002d832c>,unsigned int,char const *,unsigned int>, COMDAT
; _this$ = ecx

; 4761 :     _CONSTEXPR20 basic_string& _Reallocate_grow_by(const size_type _Size_increase, _Fty _Fn, _ArgTys... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 4762 :         // reallocate to increase size by _Size_increase elements, new buffer prepared by
; 4763 :         // _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 4764 :         auto& _My_data            = _Mypair._Myval2;
; 4765 :         const size_type _Old_size = _My_data._Mysize;
; 4766 :         if (max_size() - _Old_size < _Size_increase) {

  00008	8b 75 08	 mov	 esi, DWORD PTR __Size_increase$[ebp]
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  00013	8b c1		 mov	 eax, ecx
  00015	8b 57 10	 mov	 edx, DWORD PTR [edi+16]
  00018	2b c2		 sub	 eax, edx
  0001a	89 55 fc	 mov	 DWORD PTR __Old_size$1$[ebp], edx
  0001d	3b c6		 cmp	 eax, esi
  0001f	0f 82 44 01 00
	00		 jb	 $LN66@Reallocate

; 4771 :         const size_type _Old_capacity = _My_data._Myres;

  00025	8b 5f 14	 mov	 ebx, DWORD PTR [edi+20]
  00028	8d 04 32	 lea	 eax, DWORD PTR [edx+esi]

; 4714 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0002b	8b f0		 mov	 esi, eax

; 4768 :         }
; 4769 : 
; 4770 :         const size_type _New_size     = _Old_size + _Size_increase;

  0002d	89 45 f8	 mov	 DWORD PTR __New_size$1$[ebp], eax

; 4714 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00030	83 ce 0f	 or	 esi, 15			; 0000000fH

; 4771 :         const size_type _Old_capacity = _My_data._Myres;

  00033	89 5d 08	 mov	 DWORD PTR __Old$1$[ebp], ebx

; 4714 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00036	3b f1		 cmp	 esi, ecx

; 4715 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00038	76 17		 jbe	 SHORT $LN9@Reallocate

; 4716 :             return _Max;

  0003a	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0003f	8b f1		 mov	 esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00047	8b 55 fc	 mov	 edx, DWORD PTR __Old_size$1$[ebp]
  0004a	83 c4 04	 add	 esp, 4
  0004d	8b d8		 mov	 ebx, eax
  0004f	eb 5b		 jmp	 SHORT $LN16@Reallocate
$LN9@Reallocate:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4719 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00051	8b c3		 mov	 eax, ebx
  00053	d1 e8		 shr	 eax, 1
  00055	2b c8		 sub	 ecx, eax
  00057	3b d9		 cmp	 ebx, ecx
  00059	76 1a		 jbe	 SHORT $LN10@Reallocate

; 4720 :             return _Max;

  0005b	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00060	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0006b	8b 55 fc	 mov	 edx, DWORD PTR __Old_size$1$[ebp]
  0006e	83 c4 04	 add	 esp, 4
  00071	8b d8		 mov	 ebx, eax
  00073	eb 37		 jmp	 SHORT $LN16@Reallocate
$LN10@Reallocate:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4723 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00075	03 c3		 add	 eax, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 47   :     return _Left < _Right ? _Right : _Left;

  00077	3b f0		 cmp	 esi, eax
  00079	0f 42 f0	 cmovb	 esi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4774 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0007c	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0007f	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00084	72 10		 jb	 SHORT $LN17@Reallocate

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0008c	8b 55 fc	 mov	 edx, DWORD PTR __Old_size$1$[ebp]
  0008f	83 c4 04	 add	 esp, 4
  00092	8b d8		 mov	 ebx, eax
  00094	eb 16		 jmp	 SHORT $LN16@Reallocate
$LN17@Reallocate:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  00096	85 c0		 test	 eax, eax
  00098	74 10		 je	 SHORT $LN18@Reallocate

; 87   :         return ::operator new(_Bytes);

  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 245  :         return _Traits::_Allocate(_Bytes);

  000a0	8b 55 fc	 mov	 edx, DWORD PTR __Old_size$1$[ebp]

; 87   :         return ::operator new(_Bytes);

  000a3	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  000a6	8b d8		 mov	 ebx, eax
  000a8	eb 02		 jmp	 SHORT $LN16@Reallocate
$LN18@Reallocate:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  000aa	33 db		 xor	 ebx, ebx
$LN16@Reallocate:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4779 :         _My_data._Mysize      = _New_size;

  000ac	8b 45 f8	 mov	 eax, DWORD PTR __New_size$1$[ebp]
  000af	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 4780 :         _My_data._Myres       = _New_capacity;
; 4781 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  000b2	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  000b5	2b d0		 sub	 edx, eax
  000b7	89 77 14	 mov	 DWORD PTR [edi+20], esi

; 4782 :         if (_BUF_SIZE <= _Old_capacity) {

  000ba	50		 push	 eax
  000bb	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
  000be	89 4d fc	 mov	 DWORD PTR tv451[ebp], ecx
  000c1	8d 34 03	 lea	 esi, DWORD PTR [ebx+eax]
  000c4	8b 4d 18	 mov	 ecx, DWORD PTR _<_Args_2>$[ebp]
  000c7	03 ce		 add	 ecx, esi
  000c9	89 75 f4	 mov	 DWORD PTR tv452[ebp], esi
  000cc	83 7d 08 10	 cmp	 DWORD PTR __Old$1$[ebp], 16 ; 00000010H
  000d0	89 4d f8	 mov	 DWORD PTR tv449[ebp], ecx
  000d3	72 60		 jb	 SHORT $LN3@Reallocate

; 4783 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000d5	8b 37		 mov	 esi, DWORD PTR [edi]

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d7	56		 push	 esi
  000d8	53		 push	 ebx
  000d9	e8 00 00 00 00	 call	 _memcpy
  000de	ff 75 18	 push	 DWORD PTR _<_Args_2>$[ebp]
  000e1	ff 75 14	 push	 DWORD PTR _<_Args_1>$[ebp]
  000e4	ff 75 f4	 push	 DWORD PTR tv452[ebp]
  000e7	e8 00 00 00 00	 call	 _memcpy
  000ec	ff 75 fc	 push	 DWORD PTR tv451[ebp]

; 3530 :                 _Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  000ef	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  000f2	03 c6		 add	 eax, esi

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000f4	50		 push	 eax
  000f5	ff 75 f8	 push	 DWORD PTR tv449[ebp]
  000f8	e8 00 00 00 00	 call	 _memcpy

; 4784 :             _Fn(_Raw_new, _Unfancy(_Old_ptr), _Old_size, _Args...);
; 4785 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000fd	8b 4d 08	 mov	 ecx, DWORD PTR __Old$1$[ebp]

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00100	83 c4 24	 add	 esp, 36			; 00000024H

; 4784 :             _Fn(_Raw_new, _Unfancy(_Old_ptr), _Old_size, _Args...);
; 4785 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  00103	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00104	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0010a	72 12		 jb	 SHORT $LN44@Reallocate

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0010c	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  0010f	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00112	2b f2		 sub	 esi, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00114	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00117	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0011a	77 52		 ja	 SHORT $LN41@Reallocate

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0011c	8b f2		 mov	 esi, edx
$LN44@Reallocate:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0011e	51		 push	 ecx
  0011f	56		 push	 esi
  00120	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00125	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4793 :         return *this;

  00128	89 1f		 mov	 DWORD PTR [edi], ebx
  0012a	8b c7		 mov	 eax, edi

; 4794 :     }

  0012c	5f		 pop	 edi
  0012d	5e		 pop	 esi
  0012e	5b		 pop	 ebx
  0012f	8b e5		 mov	 esp, ebp
  00131	5d		 pop	 ebp
  00132	c2 14 00	 ret	 20			; 00000014H
$LN3@Reallocate:

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00135	57		 push	 edi
  00136	53		 push	 ebx
  00137	e8 00 00 00 00	 call	 _memcpy
  0013c	ff 75 18	 push	 DWORD PTR _<_Args_2>$[ebp]
  0013f	ff 75 14	 push	 DWORD PTR _<_Args_1>$[ebp]
  00142	56		 push	 esi
  00143	e8 00 00 00 00	 call	 _memcpy
  00148	ff 75 fc	 push	 DWORD PTR tv451[ebp]

; 3530 :                 _Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  0014b	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0014e	03 c7		 add	 eax, edi

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00150	50		 push	 eax
  00151	ff 75 f8	 push	 DWORD PTR tv449[ebp]
  00154	e8 00 00 00 00	 call	 _memcpy
  00159	83 c4 24	 add	 esp, 36			; 00000024H

; 4793 :         return *this;

  0015c	89 1f		 mov	 DWORD PTR [edi], ebx
  0015e	8b c7		 mov	 eax, edi

; 4794 :     }

  00160	5f		 pop	 edi
  00161	5e		 pop	 esi
  00162	5b		 pop	 ebx
  00163	8b e5		 mov	 esp, ebp
  00165	5d		 pop	 ebp
  00166	c2 14 00	 ret	 20			; 00000014H
$LN66@Reallocate:

; 4767 :             _Xlen_string(); // result too long

  00169	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN41@Reallocate:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0016e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN64@Reallocate:
  00173	cc		 int	 3
??$_Reallocate_grow_by@V<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_4d79bb85f269e6e8002a4599002d832c>,unsigned int,char const *,unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >::destroy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >, COMDAT

; 724  :     static _CONSTEXPR20 void destroy(_Alloc&, _Uty* const _Ptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 0c	 mov	 esi, DWORD PTR __Ptr$[ebp]
  00007	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  0000a	e8 00 00 00 00	 call	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  0000f	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00012	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  00015	72 27		 jb	 SHORT $LN21@destroy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00017	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00019	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0001a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00020	72 12		 jb	 SHORT $LN31@destroy

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00022	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00025	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00028	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0002a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00030	77 20		 ja	 SHORT $LN28@destroy

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00032	8b c2		 mov	 eax, edx
$LN31@destroy:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00034	51		 push	 ecx
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003b	83 c4 08	 add	 esp, 8
$LN21@destroy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  0003e	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  00045	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0004c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0004f	5e		 pop	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 730  :     }

  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
$LN28@destroy:

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00052	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN42@destroy:
  00057	cc		 int	 3
??$destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >::destroy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAUSObjectInstance@CArea@@@?$vector@PAUSObjectInstance@CArea@@V?$allocator@PAUSObjectInstance@CArea@@@std@@@std@@AAEPAPAUSObjectInstance@CArea@@QAPAU23@ABQAU23@@Z
_TEXT	SEGMENT
__Newsize$1$ = -8					; size = 4
tv463 = -4						; size = 4
__Whereoff$1$ = -4					; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAUSObjectInstance@CArea@@@?$vector@PAUSObjectInstance@CArea@@V?$allocator@PAUSObjectInstance@CArea@@@std@@@std@@AAEPAPAUSObjectInstance@CArea@@QAPAU23@ABQAU23@@Z PROC ; std::vector<CArea::SObjectInstance *,std::allocator<CArea::SObjectInstance *> >::_Emplace_reallocate<CArea::SObjectInstance * const &>, COMDAT
; _this$ = ecx

; 812  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 813  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 814  :         _Alty& _Al        = _Getal();
; 815  :         auto& _My_data    = _Mypair._Myval2;
; 816  :         pointer& _Myfirst = _My_data._Myfirst;
; 817  :         pointer& _Mylast  = _My_data._Mylast;
; 818  : 
; 819  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 820  : 
; 821  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00006	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00009	53		 push	 ebx
  0000a	8b d9		 mov	 ebx, ecx
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	8b 13		 mov	 edx, DWORD PTR [ebx]
  00010	2b c2		 sub	 eax, edx
  00012	c1 f8 02	 sar	 eax, 2
  00015	89 45 fc	 mov	 DWORD PTR __Whereoff$1$[ebp], eax

; 822  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00018	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0001b	2b c2		 sub	 eax, edx
  0001d	c1 f8 02	 sar	 eax, 2

; 823  : 
; 824  :         if (_Oldsize == max_size()) {

  00020	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00025	0f 84 d2 00 00
	00		 je	 $LN71@Emplace_re

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002b	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]

; 826  :         }
; 827  : 
; 828  :         const size_type _Newsize     = _Oldsize + 1;

  0002e	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00031	2b ca		 sub	 ecx, edx

; 826  :         }
; 827  : 
; 828  :         const size_type _Newsize     = _Oldsize + 1;

  00033	89 7d f8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00036	c1 f9 02	 sar	 ecx, 2

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00039	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003e	8b d1		 mov	 edx, ecx
  00040	d1 ea		 shr	 edx, 1
  00042	2b c2		 sub	 eax, edx
  00044	3b c8		 cmp	 ecx, eax
  00046	76 17		 jbe	 SHORT $LN12@Emplace_re

; 1967 :             return _Max; // geometric growth would overflow

  00048	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  0004d	be ff ff ff 3f	 mov	 esi, 1073741823		; 3fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00058	83 c4 04	 add	 esp, 4
  0005b	8b f8		 mov	 edi, eax
  0005d	eb 44		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1970 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005f	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 70   :         if (_Count > _Max_possible) {

  00062	8b f7		 mov	 esi, edi
  00064	3b c7		 cmp	 eax, edi
  00066	0f 43 f0	 cmovae	 esi, eax
  00069	81 fe ff ff ff
	3f		 cmp	 esi, 1073741823		; 3fffffffH
  0006f	0f 87 8d 00 00
	00		 ja	 $LN72@Emplace_re

; 72   :         }
; 73   :     }
; 74   : 
; 75   :     return _Count * _Ty_size;

  00075	8d 04 b5 00 00
	00 00		 lea	 eax, DWORD PTR [esi*4]

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0007c	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00081	72 0d		 jb	 SHORT $LN24@Emplace_re

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00089	83 c4 04	 add	 esp, 4
  0008c	8b f8		 mov	 edi, eax
  0008e	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  00090	85 c0		 test	 eax, eax
  00092	74 0d		 je	 SHORT $LN25@Emplace_re

; 87   :         return ::operator new(_Bytes);

  00094	50		 push	 eax
  00095	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0009a	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  0009d	8b f8		 mov	 edi, eax
  0009f	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  000a1	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 836  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000a3	8b 45 fc	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
  000a6	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]
  000a9	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000ac	89 4d fc	 mov	 DWORD PTR tv463[ebp], ecx
  000af	8b 00		 mov	 eax, DWORD PTR [eax]
  000b1	89 01		 mov	 DWORD PTR [ecx], eax

; 837  :         _Constructed_first = _Newvec + _Whereoff;
; 838  : 
; 839  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000b3	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  000b6	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  000b9	8b 13		 mov	 edx, DWORD PTR [ebx]
  000bb	3b c1		 cmp	 eax, ecx
  000bd	75 04		 jne	 SHORT $LN4@Emplace_re
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000bf	8b c7		 mov	 eax, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 845  :         } else { // provide basic guarantee

  000c1	eb 17		 jmp	 SHORT $LN52@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000c3	57		 push	 edi
  000c4	50		 push	 eax
  000c5	52		 push	 edx
  000c6	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAUSObjectInstance@CArea@@PAPAU12@@std@@YAPAPAUSObjectInstance@CArea@@PAPAU12@00@Z ; std::_Copy_memmove<CArea::SObjectInstance * *,CArea::SObjectInstance * *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000cb	8b 45 fc	 mov	 eax, DWORD PTR tv463[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000ce	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d1	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000d4	83 c0 04	 add	 eax, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000d7	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
$LN52@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000da	50		 push	 eax
  000db	51		 push	 ecx
  000dc	52		 push	 edx
  000dd	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAUSObjectInstance@CArea@@PAPAU12@@std@@YAPAPAUSObjectInstance@CArea@@PAPAU12@00@Z ; std::_Copy_memmove<CArea::SObjectInstance * *,CArea::SObjectInstance * *>
  000e2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 849  :         }
; 850  :         _CATCH_ALL
; 851  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 852  :         _Al.deallocate(_Newvec, _Newcapacity);
; 853  :         _RERAISE;
; 854  :         _CATCH_END
; 855  : 
; 856  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  000e5	8b cb		 mov	 ecx, ebx
  000e7	56		 push	 esi
  000e8	ff 75 f8	 push	 DWORD PTR __Newsize$1$[ebp]
  000eb	57		 push	 edi
  000ec	e8 00 00 00 00	 call	 ?_Change_array@?$vector@PAUSObjectInstance@CArea@@V?$allocator@PAUSObjectInstance@CArea@@@std@@@std@@AAEXQAPAUSObjectInstance@CArea@@II@Z ; std::vector<CArea::SObjectInstance *,std::allocator<CArea::SObjectInstance *> >::_Change_array

; 857  :         return _Newvec + _Whereoff;

  000f1	8b 45 fc	 mov	 eax, DWORD PTR tv463[ebp]

; 858  :     }

  000f4	5f		 pop	 edi
  000f5	5e		 pop	 esi
  000f6	5b		 pop	 ebx
  000f7	8b e5		 mov	 esp, ebp
  000f9	5d		 pop	 ebp
  000fa	c2 08 00	 ret	 8
$LN71@Emplace_re:

; 825  :             _Xlength();

  000fd	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAUSObjectInstance@CArea@@V?$allocator@PAUSObjectInstance@CArea@@@std@@@std@@CAXXZ ; std::vector<CArea::SObjectInstance *,std::allocator<CArea::SObjectInstance *> >::_Xlength
$LN72@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 71   :             _Throw_bad_array_new_length(); // multiply overflow

  00102	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN69@Emplace_re:
  00107	cc		 int	 3
??$_Emplace_reallocate@ABQAUSObjectInstance@CArea@@@?$vector@PAUSObjectInstance@CArea@@V?$allocator@PAUSObjectInstance@CArea@@@std@@@std@@AAEPAPAUSObjectInstance@CArea@@QAPAU23@ABQAU23@@Z ENDP ; std::vector<CArea::SObjectInstance *,std::allocator<CArea::SObjectInstance *> >::_Emplace_reallocate<CArea::SObjectInstance * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCAttributeInstance@@@?$vector@PAVCAttributeInstance@@V?$allocator@PAVCAttributeInstance@@@std@@@std@@AAEPAPAVCAttributeInstance@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
__Newsize$1$ = -12					; size = 4
tv607 = -8						; size = 4
tv590 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCAttributeInstance@@@?$vector@PAVCAttributeInstance@@V?$allocator@PAVCAttributeInstance@@@std@@@std@@AAEPAPAVCAttributeInstance@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CAttributeInstance *,std::allocator<CAttributeInstance *> >::_Emplace_reallocate<CAttributeInstance * const &>, COMDAT
; _this$ = ecx

; 812  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 813  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 814  :         _Alty& _Al        = _Getal();
; 815  :         auto& _My_data    = _Mypair._Myval2;
; 816  :         pointer& _Myfirst = _My_data._Myfirst;
; 817  :         pointer& _Mylast  = _My_data._Mylast;
; 818  : 
; 819  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 820  : 
; 821  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	2b d9		 sub	 ebx, ecx

; 822  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c1		 sub	 eax, ecx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 823  : 
; 824  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 0f 01 00
	00		 je	 $LN96@Emplace_re

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 826  :         }
; 827  : 
; 828  :         const size_type _Newsize     = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b d1		 sub	 edx, ecx

; 826  :         }
; 827  : 
; 828  :         const size_type _Newsize     = _Oldsize + 1;

  00030	89 7d f4	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 fa 02	 sar	 edx, 2

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b ca		 mov	 ecx, edx
  0003d	d1 e9		 shr	 ecx, 1
  0003f	2b c1		 sub	 eax, ecx
  00041	3b d0		 cmp	 edx, eax
  00043	76 15		 jbe	 SHORT $LN12@Emplace_re

; 1967 :             return _Max; // geometric growth would overflow

  00045	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004a	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1967 :             return _Max; // geometric growth would overflow

  0004b	89 45 f8	 mov	 DWORD PTR tv607[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00053	83 c4 04	 add	 esp, 4
  00056	8b f8		 mov	 edi, eax
  00058	eb 47		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1970 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005a	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 70   :         if (_Count > _Max_possible) {

  0005d	8b cf		 mov	 ecx, edi
  0005f	3b c7		 cmp	 eax, edi
  00061	0f 43 c8	 cmovae	 ecx, eax
  00064	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  0006a	0f 87 cc 00 00
	00		 ja	 $LN97@Emplace_re

; 72   :         }
; 73   :     }
; 74   : 
; 75   :     return _Count * _Ty_size;

  00070	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  00077	89 45 f8	 mov	 DWORD PTR tv607[ebp], eax

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0007a	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0007f	72 0d		 jb	 SHORT $LN24@Emplace_re

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00087	83 c4 04	 add	 esp, 4
  0008a	8b f8		 mov	 edi, eax
  0008c	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  0008e	85 c0		 test	 eax, eax
  00090	74 0d		 je	 SHORT $LN25@Emplace_re

; 87   :         return ::operator new(_Bytes);

  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00098	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  0009b	8b f8		 mov	 edi, eax
  0009d	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  0009f	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 836  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000a1	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000a4	8d 0c 9f	 lea	 ecx, DWORD PTR [edi+ebx*4]

; 837  :         _Constructed_first = _Newvec + _Whereoff;
; 838  : 
; 839  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000a7	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  000aa	89 4d fc	 mov	 DWORD PTR tv590[ebp], ecx
  000ad	8b 00		 mov	 eax, DWORD PTR [eax]
  000af	89 01		 mov	 DWORD PTR [ecx], eax
  000b1	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000b4	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000b6	3b d8		 cmp	 ebx, eax
  000b8	75 07		 jne	 SHORT $LN4@Emplace_re

; 845  :         } else { // provide basic guarantee

  000ba	8b 5d fc	 mov	 ebx, DWORD PTR tv590[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000bd	8b d7		 mov	 edx, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 845  :         } else { // provide basic guarantee

  000bf	eb 16		 jmp	 SHORT $LN52@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000c1	57		 push	 edi
  000c2	53		 push	 ebx
  000c3	51		 push	 ecx
  000c4	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCAttributeInstance@@PAPAV1@@std@@YAPAPAVCAttributeInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CAttributeInstance * *,CAttributeInstance * *>
  000c9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000cc	8b cb		 mov	 ecx, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000ce	8b 5d fc	 mov	 ebx, DWORD PTR tv590[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000d1	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000d4	8d 53 04	 lea	 edx, DWORD PTR [ebx+4]
$LN52@Emplace_re:
  000d7	52		 push	 edx
  000d8	50		 push	 eax
  000d9	51		 push	 ecx
  000da	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCAttributeInstance@@PAPAV1@@std@@YAPAPAVCAttributeInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CAttributeInstance * *,CAttributeInstance * *>

; 2023 :         if (_Myfirst) { // destroy and deallocate old array

  000df	8b 06		 mov	 eax, DWORD PTR [esi]

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000e1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2023 :         if (_Myfirst) { // destroy and deallocate old array

  000e4	85 c0		 test	 eax, eax
  000e6	74 2c		 je	 SHORT $LN70@Emplace_re

; 2024 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2025 :             _ASAN_VECTOR_REMOVE;
; 2026 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e8	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000eb	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ed	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000f0	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f6	72 12		 jb	 SHORT $LN80@Emplace_re

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f8	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000fb	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000fe	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00100	83 c0 fc	 add	 eax, -4			; fffffffcH
  00103	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00106	77 2a		 ja	 SHORT $LN77@Emplace_re

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00108	8b c2		 mov	 eax, edx
$LN80@Emplace_re:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0010a	51		 push	 ecx
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00111	83 c4 08	 add	 esp, 8
$LN70@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2030 :         _Mylast  = _Newvec + _Newsize;

  00114	8b 45 f4	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  00117	89 3e		 mov	 DWORD PTR [esi], edi
  00119	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]

; 849  :         }
; 850  :         _CATCH_ALL
; 851  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 852  :         _Al.deallocate(_Newvec, _Newcapacity);
; 853  :         _RERAISE;
; 854  :         _CATCH_END
; 855  : 
; 856  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 857  :         return _Newvec + _Whereoff;

  0011c	8b c3		 mov	 eax, ebx

; 2030 :         _Mylast  = _Newvec + _Newsize;

  0011e	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 2031 :         _Myend   = _Newvec + _Newcapacity;

  00121	8b 4d f8	 mov	 ecx, DWORD PTR tv607[ebp]
  00124	03 cf		 add	 ecx, edi

; 858  :     }

  00126	5f		 pop	 edi

; 2031 :         _Myend   = _Newvec + _Newcapacity;

  00127	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 858  :     }

  0012a	5e		 pop	 esi
  0012b	5b		 pop	 ebx
  0012c	8b e5		 mov	 esp, ebp
  0012e	5d		 pop	 ebp
  0012f	c2 08 00	 ret	 8
$LN77@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00132	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN96@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 825  :             _Xlength();

  00137	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCAttributeInstance@@V?$allocator@PAVCAttributeInstance@@@std@@@std@@CAXXZ ; std::vector<CAttributeInstance *,std::allocator<CAttributeInstance *> >::_Xlength
$LN97@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 71   :             _Throw_bad_array_new_length(); // multiply overflow

  0013c	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN94@Emplace_re:
  00141	cc		 int	 3
??$_Emplace_reallocate@ABQAVCAttributeInstance@@@?$vector@PAVCAttributeInstance@@V?$allocator@PAVCAttributeInstance@@@std@@@std@@AAEPAPAVCAttributeInstance@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CAttributeInstance *,std::allocator<CAttributeInstance *> >::_Emplace_reallocate<CAttributeInstance * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCArea@@@?$vector@PAVCArea@@V?$allocator@PAVCArea@@@std@@@std@@AAEPAPAVCArea@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
__Newsize$1$ = -12					; size = 4
tv607 = -8						; size = 4
tv590 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCArea@@@?$vector@PAVCArea@@V?$allocator@PAVCArea@@@std@@@std@@AAEPAPAVCArea@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CArea *,std::allocator<CArea *> >::_Emplace_reallocate<CArea * const &>, COMDAT
; _this$ = ecx

; 812  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 813  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 814  :         _Alty& _Al        = _Getal();
; 815  :         auto& _My_data    = _Mypair._Myval2;
; 816  :         pointer& _Myfirst = _My_data._Myfirst;
; 817  :         pointer& _Mylast  = _My_data._Mylast;
; 818  : 
; 819  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 820  : 
; 821  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	2b d9		 sub	 ebx, ecx

; 822  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c1		 sub	 eax, ecx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 823  : 
; 824  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 0f 01 00
	00		 je	 $LN96@Emplace_re

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 826  :         }
; 827  : 
; 828  :         const size_type _Newsize     = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b d1		 sub	 edx, ecx

; 826  :         }
; 827  : 
; 828  :         const size_type _Newsize     = _Oldsize + 1;

  00030	89 7d f4	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 fa 02	 sar	 edx, 2

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b ca		 mov	 ecx, edx
  0003d	d1 e9		 shr	 ecx, 1
  0003f	2b c1		 sub	 eax, ecx
  00041	3b d0		 cmp	 edx, eax
  00043	76 15		 jbe	 SHORT $LN12@Emplace_re

; 1967 :             return _Max; // geometric growth would overflow

  00045	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004a	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1967 :             return _Max; // geometric growth would overflow

  0004b	89 45 f8	 mov	 DWORD PTR tv607[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00053	83 c4 04	 add	 esp, 4
  00056	8b f8		 mov	 edi, eax
  00058	eb 47		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1970 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005a	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 70   :         if (_Count > _Max_possible) {

  0005d	8b cf		 mov	 ecx, edi
  0005f	3b c7		 cmp	 eax, edi
  00061	0f 43 c8	 cmovae	 ecx, eax
  00064	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  0006a	0f 87 cc 00 00
	00		 ja	 $LN97@Emplace_re

; 72   :         }
; 73   :     }
; 74   : 
; 75   :     return _Count * _Ty_size;

  00070	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  00077	89 45 f8	 mov	 DWORD PTR tv607[ebp], eax

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0007a	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0007f	72 0d		 jb	 SHORT $LN24@Emplace_re

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00087	83 c4 04	 add	 esp, 4
  0008a	8b f8		 mov	 edi, eax
  0008c	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  0008e	85 c0		 test	 eax, eax
  00090	74 0d		 je	 SHORT $LN25@Emplace_re

; 87   :         return ::operator new(_Bytes);

  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00098	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  0009b	8b f8		 mov	 edi, eax
  0009d	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  0009f	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 836  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000a1	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000a4	8d 0c 9f	 lea	 ecx, DWORD PTR [edi+ebx*4]

; 837  :         _Constructed_first = _Newvec + _Whereoff;
; 838  : 
; 839  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000a7	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  000aa	89 4d fc	 mov	 DWORD PTR tv590[ebp], ecx
  000ad	8b 00		 mov	 eax, DWORD PTR [eax]
  000af	89 01		 mov	 DWORD PTR [ecx], eax
  000b1	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000b4	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000b6	3b d8		 cmp	 ebx, eax
  000b8	75 07		 jne	 SHORT $LN4@Emplace_re

; 845  :         } else { // provide basic guarantee

  000ba	8b 5d fc	 mov	 ebx, DWORD PTR tv590[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000bd	8b d7		 mov	 edx, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 845  :         } else { // provide basic guarantee

  000bf	eb 16		 jmp	 SHORT $LN52@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000c1	57		 push	 edi
  000c2	53		 push	 ebx
  000c3	51		 push	 ecx
  000c4	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCArea@@PAPAV1@@std@@YAPAPAVCArea@@PAPAV1@00@Z ; std::_Copy_memmove<CArea * *,CArea * *>
  000c9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000cc	8b cb		 mov	 ecx, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000ce	8b 5d fc	 mov	 ebx, DWORD PTR tv590[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000d1	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000d4	8d 53 04	 lea	 edx, DWORD PTR [ebx+4]
$LN52@Emplace_re:
  000d7	52		 push	 edx
  000d8	50		 push	 eax
  000d9	51		 push	 ecx
  000da	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCArea@@PAPAV1@@std@@YAPAPAVCArea@@PAPAV1@00@Z ; std::_Copy_memmove<CArea * *,CArea * *>

; 2023 :         if (_Myfirst) { // destroy and deallocate old array

  000df	8b 06		 mov	 eax, DWORD PTR [esi]

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000e1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2023 :         if (_Myfirst) { // destroy and deallocate old array

  000e4	85 c0		 test	 eax, eax
  000e6	74 2c		 je	 SHORT $LN70@Emplace_re

; 2024 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2025 :             _ASAN_VECTOR_REMOVE;
; 2026 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e8	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000eb	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ed	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000f0	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f6	72 12		 jb	 SHORT $LN80@Emplace_re

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f8	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000fb	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000fe	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00100	83 c0 fc	 add	 eax, -4			; fffffffcH
  00103	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00106	77 2a		 ja	 SHORT $LN77@Emplace_re

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00108	8b c2		 mov	 eax, edx
$LN80@Emplace_re:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0010a	51		 push	 ecx
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00111	83 c4 08	 add	 esp, 8
$LN70@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2030 :         _Mylast  = _Newvec + _Newsize;

  00114	8b 45 f4	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  00117	89 3e		 mov	 DWORD PTR [esi], edi
  00119	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]

; 849  :         }
; 850  :         _CATCH_ALL
; 851  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 852  :         _Al.deallocate(_Newvec, _Newcapacity);
; 853  :         _RERAISE;
; 854  :         _CATCH_END
; 855  : 
; 856  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 857  :         return _Newvec + _Whereoff;

  0011c	8b c3		 mov	 eax, ebx

; 2030 :         _Mylast  = _Newvec + _Newsize;

  0011e	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 2031 :         _Myend   = _Newvec + _Newcapacity;

  00121	8b 4d f8	 mov	 ecx, DWORD PTR tv607[ebp]
  00124	03 cf		 add	 ecx, edi

; 858  :     }

  00126	5f		 pop	 edi

; 2031 :         _Myend   = _Newvec + _Newcapacity;

  00127	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 858  :     }

  0012a	5e		 pop	 esi
  0012b	5b		 pop	 ebx
  0012c	8b e5		 mov	 esp, ebp
  0012e	5d		 pop	 ebp
  0012f	c2 08 00	 ret	 8
$LN77@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00132	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN96@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 825  :             _Xlength();

  00137	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCArea@@V?$allocator@PAVCArea@@@std@@@std@@CAXXZ ; std::vector<CArea *,std::allocator<CArea *> >::_Xlength
$LN97@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 71   :             _Throw_bad_array_new_length(); // multiply overflow

  0013c	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN94@Emplace_re:
  00141	cc		 int	 3
??$_Emplace_reallocate@ABQAVCArea@@@?$vector@PAVCArea@@V?$allocator@PAVCArea@@@std@@@std@@AAEPAPAVCArea@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CArea *,std::allocator<CArea *> >::_Emplace_reallocate<CArea * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@1@ABK@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@1@ABK@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> >,0> >::_Find_lower_bound<unsigned long>, COMDAT
; _this$ = ecx

; 1611 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1612 :         const auto _Scary = _Get_scary();
; 1613 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000b	89 02		 mov	 DWORD PTR [edx], eax
  0000d	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00014	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1614 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1615 :         while (!_Trynode->_Isnil) {

  00017	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001b	75 28		 jne	 SHORT $LN12@Find_lower
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00020	56		 push	 esi
  00021	8b 31		 mov	 esi, DWORD PTR [ecx]
$LL2@Find_lower:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1616 :             _Result._Location._Parent = _Trynode;

  00023	89 02		 mov	 DWORD PTR [edx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  00025	39 70 10	 cmp	 DWORD PTR [eax+16], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1617 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00028	73 07		 jae	 SHORT $LN4@Find_lower

; 1618 :                 _Result._Location._Child = _Tree_child::_Right;
; 1619 :                 _Trynode                 = _Trynode->_Right;

  0002a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002d	33 c9		 xor	 ecx, ecx

; 1620 :             } else {

  0002f	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1621 :                 _Result._Location._Child = _Tree_child::_Left;
; 1622 :                 _Result._Bound           = _Trynode;

  00031	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1623 :                 _Trynode                 = _Trynode->_Left;

  00034	b9 01 00 00 00	 mov	 ecx, 1
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Find_lower:

; 1614 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1615 :         while (!_Trynode->_Isnil) {

  0003b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00042	74 df		 je	 SHORT $LL2@Find_lower
  00044	5e		 pop	 esi
$LN12@Find_lower:

; 1624 :             }
; 1625 :         }
; 1626 : 
; 1627 :         return _Result;
; 1628 :     }

  00045	8b c2		 mov	 eax, edx
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@1@ABK@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> >,0> >::_Find_lower_bound<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCSpeedTreeWrapper@@@?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@AAEPAPAVCSpeedTreeWrapper@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
__Newsize$1$ = -12					; size = 4
tv607 = -8						; size = 4
tv590 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCSpeedTreeWrapper@@@?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@AAEPAPAVCSpeedTreeWrapper@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >::_Emplace_reallocate<CSpeedTreeWrapper * const &>, COMDAT
; _this$ = ecx

; 812  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 813  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 814  :         _Alty& _Al        = _Getal();
; 815  :         auto& _My_data    = _Mypair._Myval2;
; 816  :         pointer& _Myfirst = _My_data._Myfirst;
; 817  :         pointer& _Mylast  = _My_data._Mylast;
; 818  : 
; 819  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 820  : 
; 821  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	2b d9		 sub	 ebx, ecx

; 822  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c1		 sub	 eax, ecx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 823  : 
; 824  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 0f 01 00
	00		 je	 $LN96@Emplace_re

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 826  :         }
; 827  : 
; 828  :         const size_type _Newsize     = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b d1		 sub	 edx, ecx

; 826  :         }
; 827  : 
; 828  :         const size_type _Newsize     = _Oldsize + 1;

  00030	89 7d f4	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 fa 02	 sar	 edx, 2

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b ca		 mov	 ecx, edx
  0003d	d1 e9		 shr	 ecx, 1
  0003f	2b c1		 sub	 eax, ecx
  00041	3b d0		 cmp	 edx, eax
  00043	76 15		 jbe	 SHORT $LN12@Emplace_re

; 1967 :             return _Max; // geometric growth would overflow

  00045	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004a	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1967 :             return _Max; // geometric growth would overflow

  0004b	89 45 f8	 mov	 DWORD PTR tv607[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00053	83 c4 04	 add	 esp, 4
  00056	8b f8		 mov	 edi, eax
  00058	eb 47		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1970 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005a	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 70   :         if (_Count > _Max_possible) {

  0005d	8b cf		 mov	 ecx, edi
  0005f	3b c7		 cmp	 eax, edi
  00061	0f 43 c8	 cmovae	 ecx, eax
  00064	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  0006a	0f 87 cc 00 00
	00		 ja	 $LN97@Emplace_re

; 72   :         }
; 73   :     }
; 74   : 
; 75   :     return _Count * _Ty_size;

  00070	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  00077	89 45 f8	 mov	 DWORD PTR tv607[ebp], eax

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0007a	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0007f	72 0d		 jb	 SHORT $LN24@Emplace_re

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00087	83 c4 04	 add	 esp, 4
  0008a	8b f8		 mov	 edi, eax
  0008c	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  0008e	85 c0		 test	 eax, eax
  00090	74 0d		 je	 SHORT $LN25@Emplace_re

; 87   :         return ::operator new(_Bytes);

  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00098	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  0009b	8b f8		 mov	 edi, eax
  0009d	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  0009f	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 836  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000a1	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000a4	8d 0c 9f	 lea	 ecx, DWORD PTR [edi+ebx*4]

; 837  :         _Constructed_first = _Newvec + _Whereoff;
; 838  : 
; 839  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000a7	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  000aa	89 4d fc	 mov	 DWORD PTR tv590[ebp], ecx
  000ad	8b 00		 mov	 eax, DWORD PTR [eax]
  000af	89 01		 mov	 DWORD PTR [ecx], eax
  000b1	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000b4	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000b6	3b d8		 cmp	 ebx, eax
  000b8	75 07		 jne	 SHORT $LN4@Emplace_re

; 845  :         } else { // provide basic guarantee

  000ba	8b 5d fc	 mov	 ebx, DWORD PTR tv590[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000bd	8b d7		 mov	 edx, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 845  :         } else { // provide basic guarantee

  000bf	eb 16		 jmp	 SHORT $LN52@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000c1	57		 push	 edi
  000c2	53		 push	 ebx
  000c3	51		 push	 ecx
  000c4	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCSpeedTreeWrapper@@PAPAV1@@std@@YAPAPAVCSpeedTreeWrapper@@PAPAV1@00@Z ; std::_Copy_memmove<CSpeedTreeWrapper * *,CSpeedTreeWrapper * *>
  000c9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000cc	8b cb		 mov	 ecx, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000ce	8b 5d fc	 mov	 ebx, DWORD PTR tv590[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000d1	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000d4	8d 53 04	 lea	 edx, DWORD PTR [ebx+4]
$LN52@Emplace_re:
  000d7	52		 push	 edx
  000d8	50		 push	 eax
  000d9	51		 push	 ecx
  000da	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCSpeedTreeWrapper@@PAPAV1@@std@@YAPAPAVCSpeedTreeWrapper@@PAPAV1@00@Z ; std::_Copy_memmove<CSpeedTreeWrapper * *,CSpeedTreeWrapper * *>

; 2023 :         if (_Myfirst) { // destroy and deallocate old array

  000df	8b 06		 mov	 eax, DWORD PTR [esi]

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000e1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2023 :         if (_Myfirst) { // destroy and deallocate old array

  000e4	85 c0		 test	 eax, eax
  000e6	74 2c		 je	 SHORT $LN70@Emplace_re

; 2024 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2025 :             _ASAN_VECTOR_REMOVE;
; 2026 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e8	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000eb	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ed	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000f0	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f6	72 12		 jb	 SHORT $LN80@Emplace_re

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f8	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000fb	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000fe	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00100	83 c0 fc	 add	 eax, -4			; fffffffcH
  00103	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00106	77 2a		 ja	 SHORT $LN77@Emplace_re

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00108	8b c2		 mov	 eax, edx
$LN80@Emplace_re:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0010a	51		 push	 ecx
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00111	83 c4 08	 add	 esp, 8
$LN70@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2030 :         _Mylast  = _Newvec + _Newsize;

  00114	8b 45 f4	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  00117	89 3e		 mov	 DWORD PTR [esi], edi
  00119	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]

; 849  :         }
; 850  :         _CATCH_ALL
; 851  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 852  :         _Al.deallocate(_Newvec, _Newcapacity);
; 853  :         _RERAISE;
; 854  :         _CATCH_END
; 855  : 
; 856  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 857  :         return _Newvec + _Whereoff;

  0011c	8b c3		 mov	 eax, ebx

; 2030 :         _Mylast  = _Newvec + _Newsize;

  0011e	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 2031 :         _Myend   = _Newvec + _Newcapacity;

  00121	8b 4d f8	 mov	 ecx, DWORD PTR tv607[ebp]
  00124	03 cf		 add	 ecx, edi

; 858  :     }

  00126	5f		 pop	 edi

; 2031 :         _Myend   = _Newvec + _Newcapacity;

  00127	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 858  :     }

  0012a	5e		 pop	 esi
  0012b	5b		 pop	 ebx
  0012c	8b e5		 mov	 esp, ebp
  0012e	5d		 pop	 ebp
  0012f	c2 08 00	 ret	 8
$LN77@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00132	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN96@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 825  :             _Xlength();

  00137	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@CAXXZ ; std::vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >::_Xlength
$LN97@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 71   :             _Throw_bad_array_new_length(); // multiply overflow

  0013c	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN94@Emplace_re:
  00141	cc		 int	 3
??$_Emplace_reallocate@ABQAVCSpeedTreeWrapper@@@?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@AAEPAPAVCSpeedTreeWrapper@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >::_Emplace_reallocate<CSpeedTreeWrapper * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??$_Emplace_reallocate@ABUSObjectData@CArea@@@?$vector@USObjectData@CArea@@V?$allocator@USObjectData@CArea@@@std@@@std@@AAEPAUSObjectData@CArea@@QAU23@ABU23@@Z
_TEXT	SEGMENT
__Oldsize$1$ = -12					; size = 4
tv556 = -8						; size = 4
__Whereoff$1$ = -8					; size = 4
tv573 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABUSObjectData@CArea@@@?$vector@USObjectData@CArea@@V?$allocator@USObjectData@CArea@@@std@@@std@@AAEPAUSObjectData@CArea@@QAU23@ABU23@@Z PROC ; std::vector<CArea::SObjectData,std::allocator<CArea::SObjectData> >::_Emplace_reallocate<CArea::SObjectData const &>, COMDAT
; _this$ = ecx

; 812  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 813  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 814  :         _Alty& _Al        = _Getal();
; 815  :         auto& _My_data    = _Mypair._Myval2;
; 816  :         pointer& _Myfirst = _My_data._Myfirst;
; 817  :         pointer& _Mylast  = _My_data._Mylast;
; 818  : 
; 819  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 820  : 
; 821  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00006	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  00009	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000e	53		 push	 ebx
  0000f	8b d9		 mov	 ebx, ecx
  00011	57		 push	 edi
  00012	8b 3b		 mov	 edi, DWORD PTR [ebx]
  00014	2b d7		 sub	 edx, edi

; 822  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00016	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00019	f7 ea		 imul	 edx
  0001b	2b cf		 sub	 ecx, edi
  0001d	c1 fa 03	 sar	 edx, 3
  00020	8b c2		 mov	 eax, edx
  00022	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00025	03 c2		 add	 eax, edx
  00027	89 45 f8	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  0002a	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0002f	f7 e9		 imul	 ecx
  00031	c1 fa 03	 sar	 edx, 3
  00034	8b c2		 mov	 eax, edx
  00036	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00039	03 c2		 add	 eax, edx
  0003b	89 45 f4	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 823  : 
; 824  :         if (_Oldsize == max_size()) {

  0003e	3d 55 55 55 05	 cmp	 eax, 89478485		; 05555555H
  00043	0f 84 4a 01 00
	00		 je	 $LN104@Emplace_re

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00049	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  0004c	2b cf		 sub	 ecx, edi
  0004e	56		 push	 esi

; 826  :         }
; 827  : 
; 828  :         const size_type _Newsize     = _Oldsize + 1;

  0004f	8d 70 01	 lea	 esi, DWORD PTR [eax+1]

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00052	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00057	f7 e9		 imul	 ecx

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00059	b8 55 55 55 05	 mov	 eax, 89478485		; 05555555H

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0005e	c1 fa 03	 sar	 edx, 3
  00061	8b ca		 mov	 ecx, edx
  00063	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00066	03 ca		 add	 ecx, edx

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00068	8b d1		 mov	 edx, ecx
  0006a	d1 ea		 shr	 edx, 1
  0006c	2b c2		 sub	 eax, edx
  0006e	3b c8		 cmp	 ecx, eax
  00070	76 15		 jbe	 SHORT $LN12@Emplace_re

; 1967 :             return _Max; // geometric growth would overflow

  00072	b8 f0 ff ff ff	 mov	 eax, -16		; fffffff0H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00077	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1967 :             return _Max; // geometric growth would overflow

  00078	89 45 fc	 mov	 DWORD PTR tv573[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007b	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00080	83 c4 04	 add	 esp, 4
  00083	8b f8		 mov	 edi, eax
  00085	eb 46		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1970 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00087	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 70   :         if (_Count > _Max_possible) {

  0008a	8b ce		 mov	 ecx, esi
  0008c	3b c6		 cmp	 eax, esi
  0008e	0f 43 c8	 cmovae	 ecx, eax
  00091	81 f9 55 55 55
	05		 cmp	 ecx, 89478485		; 05555555H
  00097	0f 87 fb 00 00
	00		 ja	 $LN105@Emplace_re

; 72   :         }
; 73   :     }
; 74   : 
; 75   :     return _Count * _Ty_size;

  0009d	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
  000a0	c1 e0 04	 shl	 eax, 4
  000a3	89 45 fc	 mov	 DWORD PTR tv573[ebp], eax

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000a6	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000ab	72 0d		 jb	 SHORT $LN24@Emplace_re

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000ad	50		 push	 eax
  000ae	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000b3	83 c4 04	 add	 esp, 4
  000b6	8b f8		 mov	 edi, eax
  000b8	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  000ba	85 c0		 test	 eax, eax
  000bc	74 0d		 je	 SHORT $LN25@Emplace_re

; 87   :         return ::operator new(_Bytes);

  000be	50		 push	 eax
  000bf	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000c4	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  000c7	8b f8		 mov	 edi, eax
  000c9	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  000cb	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 836  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000cd	8b 45 f8	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]

; 839  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000d0	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  000d3	8d 34 40	 lea	 esi, DWORD PTR [eax+eax*2]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 719  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  000d6	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 836  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000d9	c1 e6 04	 shl	 esi, 4
  000dc	03 f7		 add	 esi, edi
  000de	89 75 f8	 mov	 DWORD PTR tv556[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 719  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  000e1	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  000e4	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  000e7	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  000eb	0f 11 46 10	 movups	 XMMWORD PTR [esi+16], xmm0
  000ef	0f 10 40 20	 movups	 xmm0, XMMWORD PTR [eax+32]
  000f3	0f 11 46 20	 movups	 XMMWORD PTR [esi+32], xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 839  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000f7	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  000fa	8b 03		 mov	 eax, DWORD PTR [ebx]
  000fc	3b d1		 cmp	 edx, ecx
  000fe	75 04		 jne	 SHORT $LN4@Emplace_re
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  00100	8b f7		 mov	 esi, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 845  :         } else { // provide basic guarantee

  00102	eb 14		 jmp	 SHORT $LN58@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  00104	57		 push	 edi
  00105	52		 push	 edx
  00106	50		 push	 eax
  00107	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAUSObjectData@CArea@@PAU12@@std@@YAPAUSObjectData@CArea@@PAU12@00@Z ; std::_Copy_memmove<CArea::SObjectData *,CArea::SObjectData *>
  0010c	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  0010f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00112	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  00115	83 c6 30	 add	 esi, 48			; 00000030H
$LN58@Emplace_re:
  00118	56		 push	 esi
  00119	51		 push	 ecx
  0011a	50		 push	 eax
  0011b	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAUSObjectData@CArea@@PAU12@@std@@YAPAUSObjectData@CArea@@PAU12@00@Z ; std::_Copy_memmove<CArea::SObjectData *,CArea::SObjectData *>

; 2023 :         if (_Myfirst) { // destroy and deallocate old array

  00120	8b 33		 mov	 esi, DWORD PTR [ebx]

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  00122	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2023 :         if (_Myfirst) { // destroy and deallocate old array

  00125	85 f6		 test	 esi, esi
  00127	74 40		 je	 SHORT $LN78@Emplace_re

; 2024 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2025 :             _ASAN_VECTOR_REMOVE;
; 2026 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00129	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  0012c	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00131	2b ce		 sub	 ecx, esi
  00133	f7 e9		 imul	 ecx
  00135	c1 fa 03	 sar	 edx, 3
  00138	8b c2		 mov	 eax, edx
  0013a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0013d	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0013f	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00142	c1 e1 04	 shl	 ecx, 4

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00145	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0014b	72 12		 jb	 SHORT $LN88@Emplace_re

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0014d	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00150	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00153	2b f2		 sub	 esi, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00155	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00158	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0015b	77 31		 ja	 SHORT $LN85@Emplace_re

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0015d	8b f2		 mov	 esi, edx
$LN88@Emplace_re:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0015f	51		 push	 ecx
  00160	56		 push	 esi
  00161	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00166	83 c4 08	 add	 esp, 8
$LN78@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2030 :         _Mylast  = _Newvec + _Newsize;

  00169	8b 45 f4	 mov	 eax, DWORD PTR __Oldsize$1$[ebp]
  0016c	40		 inc	 eax
  0016d	89 3b		 mov	 DWORD PTR [ebx], edi

; 849  :         }
; 850  :         _CATCH_ALL
; 851  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 852  :         _Al.deallocate(_Newvec, _Newcapacity);
; 853  :         _RERAISE;
; 854  :         _CATCH_END
; 855  : 
; 856  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 857  :         return _Newvec + _Whereoff;

  0016f	5e		 pop	 esi

; 2030 :         _Mylast  = _Newvec + _Newsize;

  00170	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]

; 849  :         }
; 850  :         _CATCH_ALL
; 851  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 852  :         _Al.deallocate(_Newvec, _Newcapacity);
; 853  :         _RERAISE;
; 854  :         _CATCH_END
; 855  : 
; 856  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 857  :         return _Newvec + _Whereoff;

  00173	8b 45 f8	 mov	 eax, DWORD PTR tv556[ebp]

; 2030 :         _Mylast  = _Newvec + _Newsize;

  00176	c1 e1 04	 shl	 ecx, 4
  00179	03 cf		 add	 ecx, edi
  0017b	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx

; 2031 :         _Myend   = _Newvec + _Newcapacity;

  0017e	8b 4d fc	 mov	 ecx, DWORD PTR tv573[ebp]
  00181	03 cf		 add	 ecx, edi

; 858  :     }

  00183	5f		 pop	 edi

; 2031 :         _Myend   = _Newvec + _Newcapacity;

  00184	89 4b 08	 mov	 DWORD PTR [ebx+8], ecx

; 858  :     }

  00187	5b		 pop	 ebx
  00188	8b e5		 mov	 esp, ebp
  0018a	5d		 pop	 ebp
  0018b	c2 08 00	 ret	 8
$LN85@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0018e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN104@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 825  :             _Xlength();

  00193	e8 00 00 00 00	 call	 ?_Xlength@?$vector@USObjectData@CArea@@V?$allocator@USObjectData@CArea@@@std@@@std@@CAXXZ ; std::vector<CArea::SObjectData,std::allocator<CArea::SObjectData> >::_Xlength
$LN105@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 71   :             _Throw_bad_array_new_length(); // multiply overflow

  00198	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN102@Emplace_re:
  0019d	cc		 int	 3
??$_Emplace_reallocate@ABUSObjectData@CArea@@@?$vector@USObjectData@CArea@@V?$allocator@USObjectData@CArea@@@std@@@std@@AAEPAUSObjectData@CArea@@QAU23@ABU23@@Z ENDP ; std::vector<CArea::SObjectData,std::allocator<CArea::SObjectData> >::_Emplace_reallocate<CArea::SObjectData const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUSObjectInstance@CArea@@V?$allocator@PAUSObjectInstance@CArea@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
__Oldsize$1$ = 8					; size = 4
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUSObjectInstance@CArea@@V?$allocator@PAUSObjectInstance@CArea@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<CArea::SObjectInstance *,std::allocator<CArea::SObjectInstance *> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1511 :     _CONSTEXPR20 void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 1512 :         if (_Newsize > max_size()) {

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Newsize$[ebp]
  0000a	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000d	81 ff ff ff ff
	3f		 cmp	 edi, 1073741823		; 3fffffffH
  00013	0f 87 b5 00 00
	00		 ja	 $LN60@Resize_rea

; 1514 :         }
; 1515 : 
; 1516 :         auto& _Al         = _Getal();
; 1517 :         auto& _My_data    = _Mypair._Myval2;
; 1518 :         pointer& _Myfirst = _My_data._Myfirst;
; 1519 :         pointer& _Mylast  = _My_data._Mylast;
; 1520 : 
; 1521 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

  00019	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0001e	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]

; 1514 :         }
; 1515 : 
; 1516 :         auto& _Al         = _Getal();
; 1517 :         auto& _My_data    = _Mypair._Myval2;
; 1518 :         pointer& _Myfirst = _My_data._Myfirst;
; 1519 :         pointer& _Mylast  = _My_data._Mylast;
; 1520 : 
; 1521 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

  00021	2b d0		 sub	 edx, eax

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00023	2b c8		 sub	 ecx, eax

; 1514 :         }
; 1515 : 
; 1516 :         auto& _Al         = _Getal();
; 1517 :         auto& _My_data    = _Mypair._Myval2;
; 1518 :         pointer& _Myfirst = _My_data._Myfirst;
; 1519 :         pointer& _Mylast  = _My_data._Mylast;
; 1520 : 
; 1521 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

  00025	c1 fa 02	 sar	 edx, 2

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	c1 f9 02	 sar	 ecx, 2

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0002b	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 1514 :         }
; 1515 : 
; 1516 :         auto& _Al         = _Getal();
; 1517 :         auto& _My_data    = _Mypair._Myval2;
; 1518 :         pointer& _Myfirst = _My_data._Myfirst;
; 1519 :         pointer& _Mylast  = _My_data._Mylast;
; 1520 : 
; 1521 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

  00030	89 55 08	 mov	 DWORD PTR __Oldsize$1$[ebp], edx

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00033	8b d1		 mov	 edx, ecx
  00035	d1 ea		 shr	 edx, 1
  00037	2b c2		 sub	 eax, edx
  00039	3b c8		 cmp	 ecx, eax
  0003b	76 17		 jbe	 SHORT $LN10@Resize_rea

; 1967 :             return _Max; // geometric growth would overflow

  0003d	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  00042	be ff ff ff 3f	 mov	 esi, 1073741823		; 3fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0004d	83 c4 04	 add	 esp, 4
  00050	8b d8		 mov	 ebx, eax
  00052	eb 41		 jmp	 SHORT $LN21@Resize_rea
$LN10@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1970 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00054	8d 34 0a	 lea	 esi, DWORD PTR [edx+ecx]

; 1971 : 
; 1972 :         if (_Geometric < _Newsize) {

  00057	3b f7		 cmp	 esi, edi
  00059	73 1d		 jae	 SHORT $LN11@Resize_rea

; 1973 :             return _Newsize; // geometric growth would be insufficient

  0005b	8b f7		 mov	 esi, edi
$LN18@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 75   :     return _Count * _Ty_size;

  0005d	8d 04 b5 00 00
	00 00		 lea	 eax, DWORD PTR [esi*4]

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00064	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00069	72 17		 jb	 SHORT $LN22@Resize_rea

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00071	83 c4 04	 add	 esp, 4
  00074	8b d8		 mov	 ebx, eax
  00076	eb 1d		 jmp	 SHORT $LN21@Resize_rea
$LN11@Resize_rea:

; 70   :         if (_Count > _Max_possible) {

  00078	81 fe ff ff ff
	3f		 cmp	 esi, 1073741823		; 3fffffffH
  0007e	77 53		 ja	 SHORT $LN61@Resize_rea
  00080	eb db		 jmp	 SHORT $LN18@Resize_rea
$LN22@Resize_rea:

; 244  :     if (_Bytes != 0) {

  00082	85 c0		 test	 eax, eax
  00084	74 0d		 je	 SHORT $LN23@Resize_rea

; 87   :         return ::operator new(_Bytes);

  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0008c	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  0008f	8b d8		 mov	 ebx, eax
  00091	eb 02		 jmp	 SHORT $LN21@Resize_rea
$LN23@Resize_rea:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  00093	33 db		 xor	 ebx, ebx
$LN21@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1525 :         const pointer _Appended_first = _Newvec + _Oldsize;

  00095	8b 55 08	 mov	 edx, DWORD PTR __Oldsize$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 2035 :             _Zero_range(_PFirst, _PFirst + _Count);

  00098	8b c7		 mov	 eax, edi
  0009a	2b c2		 sub	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1525 :         const pointer _Appended_first = _Newvec + _Oldsize;

  0009c	8d 0c 93	 lea	 ecx, DWORD PTR [ebx+edx*4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 2035 :             _Zero_range(_PFirst, _PFirst + _Count);

  0009f	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  000a2	50		 push	 eax
  000a3	51		 push	 ecx
  000a4	e8 00 00 00 00	 call	 ??$_Zero_range@PAPAUSObjectInstance@CArea@@@std@@YAPAPAUSObjectInstance@CArea@@QAPAU12@0@Z ; std::_Zero_range<CArea::SObjectInstance * *>

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000a9	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  000ac	53		 push	 ebx
  000ad	ff 70 04	 push	 DWORD PTR [eax+4]
  000b0	ff 30		 push	 DWORD PTR [eax]
  000b2	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAUSObjectInstance@CArea@@PAPAU12@@std@@YAPAPAUSObjectInstance@CArea@@PAPAU12@00@Z ; std::_Copy_memmove<CArea::SObjectInstance * *,CArea::SObjectInstance * *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1547 :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  000b7	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000ba	83 c4 14	 add	 esp, 20			; 00000014H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1547 :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  000bd	56		 push	 esi
  000be	57		 push	 edi
  000bf	53		 push	 ebx
  000c0	e8 00 00 00 00	 call	 ?_Change_array@?$vector@PAUSObjectInstance@CArea@@V?$allocator@PAUSObjectInstance@CArea@@@std@@@std@@AAEXQAPAUSObjectInstance@CArea@@II@Z ; std::vector<CArea::SObjectInstance *,std::allocator<CArea::SObjectInstance *> >::_Change_array

; 1548 :     }

  000c5	5f		 pop	 edi
  000c6	5e		 pop	 esi
  000c7	5b		 pop	 ebx
  000c8	8b e5		 mov	 esp, ebp
  000ca	5d		 pop	 ebp
  000cb	c2 08 00	 ret	 8
$LN60@Resize_rea:

; 1513 :             _Xlength();

  000ce	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAUSObjectInstance@CArea@@V?$allocator@PAUSObjectInstance@CArea@@@std@@@std@@CAXXZ ; std::vector<CArea::SObjectInstance *,std::allocator<CArea::SObjectInstance *> >::_Xlength
$LN61@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 71   :             _Throw_bad_array_new_length(); // multiply overflow

  000d3	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN58@Resize_rea:
  000d8	cc		 int	 3
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUSObjectInstance@CArea@@V?$allocator@PAUSObjectInstance@CArea@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<CArea::SObjectInstance *,std::allocator<CArea::SObjectInstance *> >::_Resize_reallocate<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCGraphicThingInstance@@@?$vector@PAVCGraphicThingInstance@@V?$allocator@PAVCGraphicThingInstance@@@std@@@std@@AAEPAPAVCGraphicThingInstance@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
__Newsize$1$ = -12					; size = 4
tv607 = -8						; size = 4
tv590 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCGraphicThingInstance@@@?$vector@PAVCGraphicThingInstance@@V?$allocator@PAVCGraphicThingInstance@@@std@@@std@@AAEPAPAVCGraphicThingInstance@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CGraphicThingInstance *,std::allocator<CGraphicThingInstance *> >::_Emplace_reallocate<CGraphicThingInstance * const &>, COMDAT
; _this$ = ecx

; 812  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 813  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 814  :         _Alty& _Al        = _Getal();
; 815  :         auto& _My_data    = _Mypair._Myval2;
; 816  :         pointer& _Myfirst = _My_data._Myfirst;
; 817  :         pointer& _Mylast  = _My_data._Mylast;
; 818  : 
; 819  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 820  : 
; 821  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	2b d9		 sub	 ebx, ecx

; 822  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c1		 sub	 eax, ecx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 823  : 
; 824  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 0f 01 00
	00		 je	 $LN96@Emplace_re

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 826  :         }
; 827  : 
; 828  :         const size_type _Newsize     = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b d1		 sub	 edx, ecx

; 826  :         }
; 827  : 
; 828  :         const size_type _Newsize     = _Oldsize + 1;

  00030	89 7d f4	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 fa 02	 sar	 edx, 2

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b ca		 mov	 ecx, edx
  0003d	d1 e9		 shr	 ecx, 1
  0003f	2b c1		 sub	 eax, ecx
  00041	3b d0		 cmp	 edx, eax
  00043	76 15		 jbe	 SHORT $LN12@Emplace_re

; 1967 :             return _Max; // geometric growth would overflow

  00045	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004a	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1967 :             return _Max; // geometric growth would overflow

  0004b	89 45 f8	 mov	 DWORD PTR tv607[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00053	83 c4 04	 add	 esp, 4
  00056	8b f8		 mov	 edi, eax
  00058	eb 47		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1970 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005a	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 70   :         if (_Count > _Max_possible) {

  0005d	8b cf		 mov	 ecx, edi
  0005f	3b c7		 cmp	 eax, edi
  00061	0f 43 c8	 cmovae	 ecx, eax
  00064	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  0006a	0f 87 cc 00 00
	00		 ja	 $LN97@Emplace_re

; 72   :         }
; 73   :     }
; 74   : 
; 75   :     return _Count * _Ty_size;

  00070	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  00077	89 45 f8	 mov	 DWORD PTR tv607[ebp], eax

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0007a	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0007f	72 0d		 jb	 SHORT $LN24@Emplace_re

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00087	83 c4 04	 add	 esp, 4
  0008a	8b f8		 mov	 edi, eax
  0008c	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  0008e	85 c0		 test	 eax, eax
  00090	74 0d		 je	 SHORT $LN25@Emplace_re

; 87   :         return ::operator new(_Bytes);

  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00098	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  0009b	8b f8		 mov	 edi, eax
  0009d	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  0009f	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 836  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000a1	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000a4	8d 0c 9f	 lea	 ecx, DWORD PTR [edi+ebx*4]

; 837  :         _Constructed_first = _Newvec + _Whereoff;
; 838  : 
; 839  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000a7	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  000aa	89 4d fc	 mov	 DWORD PTR tv590[ebp], ecx
  000ad	8b 00		 mov	 eax, DWORD PTR [eax]
  000af	89 01		 mov	 DWORD PTR [ecx], eax
  000b1	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000b4	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000b6	3b d8		 cmp	 ebx, eax
  000b8	75 07		 jne	 SHORT $LN4@Emplace_re

; 845  :         } else { // provide basic guarantee

  000ba	8b 5d fc	 mov	 ebx, DWORD PTR tv590[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000bd	8b d7		 mov	 edx, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 845  :         } else { // provide basic guarantee

  000bf	eb 16		 jmp	 SHORT $LN52@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000c1	57		 push	 edi
  000c2	53		 push	 ebx
  000c3	51		 push	 ecx
  000c4	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCGraphicThingInstance@@PAPAV1@@std@@YAPAPAVCGraphicThingInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicThingInstance * *,CGraphicThingInstance * *>
  000c9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000cc	8b cb		 mov	 ecx, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000ce	8b 5d fc	 mov	 ebx, DWORD PTR tv590[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000d1	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000d4	8d 53 04	 lea	 edx, DWORD PTR [ebx+4]
$LN52@Emplace_re:
  000d7	52		 push	 edx
  000d8	50		 push	 eax
  000d9	51		 push	 ecx
  000da	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCGraphicThingInstance@@PAPAV1@@std@@YAPAPAVCGraphicThingInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicThingInstance * *,CGraphicThingInstance * *>

; 2023 :         if (_Myfirst) { // destroy and deallocate old array

  000df	8b 06		 mov	 eax, DWORD PTR [esi]

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000e1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2023 :         if (_Myfirst) { // destroy and deallocate old array

  000e4	85 c0		 test	 eax, eax
  000e6	74 2c		 je	 SHORT $LN70@Emplace_re

; 2024 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2025 :             _ASAN_VECTOR_REMOVE;
; 2026 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e8	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000eb	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ed	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000f0	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f6	72 12		 jb	 SHORT $LN80@Emplace_re

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f8	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000fb	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000fe	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00100	83 c0 fc	 add	 eax, -4			; fffffffcH
  00103	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00106	77 2a		 ja	 SHORT $LN77@Emplace_re

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00108	8b c2		 mov	 eax, edx
$LN80@Emplace_re:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0010a	51		 push	 ecx
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00111	83 c4 08	 add	 esp, 8
$LN70@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2030 :         _Mylast  = _Newvec + _Newsize;

  00114	8b 45 f4	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  00117	89 3e		 mov	 DWORD PTR [esi], edi
  00119	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]

; 849  :         }
; 850  :         _CATCH_ALL
; 851  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 852  :         _Al.deallocate(_Newvec, _Newcapacity);
; 853  :         _RERAISE;
; 854  :         _CATCH_END
; 855  : 
; 856  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 857  :         return _Newvec + _Whereoff;

  0011c	8b c3		 mov	 eax, ebx

; 2030 :         _Mylast  = _Newvec + _Newsize;

  0011e	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 2031 :         _Myend   = _Newvec + _Newcapacity;

  00121	8b 4d f8	 mov	 ecx, DWORD PTR tv607[ebp]
  00124	03 cf		 add	 ecx, edi

; 858  :     }

  00126	5f		 pop	 edi

; 2031 :         _Myend   = _Newvec + _Newcapacity;

  00127	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 858  :     }

  0012a	5e		 pop	 esi
  0012b	5b		 pop	 ebx
  0012c	8b e5		 mov	 esp, ebp
  0012e	5d		 pop	 ebp
  0012f	c2 08 00	 ret	 8
$LN77@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00132	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN96@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 825  :             _Xlength();

  00137	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCGraphicThingInstance@@V?$allocator@PAVCGraphicThingInstance@@@std@@@std@@CAXXZ ; std::vector<CGraphicThingInstance *,std::allocator<CGraphicThingInstance *> >::_Xlength
$LN97@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 71   :             _Throw_bad_array_new_length(); // multiply overflow

  0013c	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN94@Emplace_re:
  00141	cc		 int	 3
??$_Emplace_reallocate@ABQAVCGraphicThingInstance@@@?$vector@PAVCGraphicThingInstance@@V?$allocator@PAVCGraphicThingInstance@@@std@@@std@@AAEPAPAVCGraphicThingInstance@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CGraphicThingInstance *,std::allocator<CGraphicThingInstance *> >::_Emplace_reallocate<CGraphicThingInstance * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCDungeonBlock@@@?$vector@PAVCDungeonBlock@@V?$allocator@PAVCDungeonBlock@@@std@@@std@@AAEPAPAVCDungeonBlock@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
__Newsize$1$ = -12					; size = 4
tv607 = -8						; size = 4
tv590 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCDungeonBlock@@@?$vector@PAVCDungeonBlock@@V?$allocator@PAVCDungeonBlock@@@std@@@std@@AAEPAPAVCDungeonBlock@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CDungeonBlock *,std::allocator<CDungeonBlock *> >::_Emplace_reallocate<CDungeonBlock * const &>, COMDAT
; _this$ = ecx

; 812  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 813  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 814  :         _Alty& _Al        = _Getal();
; 815  :         auto& _My_data    = _Mypair._Myval2;
; 816  :         pointer& _Myfirst = _My_data._Myfirst;
; 817  :         pointer& _Mylast  = _My_data._Mylast;
; 818  : 
; 819  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 820  : 
; 821  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	2b d9		 sub	 ebx, ecx

; 822  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c1		 sub	 eax, ecx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 823  : 
; 824  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 0f 01 00
	00		 je	 $LN96@Emplace_re

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 826  :         }
; 827  : 
; 828  :         const size_type _Newsize     = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b d1		 sub	 edx, ecx

; 826  :         }
; 827  : 
; 828  :         const size_type _Newsize     = _Oldsize + 1;

  00030	89 7d f4	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 fa 02	 sar	 edx, 2

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b ca		 mov	 ecx, edx
  0003d	d1 e9		 shr	 ecx, 1
  0003f	2b c1		 sub	 eax, ecx
  00041	3b d0		 cmp	 edx, eax
  00043	76 15		 jbe	 SHORT $LN12@Emplace_re

; 1967 :             return _Max; // geometric growth would overflow

  00045	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004a	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1967 :             return _Max; // geometric growth would overflow

  0004b	89 45 f8	 mov	 DWORD PTR tv607[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00053	83 c4 04	 add	 esp, 4
  00056	8b f8		 mov	 edi, eax
  00058	eb 47		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1970 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005a	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 70   :         if (_Count > _Max_possible) {

  0005d	8b cf		 mov	 ecx, edi
  0005f	3b c7		 cmp	 eax, edi
  00061	0f 43 c8	 cmovae	 ecx, eax
  00064	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  0006a	0f 87 cc 00 00
	00		 ja	 $LN97@Emplace_re

; 72   :         }
; 73   :     }
; 74   : 
; 75   :     return _Count * _Ty_size;

  00070	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  00077	89 45 f8	 mov	 DWORD PTR tv607[ebp], eax

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0007a	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0007f	72 0d		 jb	 SHORT $LN24@Emplace_re

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00087	83 c4 04	 add	 esp, 4
  0008a	8b f8		 mov	 edi, eax
  0008c	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  0008e	85 c0		 test	 eax, eax
  00090	74 0d		 je	 SHORT $LN25@Emplace_re

; 87   :         return ::operator new(_Bytes);

  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00098	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  0009b	8b f8		 mov	 edi, eax
  0009d	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  0009f	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 836  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000a1	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000a4	8d 0c 9f	 lea	 ecx, DWORD PTR [edi+ebx*4]

; 837  :         _Constructed_first = _Newvec + _Whereoff;
; 838  : 
; 839  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000a7	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  000aa	89 4d fc	 mov	 DWORD PTR tv590[ebp], ecx
  000ad	8b 00		 mov	 eax, DWORD PTR [eax]
  000af	89 01		 mov	 DWORD PTR [ecx], eax
  000b1	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000b4	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000b6	3b d8		 cmp	 ebx, eax
  000b8	75 07		 jne	 SHORT $LN4@Emplace_re

; 845  :         } else { // provide basic guarantee

  000ba	8b 5d fc	 mov	 ebx, DWORD PTR tv590[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000bd	8b d7		 mov	 edx, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 845  :         } else { // provide basic guarantee

  000bf	eb 16		 jmp	 SHORT $LN52@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000c1	57		 push	 edi
  000c2	53		 push	 ebx
  000c3	51		 push	 ecx
  000c4	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCDungeonBlock@@PAPAV1@@std@@YAPAPAVCDungeonBlock@@PAPAV1@00@Z ; std::_Copy_memmove<CDungeonBlock * *,CDungeonBlock * *>
  000c9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000cc	8b cb		 mov	 ecx, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000ce	8b 5d fc	 mov	 ebx, DWORD PTR tv590[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000d1	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000d4	8d 53 04	 lea	 edx, DWORD PTR [ebx+4]
$LN52@Emplace_re:
  000d7	52		 push	 edx
  000d8	50		 push	 eax
  000d9	51		 push	 ecx
  000da	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCDungeonBlock@@PAPAV1@@std@@YAPAPAVCDungeonBlock@@PAPAV1@00@Z ; std::_Copy_memmove<CDungeonBlock * *,CDungeonBlock * *>

; 2023 :         if (_Myfirst) { // destroy and deallocate old array

  000df	8b 06		 mov	 eax, DWORD PTR [esi]

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000e1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2023 :         if (_Myfirst) { // destroy and deallocate old array

  000e4	85 c0		 test	 eax, eax
  000e6	74 2c		 je	 SHORT $LN70@Emplace_re

; 2024 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2025 :             _ASAN_VECTOR_REMOVE;
; 2026 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e8	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000eb	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ed	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000f0	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f6	72 12		 jb	 SHORT $LN80@Emplace_re

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f8	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000fb	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000fe	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00100	83 c0 fc	 add	 eax, -4			; fffffffcH
  00103	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00106	77 2a		 ja	 SHORT $LN77@Emplace_re

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00108	8b c2		 mov	 eax, edx
$LN80@Emplace_re:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0010a	51		 push	 ecx
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00111	83 c4 08	 add	 esp, 8
$LN70@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2030 :         _Mylast  = _Newvec + _Newsize;

  00114	8b 45 f4	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  00117	89 3e		 mov	 DWORD PTR [esi], edi
  00119	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]

; 849  :         }
; 850  :         _CATCH_ALL
; 851  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 852  :         _Al.deallocate(_Newvec, _Newcapacity);
; 853  :         _RERAISE;
; 854  :         _CATCH_END
; 855  : 
; 856  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 857  :         return _Newvec + _Whereoff;

  0011c	8b c3		 mov	 eax, ebx

; 2030 :         _Mylast  = _Newvec + _Newsize;

  0011e	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 2031 :         _Myend   = _Newvec + _Newcapacity;

  00121	8b 4d f8	 mov	 ecx, DWORD PTR tv607[ebp]
  00124	03 cf		 add	 ecx, edi

; 858  :     }

  00126	5f		 pop	 edi

; 2031 :         _Myend   = _Newvec + _Newcapacity;

  00127	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 858  :     }

  0012a	5e		 pop	 esi
  0012b	5b		 pop	 ebx
  0012c	8b e5		 mov	 esp, ebp
  0012e	5d		 pop	 ebp
  0012f	c2 08 00	 ret	 8
$LN77@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00132	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN96@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 825  :             _Xlength();

  00137	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCDungeonBlock@@V?$allocator@PAVCDungeonBlock@@@std@@@std@@CAXXZ ; std::vector<CDungeonBlock *,std::allocator<CDungeonBlock *> >::_Xlength
$LN97@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 71   :             _Throw_bad_array_new_length(); // multiply overflow

  0013c	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN94@Emplace_re:
  00141	cc		 int	 3
??$_Emplace_reallocate@ABQAVCDungeonBlock@@@?$vector@PAVCDungeonBlock@@V?$allocator@PAVCDungeonBlock@@@std@@@std@@AAEPAPAVCDungeonBlock@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CDungeonBlock *,std::allocator<CDungeonBlock *> >::_Emplace_reallocate<CDungeonBlock * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAUSAmbienceInstance@CArea@@@?$vector@PAUSAmbienceInstance@CArea@@V?$allocator@PAUSAmbienceInstance@CArea@@@std@@@std@@AAEPAPAUSAmbienceInstance@CArea@@QAPAU23@ABQAU23@@Z
_TEXT	SEGMENT
__Newsize$1$ = -12					; size = 4
tv607 = -8						; size = 4
tv590 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAUSAmbienceInstance@CArea@@@?$vector@PAUSAmbienceInstance@CArea@@V?$allocator@PAUSAmbienceInstance@CArea@@@std@@@std@@AAEPAPAUSAmbienceInstance@CArea@@QAPAU23@ABQAU23@@Z PROC ; std::vector<CArea::SAmbienceInstance *,std::allocator<CArea::SAmbienceInstance *> >::_Emplace_reallocate<CArea::SAmbienceInstance * const &>, COMDAT
; _this$ = ecx

; 812  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 813  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 814  :         _Alty& _Al        = _Getal();
; 815  :         auto& _My_data    = _Mypair._Myval2;
; 816  :         pointer& _Myfirst = _My_data._Myfirst;
; 817  :         pointer& _Mylast  = _My_data._Mylast;
; 818  : 
; 819  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 820  : 
; 821  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	2b d9		 sub	 ebx, ecx

; 822  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c1		 sub	 eax, ecx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 823  : 
; 824  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 0f 01 00
	00		 je	 $LN96@Emplace_re

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 826  :         }
; 827  : 
; 828  :         const size_type _Newsize     = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b d1		 sub	 edx, ecx

; 826  :         }
; 827  : 
; 828  :         const size_type _Newsize     = _Oldsize + 1;

  00030	89 7d f4	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 fa 02	 sar	 edx, 2

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b ca		 mov	 ecx, edx
  0003d	d1 e9		 shr	 ecx, 1
  0003f	2b c1		 sub	 eax, ecx
  00041	3b d0		 cmp	 edx, eax
  00043	76 15		 jbe	 SHORT $LN12@Emplace_re

; 1967 :             return _Max; // geometric growth would overflow

  00045	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004a	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1967 :             return _Max; // geometric growth would overflow

  0004b	89 45 f8	 mov	 DWORD PTR tv607[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00053	83 c4 04	 add	 esp, 4
  00056	8b f8		 mov	 edi, eax
  00058	eb 47		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1970 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005a	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 70   :         if (_Count > _Max_possible) {

  0005d	8b cf		 mov	 ecx, edi
  0005f	3b c7		 cmp	 eax, edi
  00061	0f 43 c8	 cmovae	 ecx, eax
  00064	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  0006a	0f 87 cc 00 00
	00		 ja	 $LN97@Emplace_re

; 72   :         }
; 73   :     }
; 74   : 
; 75   :     return _Count * _Ty_size;

  00070	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  00077	89 45 f8	 mov	 DWORD PTR tv607[ebp], eax

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0007a	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0007f	72 0d		 jb	 SHORT $LN24@Emplace_re

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00087	83 c4 04	 add	 esp, 4
  0008a	8b f8		 mov	 edi, eax
  0008c	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  0008e	85 c0		 test	 eax, eax
  00090	74 0d		 je	 SHORT $LN25@Emplace_re

; 87   :         return ::operator new(_Bytes);

  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00098	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  0009b	8b f8		 mov	 edi, eax
  0009d	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  0009f	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 836  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000a1	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000a4	8d 0c 9f	 lea	 ecx, DWORD PTR [edi+ebx*4]

; 837  :         _Constructed_first = _Newvec + _Whereoff;
; 838  : 
; 839  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000a7	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  000aa	89 4d fc	 mov	 DWORD PTR tv590[ebp], ecx
  000ad	8b 00		 mov	 eax, DWORD PTR [eax]
  000af	89 01		 mov	 DWORD PTR [ecx], eax
  000b1	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000b4	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000b6	3b d8		 cmp	 ebx, eax
  000b8	75 07		 jne	 SHORT $LN4@Emplace_re

; 845  :         } else { // provide basic guarantee

  000ba	8b 5d fc	 mov	 ebx, DWORD PTR tv590[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000bd	8b d7		 mov	 edx, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 845  :         } else { // provide basic guarantee

  000bf	eb 16		 jmp	 SHORT $LN52@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000c1	57		 push	 edi
  000c2	53		 push	 ebx
  000c3	51		 push	 ecx
  000c4	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAUSAmbienceInstance@CArea@@PAPAU12@@std@@YAPAPAUSAmbienceInstance@CArea@@PAPAU12@00@Z ; std::_Copy_memmove<CArea::SAmbienceInstance * *,CArea::SAmbienceInstance * *>
  000c9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000cc	8b cb		 mov	 ecx, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000ce	8b 5d fc	 mov	 ebx, DWORD PTR tv590[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000d1	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000d4	8d 53 04	 lea	 edx, DWORD PTR [ebx+4]
$LN52@Emplace_re:
  000d7	52		 push	 edx
  000d8	50		 push	 eax
  000d9	51		 push	 ecx
  000da	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAUSAmbienceInstance@CArea@@PAPAU12@@std@@YAPAPAUSAmbienceInstance@CArea@@PAPAU12@00@Z ; std::_Copy_memmove<CArea::SAmbienceInstance * *,CArea::SAmbienceInstance * *>

; 2023 :         if (_Myfirst) { // destroy and deallocate old array

  000df	8b 06		 mov	 eax, DWORD PTR [esi]

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000e1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2023 :         if (_Myfirst) { // destroy and deallocate old array

  000e4	85 c0		 test	 eax, eax
  000e6	74 2c		 je	 SHORT $LN70@Emplace_re

; 2024 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2025 :             _ASAN_VECTOR_REMOVE;
; 2026 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e8	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000eb	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ed	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000f0	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f6	72 12		 jb	 SHORT $LN80@Emplace_re

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f8	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000fb	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000fe	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00100	83 c0 fc	 add	 eax, -4			; fffffffcH
  00103	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00106	77 2a		 ja	 SHORT $LN77@Emplace_re

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00108	8b c2		 mov	 eax, edx
$LN80@Emplace_re:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0010a	51		 push	 ecx
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00111	83 c4 08	 add	 esp, 8
$LN70@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2030 :         _Mylast  = _Newvec + _Newsize;

  00114	8b 45 f4	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  00117	89 3e		 mov	 DWORD PTR [esi], edi
  00119	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]

; 849  :         }
; 850  :         _CATCH_ALL
; 851  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 852  :         _Al.deallocate(_Newvec, _Newcapacity);
; 853  :         _RERAISE;
; 854  :         _CATCH_END
; 855  : 
; 856  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 857  :         return _Newvec + _Whereoff;

  0011c	8b c3		 mov	 eax, ebx

; 2030 :         _Mylast  = _Newvec + _Newsize;

  0011e	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 2031 :         _Myend   = _Newvec + _Newcapacity;

  00121	8b 4d f8	 mov	 ecx, DWORD PTR tv607[ebp]
  00124	03 cf		 add	 ecx, edi

; 858  :     }

  00126	5f		 pop	 edi

; 2031 :         _Myend   = _Newvec + _Newcapacity;

  00127	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 858  :     }

  0012a	5e		 pop	 esi
  0012b	5b		 pop	 ebx
  0012c	8b e5		 mov	 esp, ebp
  0012e	5d		 pop	 ebp
  0012f	c2 08 00	 ret	 8
$LN77@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00132	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN96@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 825  :             _Xlength();

  00137	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAUSAmbienceInstance@CArea@@V?$allocator@PAUSAmbienceInstance@CArea@@@std@@@std@@CAXXZ ; std::vector<CArea::SAmbienceInstance *,std::allocator<CArea::SAmbienceInstance *> >::_Xlength
$LN97@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 71   :             _Throw_bad_array_new_length(); // multiply overflow

  0013c	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN94@Emplace_re:
  00141	cc		 int	 3
??$_Emplace_reallocate@ABQAUSAmbienceInstance@CArea@@@?$vector@PAUSAmbienceInstance@CArea@@V?$allocator@PAUSAmbienceInstance@CArea@@@std@@@std@@AAEPAPAUSAmbienceInstance@CArea@@QAPAU23@ABQAU23@@Z ENDP ; std::vector<CArea::SAmbienceInstance *,std::allocator<CArea::SAmbienceInstance *> >::_Emplace_reallocate<CArea::SAmbienceInstance * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??$_Find_lower_bound@PAVCGraphicThingInstance@@@?$_Tree@V?$_Tmap_traits@PAVCGraphicThingInstance@@KU?$less@PAVCGraphicThingInstance@@@std@@V?$allocator@U?$pair@QAVCGraphicThingInstance@@K@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@std@@@1@ABQAVCGraphicThingInstance@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@PAVCGraphicThingInstance@@@?$_Tree@V?$_Tmap_traits@PAVCGraphicThingInstance@@KU?$less@PAVCGraphicThingInstance@@@std@@V?$allocator@U?$pair@QAVCGraphicThingInstance@@K@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@std@@@1@ABQAVCGraphicThingInstance@@@Z PROC ; std::_Tree<std::_Tmap_traits<CGraphicThingInstance *,unsigned long,std::less<CGraphicThingInstance *>,std::allocator<std::pair<CGraphicThingInstance * const,unsigned long> >,0> >::_Find_lower_bound<CGraphicThingInstance *>, COMDAT
; _this$ = ecx

; 1611 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1612 :         const auto _Scary = _Get_scary();
; 1613 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000b	89 02		 mov	 DWORD PTR [edx], eax
  0000d	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00014	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1614 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1615 :         while (!_Trynode->_Isnil) {

  00017	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001b	75 28		 jne	 SHORT $LN12@Find_lower
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00020	56		 push	 esi
  00021	8b 31		 mov	 esi, DWORD PTR [ecx]
$LL2@Find_lower:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1616 :             _Result._Location._Parent = _Trynode;

  00023	89 02		 mov	 DWORD PTR [edx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  00025	39 70 10	 cmp	 DWORD PTR [eax+16], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1617 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00028	73 07		 jae	 SHORT $LN4@Find_lower

; 1618 :                 _Result._Location._Child = _Tree_child::_Right;
; 1619 :                 _Trynode                 = _Trynode->_Right;

  0002a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002d	33 c9		 xor	 ecx, ecx

; 1620 :             } else {

  0002f	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1621 :                 _Result._Location._Child = _Tree_child::_Left;
; 1622 :                 _Result._Bound           = _Trynode;

  00031	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1623 :                 _Trynode                 = _Trynode->_Left;

  00034	b9 01 00 00 00	 mov	 ecx, 1
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Find_lower:

; 1614 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1615 :         while (!_Trynode->_Isnil) {

  0003b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00042	74 df		 je	 SHORT $LL2@Find_lower
  00044	5e		 pop	 esi
$LN12@Find_lower:

; 1624 :             }
; 1625 :         }
; 1626 : 
; 1627 :         return _Result;
; 1628 :     }

  00045	8b c2		 mov	 eax, edx
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
??$_Find_lower_bound@PAVCGraphicThingInstance@@@?$_Tree@V?$_Tmap_traits@PAVCGraphicThingInstance@@KU?$less@PAVCGraphicThingInstance@@@std@@V?$allocator@U?$pair@QAVCGraphicThingInstance@@K@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@std@@@1@ABQAVCGraphicThingInstance@@@Z ENDP ; std::_Tree<std::_Tmap_traits<CGraphicThingInstance *,unsigned long,std::less<CGraphicThingInstance *>,std::allocator<std::pair<CGraphicThingInstance * const,unsigned long> >,0> >::_Find_lower_bound<CGraphicThingInstance *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??$_Emplace_reallocate@ABUSCRCWithNumber@CArea@@@?$vector@USCRCWithNumber@CArea@@V?$allocator@USCRCWithNumber@CArea@@@std@@@std@@AAEPAUSCRCWithNumber@CArea@@QAU23@ABU23@@Z
_TEXT	SEGMENT
__Newsize$1$ = -8					; size = 4
tv606 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABUSCRCWithNumber@CArea@@@?$vector@USCRCWithNumber@CArea@@V?$allocator@USCRCWithNumber@CArea@@@std@@@std@@AAEPAUSCRCWithNumber@CArea@@QAU23@ABU23@@Z PROC ; std::vector<CArea::SCRCWithNumber,std::allocator<CArea::SCRCWithNumber> >::_Emplace_reallocate<CArea::SCRCWithNumber const &>, COMDAT
; _this$ = ecx

; 812  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 813  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 814  :         _Alty& _Al        = _Getal();
; 815  :         auto& _My_data    = _Mypair._Myval2;
; 816  :         pointer& _Myfirst = _My_data._Myfirst;
; 817  :         pointer& _Mylast  = _My_data._Mylast;
; 818  : 
; 819  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 820  : 
; 821  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	2b d9		 sub	 ebx, ecx

; 822  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c1		 sub	 eax, ecx
  00017	c1 fb 03	 sar	 ebx, 3
  0001a	c1 f8 03	 sar	 eax, 3

; 823  : 
; 824  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  00022	0f 84 0d 01 00
	00		 je	 $LN96@Emplace_re

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 826  :         }
; 827  : 
; 828  :         const size_type _Newsize     = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b d1		 sub	 edx, ecx

; 826  :         }
; 827  : 
; 828  :         const size_type _Newsize     = _Oldsize + 1;

  00030	89 7d f8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 fa 03	 sar	 edx, 3

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00036	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH
  0003b	8b ca		 mov	 ecx, edx
  0003d	d1 e9		 shr	 ecx, 1
  0003f	2b c1		 sub	 eax, ecx
  00041	3b d0		 cmp	 edx, eax
  00043	76 15		 jbe	 SHORT $LN12@Emplace_re

; 1967 :             return _Max; // geometric growth would overflow

  00045	b8 f8 ff ff ff	 mov	 eax, -8			; fffffff8H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004a	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1967 :             return _Max; // geometric growth would overflow

  0004b	89 45 fc	 mov	 DWORD PTR tv606[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00053	83 c4 04	 add	 esp, 4
  00056	8b f8		 mov	 edi, eax
  00058	eb 47		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1970 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005a	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 70   :         if (_Count > _Max_possible) {

  0005d	8b cf		 mov	 ecx, edi
  0005f	3b c7		 cmp	 eax, edi
  00061	0f 43 c8	 cmovae	 ecx, eax
  00064	81 f9 ff ff ff
	1f		 cmp	 ecx, 536870911		; 1fffffffH
  0006a	0f 87 ca 00 00
	00		 ja	 $LN97@Emplace_re

; 72   :         }
; 73   :     }
; 74   : 
; 75   :     return _Count * _Ty_size;

  00070	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  00077	89 45 fc	 mov	 DWORD PTR tv606[ebp], eax

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0007a	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0007f	72 0d		 jb	 SHORT $LN24@Emplace_re

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00087	83 c4 04	 add	 esp, 4
  0008a	8b f8		 mov	 edi, eax
  0008c	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  0008e	85 c0		 test	 eax, eax
  00090	74 0d		 je	 SHORT $LN25@Emplace_re

; 87   :         return ::operator new(_Bytes);

  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00098	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  0009b	8b f8		 mov	 edi, eax
  0009d	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  0009f	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 836  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000a1	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000a4	8d 1c df	 lea	 ebx, DWORD PTR [edi+ebx*8]
  000a7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a9	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000ac	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 837  :         _Constructed_first = _Newvec + _Whereoff;
; 838  : 
; 839  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000af	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  000b2	89 0b		 mov	 DWORD PTR [ebx], ecx
  000b4	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  000b7	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000b9	3b c2		 cmp	 eax, edx
  000bb	75 04		 jne	 SHORT $LN4@Emplace_re
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000bd	8b c7		 mov	 eax, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 845  :         } else { // provide basic guarantee

  000bf	eb 14		 jmp	 SHORT $LN52@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000c1	57		 push	 edi
  000c2	50		 push	 eax
  000c3	51		 push	 ecx
  000c4	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAUSCRCWithNumber@CArea@@PAU12@@std@@YAPAUSCRCWithNumber@CArea@@PAU12@00@Z ; std::_Copy_memmove<CArea::SCRCWithNumber *,CArea::SCRCWithNumber *>
  000c9	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000cc	8d 43 08	 lea	 eax, DWORD PTR [ebx+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000cf	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  000d2	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN52@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000d5	50		 push	 eax
  000d6	52		 push	 edx
  000d7	51		 push	 ecx
  000d8	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAUSCRCWithNumber@CArea@@PAU12@@std@@YAPAUSCRCWithNumber@CArea@@PAU12@00@Z ; std::_Copy_memmove<CArea::SCRCWithNumber *,CArea::SCRCWithNumber *>

; 2023 :         if (_Myfirst) { // destroy and deallocate old array

  000dd	8b 06		 mov	 eax, DWORD PTR [esi]

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000df	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2023 :         if (_Myfirst) { // destroy and deallocate old array

  000e2	85 c0		 test	 eax, eax
  000e4	74 2c		 je	 SHORT $LN70@Emplace_re

; 2024 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2025 :             _ASAN_VECTOR_REMOVE;
; 2026 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e6	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000e9	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000eb	83 e1 f8	 and	 ecx, -8			; fffffff8H

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000ee	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f4	72 12		 jb	 SHORT $LN80@Emplace_re

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f6	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f9	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000fc	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fe	83 c0 fc	 add	 eax, -4			; fffffffcH
  00101	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00104	77 2a		 ja	 SHORT $LN77@Emplace_re

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00106	8b c2		 mov	 eax, edx
$LN80@Emplace_re:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00108	51		 push	 ecx
  00109	50		 push	 eax
  0010a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0010f	83 c4 08	 add	 esp, 8
$LN70@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2030 :         _Mylast  = _Newvec + _Newsize;

  00112	8b 45 f8	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  00115	89 3e		 mov	 DWORD PTR [esi], edi
  00117	8d 0c c7	 lea	 ecx, DWORD PTR [edi+eax*8]

; 849  :         }
; 850  :         _CATCH_ALL
; 851  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 852  :         _Al.deallocate(_Newvec, _Newcapacity);
; 853  :         _RERAISE;
; 854  :         _CATCH_END
; 855  : 
; 856  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 857  :         return _Newvec + _Whereoff;

  0011a	8b c3		 mov	 eax, ebx

; 2030 :         _Mylast  = _Newvec + _Newsize;

  0011c	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 2031 :         _Myend   = _Newvec + _Newcapacity;

  0011f	8b 4d fc	 mov	 ecx, DWORD PTR tv606[ebp]
  00122	03 cf		 add	 ecx, edi

; 858  :     }

  00124	5f		 pop	 edi

; 2031 :         _Myend   = _Newvec + _Newcapacity;

  00125	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 858  :     }

  00128	5e		 pop	 esi
  00129	5b		 pop	 ebx
  0012a	8b e5		 mov	 esp, ebp
  0012c	5d		 pop	 ebp
  0012d	c2 08 00	 ret	 8
$LN77@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00130	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN96@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 825  :             _Xlength();

  00135	e8 00 00 00 00	 call	 ?_Xlength@?$vector@USCRCWithNumber@CArea@@V?$allocator@USCRCWithNumber@CArea@@@std@@@std@@CAXXZ ; std::vector<CArea::SCRCWithNumber,std::allocator<CArea::SCRCWithNumber> >::_Xlength
$LN97@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 71   :             _Throw_bad_array_new_length(); // multiply overflow

  0013a	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN94@Emplace_re:
  0013f	cc		 int	 3
??$_Emplace_reallocate@ABUSCRCWithNumber@CArea@@@?$vector@USCRCWithNumber@CArea@@V?$allocator@USCRCWithNumber@CArea@@@std@@@std@@AAEPAUSCRCWithNumber@CArea@@QAU23@ABU23@@Z ENDP ; std::vector<CArea::SCRCWithNumber,std::allocator<CArea::SCRCWithNumber> >::_Emplace_reallocate<CArea::SCRCWithNumber const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??$_Find_lower_bound@H@?$_Tree@V?$_Tset_traits@HU?$less@H@std@@V?$allocator@H@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@HPAX@std@@@1@ABH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@H@?$_Tree@V?$_Tset_traits@HU?$less@H@std@@V?$allocator@H@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@HPAX@std@@@1@ABH@Z PROC ; std::_Tree<std::_Tset_traits<int,std::less<int>,std::allocator<int>,0> >::_Find_lower_bound<int>, COMDAT
; _this$ = ecx

; 1611 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1612 :         const auto _Scary = _Get_scary();
; 1613 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000b	89 02		 mov	 DWORD PTR [edx], eax
  0000d	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00014	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1614 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1615 :         while (!_Trynode->_Isnil) {

  00017	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001b	75 28		 jne	 SHORT $LN12@Find_lower
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00020	56		 push	 esi
  00021	8b 31		 mov	 esi, DWORD PTR [ecx]
$LL2@Find_lower:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1616 :             _Result._Location._Parent = _Trynode;

  00023	89 02		 mov	 DWORD PTR [edx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  00025	39 70 10	 cmp	 DWORD PTR [eax+16], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1617 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00028	7d 07		 jge	 SHORT $LN4@Find_lower

; 1618 :                 _Result._Location._Child = _Tree_child::_Right;
; 1619 :                 _Trynode                 = _Trynode->_Right;

  0002a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002d	33 c9		 xor	 ecx, ecx

; 1620 :             } else {

  0002f	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1621 :                 _Result._Location._Child = _Tree_child::_Left;
; 1622 :                 _Result._Bound           = _Trynode;

  00031	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1623 :                 _Trynode                 = _Trynode->_Left;

  00034	b9 01 00 00 00	 mov	 ecx, 1
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Find_lower:

; 1614 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1615 :         while (!_Trynode->_Isnil) {

  0003b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00042	74 df		 je	 SHORT $LL2@Find_lower
  00044	5e		 pop	 esi
$LN12@Find_lower:

; 1624 :             }
; 1625 :         }
; 1626 : 
; 1627 :         return _Result;
; 1628 :     }

  00045	8b c2		 mov	 eax, edx
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
??$_Find_lower_bound@H@?$_Tree@V?$_Tset_traits@HU?$less@H@std@@V?$allocator@H@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@HPAX@std@@@1@ABH@Z ENDP ; std::_Tree<std::_Tset_traits<int,std::less<int>,std::allocator<int>,0> >::_Find_lower_bound<int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@1@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >, COMDAT
; _this$ = ecx

; 744  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000d	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00011	75 34		 jne	 SHORT $LN3@Erase_tree
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR __Al$[ebp]
  00017	57		 push	 edi
$LL2@Erase_tree:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00018	ff 76 08	 push	 DWORD PTR [esi+8]
  0001b	8b c8		 mov	 ecx, eax
  0001d	53		 push	 ebx
  0001e	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 754  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00023	8b fe		 mov	 edi, esi

; 755  :     _Val         = static_cast<_Other&&>(_New_val);

  00025	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 382  :         allocator_traits<_Alloc>::destroy(_Al, _STD addressof(_Ptr->_Myval));

  00027	8d 47 10	 lea	 eax, DWORD PTR [edi+16]
  0002a	50		 push	 eax
  0002b	53		 push	 ebx
  0002c	e8 00 00 00 00	 call	 ??$destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >::destroy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00031	6a 34		 push	 52			; 00000034H
  00033	57		 push	 edi
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00039	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  0003c	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0003f	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00043	74 d3		 je	 SHORT $LL2@Erase_tree
  00045	5f		 pop	 edi
  00046	5b		 pop	 ebx
$LN3@Erase_tree:
  00047	5e		 pop	 esi

; 747  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 748  :         }
; 749  :     }

  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >, COMDAT
; _this$ = ecx

; 1156 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 265  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 34		 push	 52			; 00000034H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 1157 :             _Al.deallocate(_Ptr, 1);
; 1158 :         }
; 1159 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 1611 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1612 :         const auto _Scary = _Get_scary();
; 1613 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  0000d	89 37		 mov	 DWORD PTR [edi], esi

; 1614 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1615 :         while (!_Trynode->_Isnil) {

  0000f	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00013	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  0001a	89 47 08	 mov	 DWORD PTR [edi+8], eax
  0001d	75 32		 jne	 SHORT $LN12@Find_lower
  0001f	53		 push	 ebx
  00020	8b 5d 0c	 mov	 ebx, DWORD PTR __Keyval$[ebp]
$LL2@Find_lower:

; 1617 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00023	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  00026	89 37		 mov	 DWORD PTR [edi], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  00028	53		 push	 ebx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  0002f	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1617 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00032	84 c0		 test	 al, al
  00034	74 07		 je	 SHORT $LN4@Find_lower

; 1618 :                 _Result._Location._Child = _Tree_child::_Right;
; 1619 :                 _Trynode                 = _Trynode->_Right;

  00036	8b 76 08	 mov	 esi, DWORD PTR [esi+8]
  00039	33 c0		 xor	 eax, eax

; 1620 :             } else {

  0003b	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1621 :                 _Result._Location._Child = _Tree_child::_Left;
; 1622 :                 _Result._Bound           = _Trynode;

  0003d	89 77 08	 mov	 DWORD PTR [edi+8], esi

; 1623 :                 _Trynode                 = _Trynode->_Left;

  00040	b8 01 00 00 00	 mov	 eax, 1
  00045	8b 36		 mov	 esi, DWORD PTR [esi]
$LN5@Find_lower:

; 1614 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1615 :         while (!_Trynode->_Isnil) {

  00047	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0004a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0004e	74 d3		 je	 SHORT $LL2@Find_lower
  00050	5b		 pop	 ebx
$LN12@Find_lower:

; 1624 :             }
; 1625 :         }
; 1626 : 
; 1627 :         return _Result;
; 1628 :     }

  00051	8b c7		 mov	 eax, edi
  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5d		 pop	 ebp
  00056	c2 08 00	 ret	 8
??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCEffectInstance@@@?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@AAEPAPAVCEffectInstance@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
__Newsize$1$ = -12					; size = 4
tv607 = -8						; size = 4
tv590 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCEffectInstance@@@?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@AAEPAPAVCEffectInstance@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CEffectInstance *,std::allocator<CEffectInstance *> >::_Emplace_reallocate<CEffectInstance * const &>, COMDAT
; _this$ = ecx

; 812  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 813  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 814  :         _Alty& _Al        = _Getal();
; 815  :         auto& _My_data    = _Mypair._Myval2;
; 816  :         pointer& _Myfirst = _My_data._Myfirst;
; 817  :         pointer& _Mylast  = _My_data._Mylast;
; 818  : 
; 819  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 820  : 
; 821  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	2b d9		 sub	 ebx, ecx

; 822  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c1		 sub	 eax, ecx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 823  : 
; 824  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 0f 01 00
	00		 je	 $LN96@Emplace_re

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 826  :         }
; 827  : 
; 828  :         const size_type _Newsize     = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b d1		 sub	 edx, ecx

; 826  :         }
; 827  : 
; 828  :         const size_type _Newsize     = _Oldsize + 1;

  00030	89 7d f4	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 fa 02	 sar	 edx, 2

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b ca		 mov	 ecx, edx
  0003d	d1 e9		 shr	 ecx, 1
  0003f	2b c1		 sub	 eax, ecx
  00041	3b d0		 cmp	 edx, eax
  00043	76 15		 jbe	 SHORT $LN12@Emplace_re

; 1967 :             return _Max; // geometric growth would overflow

  00045	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004a	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1967 :             return _Max; // geometric growth would overflow

  0004b	89 45 f8	 mov	 DWORD PTR tv607[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00053	83 c4 04	 add	 esp, 4
  00056	8b f8		 mov	 edi, eax
  00058	eb 47		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1970 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005a	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 70   :         if (_Count > _Max_possible) {

  0005d	8b cf		 mov	 ecx, edi
  0005f	3b c7		 cmp	 eax, edi
  00061	0f 43 c8	 cmovae	 ecx, eax
  00064	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  0006a	0f 87 cc 00 00
	00		 ja	 $LN97@Emplace_re

; 72   :         }
; 73   :     }
; 74   : 
; 75   :     return _Count * _Ty_size;

  00070	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  00077	89 45 f8	 mov	 DWORD PTR tv607[ebp], eax

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0007a	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0007f	72 0d		 jb	 SHORT $LN24@Emplace_re

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00087	83 c4 04	 add	 esp, 4
  0008a	8b f8		 mov	 edi, eax
  0008c	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  0008e	85 c0		 test	 eax, eax
  00090	74 0d		 je	 SHORT $LN25@Emplace_re

; 87   :         return ::operator new(_Bytes);

  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00098	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  0009b	8b f8		 mov	 edi, eax
  0009d	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  0009f	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 836  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000a1	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000a4	8d 0c 9f	 lea	 ecx, DWORD PTR [edi+ebx*4]

; 837  :         _Constructed_first = _Newvec + _Whereoff;
; 838  : 
; 839  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000a7	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  000aa	89 4d fc	 mov	 DWORD PTR tv590[ebp], ecx
  000ad	8b 00		 mov	 eax, DWORD PTR [eax]
  000af	89 01		 mov	 DWORD PTR [ecx], eax
  000b1	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000b4	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000b6	3b d8		 cmp	 ebx, eax
  000b8	75 07		 jne	 SHORT $LN4@Emplace_re

; 845  :         } else { // provide basic guarantee

  000ba	8b 5d fc	 mov	 ebx, DWORD PTR tv590[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000bd	8b d7		 mov	 edx, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 845  :         } else { // provide basic guarantee

  000bf	eb 16		 jmp	 SHORT $LN52@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000c1	57		 push	 edi
  000c2	53		 push	 ebx
  000c3	51		 push	 ecx
  000c4	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCEffectInstance@@PAPAV1@@std@@YAPAPAVCEffectInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CEffectInstance * *,CEffectInstance * *>
  000c9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000cc	8b cb		 mov	 ecx, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000ce	8b 5d fc	 mov	 ebx, DWORD PTR tv590[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000d1	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000d4	8d 53 04	 lea	 edx, DWORD PTR [ebx+4]
$LN52@Emplace_re:
  000d7	52		 push	 edx
  000d8	50		 push	 eax
  000d9	51		 push	 ecx
  000da	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCEffectInstance@@PAPAV1@@std@@YAPAPAVCEffectInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CEffectInstance * *,CEffectInstance * *>

; 2023 :         if (_Myfirst) { // destroy and deallocate old array

  000df	8b 06		 mov	 eax, DWORD PTR [esi]

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000e1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2023 :         if (_Myfirst) { // destroy and deallocate old array

  000e4	85 c0		 test	 eax, eax
  000e6	74 2c		 je	 SHORT $LN70@Emplace_re

; 2024 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2025 :             _ASAN_VECTOR_REMOVE;
; 2026 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e8	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000eb	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ed	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000f0	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f6	72 12		 jb	 SHORT $LN80@Emplace_re

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f8	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000fb	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000fe	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00100	83 c0 fc	 add	 eax, -4			; fffffffcH
  00103	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00106	77 2a		 ja	 SHORT $LN77@Emplace_re

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00108	8b c2		 mov	 eax, edx
$LN80@Emplace_re:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0010a	51		 push	 ecx
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00111	83 c4 08	 add	 esp, 8
$LN70@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2030 :         _Mylast  = _Newvec + _Newsize;

  00114	8b 45 f4	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  00117	89 3e		 mov	 DWORD PTR [esi], edi
  00119	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]

; 849  :         }
; 850  :         _CATCH_ALL
; 851  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 852  :         _Al.deallocate(_Newvec, _Newcapacity);
; 853  :         _RERAISE;
; 854  :         _CATCH_END
; 855  : 
; 856  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 857  :         return _Newvec + _Whereoff;

  0011c	8b c3		 mov	 eax, ebx

; 2030 :         _Mylast  = _Newvec + _Newsize;

  0011e	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 2031 :         _Myend   = _Newvec + _Newcapacity;

  00121	8b 4d f8	 mov	 ecx, DWORD PTR tv607[ebp]
  00124	03 cf		 add	 ecx, edi

; 858  :     }

  00126	5f		 pop	 edi

; 2031 :         _Myend   = _Newvec + _Newcapacity;

  00127	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 858  :     }

  0012a	5e		 pop	 esi
  0012b	5b		 pop	 ebx
  0012c	8b e5		 mov	 esp, ebp
  0012e	5d		 pop	 ebp
  0012f	c2 08 00	 ret	 8
$LN77@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00132	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN96@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 825  :             _Xlength();

  00137	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@CAXXZ ; std::vector<CEffectInstance *,std::allocator<CEffectInstance *> >::_Xlength
$LN97@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 71   :             _Throw_bad_array_new_length(); // multiply overflow

  0013c	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN94@Emplace_re:
  00141	cc		 int	 3
??$_Emplace_reallocate@ABQAVCEffectInstance@@@?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@AAEPAPAVCEffectInstance@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CEffectInstance *,std::allocator<CEffectInstance *> >::_Emplace_reallocate<CEffectInstance * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??$_Find_lower_bound@PAUSObjectInstance@CArea@@@?$_Tree@V?$_Tset_traits@PAUSObjectInstance@CArea@@U?$less@PAUSObjectInstance@CArea@@@std@@V?$allocator@PAUSObjectInstance@CArea@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@PAUSObjectInstance@CArea@@PAX@std@@@1@ABQAUSObjectInstance@CArea@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@PAUSObjectInstance@CArea@@@?$_Tree@V?$_Tset_traits@PAUSObjectInstance@CArea@@U?$less@PAUSObjectInstance@CArea@@@std@@V?$allocator@PAUSObjectInstance@CArea@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@PAUSObjectInstance@CArea@@PAX@std@@@1@ABQAUSObjectInstance@CArea@@@Z PROC ; std::_Tree<std::_Tset_traits<CArea::SObjectInstance *,std::less<CArea::SObjectInstance *>,std::allocator<CArea::SObjectInstance *>,0> >::_Find_lower_bound<CArea::SObjectInstance *>, COMDAT
; _this$ = ecx

; 1611 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1612 :         const auto _Scary = _Get_scary();
; 1613 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000b	89 02		 mov	 DWORD PTR [edx], eax
  0000d	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00014	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1614 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1615 :         while (!_Trynode->_Isnil) {

  00017	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001b	75 28		 jne	 SHORT $LN12@Find_lower
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00020	56		 push	 esi
  00021	8b 31		 mov	 esi, DWORD PTR [ecx]
$LL2@Find_lower:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1616 :             _Result._Location._Parent = _Trynode;

  00023	89 02		 mov	 DWORD PTR [edx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  00025	39 70 10	 cmp	 DWORD PTR [eax+16], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1617 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00028	73 07		 jae	 SHORT $LN4@Find_lower

; 1618 :                 _Result._Location._Child = _Tree_child::_Right;
; 1619 :                 _Trynode                 = _Trynode->_Right;

  0002a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002d	33 c9		 xor	 ecx, ecx

; 1620 :             } else {

  0002f	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1621 :                 _Result._Location._Child = _Tree_child::_Left;
; 1622 :                 _Result._Bound           = _Trynode;

  00031	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1623 :                 _Trynode                 = _Trynode->_Left;

  00034	b9 01 00 00 00	 mov	 ecx, 1
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Find_lower:

; 1614 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1615 :         while (!_Trynode->_Isnil) {

  0003b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00042	74 df		 je	 SHORT $LL2@Find_lower
  00044	5e		 pop	 esi
$LN12@Find_lower:

; 1624 :             }
; 1625 :         }
; 1626 : 
; 1627 :         return _Result;
; 1628 :     }

  00045	8b c2		 mov	 eax, edx
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
??$_Find_lower_bound@PAUSObjectInstance@CArea@@@?$_Tree@V?$_Tset_traits@PAUSObjectInstance@CArea@@U?$less@PAUSObjectInstance@CArea@@@std@@V?$allocator@PAUSObjectInstance@CArea@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@PAUSObjectInstance@CArea@@PAX@std@@@1@ABQAUSObjectInstance@CArea@@@Z ENDP ; std::_Tree<std::_Tset_traits<CArea::SObjectInstance *,std::less<CArea::SObjectInstance *>,std::allocator<CArea::SObjectInstance *>,0> >::_Find_lower_bound<CArea::SObjectInstance *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\algorithm\string\detail\case_conv.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\extern\include\boost\algorithm\string\detail\case_conv.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\extern\include\boost\algorithm\string\detail\case_conv.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\extern\include\boost\algorithm\string\detail\case_conv.hpp
;	COMDAT ??$transform_range@V?$iterator_range@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@boost@@U?$to_lowerF@D@detail@algorithm@2@@detail@algorithm@boost@@YAXABV?$iterator_range@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@2@U?$to_lowerF@D@012@@Z
_TEXT	SEGMENT
_Ch$ = 8						; size = 1
_Input$ = 8						; size = 4
_Functor$ = 12						; size = 4
??$transform_range@V?$iterator_range@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@boost@@U?$to_lowerF@D@detail@algorithm@2@@detail@algorithm@boost@@YAXABV?$iterator_range@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@2@U?$to_lowerF@D@012@@Z PROC ; boost::algorithm::detail::transform_range<boost::iterator_range<std::_String_iterator<std::_String_val<std::_Simple_types<char> > > >,boost::algorithm::detail::to_lowerF<char> >, COMDAT

; 100  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 101  :                 std::transform( 

  00005	8b 75 0c	 mov	 esi, DWORD PTR _Functor$[ebp]
  00008	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 3443 :     const auto _ULast = _Get_unwrapped(_Last);

  00009	8b 7d 08	 mov	 edi, DWORD PTR _Input$[ebp]
  0000c	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]

; 3445 :     for (; _UFirst != _ULast; ++_UFirst, (void) ++_UDest) {

  0000f	8b 3f		 mov	 edi, DWORD PTR [edi]
  00011	3b fb		 cmp	 edi, ebx
  00013	74 18		 je	 SHORT $LN23@transform_
$LL24@transform_:

; 3446 :         *_UDest = _Func(*_UFirst);

  00015	8a 07		 mov	 al, BYTE PTR [edi]
  00017	88 45 08	 mov	 BYTE PTR _Ch$[ebp], al
; File C:\Marty 5.5\Src-Client\extern\include\boost\algorithm\string\detail\case_conv.hpp

; 46   :                         return std::tolower<CharT>( Ch, *m_Loc );

  0001a	56		 push	 esi
  0001b	ff 75 08	 push	 DWORD PTR _Ch$[ebp]
  0001e	e8 00 00 00 00	 call	 ??$tolower@D@std@@YADDABVlocale@0@@Z ; std::tolower<char>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 3446 :         *_UDest = _Func(*_UFirst);

  00023	88 07		 mov	 BYTE PTR [edi], al
; File C:\Marty 5.5\Src-Client\extern\include\boost\algorithm\string\detail\case_conv.hpp

; 46   :                         return std::tolower<CharT>( Ch, *m_Loc );

  00025	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 3445 :     for (; _UFirst != _ULast; ++_UFirst, (void) ++_UDest) {

  00028	47		 inc	 edi
  00029	3b fb		 cmp	 edi, ebx
  0002b	75 e8		 jne	 SHORT $LL24@transform_
$LN23@transform_:
  0002d	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\extern\include\boost\algorithm\string\detail\case_conv.hpp

; 106  :             }

  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
??$transform_range@V?$iterator_range@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@boost@@U?$to_lowerF@D@detail@algorithm@2@@detail@algorithm@boost@@YAXABV?$iterator_range@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@2@U?$to_lowerF@D@012@@Z ENDP ; boost::algorithm::detail::transform_range<boost::iterator_range<std::_String_iterator<std::_String_val<std::_Simple_types<char> > > >,boost::algorithm::detail::to_lowerF<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
;	COMDAT ??$_Sort_unchecked@PAUSObjectData@CArea@@UObjectDataComp@2@@std@@YAXPAUSObjectData@CArea@@0HUObjectDataComp@2@@Z
_TEXT	SEGMENT
__Val$1 = -96						; size = 48
__Val$4$ = -48						; size = 16
__Val$3$ = -32						; size = 16
__Val$2$ = -16						; size = 16
__Mid$2 = -8						; size = 8
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Sort_unchecked@PAUSObjectData@CArea@@UObjectDataComp@2@@std@@YAXPAUSObjectData@CArea@@0HUObjectDataComp@2@@Z PROC ; std::_Sort_unchecked<CArea::SObjectData *,CArea::ObjectDataComp>, COMDAT

; 8033 : _CONSTEXPR20 void _Sort_unchecked(_RanIt _First, _RanIt _Last, _Iter_diff_t<_RanIt> _Ideal, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx

; 8034 :     // order [_First, _Last)
; 8035 :     for (;;) {
; 8036 :         if (_Last - _First <= _ISORT_MAX) { // small

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  0000a	8b c3		 mov	 eax, ebx
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  00011	2b c7		 sub	 eax, edi
  00013	3d 30 06 00 00	 cmp	 eax, 1584		; 00000630H
  00018	0f 8c 92 00 00
	00		 jl	 $LN44@Sort_unche
  0001e	8b 45 14	 mov	 eax, DWORD PTR __Pred$[ebp]
  00021	8b 75 10	 mov	 esi, DWORD PTR __Ideal$[ebp]
$LL2@Sort_unche:

; 8037 :             _Insertion_sort_unchecked(_First, _Last, _Pred);
; 8038 :             return;
; 8039 :         }
; 8040 : 
; 8041 :         if (_Ideal <= 0) { // heap sort if too many divisions

  00024	50		 push	 eax
  00025	53		 push	 ebx
  00026	57		 push	 edi
  00027	85 f6		 test	 esi, esi
  00029	0f 8e ee 00 00
	00		 jle	 $LN45@Sort_unche

; 8043 :             _Sort_heap_unchecked(_First, _Last, _Pred);
; 8044 :             return;
; 8045 :         }
; 8046 : 
; 8047 :         // divide and conquer by quicksort
; 8048 :         auto _Mid = _Partition_by_median_guess_unchecked(_First, _Last, _Pred);

  0002f	8d 45 f8	 lea	 eax, DWORD PTR __Mid$2[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ??$_Partition_by_median_guess_unchecked@PAUSObjectData@CArea@@UObjectDataComp@2@@std@@YA?AU?$pair@PAUSObjectData@CArea@@PAU12@@0@PAUSObjectData@CArea@@0UObjectDataComp@3@@Z ; std::_Partition_by_median_guess_unchecked<CArea::SObjectData *,CArea::ObjectDataComp>

; 8049 : 
; 8050 :         _Ideal = (_Ideal >> 1) + (_Ideal >> 2); // allow 1.5 log2(N) divisions

  00038	8b c6		 mov	 eax, esi

; 8051 : 
; 8052 :         if (_Mid.first - _First < _Last - _Mid.second) { // loop on second half

  0003a	8b cb		 mov	 ecx, ebx
  0003c	2b 4d fc	 sub	 ecx, DWORD PTR __Mid$2[ebp+4]
  0003f	83 c4 10	 add	 esp, 16			; 00000010H
  00042	c1 f8 02	 sar	 eax, 2
  00045	d1 fe		 sar	 esi, 1
  00047	03 f0		 add	 esi, eax
  00049	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0004e	f7 e9		 imul	 ecx
  00050	8b 4d f8	 mov	 ecx, DWORD PTR __Mid$2[ebp]
  00053	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00058	c1 fa 03	 sar	 edx, 3
  0005b	2b cf		 sub	 ecx, edi
  0005d	89 75 10	 mov	 DWORD PTR __Ideal$[ebp], esi
  00060	8b f2		 mov	 esi, edx
  00062	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  00065	03 f2		 add	 esi, edx
  00067	f7 e9		 imul	 ecx
  00069	c1 fa 03	 sar	 edx, 3
  0006c	8b c2		 mov	 eax, edx
  0006e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00071	03 c2		 add	 eax, edx
  00073	3b c6		 cmp	 eax, esi
  00075	8b 45 14	 mov	 eax, DWORD PTR __Pred$[ebp]
  00078	8b 75 10	 mov	 esi, DWORD PTR __Ideal$[ebp]
  0007b	50		 push	 eax
  0007c	56		 push	 esi
  0007d	7d 0f		 jge	 SHORT $LN7@Sort_unche

; 8053 :             _Sort_unchecked(_First, _Mid.first, _Ideal, _Pred);

  0007f	8b 45 f8	 mov	 eax, DWORD PTR __Mid$2[ebp]
  00082	50		 push	 eax
  00083	57		 push	 edi
  00084	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAUSObjectData@CArea@@UObjectDataComp@2@@std@@YAXPAUSObjectData@CArea@@0HUObjectDataComp@2@@Z ; std::_Sort_unchecked<CArea::SObjectData *,CArea::ObjectDataComp>

; 8054 :             _First = _Mid.second;

  00089	8b 7d fc	 mov	 edi, DWORD PTR __Mid$2[ebp+4]

; 8055 :         } else { // loop on first half

  0008c	eb 0d		 jmp	 SHORT $LN67@Sort_unche
$LN7@Sort_unche:

; 8056 :             _Sort_unchecked(_Mid.second, _Last, _Ideal, _Pred);

  0008e	8b 45 fc	 mov	 eax, DWORD PTR __Mid$2[ebp+4]
  00091	53		 push	 ebx
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAUSObjectData@CArea@@UObjectDataComp@2@@std@@YAXPAUSObjectData@CArea@@0HUObjectDataComp@2@@Z ; std::_Sort_unchecked<CArea::SObjectData *,CArea::ObjectDataComp>

; 8057 :             _Last = _Mid.first;

  00098	8b 5d f8	 mov	 ebx, DWORD PTR __Mid$2[ebp]
$LN67@Sort_unche:

; 8034 :     // order [_First, _Last)
; 8035 :     for (;;) {
; 8036 :         if (_Last - _First <= _ISORT_MAX) { // small

  0009b	8b c3		 mov	 eax, ebx
  0009d	83 c4 10	 add	 esp, 16			; 00000010H
  000a0	2b c7		 sub	 eax, edi
  000a2	3d 30 06 00 00	 cmp	 eax, 1584		; 00000630H
  000a7	8b 45 14	 mov	 eax, DWORD PTR __Pred$[ebp]
  000aa	0f 8d 74 ff ff
	ff		 jge	 $LL2@Sort_unche
$LN44@Sort_unche:

; 7907 :     if (_First != _Last) {

  000b0	3b fb		 cmp	 edi, ebx
  000b2	0f 84 2e 01 00
	00		 je	 $LN31@Sort_unche

; 7908 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

  000b8	8d 57 30	 lea	 edx, DWORD PTR [edi+48]
  000bb	3b d3		 cmp	 edx, ebx
  000bd	0f 84 23 01 00
	00		 je	 $LN31@Sort_unche
$LL11@Sort_unche:

; 7910 :             _Iter_value_t<_BidIt> _Val = _STD move(*_Mid);

  000c3	0f 10 0a	 movups	 xmm1, XMMWORD PTR [edx]
  000c6	8b ca		 mov	 ecx, edx
  000c8	0f 10 52 10	 movups	 xmm2, XMMWORD PTR [edx+16]
  000cc	0f 10 5a 20	 movups	 xmm3, XMMWORD PTR [edx+32]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h

; 57   : 				return lhs.dwCRC < rhs.dwCRC;

  000d0	0f 28 c1	 movaps	 xmm0, xmm1
  000d3	66 0f 73 d8 0c	 psrldq	 xmm0, 12		; 0000000cH
  000d8	66 0f 7e c6	 movd	 esi, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7910 :             _Iter_value_t<_BidIt> _Val = _STD move(*_Mid);

  000dc	0f 11 4d f0	 movups	 XMMWORD PTR __Val$2$[ebp], xmm1
  000e0	0f 11 55 e0	 movups	 XMMWORD PTR __Val$3$[ebp], xmm2
  000e4	0f 11 5d d0	 movups	 XMMWORD PTR __Val$4$[ebp], xmm3
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h

; 57   : 				return lhs.dwCRC < rhs.dwCRC;

  000e8	3b 77 0c	 cmp	 esi, DWORD PTR [edi+12]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7912 :             if (_DEBUG_LT_PRED(_Pred, _Val, *_First)) { // found new earliest element, move to front

  000eb	0f 83 b7 00 00
	00		 jae	 $LN18@Sort_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 4936 :             return _Copy_backward_memmove(_First, _Last, _Dest);

  000f1	8d 72 30	 lea	 esi, DWORD PTR [edx+48]
  000f4	56		 push	 esi
  000f5	52		 push	 edx
  000f6	57		 push	 edi
  000f7	e8 00 00 00 00	 call	 ??$_Copy_backward_memmove@PAUSObjectData@CArea@@PAU12@@std@@YAPAUSObjectData@CArea@@PAU12@00@Z ; std::_Copy_backward_memmove<CArea::SObjectData *,CArea::SObjectData *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7914 :                 *_First = _STD move(_Val);

  000fc	0f 10 45 f0	 movups	 xmm0, XMMWORD PTR __Val$2$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 4936 :             return _Copy_backward_memmove(_First, _Last, _Dest);

  00100	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7914 :                 *_First = _STD move(_Val);

  00103	8b d6		 mov	 edx, esi
  00105	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0
  00108	0f 10 45 e0	 movups	 xmm0, XMMWORD PTR __Val$3$[ebp]
  0010c	0f 11 47 10	 movups	 XMMWORD PTR [edi+16], xmm0
  00110	0f 10 45 d0	 movups	 xmm0, XMMWORD PTR __Val$4$[ebp]
  00114	0f 11 47 20	 movups	 XMMWORD PTR [edi+32], xmm0

; 7915 :             } else { // look for insertion point after first

  00118	e9 c1 00 00 00	 jmp	 $LN19@Sort_unche
$LN45@Sort_unche:

; 8042 :             _Make_heap_unchecked(_First, _Last, _Pred);

  0011d	e8 00 00 00 00	 call	 ??$_Make_heap_unchecked@PAUSObjectData@CArea@@UObjectDataComp@2@@std@@YAXPAUSObjectData@CArea@@0UObjectDataComp@2@@Z ; std::_Make_heap_unchecked<CArea::SObjectData *,CArea::ObjectDataComp>

; 6818 :     for (; _Last - _First >= 2; --_Last) {

  00122	8b f3		 mov	 esi, ebx

; 8042 :             _Make_heap_unchecked(_First, _Last, _Pred);

  00124	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6818 :     for (; _Last - _First >= 2; --_Last) {

  00127	2b f7		 sub	 esi, edi
  00129	83 fe 60	 cmp	 esi, 96			; 00000060H
  0012c	0f 8c b4 00 00
	00		 jl	 $LN31@Sort_unche

; 8042 :             _Make_heap_unchecked(_First, _Last, _Pred);

  00132	83 c3 d0	 add	 ebx, -48		; ffffffd0H
$LL32@Sort_unche:

; 6474 :     if (2 <= _Last - _First) {

  00135	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  0013a	f7 e6		 mul	 esi
  0013c	8b f3		 mov	 esi, ebx
  0013e	c1 ea 05	 shr	 edx, 5
  00141	2b f7		 sub	 esi, edi
  00143	83 fa 02	 cmp	 edx, 2
  00146	7c 51		 jl	 SHORT $LN30@Sort_unche

; 6475 :         --_Last;
; 6476 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

  00148	0f 10 03	 movups	 xmm0, XMMWORD PTR [ebx]

; 6467 :     _STD _Pop_heap_hole_by_index(

  0014b	8d 45 a0	 lea	 eax, DWORD PTR __Val$1[ebp]
  0014e	ff 75 14	 push	 DWORD PTR __Pred$[ebp]

; 6476 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

  00151	0f 11 45 a0	 movups	 XMMWORD PTR __Val$1[ebp], xmm0

; 6467 :     _STD _Pop_heap_hole_by_index(

  00155	50		 push	 eax

; 6476 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

  00156	0f 10 43 10	 movups	 xmm0, XMMWORD PTR [ebx+16]

; 6467 :     _STD _Pop_heap_hole_by_index(

  0015a	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0015f	f7 ee		 imul	 esi

; 6476 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

  00161	0f 11 45 b0	 movups	 XMMWORD PTR __Val$1[ebp+16], xmm0
  00165	0f 10 43 20	 movups	 xmm0, XMMWORD PTR [ebx+32]
  00169	0f 11 45 c0	 movups	 XMMWORD PTR __Val$1[ebp+32], xmm0

; 6467 :     _STD _Pop_heap_hole_by_index(

  0016d	c1 fa 03	 sar	 edx, 3
  00170	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
  00173	8b c2		 mov	 eax, edx
  00175	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00178	0f 11 03	 movups	 XMMWORD PTR [ebx], xmm0
  0017b	03 c2		 add	 eax, edx
  0017d	0f 10 47 10	 movups	 xmm0, XMMWORD PTR [edi+16]
  00181	50		 push	 eax
  00182	6a 00		 push	 0
  00184	0f 11 43 10	 movups	 XMMWORD PTR [ebx+16], xmm0
  00188	57		 push	 edi
  00189	0f 10 47 20	 movups	 xmm0, XMMWORD PTR [edi+32]
  0018d	0f 11 43 20	 movups	 XMMWORD PTR [ebx+32], xmm0
  00191	e8 00 00 00 00	 call	 ??$_Pop_heap_hole_by_index@PAUSObjectData@CArea@@U12@UObjectDataComp@2@@std@@YAXPAUSObjectData@CArea@@HH$$QAU12@UObjectDataComp@2@@Z ; std::_Pop_heap_hole_by_index<CArea::SObjectData *,CArea::SObjectData,CArea::ObjectDataComp>
  00196	83 c4 14	 add	 esp, 20			; 00000014H
$LN30@Sort_unche:

; 6818 :     for (; _Last - _First >= 2; --_Last) {

  00199	83 eb 30	 sub	 ebx, 48			; 00000030H
  0019c	83 fe 60	 cmp	 esi, 96			; 00000060H
  0019f	7d 94		 jge	 SHORT $LL32@Sort_unche

; 8058 :         }
; 8059 :     }
; 8060 : }

  001a1	5f		 pop	 edi
  001a2	5e		 pop	 esi
  001a3	5b		 pop	 ebx
  001a4	8b e5		 mov	 esp, ebp
  001a6	5d		 pop	 ebp
  001a7	c3		 ret	 0
$LN18@Sort_unche:

; 7916 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

  001a8	8d 42 d0	 lea	 eax, DWORD PTR [edx-48]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h

; 57   : 				return lhs.dwCRC < rhs.dwCRC;

  001ab	3b 72 dc	 cmp	 esi, DWORD PTR [edx-36]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7916 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

  001ae	73 20		 jae	 SHORT $LN15@Sort_unche
$LL16@Sort_unche:

; 7917 :                     *_Hole = _STD move(*_Prev); // move hole down

  001b0	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  001b3	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  001b6	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  001ba	0f 11 41 10	 movups	 XMMWORD PTR [ecx+16], xmm0
  001be	0f 10 40 20	 movups	 xmm0, XMMWORD PTR [eax+32]
  001c2	0f 11 41 20	 movups	 XMMWORD PTR [ecx+32], xmm0
  001c6	8b c8		 mov	 ecx, eax
  001c8	83 e8 30	 sub	 eax, 48			; 00000030H
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h

; 57   : 				return lhs.dwCRC < rhs.dwCRC;

  001cb	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7916 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

  001ce	72 e0		 jb	 SHORT $LL16@Sort_unche
$LN15@Sort_unche:

; 7918 :                 }
; 7919 : 
; 7920 :                 *_Hole = _STD move(_Val); // insert element in hole

  001d0	0f 11 09	 movups	 XMMWORD PTR [ecx], xmm1
  001d3	83 c2 30	 add	 edx, 48			; 00000030H
  001d6	0f 11 51 10	 movups	 XMMWORD PTR [ecx+16], xmm2
  001da	0f 11 59 20	 movups	 XMMWORD PTR [ecx+32], xmm3
$LN19@Sort_unche:

; 7908 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

  001de	3b d3		 cmp	 edx, ebx
  001e0	0f 85 dd fe ff
	ff		 jne	 $LL11@Sort_unche
$LN31@Sort_unche:
  001e6	5f		 pop	 edi

; 8058 :         }
; 8059 :     }
; 8060 : }

  001e7	5e		 pop	 esi
  001e8	5b		 pop	 ebx
  001e9	8b e5		 mov	 esp, ebp
  001eb	5d		 pop	 ebp
  001ec	c3		 ret	 0
??$_Sort_unchecked@PAUSObjectData@CArea@@UObjectDataComp@2@@std@@YAXPAUSObjectData@CArea@@0HUObjectDataComp@2@@Z ENDP ; std::_Sort_unchecked<CArea::SObjectData *,CArea::ObjectDataComp>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
;	COMDAT ??$_Sort_unchecked@PAUSCRCWithNumber@CArea@@UCRCNumComp@2@@std@@YAXPAUSCRCWithNumber@CArea@@0HUCRCNumComp@2@@Z
_TEXT	SEGMENT
__Val$1 = -24						; size = 8
__Mid$2 = -24						; size = 8
__Val$2$ = -20						; size = 4
tv873 = -16						; size = 4
__Hole$1$ = -12						; size = 4
__Val$2$ = -8						; size = 4
__Val$1$ = -8						; size = 4
__Bottom$1$ = -4					; size = 4
__Val$1$ = -4						; size = 4
__Max_sequence_non_leaf$1$ = 8				; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Sort_unchecked@PAUSCRCWithNumber@CArea@@UCRCNumComp@2@@std@@YAXPAUSCRCWithNumber@CArea@@0HUCRCNumComp@2@@Z PROC ; std::_Sort_unchecked<CArea::SCRCWithNumber *,CArea::CRCNumComp>, COMDAT

; 8033 : _CONSTEXPR20 void _Sort_unchecked(_RanIt _First, _RanIt _Last, _Iter_diff_t<_RanIt> _Ideal, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 8034 :     // order [_First, _Last)
; 8035 :     for (;;) {
; 8036 :         if (_Last - _First <= _ISORT_MAX) { // small

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00006	83 ec 18	 sub	 esp, 24			; 00000018H
  00009	8b c2		 mov	 eax, edx
  0000b	53		 push	 ebx
  0000c	56		 push	 esi
  0000d	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00010	2b c6		 sub	 eax, esi
  00012	83 e0 f8	 and	 eax, -8			; fffffff8H
  00015	57		 push	 edi
  00016	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  0001b	7e 75		 jle	 SHORT $LN67@Sort_unche
  0001d	8b 7d 10	 mov	 edi, DWORD PTR __Ideal$[ebp]
$LL2@Sort_unche:

; 8037 :             _Insertion_sort_unchecked(_First, _Last, _Pred);
; 8038 :             return;
; 8039 :         }
; 8040 : 
; 8041 :         if (_Ideal <= 0) { // heap sort if too many divisions

  00020	85 ff		 test	 edi, edi
  00022	0f 8e b3 00 00
	00		 jle	 $LN68@Sort_unche

; 8042 :             _Make_heap_unchecked(_First, _Last, _Pred);
; 8043 :             _Sort_heap_unchecked(_First, _Last, _Pred);
; 8044 :             return;
; 8045 :         }
; 8046 : 
; 8047 :         // divide and conquer by quicksort
; 8048 :         auto _Mid = _Partition_by_median_guess_unchecked(_First, _Last, _Pred);

  00028	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  0002b	8d 45 e8	 lea	 eax, DWORD PTR __Mid$2[ebp]
  0002e	52		 push	 edx
  0002f	56		 push	 esi
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??$_Partition_by_median_guess_unchecked@PAUSCRCWithNumber@CArea@@UCRCNumComp@2@@std@@YA?AU?$pair@PAUSCRCWithNumber@CArea@@PAU12@@0@PAUSCRCWithNumber@CArea@@0UCRCNumComp@3@@Z ; std::_Partition_by_median_guess_unchecked<CArea::SCRCWithNumber *,CArea::CRCNumComp>

; 8049 : 
; 8050 :         _Ideal = (_Ideal >> 1) + (_Ideal >> 2); // allow 1.5 log2(N) divisions
; 8051 : 
; 8052 :         if (_Mid.first - _First < _Last - _Mid.second) { // loop on second half

  00036	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00039	8b c7		 mov	 eax, edi
  0003b	8b 5d ec	 mov	 ebx, DWORD PTR __Mid$2[ebp+4]
  0003e	8b ca		 mov	 ecx, edx
  00040	c1 f8 02	 sar	 eax, 2
  00043	83 c4 10	 add	 esp, 16			; 00000010H
  00046	d1 ff		 sar	 edi, 1
  00048	2b cb		 sub	 ecx, ebx
  0004a	03 f8		 add	 edi, eax
  0004c	83 e1 f8	 and	 ecx, -8			; fffffff8H
  0004f	8b 45 e8	 mov	 eax, DWORD PTR __Mid$2[ebp]
  00052	2b c6		 sub	 eax, esi
  00054	83 e0 f8	 and	 eax, -8			; fffffff8H
  00057	3b c1		 cmp	 eax, ecx
  00059	8b 45 14	 mov	 eax, DWORD PTR __Pred$[ebp]
  0005c	50		 push	 eax
  0005d	57		 push	 edi
  0005e	7d 14		 jge	 SHORT $LN7@Sort_unche

; 8053 :             _Sort_unchecked(_First, _Mid.first, _Ideal, _Pred);

  00060	8b 55 e8	 mov	 edx, DWORD PTR __Mid$2[ebp]
  00063	52		 push	 edx
  00064	56		 push	 esi
  00065	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAUSCRCWithNumber@CArea@@UCRCNumComp@2@@std@@YAXPAUSCRCWithNumber@CArea@@0HUCRCNumComp@2@@Z ; std::_Sort_unchecked<CArea::SCRCWithNumber *,CArea::CRCNumComp>

; 8054 :             _First = _Mid.second;
; 8055 :         } else { // loop on first half

  0006a	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  0006d	8b f3		 mov	 esi, ebx
  0006f	89 75 08	 mov	 DWORD PTR __First$[ebp], esi
  00072	eb 0d		 jmp	 SHORT $LN109@Sort_unche
$LN7@Sort_unche:

; 8056 :             _Sort_unchecked(_Mid.second, _Last, _Ideal, _Pred);

  00074	52		 push	 edx
  00075	53		 push	 ebx
  00076	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAUSCRCWithNumber@CArea@@UCRCNumComp@2@@std@@YAXPAUSCRCWithNumber@CArea@@0HUCRCNumComp@2@@Z ; std::_Sort_unchecked<CArea::SCRCWithNumber *,CArea::CRCNumComp>

; 8057 :             _Last = _Mid.first;

  0007b	8b 55 e8	 mov	 edx, DWORD PTR __Mid$2[ebp]
  0007e	89 55 0c	 mov	 DWORD PTR __Last$[ebp], edx
$LN109@Sort_unche:

; 8034 :     // order [_First, _Last)
; 8035 :     for (;;) {
; 8036 :         if (_Last - _First <= _ISORT_MAX) { // small

  00081	8b c2		 mov	 eax, edx
  00083	83 c4 10	 add	 esp, 16			; 00000010H
  00086	2b c6		 sub	 eax, esi
  00088	83 e0 f8	 and	 eax, -8			; fffffff8H
  0008b	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  00090	7f 8e		 jg	 SHORT $LL2@Sort_unche
$LN67@Sort_unche:

; 7907 :     if (_First != _Last) {

  00092	3b f2		 cmp	 esi, edx
  00094	0f 84 a8 01 00
	00		 je	 $LN51@Sort_unche

; 7908 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

  0009a	8d 5e 08	 lea	 ebx, DWORD PTR [esi+8]
  0009d	3b da		 cmp	 ebx, edx
  0009f	0f 84 9d 01 00
	00		 je	 $LN51@Sort_unche
$LL11@Sort_unche:

; 7909 :             _BidIt _Hole               = _Mid;
; 7910 :             _Iter_value_t<_BidIt> _Val = _STD move(*_Mid);

  000a5	8b 03		 mov	 eax, DWORD PTR [ebx]
  000a7	8b fb		 mov	 edi, ebx
  000a9	89 45 f8	 mov	 DWORD PTR __Val$2$[ebp], eax
  000ac	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  000af	89 45 fc	 mov	 DWORD PTR __Val$1$[ebp], eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h

; 190  : 				return lhs.dwNumber > rhs.dwNumber;

  000b2	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7912 :             if (_DEBUG_LT_PRED(_Pred, _Val, *_First)) { // found new earliest element, move to front

  000b5	0f 86 4e 01 00
	00		 jbe	 $LN18@Sort_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 4936 :             return _Copy_backward_memmove(_First, _Last, _Dest);

  000bb	8d 7b 08	 lea	 edi, DWORD PTR [ebx+8]
  000be	57		 push	 edi
  000bf	53		 push	 ebx
  000c0	56		 push	 esi
  000c1	e8 00 00 00 00	 call	 ??$_Copy_backward_memmove@PAUSCRCWithNumber@CArea@@PAU12@@std@@YAPAUSCRCWithNumber@CArea@@PAU12@00@Z ; std::_Copy_backward_memmove<CArea::SCRCWithNumber *,CArea::SCRCWithNumber *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7914 :                 *_First = _STD move(_Val);

  000c6	8b 4d f8	 mov	 ecx, DWORD PTR __Val$2$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 4936 :             return _Copy_backward_memmove(_First, _Last, _Dest);

  000c9	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7914 :                 *_First = _STD move(_Val);

  000cc	8b 45 fc	 mov	 eax, DWORD PTR __Val$1$[ebp]
  000cf	8b df		 mov	 ebx, edi
  000d1	89 0e		 mov	 DWORD PTR [esi], ecx
  000d3	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 7915 :             } else { // look for insertion point after first

  000d6	e9 5e 01 00 00	 jmp	 $LN19@Sort_unche
$LN68@Sort_unche:

; 6596 :     _Diff _Bottom = _Last - _First;

  000db	2b d6		 sub	 edx, esi
  000dd	8b ca		 mov	 ecx, edx
  000df	89 55 0c	 mov	 DWORD PTR __Last$[ebp], edx
  000e2	c1 f9 03	 sar	 ecx, 3

; 6597 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

  000e5	8b d9		 mov	 ebx, ecx
  000e7	89 4d fc	 mov	 DWORD PTR __Bottom$1$[ebp], ecx
  000ea	d1 fb		 sar	 ebx, 1
  000ec	85 db		 test	 ebx, ebx
  000ee	0f 8e b9 00 00
	00		 jle	 $LN31@Sort_unche
  000f4	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  000f7	89 45 f0	 mov	 DWORD PTR tv873[ebp], eax
  000fa	d1 f8		 sar	 eax, 1
  000fc	89 45 08	 mov	 DWORD PTR __Max_sequence_non_leaf$1$[ebp], eax
  000ff	90		 npad	 1
$LL30@Sort_unche:

; 6598 :         // reheap top half, bottom to top
; 6599 :         --_Hole;
; 6600 :         _Iter_value_t<_RanIt> _Val = _STD move(*(_First + _Hole));

  00100	8b 44 de f8	 mov	 eax, DWORD PTR [esi+ebx*8-8]
  00104	4b		 dec	 ebx
  00105	89 45 ec	 mov	 DWORD PTR __Val$2$[ebp], eax

; 6601 :         _STD _Pop_heap_hole_by_index(_First, _Hole, _Bottom, _STD move(_Val), _Pred);

  00108	8b d3		 mov	 edx, ebx
  0010a	89 5d f4	 mov	 DWORD PTR __Hole$1$[ebp], ebx

; 6438 :     _Diff _Idx       = _Hole;

  0010d	8b fb		 mov	 edi, ebx

; 6600 :         _Iter_value_t<_RanIt> _Val = _STD move(*(_First + _Hole));

  0010f	8b 44 de 04	 mov	 eax, DWORD PTR [esi+ebx*8+4]
  00113	89 45 f8	 mov	 DWORD PTR __Val$1$[ebp], eax

; 6443 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

  00116	8b 45 08	 mov	 eax, DWORD PTR __Max_sequence_non_leaf$1$[ebp]
  00119	3b d8		 cmp	 ebx, eax
  0011b	7d 32		 jge	 SHORT $LN36@Sort_unche
  0011d	8b d8		 mov	 ebx, eax
  0011f	90		 npad	 1
$LL35@Sort_unche:

; 6444 :         _Idx = 2 * _Idx + 2;

  00120	8d 0c 3f	 lea	 ecx, DWORD PTR [edi+edi]

; 6445 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {
; 6446 :             --_Idx;
; 6447 :         }
; 6448 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  00123	8b 44 ce 14	 mov	 eax, DWORD PTR [esi+ecx*8+20]
  00127	39 44 ce 0c	 cmp	 DWORD PTR [esi+ecx*8+12], eax
  0012b	1b c0		 sbb	 eax, eax
  0012d	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
  00130	03 f9		 add	 edi, ecx
  00132	8b 04 fe	 mov	 eax, DWORD PTR [esi+edi*8]
  00135	8b 4c fe 04	 mov	 ecx, DWORD PTR [esi+edi*8+4]
  00139	89 04 d6	 mov	 DWORD PTR [esi+edx*8], eax
  0013c	89 4c d6 04	 mov	 DWORD PTR [esi+edx*8+4], ecx

; 6449 :         _Hole             = _Idx;

  00140	8b d7		 mov	 edx, edi
  00142	3b fb		 cmp	 edi, ebx
  00144	7c da		 jl	 SHORT $LL35@Sort_unche
  00146	8b 5d f4	 mov	 ebx, DWORD PTR __Hole$1$[ebp]
  00149	8b 4d fc	 mov	 ecx, DWORD PTR __Bottom$1$[ebp]
  0014c	8b 45 08	 mov	 eax, DWORD PTR __Max_sequence_non_leaf$1$[ebp]
$LN36@Sort_unche:

; 6450 :     }
; 6451 : 
; 6452 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

  0014f	3b d0		 cmp	 edx, eax
  00151	75 17		 jne	 SHORT $LN38@Sort_unche
  00153	f6 c1 01	 test	 cl, 1
  00156	75 12		 jne	 SHORT $LN38@Sort_unche

; 6453 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

  00158	8b 44 ce f8	 mov	 eax, DWORD PTR [esi+ecx*8-8]
  0015c	8b 4c ce fc	 mov	 ecx, DWORD PTR [esi+ecx*8-4]
  00160	89 04 d6	 mov	 DWORD PTR [esi+edx*8], eax
  00163	89 4c d6 04	 mov	 DWORD PTR [esi+edx*8+4], ecx

; 6454 :         _Hole             = _Bottom - 1;

  00167	8b 55 f0	 mov	 edx, DWORD PTR tv873[ebp]
$LN38@Sort_unche:

; 6328 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

  0016a	3b da		 cmp	 ebx, edx
  0016c	7d 24		 jge	 SHORT $LN90@Sort_unche
  0016e	66 90		 npad	 2
$LL45@Sort_unche:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h

; 190  : 				return lhs.dwNumber > rhs.dwNumber;

  00170	8b 45 f8	 mov	 eax, DWORD PTR __Val$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 6327 :     for (_Diff _Idx = (_Hole - 1) >> 1; // shift for codegen

  00173	8d 7a ff	 lea	 edi, DWORD PTR [edx-1]
  00176	d1 ff		 sar	 edi, 1
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h

; 190  : 				return lhs.dwNumber > rhs.dwNumber;

  00178	39 44 fe 04	 cmp	 DWORD PTR [esi+edi*8+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 6328 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

  0017c	76 14		 jbe	 SHORT $LN90@Sort_unche

; 6329 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 6330 :         // move _Hole up to parent
; 6331 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  0017e	8b 04 fe	 mov	 eax, DWORD PTR [esi+edi*8]
  00181	8b 4c fe 04	 mov	 ecx, DWORD PTR [esi+edi*8+4]
  00185	89 04 d6	 mov	 DWORD PTR [esi+edx*8], eax
  00188	89 4c d6 04	 mov	 DWORD PTR [esi+edx*8+4], ecx

; 6332 :         _Hole             = _Idx;

  0018c	8b d7		 mov	 edx, edi
  0018e	3b df		 cmp	 ebx, edi
  00190	7c de		 jl	 SHORT $LL45@Sort_unche
$LN90@Sort_unche:

; 6333 :     }
; 6334 : 
; 6335 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

  00192	8b 45 ec	 mov	 eax, DWORD PTR __Val$2$[ebp]

; 6597 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

  00195	8b 4d fc	 mov	 ecx, DWORD PTR __Bottom$1$[ebp]

; 6335 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

  00198	89 04 d6	 mov	 DWORD PTR [esi+edx*8], eax
  0019b	8b 45 f8	 mov	 eax, DWORD PTR __Val$1$[ebp]
  0019e	89 44 d6 04	 mov	 DWORD PTR [esi+edx*8+4], eax

; 6597 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

  001a2	85 db		 test	 ebx, ebx
  001a4	0f 8f 56 ff ff
	ff		 jg	 $LL30@Sort_unche
  001aa	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
$LN31@Sort_unche:

; 6818 :     for (; _Last - _First >= 2; --_Last) {

  001ad	83 f9 02	 cmp	 ecx, 2
  001b0	0f 8c 8c 00 00
	00		 jl	 $LN51@Sort_unche
  001b6	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL52@Sort_unche:

; 6476 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

  001c0	8b 44 16 f8	 mov	 eax, DWORD PTR [esi+edx-8]

; 6467 :     _STD _Pop_heap_hole_by_index(

  001c4	8d 7a f8	 lea	 edi, DWORD PTR [edx-8]

; 6476 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

  001c7	8b 4c 16 fc	 mov	 ecx, DWORD PTR [esi+edx-4]

; 6467 :     _STD _Pop_heap_hole_by_index(

  001cb	ff 75 14	 push	 DWORD PTR __Pred$[ebp]

; 6476 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

  001ce	89 45 e8	 mov	 DWORD PTR __Val$1[ebp], eax

; 6465 :     *_Dest      = _STD move(*_First);

  001d1	8b 06		 mov	 eax, DWORD PTR [esi]

; 6476 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

  001d3	89 4d ec	 mov	 DWORD PTR __Val$1[ebp+4], ecx

; 6465 :     *_Dest      = _STD move(*_First);

  001d6	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  001d9	89 44 16 f8	 mov	 DWORD PTR [esi+edx-8], eax

; 6466 :     using _Diff = _Iter_diff_t<_RanIt>;
; 6467 :     _STD _Pop_heap_hole_by_index(

  001dd	8d 45 e8	 lea	 eax, DWORD PTR __Val$1[ebp]
  001e0	50		 push	 eax
  001e1	8b c7		 mov	 eax, edi
  001e3	89 4c 16 fc	 mov	 DWORD PTR [esi+edx-4], ecx
  001e7	c1 f8 03	 sar	 eax, 3
  001ea	50		 push	 eax
  001eb	6a 00		 push	 0
  001ed	56		 push	 esi
  001ee	e8 00 00 00 00	 call	 ??$_Pop_heap_hole_by_index@PAUSCRCWithNumber@CArea@@U12@UCRCNumComp@2@@std@@YAXPAUSCRCWithNumber@CArea@@HH$$QAU12@UCRCNumComp@2@@Z ; std::_Pop_heap_hole_by_index<CArea::SCRCWithNumber *,CArea::SCRCWithNumber,CArea::CRCNumComp>

; 6818 :     for (; _Last - _First >= 2; --_Last) {

  001f3	8b d7		 mov	 edx, edi

; 6467 :     _STD _Pop_heap_hole_by_index(

  001f5	83 c4 14	 add	 esp, 20			; 00000014H

; 6818 :     for (; _Last - _First >= 2; --_Last) {

  001f8	8b c2		 mov	 eax, edx
  001fa	83 e0 f8	 and	 eax, -8			; fffffff8H
  001fd	83 f8 10	 cmp	 eax, 16			; 00000010H
  00200	7d be		 jge	 SHORT $LL52@Sort_unche

; 8058 :         }
; 8059 :     }
; 8060 : }

  00202	5f		 pop	 edi
  00203	5e		 pop	 esi
  00204	5b		 pop	 ebx
  00205	8b e5		 mov	 esp, ebp
  00207	5d		 pop	 ebp
  00208	c3		 ret	 0
$LN18@Sort_unche:

; 7916 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

  00209	8d 53 f8	 lea	 edx, DWORD PTR [ebx-8]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h

; 190  : 				return lhs.dwNumber > rhs.dwNumber;

  0020c	3b 43 fc	 cmp	 eax, DWORD PTR [ebx-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7916 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

  0020f	76 1d		 jbe	 SHORT $LN15@Sort_unche
  00211	8b 75 fc	 mov	 esi, DWORD PTR __Val$1$[ebp]
$LL16@Sort_unche:

; 7917 :                     *_Hole = _STD move(*_Prev); // move hole down

  00214	8b 02		 mov	 eax, DWORD PTR [edx]
  00216	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00219	89 07		 mov	 DWORD PTR [edi], eax
  0021b	89 4f 04	 mov	 DWORD PTR [edi+4], ecx
  0021e	8b fa		 mov	 edi, edx
  00220	83 ea 08	 sub	 edx, 8
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h

; 190  : 				return lhs.dwNumber > rhs.dwNumber;

  00223	3b 72 04	 cmp	 esi, DWORD PTR [edx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7916 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

  00226	77 ec		 ja	 SHORT $LL16@Sort_unche
  00228	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0022b	8b 45 fc	 mov	 eax, DWORD PTR __Val$1$[ebp]
$LN15@Sort_unche:

; 7918 :                 }
; 7919 : 
; 7920 :                 *_Hole = _STD move(_Val); // insert element in hole

  0022e	8b 4d f8	 mov	 ecx, DWORD PTR __Val$2$[ebp]
  00231	83 c3 08	 add	 ebx, 8
  00234	89 0f		 mov	 DWORD PTR [edi], ecx
  00236	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN19@Sort_unche:

; 7908 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

  00239	3b 5d 0c	 cmp	 ebx, DWORD PTR __Last$[ebp]
  0023c	0f 85 63 fe ff
	ff		 jne	 $LL11@Sort_unche
$LN51@Sort_unche:
  00242	5f		 pop	 edi

; 8058 :         }
; 8059 :     }
; 8060 : }

  00243	5e		 pop	 esi
  00244	5b		 pop	 ebx
  00245	8b e5		 mov	 esp, ebp
  00247	5d		 pop	 ebp
  00248	c3		 ret	 0
??$_Sort_unchecked@PAUSCRCWithNumber@CArea@@UCRCNumComp@2@@std@@YAXPAUSCRCWithNumber@CArea@@0HUCRCNumComp@2@@Z ENDP ; std::_Sort_unchecked<CArea::SCRCWithNumber *,CArea::CRCNumComp>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
;	COMDAT ??$_Sort_unchecked@PAPAVCEffectInstance@@UCArea_LessEffectInstancePtrRenderOrder@@@std@@YAXPAPAVCEffectInstance@@0HUCArea_LessEffectInstancePtrRenderOrder@@@Z
_TEXT	SEGMENT
__Mid$1 = -20						; size = 8
tv753 = -16						; size = 4
__Max_sequence_non_leaf$1$ = -12			; size = 4
__Mid$1$ = -12						; size = 4
__Val$1$ = -8						; size = 4
__Hole$1$ = -8						; size = 4
__Bottom$1$ = -4					; size = 4
__Val$1$ = -4						; size = 4
__Hole$1$ = 8						; size = 4
__First$ = 8						; size = 4
__Val$2 = 12						; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Sort_unchecked@PAPAVCEffectInstance@@UCArea_LessEffectInstancePtrRenderOrder@@@std@@YAXPAPAVCEffectInstance@@0HUCArea_LessEffectInstancePtrRenderOrder@@@Z PROC ; std::_Sort_unchecked<CEffectInstance * *,CArea_LessEffectInstancePtrRenderOrder>, COMDAT

; 8033 : _CONSTEXPR20 void _Sort_unchecked(_RanIt _First, _RanIt _Last, _Iter_diff_t<_RanIt> _Ideal, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	53		 push	 ebx

; 8034 :     // order [_First, _Last)
; 8035 :     for (;;) {
; 8036 :         if (_Last - _First <= _ISORT_MAX) { // small

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  0000a	8b c3		 mov	 eax, ebx
  0000c	56		 push	 esi
  0000d	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00010	2b c6		 sub	 eax, esi
  00012	83 e0 fc	 and	 eax, -4			; fffffffcH
  00015	57		 push	 edi
  00016	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  0001b	7e 74		 jle	 SHORT $LN67@Sort_unche
  0001d	8b 55 14	 mov	 edx, DWORD PTR __Pred$[ebp]
  00020	8b 7d 10	 mov	 edi, DWORD PTR __Ideal$[ebp]
$LL2@Sort_unche:

; 8037 :             _Insertion_sort_unchecked(_First, _Last, _Pred);
; 8038 :             return;
; 8039 :         }
; 8040 : 
; 8041 :         if (_Ideal <= 0) { // heap sort if too many divisions

  00023	85 ff		 test	 edi, edi
  00025	0f 8e b3 00 00
	00		 jle	 $LN68@Sort_unche

; 8042 :             _Make_heap_unchecked(_First, _Last, _Pred);
; 8043 :             _Sort_heap_unchecked(_First, _Last, _Pred);
; 8044 :             return;
; 8045 :         }
; 8046 : 
; 8047 :         // divide and conquer by quicksort
; 8048 :         auto _Mid = _Partition_by_median_guess_unchecked(_First, _Last, _Pred);

  0002b	52		 push	 edx
  0002c	53		 push	 ebx
  0002d	8d 45 ec	 lea	 eax, DWORD PTR __Mid$1[ebp]
  00030	56		 push	 esi
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ??$_Partition_by_median_guess_unchecked@PAPAVCEffectInstance@@UCArea_LessEffectInstancePtrRenderOrder@@@std@@YA?AU?$pair@PAPAVCEffectInstance@@PAPAV1@@0@PAPAVCEffectInstance@@0UCArea_LessEffectInstancePtrRenderOrder@@@Z ; std::_Partition_by_median_guess_unchecked<CEffectInstance * *,CArea_LessEffectInstancePtrRenderOrder>

; 8049 : 
; 8050 :         _Ideal = (_Ideal >> 1) + (_Ideal >> 2); // allow 1.5 log2(N) divisions
; 8051 : 
; 8052 :         if (_Mid.first - _First < _Last - _Mid.second) { // loop on second half

  00037	8b 55 f0	 mov	 edx, DWORD PTR __Mid$1[ebp+4]
  0003a	8b c7		 mov	 eax, edi
  0003c	c1 f8 02	 sar	 eax, 2
  0003f	8b cb		 mov	 ecx, ebx
  00041	d1 ff		 sar	 edi, 1
  00043	83 c4 10	 add	 esp, 16			; 00000010H
  00046	03 f8		 add	 edi, eax
  00048	2b ca		 sub	 ecx, edx
  0004a	8b 45 ec	 mov	 eax, DWORD PTR __Mid$1[ebp]
  0004d	83 e1 fc	 and	 ecx, -4			; fffffffcH
  00050	2b c6		 sub	 eax, esi
  00052	83 e0 fc	 and	 eax, -4			; fffffffcH
  00055	3b c1		 cmp	 eax, ecx
  00057	8b 45 14	 mov	 eax, DWORD PTR __Pred$[ebp]
  0005a	50		 push	 eax
  0005b	57		 push	 edi
  0005c	7d 12		 jge	 SHORT $LN7@Sort_unche

; 8053 :             _Sort_unchecked(_First, _Mid.first, _Ideal, _Pred);

  0005e	8b 45 ec	 mov	 eax, DWORD PTR __Mid$1[ebp]
  00061	50		 push	 eax
  00062	56		 push	 esi
  00063	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAPAVCEffectInstance@@UCArea_LessEffectInstancePtrRenderOrder@@@std@@YAXPAPAVCEffectInstance@@0HUCArea_LessEffectInstancePtrRenderOrder@@@Z ; std::_Sort_unchecked<CEffectInstance * *,CArea_LessEffectInstancePtrRenderOrder>

; 8054 :             _First = _Mid.second;

  00068	8b 75 f0	 mov	 esi, DWORD PTR __Mid$1[ebp+4]
  0006b	89 75 08	 mov	 DWORD PTR __First$[ebp], esi

; 8055 :         } else { // loop on first half

  0006e	eb 0d		 jmp	 SHORT $LN110@Sort_unche
$LN7@Sort_unche:

; 8056 :             _Sort_unchecked(_Mid.second, _Last, _Ideal, _Pred);

  00070	53		 push	 ebx
  00071	52		 push	 edx
  00072	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAPAVCEffectInstance@@UCArea_LessEffectInstancePtrRenderOrder@@@std@@YAXPAPAVCEffectInstance@@0HUCArea_LessEffectInstancePtrRenderOrder@@@Z ; std::_Sort_unchecked<CEffectInstance * *,CArea_LessEffectInstancePtrRenderOrder>

; 8057 :             _Last = _Mid.first;

  00077	8b 5d ec	 mov	 ebx, DWORD PTR __Mid$1[ebp]
  0007a	89 5d 0c	 mov	 DWORD PTR __Last$[ebp], ebx
$LN110@Sort_unche:

; 8034 :     // order [_First, _Last)
; 8035 :     for (;;) {
; 8036 :         if (_Last - _First <= _ISORT_MAX) { // small

  0007d	8b 55 14	 mov	 edx, DWORD PTR __Pred$[ebp]
  00080	8b c3		 mov	 eax, ebx
  00082	2b c6		 sub	 eax, esi
  00084	83 c4 10	 add	 esp, 16			; 00000010H
  00087	83 e0 fc	 and	 eax, -4			; fffffffcH
  0008a	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  0008f	7f 92		 jg	 SHORT $LL2@Sort_unche
$LN67@Sort_unche:

; 7907 :     if (_First != _Last) {

  00091	3b f3		 cmp	 esi, ebx
  00093	0f 84 9e 01 00
	00		 je	 $LN51@Sort_unche

; 7908 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

  00099	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  0009c	89 5d f4	 mov	 DWORD PTR __Mid$1$[ebp], ebx
  0009f	3b 5d 0c	 cmp	 ebx, DWORD PTR __Last$[ebp]
  000a2	0f 84 8f 01 00
	00		 je	 $LN51@Sort_unche
$LL11@Sort_unche:

; 7910 :             _Iter_value_t<_BidIt> _Val = _STD move(*_Mid);

  000a8	8b 03		 mov	 eax, DWORD PTR [ebx]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 120  : 		return pkLeft->LessRenderOrder(pkRight);

  000aa	8b c8		 mov	 ecx, eax
  000ac	ff 36		 push	 DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7909 :             _BidIt _Hole               = _Mid;

  000ae	89 5d f8	 mov	 DWORD PTR __Hole$1$[ebp], ebx

; 7910 :             _Iter_value_t<_BidIt> _Val = _STD move(*_Mid);

  000b1	89 45 fc	 mov	 DWORD PTR __Val$1$[ebp], eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 120  : 		return pkLeft->LessRenderOrder(pkRight);

  000b4	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7912 :             if (_DEBUG_LT_PRED(_Pred, _Val, *_First)) { // found new earliest element, move to front

  000b9	84 c0		 test	 al, al
  000bb	0f 84 20 01 00
	00		 je	 $LN18@Sort_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 4936 :             return _Copy_backward_memmove(_First, _Last, _Dest);

  000c1	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
  000c4	57		 push	 edi
  000c5	53		 push	 ebx
  000c6	56		 push	 esi
  000c7	e8 00 00 00 00	 call	 ??$_Copy_backward_memmove@PAPAVCEffectInstance@@PAPAV1@@std@@YAPAPAVCEffectInstance@@PAPAV1@00@Z ; std::_Copy_backward_memmove<CEffectInstance * *,CEffectInstance * *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7914 :                 *_First = _STD move(_Val);

  000cc	8b 4d fc	 mov	 ecx, DWORD PTR __Val$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 4936 :             return _Copy_backward_memmove(_First, _Last, _Dest);

  000cf	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7914 :                 *_First = _STD move(_Val);

  000d2	89 0e		 mov	 DWORD PTR [esi], ecx
  000d4	8b df		 mov	 ebx, edi
  000d6	89 7d f4	 mov	 DWORD PTR __Mid$1$[ebp], edi

; 7915 :             } else { // look for insertion point after first

  000d9	e9 50 01 00 00	 jmp	 $LN19@Sort_unche
$LN68@Sort_unche:

; 6596 :     _Diff _Bottom = _Last - _First;

  000de	2b de		 sub	 ebx, esi
  000e0	8b c3		 mov	 eax, ebx
  000e2	89 5d 0c	 mov	 DWORD PTR __Last$[ebp], ebx
  000e5	c1 f8 02	 sar	 eax, 2

; 6597 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

  000e8	8b c8		 mov	 ecx, eax
  000ea	89 45 fc	 mov	 DWORD PTR __Bottom$1$[ebp], eax
  000ed	d1 f9		 sar	 ecx, 1
  000ef	85 c9		 test	 ecx, ecx
  000f1	0f 8e a6 00 00
	00		 jle	 $LN31@Sort_unche
  000f7	48		 dec	 eax
  000f8	8b f8		 mov	 edi, eax
  000fa	89 45 f0	 mov	 DWORD PTR tv753[ebp], eax
  000fd	d1 ff		 sar	 edi, 1
  000ff	89 7d f4	 mov	 DWORD PTR __Max_sequence_non_leaf$1$[ebp], edi
$LL30@Sort_unche:

; 6598 :         // reheap top half, bottom to top
; 6599 :         --_Hole;
; 6600 :         _Iter_value_t<_RanIt> _Val = _STD move(*(_First + _Hole));

  00102	8b 44 8e fc	 mov	 eax, DWORD PTR [esi+ecx*4-4]
  00106	49		 dec	 ecx
  00107	89 4d 08	 mov	 DWORD PTR __Hole$1$[ebp], ecx

; 6601 :         _STD _Pop_heap_hole_by_index(_First, _Hole, _Bottom, _STD move(_Val), _Pred);

  0010a	8b d9		 mov	 ebx, ecx
  0010c	89 45 f8	 mov	 DWORD PTR __Val$1$[ebp], eax

; 6438 :     _Diff _Idx       = _Hole;

  0010f	8b d1		 mov	 edx, ecx

; 6439 : 
; 6440 :     // Check whether _Idx can have a child before calculating that child's index, since
; 6441 :     // calculating the child's index can trigger integer overflows
; 6442 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen
; 6443 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

  00111	3b cf		 cmp	 ecx, edi
  00113	7d 2d		 jge	 SHORT $LN36@Sort_unche
$LL35@Sort_unche:

; 6444 :         _Idx = 2 * _Idx + 2;

  00115	8d 3c 12	 lea	 edi, DWORD PTR [edx+edx]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 120  : 		return pkLeft->LessRenderOrder(pkRight);

  00118	ff 74 be 04	 push	 DWORD PTR [esi+edi*4+4]
  0011c	8b 4c be 08	 mov	 ecx, DWORD PTR [esi+edi*4+8]
  00120	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 6448 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  00125	0f b6 c0	 movzx	 eax, al
  00128	8d 57 01	 lea	 edx, DWORD PTR [edi+1]
  0012b	8b 7d f4	 mov	 edi, DWORD PTR __Max_sequence_non_leaf$1$[ebp]
  0012e	83 f0 01	 xor	 eax, 1
  00131	03 d0		 add	 edx, eax
  00133	8b 04 96	 mov	 eax, DWORD PTR [esi+edx*4]
  00136	89 04 9e	 mov	 DWORD PTR [esi+ebx*4], eax

; 6449 :         _Hole             = _Idx;

  00139	8b da		 mov	 ebx, edx
  0013b	3b d7		 cmp	 edx, edi
  0013d	7c d6		 jl	 SHORT $LL35@Sort_unche
  0013f	8b 4d 08	 mov	 ecx, DWORD PTR __Hole$1$[ebp]
$LN36@Sort_unche:

; 6450 :     }
; 6451 : 
; 6452 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

  00142	3b df		 cmp	 ebx, edi
  00144	75 11		 jne	 SHORT $LN38@Sort_unche
  00146	8b 45 fc	 mov	 eax, DWORD PTR __Bottom$1$[ebp]
  00149	a8 01		 test	 al, 1
  0014b	75 0a		 jne	 SHORT $LN38@Sort_unche

; 6453 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

  0014d	8b 44 86 fc	 mov	 eax, DWORD PTR [esi+eax*4-4]
  00151	89 04 9e	 mov	 DWORD PTR [esi+ebx*4], eax

; 6454 :         _Hole             = _Bottom - 1;

  00154	8b 5d f0	 mov	 ebx, DWORD PTR tv753[ebp]
$LN38@Sort_unche:

; 6328 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

  00157	3b cb		 cmp	 ecx, ebx
  00159	7d 2b		 jge	 SHORT $LN44@Sort_unche
  0015b	0f 1f 44 00 00	 npad	 5
$LL45@Sort_unche:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 120  : 		return pkLeft->LessRenderOrder(pkRight);

  00160	ff 75 f8	 push	 DWORD PTR __Val$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 6327 :     for (_Diff _Idx = (_Hole - 1) >> 1; // shift for codegen

  00163	8d 7b ff	 lea	 edi, DWORD PTR [ebx-1]
  00166	d1 ff		 sar	 edi, 1
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 120  : 		return pkLeft->LessRenderOrder(pkRight);

  00168	8b 0c be	 mov	 ecx, DWORD PTR [esi+edi*4]
  0016b	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 6328 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

  00170	8b 4d 08	 mov	 ecx, DWORD PTR __Hole$1$[ebp]
  00173	84 c0		 test	 al, al
  00175	74 0c		 je	 SHORT $LN90@Sort_unche

; 6329 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 6330 :         // move _Hole up to parent
; 6331 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  00177	8b 04 be	 mov	 eax, DWORD PTR [esi+edi*4]
  0017a	89 04 9e	 mov	 DWORD PTR [esi+ebx*4], eax

; 6332 :         _Hole             = _Idx;

  0017d	8b df		 mov	 ebx, edi
  0017f	3b cf		 cmp	 ecx, edi
  00181	7c dd		 jl	 SHORT $LL45@Sort_unche
$LN90@Sort_unche:
  00183	8b 7d f4	 mov	 edi, DWORD PTR __Max_sequence_non_leaf$1$[ebp]
$LN44@Sort_unche:

; 6333 :     }
; 6334 : 
; 6335 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

  00186	8b 45 f8	 mov	 eax, DWORD PTR __Val$1$[ebp]
  00189	89 04 9e	 mov	 DWORD PTR [esi+ebx*4], eax

; 6597 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

  0018c	85 c9		 test	 ecx, ecx
  0018e	0f 8f 6e ff ff
	ff		 jg	 $LL30@Sort_unche
  00194	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  00197	8b 55 14	 mov	 edx, DWORD PTR __Pred$[ebp]
  0019a	8b 45 fc	 mov	 eax, DWORD PTR __Bottom$1$[ebp]
$LN31@Sort_unche:

; 6818 :     for (; _Last - _First >= 2; --_Last) {

  0019d	83 f8 02	 cmp	 eax, 2
  001a0	0f 8c 91 00 00
	00		 jl	 $LN51@Sort_unche
$LL52@Sort_unche:

; 6476 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

  001a6	8b 44 1e fc	 mov	 eax, DWORD PTR [esi+ebx-4]
  001aa	89 45 0c	 mov	 DWORD PTR __Val$2[ebp], eax

; 6465 :     *_Dest      = _STD move(*_First);

  001ad	8b 06		 mov	 eax, DWORD PTR [esi]
  001af	89 44 1e fc	 mov	 DWORD PTR [esi+ebx-4], eax

; 6466 :     using _Diff = _Iter_diff_t<_RanIt>;
; 6467 :     _STD _Pop_heap_hole_by_index(

  001b3	8d 45 0c	 lea	 eax, DWORD PTR __Val$2[ebp]
  001b6	52		 push	 edx
  001b7	50		 push	 eax
  001b8	8d 43 fc	 lea	 eax, DWORD PTR [ebx-4]
  001bb	c1 f8 02	 sar	 eax, 2
  001be	50		 push	 eax
  001bf	6a 00		 push	 0
  001c1	56		 push	 esi
  001c2	e8 00 00 00 00	 call	 ??$_Pop_heap_hole_by_index@PAPAVCEffectInstance@@PAV1@UCArea_LessEffectInstancePtrRenderOrder@@@std@@YAXPAPAVCEffectInstance@@HH$$QAPAV1@UCArea_LessEffectInstancePtrRenderOrder@@@Z ; std::_Pop_heap_hole_by_index<CEffectInstance * *,CEffectInstance *,CArea_LessEffectInstancePtrRenderOrder>

; 6818 :     for (; _Last - _First >= 2; --_Last) {

  001c7	8b 55 14	 mov	 edx, DWORD PTR __Pred$[ebp]
  001ca	83 c3 fc	 add	 ebx, -4			; fffffffcH
  001cd	8b c3		 mov	 eax, ebx

; 6467 :     _STD _Pop_heap_hole_by_index(

  001cf	83 c4 14	 add	 esp, 20			; 00000014H

; 6818 :     for (; _Last - _First >= 2; --_Last) {

  001d2	83 e0 fc	 and	 eax, -4			; fffffffcH
  001d5	83 f8 08	 cmp	 eax, 8
  001d8	7d cc		 jge	 SHORT $LL52@Sort_unche

; 8058 :         }
; 8059 :     }
; 8060 : }

  001da	5f		 pop	 edi
  001db	5e		 pop	 esi
  001dc	5b		 pop	 ebx
  001dd	8b e5		 mov	 esp, ebp
  001df	5d		 pop	 ebp
  001e0	c3		 ret	 0
$LN18@Sort_unche:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 120  : 		return pkLeft->LessRenderOrder(pkRight);

  001e1	ff 73 fc	 push	 DWORD PTR [ebx-4]
  001e4	8b 4d fc	 mov	 ecx, DWORD PTR __Val$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7916 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

  001e7	8d 7b fc	 lea	 edi, DWORD PTR [ebx-4]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 120  : 		return pkLeft->LessRenderOrder(pkRight);

  001ea	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7916 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

  001ef	84 c0		 test	 al, al
  001f1	74 2d		 je	 SHORT $LN15@Sort_unche
  001f3	8b 75 f8	 mov	 esi, DWORD PTR __Hole$1$[ebp]
  001f6	8b 5d fc	 mov	 ebx, DWORD PTR __Val$1$[ebp]
  001f9	0f 1f 80 00 00
	00 00		 npad	 7
$LL16@Sort_unche:

; 7917 :                     *_Hole = _STD move(*_Prev); // move hole down

  00200	8b 07		 mov	 eax, DWORD PTR [edi]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 120  : 		return pkLeft->LessRenderOrder(pkRight);

  00202	8b cb		 mov	 ecx, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7917 :                     *_Hole = _STD move(*_Prev); // move hole down

  00204	89 06		 mov	 DWORD PTR [esi], eax
  00206	8b f7		 mov	 esi, edi
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 120  : 		return pkLeft->LessRenderOrder(pkRight);

  00208	ff 77 fc	 push	 DWORD PTR [edi-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7916 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

  0020b	83 ef 04	 sub	 edi, 4
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 120  : 		return pkLeft->LessRenderOrder(pkRight);

  0020e	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 7916 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

  00213	84 c0		 test	 al, al
  00215	75 e9		 jne	 SHORT $LL16@Sort_unche
  00217	8b 5d f4	 mov	 ebx, DWORD PTR __Mid$1$[ebp]
  0021a	89 75 f8	 mov	 DWORD PTR __Hole$1$[ebp], esi
  0021d	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
$LN15@Sort_unche:

; 7918 :                 }
; 7919 : 
; 7920 :                 *_Hole = _STD move(_Val); // insert element in hole

  00220	8b 45 f8	 mov	 eax, DWORD PTR __Hole$1$[ebp]
  00223	83 c3 04	 add	 ebx, 4
  00226	8b 4d fc	 mov	 ecx, DWORD PTR __Val$1$[ebp]
  00229	89 5d f4	 mov	 DWORD PTR __Mid$1$[ebp], ebx
  0022c	89 08		 mov	 DWORD PTR [eax], ecx
$LN19@Sort_unche:

; 7908 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

  0022e	3b 5d 0c	 cmp	 ebx, DWORD PTR __Last$[ebp]
  00231	0f 85 71 fe ff
	ff		 jne	 $LL11@Sort_unche
$LN51@Sort_unche:
  00237	5f		 pop	 edi

; 8058 :         }
; 8059 :     }
; 8060 : }

  00238	5e		 pop	 esi
  00239	5b		 pop	 ebx
  0023a	8b e5		 mov	 esp, ebp
  0023c	5d		 pop	 ebp
  0023d	c3		 ret	 0
??$_Sort_unchecked@PAPAVCEffectInstance@@UCArea_LessEffectInstancePtrRenderOrder@@@std@@YAXPAPAVCEffectInstance@@0HUCArea_LessEffectInstancePtrRenderOrder@@@Z ENDP ; std::_Sort_unchecked<CEffectInstance * *,CArea_LessEffectInstancePtrRenderOrder>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@KAXPAVCHeaderDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@KAXPAVCHeaderDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@KAXPAVCHeaderDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN24@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN24@CDynamicPo:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN27@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN27@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN33@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN49@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN49@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2051 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN33@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN58@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN74@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN74@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2051 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN58@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 142  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN71@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN92@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@KAXPAVCNullDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@KAXPAVCNullDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@KAXPAVCNullDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN24@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN24@CDynamicPo:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN27@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN27@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN33@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN49@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN49@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2051 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN33@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN58@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN74@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN74@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2051 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN58@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 142  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN71@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN92@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN24@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN24@CDynamicPo:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN27@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN27@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN33@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN49@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN49@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2051 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN33@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN58@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN74@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN74@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2051 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN58@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 142  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN71@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN92@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN24@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN24@CDynamicPo:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN27@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN27@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN33@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN49@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN49@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2051 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN33@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN58@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN74@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN74@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2051 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN58@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 142  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN71@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN92@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN24@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN24@CDynamicPo:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN27@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN27@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN33@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN49@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN49@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2051 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN33@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN58@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN74@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN74@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2051 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN58@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 142  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN71@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN92@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@KAXPAVCAirResistanceDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@KAXPAVCAirResistanceDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@KAXPAVCAirResistanceDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN24@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN24@CDynamicPo:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN27@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN27@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN33@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN49@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN49@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2051 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN33@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN58@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN74@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN74@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2051 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN58@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 142  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN71@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN92@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@KAXPAVCGravityDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@KAXPAVCGravityDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@KAXPAVCGravityDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN24@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN24@CDynamicPo:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN27@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN27@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN33@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN49@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN49@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2051 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN33@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN58@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN74@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN74@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2051 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN58@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 142  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN71@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN92@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@KAXPAVCRotationDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@KAXPAVCRotationDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@KAXPAVCRotationDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN24@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN24@CDynamicPo:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN27@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN27@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN33@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN49@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN49@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2051 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN33@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN58@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN74@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN74@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2051 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN58@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 142  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN71@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN92@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CEffectInstance *>,void *> > >, COMDAT
; _this$ = ecx

; 744  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000e	75 25		 jne	 SHORT $LN3@Erase_tree
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR __Al$[ebp]
$LL2@Erase_tree:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00014	ff 76 08	 push	 DWORD PTR [esi+8]
  00017	8b cb		 mov	 ecx, ebx
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CEffectInstance *>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 754  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001f	8b c6		 mov	 eax, esi

; 755  :     _Val         = static_cast<_Other&&>(_New_val);

  00021	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00023	6a 18		 push	 24			; 00000018H
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00032	74 e0		 je	 SHORT $LL2@Erase_tree
  00034	5f		 pop	 edi
$LN3@Erase_tree:
  00035	5e		 pop	 esi

; 747  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 748  :         }
; 749  :     }

  00036	5b		 pop	 ebx
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CEffectInstance *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCGraphicThingInstance@@K@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCGraphicThingInstance@@K@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<CGraphicThingInstance * const,unsigned long> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<CGraphicThingInstance * const,unsigned long>,void *> > >, COMDAT
; _this$ = ecx

; 744  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000e	75 25		 jne	 SHORT $LN3@Erase_tree
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR __Al$[ebp]
$LL2@Erase_tree:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00014	ff 76 08	 push	 DWORD PTR [esi+8]
  00017	8b cb		 mov	 ecx, ebx
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCGraphicThingInstance@@K@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<CGraphicThingInstance * const,unsigned long> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<CGraphicThingInstance * const,unsigned long>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 754  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001f	8b c6		 mov	 eax, esi

; 755  :     _Val         = static_cast<_Other&&>(_New_val);

  00021	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00023	6a 18		 push	 24			; 00000018H
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00032	74 e0		 je	 SHORT $LL2@Erase_tree
  00034	5f		 pop	 edi
$LN3@Erase_tree:
  00035	5e		 pop	 esi

; 747  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 748  :         }
; 749  :     }

  00036	5b		 pop	 ebx
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCGraphicThingInstance@@K@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<CGraphicThingInstance * const,unsigned long> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<CGraphicThingInstance * const,unsigned long>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@HPAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@H@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@HPAX@std@@@1@PAU?$_Tree_node@HPAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@HPAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@H@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@HPAX@std@@@1@PAU?$_Tree_node@HPAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<int> >::_Erase_tree<std::allocator<std::_Tree_node<int,void *> > >, COMDAT
; _this$ = ecx

; 744  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000e	75 25		 jne	 SHORT $LN3@Erase_tree
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR __Al$[ebp]
$LL2@Erase_tree:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00014	ff 76 08	 push	 DWORD PTR [esi+8]
  00017	8b cb		 mov	 ecx, ebx
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@HPAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@H@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@HPAX@std@@@1@PAU?$_Tree_node@HPAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<int> >::_Erase_tree<std::allocator<std::_Tree_node<int,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 754  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001f	8b c6		 mov	 eax, esi

; 755  :     _Val         = static_cast<_Other&&>(_New_val);

  00021	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00023	6a 14		 push	 20			; 00000014H
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00032	74 e0		 je	 SHORT $LL2@Erase_tree
  00034	5f		 pop	 edi
$LN3@Erase_tree:
  00035	5e		 pop	 esi

; 747  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 748  :         }
; 749  :     }

  00036	5b		 pop	 ebx
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@HPAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@H@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@HPAX@std@@@1@PAU?$_Tree_node@HPAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<int> >::_Erase_tree<std::allocator<std::_Tree_node<int,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@PAUSObjectInstance@CArea@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@PAUSObjectInstance@CArea@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@PAUSObjectInstance@CArea@@PAX@std@@@1@PAU?$_Tree_node@PAUSObjectInstance@CArea@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@PAUSObjectInstance@CArea@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@PAUSObjectInstance@CArea@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@PAUSObjectInstance@CArea@@PAX@std@@@1@PAU?$_Tree_node@PAUSObjectInstance@CArea@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<CArea::SObjectInstance *> >::_Erase_tree<std::allocator<std::_Tree_node<CArea::SObjectInstance *,void *> > >, COMDAT
; _this$ = ecx

; 744  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000e	75 25		 jne	 SHORT $LN3@Erase_tree
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR __Al$[ebp]
$LL2@Erase_tree:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00014	ff 76 08	 push	 DWORD PTR [esi+8]
  00017	8b cb		 mov	 ecx, ebx
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@PAUSObjectInstance@CArea@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@PAUSObjectInstance@CArea@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@PAUSObjectInstance@CArea@@PAX@std@@@1@PAU?$_Tree_node@PAUSObjectInstance@CArea@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<CArea::SObjectInstance *> >::_Erase_tree<std::allocator<std::_Tree_node<CArea::SObjectInstance *,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 754  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001f	8b c6		 mov	 eax, esi

; 755  :     _Val         = static_cast<_Other&&>(_New_val);

  00021	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00023	6a 14		 push	 20			; 00000014H
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00032	74 e0		 je	 SHORT $LL2@Erase_tree
  00034	5f		 pop	 edi
$LN3@Erase_tree:
  00035	5e		 pop	 esi

; 747  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 748  :         }
; 749  :     }

  00036	5b		 pop	 ebx
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@PAUSObjectInstance@CArea@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@PAUSObjectInstance@CArea@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@PAUSObjectInstance@CArea@@PAX@std@@@1@PAU?$_Tree_node@PAUSObjectInstance@CArea@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<CArea::SObjectInstance *> >::_Erase_tree<std::allocator<std::_Tree_node<CArea::SObjectInstance *,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$set@PAUSObjectInstance@CArea@@U?$less@PAUSObjectInstance@CArea@@@std@@V?$allocator@PAUSObjectInstance@CArea@@@4@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$set@PAUSObjectInstance@CArea@@U?$less@PAUSObjectInstance@CArea@@@std@@V?$allocator@PAUSObjectInstance@CArea@@@4@@std@@QAE@XZ PROC ; std::set<CArea::SObjectInstance *,std::less<CArea::SObjectInstance *>,std::allocator<CArea::SObjectInstance *> >::~set<CArea::SObjectInstance *,std::less<CArea::SObjectInstance *>,std::allocator<CArea::SObjectInstance *> >, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1?$_Tree@V?$_Tset_traits@PAUSObjectInstance@CArea@@U?$less@PAUSObjectInstance@CArea@@@std@@V?$allocator@PAUSObjectInstance@CArea@@@4@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tset_traits<CArea::SObjectInstance *,std::less<CArea::SObjectInstance *>,std::allocator<CArea::SObjectInstance *>,0> >::~_Tree<std::_Tset_traits<CArea::SObjectInstance *,std::less<CArea::SObjectInstance *>,std::allocator<CArea::SObjectInstance *>,0> >
??1?$set@PAUSObjectInstance@CArea@@U?$less@PAUSObjectInstance@CArea@@@std@@V?$allocator@PAUSObjectInstance@CArea@@@4@@std@@QAE@XZ ENDP ; std::set<CArea::SObjectInstance *,std::less<CArea::SObjectInstance *>,std::allocator<CArea::SObjectInstance *> >::~set<CArea::SObjectInstance *,std::less<CArea::SObjectInstance *>,std::allocator<CArea::SObjectInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@PAUSObjectInstance@CArea@@@std@@@std@@QAEPAU?$_Tree_node@PAUSObjectInstance@CArea@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@PAUSObjectInstance@CArea@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@PAUSObjectInstance@CArea@@@std@@@std@@QAEPAU?$_Tree_node@PAUSObjectInstance@CArea@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@PAUSObjectInstance@CArea@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<CArea::SObjectInstance *> >::_Insert_node, COMDAT
; _this$ = ecx

; 646  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 647  :         ++_Mysize;
; 648  :         const auto _Head  = _Myhead;
; 649  :         _Newnode->_Parent = _Loc._Parent;

  00004	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0000e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00010	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00013	89 45 fc	 mov	 DWORD PTR __Head$1$[ebp], eax
  00016	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 650  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  00019	3b d0		 cmp	 edx, eax
  0001b	75 16		 jne	 SHORT $LN5@Insert_nod

; 651  :             _Head->_Left     = _Newnode;

  0001d	89 38		 mov	 DWORD PTR [eax], edi

; 652  :             _Head->_Parent   = _Newnode;

  0001f	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 653  :             _Head->_Right    = _Newnode;

  00022	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 712  :         return _Newnode;
; 713  :     }

  00025	8b c7		 mov	 eax, edi
  00027	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
  0002b	5f		 pop	 edi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 654  :             _Newnode->_Color = _Black; // the root is black
; 655  :             return _Newnode;
; 656  :         }
; 657  : 
; 658  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 659  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00033	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00037	75 0d		 jne	 SHORT $LN6@Insert_nod

; 660  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 661  :             _Loc._Parent->_Right = _Newnode;

  00039	89 7a 08	 mov	 DWORD PTR [edx+8], edi

; 662  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003c	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003f	75 0d		 jne	 SHORT $LN9@Insert_nod

; 663  :                 _Head->_Right = _Newnode;

  00041	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 664  :             }
; 665  :         } else { // add to left of _Loc._Parent

  00044	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 666  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 667  :             _Loc._Parent->_Left = _Newnode;

  00046	89 3a		 mov	 DWORD PTR [edx], edi

; 668  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00048	3b 10		 cmp	 edx, DWORD PTR [eax]
  0004a	75 02		 jne	 SHORT $LN9@Insert_nod

; 669  :                 _Head->_Left = _Newnode;

  0004c	89 38		 mov	 DWORD PTR [eax], edi
$LN9@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00051	8b c7		 mov	 eax, edi
  00053	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00057	0f 85 7d 01 00
	00		 jne	 $LN3@Insert_nod
  0005d	56		 push	 esi
  0005e	66 90		 npad	 2
$LL2@Insert_nod:

; 674  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00063	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	3b d1		 cmp	 edx, ecx
  0006a	0f 85 aa 00 00
	00		 jne	 $LN10@Insert_nod

; 675  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00070	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 676  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00073	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00077	0f 84 a3 00 00
	00		 je	 $LN76@Insert_nod

; 677  :                     _Pnode->_Parent->_Color          = _Black;
; 678  :                     _Parent_sibling->_Color          = _Black;
; 679  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 680  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 681  :                 } else { // parent's sibling has red and black children
; 682  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  0007d	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00080	3b c6		 cmp	 eax, esi
  00082	75 37		 jne	 SHORT $LN51@Insert_nod

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00084	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 683  :                         _Pnode = _Pnode->_Parent;

  00086	8b c2		 mov	 eax, edx

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00088	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0008b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00091	75 03		 jne	 SHORT $LN20@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  00093	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN20@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  00096	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00099	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  0009c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0009e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000a1	75 05		 jne	 SHORT $LN21@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  000a3	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  000a6	eb 0e		 jmp	 SHORT $LN24@Insert_nod
$LN21@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000a8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ab	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000ad	75 04		 jne	 SHORT $LN23@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  000af	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  000b1	eb 03		 jmp	 SHORT $LN24@Insert_nod
$LN23@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  000b3	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN24@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 479  :         _Wherenode->_Parent = _Pnode;

  000b8	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN51@Insert_nod:

; 684  :                         _Lrotate(_Pnode);
; 685  :                     }
; 686  : 
; 687  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 688  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c8	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 689  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 483  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000d2	8b 32		 mov	 esi, DWORD PTR [edx]

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  000d4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000d7	89 0a		 mov	 DWORD PTR [edx], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  000d9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000dc	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000e0	75 03		 jne	 SHORT $LN27@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  000e2	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN27@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  000e5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000e8	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  000eb	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000ed	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000f0	75 0b		 jne	 SHORT $LN28@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  000f2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  000f5	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  000f8	e9 cc 00 00 00	 jmp	 $LN75@Insert_nod
$LN28@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  000fd	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00100	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00103	75 0b		 jne	 SHORT $LN30@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00105	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00108	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  0010b	e9 b9 00 00 00	 jmp	 $LN75@Insert_nod
$LN30@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00110	89 31		 mov	 DWORD PTR [ecx], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00112	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  00115	e9 af 00 00 00	 jmp	 $LN75@Insert_nod
$LN10@Insert_nod:

; 692  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 693  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  0011a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0011e	75 1d		 jne	 SHORT $LN15@Insert_nod
$LN76@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00120	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1
  00124	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  00128	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0012e	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00132	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00135	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00138	e9 8f 00 00 00	 jmp	 $LN46@Insert_nod
$LN15@Insert_nod:

; 694  :                     _Pnode->_Parent->_Color          = _Black;
; 695  :                     _Parent_sibling->_Color          = _Black;
; 696  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 697  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 698  :                 } else { // parent's sibling has red and black children
; 699  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  0013d	8b 32		 mov	 esi, DWORD PTR [edx]
  0013f	3b c6		 cmp	 eax, esi
  00141	75 3a		 jne	 SHORT $LN39@Insert_nod

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00143	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 700  :                         _Pnode = _Pnode->_Parent;

  00146	8b c2		 mov	 eax, edx

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00148	89 08		 mov	 DWORD PTR [eax], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  0014a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0014d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00151	75 03		 jne	 SHORT $LN34@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  00153	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN34@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  00156	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00159	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  0015c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0015e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00161	75 05		 jne	 SHORT $LN35@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  00163	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00166	eb 0f		 jmp	 SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00168	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0016b	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0016e	75 05		 jne	 SHORT $LN37@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00170	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 496  :         } else {

  00173	eb 02		 jmp	 SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00175	89 31		 mov	 DWORD PTR [ecx], esi
$LN38@Insert_nod:

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00177	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 501  :         _Wherenode->_Parent = _Pnode;

  0017a	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN39@Insert_nod:

; 701  :                         _Rrotate(_Pnode);
; 702  :                     }
; 703  : 
; 704  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  0017d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 705  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00184	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00187	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0018a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 706  :                     _Lrotate(_Pnode->_Parent->_Parent);

  0018e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00191	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 461  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00194	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00197	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00199	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0019c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0019e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a2	75 03		 jne	 SHORT $LN41@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  001a4	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN41@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  001a7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001aa	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  001ad	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001af	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  001b2	75 05		 jne	 SHORT $LN42@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  001b4	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  001b7	eb 0e		 jmp	 SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001b9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001bc	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001be	75 04		 jne	 SHORT $LN44@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  001c2	eb 03		 jmp	 SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  001c4	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN45@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  001c7	89 16		 mov	 DWORD PTR [esi], edx
$LN75@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001c9	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN46@Insert_nod:
  001cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001cf	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001d3	0f 84 87 fe ff
	ff		 je	 $LL2@Insert_nod
  001d9	5e		 pop	 esi
$LN3@Insert_nod:

; 707  :                 }
; 708  :             }
; 709  :         }
; 710  : 
; 711  :         _Head->_Parent->_Color = _Black; // root is always black

  001da	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]
  001dd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e0	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 712  :         return _Newnode;
; 713  :     }

  001e4	8b c7		 mov	 eax, edi
  001e6	5f		 pop	 edi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@PAUSObjectInstance@CArea@@@std@@@std@@QAEPAU?$_Tree_node@PAUSObjectInstance@CArea@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@PAUSObjectInstance@CArea@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<CArea::SObjectInstance *> >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tset_traits@PAUSObjectInstance@CArea@@U?$less@PAUSObjectInstance@CArea@@@std@@V?$allocator@PAUSObjectInstance@CArea@@@4@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree@V?$_Tset_traits@PAUSObjectInstance@CArea@@U?$less@PAUSObjectInstance@CArea@@@std@@V?$allocator@PAUSObjectInstance@CArea@@@4@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tset_traits<CArea::SObjectInstance *,std::less<CArea::SObjectInstance *>,std::allocator<CArea::SObjectInstance *>,0> >::~_Tree<std::_Tset_traits<CArea::SObjectInstance *,std::less<CArea::SObjectInstance *>,std::allocator<CArea::SObjectInstance *>,0> >, COMDAT
; _this$ = ecx

; 1080 :     ~_Tree() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00009	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000d	75 21		 jne	 SHORT $LN7@Tree
  0000f	90		 npad	 1
$LL6@Tree:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00010	ff 76 08	 push	 DWORD PTR [esi+8]
  00013	8b cf		 mov	 ecx, edi
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@PAUSObjectInstance@CArea@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@PAUSObjectInstance@CArea@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@PAUSObjectInstance@CArea@@PAX@std@@@1@PAU?$_Tree_node@PAUSObjectInstance@CArea@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<CArea::SObjectInstance *> >::_Erase_tree<std::allocator<std::_Tree_node<CArea::SObjectInstance *,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 754  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001b	8b c6		 mov	 eax, esi

; 755  :     _Val         = static_cast<_Other&&>(_New_val);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  0001f	6a 14		 push	 20			; 00000014H
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0002e	74 e0		 je	 SHORT $LL6@Tree
$LN7@Tree:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00030	6a 14		 push	 20			; 00000014H
  00032	ff 37		 push	 DWORD PTR [edi]
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00039	83 c4 08	 add	 esp, 8
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1087 :     }

  0003e	c3		 ret	 0
??1?$_Tree@V?$_Tset_traits@PAUSObjectInstance@CArea@@U?$less@PAUSObjectInstance@CArea@@@std@@V?$allocator@PAUSObjectInstance@CArea@@@4@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tset_traits<CArea::SObjectInstance *,std::less<CArea::SObjectInstance *>,std::allocator<CArea::SObjectInstance *>,0> >::~_Tree<std::_Tset_traits<CArea::SObjectInstance *,std::less<CArea::SObjectInstance *>,std::allocator<CArea::SObjectInstance *>,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD$$QAV10@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Ptr_shifted_after$1$ = 16				; size = 4
$T1 = 16						; size = 1
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD$$QAV10@@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 4985 :     _In_z_ const _Elem* const _Left, basic_string<_Elem, _Traits, _Alloc>&& _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00004	8b 4d 0c	 mov	 ecx, DWORD PTR __Left$[ebp]

; 4985 :     _In_z_ const _Elem* const _Left, basic_string<_Elem, _Traits, _Alloc>&& _Right) {

  00007	56		 push	 esi

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00008	8b f1		 mov	 esi, ecx

; 4985 :     _In_z_ const _Elem* const _Left, basic_string<_Elem, _Traits, _Alloc>&& _Right) {

  0000a	57		 push	 edi

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0000b	8d 56 01	 lea	 edx, DWORD PTR [esi+1]
  0000e	66 90		 npad	 2
$LL59@operator:
  00010	8a 06		 mov	 al, BYTE PTR [esi]
  00012	46		 inc	 esi
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL59@operator

; 2260 :         if (_Mysize < _Off) {

  00017	8b 7d 10	 mov	 edi, DWORD PTR __Right$[ebp]

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0001a	2b f2		 sub	 esi, edx

; 3497 :         const bool _Check_overlap = _Count <= _Mypair._Myval2._Myres - _Old_size;

  0001c	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0001f	8b 57 10	 mov	 edx, DWORD PTR [edi+16]
  00022	2b c2		 sub	 eax, edx
  00024	3b f0		 cmp	 esi, eax

; 3498 : #endif // _HAS_CXX20
; 3499 : 
; 3500 :         if (_Check_overlap) {

  00026	77 70		 ja	 SHORT $LN10@operator

; 2244 :         return _BUF_SIZE <= _Myres;

  00028	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 3502 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  0002c	8d 04 32	 lea	 eax, DWORD PTR [edx+esi]
  0002f	53		 push	 ebx
  00030	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 2226 :         value_type* _Result = _Bx._Buf;

  00033	8b df		 mov	 ebx, edi

; 2227 :         if (_Large_string_engaged()) {

  00035	72 02		 jb	 SHORT $LN22@operator

; 2228 :             _Result = _Unfancy(_Bx._Ptr);

  00037	8b 1f		 mov	 ebx, DWORD PTR [edi]
$LN22@operator:

; 3508 :             if (_Ptr + _Count <= _Insert_at || _Ptr > _Old_ptr + _Old_size) {

  00039	8d 04 0e	 lea	 eax, DWORD PTR [esi+ecx]
  0003c	3b c3		 cmp	 eax, ebx
  0003e	76 1d		 jbe	 SHORT $LN13@operator
  00040	8d 04 13	 lea	 eax, DWORD PTR [ebx+edx]
  00043	3b c8		 cmp	 ecx, eax
  00045	77 16		 ja	 SHORT $LN13@operator

; 3511 :             } else if (_Insert_at <= _Ptr) { // all of [_Ptr, _Ptr + _Count) shifts

  00047	3b d9		 cmp	 ebx, ecx
  00049	77 09		 ja	 SHORT $LN14@operator

; 3512 :                 _Ptr_shifted_after = 0;

  0004b	c7 45 10 00 00
	00 00		 mov	 DWORD PTR __Ptr_shifted_after$1$[ebp], 0

; 3513 :             } else { // [_Ptr, _Ptr + _Count) contains _Insert_at, so only the part after _Insert_at shifts

  00052	eb 0c		 jmp	 SHORT $LN15@operator
$LN14@operator:

; 3514 :                 _Ptr_shifted_after = static_cast<size_type>(_Insert_at - _Ptr);

  00054	8b c3		 mov	 eax, ebx
  00056	2b c1		 sub	 eax, ecx
  00058	89 45 10	 mov	 DWORD PTR __Ptr_shifted_after$1$[ebp], eax
  0005b	eb 03		 jmp	 SHORT $LN15@operator
$LN13@operator:

; 3509 :                 // inserted content is before the shifted region, or does not alias
; 3510 :                 _Ptr_shifted_after = _Count; // none of _Ptr's data shifts

  0005d	89 75 10	 mov	 DWORD PTR __Ptr_shifted_after$1$[ebp], esi
$LN15@operator:

; 3515 :             }
; 3516 : 
; 3517 :             _Traits::move(_Insert_at + _Count, _Insert_at, _Old_size - _Off + 1); // move suffix + null down

  00060	8d 42 01	 lea	 eax, DWORD PTR [edx+1]

; 119  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00063	50		 push	 eax

; 3517 :             _Traits::move(_Insert_at + _Count, _Insert_at, _Old_size - _Off + 1); // move suffix + null down

  00064	8d 04 33	 lea	 eax, DWORD PTR [ebx+esi]

; 119  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00067	53		 push	 ebx
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 _memmove

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0006e	ff 75 10	 push	 DWORD PTR __Ptr_shifted_after$1$[ebp]
  00071	ff 75 0c	 push	 DWORD PTR __Left$[ebp]
  00074	53		 push	 ebx
  00075	e8 00 00 00 00	 call	 _memcpy

; 3519 :             _Traits::copy(

  0007a	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr_shifted_after$1$[ebp]
  0007d	8b c6		 mov	 eax, esi
  0007f	2b c1		 sub	 eax, ecx

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00081	50		 push	 eax

; 3519 :             _Traits::copy(

  00082	8d 04 31	 lea	 eax, DWORD PTR [ecx+esi]
  00085	03 45 0c	 add	 eax, DWORD PTR __Left$[ebp]

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00088	50		 push	 eax

; 3519 :             _Traits::copy(

  00089	8d 04 0b	 lea	 eax, DWORD PTR [ebx+ecx]

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 _memcpy
  00092	83 c4 24	 add	 esp, 36			; 00000024H
  00095	5b		 pop	 ebx

; 3521 :             return *this;

  00096	eb 15		 jmp	 SHORT $LN9@operator
$LN10@operator:

; 3522 :         }
; 3523 : 
; 3524 :         return _Reallocate_grow_by(

  00098	56		 push	 esi
  00099	51		 push	 ecx
  0009a	6a 00		 push	 0
  0009c	c6 45 10 00	 mov	 BYTE PTR $T1[ebp], 0
  000a0	8b cf		 mov	 ecx, edi
  000a2	ff 75 10	 push	 DWORD PTR $T1[ebp]
  000a5	56		 push	 esi
  000a6	e8 00 00 00 00	 call	 ??$_Reallocate_grow_by@V<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_4d79bb85f269e6e8002a4599002d832c>,unsigned int,char const *,unsigned int>
  000ab	8b f8		 mov	 edi, eax
$LN9@operator:

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000ad	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000b0	0f 57 c0	 xorps	 xmm0, xmm0
  000b3	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  000b6	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  000bd	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 2999 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000c4	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
  000c7	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  000ca	f3 0f 7e 47 10	 movq	 xmm0, QWORD PTR [edi+16]
  000cf	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0

; 4821 :         _My_data._Mysize = 0;

  000d4	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 4822 :         _My_data._Myres  = _BUF_SIZE - 1;

  000db	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 4823 :         _My_data._Activate_SSO_buffer();
; 4824 : 
; 4825 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4826 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000e2	c6 07 00	 mov	 BYTE PTR [edi], 0

; 4986 :     return _STD move(_Right.insert(0, _Left));

  000e5	5f		 pop	 edi
  000e6	5e		 pop	 esi

; 4987 : }

  000e7	8b e5		 mov	 esp, ebp
  000e9	5d		 pop	 ebp
  000ea	c3		 ret	 0
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD$$QAV10@@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??__Fs_kVct_pkEftInstSort@?8??RenderEffect@CArea@@QAEXXZ@YAXXZ
text$yd	SEGMENT
??__Fs_kVct_pkEftInstSort@?8??RenderEffect@CArea@@QAEXXZ@YAXXZ PROC ; `CArea::RenderEffect'::`9'::`dynamic atexit destructor for 's_kVct_pkEftInstSort'', COMDAT

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00000	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?s_kVct_pkEftInstSort@?8??RenderEffect@CArea@@QAEXXZ@4V?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@A
  00006	85 d2		 test	 edx, edx
  00008	74 51		 je	 SHORT $LN6@dynamic

; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000a	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?s_kVct_pkEftInstSort@?8??RenderEffect@CArea@@QAEXXZ@4V?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@A+8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00010	8b c2		 mov	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00012	2b ca		 sub	 ecx, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00014	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00017	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001d	72 14		 jb	 SHORT $LN22@dynamic

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001f	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00022	83 c1 23	 add	 ecx, 35			; 00000023H
  00025	2b c2		 sub	 eax, edx

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00027	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002d	0f 87 00 00 00
	00		 ja	 __invalid_parameter_noinfo_noreturn
$LN22@dynamic:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00033	51		 push	 ecx
  00034	52		 push	 edx
  00035	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003a	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  0003d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?s_kVct_pkEftInstSort@?8??RenderEffect@CArea@@QAEXXZ@4V?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@A, 0

; 2050 :             _Mylast  = nullptr;

  00047	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?s_kVct_pkEftInstSort@?8??RenderEffect@CArea@@QAEXXZ@4V?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@A+4, 0

; 2051 :             _Myend   = nullptr;

  00051	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?s_kVct_pkEftInstSort@?8??RenderEffect@CArea@@QAEXXZ@4V?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@A+8, 0
$LN6@dynamic:
  0005b	c3		 ret	 0
??__Fs_kVct_pkEftInstSort@?8??RenderEffect@CArea@@QAEXXZ@YAXXZ ENDP ; `CArea::RenderEffect'::`9'::`dynamic atexit destructor for 's_kVct_pkEftInstSort''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@CAXXZ PROC ; std::vector<CEffectInstance *,std::allocator<CEffectInstance *> >::_Xlength, COMDAT

; 2138 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@CAXXZ ENDP ; std::vector<CEffectInstance *,std::allocator<CEffectInstance *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >,std::_Iterator_base0>::operator++, COMDAT
; _this$ = ecx

; 50   :     _Tree_unchecked_const_iterator& operator++() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 51   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  00004	8b 16		 mov	 edx, DWORD PTR [esi]
  00006	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  00009	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0000d	74 22		 je	 SHORT $LN4@operator

; 52   :             _Nodeptr _Pnode;
; 53   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  0000f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00012	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00016	75 12		 jne	 SHORT $LN19@operator
$LL2@operator:
  00018	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0001b	75 0d		 jne	 SHORT $LN19@operator

; 54   :                 _Ptr = _Pnode; // ==> parent while right subtree

  0001d	89 06		 mov	 DWORD PTR [esi], eax
  0001f	8b d0		 mov	 edx, eax
  00021	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00024	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00028	74 ee		 je	 SHORT $LL2@operator
$LN19@operator:

; 55   :             }
; 56   : 
; 57   :             _Ptr = _Pnode; // ==> parent (head if end())
; 58   :         } else {
; 59   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree
; 60   :         }
; 61   : 
; 62   :         return *this;

  0002a	89 06		 mov	 DWORD PTR [esi], eax

; 63   :     }

  0002c	8b c6		 mov	 eax, esi
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	c3		 ret	 0
$LN4@operator:

; 453  :         while (!_Pnode->_Left->_Isnil) {

  00031	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00033	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00037	75 13		 jne	 SHORT $LN9@operator
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL8@operator:
  00040	8b 01		 mov	 eax, DWORD PTR [ecx]

; 454  :             _Pnode = _Pnode->_Left;

  00042	8b f9		 mov	 edi, ecx
  00044	8b c8		 mov	 ecx, eax
  00046	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004a	74 f4		 je	 SHORT $LL8@operator
$LN9@operator:

; 55   :             }
; 56   : 
; 57   :             _Ptr = _Pnode; // ==> parent (head if end())
; 58   :         } else {
; 59   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree
; 60   :         }
; 61   : 
; 62   :         return *this;

  0004c	89 3e		 mov	 DWORD PTR [esi], edi

; 63   :     }

  0004e	8b c6		 mov	 eax, esi
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	c3		 ret	 0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >,std::_Iterator_base0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@CArea@@2V?$CDynamicPool@VCArea@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@CArea@@2V?$CDynamicPool@VCArea@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CArea::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CArea@@2V?$CDynamicPool@VCArea@@@@A ; CArea::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPool@VCArea@@@@UAE@XZ ; CDynamicPool<CArea>::~CDynamicPool<CArea>
??__F?ms_kPool@CArea@@2V?$CDynamicPool@VCArea@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CArea::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ??__E?ms_kPool@CArea@@2V?$CDynamicPool@VCArea@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@CArea@@2V?$CDynamicPool@VCArea@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CArea::ms_kPool'', COMDAT

; 19   : CDynamicPool<CArea>						CArea::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@CArea@@2V?$CDynamicPool@VCArea@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CArea::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@CArea@@2V?$CDynamicPool@VCArea@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CArea::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPool@VCArea@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPool@VCArea@@@@UAEPAXI@Z PROC		; CDynamicPool<CArea>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPool@VCArea@@@@UAE@XZ ; CDynamicPool<CArea>::~CDynamicPool<CArea>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPool@VCArea@@@@UAEPAXI@Z ENDP		; CDynamicPool<CArea>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCArea@@V?$allocator@PAVCArea@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCArea@@V?$allocator@PAVCArea@@@std@@@std@@CAXXZ PROC ; std::vector<CArea *,std::allocator<CArea *> >::_Xlength, COMDAT

; 2138 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCArea@@V?$allocator@PAVCArea@@@std@@@std@@CAXXZ ENDP ; std::vector<CArea *,std::allocator<CArea *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPool@VCArea@@@@KAXPAVCArea@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPool@VCArea@@@@KAXPAVCArea@@@Z PROC	; CDynamicPool<CArea>::Delete, COMDAT

; 109  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 110  : 			delete pkData;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _pkData$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 06		 je	 SHORT $LN3@Delete
  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	6a 01		 push	 1
  0000e	ff 10		 call	 DWORD PTR [eax]
$LN3@Delete:

; 111  : 		}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?Delete@?$CDynamicPool@VCArea@@@@KAXPAVCArea@@@Z ENDP	; CDynamicPool<CArea>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPool@VCArea@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPool@VCArea@@@@UAE@XZ PROC			; CDynamicPool<CArea>::~CDynamicPool<CArea>, COMDAT
; _this$ = ecx

; 18   : 		{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDynamicPool@VCArea@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000c	85 c0		 test	 eax, eax
  0000e	74 41		 je	 SHORT $LN6@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00013	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 12		 jb	 SHORT $LN22@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00020	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00023	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00026	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00028	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002e	77 6b		 ja	 SHORT $LN44@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b c2		 mov	 eax, edx
$LN22@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00039	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00040	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  00043	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 2051 :             _Myend   = nullptr;

  0004a	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN6@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00051	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00054	85 c0		 test	 eax, eax
  00056	74 41		 je	 SHORT $LN31@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00058	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0005b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0005d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00060	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00066	72 12		 jb	 SHORT $LN47@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00068	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0006b	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0006e	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00070	83 c0 fc	 add	 eax, -4			; fffffffcH
  00073	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00076	77 23		 ja	 SHORT $LN44@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00078	8b c2		 mov	 eax, edx
$LN47@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0007a	51		 push	 ecx
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00081	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00088	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  0008b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 2051 :             _Myend   = nullptr;

  00092	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN31@CDynamicPo:
  00099	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 26   : 		}

  0009a	c3		 ret	 0
$LN44@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0009b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN58@CDynamicPo:
  000a0	cc		 int	 3
??1?$CDynamicPool@VCArea@@@@UAE@XZ ENDP			; CDynamicPool<CArea>::~CDynamicPool<CArea>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_DungeonBlockInstancePool@CArea@@1V?$CDynamicPool@VCDungeonBlock@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_DungeonBlockInstancePool@CArea@@1V?$CDynamicPool@VCDungeonBlock@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CArea::ms_DungeonBlockInstancePool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_DungeonBlockInstancePool@CArea@@1V?$CDynamicPool@VCDungeonBlock@@@@A ; CArea::ms_DungeonBlockInstancePool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPool@VCDungeonBlock@@@@UAE@XZ ; CDynamicPool<CDungeonBlock>::~CDynamicPool<CDungeonBlock>
??__F?ms_DungeonBlockInstancePool@CArea@@1V?$CDynamicPool@VCDungeonBlock@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CArea::ms_DungeonBlockInstancePool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ??__E?ms_DungeonBlockInstancePool@CArea@@1V?$CDynamicPool@VCDungeonBlock@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_DungeonBlockInstancePool@CArea@@1V?$CDynamicPool@VCDungeonBlock@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CArea::ms_DungeonBlockInstancePool'', COMDAT

; 18   : CDynamicPool<CDungeonBlock>				CArea::ms_DungeonBlockInstancePool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_DungeonBlockInstancePool@CArea@@1V?$CDynamicPool@VCDungeonBlock@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CArea::ms_DungeonBlockInstancePool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_DungeonBlockInstancePool@CArea@@1V?$CDynamicPool@VCDungeonBlock@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CArea::ms_DungeonBlockInstancePool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPool@VCDungeonBlock@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPool@VCDungeonBlock@@@@UAEPAXI@Z PROC	; CDynamicPool<CDungeonBlock>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPool@VCDungeonBlock@@@@UAE@XZ ; CDynamicPool<CDungeonBlock>::~CDynamicPool<CDungeonBlock>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPool@VCDungeonBlock@@@@UAEPAXI@Z ENDP	; CDynamicPool<CDungeonBlock>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPool@VCDungeonBlock@@@@KAXPAVCDungeonBlock@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPool@VCDungeonBlock@@@@KAXPAVCDungeonBlock@@@Z PROC ; CDynamicPool<CDungeonBlock>::Delete, COMDAT

; 109  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 110  : 			delete pkData;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _pkData$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 06		 je	 SHORT $LN3@Delete
  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	6a 01		 push	 1
  0000e	ff 10		 call	 DWORD PTR [eax]
$LN3@Delete:

; 111  : 		}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?Delete@?$CDynamicPool@VCDungeonBlock@@@@KAXPAVCDungeonBlock@@@Z ENDP ; CDynamicPool<CDungeonBlock>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPool@VCDungeonBlock@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPool@VCDungeonBlock@@@@UAE@XZ PROC		; CDynamicPool<CDungeonBlock>::~CDynamicPool<CDungeonBlock>, COMDAT
; _this$ = ecx

; 18   : 		{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDynamicPool@VCDungeonBlock@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000c	85 c0		 test	 eax, eax
  0000e	74 41		 je	 SHORT $LN6@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00013	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 12		 jb	 SHORT $LN22@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00020	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00023	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00026	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00028	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002e	77 6b		 ja	 SHORT $LN44@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b c2		 mov	 eax, edx
$LN22@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00039	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00040	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  00043	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 2051 :             _Myend   = nullptr;

  0004a	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN6@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00051	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00054	85 c0		 test	 eax, eax
  00056	74 41		 je	 SHORT $LN31@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00058	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0005b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0005d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00060	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00066	72 12		 jb	 SHORT $LN47@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00068	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0006b	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0006e	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00070	83 c0 fc	 add	 eax, -4			; fffffffcH
  00073	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00076	77 23		 ja	 SHORT $LN44@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00078	8b c2		 mov	 eax, edx
$LN47@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0007a	51		 push	 ecx
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00081	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00088	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  0008b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 2051 :             _Myend   = nullptr;

  00092	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN31@CDynamicPo:
  00099	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 26   : 		}

  0009a	c3		 ret	 0
$LN44@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0009b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN58@CDynamicPo:
  000a0	cc		 int	 3
??1?$CDynamicPool@VCDungeonBlock@@@@UAE@XZ ENDP		; CDynamicPool<CDungeonBlock>::~CDynamicPool<CDungeonBlock>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_AmbienceInstancePool@CArea@@1V?$CDynamicPool@USAmbienceInstance@CArea@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_AmbienceInstancePool@CArea@@1V?$CDynamicPool@USAmbienceInstance@CArea@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CArea::ms_AmbienceInstancePool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_AmbienceInstancePool@CArea@@1V?$CDynamicPool@USAmbienceInstance@CArea@@@@A ; CArea::ms_AmbienceInstancePool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPool@USAmbienceInstance@CArea@@@@UAE@XZ ; CDynamicPool<CArea::SAmbienceInstance>::~CDynamicPool<CArea::SAmbienceInstance>
??__F?ms_AmbienceInstancePool@CArea@@1V?$CDynamicPool@USAmbienceInstance@CArea@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CArea::ms_AmbienceInstancePool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ??__E?ms_AmbienceInstancePool@CArea@@1V?$CDynamicPool@USAmbienceInstance@CArea@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_AmbienceInstancePool@CArea@@1V?$CDynamicPool@USAmbienceInstance@CArea@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CArea::ms_AmbienceInstancePool'', COMDAT

; 17   : CDynamicPool<CArea::TAmbienceInstance>	CArea::ms_AmbienceInstancePool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_AmbienceInstancePool@CArea@@1V?$CDynamicPool@USAmbienceInstance@CArea@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CArea::ms_AmbienceInstancePool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_AmbienceInstancePool@CArea@@1V?$CDynamicPool@USAmbienceInstance@CArea@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CArea::ms_AmbienceInstancePool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPool@USAmbienceInstance@CArea@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPool@USAmbienceInstance@CArea@@@@UAEPAXI@Z PROC ; CDynamicPool<CArea::SAmbienceInstance>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPool@USAmbienceInstance@CArea@@@@UAE@XZ ; CDynamicPool<CArea::SAmbienceInstance>::~CDynamicPool<CArea::SAmbienceInstance>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPool@USAmbienceInstance@CArea@@@@UAEPAXI@Z ENDP ; CDynamicPool<CArea::SAmbienceInstance>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPool@USAmbienceInstance@CArea@@@@KAXPAUSAmbienceInstance@CArea@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPool@USAmbienceInstance@CArea@@@@KAXPAUSAmbienceInstance@CArea@@@Z PROC ; CDynamicPool<CArea::SAmbienceInstance>::Delete, COMDAT

; 109  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 110  : 			delete pkData;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _pkData$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 06		 je	 SHORT $LN3@Delete
  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	6a 01		 push	 1
  0000e	ff 10		 call	 DWORD PTR [eax]
$LN3@Delete:

; 111  : 		}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?Delete@?$CDynamicPool@USAmbienceInstance@CArea@@@@KAXPAUSAmbienceInstance@CArea@@@Z ENDP ; CDynamicPool<CArea::SAmbienceInstance>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPool@USAmbienceInstance@CArea@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPool@USAmbienceInstance@CArea@@@@UAE@XZ PROC ; CDynamicPool<CArea::SAmbienceInstance>::~CDynamicPool<CArea::SAmbienceInstance>, COMDAT
; _this$ = ecx

; 18   : 		{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDynamicPool@USAmbienceInstance@CArea@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000c	85 c0		 test	 eax, eax
  0000e	74 41		 je	 SHORT $LN6@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00013	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 12		 jb	 SHORT $LN22@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00020	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00023	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00026	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00028	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002e	77 6b		 ja	 SHORT $LN44@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b c2		 mov	 eax, edx
$LN22@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00039	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00040	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  00043	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 2051 :             _Myend   = nullptr;

  0004a	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN6@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00051	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00054	85 c0		 test	 eax, eax
  00056	74 41		 je	 SHORT $LN31@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00058	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0005b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0005d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00060	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00066	72 12		 jb	 SHORT $LN47@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00068	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0006b	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0006e	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00070	83 c0 fc	 add	 eax, -4			; fffffffcH
  00073	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00076	77 23		 ja	 SHORT $LN44@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00078	8b c2		 mov	 eax, edx
$LN47@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0007a	51		 push	 ecx
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00081	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00088	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  0008b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 2051 :             _Myend   = nullptr;

  00092	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN31@CDynamicPo:
  00099	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 26   : 		}

  0009a	c3		 ret	 0
$LN44@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0009b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN58@CDynamicPo:
  000a0	cc		 int	 3
??1?$CDynamicPool@USAmbienceInstance@CArea@@@@UAE@XZ ENDP ; CDynamicPool<CArea::SAmbienceInstance>::~CDynamicPool<CArea::SAmbienceInstance>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_AttributeInstancePool@CArea@@1V?$CDynamicPool@VCAttributeInstance@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_AttributeInstancePool@CArea@@1V?$CDynamicPool@VCAttributeInstance@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CArea::ms_AttributeInstancePool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_AttributeInstancePool@CArea@@1V?$CDynamicPool@VCAttributeInstance@@@@A ; CArea::ms_AttributeInstancePool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPool@VCAttributeInstance@@@@UAE@XZ ; CDynamicPool<CAttributeInstance>::~CDynamicPool<CAttributeInstance>
??__F?ms_AttributeInstancePool@CArea@@1V?$CDynamicPool@VCAttributeInstance@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CArea::ms_AttributeInstancePool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ??__E?ms_AttributeInstancePool@CArea@@1V?$CDynamicPool@VCAttributeInstance@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_AttributeInstancePool@CArea@@1V?$CDynamicPool@VCAttributeInstance@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CArea::ms_AttributeInstancePool'', COMDAT

; 16   : CDynamicPool<CAttributeInstance>		CArea::ms_AttributeInstancePool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_AttributeInstancePool@CArea@@1V?$CDynamicPool@VCAttributeInstance@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CArea::ms_AttributeInstancePool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_AttributeInstancePool@CArea@@1V?$CDynamicPool@VCAttributeInstance@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CArea::ms_AttributeInstancePool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPool@VCAttributeInstance@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPool@VCAttributeInstance@@@@UAEPAXI@Z PROC ; CDynamicPool<CAttributeInstance>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPool@VCAttributeInstance@@@@UAE@XZ ; CDynamicPool<CAttributeInstance>::~CDynamicPool<CAttributeInstance>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPool@VCAttributeInstance@@@@UAEPAXI@Z ENDP ; CDynamicPool<CAttributeInstance>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCAttributeInstance@@V?$allocator@PAVCAttributeInstance@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCAttributeInstance@@V?$allocator@PAVCAttributeInstance@@@std@@@std@@CAXXZ PROC ; std::vector<CAttributeInstance *,std::allocator<CAttributeInstance *> >::_Xlength, COMDAT

; 2138 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCAttributeInstance@@V?$allocator@PAVCAttributeInstance@@@std@@@std@@CAXXZ ENDP ; std::vector<CAttributeInstance *,std::allocator<CAttributeInstance *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPool@VCAttributeInstance@@@@KAXPAVCAttributeInstance@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPool@VCAttributeInstance@@@@KAXPAVCAttributeInstance@@@Z PROC ; CDynamicPool<CAttributeInstance>::Delete, COMDAT

; 109  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 110  : 			delete pkData;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _pkData$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 06		 je	 SHORT $LN3@Delete
  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	6a 01		 push	 1
  0000e	ff 10		 call	 DWORD PTR [eax]
$LN3@Delete:

; 111  : 		}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?Delete@?$CDynamicPool@VCAttributeInstance@@@@KAXPAVCAttributeInstance@@@Z ENDP ; CDynamicPool<CAttributeInstance>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPool@VCAttributeInstance@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPool@VCAttributeInstance@@@@UAE@XZ PROC	; CDynamicPool<CAttributeInstance>::~CDynamicPool<CAttributeInstance>, COMDAT
; _this$ = ecx

; 18   : 		{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDynamicPool@VCAttributeInstance@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000c	85 c0		 test	 eax, eax
  0000e	74 41		 je	 SHORT $LN6@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00013	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 12		 jb	 SHORT $LN22@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00020	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00023	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00026	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00028	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002e	77 6b		 ja	 SHORT $LN44@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b c2		 mov	 eax, edx
$LN22@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00039	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00040	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  00043	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 2051 :             _Myend   = nullptr;

  0004a	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN6@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00051	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00054	85 c0		 test	 eax, eax
  00056	74 41		 je	 SHORT $LN31@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00058	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0005b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0005d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00060	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00066	72 12		 jb	 SHORT $LN47@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00068	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0006b	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0006e	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00070	83 c0 fc	 add	 eax, -4			; fffffffcH
  00073	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00076	77 23		 ja	 SHORT $LN44@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00078	8b c2		 mov	 eax, edx
$LN47@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0007a	51		 push	 ecx
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00081	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00088	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  0008b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 2051 :             _Myend   = nullptr;

  00092	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN31@CDynamicPo:
  00099	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 26   : 		}

  0009a	c3		 ret	 0
$LN44@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0009b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN58@CDynamicPo:
  000a0	cc		 int	 3
??1?$CDynamicPool@VCAttributeInstance@@@@UAE@XZ ENDP	; CDynamicPool<CAttributeInstance>::~CDynamicPool<CAttributeInstance>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_ObjectInstancePool@CArea@@1V?$CDynamicPool@USObjectInstance@CArea@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_ObjectInstancePool@CArea@@1V?$CDynamicPool@USObjectInstance@CArea@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CArea::ms_ObjectInstancePool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_ObjectInstancePool@CArea@@1V?$CDynamicPool@USObjectInstance@CArea@@@@A ; CArea::ms_ObjectInstancePool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPool@USObjectInstance@CArea@@@@UAE@XZ ; CDynamicPool<CArea::SObjectInstance>::~CDynamicPool<CArea::SObjectInstance>
??__F?ms_ObjectInstancePool@CArea@@1V?$CDynamicPool@USObjectInstance@CArea@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CArea::ms_ObjectInstancePool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ??__E?ms_ObjectInstancePool@CArea@@1V?$CDynamicPool@USObjectInstance@CArea@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_ObjectInstancePool@CArea@@1V?$CDynamicPool@USObjectInstance@CArea@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CArea::ms_ObjectInstancePool'', COMDAT

; 15   : CDynamicPool<CArea::TObjectInstance>	CArea::ms_ObjectInstancePool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_ObjectInstancePool@CArea@@1V?$CDynamicPool@USObjectInstance@CArea@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CArea::ms_ObjectInstancePool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_ObjectInstancePool@CArea@@1V?$CDynamicPool@USObjectInstance@CArea@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CArea::ms_ObjectInstancePool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPool@USObjectInstance@CArea@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPool@USObjectInstance@CArea@@@@UAEPAXI@Z PROC ; CDynamicPool<CArea::SObjectInstance>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPool@USObjectInstance@CArea@@@@UAE@XZ ; CDynamicPool<CArea::SObjectInstance>::~CDynamicPool<CArea::SObjectInstance>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPool@USObjectInstance@CArea@@@@UAEPAXI@Z ENDP ; CDynamicPool<CArea::SObjectInstance>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPool@USObjectInstance@CArea@@@@KAXPAUSObjectInstance@CArea@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPool@USObjectInstance@CArea@@@@KAXPAUSObjectInstance@CArea@@@Z PROC ; CDynamicPool<CArea::SObjectInstance>::Delete, COMDAT

; 109  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 110  : 			delete pkData;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _pkData$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 06		 je	 SHORT $LN3@Delete
  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	6a 01		 push	 1
  0000e	ff 10		 call	 DWORD PTR [eax]
$LN3@Delete:

; 111  : 		}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?Delete@?$CDynamicPool@USObjectInstance@CArea@@@@KAXPAUSObjectInstance@CArea@@@Z ENDP ; CDynamicPool<CArea::SObjectInstance>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPool@USObjectInstance@CArea@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPool@USObjectInstance@CArea@@@@UAE@XZ PROC	; CDynamicPool<CArea::SObjectInstance>::~CDynamicPool<CArea::SObjectInstance>, COMDAT
; _this$ = ecx

; 18   : 		{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDynamicPool@USObjectInstance@CArea@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000c	85 c0		 test	 eax, eax
  0000e	74 41		 je	 SHORT $LN6@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00013	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 12		 jb	 SHORT $LN22@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00020	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00023	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00026	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00028	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002e	77 6b		 ja	 SHORT $LN44@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b c2		 mov	 eax, edx
$LN22@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00039	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00040	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  00043	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 2051 :             _Myend   = nullptr;

  0004a	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN6@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00051	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00054	85 c0		 test	 eax, eax
  00056	74 41		 je	 SHORT $LN31@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00058	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0005b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0005d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00060	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00066	72 12		 jb	 SHORT $LN47@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00068	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0006b	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0006e	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00070	83 c0 fc	 add	 eax, -4			; fffffffcH
  00073	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00076	77 23		 ja	 SHORT $LN44@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00078	8b c2		 mov	 eax, edx
$LN47@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0007a	51		 push	 ecx
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00081	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00088	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  0008b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 2051 :             _Myend   = nullptr;

  00092	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN31@CDynamicPo:
  00099	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 26   : 		}

  0009a	c3		 ret	 0
$LN44@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0009b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN58@CDynamicPo:
  000a0	cc		 int	 3
??1?$CDynamicPool@USObjectInstance@CArea@@@@UAE@XZ ENDP	; CDynamicPool<CArea::SObjectInstance>::~CDynamicPool<CArea::SObjectInstance>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@@std@@QAE@XZ PROC ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >::~map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	ff 70 04	 push	 DWORD PTR [eax+4]
  00008	56		 push	 esi
  00009	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  0000e	6a 34		 push	 52			; 00000034H
  00010	ff 36		 push	 DWORD PTR [esi]
  00012	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00017	83 c4 08	 add	 esp, 8
  0001a	5e		 pop	 esi
  0001b	c3		 ret	 0
??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@@std@@QAE@XZ ENDP ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >::~map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >::_Insert_node, COMDAT
; _this$ = ecx

; 646  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 647  :         ++_Mysize;
; 648  :         const auto _Head  = _Myhead;
; 649  :         _Newnode->_Parent = _Loc._Parent;

  00004	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0000e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00010	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00013	89 45 fc	 mov	 DWORD PTR __Head$1$[ebp], eax
  00016	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 650  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  00019	3b d0		 cmp	 edx, eax
  0001b	75 16		 jne	 SHORT $LN5@Insert_nod

; 651  :             _Head->_Left     = _Newnode;

  0001d	89 38		 mov	 DWORD PTR [eax], edi

; 652  :             _Head->_Parent   = _Newnode;

  0001f	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 653  :             _Head->_Right    = _Newnode;

  00022	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 712  :         return _Newnode;
; 713  :     }

  00025	8b c7		 mov	 eax, edi
  00027	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
  0002b	5f		 pop	 edi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 654  :             _Newnode->_Color = _Black; // the root is black
; 655  :             return _Newnode;
; 656  :         }
; 657  : 
; 658  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 659  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00033	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00037	75 0d		 jne	 SHORT $LN6@Insert_nod

; 660  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 661  :             _Loc._Parent->_Right = _Newnode;

  00039	89 7a 08	 mov	 DWORD PTR [edx+8], edi

; 662  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003c	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003f	75 0d		 jne	 SHORT $LN9@Insert_nod

; 663  :                 _Head->_Right = _Newnode;

  00041	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 664  :             }
; 665  :         } else { // add to left of _Loc._Parent

  00044	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 666  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 667  :             _Loc._Parent->_Left = _Newnode;

  00046	89 3a		 mov	 DWORD PTR [edx], edi

; 668  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00048	3b 10		 cmp	 edx, DWORD PTR [eax]
  0004a	75 02		 jne	 SHORT $LN9@Insert_nod

; 669  :                 _Head->_Left = _Newnode;

  0004c	89 38		 mov	 DWORD PTR [eax], edi
$LN9@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00051	8b c7		 mov	 eax, edi
  00053	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00057	0f 85 7d 01 00
	00		 jne	 $LN3@Insert_nod
  0005d	56		 push	 esi
  0005e	66 90		 npad	 2
$LL2@Insert_nod:

; 674  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00063	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	3b d1		 cmp	 edx, ecx
  0006a	0f 85 aa 00 00
	00		 jne	 $LN10@Insert_nod

; 675  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00070	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 676  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00073	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00077	0f 84 a3 00 00
	00		 je	 $LN76@Insert_nod

; 677  :                     _Pnode->_Parent->_Color          = _Black;
; 678  :                     _Parent_sibling->_Color          = _Black;
; 679  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 680  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 681  :                 } else { // parent's sibling has red and black children
; 682  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  0007d	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00080	3b c6		 cmp	 eax, esi
  00082	75 37		 jne	 SHORT $LN51@Insert_nod

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00084	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 683  :                         _Pnode = _Pnode->_Parent;

  00086	8b c2		 mov	 eax, edx

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00088	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0008b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00091	75 03		 jne	 SHORT $LN20@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  00093	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN20@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  00096	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00099	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  0009c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0009e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000a1	75 05		 jne	 SHORT $LN21@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  000a3	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  000a6	eb 0e		 jmp	 SHORT $LN24@Insert_nod
$LN21@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000a8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ab	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000ad	75 04		 jne	 SHORT $LN23@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  000af	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  000b1	eb 03		 jmp	 SHORT $LN24@Insert_nod
$LN23@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  000b3	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN24@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 479  :         _Wherenode->_Parent = _Pnode;

  000b8	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN51@Insert_nod:

; 684  :                         _Lrotate(_Pnode);
; 685  :                     }
; 686  : 
; 687  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 688  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c8	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 689  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 483  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000d2	8b 32		 mov	 esi, DWORD PTR [edx]

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  000d4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000d7	89 0a		 mov	 DWORD PTR [edx], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  000d9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000dc	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000e0	75 03		 jne	 SHORT $LN27@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  000e2	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN27@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  000e5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000e8	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  000eb	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000ed	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000f0	75 0b		 jne	 SHORT $LN28@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  000f2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  000f5	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  000f8	e9 cc 00 00 00	 jmp	 $LN75@Insert_nod
$LN28@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  000fd	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00100	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00103	75 0b		 jne	 SHORT $LN30@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00105	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00108	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  0010b	e9 b9 00 00 00	 jmp	 $LN75@Insert_nod
$LN30@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00110	89 31		 mov	 DWORD PTR [ecx], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00112	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  00115	e9 af 00 00 00	 jmp	 $LN75@Insert_nod
$LN10@Insert_nod:

; 692  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 693  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  0011a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0011e	75 1d		 jne	 SHORT $LN15@Insert_nod
$LN76@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00120	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1
  00124	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  00128	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0012e	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00132	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00135	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00138	e9 8f 00 00 00	 jmp	 $LN46@Insert_nod
$LN15@Insert_nod:

; 694  :                     _Pnode->_Parent->_Color          = _Black;
; 695  :                     _Parent_sibling->_Color          = _Black;
; 696  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 697  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 698  :                 } else { // parent's sibling has red and black children
; 699  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  0013d	8b 32		 mov	 esi, DWORD PTR [edx]
  0013f	3b c6		 cmp	 eax, esi
  00141	75 3a		 jne	 SHORT $LN39@Insert_nod

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00143	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 700  :                         _Pnode = _Pnode->_Parent;

  00146	8b c2		 mov	 eax, edx

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00148	89 08		 mov	 DWORD PTR [eax], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  0014a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0014d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00151	75 03		 jne	 SHORT $LN34@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  00153	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN34@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  00156	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00159	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  0015c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0015e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00161	75 05		 jne	 SHORT $LN35@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  00163	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00166	eb 0f		 jmp	 SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00168	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0016b	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0016e	75 05		 jne	 SHORT $LN37@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00170	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 496  :         } else {

  00173	eb 02		 jmp	 SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00175	89 31		 mov	 DWORD PTR [ecx], esi
$LN38@Insert_nod:

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00177	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 501  :         _Wherenode->_Parent = _Pnode;

  0017a	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN39@Insert_nod:

; 701  :                         _Rrotate(_Pnode);
; 702  :                     }
; 703  : 
; 704  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  0017d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 705  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00184	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00187	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0018a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 706  :                     _Lrotate(_Pnode->_Parent->_Parent);

  0018e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00191	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 461  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00194	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00197	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00199	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0019c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0019e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a2	75 03		 jne	 SHORT $LN41@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  001a4	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN41@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  001a7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001aa	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  001ad	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001af	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  001b2	75 05		 jne	 SHORT $LN42@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  001b4	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  001b7	eb 0e		 jmp	 SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001b9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001bc	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001be	75 04		 jne	 SHORT $LN44@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  001c2	eb 03		 jmp	 SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  001c4	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN45@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  001c7	89 16		 mov	 DWORD PTR [esi], edx
$LN75@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001c9	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN46@Insert_nod:
  001cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001cf	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001d3	0f 84 87 fe ff
	ff		 je	 $LL2@Insert_nod
  001d9	5e		 pop	 esi
$LN3@Insert_nod:

; 707  :                 }
; 708  :             }
; 709  :         }
; 710  : 
; 711  :         _Head->_Parent->_Color = _Black; // root is always black

  001da	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]
  001dd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e0	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 712  :         return _Newnode;
; 713  :     }

  001e4	8b c7		 mov	 eax, edi
  001e6	5f		 pop	 edi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCArea@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCArea@@UAEPAXI@Z PROC				; CArea::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CArea@@UAE@XZ	; CArea::~CArea
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 a0 00 00 00	 push	 160			; 000000a0H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCArea@@UAEPAXI@Z ENDP				; CArea::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?Delete@CArea@@SAXPAV1@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
_pkArea$ = 8						; size = 4
?Delete@CArea@@SAXPAV1@@Z PROC				; CArea::Delete, COMDAT

; 32   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 33   : 	pkArea->Clear();

  00004	8b 75 08	 mov	 esi, DWORD PTR _pkArea$[ebp]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ?Clear@CArea@@QAEXXZ	; CArea::Clear
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  0000e	a1 14 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CArea@@2V?$CDynamicPool@VCArea@@@@A+20
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 34   : 	ms_kPool.Free(pkArea);

  00013	89 75 08	 mov	 DWORD PTR _pkData$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  00016	3b 05 18 00 00
	00		 cmp	 eax, DWORD PTR ?ms_kPool@CArea@@2V?$CDynamicPool@VCArea@@@@A+24
  0001c	74 0c		 je	 SHORT $LN8@Delete

; 797  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  0001e	89 30		 mov	 DWORD PTR [eax], esi

; 798  :         } else {
; 799  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 800  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 801  :             _ASAN_VECTOR_RELEASE_GUARD;
; 802  :         }
; 803  : 
; 804  :         _Orphan_range(_Mylast, _Mylast);
; 805  :         _Ty& _Result = *_Mylast;
; 806  :         ++_Mylast;

  00020	83 05 14 00 00
	00 04		 add	 DWORD PTR ?ms_kPool@CArea@@2V?$CDynamicPool@VCArea@@@@A+20, 4
  00027	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 35   : }

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
$LN8@Delete:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0002a	8d 4d 08	 lea	 ecx, DWORD PTR _pkData$[ebp]
  0002d	51		 push	 ecx
  0002e	50		 push	 eax
  0002f	b9 10 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CArea@@2V?$CDynamicPool@VCArea@@@@A+16
  00034	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCArea@@@?$vector@PAVCArea@@V?$allocator@PAVCArea@@@std@@@std@@AAEPAPAVCArea@@QAPAV2@ABQAV2@@Z ; std::vector<CArea *,std::allocator<CArea *> >::_Emplace_reallocate<CArea * const &>
  00039	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 35   : }

  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?Delete@CArea@@SAXPAV1@@Z ENDP				; CArea::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?New@CArea@@SAPAV1@XZ
_TEXT	SEGMENT
$T2 = -16						; size = 4
_pkNewData$3 = -16					; size = 4
__$EHRec$ = -12						; size = 12
?New@CArea@@SAPAV1@XZ PROC				; CArea::New, COMDAT

; 27   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?New@CArea@@SAPAV1@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1864 :         return _My_data._Myfirst == _My_data._Mylast;

  00024	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?ms_kPool@CArea@@2V?$CDynamicPool@VCArea@@@@A+20
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 63   : 			if (m_kVct_pkFree.empty())

  0002a	39 0d 10 00 00
	00		 cmp	 DWORD PTR ?ms_kPool@CArea@@2V?$CDynamicPool@VCArea@@@@A+16, ecx
  00030	0f 85 87 00 00
	00		 jne	 $LN4@New

; 65   : 				T* pkNewData=new T;

  00036	68 a0 00 00 00	 push	 160			; 000000a0H
  0003b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00040	83 c4 04	 add	 esp, 4
  00043	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004d	85 c0		 test	 eax, eax
  0004f	74 0b		 je	 SHORT $LN6@New
  00051	8b c8		 mov	 ecx, eax
  00053	e8 00 00 00 00	 call	 ??0CArea@@QAE@XZ	; CArea::CArea
  00058	8b f0		 mov	 esi, eax
  0005a	eb 02		 jmp	 SHORT $LN7@New
$LN6@New:
  0005c	33 f6		 xor	 esi, esi
$LN7@New:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  0005e	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CArea@@2V?$CDynamicPool@VCArea@@@@A+8
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 65   : 				T* pkNewData=new T;

  00063	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006a	89 75 f0	 mov	 DWORD PTR _pkNewData$3[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  0006d	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?ms_kPool@CArea@@2V?$CDynamicPool@VCArea@@@@A+12
  00073	74 21		 je	 SHORT $LN14@New

; 797  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00075	89 30		 mov	 DWORD PTR [eax], esi
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 28   : 	return ms_kPool.Alloc();

  00077	8b c6		 mov	 eax, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 806  :         ++_Mylast;

  00079	83 05 08 00 00
	00 04		 add	 DWORD PTR ?ms_kPool@CArea@@2V?$CDynamicPool@VCArea@@@@A+8, 4
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 67   : 				++m_uUsedCapacity;

  00080	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_kPool@CArea@@2V?$CDynamicPool@VCArea@@@@A+32
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 29   : }

  00086	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00089	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00090	59		 pop	 ecx
  00091	5e		 pop	 esi
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c3		 ret	 0
$LN14@New:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00096	8d 4d f0	 lea	 ecx, DWORD PTR _pkNewData$3[ebp]
  00099	51		 push	 ecx
  0009a	50		 push	 eax
  0009b	b9 04 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CArea@@2V?$CDynamicPool@VCArea@@@@A+4
  000a0	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCArea@@@?$vector@PAVCArea@@V?$allocator@PAVCArea@@@std@@@std@@AAEPAPAVCArea@@QAPAV2@ABQAV2@@Z ; std::vector<CArea *,std::allocator<CArea *> >::_Emplace_reallocate<CArea * const &>
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 67   : 				++m_uUsedCapacity;

  000a5	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_kPool@CArea@@2V?$CDynamicPool@VCArea@@@@A+32
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 28   : 	return ms_kPool.Alloc();

  000ab	8b c6		 mov	 eax, esi

; 29   : }

  000ad	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b7	59		 pop	 ecx
  000b8	5e		 pop	 esi
  000b9	8b e5		 mov	 esp, ebp
  000bb	5d		 pop	 ebp
  000bc	c3		 ret	 0
$LN4@New:
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 71   : 			T* pkFreeData=m_kVct_pkFree.back();

  000bd	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1713 :         --_Mylast;

  000c0	83 c1 fc	 add	 ecx, -4			; fffffffcH
  000c3	89 0d 14 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CArea@@2V?$CDynamicPool@VCArea@@@@A+20, ecx
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 29   : }

  000c9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000cc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d3	59		 pop	 ecx
  000d4	5e		 pop	 esi
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?New@CArea@@SAPAV1@XZ$0:
  00000	68 a0 00 00 00	 push	 160			; 000000a0H
  00005	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
__ehhandler$?New@CArea@@SAPAV1@XZ:
  00017	90		 npad	 1
  00018	90		 npad	 1
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?New@CArea@@SAPAV1@XZ
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?New@CArea@@SAPAV1@XZ ENDP				; CArea::New
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?DestroySystem@CArea@@SAXXZ
_TEXT	SEGMENT
?DestroySystem@CArea@@SAXXZ PROC			; CArea::DestroySystem, COMDAT

; 38   : {

  00000	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00001	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?ms_kPool@CArea@@2V?$CDynamicPool@VCArea@@@@A+4
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 38   : {

  00007	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00008	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?ms_kPool@CArea@@2V?$CDynamicPool@VCArea@@@@A+8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  0000e	3b f7		 cmp	 esi, edi
  00010	74 29		 je	 SHORT $LN26@DestroySys
$LL20@DestroySys:
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 110  : 			delete pkData;

  00012	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00014	85 c9		 test	 ecx, ecx
  00016	74 06		 je	 SHORT $LN18@DestroySys
  00018	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001a	6a 01		 push	 1
  0001c	ff 10		 call	 DWORD PTR [eax]
$LN18@DestroySys:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001e	83 c6 04	 add	 esi, 4
  00021	3b f7		 cmp	 esi, edi
  00023	75 ed		 jne	 SHORT $LL20@DestroySys
  00025	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?ms_kPool@CArea@@2V?$CDynamicPool@VCArea@@@@A+8
  0002b	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?ms_kPool@CArea@@2V?$CDynamicPool@VCArea@@@@A+4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	3b f7		 cmp	 esi, edi
  00033	74 06		 je	 SHORT $LN26@DestroySys

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00035	89 35 08 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CArea@@2V?$CDynamicPool@VCArea@@@@A+8, esi
$LN26@DestroySys:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0003b	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CArea@@2V?$CDynamicPool@VCArea@@@@A+16
  00040	3b 05 14 00 00
	00		 cmp	 eax, DWORD PTR ?ms_kPool@CArea@@2V?$CDynamicPool@VCArea@@@@A+20
  00046	74 05		 je	 SHORT $LN29@DestroySys

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00048	a3 14 00 00 00	 mov	 DWORD PTR ?ms_kPool@CArea@@2V?$CDynamicPool@VCArea@@@@A+20, eax
$LN29@DestroySys:

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0004d	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?ms_ObjectInstancePool@CArea@@1V?$CDynamicPool@USObjectInstance@CArea@@@@A+8
  00053	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?ms_ObjectInstancePool@CArea@@1V?$CDynamicPool@USObjectInstance@CArea@@@@A+4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00059	3b f7		 cmp	 esi, edi
  0005b	74 2c		 je	 SHORT $LN55@DestroySys
  0005d	0f 1f 00	 npad	 3
$LL49@DestroySys:
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 110  : 			delete pkData;

  00060	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00062	85 c9		 test	 ecx, ecx
  00064	74 06		 je	 SHORT $LN47@DestroySys
  00066	8b 01		 mov	 eax, DWORD PTR [ecx]
  00068	6a 01		 push	 1
  0006a	ff 10		 call	 DWORD PTR [eax]
$LN47@DestroySys:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  0006c	83 c6 04	 add	 esi, 4
  0006f	3b f7		 cmp	 esi, edi
  00071	75 ed		 jne	 SHORT $LL49@DestroySys
  00073	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?ms_ObjectInstancePool@CArea@@1V?$CDynamicPool@USObjectInstance@CArea@@@@A+8
  00079	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?ms_ObjectInstancePool@CArea@@1V?$CDynamicPool@USObjectInstance@CArea@@@@A+4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0007f	3b f7		 cmp	 esi, edi
  00081	74 06		 je	 SHORT $LN55@DestroySys

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00083	89 35 08 00 00
	00		 mov	 DWORD PTR ?ms_ObjectInstancePool@CArea@@1V?$CDynamicPool@USObjectInstance@CArea@@@@A+8, esi
$LN55@DestroySys:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00089	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ms_ObjectInstancePool@CArea@@1V?$CDynamicPool@USObjectInstance@CArea@@@@A+16
  0008e	3b 05 14 00 00
	00		 cmp	 eax, DWORD PTR ?ms_ObjectInstancePool@CArea@@1V?$CDynamicPool@USObjectInstance@CArea@@@@A+20
  00094	74 05		 je	 SHORT $LN58@DestroySys

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00096	a3 14 00 00 00	 mov	 DWORD PTR ?ms_ObjectInstancePool@CArea@@1V?$CDynamicPool@USObjectInstance@CArea@@@@A+20, eax
$LN58@DestroySys:

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0009b	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?ms_AttributeInstancePool@CArea@@1V?$CDynamicPool@VCAttributeInstance@@@@A+8
  000a1	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?ms_AttributeInstancePool@CArea@@1V?$CDynamicPool@VCAttributeInstance@@@@A+4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  000a7	3b f7		 cmp	 esi, edi
  000a9	74 2e		 je	 SHORT $LN84@DestroySys
  000ab	0f 1f 44 00 00	 npad	 5
$LL78@DestroySys:
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 110  : 			delete pkData;

  000b0	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000b2	85 c9		 test	 ecx, ecx
  000b4	74 06		 je	 SHORT $LN76@DestroySys
  000b6	8b 01		 mov	 eax, DWORD PTR [ecx]
  000b8	6a 01		 push	 1
  000ba	ff 10		 call	 DWORD PTR [eax]
$LN76@DestroySys:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  000bc	83 c6 04	 add	 esi, 4
  000bf	3b f7		 cmp	 esi, edi
  000c1	75 ed		 jne	 SHORT $LL78@DestroySys
  000c3	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?ms_AttributeInstancePool@CArea@@1V?$CDynamicPool@VCAttributeInstance@@@@A+8
  000c9	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?ms_AttributeInstancePool@CArea@@1V?$CDynamicPool@VCAttributeInstance@@@@A+4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  000cf	3b f7		 cmp	 esi, edi
  000d1	74 06		 je	 SHORT $LN84@DestroySys

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  000d3	89 35 08 00 00
	00		 mov	 DWORD PTR ?ms_AttributeInstancePool@CArea@@1V?$CDynamicPool@VCAttributeInstance@@@@A+8, esi
$LN84@DestroySys:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  000d9	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ms_AttributeInstancePool@CArea@@1V?$CDynamicPool@VCAttributeInstance@@@@A+16
  000de	3b 05 14 00 00
	00		 cmp	 eax, DWORD PTR ?ms_AttributeInstancePool@CArea@@1V?$CDynamicPool@VCAttributeInstance@@@@A+20
  000e4	74 05		 je	 SHORT $LN87@DestroySys

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  000e6	a3 14 00 00 00	 mov	 DWORD PTR ?ms_AttributeInstancePool@CArea@@1V?$CDynamicPool@VCAttributeInstance@@@@A+20, eax
$LN87@DestroySys:

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  000eb	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?ms_AmbienceInstancePool@CArea@@1V?$CDynamicPool@USAmbienceInstance@CArea@@@@A+8
  000f1	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?ms_AmbienceInstancePool@CArea@@1V?$CDynamicPool@USAmbienceInstance@CArea@@@@A+4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  000f7	3b f7		 cmp	 esi, edi
  000f9	74 2e		 je	 SHORT $LN113@DestroySys
  000fb	0f 1f 44 00 00	 npad	 5
$LL107@DestroySys:
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 110  : 			delete pkData;

  00100	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00102	85 c9		 test	 ecx, ecx
  00104	74 06		 je	 SHORT $LN105@DestroySys
  00106	8b 01		 mov	 eax, DWORD PTR [ecx]
  00108	6a 01		 push	 1
  0010a	ff 10		 call	 DWORD PTR [eax]
$LN105@DestroySys:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  0010c	83 c6 04	 add	 esi, 4
  0010f	3b f7		 cmp	 esi, edi
  00111	75 ed		 jne	 SHORT $LL107@DestroySys
  00113	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?ms_AmbienceInstancePool@CArea@@1V?$CDynamicPool@USAmbienceInstance@CArea@@@@A+8
  00119	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?ms_AmbienceInstancePool@CArea@@1V?$CDynamicPool@USAmbienceInstance@CArea@@@@A+4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0011f	3b f7		 cmp	 esi, edi
  00121	74 06		 je	 SHORT $LN113@DestroySys

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00123	89 35 08 00 00
	00		 mov	 DWORD PTR ?ms_AmbienceInstancePool@CArea@@1V?$CDynamicPool@USAmbienceInstance@CArea@@@@A+8, esi
$LN113@DestroySys:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00129	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ms_AmbienceInstancePool@CArea@@1V?$CDynamicPool@USAmbienceInstance@CArea@@@@A+16
  0012e	3b 05 14 00 00
	00		 cmp	 eax, DWORD PTR ?ms_AmbienceInstancePool@CArea@@1V?$CDynamicPool@USAmbienceInstance@CArea@@@@A+20
  00134	74 05		 je	 SHORT $LN116@DestroySys

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00136	a3 14 00 00 00	 mov	 DWORD PTR ?ms_AmbienceInstancePool@CArea@@1V?$CDynamicPool@USAmbienceInstance@CArea@@@@A+20, eax
$LN116@DestroySys:

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0013b	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?ms_DungeonBlockInstancePool@CArea@@1V?$CDynamicPool@VCDungeonBlock@@@@A+8
  00141	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?ms_DungeonBlockInstancePool@CArea@@1V?$CDynamicPool@VCDungeonBlock@@@@A+4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00147	3b f7		 cmp	 esi, edi
  00149	74 2e		 je	 SHORT $LN142@DestroySys
  0014b	0f 1f 44 00 00	 npad	 5
$LL136@DestroySys:
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 110  : 			delete pkData;

  00150	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00152	85 c9		 test	 ecx, ecx
  00154	74 06		 je	 SHORT $LN134@DestroySys
  00156	8b 01		 mov	 eax, DWORD PTR [ecx]
  00158	6a 01		 push	 1
  0015a	ff 10		 call	 DWORD PTR [eax]
$LN134@DestroySys:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  0015c	83 c6 04	 add	 esi, 4
  0015f	3b f7		 cmp	 esi, edi
  00161	75 ed		 jne	 SHORT $LL136@DestroySys
  00163	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?ms_DungeonBlockInstancePool@CArea@@1V?$CDynamicPool@VCDungeonBlock@@@@A+8
  00169	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?ms_DungeonBlockInstancePool@CArea@@1V?$CDynamicPool@VCDungeonBlock@@@@A+4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0016f	3b f7		 cmp	 esi, edi
  00171	74 06		 je	 SHORT $LN142@DestroySys

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00173	89 35 08 00 00
	00		 mov	 DWORD PTR ?ms_DungeonBlockInstancePool@CArea@@1V?$CDynamicPool@VCDungeonBlock@@@@A+8, esi
$LN142@DestroySys:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00179	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ms_DungeonBlockInstancePool@CArea@@1V?$CDynamicPool@VCDungeonBlock@@@@A+16
  0017e	5f		 pop	 edi
  0017f	5e		 pop	 esi
  00180	3b 05 14 00 00
	00		 cmp	 eax, DWORD PTR ?ms_DungeonBlockInstancePool@CArea@@1V?$CDynamicPool@VCDungeonBlock@@@@A+20
  00186	74 05		 je	 SHORT $LN145@DestroySys

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00188	a3 14 00 00 00	 mov	 DWORD PTR ?ms_DungeonBlockInstancePool@CArea@@1V?$CDynamicPool@VCDungeonBlock@@@@A+20, eax
$LN145@DestroySys:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 45   : }

  0018d	c3		 ret	 0
?DestroySystem@CArea@@SAXXZ ENDP			; CArea::DestroySystem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@H@std@@@std@@QAEPAU?$_Tree_node@HPAX@2@U?$_Tree_id@PAU?$_Tree_node@HPAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@H@std@@@std@@QAEPAU?$_Tree_node@HPAX@2@U?$_Tree_id@PAU?$_Tree_node@HPAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<int> >::_Insert_node, COMDAT
; _this$ = ecx

; 646  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 647  :         ++_Mysize;
; 648  :         const auto _Head  = _Myhead;
; 649  :         _Newnode->_Parent = _Loc._Parent;

  00004	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0000e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00010	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00013	89 45 fc	 mov	 DWORD PTR __Head$1$[ebp], eax
  00016	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 650  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  00019	3b d0		 cmp	 edx, eax
  0001b	75 16		 jne	 SHORT $LN5@Insert_nod

; 651  :             _Head->_Left     = _Newnode;

  0001d	89 38		 mov	 DWORD PTR [eax], edi

; 652  :             _Head->_Parent   = _Newnode;

  0001f	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 653  :             _Head->_Right    = _Newnode;

  00022	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 712  :         return _Newnode;
; 713  :     }

  00025	8b c7		 mov	 eax, edi
  00027	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
  0002b	5f		 pop	 edi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 654  :             _Newnode->_Color = _Black; // the root is black
; 655  :             return _Newnode;
; 656  :         }
; 657  : 
; 658  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 659  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00033	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00037	75 0d		 jne	 SHORT $LN6@Insert_nod

; 660  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 661  :             _Loc._Parent->_Right = _Newnode;

  00039	89 7a 08	 mov	 DWORD PTR [edx+8], edi

; 662  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003c	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003f	75 0d		 jne	 SHORT $LN9@Insert_nod

; 663  :                 _Head->_Right = _Newnode;

  00041	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 664  :             }
; 665  :         } else { // add to left of _Loc._Parent

  00044	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 666  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 667  :             _Loc._Parent->_Left = _Newnode;

  00046	89 3a		 mov	 DWORD PTR [edx], edi

; 668  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00048	3b 10		 cmp	 edx, DWORD PTR [eax]
  0004a	75 02		 jne	 SHORT $LN9@Insert_nod

; 669  :                 _Head->_Left = _Newnode;

  0004c	89 38		 mov	 DWORD PTR [eax], edi
$LN9@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00051	8b c7		 mov	 eax, edi
  00053	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00057	0f 85 7d 01 00
	00		 jne	 $LN3@Insert_nod
  0005d	56		 push	 esi
  0005e	66 90		 npad	 2
$LL2@Insert_nod:

; 674  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00063	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	3b d1		 cmp	 edx, ecx
  0006a	0f 85 aa 00 00
	00		 jne	 $LN10@Insert_nod

; 675  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00070	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 676  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00073	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00077	0f 84 a3 00 00
	00		 je	 $LN76@Insert_nod

; 677  :                     _Pnode->_Parent->_Color          = _Black;
; 678  :                     _Parent_sibling->_Color          = _Black;
; 679  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 680  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 681  :                 } else { // parent's sibling has red and black children
; 682  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  0007d	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00080	3b c6		 cmp	 eax, esi
  00082	75 37		 jne	 SHORT $LN51@Insert_nod

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00084	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 683  :                         _Pnode = _Pnode->_Parent;

  00086	8b c2		 mov	 eax, edx

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00088	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0008b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00091	75 03		 jne	 SHORT $LN20@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  00093	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN20@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  00096	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00099	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  0009c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0009e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000a1	75 05		 jne	 SHORT $LN21@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  000a3	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  000a6	eb 0e		 jmp	 SHORT $LN24@Insert_nod
$LN21@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000a8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ab	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000ad	75 04		 jne	 SHORT $LN23@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  000af	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  000b1	eb 03		 jmp	 SHORT $LN24@Insert_nod
$LN23@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  000b3	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN24@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 479  :         _Wherenode->_Parent = _Pnode;

  000b8	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN51@Insert_nod:

; 684  :                         _Lrotate(_Pnode);
; 685  :                     }
; 686  : 
; 687  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 688  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c8	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 689  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 483  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000d2	8b 32		 mov	 esi, DWORD PTR [edx]

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  000d4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000d7	89 0a		 mov	 DWORD PTR [edx], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  000d9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000dc	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000e0	75 03		 jne	 SHORT $LN27@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  000e2	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN27@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  000e5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000e8	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  000eb	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000ed	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000f0	75 0b		 jne	 SHORT $LN28@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  000f2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  000f5	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  000f8	e9 cc 00 00 00	 jmp	 $LN75@Insert_nod
$LN28@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  000fd	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00100	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00103	75 0b		 jne	 SHORT $LN30@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00105	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00108	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  0010b	e9 b9 00 00 00	 jmp	 $LN75@Insert_nod
$LN30@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00110	89 31		 mov	 DWORD PTR [ecx], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00112	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  00115	e9 af 00 00 00	 jmp	 $LN75@Insert_nod
$LN10@Insert_nod:

; 692  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 693  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  0011a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0011e	75 1d		 jne	 SHORT $LN15@Insert_nod
$LN76@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00120	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1
  00124	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  00128	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0012e	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00132	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00135	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00138	e9 8f 00 00 00	 jmp	 $LN46@Insert_nod
$LN15@Insert_nod:

; 694  :                     _Pnode->_Parent->_Color          = _Black;
; 695  :                     _Parent_sibling->_Color          = _Black;
; 696  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 697  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 698  :                 } else { // parent's sibling has red and black children
; 699  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  0013d	8b 32		 mov	 esi, DWORD PTR [edx]
  0013f	3b c6		 cmp	 eax, esi
  00141	75 3a		 jne	 SHORT $LN39@Insert_nod

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00143	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 700  :                         _Pnode = _Pnode->_Parent;

  00146	8b c2		 mov	 eax, edx

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00148	89 08		 mov	 DWORD PTR [eax], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  0014a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0014d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00151	75 03		 jne	 SHORT $LN34@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  00153	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN34@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  00156	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00159	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  0015c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0015e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00161	75 05		 jne	 SHORT $LN35@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  00163	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00166	eb 0f		 jmp	 SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00168	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0016b	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0016e	75 05		 jne	 SHORT $LN37@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00170	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 496  :         } else {

  00173	eb 02		 jmp	 SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00175	89 31		 mov	 DWORD PTR [ecx], esi
$LN38@Insert_nod:

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00177	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 501  :         _Wherenode->_Parent = _Pnode;

  0017a	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN39@Insert_nod:

; 701  :                         _Rrotate(_Pnode);
; 702  :                     }
; 703  : 
; 704  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  0017d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 705  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00184	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00187	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0018a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 706  :                     _Lrotate(_Pnode->_Parent->_Parent);

  0018e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00191	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 461  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00194	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00197	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00199	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0019c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0019e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a2	75 03		 jne	 SHORT $LN41@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  001a4	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN41@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  001a7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001aa	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  001ad	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001af	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  001b2	75 05		 jne	 SHORT $LN42@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  001b4	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  001b7	eb 0e		 jmp	 SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001b9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001bc	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001be	75 04		 jne	 SHORT $LN44@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  001c2	eb 03		 jmp	 SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  001c4	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN45@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  001c7	89 16		 mov	 DWORD PTR [esi], edx
$LN75@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001c9	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN46@Insert_nod:
  001cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001cf	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001d3	0f 84 87 fe ff
	ff		 je	 $LL2@Insert_nod
  001d9	5e		 pop	 esi
$LN3@Insert_nod:

; 707  :                 }
; 708  :             }
; 709  :         }
; 710  : 
; 711  :         _Head->_Parent->_Color = _Black; // root is always black

  001da	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]
  001dd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e0	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 712  :         return _Newnode;
; 713  :     }

  001e4	8b c7		 mov	 eax, edi
  001e6	5f		 pop	 edi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@H@std@@@std@@QAEPAU?$_Tree_node@HPAX@2@U?$_Tree_id@PAU?$_Tree_node@HPAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<int> >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tset_traits@HU?$less@H@std@@V?$allocator@H@2@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree@V?$_Tset_traits@HU?$less@H@std@@V?$allocator@H@2@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tset_traits<int,std::less<int>,std::allocator<int>,0> >::~_Tree<std::_Tset_traits<int,std::less<int>,std::allocator<int>,0> >, COMDAT
; _this$ = ecx

; 1080 :     ~_Tree() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00009	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000d	75 21		 jne	 SHORT $LN7@Tree
  0000f	90		 npad	 1
$LL6@Tree:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00010	ff 76 08	 push	 DWORD PTR [esi+8]
  00013	8b cf		 mov	 ecx, edi
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@HPAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@H@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@HPAX@std@@@1@PAU?$_Tree_node@HPAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<int> >::_Erase_tree<std::allocator<std::_Tree_node<int,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 754  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001b	8b c6		 mov	 eax, esi

; 755  :     _Val         = static_cast<_Other&&>(_New_val);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  0001f	6a 14		 push	 20			; 00000014H
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0002e	74 e0		 je	 SHORT $LL6@Tree
$LN7@Tree:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00030	6a 14		 push	 20			; 00000014H
  00032	ff 37		 push	 DWORD PTR [edi]
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00039	83 c4 08	 add	 esp, 8
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1087 :     }

  0003e	c3		 ret	 0
??1?$_Tree@V?$_Tset_traits@HU?$less@H@std@@V?$allocator@H@2@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tset_traits<int,std::less<int>,std::allocator<int>,0> >::~_Tree<std::_Tset_traits<int,std::less<int>,std::allocator<int>,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?_Xlength@?$vector@USCRCWithNumber@CArea@@V?$allocator@USCRCWithNumber@CArea@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@USCRCWithNumber@CArea@@V?$allocator@USCRCWithNumber@CArea@@@std@@@std@@CAXXZ PROC ; std::vector<CArea::SCRCWithNumber,std::allocator<CArea::SCRCWithNumber> >::_Xlength, COMDAT

; 2138 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@USCRCWithNumber@CArea@@V?$allocator@USCRCWithNumber@CArea@@@std@@@std@@CAXXZ ENDP ; std::vector<CArea::SCRCWithNumber,std::allocator<CArea::SCRCWithNumber> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??1?$vector@USCRCWithNumber@CArea@@V?$allocator@USCRCWithNumber@CArea@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@USCRCWithNumber@CArea@@V?$allocator@USCRCWithNumber@CArea@@@std@@@std@@QAE@XZ PROC ; std::vector<CArea::SCRCWithNumber,std::allocator<CArea::SCRCWithNumber> >::~vector<CArea::SCRCWithNumber,std::allocator<CArea::SCRCWithNumber> >, COMDAT
; _this$ = ecx

; 766  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 40		 je	 SHORT $LN4@vector

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000c	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e1 f8	 and	 ecx, -8			; fffffff8H

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00011	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN20@vector

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00019	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001c	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 22		 ja	 SHORT $LN17@vector

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00029	8b c2		 mov	 eax, edx
$LN20@vector:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0002b	51		 push	 ecx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00038	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2051 :             _Myend   = nullptr;

  00042	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  00049	5e		 pop	 esi

; 772  :     }

  0004a	c3		 ret	 0
$LN17@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN28@vector:
  00050	cc		 int	 3
??1?$vector@USCRCWithNumber@CArea@@V?$allocator@USCRCWithNumber@CArea@@@std@@@std@@QAE@XZ ENDP ; std::vector<CArea::SCRCWithNumber,std::allocator<CArea::SCRCWithNumber> >::~vector<CArea::SCRCWithNumber,std::allocator<CArea::SCRCWithNumber> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$map@PAVCGraphicThingInstance@@KU?$less@PAVCGraphicThingInstance@@@std@@V?$allocator@U?$pair@QAVCGraphicThingInstance@@K@std@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$map@PAVCGraphicThingInstance@@KU?$less@PAVCGraphicThingInstance@@@std@@V?$allocator@U?$pair@QAVCGraphicThingInstance@@K@std@@@3@@std@@QAE@XZ PROC ; std::map<CGraphicThingInstance *,unsigned long,std::less<CGraphicThingInstance *>,std::allocator<std::pair<CGraphicThingInstance * const,unsigned long> > >::~map<CGraphicThingInstance *,unsigned long,std::less<CGraphicThingInstance *>,std::allocator<std::pair<CGraphicThingInstance * const,unsigned long> > >, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1?$_Tree@V?$_Tmap_traits@PAVCGraphicThingInstance@@KU?$less@PAVCGraphicThingInstance@@@std@@V?$allocator@U?$pair@QAVCGraphicThingInstance@@K@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<CGraphicThingInstance *,unsigned long,std::less<CGraphicThingInstance *>,std::allocator<std::pair<CGraphicThingInstance * const,unsigned long> >,0> >::~_Tree<std::_Tmap_traits<CGraphicThingInstance *,unsigned long,std::less<CGraphicThingInstance *>,std::allocator<std::pair<CGraphicThingInstance * const,unsigned long> >,0> >
??1?$map@PAVCGraphicThingInstance@@KU?$less@PAVCGraphicThingInstance@@@std@@V?$allocator@U?$pair@QAVCGraphicThingInstance@@K@std@@@3@@std@@QAE@XZ ENDP ; std::map<CGraphicThingInstance *,unsigned long,std::less<CGraphicThingInstance *>,std::allocator<std::pair<CGraphicThingInstance * const,unsigned long> > >::~map<CGraphicThingInstance *,unsigned long,std::less<CGraphicThingInstance *>,std::allocator<std::pair<CGraphicThingInstance * const,unsigned long> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCGraphicThingInstance@@K@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCGraphicThingInstance@@K@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<CGraphicThingInstance * const,unsigned long> > >::_Insert_node, COMDAT
; _this$ = ecx

; 646  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 647  :         ++_Mysize;
; 648  :         const auto _Head  = _Myhead;
; 649  :         _Newnode->_Parent = _Loc._Parent;

  00004	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0000e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00010	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00013	89 45 fc	 mov	 DWORD PTR __Head$1$[ebp], eax
  00016	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 650  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  00019	3b d0		 cmp	 edx, eax
  0001b	75 16		 jne	 SHORT $LN5@Insert_nod

; 651  :             _Head->_Left     = _Newnode;

  0001d	89 38		 mov	 DWORD PTR [eax], edi

; 652  :             _Head->_Parent   = _Newnode;

  0001f	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 653  :             _Head->_Right    = _Newnode;

  00022	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 712  :         return _Newnode;
; 713  :     }

  00025	8b c7		 mov	 eax, edi
  00027	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
  0002b	5f		 pop	 edi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 654  :             _Newnode->_Color = _Black; // the root is black
; 655  :             return _Newnode;
; 656  :         }
; 657  : 
; 658  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 659  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00033	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00037	75 0d		 jne	 SHORT $LN6@Insert_nod

; 660  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 661  :             _Loc._Parent->_Right = _Newnode;

  00039	89 7a 08	 mov	 DWORD PTR [edx+8], edi

; 662  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003c	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003f	75 0d		 jne	 SHORT $LN9@Insert_nod

; 663  :                 _Head->_Right = _Newnode;

  00041	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 664  :             }
; 665  :         } else { // add to left of _Loc._Parent

  00044	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 666  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 667  :             _Loc._Parent->_Left = _Newnode;

  00046	89 3a		 mov	 DWORD PTR [edx], edi

; 668  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00048	3b 10		 cmp	 edx, DWORD PTR [eax]
  0004a	75 02		 jne	 SHORT $LN9@Insert_nod

; 669  :                 _Head->_Left = _Newnode;

  0004c	89 38		 mov	 DWORD PTR [eax], edi
$LN9@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00051	8b c7		 mov	 eax, edi
  00053	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00057	0f 85 7d 01 00
	00		 jne	 $LN3@Insert_nod
  0005d	56		 push	 esi
  0005e	66 90		 npad	 2
$LL2@Insert_nod:

; 674  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00063	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	3b d1		 cmp	 edx, ecx
  0006a	0f 85 aa 00 00
	00		 jne	 $LN10@Insert_nod

; 675  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00070	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 676  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00073	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00077	0f 84 a3 00 00
	00		 je	 $LN76@Insert_nod

; 677  :                     _Pnode->_Parent->_Color          = _Black;
; 678  :                     _Parent_sibling->_Color          = _Black;
; 679  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 680  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 681  :                 } else { // parent's sibling has red and black children
; 682  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  0007d	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00080	3b c6		 cmp	 eax, esi
  00082	75 37		 jne	 SHORT $LN51@Insert_nod

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00084	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 683  :                         _Pnode = _Pnode->_Parent;

  00086	8b c2		 mov	 eax, edx

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00088	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0008b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00091	75 03		 jne	 SHORT $LN20@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  00093	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN20@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  00096	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00099	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  0009c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0009e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000a1	75 05		 jne	 SHORT $LN21@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  000a3	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  000a6	eb 0e		 jmp	 SHORT $LN24@Insert_nod
$LN21@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000a8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ab	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000ad	75 04		 jne	 SHORT $LN23@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  000af	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  000b1	eb 03		 jmp	 SHORT $LN24@Insert_nod
$LN23@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  000b3	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN24@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 479  :         _Wherenode->_Parent = _Pnode;

  000b8	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN51@Insert_nod:

; 684  :                         _Lrotate(_Pnode);
; 685  :                     }
; 686  : 
; 687  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 688  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c8	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 689  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 483  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000d2	8b 32		 mov	 esi, DWORD PTR [edx]

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  000d4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000d7	89 0a		 mov	 DWORD PTR [edx], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  000d9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000dc	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000e0	75 03		 jne	 SHORT $LN27@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  000e2	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN27@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  000e5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000e8	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  000eb	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000ed	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000f0	75 0b		 jne	 SHORT $LN28@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  000f2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  000f5	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  000f8	e9 cc 00 00 00	 jmp	 $LN75@Insert_nod
$LN28@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  000fd	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00100	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00103	75 0b		 jne	 SHORT $LN30@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00105	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00108	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  0010b	e9 b9 00 00 00	 jmp	 $LN75@Insert_nod
$LN30@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00110	89 31		 mov	 DWORD PTR [ecx], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00112	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  00115	e9 af 00 00 00	 jmp	 $LN75@Insert_nod
$LN10@Insert_nod:

; 692  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 693  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  0011a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0011e	75 1d		 jne	 SHORT $LN15@Insert_nod
$LN76@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00120	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1
  00124	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  00128	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0012e	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00132	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00135	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00138	e9 8f 00 00 00	 jmp	 $LN46@Insert_nod
$LN15@Insert_nod:

; 694  :                     _Pnode->_Parent->_Color          = _Black;
; 695  :                     _Parent_sibling->_Color          = _Black;
; 696  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 697  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 698  :                 } else { // parent's sibling has red and black children
; 699  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  0013d	8b 32		 mov	 esi, DWORD PTR [edx]
  0013f	3b c6		 cmp	 eax, esi
  00141	75 3a		 jne	 SHORT $LN39@Insert_nod

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00143	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 700  :                         _Pnode = _Pnode->_Parent;

  00146	8b c2		 mov	 eax, edx

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00148	89 08		 mov	 DWORD PTR [eax], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  0014a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0014d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00151	75 03		 jne	 SHORT $LN34@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  00153	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN34@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  00156	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00159	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  0015c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0015e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00161	75 05		 jne	 SHORT $LN35@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  00163	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00166	eb 0f		 jmp	 SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00168	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0016b	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0016e	75 05		 jne	 SHORT $LN37@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00170	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 496  :         } else {

  00173	eb 02		 jmp	 SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00175	89 31		 mov	 DWORD PTR [ecx], esi
$LN38@Insert_nod:

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00177	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 501  :         _Wherenode->_Parent = _Pnode;

  0017a	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN39@Insert_nod:

; 701  :                         _Rrotate(_Pnode);
; 702  :                     }
; 703  : 
; 704  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  0017d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 705  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00184	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00187	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0018a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 706  :                     _Lrotate(_Pnode->_Parent->_Parent);

  0018e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00191	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 461  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00194	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00197	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00199	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0019c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0019e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a2	75 03		 jne	 SHORT $LN41@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  001a4	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN41@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  001a7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001aa	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  001ad	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001af	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  001b2	75 05		 jne	 SHORT $LN42@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  001b4	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  001b7	eb 0e		 jmp	 SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001b9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001bc	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001be	75 04		 jne	 SHORT $LN44@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  001c2	eb 03		 jmp	 SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  001c4	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN45@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  001c7	89 16		 mov	 DWORD PTR [esi], edx
$LN75@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001c9	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN46@Insert_nod:
  001cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001cf	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001d3	0f 84 87 fe ff
	ff		 je	 $LL2@Insert_nod
  001d9	5e		 pop	 esi
$LN3@Insert_nod:

; 707  :                 }
; 708  :             }
; 709  :         }
; 710  : 
; 711  :         _Head->_Parent->_Color = _Black; // root is always black

  001da	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]
  001dd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e0	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 712  :         return _Newnode;
; 713  :     }

  001e4	8b c7		 mov	 eax, edi
  001e6	5f		 pop	 edi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCGraphicThingInstance@@K@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<CGraphicThingInstance * const,unsigned long> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@PAVCGraphicThingInstance@@KU?$less@PAVCGraphicThingInstance@@@std@@V?$allocator@U?$pair@QAVCGraphicThingInstance@@K@std@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$_Tree@V?$_Tmap_traits@PAVCGraphicThingInstance@@KU?$less@PAVCGraphicThingInstance@@@std@@V?$allocator@U?$pair@QAVCGraphicThingInstance@@K@std@@@3@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tmap_traits<CGraphicThingInstance *,unsigned long,std::less<CGraphicThingInstance *>,std::allocator<std::pair<CGraphicThingInstance * const,unsigned long> >,0> >::clear, COMDAT
; _this$ = ecx

; 1354 :     void clear() noexcept {

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx
  00003	56		 push	 esi
  00004	57		 push	 edi

; 1355 :         const auto _Scary = _Get_scary();
; 1356 :         _Scary->_Orphan_ptr(nullptr);
; 1357 :         auto _Head = _Scary->_Myhead;

  00005	8b 3b		 mov	 edi, DWORD PTR [ebx]

; 1358 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  00007	8b 77 04	 mov	 esi, DWORD PTR [edi+4]

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0000a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000e	75 20		 jne	 SHORT $LN5@clear
$LL4@clear:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00010	ff 76 08	 push	 DWORD PTR [esi+8]
  00013	8b cb		 mov	 ecx, ebx
  00015	53		 push	 ebx
  00016	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCGraphicThingInstance@@K@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<CGraphicThingInstance * const,unsigned long> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<CGraphicThingInstance * const,unsigned long>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 754  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001b	8b c6		 mov	 eax, esi

; 755  :     _Val         = static_cast<_Other&&>(_New_val);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  0001f	6a 18		 push	 24			; 00000018H
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0002e	74 e0		 je	 SHORT $LL4@clear
$LN5@clear:

; 1359 :         _Head->_Parent  = _Head;

  00030	89 7f 04	 mov	 DWORD PTR [edi+4], edi

; 1360 :         _Head->_Left    = _Head;

  00033	89 3f		 mov	 DWORD PTR [edi], edi

; 1361 :         _Head->_Right   = _Head;

  00035	89 7f 08	 mov	 DWORD PTR [edi+8], edi

; 1362 :         _Scary->_Mysize = 0;

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0
  00041	5b		 pop	 ebx

; 1363 :     }

  00042	c3		 ret	 0
?clear@?$_Tree@V?$_Tmap_traits@PAVCGraphicThingInstance@@KU?$less@PAVCGraphicThingInstance@@@std@@V?$allocator@U?$pair@QAVCGraphicThingInstance@@K@std@@@3@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<CGraphicThingInstance *,unsigned long,std::less<CGraphicThingInstance *>,std::allocator<std::pair<CGraphicThingInstance * const,unsigned long> >,0> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@PAVCGraphicThingInstance@@KU?$less@PAVCGraphicThingInstance@@@std@@V?$allocator@U?$pair@QAVCGraphicThingInstance@@K@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree@V?$_Tmap_traits@PAVCGraphicThingInstance@@KU?$less@PAVCGraphicThingInstance@@@std@@V?$allocator@U?$pair@QAVCGraphicThingInstance@@K@std@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<CGraphicThingInstance *,unsigned long,std::less<CGraphicThingInstance *>,std::allocator<std::pair<CGraphicThingInstance * const,unsigned long> >,0> >::~_Tree<std::_Tmap_traits<CGraphicThingInstance *,unsigned long,std::less<CGraphicThingInstance *>,std::allocator<std::pair<CGraphicThingInstance * const,unsigned long> >,0> >, COMDAT
; _this$ = ecx

; 1080 :     ~_Tree() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00009	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000d	75 21		 jne	 SHORT $LN7@Tree
  0000f	90		 npad	 1
$LL6@Tree:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00010	ff 76 08	 push	 DWORD PTR [esi+8]
  00013	8b cf		 mov	 ecx, edi
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCGraphicThingInstance@@K@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<CGraphicThingInstance * const,unsigned long> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<CGraphicThingInstance * const,unsigned long>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 754  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001b	8b c6		 mov	 eax, esi

; 755  :     _Val         = static_cast<_Other&&>(_New_val);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  0001f	6a 18		 push	 24			; 00000018H
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0002e	74 e0		 je	 SHORT $LL6@Tree
$LN7@Tree:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00030	6a 18		 push	 24			; 00000018H
  00032	ff 37		 push	 DWORD PTR [edi]
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00039	83 c4 08	 add	 esp, 8
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1087 :     }

  0003e	c3		 ret	 0
??1?$_Tree@V?$_Tmap_traits@PAVCGraphicThingInstance@@KU?$less@PAVCGraphicThingInstance@@@std@@V?$allocator@U?$pair@QAVCGraphicThingInstance@@K@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<CGraphicThingInstance *,unsigned long,std::less<CGraphicThingInstance *>,std::allocator<std::pair<CGraphicThingInstance * const,unsigned long> >,0> >::~_Tree<std::_Tmap_traits<CGraphicThingInstance *,unsigned long,std::less<CGraphicThingInstance *>,std::allocator<std::pair<CGraphicThingInstance * const,unsigned long> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?_Xlength@?$vector@PAUSAmbienceInstance@CArea@@V?$allocator@PAUSAmbienceInstance@CArea@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAUSAmbienceInstance@CArea@@V?$allocator@PAUSAmbienceInstance@CArea@@@std@@@std@@CAXXZ PROC ; std::vector<CArea::SAmbienceInstance *,std::allocator<CArea::SAmbienceInstance *> >::_Xlength, COMDAT

; 2138 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAUSAmbienceInstance@CArea@@V?$allocator@PAUSAmbienceInstance@CArea@@@std@@@std@@CAXXZ ENDP ; std::vector<CArea::SAmbienceInstance *,std::allocator<CArea::SAmbienceInstance *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??1?$vector@PAUSAmbienceInstance@CArea@@V?$allocator@PAUSAmbienceInstance@CArea@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAUSAmbienceInstance@CArea@@V?$allocator@PAUSAmbienceInstance@CArea@@@std@@@std@@QAE@XZ PROC ; std::vector<CArea::SAmbienceInstance *,std::allocator<CArea::SAmbienceInstance *> >::~vector<CArea::SAmbienceInstance *,std::allocator<CArea::SAmbienceInstance *> >, COMDAT
; _this$ = ecx

; 766  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 40		 je	 SHORT $LN4@vector

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000c	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00011	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN20@vector

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00019	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001c	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 22		 ja	 SHORT $LN17@vector

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00029	8b c2		 mov	 eax, edx
$LN20@vector:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0002b	51		 push	 ecx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00038	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2051 :             _Myend   = nullptr;

  00042	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  00049	5e		 pop	 esi

; 772  :     }

  0004a	c3		 ret	 0
$LN17@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN28@vector:
  00050	cc		 int	 3
??1?$vector@PAUSAmbienceInstance@CArea@@V?$allocator@PAUSAmbienceInstance@CArea@@@std@@@std@@QAE@XZ ENDP ; std::vector<CArea::SAmbienceInstance *,std::allocator<CArea::SAmbienceInstance *> >::~vector<CArea::SAmbienceInstance *,std::allocator<CArea::SAmbienceInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCDungeonBlock@@V?$allocator@PAVCDungeonBlock@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCDungeonBlock@@V?$allocator@PAVCDungeonBlock@@@std@@@std@@CAXXZ PROC ; std::vector<CDungeonBlock *,std::allocator<CDungeonBlock *> >::_Xlength, COMDAT

; 2138 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCDungeonBlock@@V?$allocator@PAVCDungeonBlock@@@std@@@std@@CAXXZ ENDP ; std::vector<CDungeonBlock *,std::allocator<CDungeonBlock *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??1?$vector@PAVCDungeonBlock@@V?$allocator@PAVCDungeonBlock@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAVCDungeonBlock@@V?$allocator@PAVCDungeonBlock@@@std@@@std@@QAE@XZ PROC ; std::vector<CDungeonBlock *,std::allocator<CDungeonBlock *> >::~vector<CDungeonBlock *,std::allocator<CDungeonBlock *> >, COMDAT
; _this$ = ecx

; 766  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 40		 je	 SHORT $LN4@vector

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000c	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00011	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN20@vector

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00019	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001c	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 22		 ja	 SHORT $LN17@vector

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00029	8b c2		 mov	 eax, edx
$LN20@vector:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0002b	51		 push	 ecx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00038	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2051 :             _Myend   = nullptr;

  00042	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  00049	5e		 pop	 esi

; 772  :     }

  0004a	c3		 ret	 0
$LN17@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN28@vector:
  00050	cc		 int	 3
??1?$vector@PAVCDungeonBlock@@V?$allocator@PAVCDungeonBlock@@@std@@@std@@QAE@XZ ENDP ; std::vector<CDungeonBlock *,std::allocator<CDungeonBlock *> >::~vector<CDungeonBlock *,std::allocator<CDungeonBlock *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCGraphicThingInstance@@V?$allocator@PAVCGraphicThingInstance@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCGraphicThingInstance@@V?$allocator@PAVCGraphicThingInstance@@@std@@@std@@CAXXZ PROC ; std::vector<CGraphicThingInstance *,std::allocator<CGraphicThingInstance *> >::_Xlength, COMDAT

; 2138 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCGraphicThingInstance@@V?$allocator@PAVCGraphicThingInstance@@@std@@@std@@CAXXZ ENDP ; std::vector<CGraphicThingInstance *,std::allocator<CGraphicThingInstance *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??1?$vector@PAVCGraphicThingInstance@@V?$allocator@PAVCGraphicThingInstance@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAVCGraphicThingInstance@@V?$allocator@PAVCGraphicThingInstance@@@std@@@std@@QAE@XZ PROC ; std::vector<CGraphicThingInstance *,std::allocator<CGraphicThingInstance *> >::~vector<CGraphicThingInstance *,std::allocator<CGraphicThingInstance *> >, COMDAT
; _this$ = ecx

; 766  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 40		 je	 SHORT $LN4@vector

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000c	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00011	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN20@vector

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00019	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001c	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 22		 ja	 SHORT $LN17@vector

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00029	8b c2		 mov	 eax, edx
$LN20@vector:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0002b	51		 push	 ecx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00038	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2051 :             _Myend   = nullptr;

  00042	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  00049	5e		 pop	 esi

; 772  :     }

  0004a	c3		 ret	 0
$LN17@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN28@vector:
  00050	cc		 int	 3
??1?$vector@PAVCGraphicThingInstance@@V?$allocator@PAVCGraphicThingInstance@@@std@@@std@@QAE@XZ ENDP ; std::vector<CGraphicThingInstance *,std::allocator<CGraphicThingInstance *> >::~vector<CGraphicThingInstance *,std::allocator<CGraphicThingInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?_Xlength@?$vector@PAUSObjectInstance@CArea@@V?$allocator@PAUSObjectInstance@CArea@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAUSObjectInstance@CArea@@V?$allocator@PAUSObjectInstance@CArea@@@std@@@std@@CAXXZ PROC ; std::vector<CArea::SObjectInstance *,std::allocator<CArea::SObjectInstance *> >::_Xlength, COMDAT

; 2138 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAUSObjectInstance@CArea@@V?$allocator@PAUSObjectInstance@CArea@@@std@@@std@@CAXXZ ENDP ; std::vector<CArea::SObjectInstance *,std::allocator<CArea::SObjectInstance *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?_Change_array@?$vector@PAUSObjectInstance@CArea@@V?$allocator@PAUSObjectInstance@CArea@@@std@@@std@@AAEXQAPAUSObjectInstance@CArea@@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@PAUSObjectInstance@CArea@@V?$allocator@PAUSObjectInstance@CArea@@@std@@@std@@AAEXQAPAUSObjectInstance@CArea@@II@Z PROC ; std::vector<CArea::SObjectInstance *,std::allocator<CArea::SObjectInstance *> >::_Change_array, COMDAT
; _this$ = ecx

; 2013 :     _CONSTEXPR20 void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 2014 :         // orphan all iterators, discard old array, acquire new array
; 2015 :         auto& _Al         = _Getal();
; 2016 :         auto& _My_data    = _Mypair._Myval2;
; 2017 :         pointer& _Myfirst = _My_data._Myfirst;
; 2018 :         pointer& _Mylast  = _My_data._Mylast;
; 2019 :         pointer& _Myend   = _My_data._Myend;
; 2020 : 
; 2021 :         _My_data._Orphan_all();
; 2022 : 
; 2023 :         if (_Myfirst) { // destroy and deallocate old array

  00006	8b 06		 mov	 eax, DWORD PTR [esi]
  00008	85 c0		 test	 eax, eax
  0000a	74 2c		 je	 SHORT $LN8@Change_arr

; 2024 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2025 :             _ASAN_VECTOR_REMOVE;
; 2026 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000c	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000f	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00011	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00014	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001a	72 12		 jb	 SHORT $LN18@Change_arr

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001f	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00022	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00024	83 c0 fc	 add	 eax, -4			; fffffffcH
  00027	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002a	77 28		 ja	 SHORT $LN15@Change_arr

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002c	8b c2		 mov	 eax, edx
$LN18@Change_arr:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0002e	51		 push	 ecx
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00035	83 c4 08	 add	 esp, 8
$LN8@Change_arr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2029 :         _Myfirst = _Newvec;

  00038	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]

; 2030 :         _Mylast  = _Newvec + _Newsize;

  0003b	8b 45 0c	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0003e	89 0e		 mov	 DWORD PTR [esi], ecx
  00040	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00043	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 2031 :         _Myend   = _Newvec + _Newcapacity;

  00046	8b 45 10	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00049	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0004c	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0004f	5e		 pop	 esi

; 2033 :     }

  00050	5d		 pop	 ebp
  00051	c2 0c 00	 ret	 12			; 0000000cH
$LN15@Change_arr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00054	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN25@Change_arr:
  00059	cc		 int	 3
?_Change_array@?$vector@PAUSObjectInstance@CArea@@V?$allocator@PAUSObjectInstance@CArea@@@std@@@std@@AAEXQAPAUSObjectInstance@CArea@@II@Z ENDP ; std::vector<CArea::SObjectInstance *,std::allocator<CArea::SObjectInstance *> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??1?$vector@PAUSObjectInstance@CArea@@V?$allocator@PAUSObjectInstance@CArea@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAUSObjectInstance@CArea@@V?$allocator@PAUSObjectInstance@CArea@@@std@@@std@@QAE@XZ PROC ; std::vector<CArea::SObjectInstance *,std::allocator<CArea::SObjectInstance *> >::~vector<CArea::SObjectInstance *,std::allocator<CArea::SObjectInstance *> >, COMDAT
; _this$ = ecx

; 766  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 40		 je	 SHORT $LN4@vector

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000c	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00011	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN20@vector

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00019	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001c	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 22		 ja	 SHORT $LN17@vector

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00029	8b c2		 mov	 eax, edx
$LN20@vector:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0002b	51		 push	 ecx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00038	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2051 :             _Myend   = nullptr;

  00042	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  00049	5e		 pop	 esi

; 772  :     }

  0004a	c3		 ret	 0
$LN17@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN28@vector:
  00050	cc		 int	 3
??1?$vector@PAUSObjectInstance@CArea@@V?$allocator@PAUSObjectInstance@CArea@@@std@@@std@@QAE@XZ ENDP ; std::vector<CArea::SObjectInstance *,std::allocator<CArea::SObjectInstance *> >::~vector<CArea::SObjectInstance *,std::allocator<CArea::SObjectInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?__SetObjectInstance_SetDungeonBlock@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z
_TEXT	SEGMENT
_this$1$ = -104						; size = 4
_c_pData$GSCopy$1$ = -100				; size = 4
$T2 = -96						; size = 4
_pkNewData$3 = -96					; size = 4
$T4 = -92						; size = 4
_Data$ = -88						; size = 72
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pObjectInstance$ = 8					; size = 4
_c_pData$ = 12						; size = 4
_pProperty$ = 16					; size = 4
?__SetObjectInstance_SetDungeonBlock@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z PROC ; CArea::__SetObjectInstance_SetDungeonBlock, COMDAT
; _this$ = ecx

; 707  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?__SetObjectInstance_SetDungeonBlock@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d 98	 mov	 DWORD PTR _this$1$[ebp], ecx
  0002d	8b 75 0c	 mov	 esi, DWORD PTR _c_pData$[ebp]
  00030	0f 57 c0	 xorps	 xmm0, xmm0
  00033	8b 7d 08	 mov	 edi, DWORD PTR _pObjectInstance$[ebp]
  00036	8b 45 10	 mov	 eax, DWORD PTR _pProperty$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00039	0f 11 45 a8	 movups	 XMMWORD PTR _Data$[ebp], xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 707  : {

  0003d	89 75 9c	 mov	 DWORD PTR _c_pData$GSCopy$1$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00040	0f 11 45 c0	 movups	 XMMWORD PTR _Data$[ebp+24], xmm0

; 4821 :         _My_data._Mysize = 0;

  00044	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _Data$[ebp+16], 0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0004b	0f 11 45 d8	 movups	 XMMWORD PTR _Data$[ebp+48], xmm0

; 4822 :         _My_data._Myres  = _BUF_SIZE - 1;

  0004f	c7 45 bc 0f 00
	00 00		 mov	 DWORD PTR _Data$[ebp+20], 15 ; 0000000fH

; 4823 :         _My_data._Activate_SSO_buffer();
; 4824 : 
; 4825 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4826 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00056	c6 45 a8 00	 mov	 BYTE PTR _Data$[ebp], 0

; 4821 :         _My_data._Mysize = 0;

  0005a	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _Data$[ebp+40], 0

; 4822 :         _My_data._Myres  = _BUF_SIZE - 1;

  00061	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR _Data$[ebp+44], 15 ; 0000000fH

; 4823 :         _My_data._Activate_SSO_buffer();
; 4824 : 
; 4825 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4826 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00068	c6 45 c0 00	 mov	 BYTE PTR _Data$[ebp+24], 0

; 4821 :         _My_data._Mysize = 0;

  0006c	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _Data$[ebp+64], 0

; 4822 :         _My_data._Myres  = _BUF_SIZE - 1;

  00073	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _Data$[ebp+68], 15 ; 0000000fH

; 4823 :         _My_data._Activate_SSO_buffer();
; 4824 : 
; 4825 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4826 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0007a	c6 45 d8 00	 mov	 BYTE PTR _Data$[ebp+48], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 709  : 	if (!prt::PropertyDungeonBlockStringToData(pProperty, &Data))

  0007e	8d 4d a8	 lea	 ecx, DWORD PTR _Data$[ebp]
  00081	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00088	51		 push	 ecx
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 ?PropertyDungeonBlockStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyDungeonBlock@1@@Z ; prt::PropertyDungeonBlockStringToData
  0008f	83 c4 08	 add	 esp, 8
  00092	84 c0		 test	 al, al
  00094	0f 84 49 01 00
	00		 je	 $LN9@SetObjectI

; 710  : 		return;
; 711  : 
; 712  : 	pObjectInstance->dwType = prt::PROPERTY_TYPE_DUNGEON_BLOCK;

  0009a	c7 47 04 05 00
	00 00		 mov	 DWORD PTR [edi+4], 5
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1864 :         return _My_data._Myfirst == _My_data._Mylast;

  000a1	a1 14 00 00 00	 mov	 eax, DWORD PTR ?ms_DungeonBlockInstancePool@CArea@@1V?$CDynamicPool@VCDungeonBlock@@@@A+20
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 63   : 			if (m_kVct_pkFree.empty())

  000a6	39 05 10 00 00
	00		 cmp	 DWORD PTR ?ms_DungeonBlockInstancePool@CArea@@1V?$CDynamicPool@VCDungeonBlock@@@@A+16, eax
  000ac	75 6a		 jne	 SHORT $LN53@SetObjectI

; 65   : 				T* pkNewData=new T;

  000ae	68 88 02 00 00	 push	 648			; 00000288H
  000b3	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000b8	83 c4 04	 add	 esp, 4
  000bb	89 45 a0	 mov	 DWORD PTR $T2[ebp], eax
  000be	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000c2	85 c0		 test	 eax, eax
  000c4	74 0e		 je	 SHORT $LN55@SetObjectI
  000c6	8b c8		 mov	 ecx, eax
  000c8	e8 00 00 00 00	 call	 ??0CDungeonBlock@@QAE@XZ ; CDungeonBlock::CDungeonBlock
  000cd	8b c8		 mov	 ecx, eax
  000cf	89 45 a4	 mov	 DWORD PTR $T4[ebp], eax
  000d2	eb 05		 jmp	 SHORT $LN56@SetObjectI
$LN55@SetObjectI:
  000d4	33 c9		 xor	 ecx, ecx
  000d6	89 4d a4	 mov	 DWORD PTR $T4[ebp], ecx
$LN56@SetObjectI:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  000d9	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ms_DungeonBlockInstancePool@CArea@@1V?$CDynamicPool@VCDungeonBlock@@@@A+8
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 65   : 				T* pkNewData=new T;

  000de	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000e2	89 4d a0	 mov	 DWORD PTR _pkNewData$3[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  000e5	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?ms_DungeonBlockInstancePool@CArea@@1V?$CDynamicPool@VCDungeonBlock@@@@A+12
  000eb	74 11		 je	 SHORT $LN63@SetObjectI

; 797  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  000ed	89 08		 mov	 DWORD PTR [eax], ecx

; 798  :         } else {
; 799  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 800  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 801  :             _ASAN_VECTOR_RELEASE_GUARD;
; 802  :         }
; 803  : 
; 804  :         _Orphan_range(_Mylast, _Mylast);
; 805  :         _Ty& _Result = *_Mylast;
; 806  :         ++_Mylast;

  000ef	83 05 08 00 00
	00 04		 add	 DWORD PTR ?ms_DungeonBlockInstancePool@CArea@@1V?$CDynamicPool@VCDungeonBlock@@@@A+8, 4
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 67   : 				++m_uUsedCapacity;

  000f6	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_DungeonBlockInstancePool@CArea@@1V?$CDynamicPool@VCDungeonBlock@@@@A+32

; 68   : 				return pkNewData;

  000fc	eb 25		 jmp	 SHORT $LN52@SetObjectI
$LN63@SetObjectI:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  000fe	8d 4d a0	 lea	 ecx, DWORD PTR _pkNewData$3[ebp]
  00101	51		 push	 ecx
  00102	50		 push	 eax
  00103	b9 04 00 00 00	 mov	 ecx, OFFSET ?ms_DungeonBlockInstancePool@CArea@@1V?$CDynamicPool@VCDungeonBlock@@@@A+4
  00108	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCDungeonBlock@@@?$vector@PAVCDungeonBlock@@V?$allocator@PAVCDungeonBlock@@@std@@@std@@AAEPAPAVCDungeonBlock@@QAPAV2@ABQAV2@@Z ; std::vector<CDungeonBlock *,std::allocator<CDungeonBlock *> >::_Emplace_reallocate<CDungeonBlock * const &>
  0010d	8b 4d a4	 mov	 ecx, DWORD PTR $T4[ebp]
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 67   : 				++m_uUsedCapacity;

  00110	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_DungeonBlockInstancePool@CArea@@1V?$CDynamicPool@VCDungeonBlock@@@@A+32

; 68   : 				return pkNewData;

  00116	eb 0b		 jmp	 SHORT $LN52@SetObjectI
$LN53@SetObjectI:

; 69   : 			}
; 70   : 
; 71   : 			T* pkFreeData=m_kVct_pkFree.back();

  00118	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1713 :         --_Mylast;

  0011b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0011e	a3 14 00 00 00	 mov	 DWORD PTR ?ms_DungeonBlockInstancePool@CArea@@1V?$CDynamicPool@VCDungeonBlock@@@@A+20, eax
$LN52@SetObjectI:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00123	83 7d d4 10	 cmp	 DWORD PTR _Data$[ebp+44], 16 ; 00000010H

; 2235 :         const value_type* _Result = _Bx._Buf;

  00127	8d 45 c0	 lea	 eax, DWORD PTR _Data$[ebp+24]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 713  : 	pObjectInstance->pDungeonBlock = ms_DungeonBlockInstancePool.Alloc();

  0012a	89 4f 24	 mov	 DWORD PTR [edi+36], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  0012d	0f 43 45 c0	 cmovae	 eax, DWORD PTR _Data$[ebp+24]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 714  : 	pObjectInstance->pDungeonBlock->Load(Data.strFileName.c_str());

  00131	50		 push	 eax
  00132	e8 00 00 00 00	 call	 ?Load@CDungeonBlock@@QAE_NPBD@Z ; CDungeonBlock::Load

; 715  : 	pObjectInstance->pDungeonBlock->SetPosition(c_pData->Position.x, c_pData->Position.y, c_pData->Position.z + c_pData->m_fHeightBias);

  00137	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [esi+36]
  0013c	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0013f	f3 0f 58 46 08	 addss	 xmm0, DWORD PTR [esi+8]
  00144	8b 4f 24	 mov	 ecx, DWORD PTR [edi+36]
  00147	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0014d	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  00152	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00158	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  0015c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00161	e8 00 00 00 00	 call	 ?SetPosition@CGraphicObjectInstance@@QAEXMMM@Z ; CGraphicObjectInstance::SetPosition

; 716  : 	pObjectInstance->pDungeonBlock->SetRotation(

  00166	f3 0f 10 46 20	 movss	 xmm0, DWORD PTR [esi+32]
  0016b	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0016e	8b 4f 24	 mov	 ecx, DWORD PTR [edi+36]
  00171	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00177	f3 0f 10 46 1c	 movss	 xmm0, DWORD PTR [esi+28]
  0017c	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00182	f3 0f 10 46 18	 movss	 xmm0, DWORD PTR [esi+24]
  00187	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018c	e8 00 00 00 00	 call	 ?SetRotation@CGraphicObjectInstance@@QAEXMMM@Z ; CGraphicObjectInstance::SetRotation

; 717  : 		c_pData->m_fYaw,
; 718  : 		c_pData->m_fPitch,
; 719  : 		c_pData->m_fRoll
; 720  : 	);
; 721  : 	pObjectInstance->pDungeonBlock->Update();

  00191	8b 4f 24	 mov	 ecx, DWORD PTR [edi+36]
  00194	e8 00 00 00 00	 call	 ?Update@CDungeonBlock@@QAEXXZ ; CDungeonBlock::Update

; 722  : 	pObjectInstance->pDungeonBlock->BuildBoundingSphere();

  00199	8b 4f 24	 mov	 ecx, DWORD PTR [edi+36]
  0019c	e8 00 00 00 00	 call	 ?BuildBoundingSphere@CDungeonBlock@@QAEXXZ ; CDungeonBlock::BuildBoundingSphere

; 723  : 	pObjectInstance->pDungeonBlock->RegisterBoundingSphere();

  001a1	8b 4f 24	 mov	 ecx, DWORD PTR [edi+36]
  001a4	e8 00 00 00 00	 call	 ?RegisterBoundingSphere@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::RegisterBoundingSphere
  001a9	33 f6		 xor	 esi, esi
  001ab	0f 1f 44 00 00	 npad	 5
$LL4@SetObjectI:

; 725  : 		if (0 != c_pData->abyPortalID[j])

  001b0	8b 45 9c	 mov	 eax, DWORD PTR _c_pData$GSCopy$1$[ebp]
  001b3	8a 44 30 10	 mov	 al, BYTE PTR [eax+esi+16]
  001b7	84 c0		 test	 al, al
  001b9	74 0d		 je	 SHORT $LN2@SetObjectI

; 726  : 			pObjectInstance->pDungeonBlock->SetPortal(j, c_pData->abyPortalID[j]);

  001bb	8b 4f 24	 mov	 ecx, DWORD PTR [edi+36]
  001be	0f b6 c0	 movzx	 eax, al
  001c1	50		 push	 eax
  001c2	56		 push	 esi
  001c3	e8 00 00 00 00	 call	 ?SetPortal@CGraphicObjectInstance@@QAEXKH@Z ; CGraphicObjectInstance::SetPortal
$LN2@SetObjectI:

; 724  : 	for (int j = 0; j < PORTAL_ID_MAX_NUM; ++j)

  001c8	46		 inc	 esi
  001c9	83 fe 08	 cmp	 esi, 8
  001cc	7c e2		 jl	 SHORT $LL4@SetObjectI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  001ce	83 7d ec 10	 cmp	 DWORD PTR _Data$[ebp+68], 16 ; 00000010H

; 2235 :         const value_type* _Result = _Bx._Buf;

  001d2	8d 45 d8	 lea	 eax, DWORD PTR _Data$[ebp+48]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 727  : 	__LoadAttribute(pObjectInstance, Data.strAttributeDataFileName.c_str());

  001d5	8b 4d 98	 mov	 ecx, DWORD PTR _this$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  001d8	0f 43 45 d8	 cmovae	 eax, DWORD PTR _Data$[ebp+48]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 727  : 	__LoadAttribute(pObjectInstance, Data.strAttributeDataFileName.c_str());

  001dc	50		 push	 eax
  001dd	57		 push	 edi
  001de	e8 00 00 00 00	 call	 ?__LoadAttribute@CArea@@IAEXPAUSObjectInstance@1@PBD@Z ; CArea::__LoadAttribute
$LN9@SetObjectI:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  001e3	8b 4d ec	 mov	 ecx, DWORD PTR _Data$[ebp+68]
  001e6	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  001e9	72 2c		 jb	 SHORT $LN100@SetObjectI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001eb	8b 55 d8	 mov	 edx, DWORD PTR _Data$[ebp+48]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  001ee	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001ef	8b c2		 mov	 eax, edx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  001f1	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001f7	72 14		 jb	 SHORT $LN110@SetObjectI

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001f9	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  001fc	83 c1 23	 add	 ecx, 35			; 00000023H
  001ff	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00201	83 c0 fc	 add	 eax, -4			; fffffffcH
  00204	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00207	0f 87 ab 00 00
	00		 ja	 $LN162@SetObjectI
$LN110@SetObjectI:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0020d	51		 push	 ecx
  0020e	52		 push	 edx
  0020f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00214	83 c4 08	 add	 esp, 8
$LN100@SetObjectI:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00217	8b 4d d4	 mov	 ecx, DWORD PTR _Data$[ebp+44]

; 4841 :         _My_data._Mysize = 0;

  0021a	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _Data$[ebp+64], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  00221	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _Data$[ebp+68], 15 ; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00228	c6 45 d8 00	 mov	 BYTE PTR _Data$[ebp+48], 0

; 2244 :         return _BUF_SIZE <= _Myres;

  0022c	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  0022f	72 28		 jb	 SHORT $LN128@SetObjectI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00231	8b 55 c0	 mov	 edx, DWORD PTR _Data$[ebp+24]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00234	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00235	8b c2		 mov	 eax, edx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00237	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0023d	72 10		 jb	 SHORT $LN138@SetObjectI

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0023f	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00242	83 c1 23	 add	 ecx, 35			; 00000023H
  00245	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00247	83 c0 fc	 add	 eax, -4			; fffffffcH
  0024a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0024d	77 69		 ja	 SHORT $LN162@SetObjectI
$LN138@SetObjectI:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0024f	51		 push	 ecx
  00250	52		 push	 edx
  00251	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00256	83 c4 08	 add	 esp, 8
$LN128@SetObjectI:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00259	8b 4d bc	 mov	 ecx, DWORD PTR _Data$[ebp+20]

; 4841 :         _My_data._Mysize = 0;

  0025c	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _Data$[ebp+40], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  00263	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR _Data$[ebp+44], 15 ; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0026a	c6 45 c0 00	 mov	 BYTE PTR _Data$[ebp+24], 0

; 2244 :         return _BUF_SIZE <= _Myres;

  0026e	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  00271	72 28		 jb	 SHORT $LN155@SetObjectI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00273	8b 55 a8	 mov	 edx, DWORD PTR _Data$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00276	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00277	8b c2		 mov	 eax, edx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00279	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0027f	72 10		 jb	 SHORT $LN165@SetObjectI

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00281	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00284	83 c1 23	 add	 ecx, 35			; 00000023H
  00287	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00289	83 c0 fc	 add	 eax, -4			; fffffffcH
  0028c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0028f	77 27		 ja	 SHORT $LN162@SetObjectI
$LN165@SetObjectI:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00291	51		 push	 ecx
  00292	52		 push	 edx
  00293	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00298	83 c4 08	 add	 esp, 8
$LN155@SetObjectI:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 728  : }

  0029b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0029e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002a5	59		 pop	 ecx
  002a6	5f		 pop	 edi
  002a7	5e		 pop	 esi
  002a8	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002ab	33 cd		 xor	 ecx, ebp
  002ad	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002b2	8b e5		 mov	 esp, ebp
  002b4	5d		 pop	 ebp
  002b5	c2 0c 00	 ret	 12			; 0000000cH
$LN162@SetObjectI:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  002b8	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN176@SetObjectI:
  002bd	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?__SetObjectInstance_SetDungeonBlock@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z$0:
  00000	8d 4d a8	 lea	 ecx, DWORD PTR _Data$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1TPropertyDungeonBlock@prt@@QAE@XZ
__unwindfunclet$?__SetObjectInstance_SetDungeonBlock@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z$11:
  00008	68 88 02 00 00	 push	 648			; 00000288H
  0000d	8b 45 a0	 mov	 eax, DWORD PTR $T2[ebp]
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00016	83 c4 08	 add	 esp, 8
  00019	c3		 ret	 0
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
__ehhandler$?__SetObjectInstance_SetDungeonBlock@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z:
  0001f	90		 npad	 1
  00020	90		 npad	 1
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a 98	 mov	 ecx, DWORD PTR [edx-104]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?__SetObjectInstance_SetDungeonBlock@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?__SetObjectInstance_SetDungeonBlock@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z ENDP ; CArea::__SetObjectInstance_SetDungeonBlock
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?__SetObjectInstance_SetAmbience@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
_pkNewData$3 = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pObjectInstance$ = 8					; size = 4
_c_pData$ = 12						; size = 4
_pProperty$ = 16					; size = 4
?__SetObjectInstance_SetAmbience@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z PROC ; CArea::__SetObjectInstance_SetAmbience, COMDAT
; _this$ = ecx

; 678  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?__SetObjectInstance_SetAmbience@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1864 :         return _My_data._Myfirst == _My_data._Mylast;

  00026	a1 14 00 00 00	 mov	 eax, DWORD PTR ?ms_AmbienceInstancePool@CArea@@1V?$CDynamicPool@USAmbienceInstance@CArea@@@@A+20
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 63   : 			if (m_kVct_pkFree.empty())

  0002b	39 05 10 00 00
	00		 cmp	 DWORD PTR ?ms_AmbienceInstancePool@CArea@@1V?$CDynamicPool@USAmbienceInstance@CArea@@@@A+16, eax
  00031	75 64		 jne	 SHORT $LN10@SetObjectI

; 65   : 				T* pkNewData=new T;

  00033	6a 6c		 push	 108			; 0000006cH
  00035	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003a	83 c4 04	 add	 esp, 4
  0003d	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00047	85 c0		 test	 eax, eax
  00049	74 0b		 je	 SHORT $LN12@SetObjectI
  0004b	8b c8		 mov	 ecx, eax
  0004d	e8 00 00 00 00	 call	 ??0SAmbienceInstance@CArea@@QAE@XZ ; CArea::SAmbienceInstance::SAmbienceInstance
  00052	8b f0		 mov	 esi, eax
  00054	eb 02		 jmp	 SHORT $LN13@SetObjectI
$LN12@SetObjectI:
  00056	33 f6		 xor	 esi, esi
$LN13@SetObjectI:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  00058	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ms_AmbienceInstancePool@CArea@@1V?$CDynamicPool@USAmbienceInstance@CArea@@@@A+8
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 65   : 				T* pkNewData=new T;

  0005d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00064	89 75 f0	 mov	 DWORD PTR _pkNewData$3[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  00067	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?ms_AmbienceInstancePool@CArea@@1V?$CDynamicPool@USAmbienceInstance@CArea@@@@A+12
  0006d	74 11		 je	 SHORT $LN20@SetObjectI

; 797  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  0006f	89 30		 mov	 DWORD PTR [eax], esi

; 798  :         } else {
; 799  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 800  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 801  :             _ASAN_VECTOR_RELEASE_GUARD;
; 802  :         }
; 803  : 
; 804  :         _Orphan_range(_Mylast, _Mylast);
; 805  :         _Ty& _Result = *_Mylast;
; 806  :         ++_Mylast;

  00071	83 05 08 00 00
	00 04		 add	 DWORD PTR ?ms_AmbienceInstancePool@CArea@@1V?$CDynamicPool@USAmbienceInstance@CArea@@@@A+8, 4
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 67   : 				++m_uUsedCapacity;

  00078	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_AmbienceInstancePool@CArea@@1V?$CDynamicPool@USAmbienceInstance@CArea@@@@A+32

; 68   : 				return pkNewData;

  0007e	eb 22		 jmp	 SHORT $LN9@SetObjectI
$LN20@SetObjectI:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00080	8d 4d f0	 lea	 ecx, DWORD PTR _pkNewData$3[ebp]
  00083	51		 push	 ecx
  00084	50		 push	 eax
  00085	b9 04 00 00 00	 mov	 ecx, OFFSET ?ms_AmbienceInstancePool@CArea@@1V?$CDynamicPool@USAmbienceInstance@CArea@@@@A+4
  0008a	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAUSAmbienceInstance@CArea@@@?$vector@PAUSAmbienceInstance@CArea@@V?$allocator@PAUSAmbienceInstance@CArea@@@std@@@std@@AAEPAPAUSAmbienceInstance@CArea@@QAPAU23@ABQAU23@@Z ; std::vector<CArea::SAmbienceInstance *,std::allocator<CArea::SAmbienceInstance *> >::_Emplace_reallocate<CArea::SAmbienceInstance * const &>
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 67   : 				++m_uUsedCapacity;

  0008f	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_AmbienceInstancePool@CArea@@1V?$CDynamicPool@USAmbienceInstance@CArea@@@@A+32

; 68   : 				return pkNewData;

  00095	eb 0b		 jmp	 SHORT $LN9@SetObjectI
$LN10@SetObjectI:

; 69   : 			}
; 70   : 
; 71   : 			T* pkFreeData=m_kVct_pkFree.back();

  00097	8b 70 fc	 mov	 esi, DWORD PTR [eax-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1713 :         --_Mylast;

  0009a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0009d	a3 14 00 00 00	 mov	 DWORD PTR ?ms_AmbienceInstancePool@CArea@@1V?$CDynamicPool@USAmbienceInstance@CArea@@@@A+20, eax
$LN9@SetObjectI:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 679  : 	pObjectInstance->pAmbienceInstance = ms_AmbienceInstancePool.Alloc();

  000a2	8b 7d 08	 mov	 edi, DWORD PTR _pObjectInstance$[ebp]

; 680  :  	if (!prt::PropertyAmbienceStringToData(pProperty, &pObjectInstance->pAmbienceInstance->AmbienceData))

  000a5	8d 46 20	 lea	 eax, DWORD PTR [esi+32]
  000a8	50		 push	 eax
  000a9	ff 75 10	 push	 DWORD PTR _pProperty$[ebp]
  000ac	89 77 20	 mov	 DWORD PTR [edi+32], esi
  000af	e8 00 00 00 00	 call	 ?PropertyAmbienceStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyAmbience@1@@Z ; prt::PropertyAmbienceStringToData
  000b4	83 c4 08	 add	 esp, 8
  000b7	84 c0		 test	 al, al
  000b9	0f 84 d1 00 00
	00		 je	 $LN7@SetObjectI

; 681  : 		return;
; 682  : 
; 683  : 	pObjectInstance->dwType = prt::PROPERTY_TYPE_AMBIENCE;
; 684  : 
; 685  : 	TAmbienceInstance * pAmbienceInstance = pObjectInstance->pAmbienceInstance;
; 686  : 	pAmbienceInstance->fx = c_pData->Position.x;

  000bf	8b 4d 0c	 mov	 ecx, DWORD PTR _c_pData$[ebp]
  000c2	c7 47 04 04 00
	00 00		 mov	 DWORD PTR [edi+4], 4
  000c9	8b 7f 20	 mov	 edi, DWORD PTR [edi+32]

; 692  : 	if (0 == pAmbienceInstance->AmbienceData.strPlayType.compare("ONCE"))

  000cc	8d 77 38	 lea	 esi, DWORD PTR [edi+56]
  000cf	8b 01		 mov	 eax, DWORD PTR [ecx]
  000d1	89 47 04	 mov	 DWORD PTR [edi+4], eax
  000d4	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000d7	89 47 08	 mov	 DWORD PTR [edi+8], eax
  000da	f3 0f 10 41 24	 movss	 xmm0, DWORD PTR [ecx+36]
  000df	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  000e4	f3 0f 11 47 0c	 movss	 DWORD PTR [edi+12], xmm0
  000e9	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]
  000ec	89 47 10	 mov	 DWORD PTR [edi+16], eax
  000ef	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  000f2	89 47 14	 mov	 DWORD PTR [edi+20], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2235 :         const value_type* _Result = _Bx._Buf;

  000f5	8b c6		 mov	 eax, esi

; 2244 :         return _BUF_SIZE <= _Myres;

  000f7	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2236 :         if (_Large_string_engaged()) {

  000fb	72 02		 jb	 SHORT $LN57@SetObjectI

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  000fd	8b 06		 mov	 eax, DWORD PTR [esi]
$LN57@SetObjectI:

; 4648 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize, _Ptr, _Traits::length(_Ptr));

  000ff	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  00102	6a 04		 push	 4
  00104	68 00 00 00 00	 push	 OFFSET ??_C@_04GHGHGAKN@ONCE@
  00109	53		 push	 ebx
  0010a	50		 push	 eax
  0010b	e8 00 00 00 00	 call	 ??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z ; std::_Traits_compare<std::char_traits<char> >
  00110	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 692  : 	if (0 == pAmbienceInstance->AmbienceData.strPlayType.compare("ONCE"))

  00113	85 c0		 test	 eax, eax
  00115	75 1b		 jne	 SHORT $LN3@SetObjectI

; 693  : 	{
; 694  : 		pAmbienceInstance->Update = &TAmbienceInstance::UpdateOnceSound;

  00117	c7 47 68 00 00
	00 00		 mov	 DWORD PTR [edi+104], OFFSET ?UpdateOnceSound@SAmbienceInstance@CArea@@QAEXMMM@Z ; CArea::SAmbienceInstance::UpdateOnceSound

; 703  : 	}
; 704  : }

  0011e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00121	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00128	59		 pop	 ecx
  00129	5f		 pop	 edi
  0012a	5e		 pop	 esi
  0012b	5b		 pop	 ebx
  0012c	8b e5		 mov	 esp, ebp
  0012e	5d		 pop	 ebp
  0012f	c2 0c 00	 ret	 12			; 0000000cH
$LN3@SetObjectI:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00132	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2235 :         const value_type* _Result = _Bx._Buf;

  00136	8b c6		 mov	 eax, esi

; 2236 :         if (_Large_string_engaged()) {

  00138	72 02		 jb	 SHORT $LN58@SetObjectI

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  0013a	8b 06		 mov	 eax, DWORD PTR [esi]
$LN58@SetObjectI:

; 4648 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize, _Ptr, _Traits::length(_Ptr));

  0013c	6a 04		 push	 4
  0013e	68 00 00 00 00	 push	 OFFSET ??_C@_04MOOLDHHD@STEP@
  00143	53		 push	 ebx
  00144	50		 push	 eax
  00145	e8 00 00 00 00	 call	 ??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z ; std::_Traits_compare<std::char_traits<char> >
  0014a	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 696  : 	else if (0 == pAmbienceInstance->AmbienceData.strPlayType.compare("STEP"))

  0014d	85 c0		 test	 eax, eax
  0014f	75 1b		 jne	 SHORT $LN5@SetObjectI

; 697  : 	{
; 698  : 		pAmbienceInstance->Update = &TAmbienceInstance::UpdateStepSound;

  00151	c7 47 68 00 00
	00 00		 mov	 DWORD PTR [edi+104], OFFSET ?UpdateStepSound@SAmbienceInstance@CArea@@QAEXMMM@Z ; CArea::SAmbienceInstance::UpdateStepSound

; 703  : 	}
; 704  : }

  00158	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0015b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00162	59		 pop	 ecx
  00163	5f		 pop	 edi
  00164	5e		 pop	 esi
  00165	5b		 pop	 ebx
  00166	8b e5		 mov	 esp, ebp
  00168	5d		 pop	 ebp
  00169	c2 0c 00	 ret	 12			; 0000000cH
$LN5@SetObjectI:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  0016c	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2236 :         if (_Large_string_engaged()) {

  00170	72 02		 jb	 SHORT $LN51@SetObjectI

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  00172	8b 36		 mov	 esi, DWORD PTR [esi]
$LN51@SetObjectI:

; 4648 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize, _Ptr, _Traits::length(_Ptr));

  00174	6a 04		 push	 4
  00176	68 00 00 00 00	 push	 OFFSET ??_C@_04KGNEGCGI@LOOP@
  0017b	53		 push	 ebx
  0017c	56		 push	 esi
  0017d	e8 00 00 00 00	 call	 ??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z ; std::_Traits_compare<std::char_traits<char> >
  00182	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 700  : 	else if (0 == pAmbienceInstance->AmbienceData.strPlayType.compare("LOOP"))

  00185	85 c0		 test	 eax, eax
  00187	75 07		 jne	 SHORT $LN7@SetObjectI

; 701  : 	{
; 702  : 		pAmbienceInstance->Update = &TAmbienceInstance::UpdateLoopSound;

  00189	c7 47 68 00 00
	00 00		 mov	 DWORD PTR [edi+104], OFFSET ?UpdateLoopSound@SAmbienceInstance@CArea@@QAEXMMM@Z ; CArea::SAmbienceInstance::UpdateLoopSound
$LN7@SetObjectI:

; 703  : 	}
; 704  : }

  00190	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00193	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0019a	59		 pop	 ecx
  0019b	5f		 pop	 edi
  0019c	5e		 pop	 esi
  0019d	5b		 pop	 ebx
  0019e	8b e5		 mov	 esp, ebp
  001a0	5d		 pop	 ebp
  001a1	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?__SetObjectInstance_SetAmbience@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z$0:
  00000	6a 6c		 push	 108			; 0000006cH
  00002	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
  0000f	cc		 int	 3
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
__ehhandler$?__SetObjectInstance_SetAmbience@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z:
  00014	90		 npad	 1
  00015	90		 npad	 1
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?__SetObjectInstance_SetAmbience@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?__SetObjectInstance_SetAmbience@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z ENDP ; CArea::__SetObjectInstance_SetAmbience
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?__SetObjectInstance_SetEffect@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z
_TEXT	SEGMENT
$T2 = -176						; size = 12
__Loc$3 = -164						; size = 12
_pData$ = -152						; size = 4
$T4 = -148						; size = 8
$T5 = -148						; size = 8
_pEffectInstance$ = -140				; size = 4
$T6 = -136						; size = 4
_this$GSCopy$1$ = -136					; size = 4
$T7 = -132						; size = 4
_c_pData$GSCopy$1$ = -132				; size = 4
_mat$ = -128						; size = 64
_Data$ = -64						; size = 48
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pObjectInstance$ = 8					; size = 4
_c_pData$ = 12						; size = 4
_pProperty$ = 16					; size = 4
?__SetObjectInstance_SetEffect@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z PROC ; CArea::__SetObjectInstance_SetEffect, COMDAT
; _this$ = ecx

; 544  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?__SetObjectInstance_SetEffect@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec a4 00 00
	00		 sub	 esp, 164		; 000000a4H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	89 8d 78 ff ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  00033	8b 45 0c	 mov	 eax, DWORD PTR _c_pData$[ebp]
  00036	0f 57 c0	 xorps	 xmm0, xmm0
  00039	8b 75 08	 mov	 esi, DWORD PTR _pObjectInstance$[ebp]
  0003c	89 85 7c ff ff
	ff		 mov	 DWORD PTR _c_pData$GSCopy$1$[ebp], eax
  00042	8b 45 10	 mov	 eax, DWORD PTR _pProperty$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00045	0f 11 45 c0	 movups	 XMMWORD PTR _Data$[ebp], xmm0

; 4821 :         _My_data._Mysize = 0;

  00049	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _Data$[ebp+16], 0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00050	0f 11 45 d8	 movups	 XMMWORD PTR _Data$[ebp+24], xmm0

; 4822 :         _My_data._Myres  = _BUF_SIZE - 1;

  00054	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR _Data$[ebp+20], 15 ; 0000000fH

; 4823 :         _My_data._Activate_SSO_buffer();
; 4824 : 
; 4825 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4826 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0005b	c6 45 c0 00	 mov	 BYTE PTR _Data$[ebp], 0

; 4821 :         _My_data._Mysize = 0;

  0005f	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _Data$[ebp+40], 0

; 4822 :         _My_data._Myres  = _BUF_SIZE - 1;

  00066	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _Data$[ebp+44], 15 ; 0000000fH

; 4823 :         _My_data._Activate_SSO_buffer();
; 4824 : 
; 4825 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4826 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0006d	c6 45 d8 00	 mov	 BYTE PTR _Data$[ebp+24], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 546  : 	if (!prt::PropertyEffectStringToData(pProperty, &Data))

  00071	8d 4d c0	 lea	 ecx, DWORD PTR _Data$[ebp]
  00074	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0007b	51		 push	 ecx
  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ?PropertyEffectStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyEffect@1@@Z ; prt::PropertyEffectStringToData
  00082	83 c4 08	 add	 esp, 8
  00085	84 c0		 test	 al, al
  00087	0f 84 cb 01 00
	00		 je	 $LN139@SetObjectI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  0008d	83 7d ec 10	 cmp	 DWORD PTR _Data$[ebp+44], 16 ; 00000010H
  00091	8d 45 d8	 lea	 eax, DWORD PTR _Data$[ebp+24]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 550  : 	pObjectInstance->dwEffectID = GetCaseCRC32(Data.strFileName.c_str(),Data.strFileName.size());

  00094	ff 75 e8	 push	 DWORD PTR _Data$[ebp+40]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  00097	0f 43 45 d8	 cmovae	 eax, DWORD PTR _Data$[ebp+24]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 550  : 	pObjectInstance->dwEffectID = GetCaseCRC32(Data.strFileName.c_str(),Data.strFileName.size());

  0009b	50		 push	 eax
  0009c	c7 46 04 03 00
	00 00		 mov	 DWORD PTR [esi+4], 3
  000a3	e8 00 00 00 00	 call	 ?GetCaseCRC32@@YAKPBDI@Z ; GetCaseCRC32
  000a8	83 c4 08	 add	 esp, 8
  000ab	89 46 18	 mov	 DWORD PTR [esi+24], eax

; 551  : 	CEffectManager & rem = CEffectManager::Instance();

  000ae	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?ms_singleton@?$CSingleton@VCEffectManager@@@@0PAVCEffectManager@@A ; CSingleton<CEffectManager>::ms_singleton

; 552  : 	CEffectData * pData;
; 553  : 	if (!rem.GetEffectData(pObjectInstance->dwEffectID,&pData))

  000b4	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _pData$[ebp]
  000ba	51		 push	 ecx
  000bb	50		 push	 eax
  000bc	8b cf		 mov	 ecx, edi
  000be	e8 00 00 00 00	 call	 ?GetEffectData@CEffectManager@@QAE_NKPAPAVCEffectData@@@Z ; CEffectManager::GetEffectData
  000c3	84 c0		 test	 al, al
  000c5	75 40		 jne	 SHORT $LN4@SetObjectI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  000c7	83 7d ec 10	 cmp	 DWORD PTR _Data$[ebp+44], 16 ; 00000010H
  000cb	8d 45 d8	 lea	 eax, DWORD PTR _Data$[ebp+24]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 555  : 		if (!rem.RegisterEffect(Data.strFileName.c_str()))

  000ce	6a 00		 push	 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  000d0	0f 43 45 d8	 cmovae	 eax, DWORD PTR _Data$[ebp+24]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 555  : 		if (!rem.RegisterEffect(Data.strFileName.c_str()))

  000d4	8b cf		 mov	 ecx, edi
  000d6	6a 00		 push	 0
  000d8	50		 push	 eax
  000d9	e8 00 00 00 00	 call	 ?RegisterEffect@CEffectManager@@QAEHPBD_N1@Z ; CEffectManager::RegisterEffect
  000de	85 c0		 test	 eax, eax
  000e0	75 25		 jne	 SHORT $LN4@SetObjectI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  000e2	83 7d ec 10	 cmp	 DWORD PTR _Data$[ebp+44], 16 ; 00000010H

; 2235 :         const value_type* _Result = _Bx._Buf;

  000e6	8d 45 d8	 lea	 eax, DWORD PTR _Data$[ebp+24]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 557  : 			pObjectInstance->dwEffectID = 0xffffffff;

  000e9	c7 46 18 ff ff
	ff ff		 mov	 DWORD PTR [esi+24], -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  000f0	0f 43 45 d8	 cmovae	 eax, DWORD PTR _Data$[ebp+24]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 558  : 			TraceError("CArea::SetEffect effect register error %s\n",Data.strFileName.c_str());

  000f4	50		 push	 eax
  000f5	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@BOJNBGJP@CArea?3?3SetEffect?5effect?5registe@
  000fa	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  000ff	83 c4 08	 add	 esp, 8
  00102	e9 51 01 00 00	 jmp	 $LN139@SetObjectI
$LN4@SetObjectI:

; 559  : 			return;
; 560  : 		}
; 561  : 	}
; 562  : 
; 563  : 	CEffectInstance * pEffectInstance;
; 564  : 	rem.CreateUnsafeEffectInstance(pObjectInstance->dwEffectID, &pEffectInstance);

  00107	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _pEffectInstance$[ebp]
  0010d	8b cf		 mov	 ecx, edi
  0010f	50		 push	 eax
  00110	ff 76 18	 push	 DWORD PTR [esi+24]
  00113	e8 00 00 00 00	 call	 ?CreateUnsafeEffectInstance@CEffectManager@@QAEXKPAPAVCEffectInstance@@@Z ; CEffectManager::CreateUnsafeEffectInstance

; 565  : 
; 566  : 	D3DXMATRIX mat;
; 567  : 	D3DXMatrixRotationYawPitchRoll(&mat,

  00118	8b bd 7c ff ff
	ff		 mov	 edi, DWORD PTR _c_pData$GSCopy$1$[ebp]
  0011e	8d 45 80	 lea	 eax, DWORD PTR _mat$[ebp]
  00121	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3c8efa35
  00129	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0012c	f3 0f 10 47 20	 movss	 xmm0, DWORD PTR [edi+32]
  00131	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00135	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0013b	f3 0f 10 47 1c	 movss	 xmm0, DWORD PTR [edi+28]
  00140	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00144	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0014a	f3 0f 10 47 18	 movss	 xmm0, DWORD PTR [edi+24]
  0014f	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00153	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00158	50		 push	 eax
  00159	e8 00 00 00 00	 call	 _D3DXMatrixRotationYawPitchRoll@16

; 568  : 		D3DXToRadian(c_pData->m_fYaw),
; 569  : 		D3DXToRadian(c_pData->m_fPitch),
; 570  : 		D3DXToRadian(c_pData->m_fRoll)
; 571  : 	);
; 572  : 
; 573  : 	mat._41 = c_pData->Position.x;

  0015e	f3 0f 10 07	 movss	 xmm0, DWORD PTR [edi]

; 574  : 	mat._42 = c_pData->Position.y;
; 575  : 	mat._43 = c_pData->Position.z + c_pData->m_fHeightBias;
; 576  : 
; 577  : 	pEffectInstance->SetGlobalMatrix(mat);

  00162	8d 45 80	 lea	 eax, DWORD PTR _mat$[ebp]
  00165	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _pEffectInstance$[ebp]
  0016b	f3 0f 11 45 b0	 movss	 DWORD PTR _mat$[ebp+48], xmm0
  00170	f3 0f 10 47 04	 movss	 xmm0, DWORD PTR [edi+4]
  00175	f3 0f 11 45 b4	 movss	 DWORD PTR _mat$[ebp+52], xmm0
  0017a	f3 0f 10 47 24	 movss	 xmm0, DWORD PTR [edi+36]
  0017f	f3 0f 58 47 08	 addss	 xmm0, DWORD PTR [edi+8]
  00184	50		 push	 eax
  00185	f3 0f 11 45 b8	 movss	 DWORD PTR _mat$[ebp+56], xmm0
  0018a	e8 00 00 00 00	 call	 ?SetGlobalMatrix@CEffectInstance@@QAEXABUD3DXMATRIX@@@Z ; CEffectInstance::SetGlobalMatrix

; 579  : 	pObjectInstance->dwEffectInstanceIndex = m_EffectInstanceMap.size();

  0018f	8b bd 78 ff ff
	ff		 mov	 edi, DWORD PTR _this$GSCopy$1$[ebp]
  00195	8b 87 90 00 00
	00		 mov	 eax, DWORD PTR [edi+144]

; 580  : 	m_EffectInstanceMap.insert(TEffectInstanceMap::value_type(pObjectInstance->dwEffectInstanceIndex, pEffectInstance));

  0019b	81 c7 8c 00 00
	00		 add	 edi, 140		; 0000008cH
  001a1	89 85 7c ff ff
	ff		 mov	 DWORD PTR $T7[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1002 :             _Loc                = _Find_lower_bound(_Keyval);

  001a7	8b cf		 mov	 ecx, edi
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 579  : 	pObjectInstance->dwEffectInstanceIndex = m_EffectInstanceMap.size();

  001a9	89 46 1c	 mov	 DWORD PTR [esi+28], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  001ac	89 85 6c ff ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
  001b2	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _pEffectInstance$[ebp]
  001b8	89 85 78 ff ff
	ff		 mov	 DWORD PTR $T6[ebp], eax
  001be	89 85 70 ff ff
	ff		 mov	 DWORD PTR $T5[ebp+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1002 :             _Loc                = _Find_lower_bound(_Keyval);

  001c4	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  001ca	50		 push	 eax
  001cb	8d 85 50 ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  001d1	50		 push	 eax
  001d2	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> >,0> >::_Find_lower_bound<unsigned long>
  001d7	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001da	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  001de	66 0f d6 85 5c
	ff ff ff	 movq	 QWORD PTR __Loc$3[ebp], xmm0

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  001e6	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001ea	75 0b		 jne	 SHORT $LN209@SetObjectI
  001ec	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR $T7[ebp]
  001f2	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  001f5	73 61		 jae	 SHORT $LN139@SetObjectI
$LN209@SetObjectI:

; 1631 :         if (max_size() == _Get_scary()->_Mysize) {

  001f7	81 7f 04 aa aa
	aa 0a		 cmp	 DWORD PTR [edi+4], 178956970 ; 0aaaaaaaH
  001fe	0f 84 e3 00 00
	00		 je	 $LN213@SetObjectI

; 1008 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  00204	8b 37		 mov	 esi, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1144 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00206	89 bd 6c ff ff
	ff		 mov	 DWORD PTR $T4[ebp], edi

; 87   :         return ::operator new(_Bytes);

  0020c	6a 18		 push	 24			; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  0020e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1151 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00212	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T4[ebp+4], 0

; 87   :         return ::operator new(_Bytes);

  0021c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00221	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR $T7[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  00227	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  0022a	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  0022d	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR $T6[ebp]
  00233	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00236	8b cf		 mov	 ecx, edi
  00238	50		 push	 eax
  00239	ff b5 60 ff ff
	ff		 push	 DWORD PTR __Loc$3[ebp+4]

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  0023f	89 30		 mov	 DWORD PTR [eax], esi

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00241	ff b5 5c ff ff
	ff		 push	 DWORD PTR __Loc$3[ebp]

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  00247	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  0024a	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 811  :         this->_Ptr->_Color = _Red;

  0024d	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00253	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >::_Insert_node
$LN139@SetObjectI:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00258	8b 4d ec	 mov	 ecx, DWORD PTR _Data$[ebp+44]
  0025b	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  0025e	72 28		 jb	 SHORT $LN165@SetObjectI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00260	8b 55 d8	 mov	 edx, DWORD PTR _Data$[ebp+24]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00263	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00264	8b c2		 mov	 eax, edx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00266	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0026c	72 10		 jb	 SHORT $LN175@SetObjectI

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0026e	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00271	83 c1 23	 add	 ecx, 35			; 00000023H
  00274	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00276	83 c0 fc	 add	 eax, -4			; fffffffcH
  00279	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0027c	77 6e		 ja	 SHORT $LN200@SetObjectI
$LN175@SetObjectI:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0027e	51		 push	 ecx
  0027f	52		 push	 edx
  00280	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00285	83 c4 08	 add	 esp, 8
$LN165@SetObjectI:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00288	8b 4d d4	 mov	 ecx, DWORD PTR _Data$[ebp+20]

; 4841 :         _My_data._Mysize = 0;

  0028b	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _Data$[ebp+40], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  00292	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _Data$[ebp+44], 15 ; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00299	c6 45 d8 00	 mov	 BYTE PTR _Data$[ebp+24], 0

; 2244 :         return _BUF_SIZE <= _Myres;

  0029d	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  002a0	72 28		 jb	 SHORT $LN193@SetObjectI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002a2	8b 55 c0	 mov	 edx, DWORD PTR _Data$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  002a5	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002a6	8b c2		 mov	 eax, edx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  002a8	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  002ae	72 10		 jb	 SHORT $LN203@SetObjectI

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  002b0	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  002b3	83 c1 23	 add	 ecx, 35			; 00000023H
  002b6	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  002b8	83 c0 fc	 add	 eax, -4			; fffffffcH
  002bb	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  002be	77 2c		 ja	 SHORT $LN200@SetObjectI
$LN203@SetObjectI:

; 265  :         ::operator delete(_Ptr, _Bytes);

  002c0	51		 push	 ecx
  002c1	52		 push	 edx
  002c2	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  002c7	83 c4 08	 add	 esp, 8
$LN193@SetObjectI:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 581  : }

  002ca	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002cd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002d4	59		 pop	 ecx
  002d5	5f		 pop	 edi
  002d6	5e		 pop	 esi
  002d7	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002da	33 cd		 xor	 ecx, ebp
  002dc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002e1	8b e5		 mov	 esp, ebp
  002e3	5d		 pop	 ebp
  002e4	c2 0c 00	 ret	 12			; 0000000cH
$LN213@SetObjectI:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1632 :             _Throw_tree_length_error();

  002e7	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN200@SetObjectI:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  002ec	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN211@SetObjectI:
  002f1	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?__SetObjectInstance_SetEffect@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z$0:
  00000	8d 4d c0	 lea	 ecx, DWORD PTR _Data$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1TPropertyEffect@prt@@QAE@XZ
__unwindfunclet$?__SetObjectInstance_SetEffect@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z$10:
  00008	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CEffectInstance *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CEffectInstance *>,void *> > >
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
  00017	cc		 int	 3
__ehhandler$?__SetObjectInstance_SetEffect@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z:
  00018	90		 npad	 1
  00019	90		 npad	 1
  0001a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00021	8b 8a 50 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-176]
  00027	33 c8		 xor	 ecx, eax
  00029	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002e	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?__SetObjectInstance_SetEffect@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z
  0003d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?__SetObjectInstance_SetEffect@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z ENDP ; CArea::__SetObjectInstance_SetEffect
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?__SetObjectInstance_SetBuilding@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z
_TEXT	SEGMENT
$T2 = -476						; size = 16
$T3 = -460						; size = 8
_this$1$ = -452						; size = 4
_rkResMgr$1$ = -448					; size = 4
_iMotionCount$1$ = -444					; size = 4
_c_pData$GSCopy$1$ = -440				; size = 4
_iModelCount$1$ = -436					; size = 4
_uLODIndex$1$ = -432					; size = 4
_pThing$1$ = -428					; size = 4
tv1956 = -421						; size = 1
$T4 = -420						; size = 24
_stSrcModelFileName$5 = -396				; size = 24
_Data$ = -372						; size = 76
_stLODModelFileName$6 = -296				; size = 24
_szLODModelFileNameEnd$7 = -272				; size = 256
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pObjectInstance$ = 8					; size = 4
_c_pData$ = 12						; size = 4
_pProperty$ = 16					; size = 4
?__SetObjectInstance_SetBuilding@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z PROC ; CArea::__SetObjectInstance_SetBuilding, COMDAT
; _this$ = ecx

; 606  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?__SetObjectInstance_SetBuilding@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d0 01 00
	00		 sub	 esp, 464		; 000001d0H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	89 8d 3c fe ff
	ff		 mov	 DWORD PTR _this$1$[ebp], ecx
  00033	8b 45 0c	 mov	 eax, DWORD PTR _c_pData$[ebp]
  00036	0f 57 c0	 xorps	 xmm0, xmm0
  00039	8b 7d 08	 mov	 edi, DWORD PTR _pObjectInstance$[ebp]
  0003c	89 85 48 fe ff
	ff		 mov	 DWORD PTR _c_pData$GSCopy$1$[ebp], eax
  00042	8b 45 10	 mov	 eax, DWORD PTR _pProperty$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00045	0f 11 85 8c fe
	ff ff		 movups	 XMMWORD PTR _Data$[ebp], xmm0

; 4821 :         _My_data._Mysize = 0;

  0004c	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _Data$[ebp+16], 0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00056	0f 11 85 a4 fe
	ff ff		 movups	 XMMWORD PTR _Data$[ebp+24], xmm0

; 4822 :         _My_data._Myres  = _BUF_SIZE - 1;

  0005d	c7 85 a0 fe ff
	ff 0f 00 00 00	 mov	 DWORD PTR _Data$[ebp+20], 15 ; 0000000fH

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00067	0f 11 85 bc fe
	ff ff		 movups	 XMMWORD PTR _Data$[ebp+48], xmm0

; 4826 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0006e	c6 85 8c fe ff
	ff 00		 mov	 BYTE PTR _Data$[ebp], 0

; 4821 :         _My_data._Mysize = 0;

  00075	c7 85 b4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _Data$[ebp+40], 0

; 4822 :         _My_data._Myres  = _BUF_SIZE - 1;

  0007f	c7 85 b8 fe ff
	ff 0f 00 00 00	 mov	 DWORD PTR _Data$[ebp+44], 15 ; 0000000fH

; 4823 :         _My_data._Activate_SSO_buffer();
; 4824 : 
; 4825 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4826 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00089	c6 85 a4 fe ff
	ff 00		 mov	 BYTE PTR _Data$[ebp+24], 0

; 4821 :         _My_data._Mysize = 0;

  00090	c7 85 cc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _Data$[ebp+64], 0

; 4822 :         _My_data._Myres  = _BUF_SIZE - 1;

  0009a	c7 85 d0 fe ff
	ff 0f 00 00 00	 mov	 DWORD PTR _Data$[ebp+68], 15 ; 0000000fH

; 4823 :         _My_data._Activate_SSO_buffer();
; 4824 : 
; 4825 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4826 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000a4	c6 85 bc fe ff
	ff 00		 mov	 BYTE PTR _Data$[ebp+48], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 608  : 	if (!prt::PropertyBuildingStringToData(pProperty, &Data))

  000ab	8d 8d 8c fe ff
	ff		 lea	 ecx, DWORD PTR _Data$[ebp]
  000b1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000b8	51		 push	 ecx
  000b9	50		 push	 eax
  000ba	e8 00 00 00 00	 call	 ?PropertyBuildingStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyBuilding@1@@Z ; prt::PropertyBuildingStringToData
  000bf	83 c4 08	 add	 esp, 8
  000c2	84 c0		 test	 al, al
  000c4	0f 84 8b 04 00
	00		 je	 $LN24@SetObjectI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  000ca	83 bd b8 fe ff
	ff 10		 cmp	 DWORD PTR _Data$[ebp+44], 16 ; 00000010H
  000d1	8d 85 a4 fe ff
	ff		 lea	 eax, DWORD PTR _Data$[ebp+24]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 611  : 	CResourceManager& rkResMgr=CResourceManager::Instance();

  000d7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  000dd	0f 43 85 a4 fe
	ff ff		 cmovae	 eax, DWORD PTR _Data$[ebp+24]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 613  : 	CGraphicThing * pThing = (CGraphicThing *)rkResMgr.GetResourcePointer(Data.strFileName.c_str());

  000e4	50		 push	 eax
  000e5	89 8d 40 fe ff
	ff		 mov	 DWORD PTR _rkResMgr$1$[ebp], ecx
  000eb	e8 00 00 00 00	 call	 ?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z ; CResourceManager::GetResourcePointer
  000f0	8b f0		 mov	 esi, eax

; 614  : 	pThing->AddReference();

  000f2	8b ce		 mov	 ecx, esi
  000f4	89 b5 54 fe ff
	ff		 mov	 DWORD PTR _pThing$1$[ebp], esi
  000fa	e8 00 00 00 00	 call	 ?AddReference@CReferenceObject@@QAEXXZ ; CReferenceObject::AddReference

; 615  : 
; 616  : 	if (pThing->IsEmpty())

  000ff	8b ce		 mov	 ecx, esi
  00101	e8 00 00 00 00	 call	 ?IsEmpty@CResource@@QBE_NXZ ; CResource::IsEmpty
  00106	84 c0		 test	 al, al
  00108	0f 85 47 04 00
	00		 jne	 $LN24@SetObjectI

; 617  : 	{
; 618  : #ifdef _DEBUG
; 619  : 		TraceError("CArea::SetBuilding: There is no data: %s", Data.strFileName.c_str());
; 620  : #endif
; 621  : 		return;
; 622  : 	}
; 623  : 
; 624  : 	int iModelCount = pThing->GetModelCount();

  0010e	8b ce		 mov	 ecx, esi
  00110	e8 00 00 00 00	 call	 ?GetModelCount@CGraphicThing@@QBEHXZ ; CGraphicThing::GetModelCount

; 625  : 	int iMotionCount = pThing->GetMotionCount();

  00115	8b 8d 54 fe ff
	ff		 mov	 ecx, DWORD PTR _pThing$1$[ebp]
  0011b	8b f0		 mov	 esi, eax
  0011d	89 b5 4c fe ff
	ff		 mov	 DWORD PTR _iModelCount$1$[ebp], esi
  00123	e8 00 00 00 00	 call	 ?GetMotionCount@CGraphicThing@@QBEHXZ ; CGraphicThing::GetMotionCount
  00128	89 85 44 fe ff
	ff		 mov	 DWORD PTR _iMotionCount$1$[ebp], eax

; 626  : 
; 627  : 	pObjectInstance->dwType = prt::PROPERTY_TYPE_BUILDING;

  0012e	c7 47 04 02 00
	00 00		 mov	 DWORD PTR [edi+4], 2

; 628  : 	pObjectInstance->pThingInstance = CGraphicThingInstance::New();

  00135	e8 00 00 00 00	 call	 ?New@CGraphicThingInstance@@SAPAV1@XZ ; CGraphicThingInstance::New

; 629  : 	pObjectInstance->pThingInstance->Initialize();

  0013a	8b c8		 mov	 ecx, eax
  0013c	89 47 14	 mov	 DWORD PTR [edi+20], eax
  0013f	e8 00 00 00 00	 call	 ?Initialize@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::Initialize

; 630  : 	pObjectInstance->pThingInstance->ReserveModelThing(iModelCount);

  00144	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00147	56		 push	 esi
  00148	e8 00 00 00 00	 call	 ?ReserveModelThing@CGraphicThingInstance@@QAEXH@Z ; CGraphicThingInstance::ReserveModelThing

; 631  : 	pObjectInstance->pThingInstance->ReserveModelInstance(iModelCount);

  0014d	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00150	56		 push	 esi
  00151	e8 00 00 00 00	 call	 ?ReserveModelInstance@CGraphicThingInstance@@QAEXH@Z ; CGraphicThingInstance::ReserveModelInstance

; 632  : 	pObjectInstance->pThingInstance->RegisterModelThing(0, pThing);

  00156	ff b5 54 fe ff
	ff		 push	 DWORD PTR _pThing$1$[ebp]
  0015c	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  0015f	6a 00		 push	 0
  00161	e8 00 00 00 00	 call	 ?RegisterModelThing@CGraphicThingInstance@@QAEXHPAVCGraphicThing@@@Z ; CGraphicThingInstance::RegisterModelThing
  00166	33 f6		 xor	 esi, esi
  00168	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@SetObjectI:

; 634  : 		if (0 != c_pData->abyPortalID[j])

  00170	8b 85 48 fe ff
	ff		 mov	 eax, DWORD PTR _c_pData$GSCopy$1$[ebp]
  00176	8a 44 30 10	 mov	 al, BYTE PTR [eax+esi+16]
  0017a	84 c0		 test	 al, al
  0017c	74 0d		 je	 SHORT $LN2@SetObjectI

; 635  : 			pObjectInstance->pThingInstance->SetPortal(j, c_pData->abyPortalID[j]);

  0017e	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00181	0f b6 c0	 movzx	 eax, al
  00184	50		 push	 eax
  00185	56		 push	 esi
  00186	e8 00 00 00 00	 call	 ?SetPortal@CGraphicObjectInstance@@QAEXKH@Z ; CGraphicObjectInstance::SetPortal
$LN2@SetObjectI:

; 633  : 	for (int j = 0; j < PORTAL_ID_MAX_NUM; ++j)

  0018b	46		 inc	 esi
  0018c	83 fe 08	 cmp	 esi, 8
  0018f	7c df		 jl	 SHORT $LL4@SetObjectI

; 636  : 
; 637  : 	{
; 638  : 		std::string stSrcModelFileName=Data.strFileName;

  00191	8d 85 a4 fe ff
	ff		 lea	 eax, DWORD PTR _Data$[ebp+24]
  00197	50		 push	 eax
  00198	8d 8d 74 fe ff
	ff		 lea	 ecx, DWORD PTR _stSrcModelFileName$5[ebp]
  0019e	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  001a3	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4821 :         _My_data._Mysize = 0;

  001a6	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _stLODModelFileName$6[ebp+16], 0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  001b0	0f 11 85 d8 fe
	ff ff		 movups	 XMMWORD PTR _stLODModelFileName$6[ebp], xmm0

; 4822 :         _My_data._Myres  = _BUF_SIZE - 1;

  001b7	c7 85 ec fe ff
	ff 0f 00 00 00	 mov	 DWORD PTR _stLODModelFileName$6[ebp+20], 15 ; 0000000fH

; 4823 :         _My_data._Activate_SSO_buffer();
; 4824 : 
; 4825 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4826 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  001c1	c6 85 d8 fe ff
	ff 00		 mov	 BYTE PTR _stLODModelFileName$6[ebp], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 642  : 		for (UINT uLODIndex=1; uLODIndex<=3; ++uLODIndex)

  001c8	b8 01 00 00 00	 mov	 eax, 1
  001cd	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  001d1	89 85 50 fe ff
	ff		 mov	 DWORD PTR _uLODIndex$1$[ebp], eax
  001d7	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL7@SetObjectI:

; 644  : 			sprintf(szLODModelFileNameEnd, "_lod_%.2d.gr2", uLODIndex);

  001e0	50		 push	 eax
  001e1	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _szLODModelFileNameEnd$7[ebp]
  001e7	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NDEAKJNP@_lod_?$CF?42d?4gr2@
  001ec	50		 push	 eax
  001ed	e8 00 00 00 00	 call	 _sprintf
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 648  :     if (_Hay_size != 0) { // room for match, look for it

  001f2	8b b5 84 fe ff
	ff		 mov	 esi, DWORD PTR _stSrcModelFileName$5[ebp+16]

; 2235 :         const value_type* _Result = _Bx._Buf;

  001f8	8d 95 74 fe ff
	ff		 lea	 edx, DWORD PTR _stSrcModelFileName$5[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 644  : 			sprintf(szLODModelFileNameEnd, "_lod_%.2d.gr2", uLODIndex);

  001fe	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00201	83 bd 88 fe ff
	ff 10		 cmp	 DWORD PTR _stSrcModelFileName$5[ebp+20], 16 ; 00000010H

; 2236 :         if (_Large_string_engaged()) {

  00208	0f 43 95 74 fe
	ff ff		 cmovae	 edx, DWORD PTR _stSrcModelFileName$5[ebp]

; 2244 :         return _BUF_SIZE <= _Myres;

  0020f	0f 93 85 5b fe
	ff ff		 setae	 BYTE PTR tv1956[ebp]

; 648  :     if (_Hay_size != 0) { // room for match, look for it

  00216	85 f6		 test	 esi, esi
  00218	74 6d		 je	 SHORT $LN173@SetObjectI

; 649  :         for (auto _Match_try = _Haystack + (_STD min)(_Start_at, _Hay_size - 1);; --_Match_try) {

  0021a	83 c9 ff	 or	 ecx, -1
  0021d	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  00220	3b c1		 cmp	 eax, ecx
  00222	0f 42 c8	 cmovb	 ecx, eax
  00225	03 ca		 add	 ecx, edx

; 650  :             if (_Traits::eq(*_Match_try, _Ch)) {

  00227	80 39 2e	 cmp	 BYTE PTR [ecx], 46	; 0000002eH
  0022a	74 0e		 je	 SHORT $LN428@SetObjectI
  0022c	0f 1f 40 00	 npad	 4
$LL187@SetObjectI:

; 652  :             }
; 653  : 
; 654  :             if (_Match_try == _Haystack) {

  00230	3b ca		 cmp	 ecx, edx
  00232	74 53		 je	 SHORT $LN173@SetObjectI

; 650  :             if (_Traits::eq(*_Match_try, _Ch)) {

  00234	49		 dec	 ecx
  00235	80 39 2e	 cmp	 BYTE PTR [ecx], 46	; 0000002eH
  00238	75 f6		 jne	 SHORT $LL187@SetObjectI
$LN428@SetObjectI:

; 651  :                 return static_cast<size_t>(_Match_try - _Haystack); // found a match

  0023a	2b ca		 sub	 ecx, edx
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h

; 336  : 	if (string::npos != npos)

  0023c	83 f9 ff	 cmp	 ecx, -1
  0023f	74 46		 je	 SHORT $LN173@SetObjectI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2278 :         return (_STD min)(_Size, _Mysize - _Off);

  00241	3b f1		 cmp	 esi, ecx

; 2293 :     size_type _Mysize = 0; // current length of string

  00243	c7 85 6c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T4[ebp+16], 0

; 2235 :         const value_type* _Result = _Bx._Buf;

  0024d	8d 85 74 fe ff
	ff		 lea	 eax, DWORD PTR _stSrcModelFileName$5[ebp]

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  00253	c7 85 70 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T4[ebp+20], 0

; 2278 :         return (_STD min)(_Size, _Mysize - _Off);

  0025d	0f 42 ce	 cmovb	 ecx, esi
  00260	0f 57 c0	 xorps	 xmm0, xmm0

; 2236 :         if (_Large_string_engaged()) {

  00263	80 bd 5b fe ff
	ff 00		 cmp	 BYTE PTR tv1956[ebp], 0

; 2511 :         _Construct<_Construct_strategy::_From_ptr>(

  0026a	51		 push	 ecx

; 2236 :         if (_Large_string_engaged()) {

  0026b	0f 45 85 74 fe
	ff ff		 cmovne	 eax, DWORD PTR _stSrcModelFileName$5[ebp]

; 2511 :         _Construct<_Construct_strategy::_From_ptr>(

  00272	8d 8d 5c fe ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00278	50		 push	 eax

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00279	0f 11 85 5c fe
	ff ff		 movups	 XMMWORD PTR $T4[ebp], xmm0

; 2511 :         _Construct<_Construct_strategy::_From_ptr>(

  00280	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h

; 337  : 		return std::string(str, 0, npos);

  00285	eb 12		 jmp	 SHORT $LN172@SetObjectI
$LN173@SetObjectI:

; 338  : 
; 339  : 	return str;

  00287	8d 85 74 fe ff
	ff		 lea	 eax, DWORD PTR _stSrcModelFileName$5[ebp]
  0028d	50		 push	 eax
  0028e	8d 8d 5c fe ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00294	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN172@SetObjectI:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00299	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _szLODModelFileNameEnd$7[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 645  : 			stLODModelFileName = CFileNameHelper::NoExtension(stSrcModelFileName) + szLODModelFileNameEnd;

  0029f	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  002a3	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL446@SetObjectI:
  002a6	8a 01		 mov	 al, BYTE PTR [ecx]
  002a8	41		 inc	 ecx
  002a9	84 c0		 test	 al, al
  002ab	75 f9		 jne	 SHORT $LL446@SetObjectI
  002ad	2b ca		 sub	 ecx, edx

; 3292 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  002af	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _szLODModelFileNameEnd$7[ebp]
  002b5	51		 push	 ecx
  002b6	50		 push	 eax
  002b7	8d 8d 5c fe ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  002bd	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2999 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  002c2	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  002c5	f3 0f 7e 48 10	 movq	 xmm1, QWORD PTR [eax+16]

; 4821 :         _My_data._Mysize = 0;

  002ca	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 4822 :         _My_data._Myres  = _BUF_SIZE - 1;

  002d1	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 4823 :         _My_data._Activate_SSO_buffer();
; 4824 : 
; 4825 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4826 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  002d8	c6 00 00	 mov	 BYTE PTR [eax], 0

; 4832 :         if (_My_data._Large_string_engaged()) {

  002db	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _stLODModelFileName$6[ebp+20]

; 2999 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  002e1	66 0f d6 8d 34
	fe ff ff	 movq	 QWORD PTR $T3[ebp], xmm1
  002e9	0f 11 85 24 fe
	ff ff		 movups	 XMMWORD PTR $T2[ebp], xmm0

; 4832 :         if (_My_data._Large_string_engaged()) {

  002f0	83 f9 10	 cmp	 ecx, 16			; 00000010H
  002f3	72 3e		 jb	 SHORT $LN265@SetObjectI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002f5	8b 95 d8 fe ff
	ff		 mov	 edx, DWORD PTR _stLODModelFileName$6[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  002fb	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002fc	8b c2		 mov	 eax, edx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  002fe	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00304	72 14		 jb	 SHORT $LN275@SetObjectI

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00306	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00309	83 c1 23	 add	 ecx, 35			; 00000023H
  0030c	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0030e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00311	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00314	0f 87 34 03 00
	00		 ja	 $LN164@SetObjectI
$LN275@SetObjectI:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0031a	51		 push	 ecx
  0031b	52		 push	 edx
  0031c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00321	0f 10 85 24 fe
	ff ff		 movups	 xmm0, XMMWORD PTR $T2[ebp]
  00328	83 c4 08	 add	 esp, 8
  0032b	f3 0f 7e 8d 34
	fe ff ff	 movq	 xmm1, QWORD PTR $T3[ebp]
$LN265@SetObjectI:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4832 :         if (_My_data._Large_string_engaged()) {

  00333	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR $T4[ebp+20]

; 2999 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00339	66 0f d6 8d e8
	fe ff ff	 movq	 QWORD PTR _stLODModelFileName$6[ebp+16], xmm1
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 645  : 			stLODModelFileName = CFileNameHelper::NoExtension(stSrcModelFileName) + szLODModelFileNameEnd;

  00341	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2999 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00345	0f 11 85 d8 fe
	ff ff		 movups	 XMMWORD PTR _stLODModelFileName$6[ebp], xmm0

; 4832 :         if (_My_data._Large_string_engaged()) {

  0034c	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0034f	72 2f		 jb	 SHORT $LN333@SetObjectI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00351	8b 95 5c fe ff
	ff		 mov	 edx, DWORD PTR $T4[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00357	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00358	8b c2		 mov	 eax, edx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0035a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00360	72 14		 jb	 SHORT $LN343@SetObjectI

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00362	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00365	83 c1 23	 add	 ecx, 35			; 00000023H
  00368	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0036a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0036d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00370	0f 87 d8 02 00
	00		 ja	 $LN164@SetObjectI
$LN343@SetObjectI:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00376	51		 push	 ecx
  00377	52		 push	 edx
  00378	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0037d	83 c4 08	 add	 esp, 8
$LN333@SetObjectI:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  00380	83 bd ec fe ff
	ff 10		 cmp	 DWORD PTR _stLODModelFileName$6[ebp+20], 16 ; 00000010H
  00387	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _stLODModelFileName$6[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 646  : 			if (!rkResMgr.IsFileExist(stLODModelFileName.c_str()))

  0038d	8b b5 40 fe ff
	ff		 mov	 esi, DWORD PTR _rkResMgr$1$[ebp]
  00393	8b ce		 mov	 ecx, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  00395	0f 43 85 d8 fe
	ff ff		 cmovae	 eax, DWORD PTR _stLODModelFileName$6[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 646  : 			if (!rkResMgr.IsFileExist(stLODModelFileName.c_str()))

  0039c	50		 push	 eax
  0039d	e8 00 00 00 00	 call	 ?IsFileExist@CResourceManager@@QAE_NPBD@Z ; CResourceManager::IsFileExist
  003a2	84 c0		 test	 al, al
  003a4	74 41		 je	 SHORT $LN445@SetObjectI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  003a6	83 bd ec fe ff
	ff 10		 cmp	 DWORD PTR _stLODModelFileName$6[ebp+20], 16 ; 00000010H
  003ad	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _stLODModelFileName$6[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 649  : 			CGraphicThing* pLODModelThing = (CGraphicThing *)rkResMgr.GetResourcePointer(stLODModelFileName.c_str());

  003b3	8b ce		 mov	 ecx, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  003b5	0f 43 85 d8 fe
	ff ff		 cmovae	 eax, DWORD PTR _stLODModelFileName$6[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 649  : 			CGraphicThing* pLODModelThing = (CGraphicThing *)rkResMgr.GetResourcePointer(stLODModelFileName.c_str());

  003bc	50		 push	 eax
  003bd	e8 00 00 00 00	 call	 ?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z ; CResourceManager::GetResourcePointer

; 650  : 			if (!pLODModelThing)

  003c2	85 c0		 test	 eax, eax
  003c4	74 21		 je	 SHORT $LN445@SetObjectI

; 651  : 				break;
; 652  : 
; 653  : 			pObjectInstance->pThingInstance->RegisterLODThing(0, pLODModelThing);

  003c6	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  003c9	50		 push	 eax
  003ca	6a 00		 push	 0
  003cc	e8 00 00 00 00	 call	 ?RegisterLODThing@CGraphicThingInstance@@QAEXHPAVCGraphicThing@@@Z ; CGraphicThingInstance::RegisterLODThing
  003d1	8b 85 50 fe ff
	ff		 mov	 eax, DWORD PTR _uLODIndex$1$[ebp]
  003d7	40		 inc	 eax
  003d8	89 85 50 fe ff
	ff		 mov	 DWORD PTR _uLODIndex$1$[ebp], eax
  003de	83 f8 03	 cmp	 eax, 3
  003e1	0f 86 f9 fd ff
	ff		 jbe	 $LL7@SetObjectI
$LN445@SetObjectI:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4832 :         if (_My_data._Large_string_engaged()) {

  003e7	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _stLODModelFileName$6[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 655  : 	}

  003ed	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4832 :         if (_My_data._Large_string_engaged()) {

  003f1	83 f9 10	 cmp	 ecx, 16			; 00000010H
  003f4	72 2f		 jb	 SHORT $LN130@SetObjectI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  003f6	8b 95 d8 fe ff
	ff		 mov	 edx, DWORD PTR _stLODModelFileName$6[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  003fc	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  003fd	8b c2		 mov	 eax, edx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  003ff	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00405	72 14		 jb	 SHORT $LN140@SetObjectI

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00407	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0040a	83 c1 23	 add	 ecx, 35			; 00000023H
  0040d	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0040f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00412	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00415	0f 87 33 02 00
	00		 ja	 $LN164@SetObjectI
$LN140@SetObjectI:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0041b	51		 push	 ecx
  0041c	52		 push	 edx
  0041d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00422	83 c4 08	 add	 esp, 8
$LN130@SetObjectI:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00425	8b 8d 88 fe ff
	ff		 mov	 ecx, DWORD PTR _stSrcModelFileName$5[ebp+20]

; 4841 :         _My_data._Mysize = 0;

  0042b	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _stLODModelFileName$6[ebp+16], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  00435	c7 85 ec fe ff
	ff 0f 00 00 00	 mov	 DWORD PTR _stLODModelFileName$6[ebp+20], 15 ; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0043f	c6 85 d8 fe ff
	ff 00		 mov	 BYTE PTR _stLODModelFileName$6[ebp], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 655  : 	}

  00446	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  0044a	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  0044d	72 2f		 jb	 SHORT $LN157@SetObjectI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0044f	8b 95 74 fe ff
	ff		 mov	 edx, DWORD PTR _stSrcModelFileName$5[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00455	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00456	8b c2		 mov	 eax, edx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00458	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0045e	72 14		 jb	 SHORT $LN167@SetObjectI

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00460	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00463	83 c1 23	 add	 ecx, 35			; 00000023H
  00466	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00468	83 c0 fc	 add	 eax, -4			; fffffffcH
  0046b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0046e	0f 87 da 01 00
	00		 ja	 $LN164@SetObjectI
$LN167@SetObjectI:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00474	51		 push	 ecx
  00475	52		 push	 edx
  00476	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0047b	83 c4 08	 add	 esp, 8
$LN157@SetObjectI:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  0047e	33 f6		 xor	 esi, esi
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 657  : 	for (int i = 0; i < iModelCount; ++i)

  00480	39 b5 4c fe ff
	ff		 cmp	 DWORD PTR _iModelCount$1$[ebp], esi
  00486	7e 17		 jle	 SHORT $LN9@SetObjectI
$LL10@SetObjectI:

; 658  : 		pObjectInstance->pThingInstance->SetModelInstance(i, 0, i);

  00488	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  0048b	6a ff		 push	 -1
  0048d	56		 push	 esi
  0048e	6a 00		 push	 0
  00490	56		 push	 esi
  00491	e8 00 00 00 00	 call	 ?SetModelInstance@CGraphicThingInstance@@QAE_NHHHH@Z ; CGraphicThingInstance::SetModelInstance
  00496	46		 inc	 esi
  00497	3b b5 4c fe ff
	ff		 cmp	 esi, DWORD PTR _iModelCount$1$[ebp]
  0049d	7c e9		 jl	 SHORT $LL10@SetObjectI
$LN9@SetObjectI:

; 659  : 
; 660  : 	if (iMotionCount)

  0049f	83 bd 44 fe ff
	ff 00		 cmp	 DWORD PTR _iMotionCount$1$[ebp], 0
  004a6	74 10		 je	 SHORT $LN16@SetObjectI

; 661  : 	{
; 662  : 		pObjectInstance->pThingInstance->RegisterMotionThing(0, pThing);

  004a8	ff b5 54 fe ff
	ff		 push	 DWORD PTR _pThing$1$[ebp]
  004ae	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  004b1	6a 00		 push	 0
  004b3	e8 00 00 00 00	 call	 ?RegisterMotionThing@CGraphicThingInstance@@QAEXKPAVCGraphicThing@@@Z ; CGraphicThingInstance::RegisterMotionThing
$LN16@SetObjectI:

; 663  : 	}
; 664  : 
; 665  : 	pObjectInstance->pThingInstance->SetPosition(c_pData->Position.x, c_pData->Position.y, c_pData->Position.z + c_pData->m_fHeightBias);

  004b8	8b b5 48 fe ff
	ff		 mov	 esi, DWORD PTR _c_pData$GSCopy$1$[ebp]
  004be	83 ec 0c	 sub	 esp, 12			; 0000000cH
  004c1	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  004c4	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [esi+36]
  004c9	f3 0f 58 46 08	 addss	 xmm0, DWORD PTR [esi+8]
  004ce	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  004d4	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  004d9	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  004df	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  004e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004e8	e8 00 00 00 00	 call	 ?SetPosition@CGraphicObjectInstance@@QAEXMMM@Z ; CGraphicObjectInstance::SetPosition

; 666  : 	pObjectInstance->pThingInstance->SetRotation(

  004ed	f3 0f 10 46 20	 movss	 xmm0, DWORD PTR [esi+32]
  004f2	83 ec 0c	 sub	 esp, 12			; 0000000cH
  004f5	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  004f8	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  004fe	f3 0f 10 46 1c	 movss	 xmm0, DWORD PTR [esi+28]
  00503	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00509	f3 0f 10 46 18	 movss	 xmm0, DWORD PTR [esi+24]
  0050e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00513	e8 00 00 00 00	 call	 ?SetRotation@CGraphicObjectInstance@@QAEXMMM@Z ; CGraphicObjectInstance::SetRotation

; 667  : 		c_pData->m_fYaw,
; 668  : 		c_pData->m_fPitch,
; 669  : 		c_pData->m_fRoll
; 670  : 	);
; 671  : 	pObjectInstance->isShadowFlag = Data.isShadowFlag;

  00518	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _Data$[ebp+72]

; 672  : 	pObjectInstance->pThingInstance->RegisterBoundingSphere();

  0051e	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00521	89 47 10	 mov	 DWORD PTR [edi+16], eax
  00524	e8 00 00 00 00	 call	 ?RegisterBoundingSphere@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::RegisterBoundingSphere
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00529	83 bd d0 fe ff
	ff 10		 cmp	 DWORD PTR _Data$[ebp+68], 16 ; 00000010H

; 2235 :         const value_type* _Result = _Bx._Buf;

  00530	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR _Data$[ebp+48]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 673  : 	__LoadAttribute(pObjectInstance, Data.strAttributeDataFileName.c_str());

  00536	8b 8d 3c fe ff
	ff		 mov	 ecx, DWORD PTR _this$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  0053c	0f 43 85 bc fe
	ff ff		 cmovae	 eax, DWORD PTR _Data$[ebp+48]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 673  : 	__LoadAttribute(pObjectInstance, Data.strAttributeDataFileName.c_str());

  00543	50		 push	 eax
  00544	57		 push	 edi
  00545	e8 00 00 00 00	 call	 ?__LoadAttribute@CArea@@IAEXPAUSObjectInstance@1@PBD@Z ; CArea::__LoadAttribute

; 674  : 	pThing->Release();

  0054a	8b 8d 54 fe ff
	ff		 mov	 ecx, DWORD PTR _pThing$1$[ebp]
  00550	e8 00 00 00 00	 call	 ?Release@CReferenceObject@@QAEXXZ ; CReferenceObject::Release
$LN24@SetObjectI:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00555	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _Data$[ebp+68]
  0055b	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  0055e	72 2f		 jb	 SHORT $LN40@SetObjectI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00560	8b 95 bc fe ff
	ff		 mov	 edx, DWORD PTR _Data$[ebp+48]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00566	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00567	8b c2		 mov	 eax, edx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00569	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0056f	72 14		 jb	 SHORT $LN50@SetObjectI

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00571	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00574	83 c1 23	 add	 ecx, 35			; 00000023H
  00577	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00579	83 c0 fc	 add	 eax, -4			; fffffffcH
  0057c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0057f	0f 87 ce 00 00
	00		 ja	 $LN102@SetObjectI
$LN50@SetObjectI:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00585	51		 push	 ecx
  00586	52		 push	 edx
  00587	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0058c	83 c4 08	 add	 esp, 8
$LN40@SetObjectI:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  0058f	8b 8d b8 fe ff
	ff		 mov	 ecx, DWORD PTR _Data$[ebp+44]

; 4841 :         _My_data._Mysize = 0;

  00595	c7 85 cc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _Data$[ebp+64], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  0059f	c7 85 d0 fe ff
	ff 0f 00 00 00	 mov	 DWORD PTR _Data$[ebp+68], 15 ; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  005a9	c6 85 bc fe ff
	ff 00		 mov	 BYTE PTR _Data$[ebp+48], 0

; 2244 :         return _BUF_SIZE <= _Myres;

  005b0	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  005b3	72 2b		 jb	 SHORT $LN68@SetObjectI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  005b5	8b 95 a4 fe ff
	ff		 mov	 edx, DWORD PTR _Data$[ebp+24]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  005bb	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  005bc	8b c2		 mov	 eax, edx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  005be	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  005c4	72 10		 jb	 SHORT $LN78@SetObjectI

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  005c6	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  005c9	83 c1 23	 add	 ecx, 35			; 00000023H
  005cc	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  005ce	83 c0 fc	 add	 eax, -4			; fffffffcH
  005d1	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  005d4	77 7d		 ja	 SHORT $LN102@SetObjectI
$LN78@SetObjectI:

; 265  :         ::operator delete(_Ptr, _Bytes);

  005d6	51		 push	 ecx
  005d7	52		 push	 edx
  005d8	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  005dd	83 c4 08	 add	 esp, 8
$LN68@SetObjectI:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  005e0	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR _Data$[ebp+20]

; 4841 :         _My_data._Mysize = 0;

  005e6	c7 85 b4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _Data$[ebp+40], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  005f0	c7 85 b8 fe ff
	ff 0f 00 00 00	 mov	 DWORD PTR _Data$[ebp+44], 15 ; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  005fa	c6 85 a4 fe ff
	ff 00		 mov	 BYTE PTR _Data$[ebp+24], 0

; 2244 :         return _BUF_SIZE <= _Myres;

  00601	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  00604	72 2b		 jb	 SHORT $LN95@SetObjectI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00606	8b 95 8c fe ff
	ff		 mov	 edx, DWORD PTR _Data$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0060c	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0060d	8b c2		 mov	 eax, edx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0060f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00615	72 10		 jb	 SHORT $LN105@SetObjectI

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00617	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0061a	83 c1 23	 add	 ecx, 35			; 00000023H
  0061d	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0061f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00622	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00625	77 2c		 ja	 SHORT $LN102@SetObjectI
$LN105@SetObjectI:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00627	51		 push	 ecx
  00628	52		 push	 edx
  00629	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0062e	83 c4 08	 add	 esp, 8
$LN95@SetObjectI:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 675  : }

  00631	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00634	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0063b	59		 pop	 ecx
  0063c	5f		 pop	 edi
  0063d	5e		 pop	 esi
  0063e	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00641	33 cd		 xor	 ecx, ebp
  00643	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00648	8b e5		 mov	 esp, ebp
  0064a	5d		 pop	 ebp
  0064b	c2 0c 00	 ret	 12			; 0000000cH
$LN164@SetObjectI:
  0064e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN102@SetObjectI:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00653	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN448@SetObjectI:
  00658	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?__SetObjectInstance_SetBuilding@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z$0:
  00000	8d 8d 8c fe ff
	ff		 lea	 ecx, DWORD PTR _Data$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1TPropertyBuilding@prt@@QAE@XZ
__unwindfunclet$?__SetObjectInstance_SetBuilding@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z$1:
  0000b	8d 8d 74 fe ff
	ff		 lea	 ecx, DWORD PTR _stSrcModelFileName$5[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?__SetObjectInstance_SetBuilding@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z$2:
  00016	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR _stLODModelFileName$6[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?__SetObjectInstance_SetBuilding@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z$3:
  00021	8d 8d 5c fe ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00027	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0002c	cc		 int	 3
  0002d	cc		 int	 3
  0002e	cc		 int	 3
  0002f	cc		 int	 3
  00030	cc		 int	 3
__ehhandler$?__SetObjectInstance_SetBuilding@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z:
  00031	90		 npad	 1
  00032	90		 npad	 1
  00033	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00037	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003a	8b 8a 24 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-476]
  00040	33 c8		 xor	 ecx, eax
  00042	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00047	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0004a	33 c8		 xor	 ecx, eax
  0004c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00051	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?__SetObjectInstance_SetBuilding@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z
  00056	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?__SetObjectInstance_SetBuilding@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z ENDP ; CArea::__SetObjectInstance_SetBuilding
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?__SetObjectInstance_SetTree@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z
_TEXT	SEGMENT
_c_szTreeName$ = -4					; size = 4
_pObjectInstance$ = 8					; size = 4
_c_pData$ = 12						; size = 4
_pProperty$ = 16					; size = 4
?__SetObjectInstance_SetTree@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z PROC ; CArea::__SetObjectInstance_SetTree, COMDAT
; _this$ = ecx

; 584  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 585  : 	const char * c_szTreeName;
; 586  : 	if (!pProperty->GetString("TreeFile", &c_szTreeName))

  00004	8b 4d 10	 mov	 ecx, DWORD PTR _pProperty$[ebp]
  00007	8d 45 fc	 lea	 eax, DWORD PTR _c_szTreeName$[ebp]
  0000a	50		 push	 eax
  0000b	68 00 00 00 00	 push	 OFFSET ??_C@_08JBFACIKL@TreeFile@
  00010	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  00015	84 c0		 test	 al, al
  00017	74 38		 je	 SHORT $LN1@SetObjectI

; 587  : 		return;
; 588  : 
; 589  : 	pObjectInstance->SetTree(

  00019	8b 45 0c	 mov	 eax, DWORD PTR _c_pData$[ebp]
  0001c	ff 75 fc	 push	 DWORD PTR _c_szTreeName$[ebp]
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _pObjectInstance$[ebp]
  00022	f3 0f 10 40 24	 movss	 xmm0, DWORD PTR [eax+36]
  00027	ff 70 0c	 push	 DWORD PTR [eax+12]
  0002a	f3 0f 58 40 08	 addss	 xmm0, DWORD PTR [eax+8]
  0002f	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00032	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00038	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0003d	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00043	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00047	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004c	e8 00 00 00 00	 call	 ?SetTree@SObjectInstance@CArea@@QAEXMMMKPBD@Z ; CArea::SObjectInstance::SetTree
$LN1@SetObjectI:

; 590  : 		c_pData->Position.x,
; 591  : 		c_pData->Position.y,
; 592  : 		c_pData->Position.z + c_pData->m_fHeightBias,
; 593  : 		c_pData->dwCRC,
; 594  : 		c_szTreeName
; 595  : 	);
; 596  : }

  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 0c 00	 ret	 12			; 0000000cH
?__SetObjectInstance_SetTree@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z ENDP ; CArea::__SetObjectInstance_SetTree
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?__SetObjectInstance@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@@Z
_TEXT	SEGMENT
_pProperty$ = -4					; size = 4
_pObjectInstance$ = 8					; size = 4
_c_szPropertyType$ = 12					; size = 4
_c_pData$ = 12						; size = 4
?__SetObjectInstance@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@@Z PROC ; CArea::__SetObjectInstance, COMDAT
; _this$ = ecx

; 509  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 510  : 	CProperty * pProperty;
; 511  : 	if (!CPropertyManager::Instance().Get(c_pData->dwCRC, &pProperty))

  00005	8b 75 0c	 mov	 esi, DWORD PTR _c_pData$[ebp]
  00008	8d 45 fc	 lea	 eax, DWORD PTR _pProperty$[ebp]
  0000b	57		 push	 edi
  0000c	50		 push	 eax
  0000d	8b f9		 mov	 edi, ecx
  0000f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPropertyManager@@@@0PAVCPropertyManager@@A ; CSingleton<CPropertyManager>::ms_singleton
  00015	ff 76 0c	 push	 DWORD PTR [esi+12]
  00018	e8 00 00 00 00	 call	 ?Get@CPropertyManager@@QAE_NKPAPAVCProperty@@@Z ; CPropertyManager::Get
  0001d	84 c0		 test	 al, al
  0001f	0f 84 93 00 00
	00		 je	 $LN2@SetObjectI

; 512  : 		return;
; 513  : 
; 514  : 	const char * c_szPropertyType;
; 515  : 
; 516  : 	if (!pProperty->GetString("PropertyType", &c_szPropertyType))

  00025	8b 4d fc	 mov	 ecx, DWORD PTR _pProperty$[ebp]
  00028	8d 45 0c	 lea	 eax, DWORD PTR _c_szPropertyType$[ebp]
  0002b	50		 push	 eax
  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_0N@FPEBPNJJ@PropertyType@
  00031	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  00036	84 c0		 test	 al, al
  00038	74 7e		 je	 SHORT $LN2@SetObjectI

; 517  : 		return;
; 518  : 
; 519  : 	switch (prt::GetPropertyType(c_szPropertyType))

  0003a	ff 75 0c	 push	 DWORD PTR _c_szPropertyType$[ebp]
  0003d	e8 00 00 00 00	 call	 ?GetPropertyType@prt@@YAKPBD@Z ; prt::GetPropertyType
  00042	48		 dec	 eax
  00043	83 c4 04	 add	 esp, 4
  00046	83 f8 04	 cmp	 eax, 4
  00049	77 6d		 ja	 SHORT $LN2@SetObjectI
  0004b	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN12@SetObjectI[eax*4]
$LN6@SetObjectI:

; 520  : 	{
; 521  : 		case prt::PROPERTY_TYPE_TREE:
; 522  : 			__SetObjectInstance_SetTree(pObjectInstance, c_pData, pProperty);

  00052	ff 75 fc	 push	 DWORD PTR _pProperty$[ebp]
  00055	8b cf		 mov	 ecx, edi
  00057	56		 push	 esi
  00058	ff 75 08	 push	 DWORD PTR _pObjectInstance$[ebp]
  0005b	e8 00 00 00 00	 call	 ?__SetObjectInstance_SetTree@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z ; CArea::__SetObjectInstance_SetTree
  00060	5f		 pop	 edi

; 539  : 			break;
; 540  : 	}
; 541  : }

  00061	5e		 pop	 esi
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c2 08 00	 ret	 8
$LN7@SetObjectI:

; 523  : 			break;
; 524  : 
; 525  : 		case prt::PROPERTY_TYPE_BUILDING:
; 526  : 			__SetObjectInstance_SetBuilding(pObjectInstance, c_pData, pProperty);

  00068	ff 75 fc	 push	 DWORD PTR _pProperty$[ebp]
  0006b	8b cf		 mov	 ecx, edi
  0006d	56		 push	 esi
  0006e	ff 75 08	 push	 DWORD PTR _pObjectInstance$[ebp]
  00071	e8 00 00 00 00	 call	 ?__SetObjectInstance_SetBuilding@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z ; CArea::__SetObjectInstance_SetBuilding
  00076	5f		 pop	 edi

; 539  : 			break;
; 540  : 	}
; 541  : }

  00077	5e		 pop	 esi
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 08 00	 ret	 8
$LN8@SetObjectI:

; 527  : 			break;
; 528  : 
; 529  : 		case prt::PROPERTY_TYPE_EFFECT:
; 530  : 			__SetObjectInstance_SetEffect(pObjectInstance, c_pData, pProperty);

  0007e	ff 75 fc	 push	 DWORD PTR _pProperty$[ebp]
  00081	8b cf		 mov	 ecx, edi
  00083	56		 push	 esi
  00084	ff 75 08	 push	 DWORD PTR _pObjectInstance$[ebp]
  00087	e8 00 00 00 00	 call	 ?__SetObjectInstance_SetEffect@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z ; CArea::__SetObjectInstance_SetEffect
  0008c	5f		 pop	 edi

; 539  : 			break;
; 540  : 	}
; 541  : }

  0008d	5e		 pop	 esi
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c2 08 00	 ret	 8
$LN9@SetObjectI:

; 531  : 			break;
; 532  : 
; 533  : 		case prt::PROPERTY_TYPE_AMBIENCE:
; 534  : 			__SetObjectInstance_SetAmbience(pObjectInstance, c_pData, pProperty);

  00094	ff 75 fc	 push	 DWORD PTR _pProperty$[ebp]
  00097	8b cf		 mov	 ecx, edi
  00099	56		 push	 esi
  0009a	ff 75 08	 push	 DWORD PTR _pObjectInstance$[ebp]
  0009d	e8 00 00 00 00	 call	 ?__SetObjectInstance_SetAmbience@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z ; CArea::__SetObjectInstance_SetAmbience
  000a2	5f		 pop	 edi

; 539  : 			break;
; 540  : 	}
; 541  : }

  000a3	5e		 pop	 esi
  000a4	8b e5		 mov	 esp, ebp
  000a6	5d		 pop	 ebp
  000a7	c2 08 00	 ret	 8
$LN10@SetObjectI:

; 535  : 			break;
; 536  : 
; 537  : 		case prt::PROPERTY_TYPE_DUNGEON_BLOCK:
; 538  : 			__SetObjectInstance_SetDungeonBlock(pObjectInstance, c_pData, pProperty);

  000aa	ff 75 fc	 push	 DWORD PTR _pProperty$[ebp]
  000ad	8b cf		 mov	 ecx, edi
  000af	56		 push	 esi
  000b0	ff 75 08	 push	 DWORD PTR _pObjectInstance$[ebp]
  000b3	e8 00 00 00 00	 call	 ?__SetObjectInstance_SetDungeonBlock@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@PAVCProperty@@@Z ; CArea::__SetObjectInstance_SetDungeonBlock
$LN2@SetObjectI:

; 539  : 			break;
; 540  : 	}
; 541  : }

  000b8	5f		 pop	 edi
  000b9	5e		 pop	 esi
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c2 08 00	 ret	 8
$LN12@SetObjectI:
  000c0	00 00 00 00	 DD	 $LN6@SetObjectI
  000c4	00 00 00 00	 DD	 $LN7@SetObjectI
  000c8	00 00 00 00	 DD	 $LN8@SetObjectI
  000cc	00 00 00 00	 DD	 $LN9@SetObjectI
  000d0	00 00 00 00	 DD	 $LN10@SetObjectI
?__SetObjectInstance@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@@Z ENDP ; CArea::__SetObjectInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?__Clear_DestroyObjectInstance@CArea@@IAEXPAUSObjectInstance@1@@Z
_TEXT	SEGMENT
__Loc$1 = -12						; size = 12
_pkData$ = 8						; size = 4
_pkData$ = 8						; size = 4
_pkData$ = 8						; size = 4
_pkData$ = 8						; size = 4
_pObjectInstance$ = 8					; size = 4
?__Clear_DestroyObjectInstance@CArea@@IAEXPAUSObjectInstance@1@@Z PROC ; CArea::__Clear_DestroyObjectInstance, COMDAT
; _this$ = ecx

; 1130 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi

; 1131 : 	if (pObjectInstance->dwEffectInstanceIndex!=0xffffffff)

  00007	8b 75 08	 mov	 esi, DWORD PTR _pObjectInstance$[ebp]
  0000a	8d 46 1c	 lea	 eax, DWORD PTR [esi+28]
  0000d	57		 push	 edi
  0000e	8b 38		 mov	 edi, DWORD PTR [eax]
  00010	83 ff ff	 cmp	 edi, -1
  00013	74 53		 je	 SHORT $LN2@Clear_Dest
  00015	53		 push	 ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00016	50		 push	 eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1133 : 		TEffectInstanceIterator f= m_EffectInstanceMap.find(pObjectInstance->dwEffectInstanceIndex);

  00017	8d 99 8c 00 00
	00		 lea	 ebx, DWORD PTR [ecx+140]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0001d	8d 45 f4	 lea	 eax, DWORD PTR __Loc$1[ebp]
  00020	8b cb		 mov	 ecx, ebx
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> >,0> >::_Find_lower_bound<unsigned long>

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00028	8b 45 fc	 mov	 eax, DWORD PTR __Loc$1[ebp+8]
  0002b	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0002f	75 2f		 jne	 SHORT $LN4@Clear_Dest
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  00031	3b 78 10	 cmp	 edi, DWORD PTR [eax+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00034	72 2a		 jb	 SHORT $LN4@Clear_Dest

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00036	39 03		 cmp	 DWORD PTR [ebx], eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1134 : 		if (m_EffectInstanceMap.end()!=f)

  00038	74 26		 je	 SHORT $LN4@Clear_Dest

; 1135 : 		{
; 1136 : 			CEffectInstance * pEffectInstance = f->second;

  0003a	8b 78 14	 mov	 edi, DWORD PTR [eax+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1288 :         _Nodeptr _Erasednode = _Scary->_Extract(_Where); // node to erase

  0003d	8b cb		 mov	 ecx, ebx
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >::_Extract
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00045	6a 18		 push	 24			; 00000018H
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1139 : 			if (CEffectManager::InstancePtr())

  0004d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCEffectManager@@@@0PAVCEffectManager@@A ; CSingleton<CEffectManager>::ms_singleton
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00053	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1139 : 			if (CEffectManager::InstancePtr())

  00056	85 c9		 test	 ecx, ecx
  00058	74 06		 je	 SHORT $LN4@Clear_Dest

; 1140 : 				CEffectManager::Instance().DestroyUnsafeEffectInstance(pEffectInstance);

  0005a	57		 push	 edi
  0005b	e8 00 00 00 00	 call	 ?DestroyUnsafeEffectInstance@CEffectManager@@QAE_NPAVCEffectInstance@@@Z ; CEffectManager::DestroyUnsafeEffectInstance
$LN4@Clear_Dest:

; 1141 : 		}
; 1142 : 		pObjectInstance->dwEffectInstanceIndex = 0xffffffff;

  00060	c7 46 1c ff ff
	ff ff		 mov	 DWORD PTR [esi+28], -1
  00067	5b		 pop	 ebx
$LN2@Clear_Dest:

; 1143 : 	}
; 1144 : 
; 1145 : 	if (pObjectInstance->pAttributeInstance)

  00068	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0006b	85 c9		 test	 ecx, ecx
  0006d	74 39		 je	 SHORT $LN5@Clear_Dest

; 1146 : 	{
; 1147 : 		pObjectInstance->pAttributeInstance->Clear();

  0006f	e8 00 00 00 00	 call	 ?Clear@CAttributeInstance@@QAEXXZ ; CAttributeInstance::Clear
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  00074	a1 14 00 00 00	 mov	 eax, DWORD PTR ?ms_AttributeInstancePool@CArea@@1V?$CDynamicPool@VCAttributeInstance@@@@A+20
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1148 : 		ms_AttributeInstancePool.Free(pObjectInstance->pAttributeInstance);

  00079	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0007c	89 4d 08	 mov	 DWORD PTR _pkData$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  0007f	3b 05 18 00 00
	00		 cmp	 eax, DWORD PTR ?ms_AttributeInstancePool@CArea@@1V?$CDynamicPool@VCAttributeInstance@@@@A+24
  00085	74 0b		 je	 SHORT $LN93@Clear_Dest

; 797  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00087	89 08		 mov	 DWORD PTR [eax], ecx

; 798  :         } else {
; 799  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 800  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 801  :             _ASAN_VECTOR_RELEASE_GUARD;
; 802  :         }
; 803  : 
; 804  :         _Orphan_range(_Mylast, _Mylast);
; 805  :         _Ty& _Result = *_Mylast;
; 806  :         ++_Mylast;

  00089	83 05 14 00 00
	00 04		 add	 DWORD PTR ?ms_AttributeInstancePool@CArea@@1V?$CDynamicPool@VCAttributeInstance@@@@A+20, 4

; 782  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00090	eb 0f		 jmp	 SHORT $LN92@Clear_Dest
$LN93@Clear_Dest:

; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00092	8d 4d 08	 lea	 ecx, DWORD PTR _pkData$[ebp]
  00095	51		 push	 ecx
  00096	50		 push	 eax
  00097	b9 10 00 00 00	 mov	 ecx, OFFSET ?ms_AttributeInstancePool@CArea@@1V?$CDynamicPool@VCAttributeInstance@@@@A+16
  0009c	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCAttributeInstance@@@?$vector@PAVCAttributeInstance@@V?$allocator@PAVCAttributeInstance@@@std@@@std@@AAEPAPAVCAttributeInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CAttributeInstance *,std::allocator<CAttributeInstance *> >::_Emplace_reallocate<CAttributeInstance * const &>
$LN92@Clear_Dest:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1149 : 		pObjectInstance->pAttributeInstance = NULL;

  000a1	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN5@Clear_Dest:

; 1150 : 	}
; 1151 : 
; 1152 : 	if (pObjectInstance->pTree)

  000a8	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  000ab	85 c9		 test	 ecx, ecx
  000ad	74 1a		 je	 SHORT $LN6@Clear_Dest

; 1153 : 	{
; 1154 : 		pObjectInstance->pTree->Clear();

  000af	e8 00 00 00 00	 call	 ?Clear@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::Clear

; 1155 : 		CSpeedTreeForestDirectX8::Instance().DeleteInstance(pObjectInstance->pTree);

  000b4	ff 76 0c	 push	 DWORD PTR [esi+12]
  000b7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCSpeedTreeForestDirectX8@@@@0PAVCSpeedTreeForestDirectX8@@A ; CSingleton<CSpeedTreeForestDirectX8>::ms_singleton
  000bd	e8 00 00 00 00	 call	 ?DeleteInstance@CSpeedTreeForest@@QAEXPAVCSpeedTreeWrapper@@@Z ; CSpeedTreeForest::DeleteInstance

; 1156 : 		pObjectInstance->pTree = NULL;

  000c2	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN6@Clear_Dest:

; 1157 : 	}
; 1158 : 
; 1159 : 	if (pObjectInstance->pThingInstance)

  000c9	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  000cc	85 c0		 test	 eax, eax
  000ce	74 10		 je	 SHORT $LN7@Clear_Dest

; 1160 : 	{
; 1161 : 		CGraphicThingInstance::Delete(pObjectInstance->pThingInstance);

  000d0	50		 push	 eax
  000d1	e8 00 00 00 00	 call	 ?Delete@CGraphicThingInstance@@SAXPAV1@@Z ; CGraphicThingInstance::Delete
  000d6	83 c4 04	 add	 esp, 4

; 1162 : 		pObjectInstance->pThingInstance = NULL;

  000d9	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
$LN7@Clear_Dest:

; 1163 : 	}
; 1164 : 
; 1165 : 	if (pObjectInstance->pAmbienceInstance)

  000e0	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  000e3	85 c0		 test	 eax, eax
  000e5	74 32		 je	 SHORT $LN8@Clear_Dest
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  000e7	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?ms_AmbienceInstancePool@CArea@@1V?$CDynamicPool@USAmbienceInstance@CArea@@@@A+20
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1167 : 		ms_AmbienceInstancePool.Free(pObjectInstance->pAmbienceInstance);

  000ed	89 45 08	 mov	 DWORD PTR _pkData$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  000f0	3b 0d 18 00 00
	00		 cmp	 ecx, DWORD PTR ?ms_AmbienceInstancePool@CArea@@1V?$CDynamicPool@USAmbienceInstance@CArea@@@@A+24
  000f6	74 0b		 je	 SHORT $LN104@Clear_Dest

; 797  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  000f8	89 01		 mov	 DWORD PTR [ecx], eax

; 798  :         } else {
; 799  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 800  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 801  :             _ASAN_VECTOR_RELEASE_GUARD;
; 802  :         }
; 803  : 
; 804  :         _Orphan_range(_Mylast, _Mylast);
; 805  :         _Ty& _Result = *_Mylast;
; 806  :         ++_Mylast;

  000fa	83 05 14 00 00
	00 04		 add	 DWORD PTR ?ms_AmbienceInstancePool@CArea@@1V?$CDynamicPool@USAmbienceInstance@CArea@@@@A+20, 4

; 782  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00101	eb 0f		 jmp	 SHORT $LN103@Clear_Dest
$LN104@Clear_Dest:

; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00103	8d 45 08	 lea	 eax, DWORD PTR _pkData$[ebp]
  00106	50		 push	 eax
  00107	51		 push	 ecx
  00108	b9 10 00 00 00	 mov	 ecx, OFFSET ?ms_AmbienceInstancePool@CArea@@1V?$CDynamicPool@USAmbienceInstance@CArea@@@@A+16
  0010d	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAUSAmbienceInstance@CArea@@@?$vector@PAUSAmbienceInstance@CArea@@V?$allocator@PAUSAmbienceInstance@CArea@@@std@@@std@@AAEPAPAUSAmbienceInstance@CArea@@QAPAU23@ABQAU23@@Z ; std::vector<CArea::SAmbienceInstance *,std::allocator<CArea::SAmbienceInstance *> >::_Emplace_reallocate<CArea::SAmbienceInstance * const &>
$LN103@Clear_Dest:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1168 : 		pObjectInstance->pAmbienceInstance = NULL;

  00112	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
$LN8@Clear_Dest:

; 1169 : 	}
; 1170 : 
; 1171 : 	if (pObjectInstance->pDungeonBlock)

  00119	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0011c	85 c0		 test	 eax, eax
  0011e	74 32		 je	 SHORT $LN9@Clear_Dest
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  00120	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?ms_DungeonBlockInstancePool@CArea@@1V?$CDynamicPool@VCDungeonBlock@@@@A+20
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1173 : 		ms_DungeonBlockInstancePool.Free(pObjectInstance->pDungeonBlock);

  00126	89 45 08	 mov	 DWORD PTR _pkData$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  00129	3b 0d 18 00 00
	00		 cmp	 ecx, DWORD PTR ?ms_DungeonBlockInstancePool@CArea@@1V?$CDynamicPool@VCDungeonBlock@@@@A+24
  0012f	74 0b		 je	 SHORT $LN113@Clear_Dest

; 797  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00131	89 01		 mov	 DWORD PTR [ecx], eax

; 798  :         } else {
; 799  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 800  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 801  :             _ASAN_VECTOR_RELEASE_GUARD;
; 802  :         }
; 803  : 
; 804  :         _Orphan_range(_Mylast, _Mylast);
; 805  :         _Ty& _Result = *_Mylast;
; 806  :         ++_Mylast;

  00133	83 05 14 00 00
	00 04		 add	 DWORD PTR ?ms_DungeonBlockInstancePool@CArea@@1V?$CDynamicPool@VCDungeonBlock@@@@A+20, 4

; 782  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  0013a	eb 0f		 jmp	 SHORT $LN112@Clear_Dest
$LN113@Clear_Dest:

; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0013c	8d 45 08	 lea	 eax, DWORD PTR _pkData$[ebp]
  0013f	50		 push	 eax
  00140	51		 push	 ecx
  00141	b9 10 00 00 00	 mov	 ecx, OFFSET ?ms_DungeonBlockInstancePool@CArea@@1V?$CDynamicPool@VCDungeonBlock@@@@A+16
  00146	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCDungeonBlock@@@?$vector@PAVCDungeonBlock@@V?$allocator@PAVCDungeonBlock@@@std@@@std@@AAEPAPAVCDungeonBlock@@QAPAV2@ABQAV2@@Z ; std::vector<CDungeonBlock *,std::allocator<CDungeonBlock *> >::_Emplace_reallocate<CDungeonBlock * const &>
$LN112@Clear_Dest:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1174 : 		pObjectInstance->pDungeonBlock = NULL;

  0014b	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0
$LN9@Clear_Dest:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h

; 111  : 				if (pTree)

  00152	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00155	85 c9		 test	 ecx, ecx
  00157	74 05		 je	 SHORT $LN118@Clear_Dest

; 112  : 					pTree->Clear();

  00159	e8 00 00 00 00	 call	 ?Clear@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::Clear
$LN118@Clear_Dest:

; 113  : 
; 114  : 				if (pThingInstance)

  0015e	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00161	85 c9		 test	 ecx, ecx
  00163	74 05		 je	 SHORT $LN119@Clear_Dest

; 115  : 					pThingInstance->Clear();

  00165	e8 00 00 00 00	 call	 ?Clear@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::Clear
$LN119@Clear_Dest:

; 116  : 
; 117  : 				if (pAttributeInstance)

  0016a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0016d	85 c9		 test	 ecx, ecx
  0016f	74 05		 je	 SHORT $LN120@Clear_Dest

; 118  : 					pAttributeInstance->Clear();

  00171	e8 00 00 00 00	 call	 ?Clear@CAttributeInstance@@QAEXXZ ; CAttributeInstance::Clear
$LN120@Clear_Dest:

; 119  : 
; 120  : 				if (pAmbienceInstance)

  00176	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00179	85 c9		 test	 ecx, ecx
  0017b	74 05		 je	 SHORT $LN121@Clear_Dest

; 121  : 					pAmbienceInstance->Clear();

  0017d	e8 00 00 00 00	 call	 ?Clear@CScreen@@QAEXXZ	; CScreen::Clear
$LN121@Clear_Dest:

; 122  : 
; 123  : 				if (pDungeonBlock)

  00182	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00185	85 c9		 test	 ecx, ecx
  00187	74 05		 je	 SHORT $LN122@Clear_Dest

; 124  : 					pDungeonBlock->Clear();

  00189	e8 00 00 00 00	 call	 ?Clear@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::Clear
$LN122@Clear_Dest:

; 133  : 				dwType = prt::PROPERTY_TYPE_NONE;

  0018e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 134  : 
; 135  : 				dwEffectID = 0xffffffff;

  00195	c7 46 18 ff ff
	ff ff		 mov	 DWORD PTR [esi+24], -1

; 136  : 				dwEffectInstanceIndex = 0xffffffff;

  0019c	c7 46 1c ff ff
	ff ff		 mov	 DWORD PTR [esi+28], -1

; 137  : 				isShadowFlag = false;

  001a3	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 138  : 
; 139  : 				pTree=NULL;

  001aa	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 140  : 				pThingInstance=NULL;

  001b1	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 141  : 				pAttributeInstance=NULL;

  001b8	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 142  : 				pAmbienceInstance=NULL;

  001bf	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0

; 143  : 				pDungeonBlock=NULL;

  001c6	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  001cd	a1 14 00 00 00	 mov	 eax, DWORD PTR ?ms_ObjectInstancePool@CArea@@1V?$CDynamicPool@USObjectInstance@CArea@@@@A+20
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1179 : 	ms_ObjectInstancePool.Free(pObjectInstance);

  001d2	89 75 08	 mov	 DWORD PTR _pkData$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  001d5	3b 05 18 00 00
	00		 cmp	 eax, DWORD PTR ?ms_ObjectInstancePool@CArea@@1V?$CDynamicPool@USObjectInstance@CArea@@@@A+24
  001db	74 11		 je	 SHORT $LN131@Clear_Dest

; 797  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  001dd	89 30		 mov	 DWORD PTR [eax], esi

; 798  :         } else {
; 799  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 800  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 801  :             _ASAN_VECTOR_RELEASE_GUARD;
; 802  :         }
; 803  : 
; 804  :         _Orphan_range(_Mylast, _Mylast);
; 805  :         _Ty& _Result = *_Mylast;
; 806  :         ++_Mylast;

  001df	83 05 14 00 00
	00 04		 add	 DWORD PTR ?ms_ObjectInstancePool@CArea@@1V?$CDynamicPool@USObjectInstance@CArea@@@@A+20, 4
  001e6	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1180 : }

  001e7	5e		 pop	 esi
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 04 00	 ret	 4
$LN131@Clear_Dest:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  001ee	8d 4d 08	 lea	 ecx, DWORD PTR _pkData$[ebp]
  001f1	51		 push	 ecx
  001f2	50		 push	 eax
  001f3	b9 10 00 00 00	 mov	 ecx, OFFSET ?ms_ObjectInstancePool@CArea@@1V?$CDynamicPool@USObjectInstance@CArea@@@@A+16
  001f8	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAUSObjectInstance@CArea@@@?$vector@PAUSObjectInstance@CArea@@V?$allocator@PAUSObjectInstance@CArea@@@std@@@std@@AAEPAPAUSObjectInstance@CArea@@QAPAU23@ABQAU23@@Z ; std::vector<CArea::SObjectInstance *,std::allocator<CArea::SObjectInstance *> >::_Emplace_reallocate<CArea::SObjectInstance * const &>
  001fd	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1180 : }

  001fe	5e		 pop	 esi
  001ff	8b e5		 mov	 esp, ebp
  00201	5d		 pop	 ebp
  00202	c2 04 00	 ret	 4
?__Clear_DestroyObjectInstance@CArea@@IAEXPAUSObjectInstance@1@@Z ENDP ; CArea::__Clear_DestroyObjectInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\extern\include\boost\range\iterator_range_core.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\algorithm\string\case_conv.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\extern\include\boost\algorithm\string\case_conv.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\range\iterator_range_core.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\algorithm\string\case_conv.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocale
; File C:\Marty 5.5\Src-Client\extern\include\boost\algorithm\string\case_conv.hpp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocale
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?__LoadAttribute@CArea@@IAEXPAUSObjectInstance@1@PBD@Z
_TEXT	SEGMENT
_pObjectInstance$GSCopy$1$ = -156			; size = 4
_object$1$ = -152					; size = 4
_pAttributeData$1$ = -152				; size = 4
_bIsDungeonObject$1$ = -145				; size = 1
_bFileExist$1$ = -145					; size = 1
_collision$2 = -144					; size = 80
_attrFileName$3 = -64					; size = 24
_v3Max$4 = -40						; size = 12
$T5 = -36						; size = 8
_v3Min$6 = -28						; size = 12
$T7 = -24						; size = 8
_pkData$ = -20						; size = 4
$T8 = -20						; size = 4
_pkNewData$9 = -20					; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pObjectInstance$ = 8					; size = 4
_c_szAttributeFileName$ = 12				; size = 4
?__LoadAttribute@CArea@@IAEXPAUSObjectInstance@1@PBD@Z PROC ; CArea::__LoadAttribute, COMDAT
; _this$ = ecx

; 732  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?__LoadAttribute@CArea@@IAEXPAUSObjectInstance@1@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b 45 08	 mov	 eax, DWORD PTR _pObjectInstance$[ebp]
  00030	8b 75 0c	 mov	 esi, DWORD PTR _c_szAttributeFileName$[ebp]

; 733  : 	const bool bFileExist = CResourceManager::Instance().IsFileExist(c_szAttributeFileName);

  00033	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
  00039	56		 push	 esi
  0003a	89 85 64 ff ff
	ff		 mov	 DWORD PTR _pObjectInstance$GSCopy$1$[ebp], eax
  00040	e8 00 00 00 00	 call	 ?IsFileExist@CResourceManager@@QAE_NPBD@Z ; CResourceManager::IsFileExist

; 734  : 
; 735  : 	CAttributeData * pAttributeData = (CAttributeData *) CResourceManager::Instance().GetResourcePointer(c_szAttributeFileName);

  00045	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
  0004b	56		 push	 esi
  0004c	88 85 6f ff ff
	ff		 mov	 BYTE PTR _bFileExist$1$[ebp], al
  00052	e8 00 00 00 00	 call	 ?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z ; CResourceManager::GetResourcePointer
  00057	89 85 68 ff ff
	ff		 mov	 DWORD PTR _pAttributeData$1$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1864 :         return _My_data._Myfirst == _My_data._Mylast;

  0005d	a1 14 00 00 00	 mov	 eax, DWORD PTR ?ms_AttributeInstancePool@CArea@@1V?$CDynamicPool@VCAttributeInstance@@@@A+20
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 63   : 			if (m_kVct_pkFree.empty())

  00062	39 05 10 00 00
	00		 cmp	 DWORD PTR ?ms_AttributeInstancePool@CArea@@1V?$CDynamicPool@VCAttributeInstance@@@@A+16, eax
  00068	75 64		 jne	 SHORT $LN13@LoadAttrib

; 65   : 				T* pkNewData=new T;

  0006a	6a 5c		 push	 92			; 0000005cH
  0006c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00071	83 c4 04	 add	 esp, 4
  00074	89 45 ec	 mov	 DWORD PTR $T8[ebp], eax
  00077	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0007e	85 c0		 test	 eax, eax
  00080	74 0b		 je	 SHORT $LN15@LoadAttrib
  00082	8b c8		 mov	 ecx, eax
  00084	e8 00 00 00 00	 call	 ??0CAttributeInstance@@QAE@XZ ; CAttributeInstance::CAttributeInstance
  00089	8b f8		 mov	 edi, eax
  0008b	eb 02		 jmp	 SHORT $LN16@LoadAttrib
$LN15@LoadAttrib:
  0008d	33 ff		 xor	 edi, edi
$LN16@LoadAttrib:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  0008f	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ms_AttributeInstancePool@CArea@@1V?$CDynamicPool@VCAttributeInstance@@@@A+8
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 65   : 				T* pkNewData=new T;

  00094	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0009b	89 7d ec	 mov	 DWORD PTR _pkNewData$9[ebp], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  0009e	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?ms_AttributeInstancePool@CArea@@1V?$CDynamicPool@VCAttributeInstance@@@@A+12
  000a4	74 11		 je	 SHORT $LN23@LoadAttrib

; 797  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  000a6	89 38		 mov	 DWORD PTR [eax], edi

; 798  :         } else {
; 799  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 800  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 801  :             _ASAN_VECTOR_RELEASE_GUARD;
; 802  :         }
; 803  : 
; 804  :         _Orphan_range(_Mylast, _Mylast);
; 805  :         _Ty& _Result = *_Mylast;
; 806  :         ++_Mylast;

  000a8	83 05 08 00 00
	00 04		 add	 DWORD PTR ?ms_AttributeInstancePool@CArea@@1V?$CDynamicPool@VCAttributeInstance@@@@A+8, 4
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 67   : 				++m_uUsedCapacity;

  000af	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_AttributeInstancePool@CArea@@1V?$CDynamicPool@VCAttributeInstance@@@@A+32

; 68   : 				return pkNewData;

  000b5	eb 22		 jmp	 SHORT $LN12@LoadAttrib
$LN23@LoadAttrib:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  000b7	8d 4d ec	 lea	 ecx, DWORD PTR _pkNewData$9[ebp]
  000ba	51		 push	 ecx
  000bb	50		 push	 eax
  000bc	b9 04 00 00 00	 mov	 ecx, OFFSET ?ms_AttributeInstancePool@CArea@@1V?$CDynamicPool@VCAttributeInstance@@@@A+4
  000c1	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCAttributeInstance@@@?$vector@PAVCAttributeInstance@@V?$allocator@PAVCAttributeInstance@@@std@@@std@@AAEPAPAVCAttributeInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CAttributeInstance *,std::allocator<CAttributeInstance *> >::_Emplace_reallocate<CAttributeInstance * const &>
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 67   : 				++m_uUsedCapacity;

  000c6	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_AttributeInstancePool@CArea@@1V?$CDynamicPool@VCAttributeInstance@@@@A+32

; 68   : 				return pkNewData;

  000cc	eb 0b		 jmp	 SHORT $LN12@LoadAttrib
$LN13@LoadAttrib:

; 69   : 			}
; 70   : 
; 71   : 			T* pkFreeData=m_kVct_pkFree.back();

  000ce	8b 78 fc	 mov	 edi, DWORD PTR [eax-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1944 :         return _My_data._Mylast[-1];

  000d1	83 c0 fc	 add	 eax, -4			; fffffffcH

; 1713 :         --_Mylast;

  000d4	a3 14 00 00 00	 mov	 DWORD PTR ?ms_AttributeInstancePool@CArea@@1V?$CDynamicPool@VCAttributeInstance@@@@A+20, eax
$LN12@LoadAttrib:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 738  : 	pAttrInstance->Clear();

  000d9	8b cf		 mov	 ecx, edi
  000db	e8 00 00 00 00	 call	 ?Clear@CAttributeInstance@@QAEXXZ ; CAttributeInstance::Clear

; 739  : 	pAttrInstance->SetObjectPointer(pAttributeData);

  000e0	ff b5 68 ff ff
	ff		 push	 DWORD PTR _pAttributeData$1$[ebp]
  000e6	8b cf		 mov	 ecx, edi
  000e8	e8 00 00 00 00	 call	 ?SetObjectPointer@CAttributeInstance@@QAEXPAVCAttributeData@@@Z ; CAttributeInstance::SetObjectPointer

; 741  : 	if (false == bFileExist)

  000ed	80 bd 6f ff ff
	ff 00		 cmp	 BYTE PTR _bFileExist$1$[ebp], 0
  000f4	0f 85 2d 02 00
	00		 jne	 $LN153@LoadAttrib
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  000fa	8b ce		 mov	 ecx, esi

; 2293 :     size_type _Mysize = 0; // current length of string

  000fc	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _attrFileName$3[ebp+16], 0
  00103	0f 57 c0	 xorps	 xmm0, xmm0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  00106	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _attrFileName$3[ebp+20], 0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0010d	0f 11 45 c0	 movups	 XMMWORD PTR _attrFileName$3[ebp], xmm0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00111	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL152@LoadAttrib:
  00114	8a 01		 mov	 al, BYTE PTR [ecx]
  00116	41		 inc	 ecx
  00117	84 c0		 test	 al, al
  00119	75 f9		 jne	 SHORT $LL152@LoadAttrib
  0011b	2b ca		 sub	 ecx, edx

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0011d	51		 push	 ecx
  0011e	56		 push	 esi
  0011f	8d 4d c0	 lea	 ecx, DWORD PTR _attrFileName$3[ebp]
  00122	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocale

; 266  :     locale() noexcept : _Ptr(_Init(true)) {}

  00127	6a 01		 push	 1
  00129	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  00130	e8 00 00 00 00	 call	 ?_Init@locale@std@@CAPAV_Locimp@12@_N@Z ; std::locale::_Init
  00135	89 45 e0	 mov	 DWORD PTR $T5[ebp+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2227 :         if (_Large_string_engaged()) {

  00138	83 7d d4 10	 cmp	 DWORD PTR _attrFileName$3[ebp+20], 16 ; 00000010H
  0013c	8d 4d c0	 lea	 ecx, DWORD PTR _attrFileName$3[ebp]

; 3925 :         return iterator(

  0013f	8b 45 d0	 mov	 eax, DWORD PTR _attrFileName$3[ebp+16]

; 2227 :         if (_Large_string_engaged()) {

  00142	0f 43 4d c0	 cmovae	 ecx, DWORD PTR _attrFileName$3[ebp]

; 3925 :         return iterator(

  00146	03 c1		 add	 eax, ecx
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 744  : 		boost::algorithm::to_lower(attrFileName);

  00148	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2227 :         if (_Large_string_engaged()) {

  0014c	83 7d d4 10	 cmp	 DWORD PTR _attrFileName$3[ebp+20], 16 ; 00000010H
  00150	8d 4d c0	 lea	 ecx, DWORD PTR _attrFileName$3[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\boost\range\iterator_range_core.hpp

; 217  :         , m_End(End)

  00153	89 45 ec	 mov	 DWORD PTR $T7[ebp+4], eax
; File C:\Marty 5.5\Src-Client\extern\include\boost\algorithm\string\case_conv.hpp

; 95   :             ::boost::algorithm::detail::transform_range(

  00156	8d 45 dc	 lea	 eax, DWORD PTR $T5[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2227 :         if (_Large_string_engaged()) {

  00159	0f 43 4d c0	 cmovae	 ecx, DWORD PTR _attrFileName$3[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\boost\algorithm\string\case_conv.hpp

; 95   :             ::boost::algorithm::detail::transform_range(

  0015d	50		 push	 eax
  0015e	8d 45 e8	 lea	 eax, DWORD PTR $T7[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\boost\range\iterator_range_core.hpp

; 216  :         : m_Begin(Begin)

  00161	89 4d e8	 mov	 DWORD PTR $T7[ebp], ecx
; File C:\Marty 5.5\Src-Client\extern\include\boost\algorithm\string\case_conv.hpp

; 95   :             ::boost::algorithm::detail::transform_range(

  00164	50		 push	 eax
  00165	e8 00 00 00 00	 call	 ??$transform_range@V?$iterator_range@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@boost@@U?$to_lowerF@D@detail@algorithm@2@@detail@algorithm@boost@@YAXABV?$iterator_range@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@2@U?$to_lowerF@D@012@@Z ; boost::algorithm::detail::transform_range<boost::iterator_range<std::_String_iterator<std::_String_val<std::_Simple_types<char> > > >,boost::algorithm::detail::to_lowerF<char> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocale

; 346  :         if (_Ptr) {

  0016a	8b 4d e0	 mov	 ecx, DWORD PTR $T5[ebp+4]
; File C:\Marty 5.5\Src-Client\extern\include\boost\algorithm\string\case_conv.hpp

; 95   :             ::boost::algorithm::detail::transform_range(

  0016d	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 744  : 		boost::algorithm::to_lower(attrFileName);

  00170	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocale

; 346  :         if (_Ptr) {

  00174	85 c9		 test	 ecx, ecx
  00176	74 13		 je	 SHORT $LN101@LoadAttrib

; 347  :             delete _Ptr->_Decref();

  00178	8b 01		 mov	 eax, DWORD PTR [ecx]
  0017a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0017d	ff d0		 call	 eax
  0017f	85 c0		 test	 eax, eax
  00181	74 08		 je	 SHORT $LN101@LoadAttrib
  00183	8b 10		 mov	 edx, DWORD PTR [eax]
  00185	8b c8		 mov	 ecx, eax
  00187	6a 01		 push	 1
  00189	ff 12		 call	 DWORD PTR [edx]
$LN101@LoadAttrib:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 745  : 		const bool bIsDungeonObject = (std::string::npos != attrFileName.find("/dungeon/")) || (std::string::npos != attrFileName.find("\\dungeon\\"));

  0018b	6a 00		 push	 0
  0018d	68 00 00 00 00	 push	 OFFSET ??_C@_09OLKGEJPN@?1dungeon?1@
  00192	8d 4d c0	 lea	 ecx, DWORD PTR _attrFileName$3[ebp]
  00195	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  0019a	83 f8 ff	 cmp	 eax, -1
  0019d	75 1b		 jne	 SHORT $LN8@LoadAttrib
  0019f	6a 00		 push	 0
  001a1	68 00 00 00 00	 push	 OFFSET ??_C@_09PCMKFNFD@?2dungeon?2@
  001a6	8d 4d c0	 lea	 ecx, DWORD PTR _attrFileName$3[ebp]
  001a9	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  001ae	c6 85 6f ff ff
	ff 00		 mov	 BYTE PTR _bIsDungeonObject$1$[ebp], 0
  001b5	83 f8 ff	 cmp	 eax, -1
  001b8	74 07		 je	 SHORT $LN9@LoadAttrib
$LN8@LoadAttrib:
  001ba	c6 85 6f ff ff
	ff 01		 mov	 BYTE PTR _bIsDungeonObject$1$[ebp], 1
$LN9@LoadAttrib:

; 746  : 
; 747  : 		if (pAttributeData->IsEmpty() && false == bIsDungeonObject)

  001c1	8b b5 68 ff ff
	ff		 mov	 esi, DWORD PTR _pAttributeData$1$[ebp]
  001c7	8b ce		 mov	 ecx, esi
  001c9	e8 00 00 00 00	 call	 ?IsEmpty@CResource@@QBE_NXZ ; CResource::IsEmpty
  001ce	84 c0		 test	 al, al
  001d0	0f 84 18 01 00
	00		 je	 $LN4@LoadAttrib
  001d6	80 bd 6f ff ff
	ff 00		 cmp	 BYTE PTR _bIsDungeonObject$1$[ebp], 0
  001dd	0f 85 0b 01 00
	00		 jne	 $LN4@LoadAttrib

; 748  : 		{
; 749  : 			if (NULL != pObjectInstance && NULL != pObjectInstance->pThingInstance)

  001e3	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _pObjectInstance$GSCopy$1$[ebp]
  001e9	85 c0		 test	 eax, eax
  001eb	0f 84 fd 00 00
	00		 je	 $LN4@LoadAttrib
  001f1	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001f4	89 8d 68 ff ff
	ff		 mov	 DWORD PTR _object$1$[ebp], ecx
  001fa	85 c9		 test	 ecx, ecx
  001fc	0f 84 ec 00 00
	00		 je	 $LN4@LoadAttrib

; 750  : 			{
; 751  : 				CGraphicThingInstance* object = pObjectInstance->pThingInstance;
; 752  : 
; 753  : 				D3DXVECTOR3 v3Min, v3Max;
; 754  : 
; 755  : 				object->GetBoundingAABB(v3Min, v3Max);

  00202	8b 01		 mov	 eax, DWORD PTR [ecx]
  00204	8d 55 d8	 lea	 edx, DWORD PTR _v3Max$4[ebp]
  00207	52		 push	 edx
  00208	8d 55 e4	 lea	 edx, DWORD PTR _v3Min$6[ebp]
  0020b	52		 push	 edx
  0020c	ff 50 40	 call	 DWORD PTR [eax+64]

; 756  : 
; 757  : 				CStaticCollisionData collision;
; 758  : 				collision.dwType = COLLISION_TYPE_OBB;
; 759  : 				D3DXQuaternionRotationYawPitchRoll(&collision.quatRotation, object->GetYaw(), object->GetPitch(), object->GetRoll());

  0020f	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR _object$1$[ebp]
  00215	c7 85 70 ff ff
	ff 05 00 00 00	 mov	 DWORD PTR _collision$2[ebp], 5
  0021f	e8 00 00 00 00	 call	 ?GetRoll@CGraphicObjectInstance@@QAEMXZ ; CGraphicObjectInstance::GetRoll
  00224	51		 push	 ecx
  00225	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR _object$1$[ebp]
  0022b	d9 1c 24	 fstp	 DWORD PTR [esp]
  0022e	e8 00 00 00 00	 call	 ?GetPitch@CGraphicObjectInstance@@QAEMXZ ; CGraphicObjectInstance::GetPitch
  00233	51		 push	 ecx
  00234	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR _object$1$[ebp]
  0023a	d9 1c 24	 fstp	 DWORD PTR [esp]
  0023d	e8 00 00 00 00	 call	 ?GetYaw@CGraphicObjectInstance@@QAEMXZ ; CGraphicObjectInstance::GetYaw
  00242	51		 push	 ecx
  00243	8d 45 b0	 lea	 eax, DWORD PTR _collision$2[ebp+64]
  00246	d9 1c 24	 fstp	 DWORD PTR [esp]
  00249	50		 push	 eax
  0024a	e8 00 00 00 00	 call	 _D3DXQuaternionRotationYawPitchRoll@16

; 760  : 				strcpy(collision.szName, "DummyCollisionOBB");

  0024f	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_0BC@NJPKAPFJ@DummyCollisionOBB@

; 768  : 				pAttributeData->AddCollisionData(collision);

  00256	8b ce		 mov	 ecx, esi
  00258	66 a1 10 00 00
	00		 mov	 ax, WORD PTR ??_C@_0BC@NJPKAPFJ@DummyCollisionOBB@+16
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0025e	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR _v3Min$6[ebp+4]
  00263	f3 0f 58 4d dc	 addss	 xmm1, DWORD PTR _v3Max$4[ebp+4]
  00268	f3 0f 10 7d e0	 movss	 xmm7, DWORD PTR _v3Max$4[ebp+8]

; 182  :     z = fz;

  0026d	f3 0f 10 35 00
	00 00 00	 movss	 xmm6, DWORD PTR __real@3f000000

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00275	f3 0f 10 55 d8	 movss	 xmm2, DWORD PTR _v3Max$4[ebp]
  0027a	f3 0f 58 55 e4	 addss	 xmm2, DWORD PTR _v3Min$6[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 760  : 				strcpy(collision.szName, "DummyCollisionOBB");

  0027f	0f 11 85 74 ff
	ff ff		 movups	 XMMWORD PTR _collision$2[ebp+4], xmm0
  00286	66 89 45 84	 mov	 WORD PTR _collision$2[ebp+20], ax

; 768  : 				pAttributeData->AddCollisionData(collision);

  0028a	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _collision$2[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00290	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _v3Min$6[ebp+8]
  00295	f3 0f 58 c7	 addss	 xmm0, xmm7

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00299	f3 0f 59 ce	 mulss	 xmm1, xmm6
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 768  : 				pAttributeData->AddCollisionData(collision);

  0029d	50		 push	 eax
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0029e	f3 0f 5c 7d ec	 subss	 xmm7, DWORD PTR _v3Min$6[ebp+8]

; 182  :     z = fz;

  002a3	f3 0f 59 d6	 mulss	 xmm2, xmm6

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  002a7	f3 0f 59 c6	 mulss	 xmm0, xmm6
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 761  : 				collision.v3Position = (v3Min + v3Max) * 0.5f;

  002ab	f3 0f 11 4d 9c	 movss	 DWORD PTR _collision$2[ebp+44], xmm1
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  002b0	f3 0f 10 4d d8	 movss	 xmm1, DWORD PTR _v3Max$4[ebp]
  002b5	f3 0f 5c 4d e4	 subss	 xmm1, DWORD PTR _v3Min$6[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 761  : 				collision.v3Position = (v3Min + v3Max) * 0.5f;

  002ba	f3 0f 11 45 a0	 movss	 DWORD PTR _collision$2[ebp+48], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  002bf	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _v3Max$4[ebp+4]
  002c4	f3 0f 5c 45 e8	 subss	 xmm0, DWORD PTR _v3Min$6[ebp+4]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 765  : 				collision.fDimensions[1] = vDelta.y * 0.5f;

  002c9	f3 0f 59 fe	 mulss	 xmm7, xmm6
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  002cd	f3 0f 59 ce	 mulss	 xmm1, xmm6
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 764  : 				collision.fDimensions[0] = vDelta.x * 0.5f;

  002d1	f3 0f 59 c6	 mulss	 xmm0, xmm6
  002d5	f3 0f 11 55 98	 movss	 DWORD PTR _collision$2[ebp+40], xmm2
  002da	f3 0f 11 4d a4	 movss	 DWORD PTR _collision$2[ebp+52], xmm1

; 765  : 				collision.fDimensions[1] = vDelta.y * 0.5f;

  002df	f3 0f 11 45 a8	 movss	 DWORD PTR _collision$2[ebp+56], xmm0

; 766  : 				collision.fDimensions[2] = vDelta.z * 0.5f;

  002e4	f3 0f 11 7d ac	 movss	 DWORD PTR _collision$2[ebp+60], xmm7

; 768  : 				pAttributeData->AddCollisionData(collision);

  002e9	e8 00 00 00 00	 call	 ?AddCollisionData@CAttributeData@@QAEIABVCStaticCollisionData@@@Z ; CAttributeData::AddCollisionData
$LN4@LoadAttrib:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  002ee	8b 4d d4	 mov	 ecx, DWORD PTR _attrFileName$3[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 771  : 	}

  002f1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  002f8	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  002fb	72 30		 jb	 SHORT $LN115@LoadAttrib
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002fd	8b 55 c0	 mov	 edx, DWORD PTR _attrFileName$3[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00300	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00301	8b c2		 mov	 eax, edx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00303	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00309	72 10		 jb	 SHORT $LN125@LoadAttrib

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0030b	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0030e	83 c1 23	 add	 ecx, 35			; 00000023H
  00311	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00313	83 c0 fc	 add	 eax, -4			; fffffffcH
  00316	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00319	77 76		 ja	 SHORT $LN157@LoadAttrib
$LN125@LoadAttrib:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0031b	51		 push	 ecx
  0031c	52		 push	 edx
  0031d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00322	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 741  : 	if (false == bFileExist)

  00325	eb 06		 jmp	 SHORT $LN115@LoadAttrib
$LN153@LoadAttrib:
  00327	8b b5 68 ff ff
	ff		 mov	 esi, DWORD PTR _pAttributeData$1$[ebp]
$LN115@LoadAttrib:

; 772  : 
; 773  : 	if (!pAttributeData->IsEmpty())

  0032d	8b ce		 mov	 ecx, esi
  0032f	e8 00 00 00 00	 call	 ?IsEmpty@CResource@@QBE_NXZ ; CResource::IsEmpty
  00334	84 c0		 test	 al, al
  00336	75 0b		 jne	 SHORT $LN5@LoadAttrib

; 774  : 	{
; 775  : 		pObjectInstance->pAttributeInstance = pAttrInstance;

  00338	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _pObjectInstance$GSCopy$1$[ebp]
  0033e	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 776  : 	}

  00341	eb 31		 jmp	 SHORT $LN135@LoadAttrib
$LN5@LoadAttrib:

; 777  : 	else
; 778  : 	{
; 779  : 		pAttrInstance->Clear();

  00343	8b cf		 mov	 ecx, edi
  00345	e8 00 00 00 00	 call	 ?Clear@CAttributeInstance@@QAEXXZ ; CAttributeInstance::Clear
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  0034a	a1 14 00 00 00	 mov	 eax, DWORD PTR ?ms_AttributeInstancePool@CArea@@1V?$CDynamicPool@VCAttributeInstance@@@@A+20
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 780  : 		ms_AttributeInstancePool.Free(pAttrInstance);

  0034f	89 7d ec	 mov	 DWORD PTR _pkData$[ebp], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  00352	3b 05 18 00 00
	00		 cmp	 eax, DWORD PTR ?ms_AttributeInstancePool@CArea@@1V?$CDynamicPool@VCAttributeInstance@@@@A+24
  00358	74 0b		 je	 SHORT $LN136@LoadAttrib

; 797  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  0035a	89 38		 mov	 DWORD PTR [eax], edi

; 798  :         } else {
; 799  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 800  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 801  :             _ASAN_VECTOR_RELEASE_GUARD;
; 802  :         }
; 803  : 
; 804  :         _Orphan_range(_Mylast, _Mylast);
; 805  :         _Ty& _Result = *_Mylast;
; 806  :         ++_Mylast;

  0035c	83 05 14 00 00
	00 04		 add	 DWORD PTR ?ms_AttributeInstancePool@CArea@@1V?$CDynamicPool@VCAttributeInstance@@@@A+20, 4

; 782  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00363	eb 0f		 jmp	 SHORT $LN135@LoadAttrib
$LN136@LoadAttrib:

; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00365	8d 4d ec	 lea	 ecx, DWORD PTR _pkData$[ebp]
  00368	51		 push	 ecx
  00369	50		 push	 eax
  0036a	b9 10 00 00 00	 mov	 ecx, OFFSET ?ms_AttributeInstancePool@CArea@@1V?$CDynamicPool@VCAttributeInstance@@@@A+16
  0036f	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCAttributeInstance@@@?$vector@PAVCAttributeInstance@@V?$allocator@PAVCAttributeInstance@@@std@@@std@@AAEPAPAVCAttributeInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CAttributeInstance *,std::allocator<CAttributeInstance *> >::_Emplace_reallocate<CAttributeInstance * const &>
$LN135@LoadAttrib:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 782  : }

  00374	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00377	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0037e	59		 pop	 ecx
  0037f	5f		 pop	 edi
  00380	5e		 pop	 esi
  00381	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00384	33 cd		 xor	 ecx, ebp
  00386	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0038b	8b e5		 mov	 esp, ebp
  0038d	5d		 pop	 ebp
  0038e	c2 08 00	 ret	 8
$LN157@LoadAttrib:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00391	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN155@LoadAttrib:
  00396	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?__LoadAttribute@CArea@@IAEXPAUSObjectInstance@1@PBD@Z$2:
  00000	6a 5c		 push	 92			; 0000005cH
  00002	8b 45 ec	 mov	 eax, DWORD PTR $T8[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
__unwindfunclet$?__LoadAttribute@CArea@@IAEXPAUSObjectInstance@1@PBD@Z$0:
  0000f	8d 4d c0	 lea	 ecx, DWORD PTR _attrFileName$3[ebp]
  00012	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?__LoadAttribute@CArea@@IAEXPAUSObjectInstance@1@PBD@Z$1:
  00017	8d 4d dc	 lea	 ecx, DWORD PTR $T5[ebp]
  0001a	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
  0001f	cc		 int	 3
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
__ehhandler$?__LoadAttribute@CArea@@IAEXPAUSObjectInstance@1@PBD@Z:
  00024	90		 npad	 1
  00025	90		 npad	 1
  00026	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002d	8b 8a 64 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-156]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0003d	33 c8		 xor	 ecx, eax
  0003f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00044	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?__LoadAttribute@CArea@@IAEXPAUSObjectInstance@1@PBD@Z
  00049	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?__LoadAttribute@CArea@@IAEXPAUSObjectInstance@1@PBD@Z ENDP ; CArea::__LoadAttribute
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?__UpdateEffectList@CArea@@IAEXXZ
_TEXT	SEGMENT
_rkEftMgr$1$ = -8					; size = 4
__Successor$1 = -4					; size = 4
_i$ = -4						; size = 4
?__UpdateEffectList@CArea@@IAEXXZ PROC			; CArea::__UpdateEffectList, COMDAT
; _this$ = ecx

; 76   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 80   : 	CEffectManager& rkEftMgr=CEffectManager::Instance();

  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_singleton@?$CSingleton@VCEffectManager@@@@0PAVCEffectManager@@A ; CSingleton<CEffectManager>::ms_singleton
  0000b	53		 push	 ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1127 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  0000c	8d 99 8c 00 00
	00		 lea	 ebx, DWORD PTR [ecx+140]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 80   : 	CEffectManager& rkEftMgr=CEffectManager::Instance();

  00012	89 45 f8	 mov	 DWORD PTR _rkEftMgr$1$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1127 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00015	8b 03		 mov	 eax, DWORD PTR [ebx]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 76   : {

  00017	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00018	8b 30		 mov	 esi, DWORD PTR [eax]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 84   : 	for (i = m_EffectInstanceMap.begin(); i != m_EffectInstanceMap.end();)

  0001a	89 75 fc	 mov	 DWORD PTR _i$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0001d	3b f0		 cmp	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 84   : 	for (i = m_EffectInstanceMap.begin(); i != m_EffectInstanceMap.end();)

  0001f	74 52		 je	 SHORT $LN3@UpdateEffe
  00021	57		 push	 edi
$LL2@UpdateEffe:

; 85   : 	{
; 86   : 		CEffectInstance * pEffectInstance = i->second;

  00022	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]

; 87   : 
; 88   : 		pEffectInstance->Update();

  00025	8b cf		 mov	 ecx, edi
  00027	e8 00 00 00 00	 call	 ?Update@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::Update

; 89   : 
; 90   : 		if (!pEffectInstance->isAlive())

  0002c	8b cf		 mov	 ecx, edi
  0002e	e8 00 00 00 00	 call	 ?isAlive@CEffectInstance@@QAEHXZ ; CEffectInstance::isAlive
  00033	8d 4d fc	 lea	 ecx, DWORD PTR __Successor$1[ebp]
  00036	85 c0		 test	 eax, eax
  00038	75 2c		 jne	 SHORT $LN5@UpdateEffe
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1286 :         _Unchecked_const_iterator _Successor = _Where;

  0003a	89 75 fc	 mov	 DWORD PTR __Successor$1[ebp], esi

; 1287 :         ++_Successor; // save successor iterator for return

  0003d	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >,std::_Iterator_base0>::operator++

; 1288 :         _Nodeptr _Erasednode = _Scary->_Extract(_Where); // node to erase

  00042	56		 push	 esi
  00043	8b cb		 mov	 ecx, ebx
  00045	e8 00 00 00 00	 call	 ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >::_Extract
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  0004a	6a 18		 push	 24			; 00000018H
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 92   : 			i = m_EffectInstanceMap.erase(i);

  00052	8b 75 fc	 mov	 esi, DWORD PTR __Successor$1[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00055	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 93   : 			rkEftMgr.DestroyUnsafeEffectInstance(pEffectInstance);

  00058	8b 4d f8	 mov	 ecx, DWORD PTR _rkEftMgr$1$[ebp]
  0005b	89 75 fc	 mov	 DWORD PTR _i$[ebp], esi
  0005e	57		 push	 edi
  0005f	e8 00 00 00 00	 call	 ?DestroyUnsafeEffectInstance@CEffectManager@@QAE_NPAVCEffectInstance@@@Z ; CEffectManager::DestroyUnsafeEffectInstance

; 94   : 		}

  00064	eb 08		 jmp	 SHORT $LN85@UpdateEffe
$LN5@UpdateEffe:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 199  :         _Mybase::operator++();

  00066	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >,std::_Iterator_base0>::operator++
  0006b	8b 75 fc	 mov	 esi, DWORD PTR _i$[ebp]
$LN85@UpdateEffe:

; 233  :         return this->_Ptr == _Right._Ptr;

  0006e	3b 33		 cmp	 esi, DWORD PTR [ebx]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 84   : 	for (i = m_EffectInstanceMap.begin(); i != m_EffectInstanceMap.end();)

  00070	75 b0		 jne	 SHORT $LL2@UpdateEffe
  00072	5f		 pop	 edi
$LN3@UpdateEffe:
  00073	5e		 pop	 esi

; 95   : 		else
; 96   : 			++i;
; 97   : 	}
; 98   : }

  00074	5b		 pop	 ebx
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
?__UpdateEffectList@CArea@@IAEXXZ ENDP			; CArea::__UpdateEffectList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?__UpdateAniThingList@CArea@@IAEXXZ
_TEXT	SEGMENT
?__UpdateAniThingList@CArea@@IAEXXZ PROC		; CArea::__UpdateAniThingList, COMDAT
; _this$ = ecx

; 48   : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00004	8b 77 28	 mov	 esi, DWORD PTR [edi+40]
  00007	3b 77 2c	 cmp	 esi, DWORD PTR [edi+44]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 53   : 		while (i!=m_ThingCloneInstaceVector.end())

  0000a	74 21		 je	 SHORT $LN3@UpdateAniT
  0000c	53		 push	 ebx
  0000d	0f 1f 00	 npad	 3
$LL2@UpdateAniT:

; 54   : 		{
; 55   : 			pkThingInst=*i++;

  00010	8b 1e		 mov	 ebx, DWORD PTR [esi]

; 56   : 			if (pkThingInst->isShow())

  00012	8b cb		 mov	 ecx, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 79   :         ++_Ptr;

  00014	83 c6 04	 add	 esi, 4
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 56   : 			if (pkThingInst->isShow())

  00017	e8 00 00 00 00	 call	 ?isShow@CGraphicObjectInstance@@QAE_NXZ ; CGraphicObjectInstance::isShow
  0001c	84 c0		 test	 al, al
  0001e	74 07		 je	 SHORT $LN6@UpdateAniT

; 57   : 			{
; 58   : 				pkThingInst->UpdateLODLevel();

  00020	8b cb		 mov	 ecx, ebx
  00022	e8 00 00 00 00	 call	 ?UpdateLODLevel@CGraphicThingInstance@@QAEXXZ ; CGraphicThingInstance::UpdateLODLevel
$LN6@UpdateAniT:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 163  :         return _Ptr == _Right._Ptr;

  00027	3b 77 2c	 cmp	 esi, DWORD PTR [edi+44]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 53   : 		while (i!=m_ThingCloneInstaceVector.end())

  0002a	75 e4		 jne	 SHORT $LL2@UpdateAniT
  0002c	5b		 pop	 ebx
$LN3@UpdateAniT:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0002d	8b 77 40	 mov	 esi, DWORD PTR [edi+64]
  00030	3b 77 44	 cmp	 esi, DWORD PTR [edi+68]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 67   : 		while (i!=m_AniThingCloneInstanceVector.end())

  00033	74 0f		 je	 SHORT $LN5@UpdateAniT
$LL4@UpdateAniT:

; 70   : 			pkThingInst->Update();

  00035	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 79   :         ++_Ptr;

  00037	83 c6 04	 add	 esi, 4
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 70   : 			pkThingInst->Update();

  0003a	e8 00 00 00 00	 call	 ?Update@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::Update
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 163  :         return _Ptr == _Right._Ptr;

  0003f	3b 77 44	 cmp	 esi, DWORD PTR [edi+68]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 67   : 		while (i!=m_AniThingCloneInstanceVector.end())

  00042	75 f1		 jne	 SHORT $LL4@UpdateAniT
$LN5@UpdateAniT:
  00044	5f		 pop	 edi

; 71   : 		}
; 72   : 	}
; 73   : }

  00045	5e		 pop	 esi
  00046	c3		 ret	 0
?__UpdateAniThingList@CArea@@IAEXXZ ENDP		; CArea::__UpdateAniThingList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?__Load_BuildObjectInstances@CArea@@IAEXXZ
_TEXT	SEGMENT
$T2 = -72						; size = 12
__Loc$3 = -60						; size = 12
$T4 = -48						; size = 8
$T5 = -40						; size = 8
$T6 = -32						; size = 4
$T7 = -32						; size = 1
$T8 = -32						; size = 4
_c_pObjectData$9 = -28					; size = 4
$T10 = -24						; size = 4
_this$1$ = -24						; size = 4
_pkNewData$11 = -24					; size = 4
_i$1$ = -20						; size = 4
$T12 = -13						; size = 1
__$EHRec$ = -12						; size = 12
?__Load_BuildObjectInstances@CArea@@IAEXXZ PROC		; CArea::__Load_BuildObjectInstances, COMDAT
; _this$ = ecx

; 472  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?__Load_BuildObjectInstances@CArea@@IAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx
  0002a	89 75 e8	 mov	 DWORD PTR _this$1$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0002d	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00030	8d 5e 10	 lea	 ebx, DWORD PTR [esi+16]
  00033	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  00036	3b c7		 cmp	 eax, edi
  00038	74 05		 je	 SHORT $LN145@Load_Build

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  0003a	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  0003d	8b f8		 mov	 edi, eax
$LN145@Load_Build:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 474  : 	m_ObjectInstanceVector.resize(GetObjectDataCount());

  0003f	e8 00 00 00 00	 call	 ?GetObjectDataCount@CArea@@QAEKXZ ; CArea::GetObjectDataCount
  00044	8b c8		 mov	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1557 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  00046	8b d7		 mov	 edx, edi
  00048	8b 03		 mov	 eax, DWORD PTR [ebx]
  0004a	2b d0		 sub	 edx, eax
  0004c	c1 fa 02	 sar	 edx, 2

; 1558 :         if (_Newsize < _Oldsize) { // trim

  0004f	3b ca		 cmp	 ecx, edx
  00051	73 08		 jae	 SHORT $LN151@Load_Build

; 1559 :             const pointer _Newlast = _Myfirst + _Newsize;

  00053	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]

; 1560 :             _Orphan_range(_Newlast, _Mylast);
; 1561 :             _Destroy_range(_Newlast, _Mylast, _Al);
; 1562 :             _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1563 :             _Mylast = _Newlast;

  00056	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 1564 :             return;

  00059	eb 31		 jmp	 SHORT $LN152@Load_Build
$LN151@Load_Build:

; 1565 :         }
; 1566 : 
; 1567 :         if (_Newsize > _Oldsize) { // append

  0005b	76 2f		 jbe	 SHORT $LN152@Load_Build

; 1568 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

  0005d	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00060	2b 03		 sub	 eax, DWORD PTR [ebx]
  00062	c1 f8 02	 sar	 eax, 2

; 1569 :             if (_Newsize > _Oldcapacity) { // reallocate

  00065	3b c8		 cmp	 ecx, eax
  00067	76 0e		 jbe	 SHORT $LN153@Load_Build

; 1570 :                 _Resize_reallocate(_Newsize, _Val);

  00069	8d 45 f3	 lea	 eax, DWORD PTR $T12[ebp]
  0006c	50		 push	 eax
  0006d	51		 push	 ecx
  0006e	8b cb		 mov	 ecx, ebx
  00070	e8 00 00 00 00	 call	 ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUSObjectInstance@CArea@@V?$allocator@PAUSObjectInstance@CArea@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<CArea::SObjectInstance *,std::allocator<CArea::SObjectInstance *> >::_Resize_reallocate<std::_Value_init_tag>

; 1571 :                 return;

  00075	eb 15		 jmp	 SHORT $LN152@Load_Build
$LN153@Load_Build:

; 1580 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  00077	2b ca		 sub	 ecx, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 2035 :             _Zero_range(_PFirst, _PFirst + _Count);

  00079	8d 34 8f	 lea	 esi, DWORD PTR [edi+ecx*4]
  0007c	56		 push	 esi
  0007d	57		 push	 edi
  0007e	e8 00 00 00 00	 call	 ??$_Zero_range@PAPAUSObjectInstance@CArea@@@std@@YAPAPAUSObjectInstance@CArea@@QAPAU12@0@Z ; std::_Zero_range<CArea::SObjectInstance * *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1580 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  00083	89 73 04	 mov	 DWORD PTR [ebx+4], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 2035 :             _Zero_range(_PFirst, _PFirst + _Count);

  00086	83 c4 08	 add	 esp, 8
  00089	8b 75 e8	 mov	 esi, DWORD PTR _this$1$[ebp]
$LN152@Load_Build:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 476  : 	m_GraphicThingInstanceCRCMap.clear();

  0008c	8d 4e 64	 lea	 ecx, DWORD PTR [esi+100]
  0008f	e8 00 00 00 00	 call	 ?clear@?$_Tree@V?$_Tmap_traits@PAVCGraphicThingInstance@@KU?$less@PAVCGraphicThingInstance@@@std@@V?$allocator@U?$pair@QAVCGraphicThingInstance@@K@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<CGraphicThingInstance *,unsigned long,std::less<CGraphicThingInstance *>,std::allocator<std::pair<CGraphicThingInstance * const,unsigned long> >,0> >::clear
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00094	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8067 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

  00097	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0009c	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8067 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

  0009f	8b cf		 mov	 ecx, edi
  000a1	ff 75 e0	 push	 DWORD PTR $T7[ebp]
  000a4	2b ce		 sub	 ecx, esi
  000a6	f7 e9		 imul	 ecx
  000a8	c1 fa 03	 sar	 edx, 3
  000ab	8b c2		 mov	 eax, edx
  000ad	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000b0	03 c2		 add	 eax, edx
  000b2	50		 push	 eax
  000b3	57		 push	 edi
  000b4	56		 push	 esi
  000b5	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAUSObjectData@CArea@@UObjectDataComp@2@@std@@YAXPAUSObjectData@CArea@@0HUObjectDataComp@2@@Z ; std::_Sort_unchecked<CArea::SObjectData *,CArea::ObjectDataComp>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  000ba	8b 33		 mov	 esi, DWORD PTR [ebx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8067 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

  000bc	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 483  : 	for (it = m_ObjectInstanceVector.begin(); it!=m_ObjectInstanceVector.end();++it,++i)

  000bf	8b 5d e8	 mov	 ebx, DWORD PTR _this$1$[ebp]
  000c2	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$1$[ebp], 0
  000c9	3b 73 14	 cmp	 esi, DWORD PTR [ebx+20]
  000cc	0f 84 07 02 00
	00		 je	 $LN199@Load_Build
$LL4@Load_Build:
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 63   : 			if (m_kVct_pkFree.empty())

  000d2	a1 14 00 00 00	 mov	 eax, DWORD PTR ?ms_ObjectInstancePool@CArea@@1V?$CDynamicPool@USObjectInstance@CArea@@@@A+20
  000d7	39 05 10 00 00
	00		 cmp	 DWORD PTR ?ms_ObjectInstancePool@CArea@@1V?$CDynamicPool@USObjectInstance@CArea@@@@A+16, eax
  000dd	0f 85 94 00 00
	00		 jne	 $LN23@Load_Build

; 65   : 				T* pkNewData=new T;

  000e3	6a 28		 push	 40			; 00000028H
  000e5	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000ea	8b f8		 mov	 edi, eax
  000ec	83 c4 04	 add	 esp, 4
  000ef	89 7d e0	 mov	 DWORD PTR $T8[ebp], edi
  000f2	85 ff		 test	 edi, edi
  000f4	74 47		 je	 SHORT $LN25@Load_Build
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h

; 146  : 			SObjectInstance()

  000f6	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7SObjectInstance@CArea@@6B@

; 133  : 				dwType = prt::PROPERTY_TYPE_NONE;

  000fc	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 135  : 				dwEffectID = 0xffffffff;

  00103	c7 47 18 ff ff
	ff ff		 mov	 DWORD PTR [edi+24], -1

; 136  : 				dwEffectInstanceIndex = 0xffffffff;

  0010a	c7 47 1c ff ff
	ff ff		 mov	 DWORD PTR [edi+28], -1

; 137  : 				isShadowFlag = false;

  00111	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 138  : 
; 139  : 				pTree=NULL;

  00118	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0

; 140  : 				pThingInstance=NULL;

  0011f	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 141  : 				pAttributeInstance=NULL;

  00126	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 142  : 				pAmbienceInstance=NULL;

  0012d	c7 47 20 00 00
	00 00		 mov	 DWORD PTR [edi+32], 0

; 143  : 				pDungeonBlock=NULL;

  00134	c7 47 24 00 00
	00 00		 mov	 DWORD PTR [edi+36], 0
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 65   : 				T* pkNewData=new T;

  0013b	eb 02		 jmp	 SHORT $LN26@Load_Build
$LN25@Load_Build:
  0013d	33 ff		 xor	 edi, edi
$LN26@Load_Build:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  0013f	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ms_ObjectInstancePool@CArea@@1V?$CDynamicPool@USObjectInstance@CArea@@@@A+8
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 65   : 				T* pkNewData=new T;

  00144	89 7d e8	 mov	 DWORD PTR _pkNewData$11[ebp], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  00147	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?ms_ObjectInstancePool@CArea@@1V?$CDynamicPool@USObjectInstance@CArea@@@@A+12
  0014d	74 11		 je	 SHORT $LN37@Load_Build

; 797  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  0014f	89 38		 mov	 DWORD PTR [eax], edi

; 798  :         } else {
; 799  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 800  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 801  :             _ASAN_VECTOR_RELEASE_GUARD;
; 802  :         }
; 803  : 
; 804  :         _Orphan_range(_Mylast, _Mylast);
; 805  :         _Ty& _Result = *_Mylast;
; 806  :         ++_Mylast;

  00151	83 05 08 00 00
	00 04		 add	 DWORD PTR ?ms_ObjectInstancePool@CArea@@1V?$CDynamicPool@USObjectInstance@CArea@@@@A+8, 4
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 67   : 				++m_uUsedCapacity;

  00158	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_ObjectInstancePool@CArea@@1V?$CDynamicPool@USObjectInstance@CArea@@@@A+32

; 68   : 				return pkNewData;

  0015e	eb 22		 jmp	 SHORT $LN22@Load_Build
$LN37@Load_Build:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00160	8d 4d e8	 lea	 ecx, DWORD PTR _pkNewData$11[ebp]
  00163	51		 push	 ecx
  00164	50		 push	 eax
  00165	b9 04 00 00 00	 mov	 ecx, OFFSET ?ms_ObjectInstancePool@CArea@@1V?$CDynamicPool@USObjectInstance@CArea@@@@A+4
  0016a	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAUSObjectInstance@CArea@@@?$vector@PAUSObjectInstance@CArea@@V?$allocator@PAUSObjectInstance@CArea@@@std@@@std@@AAEPAPAUSObjectInstance@CArea@@QAPAU23@ABQAU23@@Z ; std::vector<CArea::SObjectInstance *,std::allocator<CArea::SObjectInstance *> >::_Emplace_reallocate<CArea::SObjectInstance * const &>
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 67   : 				++m_uUsedCapacity;

  0016f	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_ObjectInstancePool@CArea@@1V?$CDynamicPool@USObjectInstance@CArea@@@@A+32

; 68   : 				return pkNewData;

  00175	eb 0b		 jmp	 SHORT $LN22@Load_Build
$LN23@Load_Build:

; 69   : 			}
; 70   : 
; 71   : 			T* pkFreeData=m_kVct_pkFree.back();

  00177	8b 78 fc	 mov	 edi, DWORD PTR [eax-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1944 :         return _My_data._Mylast[-1];

  0017a	83 c0 fc	 add	 eax, -4			; fffffffcH

; 1713 :         --_Mylast;

  0017d	a3 14 00 00 00	 mov	 DWORD PTR ?ms_ObjectInstancePool@CArea@@1V?$CDynamicPool@USObjectInstance@CArea@@@@A+20, eax
$LN22@Load_Build:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 485  : 		*it = ms_ObjectInstancePool.Alloc();

  00182	89 3e		 mov	 DWORD PTR [esi], edi
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h

; 111  : 				if (pTree)

  00184	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00187	85 c9		 test	 ecx, ecx
  00189	74 05		 je	 SHORT $LN46@Load_Build

; 112  : 					pTree->Clear();

  0018b	e8 00 00 00 00	 call	 ?Clear@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::Clear
$LN46@Load_Build:

; 113  : 
; 114  : 				if (pThingInstance)

  00190	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00193	85 c9		 test	 ecx, ecx
  00195	74 05		 je	 SHORT $LN47@Load_Build

; 115  : 					pThingInstance->Clear();

  00197	e8 00 00 00 00	 call	 ?Clear@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::Clear
$LN47@Load_Build:

; 116  : 
; 117  : 				if (pAttributeInstance)

  0019c	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0019f	85 c9		 test	 ecx, ecx
  001a1	74 05		 je	 SHORT $LN48@Load_Build

; 118  : 					pAttributeInstance->Clear();

  001a3	e8 00 00 00 00	 call	 ?Clear@CAttributeInstance@@QAEXXZ ; CAttributeInstance::Clear
$LN48@Load_Build:

; 119  : 
; 120  : 				if (pAmbienceInstance)

  001a8	8b 4f 20	 mov	 ecx, DWORD PTR [edi+32]
  001ab	85 c9		 test	 ecx, ecx
  001ad	74 05		 je	 SHORT $LN49@Load_Build

; 121  : 					pAmbienceInstance->Clear();

  001af	e8 00 00 00 00	 call	 ?Clear@CScreen@@QAEXXZ	; CScreen::Clear
$LN49@Load_Build:

; 122  : 
; 123  : 				if (pDungeonBlock)

  001b4	8b 4f 24	 mov	 ecx, DWORD PTR [edi+36]
  001b7	85 c9		 test	 ecx, ecx
  001b9	74 05		 je	 SHORT $LN50@Load_Build

; 124  : 					pDungeonBlock->Clear();

  001bb	e8 00 00 00 00	 call	 ?Clear@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::Clear
$LN50@Load_Build:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 491  : 		if (!GetObjectDataPointer(i, &c_pObjectData))

  001c0	8d 45 e4	 lea	 eax, DWORD PTR _c_pObjectData$9[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h

; 133  : 				dwType = prt::PROPERTY_TYPE_NONE;

  001c3	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 491  : 		if (!GetObjectDataPointer(i, &c_pObjectData))

  001ca	50		 push	 eax
  001cb	ff 75 ec	 push	 DWORD PTR _i$1$[ebp]
  001ce	8b cb		 mov	 ecx, ebx
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h

; 135  : 				dwEffectID = 0xffffffff;

  001d0	c7 47 18 ff ff
	ff ff		 mov	 DWORD PTR [edi+24], -1

; 136  : 				dwEffectInstanceIndex = 0xffffffff;

  001d7	c7 47 1c ff ff
	ff ff		 mov	 DWORD PTR [edi+28], -1

; 137  : 				isShadowFlag = false;

  001de	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 138  : 
; 139  : 				pTree=NULL;

  001e5	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0

; 140  : 				pThingInstance=NULL;

  001ec	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 141  : 				pAttributeInstance=NULL;

  001f3	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 142  : 				pAmbienceInstance=NULL;

  001fa	c7 47 20 00 00
	00 00		 mov	 DWORD PTR [edi+32], 0

; 143  : 				pDungeonBlock=NULL;

  00201	c7 47 24 00 00
	00 00		 mov	 DWORD PTR [edi+36], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 491  : 		if (!GetObjectDataPointer(i, &c_pObjectData))

  00208	e8 00 00 00 00	 call	 ?GetObjectDataPointer@CArea@@QBE_NKPAPBUSObjectData@1@@Z ; CArea::GetObjectDataPointer
  0020d	84 c0		 test	 al, al
  0020f	0f 84 b5 00 00
	00		 je	 $LN2@Load_Build

; 492  : 			continue;
; 493  : 
; 494  : 
; 495  : 		__SetObjectInstance(*it, c_pObjectData);

  00215	8b 7d e4	 mov	 edi, DWORD PTR _c_pObjectData$9[ebp]
  00218	8b cb		 mov	 ecx, ebx
  0021a	57		 push	 edi
  0021b	ff 36		 push	 DWORD PTR [esi]
  0021d	e8 00 00 00 00	 call	 ?__SetObjectInstance@CArea@@IAEXPAUSObjectInstance@1@PBUSObjectData@1@@Z ; CArea::__SetObjectInstance

; 496  : 
; 497  : 		if ((*it)->dwType == prt::PROPERTY_TYPE_BUILDING)

  00222	8b 06		 mov	 eax, DWORD PTR [esi]
  00224	83 78 04 02	 cmp	 DWORD PTR [eax+4], 2
  00228	0f 85 9c 00 00
	00		 jne	 $LN2@Load_Build
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  0022e	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1002 :             _Loc                = _Find_lower_bound(_Keyval);

  00231	8d 4b 64	 lea	 ecx, DWORD PTR [ebx+100]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00234	89 45 e8	 mov	 DWORD PTR $T10[ebp], eax
  00237	89 45 d8	 mov	 DWORD PTR $T5[ebp], eax
  0023a	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0023d	89 45 e0	 mov	 DWORD PTR $T6[ebp], eax
  00240	89 45 dc	 mov	 DWORD PTR $T5[ebp+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1002 :             _Loc                = _Find_lower_bound(_Keyval);

  00243	8d 45 d8	 lea	 eax, DWORD PTR $T5[ebp]
  00246	50		 push	 eax
  00247	8d 45 b8	 lea	 eax, DWORD PTR $T2[ebp]
  0024a	50		 push	 eax
  0024b	e8 00 00 00 00	 call	 ??$_Find_lower_bound@PAVCGraphicThingInstance@@@?$_Tree@V?$_Tmap_traits@PAVCGraphicThingInstance@@KU?$less@PAVCGraphicThingInstance@@@std@@V?$allocator@U?$pair@QAVCGraphicThingInstance@@K@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@std@@@1@ABQAVCGraphicThingInstance@@@Z ; std::_Tree<std::_Tmap_traits<CGraphicThingInstance *,unsigned long,std::less<CGraphicThingInstance *>,std::allocator<std::pair<CGraphicThingInstance * const,unsigned long> >,0> >::_Find_lower_bound<CGraphicThingInstance *>
  00250	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00253	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00257	66 0f d6 45 c4	 movq	 QWORD PTR __Loc$3[ebp], xmm0

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0025c	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00260	75 08		 jne	 SHORT $LN198@Load_Build
  00262	8b 45 e8	 mov	 eax, DWORD PTR $T10[ebp]
  00265	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  00268	73 60		 jae	 SHORT $LN2@Load_Build
$LN198@Load_Build:

; 1631 :         if (max_size() == _Get_scary()->_Mysize) {

  0026a	81 7b 68 aa aa
	aa 0a		 cmp	 DWORD PTR [ebx+104], 178956970 ; 0aaaaaaaH
  00271	8d 43 64	 lea	 eax, DWORD PTR [ebx+100]
  00274	74 7c		 je	 SHORT $LN193@Load_Build

; 1008 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  00276	8b 38		 mov	 edi, DWORD PTR [eax]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1144 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00278	89 45 d0	 mov	 DWORD PTR $T4[ebp], eax

; 87   :         return ::operator new(_Bytes);

  0027b	6a 18		 push	 24			; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  0027d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1151 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00284	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+4], 0

; 87   :         return ::operator new(_Bytes);

  0028b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00290	8b 4d e8	 mov	 ecx, DWORD PTR $T10[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  00293	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 787  :     }

  00296	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 755  :     _Val         = static_cast<_Other&&>(_New_val);

  0029d	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  002a4	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  002a7	8b 4d e0	 mov	 ecx, DWORD PTR $T6[ebp]
  002aa	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  002ad	8d 4b 64	 lea	 ecx, DWORD PTR [ebx+100]
  002b0	50		 push	 eax
  002b1	ff 75 c8	 push	 DWORD PTR __Loc$3[ebp+4]

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  002b4	89 38		 mov	 DWORD PTR [eax], edi

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  002b6	ff 75 c4	 push	 DWORD PTR __Loc$3[ebp]

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  002b9	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  002bc	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 811  :         this->_Ptr->_Color = _Red;

  002bf	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  002c5	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCGraphicThingInstance@@K@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<CGraphicThingInstance * const,unsigned long> > >::_Insert_node
$LN2@Load_Build:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 483  : 	for (it = m_ObjectInstanceVector.begin(); it!=m_ObjectInstanceVector.end();++it,++i)

  002ca	ff 45 ec	 inc	 DWORD PTR _i$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 79   :         ++_Ptr;

  002cd	83 c6 04	 add	 esi, 4

; 163  :         return _Ptr == _Right._Ptr;

  002d0	3b 73 14	 cmp	 esi, DWORD PTR [ebx+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 483  : 	for (it = m_ObjectInstanceVector.begin(); it!=m_ObjectInstanceVector.end();++it,++i)

  002d3	0f 85 f9 fd ff
	ff		 jne	 $LL4@Load_Build
$LN199@Load_Build:

; 498  : 			m_GraphicThingInstanceCRCMap.insert(TGraphicThingInstanceCRCMap::value_type( (*it)->pThingInstance, c_pObjectData->dwCRC ) );
; 499  : 
; 500  : 	}
; 501  : 
; 502  : 
; 503  : 	//////////
; 504  : 	Refresh();

  002d9	8b cb		 mov	 ecx, ebx
  002db	e8 00 00 00 00	 call	 ?Refresh@CArea@@QAEXXZ	; CArea::Refresh

; 506  : }

  002e0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002e3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002ea	59		 pop	 ecx
  002eb	5f		 pop	 edi
  002ec	5e		 pop	 esi
  002ed	5b		 pop	 ebx
  002ee	8b e5		 mov	 esp, ebp
  002f0	5d		 pop	 ebp
  002f1	c3		 ret	 0
$LN193@Load_Build:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1632 :             _Throw_tree_length_error();

  002f2	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN201@Load_Build:
  002f7	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?__Load_BuildObjectInstances@CArea@@IAEXXZ$3:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR $T4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<CGraphicThingInstance * const,unsigned long>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<CGraphicThingInstance * const,unsigned long>,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?__Load_BuildObjectInstances@CArea@@IAEXXZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a b4	 mov	 ecx, DWORD PTR [edx-76]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?__Load_BuildObjectInstances@CArea@@IAEXXZ
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?__Load_BuildObjectInstances@CArea@@IAEXXZ ENDP		; CArea::__Load_BuildObjectInstances
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?__Load_LoadAmbience@CArea@@IAE_NPBD@Z
_TEXT	SEGMENT
__Loc$2 = -304						; size = 12
_pProperty$3 = -292					; size = 4
_ObjectData$4 = -288					; size = 48
_dwCount$1$ = -240					; size = 4
_this$GSCopy$1$ = -236					; size = 4
$T5 = -232						; size = 8
$T6 = -232						; size = 8
_i$1$ = -224						; size = 4
__Loc$7 = -220						; size = 12
__Loc$8 = -220						; size = 12
__Loc$9 = -220						; size = 12
__Loc$10 = -220						; size = 12
_stTokenVectorMap$ = -208				; size = 8
$T11 = -197						; size = 1
_$S6$12 = -196						; size = 24
_$S7$13 = -172						; size = 24
_$S8$14 = -148						; size = 24
_$S9$15 = -124						; size = 24
_$S5$16 = -100						; size = 24
$T17 = -100						; size = 24
$T18 = -100						; size = 24
_$S10$19 = -76						; size = 24
$T20 = -76						; size = 24
$T21 = -76						; size = 24
$T22 = -76						; size = 24
_szObjectName$ = -52					; size = 33
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szFileName$ = 8					; size = 4
?__Load_LoadAmbience@CArea@@IAE_NPBD@Z PROC		; CArea::__Load_LoadAmbience, COMDAT
; _this$ = ecx

; 901  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?__Load_LoadAmbience@CArea@@IAE_NPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 24 01 00
	00		 sub	 esp, 292		; 00000124H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	89 8d 14 ff ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  00033	8b 7d 08	 mov	 edi, DWORD PTR _c_szFileName$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  00036	6a 34		 push	 52			; 00000034H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 437  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  00038	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _stTokenVectorMap$[ebp], 0
  00042	c7 85 34 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _stTokenVectorMap$[ebp+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  0004c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 347  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  00051	89 00		 mov	 DWORD PTR [eax], eax

; 348  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  00053	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 349  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  00056	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 350  :         _Pnode->_Color = _Black;

  00059	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1943 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  0005f	89 85 30 ff ff
	ff		 mov	 DWORD PTR _stTokenVectorMap$[ebp], eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 904  : 	if (!LoadMultipleTextData(c_szFileName, stTokenVectorMap))

  00065	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR _stTokenVectorMap$[ebp]
  0006b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00072	50		 push	 eax
  00073	57		 push	 edi
  00074	e8 00 00 00 00	 call	 ?LoadMultipleTextData@@YA_NPBDAAV?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@@std@@@Z ; LoadMultipleTextData
  00079	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007c	84 c0		 test	 al, al
  0007e	75 0a		 jne	 SHORT $LN5@Load_LoadA

; 905  : 	{
; 906  : 		TraceError(" CArea::Load File Load %s ERROR", c_szFileName);

  00080	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CA@NNOAMPKE@?5CArea?3?3Load?5File?5Load?5?$CFs?5ERROR@
  00085	e9 b1 09 00 00	 jmp	 $LN24@Load_LoadA
$LN5@Load_LoadA:
  0008a	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  0008d	6a 20		 push	 32			; 00000020H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0008f	0f 11 45 9c	 movups	 XMMWORD PTR $T18[ebp], xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  00093	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00098	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_0BF@PFPNGEBG@areaambiencedatafile@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 245  :         return _Traits::_Allocate(_Bytes);

  0009f	8b f0		 mov	 esi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2657 :         _My_data._Mysize = _Count;

  000a1	c7 45 ac 14 00
	00 00		 mov	 DWORD PTR $T18[ebp+16], 20 ; 00000014H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  000a8	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2653 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000ab	89 75 9c	 mov	 DWORD PTR $T18[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  000ae	8d 45 9c	 lea	 eax, DWORD PTR $T18[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2658 :         _My_data._Myres  = _New_capacity;

  000b1	c7 45 b0 1f 00
	00 00		 mov	 DWORD PTR $T18[ebp+20], 31 ; 0000001fH

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000b8	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  000bb	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0BF@PFPNGEBG@areaambiencedatafile@+16
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  000c1	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c2	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  000c5	8d 85 24 ff ff
	ff		 lea	 eax, DWORD PTR __Loc$10[ebp]
  000cb	50		 push	 eax
  000cc	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _stTokenVectorMap$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2664 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000d2	c6 46 14 00	 mov	 BYTE PTR [esi+20], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  000d6	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000db	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR __Loc$10[ebp+8]
  000e1	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000e5	0f 85 40 09 00
	00		 jne	 $LN195@Load_LoadA
  000eb	83 c0 10	 add	 eax, 16			; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  000ee	50		 push	 eax
  000ef	8d 45 9c	 lea	 eax, DWORD PTR $T18[ebp]
  000f2	50		 push	 eax
  000f3	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  000f8	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000fb	84 c0		 test	 al, al
  000fd	0f 85 28 09 00
	00		 jne	 $LN195@Load_LoadA

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00103	8b b5 30 ff ff
	ff		 mov	 esi, DWORD PTR _stTokenVectorMap$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00109	6a 20		 push	 32			; 00000020H
  0010b	ff 75 9c	 push	 DWORD PTR $T18[ebp]
  0010e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00113	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 910  : 	if (stTokenVectorMap.end() == stTokenVectorMap.find("areaambiencedatafile"))

  00116	3b b5 2c ff ff
	ff		 cmp	 esi, DWORD PTR __Loc$10[ebp+8]
  0011c	0f 84 14 09 00
	00		 je	 $LN1158@Load_LoadA
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00122	66 a1 08 00 00
	00		 mov	 ax, WORD PTR ??_C@_0M@IANPHBDM@objectcount@+8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00128	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _stTokenVectorMap$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0012e	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0M@IANPHBDM@objectcount@
  00136	66 89 45 a4	 mov	 WORD PTR $T17[ebp+8], ax
  0013a	a0 0a 00 00 00	 mov	 al, BYTE PTR ??_C@_0M@IANPHBDM@objectcount@+10
  0013f	88 45 a6	 mov	 BYTE PTR $T17[ebp+10], al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00142	8d 45 9c	 lea	 eax, DWORD PTR $T17[ebp]
  00145	50		 push	 eax
  00146	8d 85 24 ff ff
	ff		 lea	 eax, DWORD PTR __Loc$8[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0014c	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR $T17[ebp+12], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00153	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2629 :             _My_data._Mysize = _Count;

  00154	c7 45 ac 0b 00
	00 00		 mov	 DWORD PTR $T17[ebp+16], 11 ; 0000000bH

; 2630 :             _My_data._Myres  = _BUF_SIZE - 1;

  0015b	c7 45 b0 0f 00
	00 00		 mov	 DWORD PTR $T17[ebp+20], 15 ; 0000000fH

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00162	66 0f d6 45 9c	 movq	 QWORD PTR $T17[ebp], xmm0

; 2637 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00167	c6 45 a7 00	 mov	 BYTE PTR $T17[ebp+11], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0016b	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00170	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR __Loc$8[ebp+8]
  00176	8b b5 30 ff ff
	ff		 mov	 esi, DWORD PTR _stTokenVectorMap$[ebp]
  0017c	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00180	75 1a		 jne	 SHORT $LN594@Load_LoadA
  00182	83 c0 10	 add	 eax, 16			; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  00185	50		 push	 eax
  00186	8d 45 9c	 lea	 eax, DWORD PTR $T17[ebp]
  00189	50		 push	 eax
  0018a	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  0018f	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00192	84 c0		 test	 al, al

; 1370 :             return _Loc._Bound;

  00194	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR __Loc$8[ebp+8]

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0019a	74 02		 je	 SHORT $LN593@Load_LoadA
$LN594@Load_LoadA:

; 1373 :         return _Get_scary()->_Myhead;

  0019c	8b c6		 mov	 eax, esi
$LN593@Load_LoadA:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 916  : 	if (stTokenVectorMap.end() == stTokenVectorMap.find("objectcount"))

  0019e	3b f0		 cmp	 esi, eax
  001a0	75 0a		 jne	 SHORT $LN7@Load_LoadA

; 917  : 	{
; 918  : 		TraceError(" CArea::__LoadAmbience File Format %s ERROR 2", c_szFileName);
; 919  : 		return false;

  001a2	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CO@GJNEDCML@?5CArea?3?3__LoadAmbience?5File?5For@
  001a7	e9 8f 08 00 00	 jmp	 $LN24@Load_LoadA
$LN7@Load_LoadA:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  001ac	66 a1 08 00 00
	00		 mov	 ax, WORD PTR ??_C@_0M@IANPHBDM@objectcount@+8
  001b2	0f 57 c0	 xorps	 xmm0, xmm0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  001b5	0f 11 45 b4	 movups	 XMMWORD PTR $T22[ebp], xmm0

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  001b9	66 89 45 bc	 mov	 WORD PTR $T22[ebp+8], ax
  001bd	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0M@IANPHBDM@objectcount@
  001c5	a0 0a 00 00 00	 mov	 al, BYTE PTR ??_C@_0M@IANPHBDM@objectcount@+10

; 2629 :             _My_data._Mysize = _Count;

  001ca	c7 45 c4 0b 00
	00 00		 mov	 DWORD PTR $T22[ebp+16], 11 ; 0000000bH

; 2630 :             _My_data._Myres  = _BUF_SIZE - 1;

  001d1	c7 45 c8 0f 00
	00 00		 mov	 DWORD PTR $T22[ebp+20], 15 ; 0000000fH

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  001d8	66 0f d6 45 b4	 movq	 QWORD PTR $T22[ebp], xmm0
  001dd	88 45 be	 mov	 BYTE PTR $T22[ebp+10], al

; 2637 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  001e0	c6 45 bf 00	 mov	 BYTE PTR $T22[ebp+11], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map

; 198  :         const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);

  001e4	8d 45 b4	 lea	 eax, DWORD PTR $T22[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 922  : 	const std::string & c_rstrCount = stTokenVectorMap["objectcount"][0];

  001e7	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map

; 198  :         const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);

  001eb	50		 push	 eax
  001ec	8d 85 24 ff ff
	ff		 lea	 eax, DWORD PTR __Loc$7[ebp]
  001f2	50		 push	 eax
  001f3	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _stTokenVectorMap$[ebp]
  001f9	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  001fe	8b bd 2c ff ff
	ff		 mov	 edi, DWORD PTR __Loc$7[ebp+8]
  00204	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00208	75 18		 jne	 SHORT $LN984@Load_LoadA
  0020a	8d 47 10	 lea	 eax, DWORD PTR [edi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  0020d	50		 push	 eax
  0020e	8d 45 b4	 lea	 eax, DWORD PTR $T22[ebp]
  00211	50		 push	 eax
  00212	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  00217	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0021a	84 c0		 test	 al, al
  0021c	0f 84 aa 00 00
	00		 je	 $LN983@Load_LoadA
$LN984@Load_LoadA:

; 1631 :         if (max_size() == _Get_scary()->_Mysize) {

  00222	81 bd 34 ff ff
	ff c4 4e ec 04	 cmp	 DWORD PTR _stTokenVectorMap$[ebp+4], 82595524 ; 04ec4ec4H
  0022c	0f 84 64 08 00
	00		 je	 $LN1145@Load_LoadA
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1144 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00232	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR _stTokenVectorMap$[ebp]
  00238	89 85 18 ff ff
	ff		 mov	 DWORD PTR $T5[ebp], eax

; 87   :         return ::operator new(_Bytes);

  0023e	6a 34		 push	 52			; 00000034H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00240	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1151 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00244	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T5[ebp+4], 0

; 87   :         return ::operator new(_Bytes);

  0024e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00253	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map

; 212  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00256	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _stTokenVectorMap$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  0025c	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0025f	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  00263	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  0026a	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], 0

; 2999 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00271	0f 10 45 b4	 movups	 xmm0, XMMWORD PTR $T22[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map

; 212  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00275	50		 push	 eax
  00276	ff b5 28 ff ff
	ff		 push	 DWORD PTR __Loc$7[ebp+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2999 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0027c	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0
  00280	f3 0f 7e 45 c4	 movq	 xmm0, QWORD PTR $T22[ebp+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map

; 212  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00285	ff b5 24 ff ff
	ff		 push	 DWORD PTR __Loc$7[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2999 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0028b	66 0f d6 40 20	 movq	 QWORD PTR [eax+32], xmm0

; 4821 :         _My_data._Mysize = 0;

  00290	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR $T22[ebp+16], 0

; 4822 :         _My_data._Myres  = _BUF_SIZE - 1;

  00297	c7 45 c8 0f 00
	00 00		 mov	 DWORD PTR $T22[ebp+20], 15 ; 0000000fH

; 4823 :         _My_data._Activate_SSO_buffer();
; 4824 : 
; 4825 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4826 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0029e	c6 45 b4 00	 mov	 BYTE PTR $T22[ebp], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 398  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  002a2	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0
  002a9	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [eax+44], 0
  002b0	c7 40 30 00 00
	00 00		 mov	 DWORD PTR [eax+48], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  002b7	89 30		 mov	 DWORD PTR [eax], esi

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  002b9	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  002bc	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 811  :         this->_Ptr->_Color = _Red;

  002bf	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map

; 212  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  002c5	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >::_Insert_node
  002ca	8b f8		 mov	 edi, eax
$LN983@Load_LoadA:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1889 :         return _My_data._Myfirst[_Pos];

  002cc	8b 77 28	 mov	 esi, DWORD PTR [edi+40]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 922  : 	const std::string & c_rstrCount = stTokenVectorMap["objectcount"][0];

  002cf	8d 4d b4	 lea	 ecx, DWORD PTR $T22[ebp]
  002d2	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  002d6	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  002db	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  002df	72 02		 jb	 SHORT $LN1140@Load_LoadA

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  002e1	8b 36		 mov	 esi, DWORD PTR [esi]
$LN1140@Load_LoadA:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 924  : 	DWORD dwCount = atoi(c_rstrCount.c_str());

  002e3	56		 push	 esi
  002e4	e8 00 00 00 00	 call	 __atoi64
  002e9	8b c8		 mov	 ecx, eax
  002eb	83 c4 04	 add	 esp, 4

; 928  : 	for (DWORD i = 0; i < dwCount; ++i)

  002ee	33 c0		 xor	 eax, eax
  002f0	89 8d 10 ff ff
	ff		 mov	 DWORD PTR _dwCount$1$[ebp], ecx
  002f6	89 85 20 ff ff
	ff		 mov	 DWORD PTR _i$1$[ebp], eax
  002fc	85 c9		 test	 ecx, ecx
  002fe	0f 84 1e 07 00
	00		 je	 $LN1170@Load_LoadA
$LL4@Load_LoadA:

; 930  : 		_snprintf(szObjectName, sizeof(szObjectName), "object%03d", i);

  00304	50		 push	 eax
  00305	68 00 00 00 00	 push	 OFFSET ??_C@_0L@CHFLOJFF@object?$CF03d@
  0030a	8d 45 cc	 lea	 eax, DWORD PTR _szObjectName$[ebp]
  0030d	6a 21		 push	 33			; 00000021H
  0030f	50		 push	 eax
  00310	e8 00 00 00 00	 call	 __snprintf
  00315	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2293 :     size_type _Mysize = 0; // current length of string

  00318	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR $T21[ebp+16], 0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0031f	8d 4d cc	 lea	 ecx, DWORD PTR _szObjectName$[ebp]

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  00322	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR $T21[ebp+20], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 930  : 		_snprintf(szObjectName, sizeof(szObjectName), "object%03d", i);

  00329	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0032c	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0032f	0f 11 45 b4	 movups	 XMMWORD PTR $T21[ebp], xmm0
$LL1161@Load_LoadA:

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00333	8a 01		 mov	 al, BYTE PTR [ecx]
  00335	41		 inc	 ecx
  00336	84 c0		 test	 al, al
  00338	75 f9		 jne	 SHORT $LL1161@Load_LoadA
  0033a	2b ca		 sub	 ecx, edx

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0033c	8d 45 cc	 lea	 eax, DWORD PTR _szObjectName$[ebp]
  0033f	51		 push	 ecx
  00340	50		 push	 eax
  00341	8d 4d b4	 lea	 ecx, DWORD PTR $T21[ebp]
  00344	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00349	8d 45 b4	 lea	 eax, DWORD PTR $T21[ebp]
  0034c	50		 push	 eax
  0034d	8d 85 d0 fe ff
	ff		 lea	 eax, DWORD PTR __Loc$2[ebp]
  00353	50		 push	 eax
  00354	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _stTokenVectorMap$[ebp]
  0035a	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0035f	8b b5 d8 fe ff
	ff		 mov	 esi, DWORD PTR __Loc$2[ebp+8]
  00365	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00369	75 14		 jne	 SHORT $LN133@Load_LoadA
  0036b	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  0036e	50		 push	 eax
  0036f	8d 45 b4	 lea	 eax, DWORD PTR $T21[ebp]
  00372	50		 push	 eax
  00373	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  00378	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0037b	84 c0		 test	 al, al
  0037d	74 06		 je	 SHORT $LN132@Load_LoadA
$LN133@Load_LoadA:

; 1373 :         return _Get_scary()->_Myhead;

  0037f	8b b5 30 ff ff
	ff		 mov	 esi, DWORD PTR _stTokenVectorMap$[ebp]
$LN132@Load_LoadA:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4832 :         if (_My_data._Large_string_engaged()) {

  00385	8b 4d c8	 mov	 ecx, DWORD PTR $T21[ebp+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00388	8b bd 30 ff ff
	ff		 mov	 edi, DWORD PTR _stTokenVectorMap$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4832 :         if (_My_data._Large_string_engaged()) {

  0038e	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00391	72 2c		 jb	 SHORT $LN103@Load_LoadA
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00393	8b 55 b4	 mov	 edx, DWORD PTR $T21[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00396	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00397	8b c2		 mov	 eax, edx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00399	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0039f	72 14		 jb	 SHORT $LN113@Load_LoadA

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  003a1	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  003a4	83 c1 23	 add	 ecx, 35			; 00000023H
  003a7	2b c2		 sub	 eax, edx

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  003a9	83 c0 fc	 add	 eax, -4			; fffffffcH
  003ac	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  003af	0f 87 e6 06 00
	00		 ja	 $LN493@Load_LoadA
$LN113@Load_LoadA:

; 265  :         ::operator delete(_Ptr, _Bytes);

  003b5	51		 push	 ecx
  003b6	52		 push	 edx
  003b7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  003bc	83 c4 08	 add	 esp, 8
$LN103@Load_LoadA:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 932  : 		if (stTokenVectorMap.end() == stTokenVectorMap.find(szObjectName))

  003bf	3b fe		 cmp	 edi, esi
  003c1	0f 84 42 06 00
	00		 je	 $LN2@Load_LoadA
  003c7	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2293 :     size_type _Mysize = 0; // current length of string

  003ca	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR $T20[ebp+16], 0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  003d1	8d 4d cc	 lea	 ecx, DWORD PTR _szObjectName$[ebp]

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  003d4	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR $T20[ebp+20], 0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  003db	0f 11 45 b4	 movups	 XMMWORD PTR $T20[ebp], xmm0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  003df	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL1162@Load_LoadA:
  003e2	8a 01		 mov	 al, BYTE PTR [ecx]
  003e4	41		 inc	 ecx
  003e5	84 c0		 test	 al, al
  003e7	75 f9		 jne	 SHORT $LL1162@Load_LoadA
  003e9	2b ca		 sub	 ecx, edx

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  003eb	8d 45 cc	 lea	 eax, DWORD PTR _szObjectName$[ebp]
  003ee	51		 push	 ecx
  003ef	50		 push	 eax
  003f0	8d 4d b4	 lea	 ecx, DWORD PTR $T20[ebp]
  003f3	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map

; 198  :         const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);

  003f8	8d 45 b4	 lea	 eax, DWORD PTR $T20[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 935  : 		const CTokenVector & rVector = stTokenVectorMap[szObjectName];

  003fb	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map

; 198  :         const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);

  003ff	50		 push	 eax
  00400	8d 85 24 ff ff
	ff		 lea	 eax, DWORD PTR __Loc$9[ebp]
  00406	50		 push	 eax
  00407	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _stTokenVectorMap$[ebp]
  0040d	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00412	8b b5 2c ff ff
	ff		 mov	 esi, DWORD PTR __Loc$9[ebp+8]
  00418	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0041c	75 18		 jne	 SHORT $LN350@Load_LoadA
  0041e	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  00421	50		 push	 eax
  00422	8d 45 b4	 lea	 eax, DWORD PTR $T20[ebp]
  00425	50		 push	 eax
  00426	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  0042b	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0042e	84 c0		 test	 al, al
  00430	0f 84 ba 00 00
	00		 je	 $LN349@Load_LoadA
$LN350@Load_LoadA:

; 1631 :         if (max_size() == _Get_scary()->_Mysize) {

  00436	81 bd 34 ff ff
	ff c4 4e ec 04	 cmp	 DWORD PTR _stTokenVectorMap$[ebp+4], 82595524 ; 04ec4ec4H
  00440	0f 84 50 06 00
	00		 je	 $LN1145@Load_LoadA
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map

; 206  :         const auto _Inserted = _Tree_temp_node<_Alnode>(_Mybase::_Getal(), _Scary->_Myhead, piecewise_construct,

  00446	8b b5 30 ff ff
	ff		 mov	 esi, DWORD PTR _stTokenVectorMap$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1144 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  0044c	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR _stTokenVectorMap$[ebp]
  00452	89 85 18 ff ff
	ff		 mov	 DWORD PTR $T6[ebp], eax

; 87   :         return ::operator new(_Bytes);

  00458	6a 34		 push	 52			; 00000034H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  0045a	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1151 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0045e	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T6[ebp+4], 0

; 87   :         return ::operator new(_Bytes);

  00468	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0046d	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 755  :     _Val         = static_cast<_Other&&>(_New_val);

  00470	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T6[ebp+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  0047a	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map

; 212  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0047d	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _stTokenVectorMap$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00483	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  00487	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  0048e	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], 0

; 2999 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00495	0f 10 45 b4	 movups	 xmm0, XMMWORD PTR $T20[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map

; 212  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00499	50		 push	 eax
  0049a	ff b5 28 ff ff
	ff		 push	 DWORD PTR __Loc$9[ebp+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2999 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  004a0	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0
  004a4	f3 0f 7e 45 c4	 movq	 xmm0, QWORD PTR $T20[ebp+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map

; 212  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  004a9	ff b5 24 ff ff
	ff		 push	 DWORD PTR __Loc$9[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2999 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  004af	66 0f d6 40 20	 movq	 QWORD PTR [eax+32], xmm0

; 4821 :         _My_data._Mysize = 0;

  004b4	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR $T20[ebp+16], 0

; 4822 :         _My_data._Myres  = _BUF_SIZE - 1;

  004bb	c7 45 c8 0f 00
	00 00		 mov	 DWORD PTR $T20[ebp+20], 15 ; 0000000fH

; 4823 :         _My_data._Activate_SSO_buffer();
; 4824 : 
; 4825 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4826 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  004c2	c6 45 b4 00	 mov	 BYTE PTR $T20[ebp], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 398  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  004c6	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0
  004cd	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [eax+44], 0
  004d4	c7 40 30 00 00
	00 00		 mov	 DWORD PTR [eax+48], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  004db	89 30		 mov	 DWORD PTR [eax], esi

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  004dd	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  004e0	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 811  :         this->_Ptr->_Color = _Red;

  004e3	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map

; 212  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  004e9	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >::_Insert_node
  004ee	8b f0		 mov	 esi, eax
$LN349@Load_LoadA:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4832 :         if (_My_data._Large_string_engaged()) {

  004f0	8b 4d c8	 mov	 ecx, DWORD PTR $T20[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 935  : 		const CTokenVector & rVector = stTokenVectorMap[szObjectName];

  004f3	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4832 :         if (_My_data._Large_string_engaged()) {

  004f7	83 f9 10	 cmp	 ecx, 16			; 00000010H
  004fa	72 2c		 jb	 SHORT $LN486@Load_LoadA
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  004fc	8b 55 b4	 mov	 edx, DWORD PTR $T20[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  004ff	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00500	8b c2		 mov	 eax, edx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00502	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00508	72 14		 jb	 SHORT $LN496@Load_LoadA

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0050a	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0050d	83 c1 23	 add	 ecx, 35			; 00000023H
  00510	2b c2		 sub	 eax, edx

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00512	83 c0 fc	 add	 eax, -4			; fffffffcH
  00515	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00518	0f 87 7d 05 00
	00		 ja	 $LN493@Load_LoadA
$LN496@Load_LoadA:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0051e	51		 push	 ecx
  0051f	52		 push	 edx
  00520	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00525	83 c4 08	 add	 esp, 8
$LN486@Load_LoadA:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  00528	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR $T20[ebp+16], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  0052f	c7 45 c8 0f 00
	00 00		 mov	 DWORD PTR $T20[ebp+20], 15 ; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00536	c6 45 b4 00	 mov	 BYTE PTR $T20[ebp], 0

; 4107 :         return _Mypair._Myval2._Myptr();

  0053a	8b 56 28	 mov	 edx, DWORD PTR [esi+40]

; 2236 :         if (_Large_string_engaged()) {

  0053d	83 7a 14 10	 cmp	 DWORD PTR [edx+20], 16	; 00000010H
  00541	72 02		 jb	 SHORT $LN506@Load_LoadA

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  00543	8b 12		 mov	 edx, DWORD PTR [edx]
$LN506@Load_LoadA:

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00545	8b ca		 mov	 ecx, edx

; 2293 :     size_type _Mysize = 0; // current length of string

  00547	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _$S5$16[ebp+16], 0
  0054e	0f 57 c0	 xorps	 xmm0, xmm0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  00551	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _$S5$16[ebp+20], 0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00558	0f 11 45 9c	 movups	 XMMWORD PTR _$S5$16[ebp], xmm0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0055c	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
  0055f	90		 npad	 1
$LL1163@Load_LoadA:
  00560	8a 01		 mov	 al, BYTE PTR [ecx]
  00562	41		 inc	 ecx
  00563	84 c0		 test	 al, al
  00565	75 f9		 jne	 SHORT $LL1163@Load_LoadA
  00567	2b cf		 sub	 ecx, edi

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00569	51		 push	 ecx
  0056a	52		 push	 edx
  0056b	8d 4d 9c	 lea	 ecx, DWORD PTR _$S5$16[ebp]
  0056e	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1899 :         return _My_data._Myfirst[_Pos];

  00573	8b 56 28	 mov	 edx, DWORD PTR [esi+40]
  00576	83 c2 18	 add	 edx, 24			; 00000018H
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 937  : 		const std::string & c_rstrxPosition = rVector[0].c_str();

  00579	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  0057d	83 7a 14 10	 cmp	 DWORD PTR [edx+20], 16	; 00000010H
  00581	72 02		 jb	 SHORT $LN284@Load_LoadA

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  00583	8b 12		 mov	 edx, DWORD PTR [edx]
$LN284@Load_LoadA:

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00585	8b ca		 mov	 ecx, edx

; 2293 :     size_type _Mysize = 0; // current length of string

  00587	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _$S6$12[ebp+16], 0
  00591	0f 57 c0	 xorps	 xmm0, xmm0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  00594	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _$S6$12[ebp+20], 0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0059e	0f 11 85 3c ff
	ff ff		 movups	 XMMWORD PTR _$S6$12[ebp], xmm0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  005a5	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
$LL1164@Load_LoadA:
  005a8	8a 01		 mov	 al, BYTE PTR [ecx]
  005aa	41		 inc	 ecx
  005ab	84 c0		 test	 al, al
  005ad	75 f9		 jne	 SHORT $LL1164@Load_LoadA
  005af	2b cf		 sub	 ecx, edi

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  005b1	51		 push	 ecx
  005b2	52		 push	 edx
  005b3	8d 8d 3c ff ff
	ff		 lea	 ecx, DWORD PTR _$S6$12[ebp]
  005b9	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1899 :         return _My_data._Myfirst[_Pos];

  005be	8b 56 28	 mov	 edx, DWORD PTR [esi+40]
  005c1	83 c2 30	 add	 edx, 48			; 00000030H
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 938  : 		const std::string & c_rstryPosition = rVector[1].c_str();

  005c4	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  005c8	83 7a 14 10	 cmp	 DWORD PTR [edx+20], 16	; 00000010H
  005cc	72 02		 jb	 SHORT $LN550@Load_LoadA

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  005ce	8b 12		 mov	 edx, DWORD PTR [edx]
$LN550@Load_LoadA:

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  005d0	8b ca		 mov	 ecx, edx

; 2293 :     size_type _Mysize = 0; // current length of string

  005d2	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _$S7$13[ebp+16], 0
  005dc	0f 57 c0	 xorps	 xmm0, xmm0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  005df	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _$S7$13[ebp+20], 0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  005e9	0f 11 85 54 ff
	ff ff		 movups	 XMMWORD PTR _$S7$13[ebp], xmm0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  005f0	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
$LL1165@Load_LoadA:
  005f3	8a 01		 mov	 al, BYTE PTR [ecx]
  005f5	41		 inc	 ecx
  005f6	84 c0		 test	 al, al
  005f8	75 f9		 jne	 SHORT $LL1165@Load_LoadA
  005fa	2b cf		 sub	 ecx, edi

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  005fc	51		 push	 ecx
  005fd	52		 push	 edx
  005fe	8d 8d 54 ff ff
	ff		 lea	 ecx, DWORD PTR _$S7$13[ebp]
  00604	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1899 :         return _My_data._Myfirst[_Pos];

  00609	8b 56 28	 mov	 edx, DWORD PTR [esi+40]
  0060c	83 c2 48	 add	 edx, 72			; 00000048H
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 939  : 		const std::string & c_rstrzPosition = rVector[2].c_str();

  0060f	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  00613	83 7a 14 10	 cmp	 DWORD PTR [edx+20], 16	; 00000010H
  00617	72 02		 jb	 SHORT $LN317@Load_LoadA

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  00619	8b 12		 mov	 edx, DWORD PTR [edx]
$LN317@Load_LoadA:

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0061b	8b ca		 mov	 ecx, edx

; 2293 :     size_type _Mysize = 0; // current length of string

  0061d	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _$S8$14[ebp+16], 0
  00627	0f 57 c0	 xorps	 xmm0, xmm0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  0062a	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _$S8$14[ebp+20], 0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00631	0f 11 85 6c ff
	ff ff		 movups	 XMMWORD PTR _$S8$14[ebp], xmm0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00638	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
  0063b	0f 1f 44 00 00	 npad	 5
$LL1166@Load_LoadA:
  00640	8a 01		 mov	 al, BYTE PTR [ecx]
  00642	41		 inc	 ecx
  00643	84 c0		 test	 al, al
  00645	75 f9		 jne	 SHORT $LL1166@Load_LoadA
  00647	2b cf		 sub	 ecx, edi

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00649	51		 push	 ecx
  0064a	52		 push	 edx
  0064b	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _$S8$14[ebp]
  00651	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1899 :         return _My_data._Myfirst[_Pos];

  00656	8b 56 28	 mov	 edx, DWORD PTR [esi+40]
  00659	83 c2 60	 add	 edx, 96			; 00000060H
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 940  : 		const std::string & c_rstrCRC = rVector[3].c_str();

  0065c	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  00660	83 7a 14 10	 cmp	 DWORD PTR [edx+20], 16	; 00000010H
  00664	72 02		 jb	 SHORT $LN261@Load_LoadA

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  00666	8b 12		 mov	 edx, DWORD PTR [edx]
$LN261@Load_LoadA:

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00668	8b ca		 mov	 ecx, edx

; 2293 :     size_type _Mysize = 0; // current length of string

  0066a	c7 45 94 00 00
	00 00		 mov	 DWORD PTR _$S9$15[ebp+16], 0
  00671	0f 57 c0	 xorps	 xmm0, xmm0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  00674	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _$S9$15[ebp+20], 0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0067b	0f 11 45 84	 movups	 XMMWORD PTR _$S9$15[ebp], xmm0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0067f	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
$LL1167@Load_LoadA:
  00682	8a 01		 mov	 al, BYTE PTR [ecx]
  00684	41		 inc	 ecx
  00685	84 c0		 test	 al, al
  00687	75 f9		 jne	 SHORT $LL1167@Load_LoadA
  00689	2b cf		 sub	 ecx, edi

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0068b	51		 push	 ecx
  0068c	52		 push	 edx
  0068d	8d 4d 84	 lea	 ecx, DWORD PTR _$S9$15[ebp]
  00690	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>

; 2236 :         if (_Large_string_engaged()) {

  00695	83 7d b0 10	 cmp	 DWORD PTR _$S5$16[ebp+20], 16 ; 00000010H
  00699	8d 45 9c	 lea	 eax, DWORD PTR _$S5$16[ebp]
  0069c	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 941  : 		const std::string & c_rstrRange = rVector[4].c_str();

  0069f	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  006a3	0f 43 45 9c	 cmovae	 eax, DWORD PTR _$S5$16[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 945  : 		ObjectData.Position.x = atof(c_rstrxPosition.c_str());

  006a7	50		 push	 eax
  006a8	66 0f 13 85 f0
	fe ff ff	 movlpd	 QWORD PTR _ObjectData$4[ebp+16], xmm0
  006b0	66 0f 13 85 f8
	fe ff ff	 movlpd	 QWORD PTR _ObjectData$4[ebp+24], xmm0
  006b8	c7 85 00 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _ObjectData$4[ebp+32], 0
  006c2	e8 00 00 00 00	 call	 _atof
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  006c7	83 bd 50 ff ff
	ff 10		 cmp	 DWORD PTR _$S6$12[ebp+20], 16 ; 00000010H
  006ce	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _$S6$12[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 945  : 		ObjectData.Position.x = atof(c_rstrxPosition.c_str());

  006d4	d9 9d e0 fe ff
	ff		 fstp	 DWORD PTR _ObjectData$4[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  006da	0f 43 85 3c ff
	ff ff		 cmovae	 eax, DWORD PTR _$S6$12[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 946  : 		ObjectData.Position.y = atof(c_rstryPosition.c_str());

  006e1	50		 push	 eax
  006e2	e8 00 00 00 00	 call	 _atof
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  006e7	83 bd 68 ff ff
	ff 10		 cmp	 DWORD PTR _$S7$13[ebp+20], 16 ; 00000010H
  006ee	8d 85 54 ff ff
	ff		 lea	 eax, DWORD PTR _$S7$13[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 946  : 		ObjectData.Position.y = atof(c_rstryPosition.c_str());

  006f4	d9 9d e4 fe ff
	ff		 fstp	 DWORD PTR _ObjectData$4[ebp+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  006fa	0f 43 85 54 ff
	ff ff		 cmovae	 eax, DWORD PTR _$S7$13[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 947  : 		ObjectData.Position.z = atof(c_rstrzPosition.c_str());

  00701	50		 push	 eax
  00702	e8 00 00 00 00	 call	 _atof
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  00707	83 7d 80 10	 cmp	 DWORD PTR _$S8$14[ebp+20], 16 ; 00000010H
  0070b	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _$S8$14[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 947  : 		ObjectData.Position.z = atof(c_rstrzPosition.c_str());

  00711	d9 9d e8 fe ff
	ff		 fstp	 DWORD PTR _ObjectData$4[ebp+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  00717	0f 43 85 6c ff
	ff ff		 cmovae	 eax, DWORD PTR _$S8$14[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 948  : 		ObjectData.dwCRC = atoi	(c_rstrCRC.c_str());

  0071e	50		 push	 eax
  0071f	e8 00 00 00 00	 call	 __atoi64
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  00724	83 7d 98 10	 cmp	 DWORD PTR _$S9$15[ebp+20], 16 ; 00000010H
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 948  : 		ObjectData.dwCRC = atoi	(c_rstrCRC.c_str());

  00728	89 85 ec fe ff
	ff		 mov	 DWORD PTR _ObjectData$4[ebp+12], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2235 :         const value_type* _Result = _Bx._Buf;

  0072e	8d 45 84	 lea	 eax, DWORD PTR _$S9$15[ebp]

; 2236 :         if (_Large_string_engaged()) {

  00731	0f 43 45 84	 cmovae	 eax, DWORD PTR _$S9$15[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 949  : 		ObjectData.dwRange = atoi(c_rstrRange.c_str());

  00735	50		 push	 eax
  00736	e8 00 00 00 00	 call	 __atoi64
  0073b	83 c4 14	 add	 esp, 20			; 00000014H
  0073e	89 85 08 ff ff
	ff		 mov	 DWORD PTR _ObjectData$4[ebp+40], eax

; 950  : 
; 951  : 		ObjectData.InitializeRotation();

  00744	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _ObjectData$4[ebp]
  0074a	e8 00 00 00 00	 call	 ?InitializeRotation@SObjectData@CArea@@QAEXXZ ; CArea::SObjectData::InitializeRotation
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0074f	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  00752	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00757	8b 7e 28	 mov	 edi, DWORD PTR [esi+40]
  0075a	2b cf		 sub	 ecx, edi
  0075c	f7 e9		 imul	 ecx
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 952  : 		ObjectData.m_fHeightBias = 0.0f;

  0075e	c7 85 04 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _ObjectData$4[ebp+36], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00768	c1 fa 02	 sar	 edx, 2
  0076b	8b c2		 mov	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 953  : 		ObjectData.fMaxVolumeAreaPercentage = 0.0f;

  0076d	c7 85 0c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _ObjectData$4[ebp+44], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00777	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0077a	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 955  : 		if (rVector.size() >= 6)

  0077c	83 f8 06	 cmp	 eax, 6
  0077f	0f 82 8c 00 00
	00		 jb	 $LN678@Load_LoadA
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  00785	83 bf 8c 00 00
	00 10		 cmp	 DWORD PTR [edi+140], 16	; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1899 :         return _My_data._Myfirst[_Pos];

  0078c	8d 57 78	 lea	 edx, DWORD PTR [edi+120]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  0078f	72 02		 jb	 SHORT $LN777@Load_LoadA

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  00791	8b 12		 mov	 edx, DWORD PTR [edx]
$LN777@Load_LoadA:

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00793	8b ca		 mov	 ecx, edx

; 2293 :     size_type _Mysize = 0; // current length of string

  00795	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _$S10$19[ebp+16], 0
  0079c	0f 57 c0	 xorps	 xmm0, xmm0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  0079f	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _$S10$19[ebp+20], 0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  007a6	0f 11 45 b4	 movups	 XMMWORD PTR _$S10$19[ebp], xmm0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  007aa	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
  007ad	0f 1f 00	 npad	 3
$LL1168@Load_LoadA:
  007b0	8a 01		 mov	 al, BYTE PTR [ecx]
  007b2	41		 inc	 ecx
  007b3	84 c0		 test	 al, al
  007b5	75 f9		 jne	 SHORT $LL1168@Load_LoadA
  007b7	2b ce		 sub	 ecx, esi

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  007b9	51		 push	 ecx
  007ba	52		 push	 edx
  007bb	8d 4d b4	 lea	 ecx, DWORD PTR _$S10$19[ebp]
  007be	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>

; 2236 :         if (_Large_string_engaged()) {

  007c3	83 7d c8 10	 cmp	 DWORD PTR _$S10$19[ebp+20], 16 ; 00000010H
  007c7	8d 45 b4	 lea	 eax, DWORD PTR _$S10$19[ebp]
  007ca	0f 43 45 b4	 cmovae	 eax, DWORD PTR _$S10$19[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 958  : 			ObjectData.fMaxVolumeAreaPercentage = atof(c_rstrPercentage.c_str());

  007ce	50		 push	 eax
  007cf	e8 00 00 00 00	 call	 _atof
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4832 :         if (_My_data._Large_string_engaged()) {

  007d4	8b 4d c8	 mov	 ecx, DWORD PTR _$S10$19[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 958  : 			ObjectData.fMaxVolumeAreaPercentage = atof(c_rstrPercentage.c_str());

  007d7	83 c4 04	 add	 esp, 4
  007da	d9 9d 0c ff ff
	ff		 fstp	 DWORD PTR _ObjectData$4[ebp+44]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4832 :         if (_My_data._Large_string_engaged()) {

  007e0	83 f9 10	 cmp	 ecx, 16			; 00000010H
  007e3	72 2c		 jb	 SHORT $LN678@Load_LoadA
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  007e5	8b 55 b4	 mov	 edx, DWORD PTR _$S10$19[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  007e8	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  007e9	8b c2		 mov	 eax, edx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  007eb	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  007f1	72 14		 jb	 SHORT $LN688@Load_LoadA

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  007f3	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  007f6	83 c1 23	 add	 ecx, 35			; 00000023H
  007f9	2b c2		 sub	 eax, edx

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  007fb	83 c0 fc	 add	 eax, -4			; fffffffcH
  007fe	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00801	0f 87 94 02 00
	00		 ja	 $LN493@Load_LoadA
$LN688@Load_LoadA:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00807	51		 push	 ecx
  00808	52		 push	 edx
  00809	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0080e	83 c4 08	 add	 esp, 8
$LN678@Load_LoadA:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 963  : 		if (!CPropertyManager::Instance().Get(ObjectData.dwCRC, &pProperty))

  00811	8b b5 ec fe ff
	ff		 mov	 esi, DWORD PTR _ObjectData$4[ebp+12]
  00817	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _pProperty$3[ebp]
  0081d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPropertyManager@@@@0PAVCPropertyManager@@A ; CSingleton<CPropertyManager>::ms_singleton
  00823	50		 push	 eax
  00824	56		 push	 esi
  00825	e8 00 00 00 00	 call	 ?Get@CPropertyManager@@QAE_NKPAPAVCProperty@@@Z ; CPropertyManager::Get
  0082a	84 c0		 test	 al, al
  0082c	75 10		 jne	 SHORT $LN10@Load_LoadA

; 964  : 		{
; 965  : 			TraceError(" CArea::LoadAmbience Property(%d) Load ERROR", ObjectData.dwCRC);

  0082e	56		 push	 esi
  0082f	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@BAHENMHD@?5CArea?3?3LoadAmbience?5Property?$CI?$CF@
  00834	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00839	83 c4 08	 add	 esp, 8

; 966  : 			continue;

  0083c	eb 44		 jmp	 SHORT $LN810@Load_LoadA
$LN10@Load_LoadA:

; 967  : 		}
; 968  : 
; 969  : 		m_ObjectDataVector.push_back(ObjectData);

  0083e	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00844	83 c1 04	 add	 ecx, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  00847	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0084a	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0084d	74 26		 je	 SHORT $LN811@Load_LoadA
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 254  :         ::new (static_cast<void*>(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

  0084f	0f 10 85 e0 fe
	ff ff		 movups	 xmm0, XMMWORD PTR _ObjectData$4[ebp]
  00856	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  00859	0f 10 85 f0 fe
	ff ff		 movups	 xmm0, XMMWORD PTR _ObjectData$4[ebp+16]
  00860	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0
  00864	0f 10 85 00 ff
	ff ff		 movups	 xmm0, XMMWORD PTR _ObjectData$4[ebp+32]
  0086b	0f 11 40 20	 movups	 XMMWORD PTR [eax+32], xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 806  :         ++_Mylast;

  0086f	83 41 04 30	 add	 DWORD PTR [ecx+4], 48	; 00000030H

; 782  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00873	eb 0d		 jmp	 SHORT $LN810@Load_LoadA
$LN811@Load_LoadA:

; 783  :         }
; 784  : 
; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00875	8d 95 e0 fe ff
	ff		 lea	 edx, DWORD PTR _ObjectData$4[ebp]
  0087b	52		 push	 edx
  0087c	50		 push	 eax
  0087d	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABUSObjectData@CArea@@@?$vector@USObjectData@CArea@@V?$allocator@USObjectData@CArea@@@std@@@std@@AAEPAUSObjectData@CArea@@QAU23@ABU23@@Z ; std::vector<CArea::SObjectData,std::allocator<CArea::SObjectData> >::_Emplace_reallocate<CArea::SObjectData const &>
$LN810@Load_LoadA:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 928  : 	for (DWORD i = 0; i < dwCount; ++i)

  00882	8b 4d 98	 mov	 ecx, DWORD PTR _$S9$15[ebp+20]
  00885	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  00889	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0088c	72 2c		 jb	 SHORT $LN829@Load_LoadA
  0088e	8b 55 84	 mov	 edx, DWORD PTR _$S9$15[ebp]
  00891	41		 inc	 ecx
  00892	8b c2		 mov	 eax, edx
  00894	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0089a	72 14		 jb	 SHORT $LN839@Load_LoadA
  0089c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0089f	83 c1 23	 add	 ecx, 35			; 00000023H
  008a2	2b c2		 sub	 eax, edx
  008a4	83 c0 fc	 add	 eax, -4			; fffffffcH
  008a7	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  008aa	0f 87 eb 01 00
	00		 ja	 $LN493@Load_LoadA
$LN839@Load_LoadA:
  008b0	51		 push	 ecx
  008b1	52		 push	 edx
  008b2	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  008b7	83 c4 08	 add	 esp, 8
$LN829@Load_LoadA:
  008ba	8b 4d 80	 mov	 ecx, DWORD PTR _$S8$14[ebp+20]
  008bd	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  008c1	c6 45 84 00	 mov	 BYTE PTR _$S9$15[ebp], 0
  008c5	c7 45 98 0f 00
	00 00		 mov	 DWORD PTR _$S9$15[ebp+20], 15 ; 0000000fH
  008cc	c7 45 94 00 00
	00 00		 mov	 DWORD PTR _$S9$15[ebp+16], 0
  008d3	83 f9 10	 cmp	 ecx, 16			; 00000010H
  008d6	72 2f		 jb	 SHORT $LN856@Load_LoadA
  008d8	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _$S8$14[ebp]
  008de	41		 inc	 ecx
  008df	8b c2		 mov	 eax, edx
  008e1	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  008e7	72 14		 jb	 SHORT $LN866@Load_LoadA
  008e9	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  008ec	83 c1 23	 add	 ecx, 35			; 00000023H
  008ef	2b c2		 sub	 eax, edx
  008f1	83 c0 fc	 add	 eax, -4			; fffffffcH
  008f4	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  008f7	0f 87 9e 01 00
	00		 ja	 $LN493@Load_LoadA
$LN866@Load_LoadA:
  008fd	51		 push	 ecx
  008fe	52		 push	 edx
  008ff	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00904	83 c4 08	 add	 esp, 8
$LN856@Load_LoadA:
  00907	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR _$S7$13[ebp+20]
  0090d	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00911	c6 85 6c ff ff
	ff 00		 mov	 BYTE PTR _$S8$14[ebp], 0
  00918	c7 45 80 0f 00
	00 00		 mov	 DWORD PTR _$S8$14[ebp+20], 15 ; 0000000fH
  0091f	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _$S8$14[ebp+16], 0
  00929	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0092c	72 2f		 jb	 SHORT $LN883@Load_LoadA
  0092e	8b 95 54 ff ff
	ff		 mov	 edx, DWORD PTR _$S7$13[ebp]
  00934	41		 inc	 ecx
  00935	8b c2		 mov	 eax, edx
  00937	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0093d	72 14		 jb	 SHORT $LN893@Load_LoadA
  0093f	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00942	83 c1 23	 add	 ecx, 35			; 00000023H
  00945	2b c2		 sub	 eax, edx
  00947	83 c0 fc	 add	 eax, -4			; fffffffcH
  0094a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0094d	0f 87 48 01 00
	00		 ja	 $LN493@Load_LoadA
$LN893@Load_LoadA:
  00953	51		 push	 ecx
  00954	52		 push	 edx
  00955	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0095a	83 c4 08	 add	 esp, 8
$LN883@Load_LoadA:
  0095d	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR _$S6$12[ebp+20]
  00963	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00967	c6 85 54 ff ff
	ff 00		 mov	 BYTE PTR _$S7$13[ebp], 0
  0096e	c7 85 68 ff ff
	ff 0f 00 00 00	 mov	 DWORD PTR _$S7$13[ebp+20], 15 ; 0000000fH
  00978	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _$S7$13[ebp+16], 0
  00982	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00985	72 2f		 jb	 SHORT $LN910@Load_LoadA
  00987	8b 95 3c ff ff
	ff		 mov	 edx, DWORD PTR _$S6$12[ebp]
  0098d	41		 inc	 ecx
  0098e	8b c2		 mov	 eax, edx
  00990	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00996	72 14		 jb	 SHORT $LN920@Load_LoadA
  00998	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0099b	83 c1 23	 add	 ecx, 35			; 00000023H
  0099e	2b c2		 sub	 eax, edx
  009a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  009a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  009a6	0f 87 ef 00 00
	00		 ja	 $LN493@Load_LoadA
$LN920@Load_LoadA:
  009ac	51		 push	 ecx
  009ad	52		 push	 edx
  009ae	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  009b3	83 c4 08	 add	 esp, 8
$LN910@Load_LoadA:
  009b6	8b 4d b0	 mov	 ecx, DWORD PTR _$S5$16[ebp+20]
  009b9	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  009bd	c6 85 3c ff ff
	ff 00		 mov	 BYTE PTR _$S6$12[ebp], 0
  009c4	c7 85 50 ff ff
	ff 0f 00 00 00	 mov	 DWORD PTR _$S6$12[ebp+20], 15 ; 0000000fH
  009ce	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _$S6$12[ebp+16], 0
  009d8	83 f9 10	 cmp	 ecx, 16			; 00000010H
  009db	72 2c		 jb	 SHORT $LN2@Load_LoadA
  009dd	8b 55 9c	 mov	 edx, DWORD PTR _$S5$16[ebp]
  009e0	41		 inc	 ecx
  009e1	8b c2		 mov	 eax, edx
  009e3	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  009e9	72 14		 jb	 SHORT $LN947@Load_LoadA
  009eb	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  009ee	83 c1 23	 add	 ecx, 35			; 00000023H
  009f1	2b c2		 sub	 eax, edx
  009f3	83 c0 fc	 add	 eax, -4			; fffffffcH
  009f6	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  009f9	0f 87 9c 00 00
	00		 ja	 $LN493@Load_LoadA
$LN947@Load_LoadA:
  009ff	51		 push	 ecx
  00a00	52		 push	 edx
  00a01	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00a06	83 c4 08	 add	 esp, 8
$LN2@Load_LoadA:
  00a09	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _i$1$[ebp]
  00a0f	40		 inc	 eax
  00a10	89 85 20 ff ff
	ff		 mov	 DWORD PTR _i$1$[ebp], eax
  00a16	3b 85 10 ff ff
	ff		 cmp	 eax, DWORD PTR _dwCount$1$[ebp]
  00a1c	0f 82 e2 f8 ff
	ff		 jb	 $LL4@Load_LoadA
$LN1170@Load_LoadA:

; 972  : 	return true;

  00a22	c6 85 3b ff ff
	ff 01		 mov	 BYTE PTR $T11[ebp], 1
  00a29	eb 21		 jmp	 SHORT $LN26@Load_LoadA
$LN195@Load_LoadA:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1373 :         return _Get_scary()->_Myhead;

  00a2b	6a 20		 push	 32			; 00000020H
  00a2d	56		 push	 esi
  00a2e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00a33	83 c4 08	 add	 esp, 8
$LN1158@Load_LoadA:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 913  : 		return false;

  00a36	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CO@ECPJGBAI@?5CArea?3?3__LoadAmbience?5File?5For@
$LN24@Load_LoadA:
  00a3b	57		 push	 edi
  00a3c	50		 push	 eax
  00a3d	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00a42	83 c4 08	 add	 esp, 8
  00a45	c6 85 3b ff ff
	ff 00		 mov	 BYTE PTR $T11[ebp], 0
$LN26@Load_LoadA:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  00a4c	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _stTokenVectorMap$[ebp]
  00a52	ff 70 04	 push	 DWORD PTR [eax+4]
  00a55	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR _stTokenVectorMap$[ebp]
  00a5b	50		 push	 eax
  00a5c	8b c8		 mov	 ecx, eax
  00a5e	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00a63	6a 34		 push	 52			; 00000034H
  00a65	ff b5 30 ff ff
	ff		 push	 DWORD PTR _stTokenVectorMap$[ebp]
  00a6b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 972  : 	return true;

  00a70	8a 85 3b ff ff
	ff		 mov	 al, BYTE PTR $T11[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00a76	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 973  : }

  00a79	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00a7c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00a83	59		 pop	 ecx
  00a84	5f		 pop	 edi
  00a85	5e		 pop	 esi
  00a86	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00a89	33 cd		 xor	 ecx, ebp
  00a8b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00a90	8b e5		 mov	 esp, ebp
  00a92	5d		 pop	 ebp
  00a93	c2 04 00	 ret	 4
$LN1145@Load_LoadA:
  00a96	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN493@Load_LoadA:
  00a9b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1172@Load_LoadA:
  00aa0	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?__Load_LoadAmbience@CArea@@IAE_NPBD@Z$0:
  00000	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _stTokenVectorMap$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@@std@@QAE@XZ
__unwindfunclet$?__Load_LoadAmbience@CArea@@IAE_NPBD@Z$3:
  0000b	8d 4d b4	 lea	 ecx, DWORD PTR $T22[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?__Load_LoadAmbience@CArea@@IAE_NPBD@Z$59:
  00013	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00019	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >
__unwindfunclet$?__Load_LoadAmbience@CArea@@IAE_NPBD@Z$5:
  0001e	8d 4d b4	 lea	 ecx, DWORD PTR $T20[ebp]
  00021	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?__Load_LoadAmbience@CArea@@IAE_NPBD@Z$34:
  00026	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  0002c	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >
__unwindfunclet$?__Load_LoadAmbience@CArea@@IAE_NPBD@Z$6:
  00031	8d 4d 9c	 lea	 ecx, DWORD PTR _$S5$16[ebp]
  00034	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?__Load_LoadAmbience@CArea@@IAE_NPBD@Z$7:
  00039	8d 8d 3c ff ff
	ff		 lea	 ecx, DWORD PTR _$S6$12[ebp]
  0003f	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?__Load_LoadAmbience@CArea@@IAE_NPBD@Z$8:
  00044	8d 8d 54 ff ff
	ff		 lea	 ecx, DWORD PTR _$S7$13[ebp]
  0004a	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?__Load_LoadAmbience@CArea@@IAE_NPBD@Z$9:
  0004f	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _$S8$14[ebp]
  00055	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?__Load_LoadAmbience@CArea@@IAE_NPBD@Z$10:
  0005a	8d 4d 84	 lea	 ecx, DWORD PTR _$S9$15[ebp]
  0005d	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00062	cc		 int	 3
  00063	cc		 int	 3
  00064	cc		 int	 3
  00065	cc		 int	 3
  00066	cc		 int	 3
__ehhandler$?__Load_LoadAmbience@CArea@@IAE_NPBD@Z:
  00067	90		 npad	 1
  00068	90		 npad	 1
  00069	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0006d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00070	8b 8a d0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-304]
  00076	33 c8		 xor	 ecx, eax
  00078	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007d	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00080	33 c8		 xor	 ecx, eax
  00082	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00087	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?__Load_LoadAmbience@CArea@@IAE_NPBD@Z
  0008c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?__Load_LoadAmbience@CArea@@IAE_NPBD@Z ENDP		; CArea::__Load_LoadAmbience
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?__Load_LoadObject@CArea@@IAE_NPBD@Z
_TEXT	SEGMENT
__Loc$2 = -316						; size = 12
_pProperty$3 = -304					; size = 4
_dwCount$1$ = -300					; size = 4
_this$GSCopy$1$ = -296					; size = 4
$T4 = -292						; size = 4
_p$1$ = -288						; size = 4
$T5 = -284						; size = 8
$T6 = -284						; size = 8
_i$1$ = -276						; size = 4
__Loc$7 = -272						; size = 12
__Loc$8 = -272						; size = 12
__Loc$9 = -272						; size = 12
__Loc$10 = -272						; size = 12
_stTokenVectorMap$ = -260				; size = 8
$T11 = -249						; size = 1
__Result$1$ = -248					; size = 4
$T12 = -248						; size = 4
__Result$1$ = -248					; size = 4
tv5076 = -248						; size = 4
$T13 = -244						; size = 24
$T14 = -244						; size = 24
$T15 = -244						; size = 24
_ObjectData$16 = -220					; size = 48
_$S2$17 = -172						; size = 24
_$S3$18 = -148						; size = 24
_$S4$19 = -124						; size = 24
_$S1$20 = -100						; size = 24
$T21 = -100						; size = 24
$T22 = -100						; size = 24
$T23 = -76						; size = 24
$T24 = -76						; size = 24
$T25 = -76						; size = 24
_szObjectName$ = -52					; size = 33
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szFileName$ = 8					; size = 4
?__Load_LoadObject@CArea@@IAE_NPBD@Z PROC		; CArea::__Load_LoadObject, COMDAT
; _this$ = ecx

; 804  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?__Load_LoadObject@CArea@@IAE_NPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 30 01 00
	00		 sub	 esp, 304		; 00000130H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	89 8d d8 fe ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  00033	8b 7d 08	 mov	 edi, DWORD PTR _c_szFileName$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  00036	6a 34		 push	 52			; 00000034H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 437  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  00038	c7 85 fc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _stTokenVectorMap$[ebp], 0
  00042	c7 85 00 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _stTokenVectorMap$[ebp+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  0004c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 347  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  00051	89 00		 mov	 DWORD PTR [eax], eax

; 348  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  00053	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 349  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  00056	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 350  :         _Pnode->_Color = _Black;

  00059	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1943 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  0005f	89 85 fc fe ff
	ff		 mov	 DWORD PTR _stTokenVectorMap$[ebp], eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 807  : 	if (!LoadMultipleTextData(c_szFileName, stTokenVectorMap))

  00065	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _stTokenVectorMap$[ebp]
  0006b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00072	50		 push	 eax
  00073	57		 push	 edi
  00074	e8 00 00 00 00	 call	 ?LoadMultipleTextData@@YA_NPBDAAV?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@@std@@@Z ; LoadMultipleTextData
  00079	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007c	84 c0		 test	 al, al
  0007e	75 1b		 jne	 SHORT $LN8@Load_LoadO

; 808  : 	{
; 809  : 		TraceError(" CArea::Load File Load %s ERROR", c_szFileName);

  00080	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CA@NNOAMPKE@?5CArea?3?3Load?5File?5Load?5?$CFs?5ERROR@
  00085	57		 push	 edi
  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  0008c	83 c4 08	 add	 esp, 8
  0008f	c6 85 07 ff ff
	ff 00		 mov	 BYTE PTR $T11[ebp], 0
  00096	e9 c3 0a 00 00	 jmp	 $LN36@Load_LoadO
$LN8@Load_LoadO:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0009b	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_0N@DLGDDPHB@areadatafile@+8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  000a0	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _stTokenVectorMap$[ebp]
  000a6	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2629 :             _My_data._Mysize = _Count;

  000a9	c7 45 ac 0c 00
	00 00		 mov	 DWORD PTR $T22[ebp+16], 12 ; 0000000cH

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000b0	0f 11 45 9c	 movups	 XMMWORD PTR $T22[ebp], xmm0

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000b4	89 45 a4	 mov	 DWORD PTR $T22[ebp+8], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  000b7	8d 45 9c	 lea	 eax, DWORD PTR $T22[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000ba	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0N@DLGDDPHB@areadatafile@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  000c2	50		 push	 eax
  000c3	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR __Loc$10[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2630 :             _My_data._Myres  = _BUF_SIZE - 1;

  000c9	c7 45 b0 0f 00
	00 00		 mov	 DWORD PTR $T22[ebp+20], 15 ; 0000000fH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  000d0	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d1	66 0f d6 45 9c	 movq	 QWORD PTR $T22[ebp], xmm0

; 2637 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  000d6	c6 45 a8 00	 mov	 BYTE PTR $T22[ebp+12], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  000da	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000df	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR __Loc$10[ebp+8]
  000e5	8b b5 fc fe ff
	ff		 mov	 esi, DWORD PTR _stTokenVectorMap$[ebp]
  000eb	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000ef	75 1a		 jne	 SHORT $LN245@Load_LoadO
  000f1	83 c0 10	 add	 eax, 16			; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  000f4	50		 push	 eax
  000f5	8d 45 9c	 lea	 eax, DWORD PTR $T22[ebp]
  000f8	50		 push	 eax
  000f9	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  000fe	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00101	84 c0		 test	 al, al

; 1370 :             return _Loc._Bound;

  00103	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR __Loc$10[ebp+8]

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00109	74 02		 je	 SHORT $LN244@Load_LoadO
$LN245@Load_LoadO:

; 1373 :         return _Get_scary()->_Myhead;

  0010b	8b c6		 mov	 eax, esi
$LN244@Load_LoadO:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 813  : 	if (stTokenVectorMap.end() == stTokenVectorMap.find("areadatafile"))

  0010d	3b f0		 cmp	 esi, eax
  0010f	75 1b		 jne	 SHORT $LN9@Load_LoadO

; 814  : 	{
; 815  : 		TraceError(" CArea::__LoadObject File Format %s ERROR 1", c_szFileName);
; 816  : 		return false;

  00111	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CM@CJHDNGEF@?5CArea?3?3__LoadObject?5File?5Forma@
  00116	57		 push	 edi
  00117	50		 push	 eax
  00118	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  0011d	83 c4 08	 add	 esp, 8
  00120	c6 85 07 ff ff
	ff 00		 mov	 BYTE PTR $T11[ebp], 0
  00127	e9 32 0a 00 00	 jmp	 $LN36@Load_LoadO
$LN9@Load_LoadO:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0012c	66 a1 08 00 00
	00		 mov	 ax, WORD PTR ??_C@_0M@IANPHBDM@objectcount@+8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00132	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _stTokenVectorMap$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00138	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0M@IANPHBDM@objectcount@
  00140	66 89 45 a4	 mov	 WORD PTR $T21[ebp+8], ax
  00144	a0 0a 00 00 00	 mov	 al, BYTE PTR ??_C@_0M@IANPHBDM@objectcount@+10
  00149	88 45 a6	 mov	 BYTE PTR $T21[ebp+10], al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0014c	8d 45 9c	 lea	 eax, DWORD PTR $T21[ebp]
  0014f	50		 push	 eax
  00150	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR __Loc$8[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00156	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR $T21[ebp+12], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0015d	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2629 :             _My_data._Mysize = _Count;

  0015e	c7 45 ac 0b 00
	00 00		 mov	 DWORD PTR $T21[ebp+16], 11 ; 0000000bH

; 2630 :             _My_data._Myres  = _BUF_SIZE - 1;

  00165	c7 45 b0 0f 00
	00 00		 mov	 DWORD PTR $T21[ebp+20], 15 ; 0000000fH

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0016c	66 0f d6 45 9c	 movq	 QWORD PTR $T21[ebp], xmm0

; 2637 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00171	c6 45 a7 00	 mov	 BYTE PTR $T21[ebp+11], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00175	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0017a	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR __Loc$8[ebp+8]
  00180	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00184	75 1a		 jne	 SHORT $LN855@Load_LoadO
  00186	83 c0 10	 add	 eax, 16			; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  00189	50		 push	 eax
  0018a	8d 45 9c	 lea	 eax, DWORD PTR $T21[ebp]
  0018d	50		 push	 eax
  0018e	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  00193	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00196	84 c0		 test	 al, al

; 1370 :             return _Loc._Bound;

  00198	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR __Loc$8[ebp+8]

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0019e	74 02		 je	 SHORT $LN854@Load_LoadO
$LN855@Load_LoadO:

; 1373 :         return _Get_scary()->_Myhead;

  001a0	8b c6		 mov	 eax, esi
$LN854@Load_LoadO:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 819  : 	if (stTokenVectorMap.end() == stTokenVectorMap.find("objectcount"))

  001a2	3b f0		 cmp	 esi, eax
  001a4	75 1b		 jne	 SHORT $LN10@Load_LoadO

; 820  : 	{
; 821  : 		TraceError(" CArea::__LoadObject File Format %s ERROR 2", c_szFileName);
; 822  : 		return false;

  001a6	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CM@CFOIFIG@?5CArea?3?3__LoadObject?5File?5Forma@
  001ab	57		 push	 edi
  001ac	50		 push	 eax
  001ad	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  001b2	83 c4 08	 add	 esp, 8
  001b5	c6 85 07 ff ff
	ff 00		 mov	 BYTE PTR $T11[ebp], 0
  001bc	e9 9d 09 00 00	 jmp	 $LN36@Load_LoadO
$LN10@Load_LoadO:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  001c1	66 a1 08 00 00
	00		 mov	 ax, WORD PTR ??_C@_0M@IANPHBDM@objectcount@+8
  001c7	0f 57 c0	 xorps	 xmm0, xmm0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  001ca	0f 11 45 b4	 movups	 XMMWORD PTR $T25[ebp], xmm0

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  001ce	66 89 45 bc	 mov	 WORD PTR $T25[ebp+8], ax
  001d2	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0M@IANPHBDM@objectcount@
  001da	a0 0a 00 00 00	 mov	 al, BYTE PTR ??_C@_0M@IANPHBDM@objectcount@+10

; 2629 :             _My_data._Mysize = _Count;

  001df	c7 45 c4 0b 00
	00 00		 mov	 DWORD PTR $T25[ebp+16], 11 ; 0000000bH

; 2630 :             _My_data._Myres  = _BUF_SIZE - 1;

  001e6	c7 45 c8 0f 00
	00 00		 mov	 DWORD PTR $T25[ebp+20], 15 ; 0000000fH

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  001ed	66 0f d6 45 b4	 movq	 QWORD PTR $T25[ebp], xmm0
  001f2	88 45 be	 mov	 BYTE PTR $T25[ebp+10], al

; 2637 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  001f5	c6 45 bf 00	 mov	 BYTE PTR $T25[ebp+11], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map

; 198  :         const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);

  001f9	8d 45 b4	 lea	 eax, DWORD PTR $T25[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 825  : 	const std::string & c_rstrCount = stTokenVectorMap["objectcount"][0];

  001fc	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map

; 198  :         const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);

  00200	50		 push	 eax
  00201	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR __Loc$7[ebp]
  00207	50		 push	 eax
  00208	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _stTokenVectorMap$[ebp]
  0020e	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00213	8b bd f8 fe ff
	ff		 mov	 edi, DWORD PTR __Loc$7[ebp+8]
  00219	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0021d	75 18		 jne	 SHORT $LN900@Load_LoadO
  0021f	8d 47 10	 lea	 eax, DWORD PTR [edi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  00222	50		 push	 eax
  00223	8d 45 b4	 lea	 eax, DWORD PTR $T25[ebp]
  00226	50		 push	 eax
  00227	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  0022c	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0022f	84 c0		 test	 al, al
  00231	0f 84 aa 00 00
	00		 je	 $LN899@Load_LoadO
$LN900@Load_LoadO:

; 1631 :         if (max_size() == _Get_scary()->_Mysize) {

  00237	81 bd 00 ff ff
	ff c4 4e ec 04	 cmp	 DWORD PTR _stTokenVectorMap$[ebp+4], 82595524 ; 04ec4ec4H
  00241	0f 84 66 09 00
	00		 je	 $LN1113@Load_LoadO
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1144 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00247	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _stTokenVectorMap$[ebp]
  0024d	89 85 e4 fe ff
	ff		 mov	 DWORD PTR $T5[ebp], eax

; 87   :         return ::operator new(_Bytes);

  00253	6a 34		 push	 52			; 00000034H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00255	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1151 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00259	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T5[ebp+4], 0

; 87   :         return ::operator new(_Bytes);

  00263	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00268	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map

; 212  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0026b	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _stTokenVectorMap$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  00271	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00274	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  00278	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  0027f	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], 0

; 2999 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00286	0f 10 45 b4	 movups	 xmm0, XMMWORD PTR $T25[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map

; 212  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0028a	50		 push	 eax
  0028b	ff b5 f4 fe ff
	ff		 push	 DWORD PTR __Loc$7[ebp+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2999 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00291	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0
  00295	f3 0f 7e 45 c4	 movq	 xmm0, QWORD PTR $T25[ebp+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map

; 212  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0029a	ff b5 f0 fe ff
	ff		 push	 DWORD PTR __Loc$7[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2999 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  002a0	66 0f d6 40 20	 movq	 QWORD PTR [eax+32], xmm0

; 4821 :         _My_data._Mysize = 0;

  002a5	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR $T25[ebp+16], 0

; 4822 :         _My_data._Myres  = _BUF_SIZE - 1;

  002ac	c7 45 c8 0f 00
	00 00		 mov	 DWORD PTR $T25[ebp+20], 15 ; 0000000fH

; 4823 :         _My_data._Activate_SSO_buffer();
; 4824 : 
; 4825 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4826 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  002b3	c6 45 b4 00	 mov	 BYTE PTR $T25[ebp], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 398  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  002b7	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0
  002be	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [eax+44], 0
  002c5	c7 40 30 00 00
	00 00		 mov	 DWORD PTR [eax+48], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  002cc	89 30		 mov	 DWORD PTR [eax], esi

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  002ce	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  002d1	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 811  :         this->_Ptr->_Color = _Red;

  002d4	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map

; 212  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  002da	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >::_Insert_node
  002df	8b f8		 mov	 edi, eax
$LN899@Load_LoadO:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1889 :         return _My_data._Myfirst[_Pos];

  002e1	8b 77 28	 mov	 esi, DWORD PTR [edi+40]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 825  : 	const std::string & c_rstrCount = stTokenVectorMap["objectcount"][0];

  002e4	8d 4d b4	 lea	 ecx, DWORD PTR $T25[ebp]
  002e7	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  002eb	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  002f0	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  002f4	72 02		 jb	 SHORT $LN1056@Load_LoadO

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  002f6	8b 36		 mov	 esi, DWORD PTR [esi]
$LN1056@Load_LoadO:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 827  : 	DWORD dwCount = atoi(c_rstrCount.c_str());

  002f8	56		 push	 esi
  002f9	e8 00 00 00 00	 call	 __atoi64
  002fe	8b c8		 mov	 ecx, eax
  00300	83 c4 04	 add	 esp, 4

; 831  : 	for (DWORD i = 0; i < dwCount; ++i)

  00303	33 c0		 xor	 eax, eax
  00305	89 8d d4 fe ff
	ff		 mov	 DWORD PTR _dwCount$1$[ebp], ecx
  0030b	89 85 ec fe ff
	ff		 mov	 DWORD PTR _i$1$[ebp], eax
  00311	85 c9		 test	 ecx, ecx
  00313	0f 84 3e 08 00
	00		 je	 $LN1140@Load_LoadO
  00319	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@Load_LoadO:

; 833  : 		_snprintf(szObjectName, sizeof(szObjectName), "object%03d", i);

  00320	50		 push	 eax
  00321	68 00 00 00 00	 push	 OFFSET ??_C@_0L@CHFLOJFF@object?$CF03d@
  00326	8d 45 cc	 lea	 eax, DWORD PTR _szObjectName$[ebp]
  00329	6a 21		 push	 33			; 00000021H
  0032b	50		 push	 eax
  0032c	e8 00 00 00 00	 call	 __snprintf
  00331	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2293 :     size_type _Mysize = 0; // current length of string

  00334	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR $T24[ebp+16], 0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0033b	8d 4d cc	 lea	 ecx, DWORD PTR _szObjectName$[ebp]

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  0033e	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR $T24[ebp+20], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 833  : 		_snprintf(szObjectName, sizeof(szObjectName), "object%03d", i);

  00345	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00348	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0034b	0f 11 45 b4	 movups	 XMMWORD PTR $T24[ebp], xmm0
  0034f	90		 npad	 1
$LL1133@Load_LoadO:

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00350	8a 01		 mov	 al, BYTE PTR [ecx]
  00352	41		 inc	 ecx
  00353	84 c0		 test	 al, al
  00355	75 f9		 jne	 SHORT $LL1133@Load_LoadO
  00357	2b ca		 sub	 ecx, edx

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00359	8d 45 cc	 lea	 eax, DWORD PTR _szObjectName$[ebp]
  0035c	51		 push	 ecx
  0035d	50		 push	 eax
  0035e	8d 4d b4	 lea	 ecx, DWORD PTR $T24[ebp]
  00361	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00366	8d 45 b4	 lea	 eax, DWORD PTR $T24[ebp]
  00369	50		 push	 eax
  0036a	8d 85 c4 fe ff
	ff		 lea	 eax, DWORD PTR __Loc$2[ebp]
  00370	50		 push	 eax
  00371	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _stTokenVectorMap$[ebp]
  00377	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0037c	8b b5 cc fe ff
	ff		 mov	 esi, DWORD PTR __Loc$2[ebp+8]
  00382	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00386	75 14		 jne	 SHORT $LN156@Load_LoadO
  00388	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  0038b	50		 push	 eax
  0038c	8d 45 b4	 lea	 eax, DWORD PTR $T24[ebp]
  0038f	50		 push	 eax
  00390	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  00395	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00398	84 c0		 test	 al, al
  0039a	74 06		 je	 SHORT $LN155@Load_LoadO
$LN156@Load_LoadO:

; 1373 :         return _Get_scary()->_Myhead;

  0039c	8b b5 fc fe ff
	ff		 mov	 esi, DWORD PTR _stTokenVectorMap$[ebp]
$LN155@Load_LoadO:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4832 :         if (_My_data._Large_string_engaged()) {

  003a2	8b 4d c8	 mov	 ecx, DWORD PTR $T24[ebp+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  003a5	8b bd fc fe ff
	ff		 mov	 edi, DWORD PTR _stTokenVectorMap$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4832 :         if (_My_data._Large_string_engaged()) {

  003ab	83 f9 10	 cmp	 ecx, 16			; 00000010H
  003ae	72 2c		 jb	 SHORT $LN126@Load_LoadO
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  003b0	8b 55 b4	 mov	 edx, DWORD PTR $T24[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  003b3	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  003b4	8b c2		 mov	 eax, edx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  003b6	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  003bc	72 14		 jb	 SHORT $LN136@Load_LoadO

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  003be	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  003c1	83 c1 23	 add	 ecx, 35			; 00000023H
  003c4	2b c2		 sub	 eax, edx

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  003c6	83 c0 fc	 add	 eax, -4			; fffffffcH
  003c9	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  003cc	0f 87 d6 07 00
	00		 ja	 $LN663@Load_LoadO
$LN136@Load_LoadO:

; 265  :         ::operator delete(_Ptr, _Bytes);

  003d2	51		 push	 ecx
  003d3	52		 push	 edx
  003d4	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  003d9	83 c4 08	 add	 esp, 8
$LN126@Load_LoadO:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 835  : 		if (stTokenVectorMap.end() == stTokenVectorMap.find(szObjectName))

  003dc	3b fe		 cmp	 edi, esi
  003de	0f 84 5a 07 00
	00		 je	 $LN2@Load_LoadO
  003e4	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2293 :     size_type _Mysize = 0; // current length of string

  003e7	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR $T23[ebp+16], 0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  003ee	8d 4d cc	 lea	 ecx, DWORD PTR _szObjectName$[ebp]

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  003f1	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR $T23[ebp+20], 0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  003f8	0f 11 45 b4	 movups	 XMMWORD PTR $T23[ebp], xmm0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  003fc	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  003ff	90		 npad	 1
$LL1134@Load_LoadO:
  00400	8a 01		 mov	 al, BYTE PTR [ecx]
  00402	41		 inc	 ecx
  00403	84 c0		 test	 al, al
  00405	75 f9		 jne	 SHORT $LL1134@Load_LoadO
  00407	2b ca		 sub	 ecx, edx

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00409	8d 45 cc	 lea	 eax, DWORD PTR _szObjectName$[ebp]
  0040c	51		 push	 ecx
  0040d	50		 push	 eax
  0040e	8d 4d b4	 lea	 ecx, DWORD PTR $T23[ebp]
  00411	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map

; 198  :         const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);

  00416	8d 45 b4	 lea	 eax, DWORD PTR $T23[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 838  : 		const CTokenVector & rVector = stTokenVectorMap[szObjectName];

  00419	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map

; 198  :         const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);

  0041d	50		 push	 eax
  0041e	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR __Loc$9[ebp]
  00424	50		 push	 eax
  00425	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _stTokenVectorMap$[ebp]
  0042b	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00430	8b b5 f8 fe ff
	ff		 mov	 esi, DWORD PTR __Loc$9[ebp+8]
  00436	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0043a	75 18		 jne	 SHORT $LN520@Load_LoadO
  0043c	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  0043f	50		 push	 eax
  00440	8d 45 b4	 lea	 eax, DWORD PTR $T23[ebp]
  00443	50		 push	 eax
  00444	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  00449	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0044c	84 c0		 test	 al, al
  0044e	0f 84 ba 00 00
	00		 je	 $LN519@Load_LoadO
$LN520@Load_LoadO:

; 1631 :         if (max_size() == _Get_scary()->_Mysize) {

  00454	81 bd 00 ff ff
	ff c4 4e ec 04	 cmp	 DWORD PTR _stTokenVectorMap$[ebp+4], 82595524 ; 04ec4ec4H
  0045e	0f 84 49 07 00
	00		 je	 $LN1113@Load_LoadO
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map

; 206  :         const auto _Inserted = _Tree_temp_node<_Alnode>(_Mybase::_Getal(), _Scary->_Myhead, piecewise_construct,

  00464	8b b5 fc fe ff
	ff		 mov	 esi, DWORD PTR _stTokenVectorMap$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1144 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  0046a	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _stTokenVectorMap$[ebp]
  00470	89 85 e4 fe ff
	ff		 mov	 DWORD PTR $T6[ebp], eax

; 87   :         return ::operator new(_Bytes);

  00476	6a 34		 push	 52			; 00000034H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00478	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1151 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0047c	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T6[ebp+4], 0

; 87   :         return ::operator new(_Bytes);

  00486	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0048b	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 755  :     _Val         = static_cast<_Other&&>(_New_val);

  0048e	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T6[ebp+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  00498	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map

; 212  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0049b	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _stTokenVectorMap$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  004a1	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  004a5	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  004ac	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], 0

; 2999 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  004b3	0f 10 45 b4	 movups	 xmm0, XMMWORD PTR $T23[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map

; 212  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  004b7	50		 push	 eax
  004b8	ff b5 f4 fe ff
	ff		 push	 DWORD PTR __Loc$9[ebp+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2999 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  004be	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0
  004c2	f3 0f 7e 45 c4	 movq	 xmm0, QWORD PTR $T23[ebp+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map

; 212  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  004c7	ff b5 f0 fe ff
	ff		 push	 DWORD PTR __Loc$9[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2999 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  004cd	66 0f d6 40 20	 movq	 QWORD PTR [eax+32], xmm0

; 4821 :         _My_data._Mysize = 0;

  004d2	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR $T23[ebp+16], 0

; 4822 :         _My_data._Myres  = _BUF_SIZE - 1;

  004d9	c7 45 c8 0f 00
	00 00		 mov	 DWORD PTR $T23[ebp+20], 15 ; 0000000fH

; 4823 :         _My_data._Activate_SSO_buffer();
; 4824 : 
; 4825 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4826 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  004e0	c6 45 b4 00	 mov	 BYTE PTR $T23[ebp], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 398  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  004e4	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0
  004eb	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [eax+44], 0
  004f2	c7 40 30 00 00
	00 00		 mov	 DWORD PTR [eax+48], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  004f9	89 30		 mov	 DWORD PTR [eax], esi

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  004fb	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  004fe	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 811  :         this->_Ptr->_Color = _Red;

  00501	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map

; 212  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00507	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >::_Insert_node
  0050c	8b f0		 mov	 esi, eax
$LN519@Load_LoadO:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4832 :         if (_My_data._Large_string_engaged()) {

  0050e	8b 4d c8	 mov	 ecx, DWORD PTR $T23[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 838  : 		const CTokenVector & rVector = stTokenVectorMap[szObjectName];

  00511	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4832 :         if (_My_data._Large_string_engaged()) {

  00515	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00518	72 2c		 jb	 SHORT $LN656@Load_LoadO
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0051a	8b 55 b4	 mov	 edx, DWORD PTR $T23[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0051d	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0051e	8b c2		 mov	 eax, edx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00520	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00526	72 14		 jb	 SHORT $LN666@Load_LoadO

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00528	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0052b	83 c1 23	 add	 ecx, 35			; 00000023H
  0052e	2b c2		 sub	 eax, edx

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00530	83 c0 fc	 add	 eax, -4			; fffffffcH
  00533	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00536	0f 87 6c 06 00
	00		 ja	 $LN663@Load_LoadO
$LN666@Load_LoadO:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0053c	51		 push	 ecx
  0053d	52		 push	 edx
  0053e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00543	83 c4 08	 add	 esp, 8
$LN656@Load_LoadO:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  00546	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR $T23[ebp+16], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  0054d	c7 45 c8 0f 00
	00 00		 mov	 DWORD PTR $T23[ebp+20], 15 ; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00554	c6 45 b4 00	 mov	 BYTE PTR $T23[ebp], 0

; 4107 :         return _Mypair._Myval2._Myptr();

  00558	8b 56 28	 mov	 edx, DWORD PTR [esi+40]

; 2236 :         if (_Large_string_engaged()) {

  0055b	83 7a 14 10	 cmp	 DWORD PTR [edx+20], 16	; 00000010H
  0055f	72 02		 jb	 SHORT $LN676@Load_LoadO

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  00561	8b 12		 mov	 edx, DWORD PTR [edx]
$LN676@Load_LoadO:

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00563	8b ca		 mov	 ecx, edx

; 2293 :     size_type _Mysize = 0; // current length of string

  00565	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _$S1$20[ebp+16], 0
  0056c	0f 57 c0	 xorps	 xmm0, xmm0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  0056f	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _$S1$20[ebp+20], 0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00576	0f 11 45 9c	 movups	 XMMWORD PTR _$S1$20[ebp], xmm0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0057a	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
  0057d	0f 1f 00	 npad	 3
$LL1135@Load_LoadO:
  00580	8a 01		 mov	 al, BYTE PTR [ecx]
  00582	41		 inc	 ecx
  00583	84 c0		 test	 al, al
  00585	75 f9		 jne	 SHORT $LL1135@Load_LoadO
  00587	2b cf		 sub	 ecx, edi

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00589	51		 push	 ecx
  0058a	52		 push	 edx
  0058b	8d 4d 9c	 lea	 ecx, DWORD PTR _$S1$20[ebp]
  0058e	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1899 :         return _My_data._Myfirst[_Pos];

  00593	8b 56 28	 mov	 edx, DWORD PTR [esi+40]
  00596	83 c2 18	 add	 edx, 24			; 00000018H
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 840  : 		const std::string & c_rstrxPosition = rVector[0].c_str();

  00599	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  0059d	83 7a 14 10	 cmp	 DWORD PTR [edx+20], 16	; 00000010H
  005a1	72 02		 jb	 SHORT $LN697@Load_LoadO

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  005a3	8b 12		 mov	 edx, DWORD PTR [edx]
$LN697@Load_LoadO:

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  005a5	8b ca		 mov	 ecx, edx

; 2293 :     size_type _Mysize = 0; // current length of string

  005a7	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _$S2$17[ebp+16], 0
  005b1	0f 57 c0	 xorps	 xmm0, xmm0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  005b4	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _$S2$17[ebp+20], 0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  005be	0f 11 85 54 ff
	ff ff		 movups	 XMMWORD PTR _$S2$17[ebp], xmm0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  005c5	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
$LL1136@Load_LoadO:
  005c8	8a 01		 mov	 al, BYTE PTR [ecx]
  005ca	41		 inc	 ecx
  005cb	84 c0		 test	 al, al
  005cd	75 f9		 jne	 SHORT $LL1136@Load_LoadO
  005cf	2b cf		 sub	 ecx, edi

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  005d1	51		 push	 ecx
  005d2	52		 push	 edx
  005d3	8d 8d 54 ff ff
	ff		 lea	 ecx, DWORD PTR _$S2$17[ebp]
  005d9	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1899 :         return _My_data._Myfirst[_Pos];

  005de	8b 56 28	 mov	 edx, DWORD PTR [esi+40]
  005e1	83 c2 30	 add	 edx, 48			; 00000030H
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 841  : 		const std::string & c_rstryPosition = rVector[1].c_str();

  005e4	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  005e8	83 7a 14 10	 cmp	 DWORD PTR [edx+20], 16	; 00000010H
  005ec	72 02		 jb	 SHORT $LN718@Load_LoadO

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  005ee	8b 12		 mov	 edx, DWORD PTR [edx]
$LN718@Load_LoadO:

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  005f0	8b ca		 mov	 ecx, edx

; 2293 :     size_type _Mysize = 0; // current length of string

  005f2	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _$S3$18[ebp+16], 0
  005fc	0f 57 c0	 xorps	 xmm0, xmm0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  005ff	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _$S3$18[ebp+20], 0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00606	0f 11 85 6c ff
	ff ff		 movups	 XMMWORD PTR _$S3$18[ebp], xmm0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0060d	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
$LL1137@Load_LoadO:
  00610	8a 01		 mov	 al, BYTE PTR [ecx]
  00612	41		 inc	 ecx
  00613	84 c0		 test	 al, al
  00615	75 f9		 jne	 SHORT $LL1137@Load_LoadO
  00617	2b cf		 sub	 ecx, edi

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00619	51		 push	 ecx
  0061a	52		 push	 edx
  0061b	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _$S3$18[ebp]
  00621	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1899 :         return _My_data._Myfirst[_Pos];

  00626	8b 56 28	 mov	 edx, DWORD PTR [esi+40]
  00629	83 c2 48	 add	 edx, 72			; 00000048H
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 842  : 		const std::string & c_rstrzPosition = rVector[2].c_str();

  0062c	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  00630	83 7a 14 10	 cmp	 DWORD PTR [edx+20], 16	; 00000010H
  00634	72 02		 jb	 SHORT $LN753@Load_LoadO

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  00636	8b 12		 mov	 edx, DWORD PTR [edx]
$LN753@Load_LoadO:

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00638	8b ca		 mov	 ecx, edx

; 2293 :     size_type _Mysize = 0; // current length of string

  0063a	c7 45 94 00 00
	00 00		 mov	 DWORD PTR _$S4$19[ebp+16], 0
  00641	0f 57 c0	 xorps	 xmm0, xmm0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  00644	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _$S4$19[ebp+20], 0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0064b	0f 11 45 84	 movups	 XMMWORD PTR _$S4$19[ebp], xmm0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0064f	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
$LL1138@Load_LoadO:
  00652	8a 01		 mov	 al, BYTE PTR [ecx]
  00654	41		 inc	 ecx
  00655	84 c0		 test	 al, al
  00657	75 f9		 jne	 SHORT $LL1138@Load_LoadO
  00659	2b cf		 sub	 ecx, edi

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0065b	51		 push	 ecx
  0065c	52		 push	 edx
  0065d	8d 4d 84	 lea	 ecx, DWORD PTR _$S4$19[ebp]
  00660	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>

; 2236 :         if (_Large_string_engaged()) {

  00665	83 7d b0 10	 cmp	 DWORD PTR _$S1$20[ebp+20], 16 ; 00000010H
  00669	8d 45 9c	 lea	 eax, DWORD PTR _$S1$20[ebp]
  0066c	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 843  : 		const std::string & c_rstrCRC = rVector[3].c_str();

  0066f	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  00673	0f 43 45 9c	 cmovae	 eax, DWORD PTR _$S1$20[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 847  : 		ObjectData.Position.x = atof(c_rstrxPosition.c_str());

  00677	50		 push	 eax
  00678	66 0f 13 85 34
	ff ff ff	 movlpd	 QWORD PTR _ObjectData$16[ebp+16], xmm0
  00680	66 0f 13 85 3c
	ff ff ff	 movlpd	 QWORD PTR _ObjectData$16[ebp+24], xmm0
  00688	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _ObjectData$16[ebp+32], 0
  00692	66 0f 13 85 4c
	ff ff ff	 movlpd	 QWORD PTR _ObjectData$16[ebp+40], xmm0
  0069a	e8 00 00 00 00	 call	 _atof
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  0069f	83 bd 68 ff ff
	ff 10		 cmp	 DWORD PTR _$S2$17[ebp+20], 16 ; 00000010H
  006a6	8d 85 54 ff ff
	ff		 lea	 eax, DWORD PTR _$S2$17[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 847  : 		ObjectData.Position.x = atof(c_rstrxPosition.c_str());

  006ac	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR _ObjectData$16[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  006b2	0f 43 85 54 ff
	ff ff		 cmovae	 eax, DWORD PTR _$S2$17[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 848  : 		ObjectData.Position.y = atof(c_rstryPosition.c_str());

  006b9	50		 push	 eax
  006ba	e8 00 00 00 00	 call	 _atof
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  006bf	83 7d 80 10	 cmp	 DWORD PTR _$S3$18[ebp+20], 16 ; 00000010H
  006c3	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _$S3$18[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 848  : 		ObjectData.Position.y = atof(c_rstryPosition.c_str());

  006c9	d9 9d 28 ff ff
	ff		 fstp	 DWORD PTR _ObjectData$16[ebp+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  006cf	0f 43 85 6c ff
	ff ff		 cmovae	 eax, DWORD PTR _$S3$18[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 849  : 		ObjectData.Position.z = atof(c_rstrzPosition.c_str());

  006d6	50		 push	 eax
  006d7	e8 00 00 00 00	 call	 _atof
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  006dc	83 7d 98 10	 cmp	 DWORD PTR _$S4$19[ebp+20], 16 ; 00000010H
  006e0	8d 45 84	 lea	 eax, DWORD PTR _$S4$19[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 849  : 		ObjectData.Position.z = atof(c_rstrzPosition.c_str());

  006e3	d9 9d 2c ff ff
	ff		 fstp	 DWORD PTR _ObjectData$16[ebp+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  006e9	0f 43 45 84	 cmovae	 eax, DWORD PTR _$S4$19[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 850  : 		ObjectData.dwCRC = atoi	(c_rstrCRC.c_str());

  006ed	50		 push	 eax
  006ee	e8 00 00 00 00	 call	 __atoi64
  006f3	83 c4 10	 add	 esp, 16			; 00000010H
  006f6	89 85 30 ff ff
	ff		 mov	 DWORD PTR _ObjectData$16[ebp+12], eax

; 851  : 
; 852  : 		ObjectData.InitializeRotation(); //ObjectData.m_fYaw = ObjectData.m_fPitch = ObjectData.m_fRoll = 0;

  006fc	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _ObjectData$16[ebp]
  00702	e8 00 00 00 00	 call	 ?InitializeRotation@SObjectData@CArea@@QAEXXZ ; CArea::SObjectData::InitializeRotation
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00707	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  0070a	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0070f	8b 7e 28	 mov	 edi, DWORD PTR [esi+40]
  00712	2b cf		 sub	 ecx, edi
  00714	f7 e9		 imul	 ecx
  00716	c1 fa 02	 sar	 edx, 2
  00719	8b c2		 mov	 eax, edx
  0071b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0071e	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 853  : 		if (rVector.size() > 4)

  00720	83 f8 04	 cmp	 eax, 4
  00723	0f 86 b1 01 00
	00		 jbe	 $LN14@Load_LoadO
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1899 :         return _My_data._Myfirst[_Pos];

  00729	83 c7 60	 add	 edi, 96			; 00000060H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2235 :         const value_type* _Result = _Bx._Buf;

  0072c	8b c7		 mov	 eax, edi
  0072e	89 bd 08 ff ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], edi

; 2236 :         if (_Large_string_engaged()) {

  00734	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H
  00738	72 08		 jb	 SHORT $LN1126@Load_LoadO

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  0073a	8b 07		 mov	 eax, DWORD PTR [edi]
  0073c	89 85 08 ff ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], eax
$LN1126@Load_LoadO:

; 4363 :         return static_cast<size_type>(

  00742	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]

; 610  :     if (_Start_at < _Hay_size) {

  00745	85 c9		 test	 ecx, ecx
  00747	74 18		 je	 SHORT $LN882@Load_LoadO

; 424  :         return static_cast<const _Elem*>(_CSTD memchr(_First, _Ch, _Count));

  00749	51		 push	 ecx
  0074a	6a 23		 push	 35			; 00000023H
  0074c	50		 push	 eax
  0074d	e8 00 00 00 00	 call	 _memchr
  00752	83 c4 0c	 add	 esp, 12			; 0000000cH

; 612  :         if (_Found_at) {

  00755	85 c0		 test	 eax, eax
  00757	74 08		 je	 SHORT $LN882@Load_LoadO

; 613  :             return static_cast<size_t>(_Found_at - _Haystack);

  00759	2b 85 08 ff ff
	ff		 sub	 eax, DWORD PTR __Result$1$[ebp]
  0075f	eb 03		 jmp	 SHORT $LN1144@Load_LoadO
$LN882@Load_LoadO:

; 614  :         }
; 615  :     }
; 616  : 
; 617  :     return static_cast<size_t>(-1); // (npos) no match

  00761	83 c8 ff	 or	 eax, -1
$LN1144@Load_LoadO:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 856  : 			if (s!=rVector[4].npos)

  00764	89 85 08 ff ff
	ff		 mov	 DWORD PTR $T12[ebp], eax
  0076a	83 f8 ff	 cmp	 eax, -1
  0076d	0f 84 2f 01 00
	00		 je	 $LN13@Load_LoadO

; 858  : 				ObjectData.m_fYaw = atoi(rVector[4].substr(0,s-1).c_str());

  00773	48		 dec	 eax
  00774	8b cf		 mov	 ecx, edi
  00776	50		 push	 eax
  00777	6a 00		 push	 0
  00779	8d 85 0c ff ff
	ff		 lea	 eax, DWORD PTR $T15[ebp]
  0077f	50		 push	 eax
  00780	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  00785	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00789	72 02		 jb	 SHORT $LN1079@Load_LoadO

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  0078b	8b 00		 mov	 eax, DWORD PTR [eax]
$LN1079@Load_LoadO:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 858  : 				ObjectData.m_fYaw = atoi(rVector[4].substr(0,s-1).c_str());

  0078d	50		 push	 eax
  0078e	e8 00 00 00 00	 call	 __atoi64
  00793	83 c4 04	 add	 esp, 4
  00796	8b c8		 mov	 ecx, eax
  00798	e8 00 00 00 00	 call	 __ltod3
  0079d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  007a1	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR $T15[ebp]
  007a7	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR _ObjectData$16[ebp+24], xmm0
  007af	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1899 :         return _My_data._Myfirst[_Pos];

  007b4	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 859  : 				int p = s+1;

  007b7	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR $T12[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1899 :         return _My_data._Myfirst[_Pos];

  007bd	83 c0 60	 add	 eax, 96			; 00000060H
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 859  : 				int p = s+1;

  007c0	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1899 :         return _My_data._Myfirst[_Pos];

  007c1	89 85 dc fe ff
	ff		 mov	 DWORD PTR $T4[ebp], eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 859  : 				int p = s+1;

  007c7	89 8d e0 fe ff
	ff		 mov	 DWORD PTR _p$1$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2235 :         const value_type* _Result = _Bx._Buf;

  007cd	8b d0		 mov	 edx, eax
  007cf	89 85 08 ff ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], eax

; 2236 :         if (_Large_string_engaged()) {

  007d5	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  007d9	72 08		 jb	 SHORT $LN1088@Load_LoadO

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  007db	8b 10		 mov	 edx, DWORD PTR [eax]
  007dd	89 95 08 ff ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], edx
$LN1088@Load_LoadO:

; 4363 :         return static_cast<size_type>(

  007e3	8b 40 10	 mov	 eax, DWORD PTR [eax+16]

; 610  :     if (_Start_at < _Hay_size) {

  007e6	3b c8		 cmp	 ecx, eax
  007e8	73 1f		 jae	 SHORT $LN1094@Load_LoadO

; 611  :         const auto _Found_at = _Traits::find(_Haystack + _Start_at, _Hay_size - _Start_at, _Ch);

  007ea	2b c1		 sub	 eax, ecx

; 424  :         return static_cast<const _Elem*>(_CSTD memchr(_First, _Ch, _Count));

  007ec	50		 push	 eax

; 611  :         const auto _Found_at = _Traits::find(_Haystack + _Start_at, _Hay_size - _Start_at, _Ch);

  007ed	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 424  :         return static_cast<const _Elem*>(_CSTD memchr(_First, _Ch, _Count));

  007f0	6a 23		 push	 35			; 00000023H
  007f2	50		 push	 eax
  007f3	e8 00 00 00 00	 call	 _memchr
  007f8	8b f8		 mov	 edi, eax
  007fa	83 c4 0c	 add	 esp, 12			; 0000000cH

; 612  :         if (_Found_at) {

  007fd	85 ff		 test	 edi, edi
  007ff	74 08		 je	 SHORT $LN1094@Load_LoadO

; 613  :             return static_cast<size_t>(_Found_at - _Haystack);

  00801	2b bd 08 ff ff
	ff		 sub	 edi, DWORD PTR __Result$1$[ebp]
  00807	eb 03		 jmp	 SHORT $LN1092@Load_LoadO
$LN1094@Load_LoadO:

; 614  :         }
; 615  :     }
; 616  : 
; 617  :     return static_cast<size_t>(-1); // (npos) no match

  00809	83 cf ff	 or	 edi, -1
$LN1092@Load_LoadO:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 861  : 				ObjectData.m_fPitch = atoi(rVector[4].substr(p,s-1-p+1).c_str());

  0080c	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _p$1$[ebp]
  00812	8b c7		 mov	 eax, edi
  00814	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR $T4[ebp]
  0081a	2b c2		 sub	 eax, edx
  0081c	50		 push	 eax
  0081d	52		 push	 edx
  0081e	8d 85 0c ff ff
	ff		 lea	 eax, DWORD PTR $T14[ebp]
  00824	50		 push	 eax
  00825	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  0082a	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  0082e	72 02		 jb	 SHORT $LN1103@Load_LoadO

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  00830	8b 00		 mov	 eax, DWORD PTR [eax]
$LN1103@Load_LoadO:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 861  : 				ObjectData.m_fPitch = atoi(rVector[4].substr(p,s-1-p+1).c_str());

  00832	50		 push	 eax
  00833	e8 00 00 00 00	 call	 __atoi64
  00838	83 c4 04	 add	 esp, 4
  0083b	8b c8		 mov	 ecx, eax
  0083d	e8 00 00 00 00	 call	 __ltod3
  00842	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00846	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR $T14[ebp]
  0084c	f3 0f 11 85 40
	ff ff ff	 movss	 DWORD PTR _ObjectData$16[ebp+28], xmm0
  00854	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1899 :         return _My_data._Myfirst[_Pos];

  00859	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 862  : 				ObjectData.m_fRoll = atoi(rVector[4].substr(s+1).c_str());

  0085c	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  0085f	6a ff		 push	 -1
  00861	50		 push	 eax
  00862	8d 85 0c ff ff
	ff		 lea	 eax, DWORD PTR $T13[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1899 :         return _My_data._Myfirst[_Pos];

  00868	83 c1 60	 add	 ecx, 96			; 00000060H
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 862  : 				ObjectData.m_fRoll = atoi(rVector[4].substr(s+1).c_str());

  0086b	50		 push	 eax
  0086c	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  00871	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00875	72 02		 jb	 SHORT $LN1063@Load_LoadO

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  00877	8b 00		 mov	 eax, DWORD PTR [eax]
$LN1063@Load_LoadO:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 862  : 				ObjectData.m_fRoll = atoi(rVector[4].substr(s+1).c_str());

  00879	50		 push	 eax
  0087a	e8 00 00 00 00	 call	 __atoi64
  0087f	83 c4 04	 add	 esp, 4
  00882	8b c8		 mov	 ecx, eax
  00884	e8 00 00 00 00	 call	 __ltod3
  00889	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0088d	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  00893	f3 0f 11 85 44
	ff ff ff	 movss	 DWORD PTR _ObjectData$16[ebp+32], xmm0
  0089b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 863  : 			}

  008a0	eb 38		 jmp	 SHORT $LN14@Load_LoadO
$LN13@Load_LoadO:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  008a2	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 866  : 				ObjectData.m_fYaw = 0.0f;

  008a6	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _ObjectData$16[ebp+24], 0

; 867  : 				ObjectData.m_fPitch = 0.0f;

  008b0	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _ObjectData$16[ebp+28], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  008ba	72 02		 jb	 SHORT $LN1070@Load_LoadO

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  008bc	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN1070@Load_LoadO:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 868  : 				ObjectData.m_fRoll = atoi(rVector[4].c_str());

  008be	57		 push	 edi
  008bf	e8 00 00 00 00	 call	 __atoi64
  008c4	83 c4 04	 add	 esp, 4
  008c7	8b c8		 mov	 ecx, eax
  008c9	e8 00 00 00 00	 call	 __ltod3
  008ce	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  008d2	f3 0f 11 85 44
	ff ff ff	 movss	 DWORD PTR _ObjectData$16[ebp+32], xmm0
$LN14@Load_LoadO:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  008da	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  008dd	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  008e2	8b 7e 28	 mov	 edi, DWORD PTR [esi+40]
  008e5	2b cf		 sub	 ecx, edi
  008e7	f7 e9		 imul	 ecx
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 872  : 		ObjectData.m_fHeightBias = 0.0f;

  008e9	c7 85 48 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _ObjectData$16[ebp+36], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  008f3	c1 fa 02	 sar	 edx, 2
  008f6	8b c2		 mov	 eax, edx
  008f8	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  008fb	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 873  : 		if (rVector.size() > 5)

  008fd	83 f8 05	 cmp	 eax, 5
  00900	76 1d		 jbe	 SHORT $LN15@Load_LoadO
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  00902	83 bf 8c 00 00
	00 10		 cmp	 DWORD PTR [edi+140], 16	; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1899 :         return _My_data._Myfirst[_Pos];

  00909	8d 47 78	 lea	 eax, DWORD PTR [edi+120]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  0090c	72 02		 jb	 SHORT $LN889@Load_LoadO

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  0090e	8b 00		 mov	 eax, DWORD PTR [eax]
$LN889@Load_LoadO:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 875  : 			ObjectData.m_fHeightBias = atof(rVector[5].c_str());

  00910	50		 push	 eax
  00911	e8 00 00 00 00	 call	 _atof
  00916	d9 9d 48 ff ff
	ff		 fstp	 DWORD PTR _ObjectData$16[ebp+36]
  0091c	83 c4 04	 add	 esp, 4
$LN15@Load_LoadO:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0091f	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  00922	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00927	2b 4e 28	 sub	 ecx, DWORD PTR [esi+40]
  0092a	f7 e9		 imul	 ecx
  0092c	c1 fa 02	 sar	 edx, 2
  0092f	8b c2		 mov	 eax, edx
  00931	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00934	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 878  : 		if (rVector.size() > 6)

  00936	83 f8 06	 cmp	 eax, 6
  00939	76 68		 jbe	 SHORT $LN1141@Load_LoadO

; 880  : 			for (int portalIdx = 0; portalIdx < min(rVector.size()-6, PORTAL_ID_MAX_NUM); ++portalIdx)

  0093b	33 ff		 xor	 edi, edi
  0093d	c7 85 08 ff ff
	ff 90 00 00 00	 mov	 DWORD PTR tv5076[ebp], 144 ; 00000090H
  00947	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL7@Load_LoadO:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00950	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  00953	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00958	2b 4e 28	 sub	 ecx, DWORD PTR [esi+40]
  0095b	f7 e9		 imul	 ecx
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 880  : 			for (int portalIdx = 0; portalIdx < min(rVector.size()-6, PORTAL_ID_MAX_NUM); ++portalIdx)

  0095d	b9 08 00 00 00	 mov	 ecx, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00962	c1 fa 02	 sar	 edx, 2
  00965	8b c2		 mov	 eax, edx
  00967	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0096a	83 c0 fa	 add	 eax, -6			; fffffffaH
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 880  : 			for (int portalIdx = 0; portalIdx < min(rVector.size()-6, PORTAL_ID_MAX_NUM); ++portalIdx)

  0096d	03 c2		 add	 eax, edx
  0096f	3b c1		 cmp	 eax, ecx
  00971	0f 42 c8	 cmovb	 ecx, eax
  00974	3b f9		 cmp	 edi, ecx
  00976	73 2b		 jae	 SHORT $LN1141@Load_LoadO
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1899 :         return _My_data._Myfirst[_Pos];

  00978	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR tv5076[ebp]
  0097e	03 46 28	 add	 eax, DWORD PTR [esi+40]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00981	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2236 :         if (_Large_string_engaged()) {

  00985	72 02		 jb	 SHORT $LN106@Load_LoadO

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  00987	8b 00		 mov	 eax, DWORD PTR [eax]
$LN106@Load_LoadO:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 882  : 				ObjectData.abyPortalID[portalIdx] = atoi(rVector[6+portalIdx].c_str());

  00989	50		 push	 eax
  0098a	e8 00 00 00 00	 call	 __atoi64
  0098f	88 84 3d 34 ff
	ff ff		 mov	 BYTE PTR _ObjectData$16[ebp+edi+16], al
  00996	83 c4 04	 add	 esp, 4
  00999	47		 inc	 edi
  0099a	83 85 08 ff ff
	ff 18		 add	 DWORD PTR tv5076[ebp], 24 ; 00000018H
  009a1	eb ad		 jmp	 SHORT $LL7@Load_LoadO
$LN1141@Load_LoadO:

; 883  : 			}
; 884  : 		}
; 885  : 
; 886  : 		// If data is not inside property, then delete it.
; 887  : 		CProperty * pProperty;
; 888  : 		if (!CPropertyManager::Instance().Get(ObjectData.dwCRC, &pProperty))

  009a3	8b b5 30 ff ff
	ff		 mov	 esi, DWORD PTR _ObjectData$16[ebp+12]
  009a9	8d 85 d0 fe ff
	ff		 lea	 eax, DWORD PTR _pProperty$3[ebp]
  009af	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPropertyManager@@@@0PAVCPropertyManager@@A ; CSingleton<CPropertyManager>::ms_singleton
  009b5	50		 push	 eax
  009b6	56		 push	 esi
  009b7	e8 00 00 00 00	 call	 ?Get@CPropertyManager@@QAE_NKPAPAVCProperty@@@Z ; CPropertyManager::Get
  009bc	84 c0		 test	 al, al
  009be	75 10		 jne	 SHORT $LN17@Load_LoadO

; 889  : 		{
; 890  : 			TraceError(" CArea::LoadObject Property(%u) Load ERROR", ObjectData.dwCRC);

  009c0	56		 push	 esi
  009c1	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@HHDKLHOE@?5CArea?3?3LoadObject?5Property?$CI?$CFu?$CJ@
  009c6	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  009cb	83 c4 08	 add	 esp, 8

; 891  : 			continue;

  009ce	eb 44		 jmp	 SHORT $LN325@Load_LoadO
$LN17@Load_LoadO:

; 892  : 		}
; 893  : 
; 894  : 		m_ObjectDataVector.push_back(ObjectData);

  009d0	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  009d6	83 c1 04	 add	 ecx, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  009d9	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  009dc	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  009df	74 26		 je	 SHORT $LN326@Load_LoadO
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 254  :         ::new (static_cast<void*>(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

  009e1	0f 10 85 24 ff
	ff ff		 movups	 xmm0, XMMWORD PTR _ObjectData$16[ebp]
  009e8	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  009eb	0f 10 85 34 ff
	ff ff		 movups	 xmm0, XMMWORD PTR _ObjectData$16[ebp+16]
  009f2	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0
  009f6	0f 10 85 44 ff
	ff ff		 movups	 xmm0, XMMWORD PTR _ObjectData$16[ebp+32]
  009fd	0f 11 40 20	 movups	 XMMWORD PTR [eax+32], xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 806  :         ++_Mylast;

  00a01	83 41 04 30	 add	 DWORD PTR [ecx+4], 48	; 00000030H

; 782  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00a05	eb 0d		 jmp	 SHORT $LN325@Load_LoadO
$LN326@Load_LoadO:

; 783  :         }
; 784  : 
; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00a07	8d 95 24 ff ff
	ff		 lea	 edx, DWORD PTR _ObjectData$16[ebp]
  00a0d	52		 push	 edx
  00a0e	50		 push	 eax
  00a0f	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABUSObjectData@CArea@@@?$vector@USObjectData@CArea@@V?$allocator@USObjectData@CArea@@@std@@@std@@AAEPAUSObjectData@CArea@@QAU23@ABU23@@Z ; std::vector<CArea::SObjectData,std::allocator<CArea::SObjectData> >::_Emplace_reallocate<CArea::SObjectData const &>
$LN325@Load_LoadO:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 831  : 	for (DWORD i = 0; i < dwCount; ++i)

  00a14	8b 4d 98	 mov	 ecx, DWORD PTR _$S4$19[ebp+20]
  00a17	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  00a1b	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00a1e	72 2c		 jb	 SHORT $LN425@Load_LoadO
  00a20	8b 55 84	 mov	 edx, DWORD PTR _$S4$19[ebp]
  00a23	41		 inc	 ecx
  00a24	8b c2		 mov	 eax, edx
  00a26	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00a2c	72 14		 jb	 SHORT $LN435@Load_LoadO
  00a2e	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00a31	83 c1 23	 add	 ecx, 35			; 00000023H
  00a34	2b c2		 sub	 eax, edx
  00a36	83 c0 fc	 add	 eax, -4			; fffffffcH
  00a39	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00a3c	0f 87 66 01 00
	00		 ja	 $LN663@Load_LoadO
$LN435@Load_LoadO:
  00a42	51		 push	 ecx
  00a43	52		 push	 edx
  00a44	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00a49	83 c4 08	 add	 esp, 8
$LN425@Load_LoadO:
  00a4c	8b 4d 80	 mov	 ecx, DWORD PTR _$S3$18[ebp+20]
  00a4f	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00a53	c6 45 84 00	 mov	 BYTE PTR _$S4$19[ebp], 0
  00a57	c7 45 98 0f 00
	00 00		 mov	 DWORD PTR _$S4$19[ebp+20], 15 ; 0000000fH
  00a5e	c7 45 94 00 00
	00 00		 mov	 DWORD PTR _$S4$19[ebp+16], 0
  00a65	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00a68	72 2f		 jb	 SHORT $LN452@Load_LoadO
  00a6a	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _$S3$18[ebp]
  00a70	41		 inc	 ecx
  00a71	8b c2		 mov	 eax, edx
  00a73	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00a79	72 14		 jb	 SHORT $LN462@Load_LoadO
  00a7b	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00a7e	83 c1 23	 add	 ecx, 35			; 00000023H
  00a81	2b c2		 sub	 eax, edx
  00a83	83 c0 fc	 add	 eax, -4			; fffffffcH
  00a86	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00a89	0f 87 19 01 00
	00		 ja	 $LN663@Load_LoadO
$LN462@Load_LoadO:
  00a8f	51		 push	 ecx
  00a90	52		 push	 edx
  00a91	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00a96	83 c4 08	 add	 esp, 8
$LN452@Load_LoadO:
  00a99	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR _$S2$17[ebp+20]
  00a9f	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00aa3	c6 85 6c ff ff
	ff 00		 mov	 BYTE PTR _$S3$18[ebp], 0
  00aaa	c7 45 80 0f 00
	00 00		 mov	 DWORD PTR _$S3$18[ebp+20], 15 ; 0000000fH
  00ab1	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _$S3$18[ebp+16], 0
  00abb	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00abe	72 2f		 jb	 SHORT $LN479@Load_LoadO
  00ac0	8b 95 54 ff ff
	ff		 mov	 edx, DWORD PTR _$S2$17[ebp]
  00ac6	41		 inc	 ecx
  00ac7	8b c2		 mov	 eax, edx
  00ac9	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00acf	72 14		 jb	 SHORT $LN489@Load_LoadO
  00ad1	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00ad4	83 c1 23	 add	 ecx, 35			; 00000023H
  00ad7	2b c2		 sub	 eax, edx
  00ad9	83 c0 fc	 add	 eax, -4			; fffffffcH
  00adc	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00adf	0f 87 c3 00 00
	00		 ja	 $LN663@Load_LoadO
$LN489@Load_LoadO:
  00ae5	51		 push	 ecx
  00ae6	52		 push	 edx
  00ae7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00aec	83 c4 08	 add	 esp, 8
$LN479@Load_LoadO:
  00aef	8b 4d b0	 mov	 ecx, DWORD PTR _$S1$20[ebp+20]
  00af2	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00af6	c6 85 54 ff ff
	ff 00		 mov	 BYTE PTR _$S2$17[ebp], 0
  00afd	c7 85 68 ff ff
	ff 0f 00 00 00	 mov	 DWORD PTR _$S2$17[ebp+20], 15 ; 0000000fH
  00b07	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _$S2$17[ebp+16], 0
  00b11	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00b14	72 28		 jb	 SHORT $LN2@Load_LoadO
  00b16	8b 55 9c	 mov	 edx, DWORD PTR _$S1$20[ebp]
  00b19	41		 inc	 ecx
  00b1a	8b c2		 mov	 eax, edx
  00b1c	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00b22	72 10		 jb	 SHORT $LN291@Load_LoadO
  00b24	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00b27	83 c1 23	 add	 ecx, 35			; 00000023H
  00b2a	2b c2		 sub	 eax, edx
  00b2c	83 c0 fc	 add	 eax, -4			; fffffffcH
  00b2f	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00b32	77 74		 ja	 SHORT $LN663@Load_LoadO
$LN291@Load_LoadO:
  00b34	51		 push	 ecx
  00b35	52		 push	 edx
  00b36	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00b3b	83 c4 08	 add	 esp, 8
$LN2@Load_LoadO:
  00b3e	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _i$1$[ebp]
  00b44	40		 inc	 eax
  00b45	89 85 ec fe ff
	ff		 mov	 DWORD PTR _i$1$[ebp], eax
  00b4b	3b 85 d4 fe ff
	ff		 cmp	 eax, DWORD PTR _dwCount$1$[ebp]
  00b51	0f 82 c9 f7 ff
	ff		 jb	 $LL4@Load_LoadO
$LN1140@Load_LoadO:

; 897  : 	return true;

  00b57	c6 85 07 ff ff
	ff 01		 mov	 BYTE PTR $T11[ebp], 1
$LN36@Load_LoadO:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  00b5e	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _stTokenVectorMap$[ebp]
  00b64	ff 70 04	 push	 DWORD PTR [eax+4]
  00b67	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _stTokenVectorMap$[ebp]
  00b6d	50		 push	 eax
  00b6e	8b c8		 mov	 ecx, eax
  00b70	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00b75	6a 34		 push	 52			; 00000034H
  00b77	ff b5 fc fe ff
	ff		 push	 DWORD PTR _stTokenVectorMap$[ebp]
  00b7d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 897  : 	return true;

  00b82	8a 85 07 ff ff
	ff		 mov	 al, BYTE PTR $T11[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00b88	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 898  : }

  00b8b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00b8e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00b95	59		 pop	 ecx
  00b96	5f		 pop	 edi
  00b97	5e		 pop	 esi
  00b98	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00b9b	33 cd		 xor	 ecx, ebp
  00b9d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00ba2	8b e5		 mov	 esp, ebp
  00ba4	5d		 pop	 ebp
  00ba5	c2 04 00	 ret	 4
$LN663@Load_LoadO:
  00ba8	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1113@Load_LoadO:
  00bad	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN1143@Load_LoadO:
  00bb2	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?__Load_LoadObject@CArea@@IAE_NPBD@Z$0:
  00000	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _stTokenVectorMap$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@@std@@QAE@XZ
__unwindfunclet$?__Load_LoadObject@CArea@@IAE_NPBD@Z$3:
  0000b	8d 4d b4	 lea	 ecx, DWORD PTR $T25[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?__Load_LoadObject@CArea@@IAE_NPBD@Z$53:
  00013	8d 8d e4 fe ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00019	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >
__unwindfunclet$?__Load_LoadObject@CArea@@IAE_NPBD@Z$5:
  0001e	8d 4d b4	 lea	 ecx, DWORD PTR $T23[ebp]
  00021	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?__Load_LoadObject@CArea@@IAE_NPBD@Z$33:
  00026	8d 8d e4 fe ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  0002c	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >
__unwindfunclet$?__Load_LoadObject@CArea@@IAE_NPBD@Z$6:
  00031	8d 4d 9c	 lea	 ecx, DWORD PTR _$S1$20[ebp]
  00034	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?__Load_LoadObject@CArea@@IAE_NPBD@Z$7:
  00039	8d 8d 54 ff ff
	ff		 lea	 ecx, DWORD PTR _$S2$17[ebp]
  0003f	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?__Load_LoadObject@CArea@@IAE_NPBD@Z$8:
  00044	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _$S3$18[ebp]
  0004a	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?__Load_LoadObject@CArea@@IAE_NPBD@Z$9:
  0004f	8d 4d 84	 lea	 ecx, DWORD PTR _$S4$19[ebp]
  00052	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00057	cc		 int	 3
  00058	cc		 int	 3
  00059	cc		 int	 3
  0005a	cc		 int	 3
  0005b	cc		 int	 3
__ehhandler$?__Load_LoadObject@CArea@@IAE_NPBD@Z:
  0005c	90		 npad	 1
  0005d	90		 npad	 1
  0005e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00062	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00065	8b 8a c4 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-316]
  0006b	33 c8		 xor	 ecx, eax
  0006d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00072	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00075	33 c8		 xor	 ecx, eax
  00077	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?__Load_LoadObject@CArea@@IAE_NPBD@Z
  00081	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?__Load_LoadObject@CArea@@IAE_NPBD@Z ENDP		; CArea::__Load_LoadObject
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?CheckObjectIndex@CArea@@IBE_NK@Z
_TEXT	SEGMENT
_dwIndex$ = 8						; size = 4
?CheckObjectIndex@CArea@@IBE_NK@Z PROC			; CArea::CheckObjectIndex, COMDAT
; _this$ = ecx

; 978  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00003	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00006	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000b	2b 51 04	 sub	 edx, DWORD PTR [ecx+4]
  0000e	f7 ea		 imul	 edx
  00010	c1 fa 03	 sar	 edx, 3
  00013	8b c2		 mov	 eax, edx
  00015	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00018	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 979  : 	if (dwIndex >= m_ObjectDataVector.size())

  0001a	39 45 08	 cmp	 DWORD PTR _dwIndex$[ebp], eax
  0001d	0f 92 c0	 setb	 al

; 980  : 		return false;
; 981  : 
; 982  : 	return true;
; 983  : }

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
?CheckObjectIndex@CArea@@IBE_NK@Z ENDP			; CArea::CheckObjectIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?DEBUG_GetRenderedGrapphicThingInstanceNum@CArea@@QAEKXZ
_TEXT	SEGMENT
?DEBUG_GetRenderedGrapphicThingInstanceNum@CArea@@QAEKXZ PROC ; CArea::DEBUG_GetRenderedGrapphicThingInstanceNum, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00000	8b 41 7c	 mov	 eax, DWORD PTR [ecx+124]
  00003	2b 41 78	 sub	 eax, DWORD PTR [ecx+120]
  00006	c1 f8 02	 sar	 eax, 2
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 175  : { return m_kRenderedGrapphicThingInstanceVector.size(); }

  00009	c3		 ret	 0
?DEBUG_GetRenderedGrapphicThingInstanceNum@CArea@@QAEKXZ ENDP ; CArea::DEBUG_GetRenderedGrapphicThingInstanceNum
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?DEBUG_GetRenderedCRCWithNumVector@CArea@@QAEAAV?$vector@USCRCWithNumber@CArea@@V?$allocator@USCRCWithNumber@CArea@@@std@@@std@@XZ
_TEXT	SEGMENT
?DEBUG_GetRenderedCRCWithNumVector@CArea@@QAEAAV?$vector@USCRCWithNumber@CArea@@V?$allocator@USCRCWithNumber@CArea@@@std@@@std@@XZ PROC ; CArea::DEBUG_GetRenderedCRCWithNumVector, COMDAT
; _this$ = ecx

; 172  : { return m_kRenderedThingInstanceCRCWithNumberVector; }

  00000	8d 41 6c	 lea	 eax, DWORD PTR [ecx+108]
  00003	c3		 ret	 0
?DEBUG_GetRenderedCRCWithNumVector@CArea@@QAEAAV?$vector@USCRCWithNumber@CArea@@V?$allocator@USCRCWithNumber@CArea@@@std@@@std@@XZ ENDP ; CArea::DEBUG_GetRenderedCRCWithNumVector
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?DEBUG_GetRenderedCRCNum@CArea@@QAEKXZ
_TEXT	SEGMENT
?DEBUG_GetRenderedCRCNum@CArea@@QAEKXZ PROC		; CArea::DEBUG_GetRenderedCRCNum, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00000	8b 41 70	 mov	 eax, DWORD PTR [ecx+112]
  00003	2b 41 6c	 sub	 eax, DWORD PTR [ecx+108]
  00006	c1 f8 03	 sar	 eax, 3
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 169  : { return m_kRenderedThingInstanceCRCWithNumberVector.size(); }

  00009	c3		 ret	 0
?DEBUG_GetRenderedCRCNum@CArea@@QAEKXZ ENDP		; CArea::DEBUG_GetRenderedCRCNum
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?GetCoordinate@CArea@@QAEXPAG0@Z
_TEXT	SEGMENT
_usCoordX$ = 8						; size = 4
_usCoordY$ = 12						; size = 4
?GetCoordinate@CArea@@QAEXPAG0@Z PROC			; CArea::GetCoordinate, COMDAT
; _this$ = ecx

; 1185 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1186 : 	*usCoordX = m_wX;

  00003	8b 45 08	 mov	 eax, DWORD PTR _usCoordX$[ebp]
  00006	66 8b 91 84 00
	00 00		 mov	 dx, WORD PTR [ecx+132]
  0000d	66 89 10	 mov	 WORD PTR [eax], dx

; 1187 : 	*usCoordY = m_wY;

  00010	8b 45 0c	 mov	 eax, DWORD PTR _usCoordY$[ebp]
  00013	66 8b 89 86 00
	00 00		 mov	 cx, WORD PTR [ecx+134]
  0001a	66 89 08	 mov	 WORD PTR [eax], cx

; 1188 : }

  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
?GetCoordinate@CArea@@QAEXPAG0@Z ENDP			; CArea::GetCoordinate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?SetCoordinate@CArea@@QAEXABG0@Z
_TEXT	SEGMENT
_usCoordX$ = 8						; size = 4
_usCoordY$ = 12						; size = 4
?SetCoordinate@CArea@@QAEXABG0@Z PROC			; CArea::SetCoordinate, COMDAT
; _this$ = ecx

; 1191 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1192 : 	m_wX = usCoordX;

  00003	8b 45 08	 mov	 eax, DWORD PTR _usCoordX$[ebp]
  00006	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00009	66 89 81 84 00
	00 00		 mov	 WORD PTR [ecx+132], ax

; 1193 : 	m_wY = usCoordY;

  00010	8b 45 0c	 mov	 eax, DWORD PTR _usCoordY$[ebp]
  00013	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00016	66 89 81 86 00
	00 00		 mov	 WORD PTR [ecx+134], ax

; 1194 : }

  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
?SetCoordinate@CArea@@QAEXABG0@Z ENDP			; CArea::SetCoordinate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?Refresh@CArea@@QAEXXZ
_TEXT	SEGMENT
_this$1$ = -12						; size = 4
_this$1$ = -8						; size = 4
_this$1$ = -4						; size = 4
?Refresh@CArea@@QAEXXZ PROC				; CArea::Refresh, COMDAT
; _this$ = ecx

; 386  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00009	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  0000c	8d 53 1c	 lea	 edx, DWORD PTR [ebx+28]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 386  : {

  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	89 5d f8	 mov	 DWORD PTR _this$1$[ebp], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1762 :         auto& _My_data    = _Mypair._Myval2;

  00014	89 55 fc	 mov	 DWORD PTR _this$1$[ebp], edx

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00017	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  0001a	74 03		 je	 SHORT $LN48@Refresh

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  0001c	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN48@Refresh:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0001f	8b 43 28	 mov	 eax, DWORD PTR [ebx+40]
  00022	3b 43 2c	 cmp	 eax, DWORD PTR [ebx+44]
  00025	74 03		 je	 SHORT $LN51@Refresh

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00027	89 43 2c	 mov	 DWORD PTR [ebx+44], eax
$LN51@Refresh:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0002a	8b 43 34	 mov	 eax, DWORD PTR [ebx+52]
  0002d	3b 43 38	 cmp	 eax, DWORD PTR [ebx+56]
  00030	74 03		 je	 SHORT $LN54@Refresh

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00032	89 43 38	 mov	 DWORD PTR [ebx+56], eax
$LN54@Refresh:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00035	8b 43 40	 mov	 eax, DWORD PTR [ebx+64]
  00038	3b 43 44	 cmp	 eax, DWORD PTR [ebx+68]
  0003b	74 03		 je	 SHORT $LN57@Refresh

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  0003d	89 43 44	 mov	 DWORD PTR [ebx+68], eax
$LN57@Refresh:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00040	8b 43 4c	 mov	 eax, DWORD PTR [ebx+76]
  00043	3b 43 50	 cmp	 eax, DWORD PTR [ebx+80]
  00046	74 03		 je	 SHORT $LN60@Refresh

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00048	89 43 50	 mov	 DWORD PTR [ebx+80], eax
$LN60@Refresh:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0004b	8b 43 58	 mov	 eax, DWORD PTR [ebx+88]
  0004e	8d 7b 58	 lea	 edi, DWORD PTR [ebx+88]
  00051	89 7d f4	 mov	 DWORD PTR _this$1$[ebp], edi
  00054	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  00057	74 03		 je	 SHORT $LN63@Refresh

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00059	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN63@Refresh:

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0005c	8b 73 10	 mov	 esi, DWORD PTR [ebx+16]
  0005f	3b 73 14	 cmp	 esi, DWORD PTR [ebx+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 398  : 	for(it = m_ObjectInstanceVector.begin();it!=m_ObjectInstanceVector.end();++it)

  00062	0f 84 cb 01 00
	00		 je	 $LN3@Refresh
$LL132@Refresh:

; 399  : 	{
; 400  : 		TObjectInstance * pObjectInstance = *it;

  00068	8b 1e		 mov	 ebx, DWORD PTR [esi]

; 401  : 
; 402  : 
; 403  : 
; 404  : 		if (prt::PROPERTY_TYPE_TREE == pObjectInstance->dwType)

  0006a	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0006d	83 f8 01	 cmp	 eax, 1
  00070	75 43		 jne	 SHORT $LN5@Refresh

; 405  : 		{
; 406  : 
; 407  : 			if (pObjectInstance->pTree)

  00072	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  00075	83 c3 0c	 add	 ebx, 12			; 0000000cH
  00078	85 c9		 test	 ecx, ecx
  0007a	0f 84 a4 01 00
	00		 je	 $LN2@Refresh
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  00080	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00083	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  00086	74 08		 je	 SHORT $LN37@Refresh

; 797  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00088	89 08		 mov	 DWORD PTR [eax], ecx

; 798  :         } else {
; 799  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 800  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 801  :             _ASAN_VECTOR_RELEASE_GUARD;
; 802  :         }
; 803  : 
; 804  :         _Orphan_range(_Mylast, _Mylast);
; 805  :         _Ty& _Result = *_Mylast;
; 806  :         ++_Mylast;

  0008a	83 42 04 04	 add	 DWORD PTR [edx+4], 4

; 782  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  0008e	eb 09		 jmp	 SHORT $LN36@Refresh
$LN37@Refresh:

; 783  :         }
; 784  : 
; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00090	53		 push	 ebx
  00091	50		 push	 eax
  00092	8b ca		 mov	 ecx, edx
  00094	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCSpeedTreeWrapper@@@?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@AAEPAPAVCSpeedTreeWrapper@@QAPAV2@ABQAV2@@Z ; std::vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >::_Emplace_reallocate<CSpeedTreeWrapper * const &>
$LN36@Refresh:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 411  : 				pfPosition = pObjectInstance->pTree->GetPosition();

  00099	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0009b	e8 00 00 00 00	 call	 ?GetPosition@CSpeedTreeWrapper@@QAEPBMXZ ; CSpeedTreeWrapper::GetPosition

; 412  : 				pObjectInstance->pTree->UpdateBoundingSphere();

  000a0	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000a2	e8 00 00 00 00	 call	 ?UpdateBoundingSphere@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::UpdateBoundingSphere

; 413  : 				pObjectInstance->pTree->UpdateCollisionData();

  000a7	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000a9	6a 00		 push	 0
  000ab	e8 00 00 00 00	 call	 ?UpdateCollisionData@CGraphicObjectInstance@@QAEXPBV?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@@Z ; CGraphicObjectInstance::UpdateCollisionData

; 414  : 			}
; 415  : 		}

  000b0	e9 6c 01 00 00	 jmp	 $LN133@Refresh
$LN5@Refresh:

; 416  : 		else if (prt::PROPERTY_TYPE_BUILDING == pObjectInstance->dwType)

  000b5	83 f8 02	 cmp	 eax, 2
  000b8	0f 85 bd 00 00
	00		 jne	 $LN8@Refresh

; 417  : 		{
; 418  : 
; 419  : 			pObjectInstance->pThingInstance->Update();

  000be	8b 4b 14	 mov	 ecx, DWORD PTR [ebx+20]
  000c1	8d 7b 14	 lea	 edi, DWORD PTR [ebx+20]
  000c4	e8 00 00 00 00	 call	 ?Update@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::Update

; 420  : 			pObjectInstance->pThingInstance->Transform();

  000c9	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000cb	e8 00 00 00 00	 call	 ?Transform@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::Transform

; 421  : 			pObjectInstance->pThingInstance->Show();

  000d0	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000d2	e8 00 00 00 00	 call	 ?Show@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::Show

; 422  : 			pObjectInstance->pThingInstance->DeformAll();

  000d7	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000d9	e8 00 00 00 00	 call	 ?DeformAll@CGraphicThingInstance@@QAEXXZ ; CGraphicThingInstance::DeformAll
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  000de	8b 55 f8	 mov	 edx, DWORD PTR _this$1$[ebp]
  000e1	8b 4a 2c	 mov	 ecx, DWORD PTR [edx+44]
  000e4	3b 4a 30	 cmp	 ecx, DWORD PTR [edx+48]
  000e7	74 0a		 je	 SHORT $LN44@Refresh

; 797  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  000e9	8b 07		 mov	 eax, DWORD PTR [edi]
  000eb	89 01		 mov	 DWORD PTR [ecx], eax

; 798  :         } else {
; 799  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 800  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 801  :             _ASAN_VECTOR_RELEASE_GUARD;
; 802  :         }
; 803  : 
; 804  :         _Orphan_range(_Mylast, _Mylast);
; 805  :         _Ty& _Result = *_Mylast;
; 806  :         ++_Mylast;

  000ed	83 42 2c 04	 add	 DWORD PTR [edx+44], 4

; 782  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  000f1	eb 0a		 jmp	 SHORT $LN43@Refresh
$LN44@Refresh:

; 783  :         }
; 784  : 
; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  000f3	57		 push	 edi
  000f4	51		 push	 ecx
  000f5	8d 4a 28	 lea	 ecx, DWORD PTR [edx+40]
  000f8	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCGraphicThingInstance@@@?$vector@PAVCGraphicThingInstance@@V?$allocator@PAVCGraphicThingInstance@@@std@@@std@@AAEPAPAVCGraphicThingInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CGraphicThingInstance *,std::allocator<CGraphicThingInstance *> >::_Emplace_reallocate<CGraphicThingInstance * const &>
$LN43@Refresh:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 425  : 			pObjectInstance->pThingInstance->BuildBoundingSphere();

  000fd	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000ff	e8 00 00 00 00	 call	 ?BuildBoundingSphere@CGraphicThingInstance@@QAEXXZ ; CGraphicThingInstance::BuildBoundingSphere

; 426  : 			pObjectInstance->pThingInstance->UpdateBoundingSphere();

  00104	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00106	e8 00 00 00 00	 call	 ?UpdateBoundingSphere@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::UpdateBoundingSphere

; 427  : 
; 428  : 			if (pObjectInstance->pThingInstance->IsMotionThing())

  0010b	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0010d	e8 00 00 00 00	 call	 ?IsMotionThing@CGraphicThingInstance@@QAE_NXZ ; CGraphicThingInstance::IsMotionThing
  00112	84 c0		 test	 al, al
  00114	74 3a		 je	 SHORT $LN10@Refresh
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  00116	8b 55 f8	 mov	 edx, DWORD PTR _this$1$[ebp]
  00119	8b 4a 44	 mov	 ecx, DWORD PTR [edx+68]
  0011c	3b 4a 48	 cmp	 ecx, DWORD PTR [edx+72]
  0011f	74 0a		 je	 SHORT $LN79@Refresh

; 797  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00121	8b 07		 mov	 eax, DWORD PTR [edi]
  00123	89 01		 mov	 DWORD PTR [ecx], eax

; 798  :         } else {
; 799  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 800  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 801  :             _ASAN_VECTOR_RELEASE_GUARD;
; 802  :         }
; 803  : 
; 804  :         _Orphan_range(_Mylast, _Mylast);
; 805  :         _Ty& _Result = *_Mylast;
; 806  :         ++_Mylast;

  00125	83 42 44 04	 add	 DWORD PTR [edx+68], 4

; 782  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00129	eb 0a		 jmp	 SHORT $LN78@Refresh
$LN79@Refresh:

; 783  :         }
; 784  : 
; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0012b	57		 push	 edi
  0012c	51		 push	 ecx
  0012d	8d 4a 40	 lea	 ecx, DWORD PTR [edx+64]
  00130	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCGraphicThingInstance@@@?$vector@PAVCGraphicThingInstance@@V?$allocator@PAVCGraphicThingInstance@@@std@@@std@@AAEPAPAVCGraphicThingInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CGraphicThingInstance *,std::allocator<CGraphicThingInstance *> >::_Emplace_reallocate<CGraphicThingInstance * const &>
$LN78@Refresh:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 431  : 				pObjectInstance->pThingInstance->SetMotion(0);

  00135	51		 push	 ecx
  00136	c7 04 24 00 00
	80 3f		 mov	 DWORD PTR [esp], 1065353216 ; 3f800000H
  0013d	6a 00		 push	 0
  0013f	51		 push	 ecx
  00140	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00142	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  00149	6a 00		 push	 0
  0014b	e8 00 00 00 00	 call	 ?SetMotion@CGraphicThingInstance@@QAE_NKMHM@Z ; CGraphicThingInstance::SetMotion
$LN10@Refresh:

; 432  : 			}
; 433  : 
; 434  : 			if (pObjectInstance->isShadowFlag)

  00150	83 7b 10 00	 cmp	 DWORD PTR [ebx+16], 0
  00154	0f 84 8f 00 00
	00		 je	 $LN99@Refresh
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  0015a	8b 55 f8	 mov	 edx, DWORD PTR _this$1$[ebp]
  0015d	8b 4a 50	 mov	 ecx, DWORD PTR [edx+80]
  00160	3b 4a 54	 cmp	 ecx, DWORD PTR [edx+84]
  00163	74 0a		 je	 SHORT $LN86@Refresh

; 797  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00165	8b 07		 mov	 eax, DWORD PTR [edi]
  00167	89 01		 mov	 DWORD PTR [ecx], eax

; 798  :         } else {
; 799  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 800  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 801  :             _ASAN_VECTOR_RELEASE_GUARD;
; 802  :         }
; 803  : 
; 804  :         _Orphan_range(_Mylast, _Mylast);
; 805  :         _Ty& _Result = *_Mylast;
; 806  :         ++_Mylast;

  00169	83 42 50 04	 add	 DWORD PTR [edx+80], 4

; 782  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  0016d	eb 7a		 jmp	 SHORT $LN99@Refresh
$LN86@Refresh:

; 783  :         }
; 784  : 
; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0016f	57		 push	 edi
  00170	51		 push	 ecx
  00171	8d 4a 4c	 lea	 ecx, DWORD PTR [edx+76]
  00174	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCGraphicThingInstance@@@?$vector@PAVCGraphicThingInstance@@V?$allocator@PAVCGraphicThingInstance@@@std@@@std@@AAEPAPAVCGraphicThingInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CGraphicThingInstance *,std::allocator<CGraphicThingInstance *> >::_Emplace_reallocate<CGraphicThingInstance * const &>
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 445  : 		}

  00179	eb 6e		 jmp	 SHORT $LN99@Refresh
$LN8@Refresh:

; 446  : 		else if (prt::PROPERTY_TYPE_EFFECT == pObjectInstance->dwType)

  0017b	83 f8 03	 cmp	 eax, 3
  0017e	0f 84 a0 00 00
	00		 je	 $LN2@Refresh

; 447  : 		{
; 448  : 		}
; 449  : 		else if (prt::PROPERTY_TYPE_AMBIENCE == pObjectInstance->dwType)

  00184	83 f8 04	 cmp	 eax, 4
  00187	75 23		 jne	 SHORT $LN15@Refresh
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  00189	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 451  : 			m_AmbienceCloneInstanceVector.push_back(pObjectInstance->pAmbienceInstance);

  0018c	83 c3 20	 add	 ebx, 32			; 00000020H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  0018f	3b 4f 08	 cmp	 ecx, DWORD PTR [edi+8]
  00192	74 0d		 je	 SHORT $LN93@Refresh

; 797  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00194	8b 03		 mov	 eax, DWORD PTR [ebx]
  00196	89 01		 mov	 DWORD PTR [ecx], eax

; 798  :         } else {
; 799  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 800  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 801  :             _ASAN_VECTOR_RELEASE_GUARD;
; 802  :         }
; 803  : 
; 804  :         _Orphan_range(_Mylast, _Mylast);
; 805  :         _Ty& _Result = *_Mylast;
; 806  :         ++_Mylast;

  00198	83 47 04 04	 add	 DWORD PTR [edi+4], 4

; 782  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  0019c	e9 83 00 00 00	 jmp	 $LN2@Refresh
$LN93@Refresh:

; 783  :         }
; 784  : 
; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  001a1	53		 push	 ebx
  001a2	51		 push	 ecx
  001a3	8b cf		 mov	 ecx, edi
  001a5	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAUSAmbienceInstance@CArea@@@?$vector@PAUSAmbienceInstance@CArea@@V?$allocator@PAUSAmbienceInstance@CArea@@@std@@@std@@AAEPAPAUSAmbienceInstance@CArea@@QAPAU23@ABQAU23@@Z ; std::vector<CArea::SAmbienceInstance *,std::allocator<CArea::SAmbienceInstance *> >::_Emplace_reallocate<CArea::SAmbienceInstance * const &>
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 452  : 		}

  001aa	eb 75		 jmp	 SHORT $LN133@Refresh
$LN15@Refresh:

; 453  : 		else if (prt::PROPERTY_TYPE_DUNGEON_BLOCK == pObjectInstance->dwType)

  001ac	83 f8 05	 cmp	 eax, 5
  001af	75 73		 jne	 SHORT $LN2@Refresh

; 454  : 		{
; 455  : 
; 456  : 			pObjectInstance->pDungeonBlock->Update();

  001b1	8b 4b 24	 mov	 ecx, DWORD PTR [ebx+36]
  001b4	8d 7b 24	 lea	 edi, DWORD PTR [ebx+36]
  001b7	e8 00 00 00 00	 call	 ?Update@CDungeonBlock@@QAEXXZ ; CDungeonBlock::Update

; 457  : 			pObjectInstance->pDungeonBlock->Deform();

  001bc	8b 0f		 mov	 ecx, DWORD PTR [edi]
  001be	e8 00 00 00 00	 call	 ?Deform@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::Deform

; 458  : 			pObjectInstance->pDungeonBlock->UpdateBoundingSphere();

  001c3	8b 0f		 mov	 ecx, DWORD PTR [edi]
  001c5	e8 00 00 00 00	 call	 ?UpdateBoundingSphere@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::UpdateBoundingSphere
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  001ca	8b 55 f8	 mov	 edx, DWORD PTR _this$1$[ebp]
  001cd	8b 4a 38	 mov	 ecx, DWORD PTR [edx+56]
  001d0	3b 4a 3c	 cmp	 ecx, DWORD PTR [edx+60]
  001d3	74 0a		 je	 SHORT $LN100@Refresh

; 797  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  001d5	8b 07		 mov	 eax, DWORD PTR [edi]
  001d7	89 01		 mov	 DWORD PTR [ecx], eax

; 798  :         } else {
; 799  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 800  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 801  :             _ASAN_VECTOR_RELEASE_GUARD;
; 802  :         }
; 803  : 
; 804  :         _Orphan_range(_Mylast, _Mylast);
; 805  :         _Ty& _Result = *_Mylast;
; 806  :         ++_Mylast;

  001d9	83 42 38 04	 add	 DWORD PTR [edx+56], 4

; 782  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  001dd	eb 0a		 jmp	 SHORT $LN99@Refresh
$LN100@Refresh:

; 783  :         }
; 784  : 
; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  001df	57		 push	 edi
  001e0	51		 push	 ecx
  001e1	8d 4a 34	 lea	 ecx, DWORD PTR [edx+52]
  001e4	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCDungeonBlock@@@?$vector@PAVCDungeonBlock@@V?$allocator@PAVCDungeonBlock@@@std@@@std@@AAEPAPAVCDungeonBlock@@QAPAV2@ABQAV2@@Z ; std::vector<CDungeonBlock *,std::allocator<CDungeonBlock *> >::_Emplace_reallocate<CDungeonBlock * const &>
$LN99@Refresh:

; 79   :         ++_Ptr;

  001e9	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  001ec	85 c9		 test	 ecx, ecx
  001ee	74 2e		 je	 SHORT $LN109@Refresh
  001f0	e8 00 00 00 00	 call	 ?GetObjectPointer@CAttributeInstance@@QBEPAVCAttributeData@@XZ ; CAttributeInstance::GetObjectPointer
  001f5	8b c8		 mov	 ecx, eax
  001f7	e8 00 00 00 00	 call	 ?GetCollisionDataVector@CAttributeData@@QBEABV?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@XZ ; CAttributeData::GetCollisionDataVector
  001fc	8b 0f		 mov	 ecx, DWORD PTR [edi]
  001fe	50		 push	 eax
  001ff	e8 00 00 00 00	 call	 ?UpdateCollisionData@CGraphicObjectInstance@@QAEXPBV?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@@Z ; CGraphicObjectInstance::UpdateCollisionData
  00204	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00206	e8 00 00 00 00	 call	 ?GetTransform@CGraphicObjectInstance@@QAEAAUD3DXMATRIX@@XZ ; CGraphicObjectInstance::GetTransform
  0020b	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  0020e	50		 push	 eax
  0020f	e8 00 00 00 00	 call	 ?RefreshObject@CAttributeInstance@@QAEXABUD3DXMATRIX@@@Z ; CAttributeInstance::RefreshObject
  00214	ff 73 08	 push	 DWORD PTR [ebx+8]
  00217	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00219	e8 00 00 00 00	 call	 ?UpdateHeightInstance@CGraphicObjectInstance@@QAEXPAVCAttributeInstance@@@Z ; CGraphicObjectInstance::UpdateHeightInstance
$LN109@Refresh:
  0021e	8b 7d f4	 mov	 edi, DWORD PTR _this$1$[ebp]
$LN133@Refresh:
  00221	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
$LN2@Refresh:

; 163  :         return _Ptr == _Right._Ptr;

  00224	8b 45 f8	 mov	 eax, DWORD PTR _this$1$[ebp]

; 79   :         ++_Ptr;

  00227	83 c6 04	 add	 esi, 4

; 163  :         return _Ptr == _Right._Ptr;

  0022a	3b 70 14	 cmp	 esi, DWORD PTR [eax+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 398  : 	for(it = m_ObjectInstanceVector.begin();it!=m_ObjectInstanceVector.end();++it)

  0022d	0f 85 35 fe ff
	ff		 jne	 $LL132@Refresh
$LN3@Refresh:
  00233	5f		 pop	 edi

; 459  : 			m_DungeonBlockCloneInstanceVector.push_back(pObjectInstance->pDungeonBlock);
; 460  : 
; 461  : 			if (pObjectInstance->pAttributeInstance)
; 462  : 			{
; 463  : 				pObjectInstance->pDungeonBlock->UpdateCollisionData(&pObjectInstance->pAttributeInstance->GetObjectPointer()->GetCollisionDataVector());
; 464  :   				pObjectInstance->pAttributeInstance->RefreshObject(pObjectInstance->pDungeonBlock->GetTransform());
; 465  : 				pObjectInstance->pDungeonBlock->UpdateHeightInstance(pObjectInstance->pAttributeInstance);
; 466  : 			}
; 467  : 		}
; 468  : 	}
; 469  : }

  00234	5e		 pop	 esi
  00235	5b		 pop	 ebx
  00236	8b e5		 mov	 esp, ebp
  00238	5d		 pop	 ebp
  00239	c3		 ret	 0
?Refresh@CArea@@QAEXXZ ENDP				; CArea::Refresh
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?RenderDungeon@CArea@@QAEXXZ
_TEXT	SEGMENT
?RenderDungeon@CArea@@QAEXXZ PROC			; CArea::RenderDungeon, COMDAT
; _this$ = ecx

; 328  : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 329  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG1,	D3DTA_TEXTURE);

  00002	6a 02		 push	 2
  00004	6a 02		 push	 2
  00006	8b f9		 mov	 edi, ecx
  00008	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0000e	6a 00		 push	 0
  00010	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 330  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP,	D3DTOP_SELECTARG1);

  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0001b	6a 02		 push	 2
  0001d	6a 01		 push	 1
  0001f	6a 00		 push	 0
  00021	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 331  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAARG1,	D3DTA_TEXTURE);

  00026	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0002c	6a 02		 push	 2
  0002e	6a 05		 push	 5
  00030	6a 00		 push	 0
  00032	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 332  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP,	D3DTOP_SELECTARG1);

  00037	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0003d	6a 02		 push	 2
  0003f	6a 01		 push	 1
  00041	6a 00		 push	 0
  00043	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 333  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_COLORARG1,	D3DTA_TEXTURE);

  00048	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0004e	6a 02		 push	 2
  00050	6a 02		 push	 2
  00052	6a 01		 push	 1
  00054	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 334  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_COLORARG2,	D3DTA_CURRENT);

  00059	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0005f	6a 01		 push	 1
  00061	6a 03		 push	 3
  00063	6a 01		 push	 1
  00065	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 335  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_COLOROP,	D3DTOP_MODULATE);

  0006a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00070	6a 04		 push	 4
  00072	6a 01		 push	 1
  00074	6a 01		 push	 1
  00076	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 336  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_ALPHAARG1,	D3DTA_TEXTURE);

  0007b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00081	6a 02		 push	 2
  00083	6a 05		 push	 5
  00085	6a 01		 push	 1
  00087	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 337  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_ALPHAARG2,	D3DTA_CURRENT);

  0008c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00092	6a 01		 push	 1
  00094	6a 06		 push	 6
  00096	6a 01		 push	 1
  00098	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 338  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_ALPHAOP,	D3DTOP_MODULATE);

  0009d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000a3	6a 04		 push	 4
  000a5	6a 04		 push	 4
  000a7	6a 01		 push	 1
  000a9	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  000ae	8b 77 34	 mov	 esi, DWORD PTR [edi+52]
  000b1	3b 77 38	 cmp	 esi, DWORD PTR [edi+56]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 368  : 	for (; itor != m_DungeonBlockCloneInstanceVector.end(); ++itor)

  000b4	74 0f		 je	 SHORT $LN3@RenderDung
$LL19@RenderDung:

; 369  : 	{
; 370  : 		(*itor)->Render();

  000b6	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000b8	e8 00 00 00 00	 call	 ?Render@CDungeonBlock@@QAEXXZ ; CDungeonBlock::Render
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 79   :         ++_Ptr;

  000bd	83 c6 04	 add	 esi, 4

; 163  :         return _Ptr == _Right._Ptr;

  000c0	3b 77 38	 cmp	 esi, DWORD PTR [edi+56]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 368  : 	for (; itor != m_DungeonBlockCloneInstanceVector.end(); ++itor)

  000c3	75 f1		 jne	 SHORT $LL19@RenderDung
$LN3@RenderDung:

; 371  : 	}
; 372  : 
; 373  : #ifdef WORLD_EDITOR
; 374  : 	if (bRenderTransparent)
; 375  : 	{
; 376  : 		STATEMANAGER.SetRenderState(D3DRS_ZWRITEENABLE, oldZWriteenableState);
; 377  : 		STATEMANAGER.SetRenderState(D3DRS_ALPHABLENDENABLE, oldAlphaBlendState);
; 378  : 	}
; 379  : #endif
; 380  : 
; 381  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_COLOROP,	D3DTOP_DISABLE);

  000c5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000cb	6a 01		 push	 1
  000cd	6a 01		 push	 1
  000cf	6a 01		 push	 1
  000d1	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 382  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_ALPHAOP,	D3DTOP_DISABLE);

  000d6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000dc	6a 01		 push	 1
  000de	6a 04		 push	 4
  000e0	6a 01		 push	 1
  000e2	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState
  000e7	5f		 pop	 edi
  000e8	5e		 pop	 esi

; 383  : }

  000e9	c3		 ret	 0
?RenderDungeon@CArea@@QAEXXZ ENDP			; CArea::RenderDungeon
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?RenderAmbience@CArea@@QAEXXZ
_TEXT	SEGMENT
_dwColorOp$ = -8					; size = 4
_dwColorArg1$ = -4					; size = 4
?RenderAmbience@CArea@@QAEXXZ PROC			; CArea::RenderAmbience, COMDAT
; _this$ = ecx

; 311  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 312  : 	DWORD dwColorArg1, dwColorOp;
; 313  : 	STATEMANAGER.GetTextureStageState(0, D3DTSS_COLORARG1, &dwColorArg1);

  00006	8d 45 fc	 lea	 eax, DWORD PTR _dwColorArg1$[ebp]
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	50		 push	 eax
  0000c	6a 02		 push	 2
  0000e	8b f9		 mov	 edi, ecx
  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00016	6a 00		 push	 0
  00018	e8 00 00 00 00	 call	 ?GetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@PAK@Z ; CStateManager::GetTextureStageState

; 314  : 	STATEMANAGER.GetTextureStageState(0, D3DTSS_COLOROP, &dwColorOp);

  0001d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00023	8d 45 f8	 lea	 eax, DWORD PTR _dwColorOp$[ebp]
  00026	50		 push	 eax
  00027	6a 01		 push	 1
  00029	6a 00		 push	 0
  0002b	e8 00 00 00 00	 call	 ?GetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@PAK@Z ; CStateManager::GetTextureStageState

; 315  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_TFACTOR);

  00030	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00036	6a 03		 push	 3
  00038	6a 02		 push	 2
  0003a	6a 00		 push	 0
  0003c	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 316  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP, D3DTOP_SELECTARG1);

  00041	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00047	6a 02		 push	 2
  00049	6a 01		 push	 1
  0004b	6a 00		 push	 0
  0004d	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00052	8b 77 58	 mov	 esi, DWORD PTR [edi+88]
  00055	3b 77 5c	 cmp	 esi, DWORD PTR [edi+92]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 318  : 	for (; itor != m_AmbienceCloneInstanceVector.end(); ++itor)

  00058	74 15		 je	 SHORT $LN3@RenderAmbi
  0005a	66 0f 1f 44 00
	00		 npad	 6
$LL19@RenderAmbi:

; 319  : 	{
; 320  : 		TAmbienceInstance * pInstance = *itor;
; 321  : 		pInstance->Render();

  00060	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00062	e8 00 00 00 00	 call	 ?Render@SAmbienceInstance@CArea@@QAEXXZ ; CArea::SAmbienceInstance::Render
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 79   :         ++_Ptr;

  00067	83 c6 04	 add	 esi, 4

; 163  :         return _Ptr == _Right._Ptr;

  0006a	3b 77 5c	 cmp	 esi, DWORD PTR [edi+92]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 318  : 	for (; itor != m_AmbienceCloneInstanceVector.end(); ++itor)

  0006d	75 f1		 jne	 SHORT $LL19@RenderAmbi
$LN3@RenderAmbi:

; 322  : 	}
; 323  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG1, dwColorArg1);

  0006f	ff 75 fc	 push	 DWORD PTR _dwColorArg1$[ebp]
  00072	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00078	6a 02		 push	 2
  0007a	6a 00		 push	 0
  0007c	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 324  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP, dwColorOp);

  00081	ff 75 f8	 push	 DWORD PTR _dwColorOp$[ebp]
  00084	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0008a	6a 01		 push	 1
  0008c	6a 00		 push	 0
  0008e	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState
  00093	5f		 pop	 edi
  00094	5e		 pop	 esi

; 325  : }

  00095	8b e5		 mov	 esp, ebp
  00097	5d		 pop	 ebp
  00098	c3		 ret	 0
?RenderAmbience@CArea@@QAEXXZ ENDP			; CArea::RenderAmbience
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?RenderCollision@CArea@@QAEXXZ
_TEXT	SEGMENT
_po$1 = -12						; size = 4
_i$ = -8						; size = 4
_this$1$ = -4						; size = 4
?RenderCollision@CArea@@QAEXXZ PROC			; CArea::RenderCollision, COMDAT
; _this$ = ecx

; 257  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 258  : 	DWORD i;
; 259  : 
; 260  : 	STATEMANAGER.SetTexture(0, NULL);

  00008	6a 00		 push	 0
  0000a	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00013	6a 00		 push	 0
  00015	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 261  : 	STATEMANAGER.SetTexture(1, NULL);

  0001a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00020	6a 00		 push	 0
  00022	6a 01		 push	 1
  00024	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 262  : 
; 263  : 	STATEMANAGER.SaveRenderState(D3DRS_ALPHABLENDENABLE, FALSE);

  00029	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0002f	6a 00		 push	 0
  00031	6a 1b		 push	 27			; 0000001bH
  00033	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 264  : 	STATEMANAGER.SaveRenderState(D3DRS_CULLMODE, D3DCULL_NONE);

  00038	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0003e	6a 01		 push	 1
  00040	6a 16		 push	 22			; 00000016H
  00042	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 265  : 	STATEMANAGER.SetRenderState(D3DRS_LIGHTING, FALSE);

  00047	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0004d	6a 00		 push	 0
  0004f	68 89 00 00 00	 push	 137			; 00000089H
  00054	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 266  : 	STATEMANAGER.SetRenderState(D3DRS_TEXTUREFACTOR, 0xff000000);

  00059	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0005f	68 00 00 00 ff	 push	 -16777216		; ff000000H
  00064	6a 3c		 push	 60			; 0000003cH
  00066	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 267  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG1,	D3DTA_TEXTURE);

  0006b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00071	6a 02		 push	 2
  00073	6a 02		 push	 2
  00075	6a 00		 push	 0
  00077	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 268  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP,	D3DTOP_SELECTARG1);

  0007c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00082	6a 02		 push	 2
  00084	6a 01		 push	 1
  00086	6a 00		 push	 0
  00088	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 269  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_DISABLE);

  0008d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00093	6a 01		 push	 1
  00095	6a 04		 push	 4
  00097	6a 00		 push	 0
  00099	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 270  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_COLOROP, D3DTOP_DISABLE);

  0009e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000a4	6a 01		 push	 1
  000a6	6a 01		 push	 1
  000a8	6a 01		 push	 1
  000aa	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 271  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_ALPHAOP, D3DTOP_DISABLE);

  000af	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000b5	6a 01		 push	 1
  000b7	6a 04		 push	 4
  000b9	6a 01		 push	 1
  000bb	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 272  : 
; 273  : 	for(i=0;i<GetObjectInstanceCount();i++)

  000c0	8b 75 fc	 mov	 esi, DWORD PTR _this$1$[ebp]
  000c3	33 db		 xor	 ebx, ebx
  000c5	8b ce		 mov	 ecx, esi
  000c7	89 5d f8	 mov	 DWORD PTR _i$[ebp], ebx
  000ca	e8 00 00 00 00	 call	 ?GetObjectInstanceCount@CArea@@QBE?BKXZ ; CArea::GetObjectInstanceCount
  000cf	85 c0		 test	 eax, eax
  000d1	0f 84 ef 00 00
	00		 je	 $LN3@RenderColl
  000d7	57		 push	 edi
$LL4@RenderColl:

; 274  : 	{
; 275  : 		const TObjectInstance * po;
; 276  : 		if (GetObjectInstancePointer(i,&po))

  000d8	8d 45 f4	 lea	 eax, DWORD PTR _po$1[ebp]
  000db	8b ce		 mov	 ecx, esi
  000dd	50		 push	 eax
  000de	8d 45 f8	 lea	 eax, DWORD PTR _i$[ebp]
  000e1	50		 push	 eax
  000e2	e8 00 00 00 00	 call	 ?GetObjectInstancePointer@CArea@@QBE?B_NABKPAPBUSObjectInstance@1@@Z ; CArea::GetObjectInstancePointer
  000e7	84 c0		 test	 al, al
  000e9	0f 84 bf 00 00
	00		 je	 $LN2@RenderColl

; 277  : 		{
; 278  : 			if (po->pTree && po->pTree->isShow())

  000ef	8b 7d f4	 mov	 edi, DWORD PTR _po$1[ebp]
  000f2	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  000f5	85 c9		 test	 ecx, ecx
  000f7	74 35		 je	 SHORT $LN6@RenderColl
  000f9	e8 00 00 00 00	 call	 ?isShow@CGraphicObjectInstance@@QAE_NXZ ; CGraphicObjectInstance::isShow
  000fe	84 c0		 test	 al, al
  00100	74 2c		 je	 SHORT $LN6@RenderColl

; 279  : 			{
; 280  : 				DWORD j;
; 281  : 				for(j=0;j<po->pTree->GetCollisionInstanceCount();j++)

  00102	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00105	33 f6		 xor	 esi, esi
  00107	e8 00 00 00 00	 call	 ?GetCollisionInstanceCount@CGraphicObjectInstance@@QAEKXZ ; CGraphicObjectInstance::GetCollisionInstanceCount
  0010c	85 c0		 test	 eax, eax
  0010e	74 1e		 je	 SHORT $LN6@RenderColl
$LL7@RenderColl:

; 282  : 				{
; 283  : 					po->pTree->GetCollisionInstanceData(j)->Render();

  00110	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00113	56		 push	 esi
  00114	e8 00 00 00 00	 call	 ?GetCollisionInstanceData@CGraphicObjectInstance@@QAEPAVCBaseCollisionInstance@@K@Z ; CGraphicObjectInstance::GetCollisionInstanceData
  00119	6a 03		 push	 3
  0011b	8b c8		 mov	 ecx, eax
  0011d	8b 10		 mov	 edx, DWORD PTR [eax]
  0011f	ff 12		 call	 DWORD PTR [edx]
  00121	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00124	46		 inc	 esi
  00125	e8 00 00 00 00	 call	 ?GetCollisionInstanceCount@CGraphicObjectInstance@@QAEKXZ ; CGraphicObjectInstance::GetCollisionInstanceCount
  0012a	3b f0		 cmp	 esi, eax
  0012c	72 e2		 jb	 SHORT $LL7@RenderColl
$LN6@RenderColl:

; 284  : 				}
; 285  : 			}
; 286  : 			if (po->pThingInstance && po->pThingInstance->isShow())

  0012e	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00131	85 c9		 test	 ecx, ecx
  00133	74 39		 je	 SHORT $LN9@RenderColl
  00135	e8 00 00 00 00	 call	 ?isShow@CGraphicObjectInstance@@QAE_NXZ ; CGraphicObjectInstance::isShow
  0013a	84 c0		 test	 al, al
  0013c	74 30		 je	 SHORT $LN9@RenderColl

; 287  : 			{
; 288  : 				DWORD j;
; 289  : 				for(j=0;j<po->pThingInstance->GetCollisionInstanceCount();j++)

  0013e	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00141	33 f6		 xor	 esi, esi
  00143	e8 00 00 00 00	 call	 ?GetCollisionInstanceCount@CGraphicObjectInstance@@QAEKXZ ; CGraphicObjectInstance::GetCollisionInstanceCount
  00148	85 c0		 test	 eax, eax
  0014a	74 22		 je	 SHORT $LN9@RenderColl
  0014c	0f 1f 40 00	 npad	 4
$LL10@RenderColl:

; 290  : 				{
; 291  : 					po->pThingInstance->GetCollisionInstanceData(j)->Render();

  00150	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00153	56		 push	 esi
  00154	e8 00 00 00 00	 call	 ?GetCollisionInstanceData@CGraphicObjectInstance@@QAEPAVCBaseCollisionInstance@@K@Z ; CGraphicObjectInstance::GetCollisionInstanceData
  00159	6a 03		 push	 3
  0015b	8b c8		 mov	 ecx, eax
  0015d	8b 10		 mov	 edx, DWORD PTR [eax]
  0015f	ff 12		 call	 DWORD PTR [edx]
  00161	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00164	46		 inc	 esi
  00165	e8 00 00 00 00	 call	 ?GetCollisionInstanceCount@CGraphicObjectInstance@@QAEKXZ ; CGraphicObjectInstance::GetCollisionInstanceCount
  0016a	3b f0		 cmp	 esi, eax
  0016c	72 e2		 jb	 SHORT $LL10@RenderColl
$LN9@RenderColl:

; 292  : 				}
; 293  : 			}
; 294  : 			if (po->pDungeonBlock && po->pDungeonBlock->isShow())

  0016e	8b 4f 24	 mov	 ecx, DWORD PTR [edi+36]
  00171	85 c9		 test	 ecx, ecx
  00173	74 39		 je	 SHORT $LN2@RenderColl
  00175	e8 00 00 00 00	 call	 ?isShow@CGraphicObjectInstance@@QAE_NXZ ; CGraphicObjectInstance::isShow
  0017a	84 c0		 test	 al, al
  0017c	74 30		 je	 SHORT $LN2@RenderColl

; 295  : 			{
; 296  : 				DWORD j;
; 297  : 				for(j=0;j<po->pDungeonBlock->GetCollisionInstanceCount();j++)

  0017e	8b 4f 24	 mov	 ecx, DWORD PTR [edi+36]
  00181	33 f6		 xor	 esi, esi
  00183	e8 00 00 00 00	 call	 ?GetCollisionInstanceCount@CGraphicObjectInstance@@QAEKXZ ; CGraphicObjectInstance::GetCollisionInstanceCount
  00188	85 c0		 test	 eax, eax
  0018a	74 22		 je	 SHORT $LN2@RenderColl
  0018c	0f 1f 40 00	 npad	 4
$LL13@RenderColl:

; 298  : 				{
; 299  : 					po->pDungeonBlock->GetCollisionInstanceData(j)->Render();

  00190	8b 4f 24	 mov	 ecx, DWORD PTR [edi+36]
  00193	56		 push	 esi
  00194	e8 00 00 00 00	 call	 ?GetCollisionInstanceData@CGraphicObjectInstance@@QAEPAVCBaseCollisionInstance@@K@Z ; CGraphicObjectInstance::GetCollisionInstanceData
  00199	6a 03		 push	 3
  0019b	8b c8		 mov	 ecx, eax
  0019d	8b 10		 mov	 edx, DWORD PTR [eax]
  0019f	ff 12		 call	 DWORD PTR [edx]
  001a1	8b 4f 24	 mov	 ecx, DWORD PTR [edi+36]
  001a4	46		 inc	 esi
  001a5	e8 00 00 00 00	 call	 ?GetCollisionInstanceCount@CGraphicObjectInstance@@QAEKXZ ; CGraphicObjectInstance::GetCollisionInstanceCount
  001aa	3b f0		 cmp	 esi, eax
  001ac	72 e2		 jb	 SHORT $LL13@RenderColl
$LN2@RenderColl:

; 272  : 
; 273  : 	for(i=0;i<GetObjectInstanceCount();i++)

  001ae	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  001b1	43		 inc	 ebx
  001b2	89 5d f8	 mov	 DWORD PTR _i$[ebp], ebx
  001b5	e8 00 00 00 00	 call	 ?GetObjectInstanceCount@CArea@@QBE?BKXZ ; CArea::GetObjectInstanceCount
  001ba	8b 75 fc	 mov	 esi, DWORD PTR _this$1$[ebp]
  001bd	3b d8		 cmp	 ebx, eax
  001bf	0f 82 13 ff ff
	ff		 jb	 $LL4@RenderColl
  001c5	5f		 pop	 edi
$LN3@RenderColl:

; 300  : 				}
; 301  : 			}
; 302  : 		}
; 303  : 	}
; 304  : 
; 305  : 	STATEMANAGER.RestoreRenderState(D3DRS_ALPHABLENDENABLE);

  001c6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001cc	6a 1b		 push	 27			; 0000001bH
  001ce	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 306  : 	STATEMANAGER.RestoreRenderState(D3DRS_CULLMODE);

  001d3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001d9	6a 16		 push	 22			; 00000016H
  001db	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 307  : 	STATEMANAGER.SetRenderState(D3DRS_LIGHTING, TRUE);

  001e0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001e6	6a 01		 push	 1
  001e8	68 89 00 00 00	 push	 137			; 00000089H
  001ed	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState
  001f2	5e		 pop	 esi
  001f3	5b		 pop	 ebx

; 308  : }

  001f4	8b e5		 mov	 esp, ebp
  001f6	5d		 pop	 ebp
  001f7	c3		 ret	 0
?RenderCollision@CArea@@QAEXXZ ENDP			; CArea::RenderCollision
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?RenderEffect@CArea@@QAEXXZ
_TEXT	SEGMENT
$T1 = -4						; size = 1
_i$2 = -4						; size = 4
?RenderEffect@CArea@@QAEXXZ PROC			; CArea::RenderEffect, COMDAT
; _this$ = ecx

; 133  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx

; 134  : 	__UpdateEffectList();

  00008	e8 00 00 00 00	 call	 ?__UpdateEffectList@CArea@@IAEXXZ ; CArea::__UpdateEffectList

; 135  : 
; 136  : 	// Effect
; 137  : 	STATEMANAGER.SetTexture(0, NULL);

  0000d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00013	6a 00		 push	 0
  00015	6a 00		 push	 0
  00017	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 138  : 	STATEMANAGER.SetTexture(1, NULL);

  0001c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00022	6a 00		 push	 0
  00024	6a 01		 push	 1
  00026	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 139  : 
; 140  : 	bool m_isDisableSortRendering=false;
; 141  : 
; 142  : 	if (m_isDisableSortRendering)
; 143  : 	{
; 144  : 		TEffectInstanceIterator i;
; 145  : 		for (i = m_EffectInstanceMap.begin(); i != m_EffectInstanceMap.end();)
; 146  : 		{
; 147  : 			CEffectInstance * pEffectInstance = i->second;
; 148  : 			pEffectInstance->Render();
; 149  : 			++i;
; 150  : 		}
; 151  : 	}
; 152  : 	else
; 153  : 	{
; 154  : 		static std::vector<CEffectInstance*> s_kVct_pkEftInstSort;

  0002b	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  00031	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __tls_index
  00037	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  0003a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?8??RenderEffect@CArea@@QAEXXZ@4HA
  0003f	3b 81 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[ecx]
  00045	0f 8f ab 00 00
	00		 jg	 $LN155@RenderEffe
$LN5@RenderEffe:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0004b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?s_kVct_pkEftInstSort@?8??RenderEffect@CArea@@QAEXXZ@4V?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@A
  00051	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?s_kVct_pkEftInstSort@?8??RenderEffect@CArea@@QAEXXZ@4V?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@A+4
  00057	3b d6		 cmp	 edx, esi
  00059	74 08		 je	 SHORT $LN112@RenderEffe

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  0005b	8b f2		 mov	 esi, edx
  0005d	89 35 04 00 00
	00		 mov	 DWORD PTR ?s_kVct_pkEftInstSort@?8??RenderEffect@CArea@@QAEXXZ@4V?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@A+4, esi
$LN112@RenderEffe:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1127 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00063	8b 8f 8c 00 00
	00		 mov	 ecx, DWORD PTR [edi+140]

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00069	8b 01		 mov	 eax, DWORD PTR [ecx]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 159  : 		for (i=rkMap_pkEftInstSrc.begin(); i!=rkMap_pkEftInstSrc.end(); ++i)

  0006b	89 45 fc	 mov	 DWORD PTR _i$2[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0006e	3b c1		 cmp	 eax, ecx
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 159  : 		for (i=rkMap_pkEftInstSrc.begin(); i!=rkMap_pkEftInstSrc.end(); ++i)

  00070	74 4b		 je	 SHORT $LN7@RenderEffe
$LL49@RenderEffe:

; 160  : 			s_kVct_pkEftInstSort.push_back(i->second);

  00072	83 c0 14	 add	 eax, 20			; 00000014H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  00075	3b 35 08 00 00
	00		 cmp	 esi, DWORD PTR ?s_kVct_pkEftInstSort@?8??RenderEffect@CArea@@QAEXXZ@4V?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@A+8
  0007b	74 15		 je	 SHORT $LN59@RenderEffe

; 797  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  0007d	8b 00		 mov	 eax, DWORD PTR [eax]
  0007f	89 06		 mov	 DWORD PTR [esi], eax

; 798  :         } else {
; 799  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 800  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 801  :             _ASAN_VECTOR_RELEASE_GUARD;
; 802  :         }
; 803  : 
; 804  :         _Orphan_range(_Mylast, _Mylast);
; 805  :         _Ty& _Result = *_Mylast;
; 806  :         ++_Mylast;

  00081	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?s_kVct_pkEftInstSort@?8??RenderEffect@CArea@@QAEXXZ@4V?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@A+4
  00087	83 c6 04	 add	 esi, 4
  0008a	89 35 04 00 00
	00		 mov	 DWORD PTR ?s_kVct_pkEftInstSort@?8??RenderEffect@CArea@@QAEXXZ@4V?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@A+4, esi

; 782  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00090	eb 12		 jmp	 SHORT $LN6@RenderEffe
$LN59@RenderEffe:

; 783  :         }
; 784  : 
; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00092	50		 push	 eax
  00093	56		 push	 esi
  00094	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kVct_pkEftInstSort@?8??RenderEffect@CArea@@QAEXXZ@4V?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@A
  00099	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCEffectInstance@@@?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@AAEPAPAVCEffectInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CEffectInstance *,std::allocator<CEffectInstance *> >::_Emplace_reallocate<CEffectInstance * const &>
  0009e	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?s_kVct_pkEftInstSort@?8??RenderEffect@CArea@@QAEXXZ@4V?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@A+4
$LN6@RenderEffe:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 199  :         _Mybase::operator++();

  000a4	8d 4d fc	 lea	 ecx, DWORD PTR _i$2[ebp]
  000a7	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >,std::_Iterator_base0>::operator++

; 233  :         return this->_Ptr == _Right._Ptr;

  000ac	8b 45 fc	 mov	 eax, DWORD PTR _i$2[ebp]
  000af	3b 87 8c 00 00
	00		 cmp	 eax, DWORD PTR [edi+140]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 159  : 		for (i=rkMap_pkEftInstSrc.begin(); i!=rkMap_pkEftInstSrc.end(); ++i)

  000b5	75 bb		 jne	 SHORT $LL49@RenderEffe
  000b7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?s_kVct_pkEftInstSort@?8??RenderEffect@CArea@@QAEXXZ@4V?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@A
$LN7@RenderEffe:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8067 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

  000bd	ff 75 fc	 push	 DWORD PTR $T1[ebp]
  000c0	8b c6		 mov	 eax, esi
  000c2	2b c2		 sub	 eax, edx
  000c4	c1 f8 02	 sar	 eax, 2
  000c7	50		 push	 eax
  000c8	56		 push	 esi
  000c9	52		 push	 edx
  000ca	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAPAVCEffectInstance@@UCArea_LessEffectInstancePtrRenderOrder@@@std@@YAXPAPAVCEffectInstance@@0HUCArea_LessEffectInstancePtrRenderOrder@@@Z ; std::_Sort_unchecked<CEffectInstance * *,CArea_LessEffectInstancePtrRenderOrder>

; 243  :     auto _UFirst      = _Get_unwrapped(_First);

  000cf	8b 3d 04 00 00
	00		 mov	 edi, DWORD PTR ?s_kVct_pkEftInstSort@?8??RenderEffect@CArea@@QAEXXZ@4V?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@A+4

; 8067 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

  000d5	83 c4 10	 add	 esp, 16			; 00000010H

; 243  :     auto _UFirst      = _Get_unwrapped(_First);

  000d8	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?s_kVct_pkEftInstSort@?8??RenderEffect@CArea@@QAEXXZ@4V?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@A
  000de	3b f7		 cmp	 esi, edi

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  000e0	74 0e		 je	 SHORT $LN91@RenderEffe
$LL92@RenderEffe:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 128  : 		pkEftInst->Render();

  000e2	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000e4	e8 00 00 00 00	 call	 ?Render@CGraphicObjectInstance@@QAE_NXZ ; CGraphicObjectInstance::Render
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  000e9	83 c6 04	 add	 esi, 4
  000ec	3b f7		 cmp	 esi, edi
  000ee	75 f2		 jne	 SHORT $LL92@RenderEffe
$LN91@RenderEffe:
  000f0	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 166  : }

  000f1	5e		 pop	 esi
  000f2	8b e5		 mov	 esp, ebp
  000f4	5d		 pop	 ebp
  000f5	c3		 ret	 0
$LN155@RenderEffe:

; 139  : 
; 140  : 	bool m_isDisableSortRendering=false;
; 141  : 
; 142  : 	if (m_isDisableSortRendering)
; 143  : 	{
; 144  : 		TEffectInstanceIterator i;
; 145  : 		for (i = m_EffectInstanceMap.begin(); i != m_EffectInstanceMap.end();)
; 146  : 		{
; 147  : 			CEffectInstance * pEffectInstance = i->second;
; 148  : 			pEffectInstance->Render();
; 149  : 			++i;
; 150  : 		}
; 151  : 	}
; 152  : 	else
; 153  : 	{
; 154  : 		static std::vector<CEffectInstance*> s_kVct_pkEftInstSort;

  000f6	68 00 00 00 00	 push	 OFFSET ?$TSS0@?8??RenderEffect@CArea@@QAEXXZ@4HA
  000fb	e8 00 00 00 00	 call	 __Init_thread_header
  00100	83 c4 04	 add	 esp, 4
  00103	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?8??RenderEffect@CArea@@QAEXXZ@4HA, -1
  0010a	0f 85 3b ff ff
	ff		 jne	 $LN5@RenderEffe
  00110	68 00 00 00 00	 push	 OFFSET ??__Fs_kVct_pkEftInstSort@?8??RenderEffect@CArea@@QAEXXZ@YAXXZ ; `CArea::RenderEffect'::`9'::`dynamic atexit destructor for 's_kVct_pkEftInstSort''
  00115	e8 00 00 00 00	 call	 _atexit
  0011a	68 00 00 00 00	 push	 OFFSET ?$TSS0@?8??RenderEffect@CArea@@QAEXXZ@4HA
  0011f	e8 00 00 00 00	 call	 __Init_thread_footer
  00124	83 c4 08	 add	 esp, 8
  00127	e9 1f ff ff ff	 jmp	 $LN5@RenderEffe
?RenderEffect@CArea@@QAEXXZ ENDP			; CArea::RenderEffect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?Render@CArea@@QAEXXZ
_TEXT	SEGMENT
__Loc$1 = -40						; size = 12
_aCRCWithNumber$2 = -28					; size = 8
_this$1$ = -20						; size = 4
$T3 = -20						; size = 1
_this$1$ = -16						; size = 4
_this$1$ = -12						; size = 4
_pkThingInst$ = -8					; size = 4
_this$1$ = -4						; size = 4
?Render@CArea@@QAEXXZ PROC				; CArea::Render, COMDAT
; _this$ = ecx

; 206  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
  00009	56		 push	 esi
  0000a	89 5d fc	 mov	 DWORD PTR _this$1$[ebp], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000d	8b 73 40	 mov	 esi, DWORD PTR [ebx+64]
  00010	3b 73 44	 cmp	 esi, DWORD PTR [ebx+68]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 211  : 		while (i!=m_AniThingCloneInstanceVector.end())

  00013	74 0f		 je	 SHORT $LN3@Render
$LL2@Render:

; 214  : 			pkThingInst->Deform();

  00015	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 79   :         ++_Ptr;

  00017	83 c6 04	 add	 esi, 4
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 214  : 			pkThingInst->Deform();

  0001a	e8 00 00 00 00	 call	 ?Deform@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::Deform
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 163  :         return _Ptr == _Right._Ptr;

  0001f	3b 73 44	 cmp	 esi, DWORD PTR [ebx+68]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 211  : 		while (i!=m_AniThingCloneInstanceVector.end())

  00022	75 f1		 jne	 SHORT $LL2@Render
$LN3@Render:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00024	8b 43 6c	 mov	 eax, DWORD PTR [ebx+108]
  00027	8d 53 6c	 lea	 edx, DWORD PTR [ebx+108]

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0002a	8b 73 28	 mov	 esi, DWORD PTR [ebx+40]

; 1762 :         auto& _My_data    = _Mypair._Myval2;

  0002d	89 55 ec	 mov	 DWORD PTR _this$1$[ebp], edx

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00030	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  00033	74 03		 je	 SHORT $LN116@Render

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00035	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN116@Render:

; 1762 :         auto& _My_data    = _Mypair._Myval2;

  00038	8d 43 78	 lea	 eax, DWORD PTR [ebx+120]
  0003b	89 45 f0	 mov	 DWORD PTR _this$1$[ebp], eax

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0003e	8b 43 78	 mov	 eax, DWORD PTR [ebx+120]
  00041	3b 43 7c	 cmp	 eax, DWORD PTR [ebx+124]
  00044	74 03		 je	 SHORT $LN119@Render

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00046	89 43 7c	 mov	 DWORD PTR [ebx+124], eax
$LN119@Render:

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00049	3b 73 2c	 cmp	 esi, DWORD PTR [ebx+44]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 226  : 	while (i!=m_ThingCloneInstaceVector.end())

  0004c	0f 84 c9 00 00
	00		 je	 $LN5@Render
  00052	57		 push	 edi
$LL4@Render:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 79   :         ++_Ptr;

  00053	8b 1e		 mov	 ebx, DWORD PTR [esi]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 229  : 		if (pkThingInst->Render())

  00055	8b cb		 mov	 ecx, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 79   :         ++_Ptr;

  00057	83 c6 04	 add	 esi, 4
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 228  : 		pkThingInst=*i++;

  0005a	89 5d f8	 mov	 DWORD PTR _pkThingInst$[ebp], ebx

; 229  : 		if (pkThingInst->Render())

  0005d	e8 00 00 00 00	 call	 ?Render@CGraphicObjectInstance@@QAE_NXZ ; CGraphicObjectInstance::Render
  00062	84 c0		 test	 al, al
  00064	0f 84 a1 00 00
	00		 je	 $LN158@Render

; 231  : 			aGraphicThingInstanceCRCMapIterator = m_GraphicThingInstanceCRCMap.find(pkThingInst);

  0006a	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0006d	8d 4d f8	 lea	 ecx, DWORD PTR _pkThingInst$[ebp]
  00070	51		 push	 ecx
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 231  : 			aGraphicThingInstanceCRCMapIterator = m_GraphicThingInstanceCRCMap.find(pkThingInst);

  00071	83 c0 64	 add	 eax, 100		; 00000064H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00074	8d 4d d8	 lea	 ecx, DWORD PTR __Loc$1[ebp]
  00077	51		 push	 ecx
  00078	8b c8		 mov	 ecx, eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 231  : 			aGraphicThingInstanceCRCMapIterator = m_GraphicThingInstanceCRCMap.find(pkThingInst);

  0007a	89 45 f4	 mov	 DWORD PTR _this$1$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0007d	e8 00 00 00 00	 call	 ??$_Find_lower_bound@PAVCGraphicThingInstance@@@?$_Tree@V?$_Tmap_traits@PAVCGraphicThingInstance@@KU?$less@PAVCGraphicThingInstance@@@std@@V?$allocator@U?$pair@QAVCGraphicThingInstance@@K@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QAVCGraphicThingInstance@@K@std@@PAX@std@@@1@ABQAVCGraphicThingInstance@@@Z ; std::_Tree<std::_Tmap_traits<CGraphicThingInstance *,unsigned long,std::less<CGraphicThingInstance *>,std::allocator<std::pair<CGraphicThingInstance * const,unsigned long> >,0> >::_Find_lower_bound<CGraphicThingInstance *>

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00082	8b 7d e0	 mov	 edi, DWORD PTR __Loc$1[ebp+8]
  00085	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00089	75 05		 jne	 SHORT $LN41@Render
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  0008b	3b 5f 10	 cmp	 ebx, DWORD PTR [edi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0008e	73 05		 jae	 SHORT $LN40@Render
$LN41@Render:

; 1373 :         return _Get_scary()->_Myhead;

  00090	8b 7d f4	 mov	 edi, DWORD PTR _this$1$[ebp]
  00093	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN40@Render:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  00095	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 232  : 			DWORD dwCRC = (*aGraphicThingInstanceCRCMapIterator).second;

  00098	8b 7f 14	 mov	 edi, DWORD PTR [edi+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  0009b	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0009e	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  000a1	74 08		 je	 SHORT $LN62@Render

; 797  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  000a3	89 18		 mov	 DWORD PTR [eax], ebx

; 798  :         } else {
; 799  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 800  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 801  :             _ASAN_VECTOR_RELEASE_GUARD;
; 802  :         }
; 803  : 
; 804  :         _Orphan_range(_Mylast, _Mylast);
; 805  :         _Ty& _Result = *_Mylast;
; 806  :         ++_Mylast;

  000a5	83 41 04 04	 add	 DWORD PTR [ecx+4], 4

; 782  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  000a9	eb 0a		 jmp	 SHORT $LN61@Render
$LN62@Render:

; 783  :         }
; 784  : 
; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  000ab	8d 55 f8	 lea	 edx, DWORD PTR _pkThingInst$[ebp]
  000ae	52		 push	 edx
  000af	50		 push	 eax
  000b0	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCGraphicThingInstance@@@?$vector@PAVCGraphicThingInstance@@V?$allocator@PAVCGraphicThingInstance@@@std@@@std@@AAEPAPAVCGraphicThingInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CGraphicThingInstance *,std::allocator<CGraphicThingInstance *> >::_Emplace_reallocate<CGraphicThingInstance * const &>
$LN61@Render:

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  000b5	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
  000b8	8b 43 6c	 mov	 eax, DWORD PTR [ebx+108]
  000bb	8d 53 6c	 lea	 edx, DWORD PTR [ebx+108]
  000be	8b 4b 70	 mov	 ecx, DWORD PTR [ebx+112]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 6315 :     for (; _UFirst != _ULast; ++_UFirst) {

  000c1	3b c8		 cmp	 ecx, eax
  000c3	74 0f		 je	 SHORT $LN172@Render
$LL83@Render:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h

; 178  : 				if (rCRCWithNumber.dwCRC == m_dwCRC)

  000c5	39 38		 cmp	 DWORD PTR [eax], edi
  000c7	74 07		 je	 SHORT $LN157@Render
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 6315 :     for (; _UFirst != _ULast; ++_UFirst) {

  000c9	83 c0 08	 add	 eax, 8
  000cc	3b c1		 cmp	 eax, ecx
  000ce	75 f5		 jne	 SHORT $LL83@Render
$LN157@Render:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  000d0	3b c8		 cmp	 ecx, eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 238  : 			if ( m_kRenderedThingInstanceCRCWithNumberVector.end() == aCRCWithNumberVectorIterator)

  000d2	75 32		 jne	 SHORT $LN7@Render
$LN172@Render:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  000d4	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 241  : 				aCRCWithNumber.dwCRC = dwCRC;

  000d7	89 7d e4	 mov	 DWORD PTR _aCRCWithNumber$2[ebp], edi

; 242  : 				aCRCWithNumber.dwNumber = 1;

  000da	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _aCRCWithNumber$2[ebp+4], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  000e1	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  000e4	74 0f		 je	 SHORT $LN100@Render

; 797  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  000e6	89 38		 mov	 DWORD PTR [eax], edi
  000e8	c7 40 04 01 00
	00 00		 mov	 DWORD PTR [eax+4], 1

; 798  :         } else {
; 799  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 800  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 801  :             _ASAN_VECTOR_RELEASE_GUARD;
; 802  :         }
; 803  : 
; 804  :         _Orphan_range(_Mylast, _Mylast);
; 805  :         _Ty& _Result = *_Mylast;
; 806  :         ++_Mylast;

  000ef	83 42 04 08	 add	 DWORD PTR [edx+4], 8

; 782  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  000f3	eb 1c		 jmp	 SHORT $LN8@Render
$LN100@Render:

; 783  :         }
; 784  : 
; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  000f5	8d 4d e4	 lea	 ecx, DWORD PTR _aCRCWithNumber$2[ebp]
  000f8	51		 push	 ecx
  000f9	50		 push	 eax
  000fa	8b ca		 mov	 ecx, edx
  000fc	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABUSCRCWithNumber@CArea@@@?$vector@USCRCWithNumber@CArea@@V?$allocator@USCRCWithNumber@CArea@@@std@@@std@@AAEPAUSCRCWithNumber@CArea@@QAU23@ABU23@@Z ; std::vector<CArea::SCRCWithNumber,std::allocator<CArea::SCRCWithNumber> >::_Emplace_reallocate<CArea::SCRCWithNumber const &>
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 244  : 			}

  00101	8d 53 6c	 lea	 edx, DWORD PTR [ebx+108]
  00104	eb 0b		 jmp	 SHORT $LN8@Render
$LN7@Render:

; 245  : 			else
; 246  : 			{
; 247  : 				TCRCWithNumber & rCRCWithNumber = *aCRCWithNumberVectorIterator;
; 248  : 				rCRCWithNumber.dwNumber += 1;

  00106	ff 40 04	 inc	 DWORD PTR [eax+4]
  00109	eb 06		 jmp	 SHORT $LN8@Render
$LN158@Render:

; 229  : 		if (pkThingInst->Render())

  0010b	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
  0010e	8b 55 ec	 mov	 edx, DWORD PTR _this$1$[ebp]
$LN8@Render:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 163  :         return _Ptr == _Right._Ptr;

  00111	3b 73 2c	 cmp	 esi, DWORD PTR [ebx+44]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 226  : 	while (i!=m_ThingCloneInstaceVector.end())

  00114	0f 85 39 ff ff
	ff		 jne	 $LL4@Render
  0011a	5f		 pop	 edi
$LN5@Render:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0011b	8b 4b 70	 mov	 ecx, DWORD PTR [ebx+112]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8067 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

  0011e	8b c1		 mov	 eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00120	8b 12		 mov	 edx, DWORD PTR [edx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 8067 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

  00122	2b c2		 sub	 eax, edx
  00124	ff 75 ec	 push	 DWORD PTR $T3[ebp]
  00127	c1 f8 03	 sar	 eax, 3
  0012a	50		 push	 eax
  0012b	51		 push	 ecx
  0012c	52		 push	 edx
  0012d	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAUSCRCWithNumber@CArea@@UCRCNumComp@2@@std@@YAXPAUSCRCWithNumber@CArea@@0HUCRCNumComp@2@@Z ; std::_Sort_unchecked<CArea::SCRCWithNumber *,CArea::CRCNumComp>
  00132	83 c4 10	 add	 esp, 16			; 00000010H
  00135	5e		 pop	 esi
  00136	5b		 pop	 ebx
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 253  : }

  00137	8b e5		 mov	 esp, ebp
  00139	5d		 pop	 ebp
  0013a	c3		 ret	 0
?Render@CArea@@QAEXXZ ENDP				; CArea::Render
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?UpdateAroundAmbience@CArea@@QAEXMMM@Z
_TEXT	SEGMENT
_fX$ = 8						; size = 4
_fY$ = 12						; size = 4
_fZ$ = 16						; size = 4
?UpdateAroundAmbience@CArea@@QAEXMMM@Z PROC		; CArea::UpdateAroundAmbience, COMDAT
; _this$ = ecx

; 106  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00007	8b 77 58	 mov	 esi, DWORD PTR [edi+88]
  0000a	3b 77 5c	 cmp	 esi, DWORD PTR [edi+92]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 109  : 	for (i = m_AmbienceCloneInstanceVector.begin(); i != m_AmbienceCloneInstanceVector.end(); ++i)

  0000d	74 33		 je	 SHORT $LN3@UpdateArou
  0000f	90		 npad	 1
$LL34@UpdateArou:

; 110  : 	{
; 111  : 		TAmbienceInstance * pInstance = *i;
; 112  : 		pInstance->__Update(fX, fY, fZ);

  00010	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fZ$[ebp]
  00015	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00018	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0001a	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00020	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fY$[ebp]
  00025	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0002b	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fX$[ebp]
  00030	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00035	e8 00 00 00 00	 call	 ?__Update@SAmbienceInstance@CArea@@QAEXMMM@Z ; CArea::SAmbienceInstance::__Update
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 79   :         ++_Ptr;

  0003a	83 c6 04	 add	 esi, 4

; 163  :         return _Ptr == _Right._Ptr;

  0003d	3b 77 5c	 cmp	 esi, DWORD PTR [edi+92]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 109  : 	for (i = m_AmbienceCloneInstanceVector.begin(); i != m_AmbienceCloneInstanceVector.end(); ++i)

  00040	75 ce		 jne	 SHORT $LL34@UpdateArou
$LN3@UpdateArou:
  00042	5f		 pop	 edi

; 113  : 	}
; 114  : }

  00043	5e		 pop	 esi
  00044	5d		 pop	 ebp
  00045	c2 0c 00	 ret	 12			; 0000000cH
?UpdateAroundAmbience@CArea@@QAEXMMM@Z ENDP		; CArea::UpdateAroundAmbience
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?Update@CArea@@QAEXXZ
_TEXT	SEGMENT
?Update@CArea@@QAEXXZ PROC				; CArea::Update, COMDAT
; _this$ = ecx

; 102  : 	__UpdateAniThingList();

  00000	e9 00 00 00 00	 jmp	 ?__UpdateAniThingList@CArea@@IAEXXZ ; CArea::__UpdateAniThingList
?Update@CArea@@QAEXXZ ENDP				; CArea::Update
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?RefreshPortal@CArea@@QAEXXZ
_TEXT	SEGMENT
$T2 = -92						; size = 12
__Loc$3 = -80						; size = 12
__Loc$4 = -80						; size = 12
__Loc$5 = -68						; size = 12
$T6 = -56						; size = 8
_kSet_ShowingObjectInstance$ = -48			; size = 8
_pObjectInstance$7 = -40				; size = 4
_pInstance$8 = -40					; size = 4
tv1719 = -36						; size = 4
$T9 = -32						; size = 4
_this$1$ = -28						; size = 4
_i$1$ = -28						; size = 4
_this$1$ = -24						; size = 4
_pInstance$1$ = -24					; size = 4
tv1717 = -20						; size = 4
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?RefreshPortal@CArea@@QAEXXZ PROC			; CArea::RefreshPortal, COMDAT
; _this$ = ecx

; 1035 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RefreshPortal@CArea@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	89 5d f0	 mov	 DWORD PTR _this$1$[ebp], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  0002d	6a 14		 push	 20			; 00000014H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 437  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  0002f	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _kSet_ShowingObjectInstance$[ebp], 0
  00036	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _kSet_ShowingObjectInstance$[ebp+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  0003d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 245  :         return _Traits::_Allocate(_Bytes);

  00042	8b f8		 mov	 edi, eax

; 87   :         return ::operator new(_Bytes);

  00044	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 347  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  00047	89 3f		 mov	 DWORD PTR [edi], edi

; 348  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  00049	89 7f 04	 mov	 DWORD PTR [edi+4], edi

; 349  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  0004c	89 7f 08	 mov	 DWORD PTR [edi+8], edi

; 350  :         _Pnode->_Color = _Black;

  0004f	66 c7 47 0c 01
	01		 mov	 WORD PTR [edi+12], 257	; 00000101H

; 1943 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  00055	89 7d d0	 mov	 DWORD PTR _kSet_ShowingObjectInstance$[ebp], edi

; 1358 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  00058	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1036 : 	std::set<TObjectInstance *> kSet_ShowingObjectInstance;

  0005b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00062	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00066	75 23		 jne	 SHORT $LN253@RefreshPor
$LL252@RefreshPor:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00068	ff 76 08	 push	 DWORD PTR [esi+8]
  0006b	8d 45 d0	 lea	 eax, DWORD PTR _kSet_ShowingObjectInstance$[ebp]
  0006e	50		 push	 eax
  0006f	8b c8		 mov	 ecx, eax
  00071	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@PAUSObjectInstance@CArea@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@PAUSObjectInstance@CArea@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@PAUSObjectInstance@CArea@@PAX@std@@@1@PAU?$_Tree_node@PAUSObjectInstance@CArea@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<CArea::SObjectInstance *> >::_Erase_tree<std::allocator<std::_Tree_node<CArea::SObjectInstance *,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 754  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00076	8b c6		 mov	 eax, esi

; 755  :     _Val         = static_cast<_Other&&>(_New_val);

  00078	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  0007a	6a 14		 push	 20			; 00000014H
  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00082	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00085	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00089	74 dd		 je	 SHORT $LL252@RefreshPor
$LN253@RefreshPor:

; 1359 :         _Head->_Parent  = _Head;

  0008b	89 7f 04	 mov	 DWORD PTR [edi+4], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0008e	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1360 :         _Head->_Left    = _Head;

  00093	89 3f		 mov	 DWORD PTR [edi], edi
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1038 : 	for (DWORD i = 0; i < m_ObjectDataVector.size(); ++i)

  00095	33 f6		 xor	 esi, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1361 :         _Head->_Right   = _Head;

  00097	89 7f 08	 mov	 DWORD PTR [edi+8], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0009a	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  0009d	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  000a0	2b cf		 sub	 ecx, edi
  000a2	f7 e9		 imul	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1362 :         _Scary->_Mysize = 0;

  000a4	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _kSet_ShowingObjectInstance$[ebp+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000ab	c1 fa 03	 sar	 edx, 3
  000ae	8b c2		 mov	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1038 : 	for (DWORD i = 0; i < m_ObjectDataVector.size(); ++i)

  000b0	89 75 e4	 mov	 DWORD PTR _i$1$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000b3	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000b6	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1038 : 	for (DWORD i = 0; i < m_ObjectDataVector.size(); ++i)

  000b8	0f 84 21 01 00
	00		 je	 $LN3@RefreshPor
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1883 :         auto& _My_data = _Mypair._Myval2;

  000be	33 c9		 xor	 ecx, ecx
  000c0	89 4d ec	 mov	 DWORD PTR tv1717[ebp], ecx
$LL4@RefreshPor:

; 1889 :         return _My_data._Myfirst[_Pos];

  000c3	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1041 : 		TObjectInstance * pInstance = m_ObjectInstanceVector[i];

  000c6	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]

; 1042 : 
; 1043 : 		for (int j = 0; j < PORTAL_ID_MAX_NUM; ++j)

  000c9	33 f6		 xor	 esi, esi
  000cb	89 45 e8	 mov	 DWORD PTR _pInstance$1$[ebp], eax
  000ce	89 45 d8	 mov	 DWORD PTR _pInstance$8[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1889 :         return _My_data._Myfirst[_Pos];

  000d1	8d 47 10	 lea	 eax, DWORD PTR [edi+16]
  000d4	03 c1		 add	 eax, ecx
  000d6	89 45 dc	 mov	 DWORD PTR tv1719[ebp], eax
  000d9	0f 1f 80 00 00
	00 00		 npad	 7
$LL7@RefreshPor:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1045 : 			BYTE byPortalID = rData.abyPortalID[j];

  000e0	8a 04 30	 mov	 al, BYTE PTR [eax+esi]

; 1046 : 			if (0 == byPortalID)

  000e3	84 c0		 test	 al, al
  000e5	0f 84 c4 00 00
	00		 je	 $LN2@RefreshPor

; 1049 : 			if (m_kSet_ShowingPortalID.end() == m_kSet_ShowingPortalID.find(byPortalID))

  000eb	0f b6 f8	 movzx	 edi, al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  000ee	8d 8b 98 00 00
	00		 lea	 ecx, DWORD PTR [ebx+152]
  000f4	8d 45 e0	 lea	 eax, DWORD PTR $T9[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1049 : 			if (m_kSet_ShowingPortalID.end() == m_kSet_ShowingPortalID.find(byPortalID))

  000f7	89 7d e0	 mov	 DWORD PTR $T9[ebp], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  000fa	50		 push	 eax
  000fb	8d 45 b0	 lea	 eax, DWORD PTR __Loc$4[ebp]
  000fe	50		 push	 eax
  000ff	e8 00 00 00 00	 call	 ??$_Find_lower_bound@H@?$_Tree@V?$_Tset_traits@HU?$less@H@std@@V?$allocator@H@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@HPAX@std@@@1@ABH@Z ; std::_Tree<std::_Tset_traits<int,std::less<int>,std::allocator<int>,0> >::_Find_lower_bound<int>

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00104	8b 45 b8	 mov	 eax, DWORD PTR __Loc$4[ebp+8]
  00107	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0010b	75 0d		 jne	 SHORT $LN305@RefreshPor
  0010d	3b 78 10	 cmp	 edi, DWORD PTR [eax+16]
  00110	7c 08		 jl	 SHORT $LN305@RefreshPor
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1049 : 			if (m_kSet_ShowingPortalID.end() == m_kSet_ShowingPortalID.find(byPortalID))

  00112	39 83 98 00 00
	00		 cmp	 DWORD PTR [ebx+152], eax
  00118	75 12		 jne	 SHORT $LN12@RefreshPor
$LN305@RefreshPor:

; 1042 : 
; 1043 : 		for (int j = 0; j < PORTAL_ID_MAX_NUM; ++j)

  0011a	8b 5d f0	 mov	 ebx, DWORD PTR _this$1$[ebp]
  0011d	46		 inc	 esi
  0011e	83 fe 08	 cmp	 esi, 8
  00121	0f 8d 88 00 00
	00		 jge	 $LN2@RefreshPor
  00127	8b 45 dc	 mov	 eax, DWORD PTR tv1719[ebp]
  0012a	eb b4		 jmp	 SHORT $LL7@RefreshPor
$LN12@RefreshPor:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1002 :             _Loc                = _Find_lower_bound(_Keyval);

  0012c	8d 45 d8	 lea	 eax, DWORD PTR _pInstance$8[ebp]
  0012f	50		 push	 eax
  00130	8d 45 a4	 lea	 eax, DWORD PTR $T2[ebp]
  00133	50		 push	 eax
  00134	8d 4d d0	 lea	 ecx, DWORD PTR _kSet_ShowingObjectInstance$[ebp]
  00137	e8 00 00 00 00	 call	 ??$_Find_lower_bound@PAUSObjectInstance@CArea@@@?$_Tree@V?$_Tset_traits@PAUSObjectInstance@CArea@@U?$less@PAUSObjectInstance@CArea@@@std@@V?$allocator@PAUSObjectInstance@CArea@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@PAUSObjectInstance@CArea@@PAX@std@@@1@ABQAUSObjectInstance@CArea@@@Z ; std::_Tree<std::_Tset_traits<CArea::SObjectInstance *,std::less<CArea::SObjectInstance *>,std::allocator<CArea::SObjectInstance *>,0> >::_Find_lower_bound<CArea::SObjectInstance *>

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0013c	8b 7d e8	 mov	 edi, DWORD PTR _pInstance$1$[ebp]

; 1002 :             _Loc                = _Find_lower_bound(_Keyval);

  0013f	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00143	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00146	66 0f d6 45 bc	 movq	 QWORD PTR __Loc$5[ebp], xmm0

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0014b	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0014f	75 05		 jne	 SHORT $LN304@RefreshPor
  00151	3b 78 10	 cmp	 edi, DWORD PTR [eax+16]
  00154	73 56		 jae	 SHORT $LN310@RefreshPor
$LN304@RefreshPor:

; 1631 :         if (max_size() == _Get_scary()->_Mysize) {

  00156	81 7d d4 cc cc
	cc 0c		 cmp	 DWORD PTR _kSet_ShowingObjectInstance$[ebp+4], 214748364 ; 0cccccccH
  0015d	0f 84 95 01 00
	00		 je	 $LN287@RefreshPor

; 1008 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  00163	8b 75 d0	 mov	 esi, DWORD PTR _kSet_ShowingObjectInstance$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1144 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00166	8d 45 d0	 lea	 eax, DWORD PTR _kSet_ShowingObjectInstance$[ebp]
  00169	89 45 c8	 mov	 DWORD PTR $T6[ebp], eax

; 87   :         return ::operator new(_Bytes);

  0016c	6a 14		 push	 20			; 00000014H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  0016e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1151 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00172	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR $T6[ebp+4], 0

; 87   :         return ::operator new(_Bytes);

  00179	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0017e	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 787  :     }

  00181	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00185	8d 4d d0	 lea	 ecx, DWORD PTR _kSet_ShowingObjectInstance$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 755  :     _Val         = static_cast<_Other&&>(_New_val);

  00188	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR $T6[ebp+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  0018f	89 78 10	 mov	 DWORD PTR [eax+16], edi

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00192	50		 push	 eax
  00193	ff 75 c0	 push	 DWORD PTR __Loc$5[ebp+4]

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  00196	89 30		 mov	 DWORD PTR [eax], esi

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00198	ff 75 bc	 push	 DWORD PTR __Loc$5[ebp]

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  0019b	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  0019e	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 811  :         this->_Ptr->_Color = _Red;

  001a1	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  001a7	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@PAUSObjectInstance@CArea@@@std@@@std@@QAEPAU?$_Tree_node@PAUSObjectInstance@CArea@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@PAUSObjectInstance@CArea@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<CArea::SObjectInstance *> >::_Insert_node
$LN310@RefreshPor:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1038 : 	for (DWORD i = 0; i < m_ObjectDataVector.size(); ++i)

  001ac	8b 5d f0	 mov	 ebx, DWORD PTR _this$1$[ebp]
$LN2@RefreshPor:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  001af	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  001b2	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  001b7	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  001ba	2b cf		 sub	 ecx, edi
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1038 : 	for (DWORD i = 0; i < m_ObjectDataVector.size(); ++i)

  001bc	8b 75 e4	 mov	 esi, DWORD PTR _i$1$[ebp]
  001bf	83 45 ec 30	 add	 DWORD PTR tv1717[ebp], 48 ; 00000030H
  001c3	46		 inc	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  001c4	f7 e9		 imul	 ecx
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1038 : 	for (DWORD i = 0; i < m_ObjectDataVector.size(); ++i)

  001c6	89 75 e4	 mov	 DWORD PTR _i$1$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  001c9	c1 fa 03	 sar	 edx, 3
  001cc	8b c2		 mov	 eax, edx
  001ce	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001d1	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1038 : 	for (DWORD i = 0; i < m_ObjectDataVector.size(); ++i)

  001d3	3b f0		 cmp	 esi, eax
  001d5	73 08		 jae	 SHORT $LN3@RefreshPor
  001d7	8b 4d ec	 mov	 ecx, DWORD PTR tv1717[ebp]
  001da	e9 e4 fe ff ff	 jmp	 $LL4@RefreshPor
$LN3@RefreshPor:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  001df	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  001e2	3b 43 20	 cmp	 eax, DWORD PTR [ebx+32]
  001e5	74 03		 je	 SHORT $LN185@RefreshPor

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  001e7	89 43 20	 mov	 DWORD PTR [ebx+32], eax
$LN185@RefreshPor:

; 1762 :         auto& _My_data    = _Mypair._Myval2;

  001ea	8b 45 f0	 mov	 eax, DWORD PTR _this$1$[ebp]

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  001ed	8b 50 28	 mov	 edx, DWORD PTR [eax+40]
  001f0	8d 48 28	 lea	 ecx, DWORD PTR [eax+40]
  001f3	89 4d e4	 mov	 DWORD PTR _this$1$[ebp], ecx
  001f6	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  001f9	74 03		 je	 SHORT $LN188@RefreshPor

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  001fb	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN188@RefreshPor:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  001fe	8b 70 34	 mov	 esi, DWORD PTR [eax+52]
  00201	8d 50 34	 lea	 edx, DWORD PTR [eax+52]
  00204	89 55 e8	 mov	 DWORD PTR _this$1$[ebp], edx
  00207	3b 72 04	 cmp	 esi, DWORD PTR [edx+4]
  0020a	74 03		 je	 SHORT $LN191@RefreshPor

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  0020c	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN191@RefreshPor:

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0020f	8b 70 10	 mov	 esi, DWORD PTR [eax+16]
  00212	3b 70 14	 cmp	 esi, DWORD PTR [eax+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1064 : 	for(it = m_ObjectInstanceVector.begin(); it != m_ObjectInstanceVector.end(); ++it)

  00215	0f 84 c3 00 00
	00		 je	 $LN9@RefreshPor
  0021b	0f 1f 44 00 00	 npad	 5
$LL37@RefreshPor:

; 1065 : 	{
; 1066 : 		TObjectInstance * pObjectInstance = *it;
; 1067 : 
; 1068 : 		if (m_bPortalEnable)

  00220	83 b8 94 00 00
	00 00		 cmp	 DWORD PTR [eax+148], 0
  00227	8b 3e		 mov	 edi, DWORD PTR [esi]
  00229	89 7d d8	 mov	 DWORD PTR _pObjectInstance$7[ebp], edi
  0022c	74 2c		 je	 SHORT $LN14@RefreshPor
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0022e	8d 45 d8	 lea	 eax, DWORD PTR _pObjectInstance$7[ebp]
  00231	50		 push	 eax
  00232	8d 45 b0	 lea	 eax, DWORD PTR __Loc$3[ebp]
  00235	50		 push	 eax
  00236	8d 4d d0	 lea	 ecx, DWORD PTR _kSet_ShowingObjectInstance$[ebp]
  00239	e8 00 00 00 00	 call	 ??$_Find_lower_bound@PAUSObjectInstance@CArea@@@?$_Tree@V?$_Tset_traits@PAUSObjectInstance@CArea@@U?$less@PAUSObjectInstance@CArea@@@std@@V?$allocator@PAUSObjectInstance@CArea@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@PAUSObjectInstance@CArea@@PAX@std@@@1@ABQAUSObjectInstance@CArea@@@Z ; std::_Tree<std::_Tset_traits<CArea::SObjectInstance *,std::less<CArea::SObjectInstance *>,std::allocator<CArea::SObjectInstance *>,0> >::_Find_lower_bound<CArea::SObjectInstance *>

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0023e	8b 45 b8	 mov	 eax, DWORD PTR __Loc$3[ebp+8]
  00241	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00245	75 05		 jne	 SHORT $LN67@RefreshPor
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  00247	3b 78 10	 cmp	 edi, DWORD PTR [eax+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0024a	73 03		 jae	 SHORT $LN66@RefreshPor
$LN67@RefreshPor:

; 1373 :         return _Get_scary()->_Myhead;

  0024c	8b 45 d0	 mov	 eax, DWORD PTR _kSet_ShowingObjectInstance$[ebp]
$LN66@RefreshPor:

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0024f	39 45 d0	 cmp	 DWORD PTR _kSet_ShowingObjectInstance$[ebp], eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1070 : 			if (kSet_ShowingObjectInstance.end() == kSet_ShowingObjectInstance.find(pObjectInstance))

  00252	74 75		 je	 SHORT $LN8@RefreshPor
  00254	8b 4d e4	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00257	8b 55 e8	 mov	 edx, DWORD PTR _this$1$[ebp]
$LN14@RefreshPor:

; 1071 : 				continue;
; 1072 : 		}
; 1073 : 
; 1074 : 		if (prt::PROPERTY_TYPE_TREE == pObjectInstance->dwType)

  0025a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0025d	83 f8 01	 cmp	 eax, 1
  00260	75 21		 jne	 SHORT $LN15@RefreshPor
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  00262	8b 4b 20	 mov	 ecx, DWORD PTR [ebx+32]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1077 : 			m_TreeCloneInstaceVector.push_back(pObjectInstance->pTree);

  00265	83 c7 0c	 add	 edi, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  00268	3b 4b 24	 cmp	 ecx, DWORD PTR [ebx+36]
  0026b	74 0a		 je	 SHORT $LN90@RefreshPor

; 797  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  0026d	8b 07		 mov	 eax, DWORD PTR [edi]
  0026f	89 01		 mov	 DWORD PTR [ecx], eax

; 798  :         } else {
; 799  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 800  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 801  :             _ASAN_VECTOR_RELEASE_GUARD;
; 802  :         }
; 803  : 
; 804  :         _Orphan_range(_Mylast, _Mylast);
; 805  :         _Ty& _Result = *_Mylast;
; 806  :         ++_Mylast;

  00271	83 43 20 04	 add	 DWORD PTR [ebx+32], 4

; 782  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00275	eb 52		 jmp	 SHORT $LN8@RefreshPor
$LN90@RefreshPor:

; 783  :         }
; 784  : 
; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00277	57		 push	 edi
  00278	51		 push	 ecx
  00279	8d 4b 1c	 lea	 ecx, DWORD PTR [ebx+28]
  0027c	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCSpeedTreeWrapper@@@?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@AAEPAPAVCSpeedTreeWrapper@@QAPAV2@ABQAV2@@Z ; std::vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >::_Emplace_reallocate<CSpeedTreeWrapper * const &>
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1078 : 		}

  00281	eb 46		 jmp	 SHORT $LN8@RefreshPor
$LN15@RefreshPor:

; 1079 : 		else if (prt::PROPERTY_TYPE_BUILDING == pObjectInstance->dwType)

  00283	83 f8 02	 cmp	 eax, 2
  00286	75 1e		 jne	 SHORT $LN17@RefreshPor
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  00288	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1082 : 			m_ThingCloneInstaceVector.push_back(pObjectInstance->pThingInstance);

  0028b	83 c7 14	 add	 edi, 20			; 00000014H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  0028e	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00291	74 0a		 je	 SHORT $LN207@RefreshPor

; 797  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00293	8b 07		 mov	 eax, DWORD PTR [edi]
  00295	89 02		 mov	 DWORD PTR [edx], eax

; 798  :         } else {
; 799  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 800  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 801  :             _ASAN_VECTOR_RELEASE_GUARD;
; 802  :         }
; 803  : 
; 804  :         _Orphan_range(_Mylast, _Mylast);
; 805  :         _Ty& _Result = *_Mylast;
; 806  :         ++_Mylast;

  00297	83 41 04 04	 add	 DWORD PTR [ecx+4], 4

; 782  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  0029b	eb 2c		 jmp	 SHORT $LN8@RefreshPor
$LN207@RefreshPor:

; 783  :         }
; 784  : 
; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0029d	57		 push	 edi
  0029e	52		 push	 edx
  0029f	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCGraphicThingInstance@@@?$vector@PAVCGraphicThingInstance@@V?$allocator@PAVCGraphicThingInstance@@@std@@@std@@AAEPAPAVCGraphicThingInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CGraphicThingInstance *,std::allocator<CGraphicThingInstance *> >::_Emplace_reallocate<CGraphicThingInstance * const &>
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1083 : 		}

  002a4	eb 23		 jmp	 SHORT $LN8@RefreshPor
$LN17@RefreshPor:

; 1084 : 		else if (prt::PROPERTY_TYPE_DUNGEON_BLOCK == pObjectInstance->dwType)

  002a6	83 f8 05	 cmp	 eax, 5
  002a9	75 1e		 jne	 SHORT $LN8@RefreshPor
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  002ab	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1087 : 			m_DungeonBlockCloneInstanceVector.push_back(pObjectInstance->pDungeonBlock);

  002ae	83 c7 24	 add	 edi, 36			; 00000024H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  002b1	3b 4a 08	 cmp	 ecx, DWORD PTR [edx+8]
  002b4	74 0a		 je	 SHORT $LN214@RefreshPor

; 797  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  002b6	8b 07		 mov	 eax, DWORD PTR [edi]
  002b8	89 01		 mov	 DWORD PTR [ecx], eax

; 798  :         } else {
; 799  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 800  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 801  :             _ASAN_VECTOR_RELEASE_GUARD;
; 802  :         }
; 803  : 
; 804  :         _Orphan_range(_Mylast, _Mylast);
; 805  :         _Ty& _Result = *_Mylast;
; 806  :         ++_Mylast;

  002ba	83 42 04 04	 add	 DWORD PTR [edx+4], 4

; 782  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  002be	eb 09		 jmp	 SHORT $LN8@RefreshPor
$LN214@RefreshPor:

; 783  :         }
; 784  : 
; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  002c0	57		 push	 edi
  002c1	51		 push	 ecx
  002c2	8b ca		 mov	 ecx, edx
  002c4	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCDungeonBlock@@@?$vector@PAVCDungeonBlock@@V?$allocator@PAVCDungeonBlock@@@std@@@std@@AAEPAPAVCDungeonBlock@@QAPAV2@ABQAV2@@Z ; std::vector<CDungeonBlock *,std::allocator<CDungeonBlock *> >::_Emplace_reallocate<CDungeonBlock * const &>
$LN8@RefreshPor:

; 163  :         return _Ptr == _Right._Ptr;

  002c9	8b 45 f0	 mov	 eax, DWORD PTR _this$1$[ebp]

; 79   :         ++_Ptr;

  002cc	83 c6 04	 add	 esi, 4
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1064 : 	for(it = m_ObjectInstanceVector.begin(); it != m_ObjectInstanceVector.end(); ++it)

  002cf	8b 4d e4	 mov	 ecx, DWORD PTR _this$1$[ebp]
  002d2	8b 55 e8	 mov	 edx, DWORD PTR _this$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 163  :         return _Ptr == _Right._Ptr;

  002d5	3b 70 14	 cmp	 esi, DWORD PTR [eax+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1064 : 	for(it = m_ObjectInstanceVector.begin(); it != m_ObjectInstanceVector.end(); ++it)

  002d8	0f 85 42 ff ff
	ff		 jne	 $LL37@RefreshPor
$LN9@RefreshPor:
  002de	8d 4d d0	 lea	 ecx, DWORD PTR _kSet_ShowingObjectInstance$[ebp]
  002e1	e8 00 00 00 00	 call	 ??1?$_Tree@V?$_Tset_traits@PAUSObjectInstance@CArea@@U?$less@PAUSObjectInstance@CArea@@@std@@V?$allocator@PAUSObjectInstance@CArea@@@4@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tset_traits<CArea::SObjectInstance *,std::less<CArea::SObjectInstance *>,std::allocator<CArea::SObjectInstance *>,0> >::~_Tree<std::_Tset_traits<CArea::SObjectInstance *,std::less<CArea::SObjectInstance *>,std::allocator<CArea::SObjectInstance *>,0> >

; 1090 : }

  002e6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002e9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002f0	59		 pop	 ecx
  002f1	5f		 pop	 edi
  002f2	5e		 pop	 esi
  002f3	5b		 pop	 ebx
  002f4	8b e5		 mov	 esp, ebp
  002f6	5d		 pop	 ebp
  002f7	c3		 ret	 0
$LN287@RefreshPor:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1632 :             _Throw_tree_length_error();

  002f8	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN313@RefreshPor:
  002fd	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RefreshPortal@CArea@@QAEXXZ$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR _kSet_ShowingObjectInstance$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$set@PAUSObjectInstance@CArea@@U?$less@PAUSObjectInstance@CArea@@@std@@V?$allocator@PAUSObjectInstance@CArea@@@4@@std@@QAE@XZ
__unwindfunclet$?RefreshPortal@CArea@@QAEXXZ$4:
  00008	8d 4d c8	 lea	 ecx, DWORD PTR $T6[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@PAUSObjectInstance@CArea@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<CArea::SObjectInstance *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<CArea::SObjectInstance *,void *> > >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?RefreshPortal@CArea@@QAEXXZ:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RefreshPortal@CArea@@QAEXXZ
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RefreshPortal@CArea@@QAEXXZ ENDP			; CArea::RefreshPortal
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?AddShowingPortalID@CArea@@QAEXH@Z
_TEXT	SEGMENT
__Loc$2 = -36						; size = 12
$T3 = -24						; size = 12
$T4 = -20						; size = 8
__$EHRec$ = -12						; size = 12
_iNum$ = 8						; size = 4
?AddShowingPortalID@CArea@@QAEXH@Z PROC			; CArea::AddShowingPortalID, COMDAT
; _this$ = ecx

; 1030 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?AddShowingPortalID@CArea@@QAEXH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1002 :             _Loc                = _Find_lower_bound(_Keyval);

  00028	8d 45 08	 lea	 eax, DWORD PTR _iNum$[ebp]
  0002b	50		 push	 eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1031 : 	m_kSet_ShowingPortalID.insert(iNum);

  0002c	8d b9 98 00 00
	00		 lea	 edi, DWORD PTR [ecx+152]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1002 :             _Loc                = _Find_lower_bound(_Keyval);

  00032	8d 45 e8	 lea	 eax, DWORD PTR $T3[ebp]
  00035	8b cf		 mov	 ecx, edi
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ??$_Find_lower_bound@H@?$_Tree@V?$_Tset_traits@HU?$less@H@std@@V?$allocator@H@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@HPAX@std@@@1@ABH@Z ; std::_Tree<std::_Tset_traits<int,std::less<int>,std::allocator<int>,0> >::_Find_lower_bound<int>

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0003d	8b 5d 08	 mov	 ebx, DWORD PTR _iNum$[ebp]

; 1002 :             _Loc                = _Find_lower_bound(_Keyval);

  00040	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00044	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00047	66 0f d6 45 dc	 movq	 QWORD PTR __Loc$2[ebp], xmm0

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0004c	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00050	75 05		 jne	 SHORT $LN91@AddShowing
  00052	3b 58 10	 cmp	 ebx, DWORD PTR [eax+16]
  00055	7d 45		 jge	 SHORT $LN81@AddShowing
$LN91@AddShowing:

; 1631 :         if (max_size() == _Get_scary()->_Mysize) {

  00057	81 7f 04 cc cc
	cc 0c		 cmp	 DWORD PTR [edi+4], 214748364 ; 0cccccccH
  0005e	74 50		 je	 SHORT $LN95@AddShowing

; 1008 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  00060	8b 37		 mov	 esi, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1144 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00062	89 7d ec	 mov	 DWORD PTR $T4[ebp], edi

; 87   :         return ::operator new(_Bytes);

  00065	6a 14		 push	 20			; 00000014H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00067	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1151 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0006e	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+4], 0

; 87   :         return ::operator new(_Bytes);

  00075	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0007a	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0007d	8b cf		 mov	 ecx, edi

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  0007f	89 58 10	 mov	 DWORD PTR [eax+16], ebx

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00082	50		 push	 eax
  00083	ff 75 e0	 push	 DWORD PTR __Loc$2[ebp+4]

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  00086	89 30		 mov	 DWORD PTR [eax], esi

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00088	ff 75 dc	 push	 DWORD PTR __Loc$2[ebp]

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  0008b	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  0008e	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 811  :         this->_Ptr->_Color = _Red;

  00091	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00097	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@H@std@@@std@@QAEPAU?$_Tree_node@HPAX@2@U?$_Tree_id@PAU?$_Tree_node@HPAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<int> >::_Insert_node
$LN81@AddShowing:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1032 : }

  0009c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a6	59		 pop	 ecx
  000a7	5f		 pop	 edi
  000a8	5e		 pop	 esi
  000a9	5b		 pop	 ebx
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c2 04 00	 ret	 4
$LN95@AddShowing:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1632 :             _Throw_tree_length_error();

  000b0	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN93@AddShowing:
  000b5	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddShowingPortalID@CArea@@QAEXH@Z$2:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR $T4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@HPAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<int,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<int,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?AddShowingPortalID@CArea@@QAEXH@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AddShowingPortalID@CArea@@QAEXH@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AddShowingPortalID@CArea@@QAEXH@Z ENDP			; CArea::AddShowingPortalID
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?ClearPortal@CArea@@QAEXXZ
_TEXT	SEGMENT
?ClearPortal@CArea@@QAEXXZ PROC				; CArea::ClearPortal, COMDAT
; _this$ = ecx

; 1025 : {

  00000	53		 push	 ebx
  00001	56		 push	 esi

; 1026 : 	m_kSet_ShowingPortalID.clear();

  00002	8d 99 98 00 00
	00		 lea	 ebx, DWORD PTR [ecx+152]
  00008	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1357 :         auto _Head = _Scary->_Myhead;

  00009	8b 3b		 mov	 edi, DWORD PTR [ebx]

; 1358 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  0000b	8b 77 04	 mov	 esi, DWORD PTR [edi+4]

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0000e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00012	75 20		 jne	 SHORT $LN7@ClearPorta
$LL6@ClearPorta:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00014	ff 76 08	 push	 DWORD PTR [esi+8]
  00017	8b cb		 mov	 ecx, ebx
  00019	53		 push	 ebx
  0001a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@HPAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@H@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@HPAX@std@@@1@PAU?$_Tree_node@HPAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<int> >::_Erase_tree<std::allocator<std::_Tree_node<int,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 754  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001f	8b c6		 mov	 eax, esi

; 755  :     _Val         = static_cast<_Other&&>(_New_val);

  00021	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00023	6a 14		 push	 20			; 00000014H
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00032	74 e0		 je	 SHORT $LL6@ClearPorta
$LN7@ClearPorta:

; 1359 :         _Head->_Parent  = _Head;

  00034	89 7f 04	 mov	 DWORD PTR [edi+4], edi

; 1360 :         _Head->_Left    = _Head;

  00037	89 3f		 mov	 DWORD PTR [edi], edi

; 1361 :         _Head->_Right   = _Head;

  00039	89 7f 08	 mov	 DWORD PTR [edi+8], edi

; 1362 :         _Scary->_Mysize = 0;

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0
  00045	5b		 pop	 ebx
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1027 : }

  00046	c3		 ret	 0
?ClearPortal@CArea@@QAEXXZ ENDP				; CArea::ClearPortal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?EnablePortal@CArea@@QAEXH@Z
_TEXT	SEGMENT
_bFlag$ = 8						; size = 4
?EnablePortal@CArea@@QAEXH@Z PROC			; CArea::EnablePortal, COMDAT
; _this$ = ecx

; 1017 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1018 : 	if (m_bPortalEnable == bFlag)

  00003	8b 45 08	 mov	 eax, DWORD PTR _bFlag$[ebp]
  00006	39 81 94 00 00
	00		 cmp	 DWORD PTR [ecx+148], eax
  0000c	74 06		 je	 SHORT $LN1@EnablePort

; 1019 : 		return;
; 1020 : 
; 1021 : 	m_bPortalEnable = bFlag;

  0000e	89 81 94 00 00
	00		 mov	 DWORD PTR [ecx+148], eax
$LN1@EnablePort:

; 1022 : }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
?EnablePortal@CArea@@QAEXH@Z ENDP			; CArea::EnablePortal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?GetObjectInstancePointer@CArea@@QBE?B_NABKPAPBUSObjectInstance@1@@Z
_TEXT	SEGMENT
_dwIndex$ = 8						; size = 4
_ppObjectInstance$ = 12					; size = 4
?GetObjectInstancePointer@CArea@@QBE?B_NABKPAPBUSObjectInstance@1@@Z PROC ; CArea::GetObjectInstancePointer, COMDAT
; _this$ = ecx

; 1008 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1009 : 	if (dwIndex >= m_ObjectInstanceVector.size())

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwIndex$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00006	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1008 : {

  00009	56		 push	 esi

; 1009 : 	if (dwIndex >= m_ObjectInstanceVector.size())

  0000a	8b 30		 mov	 esi, DWORD PTR [eax]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0000c	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0000f	2b c2		 sub	 eax, edx
  00011	c1 f8 02	 sar	 eax, 2
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1009 : 	if (dwIndex >= m_ObjectInstanceVector.size())

  00014	3b f0		 cmp	 esi, eax
  00016	72 07		 jb	 SHORT $LN2@GetObjectI

; 1010 : 		return false;

  00018	32 c0		 xor	 al, al
  0001a	5e		 pop	 esi

; 1014 : }

  0001b	5d		 pop	 ebp
  0001c	c2 08 00	 ret	 8
$LN2@GetObjectI:

; 1011 : 
; 1012 : 	*ppObjectInstance = m_ObjectInstanceVector[dwIndex];

  0001f	8b 45 0c	 mov	 eax, DWORD PTR _ppObjectInstance$[ebp]
  00022	8b 0c b2	 mov	 ecx, DWORD PTR [edx+esi*4]
  00025	5e		 pop	 esi
  00026	89 08		 mov	 DWORD PTR [eax], ecx

; 1013 : 	return true;

  00028	b0 01		 mov	 al, 1

; 1014 : }

  0002a	5d		 pop	 ebp
  0002b	c2 08 00	 ret	 8
?GetObjectInstancePointer@CArea@@QBE?B_NABKPAPBUSObjectInstance@1@@Z ENDP ; CArea::GetObjectInstancePointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?GetObjectInstanceCount@CArea@@QBE?BKXZ
_TEXT	SEGMENT
?GetObjectInstanceCount@CArea@@QBE?BKXZ PROC		; CArea::GetObjectInstanceCount, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	2b 41 10	 sub	 eax, DWORD PTR [ecx+16]
  00006	c1 f8 02	 sar	 eax, 2
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1005 : }

  00009	c3		 ret	 0
?GetObjectInstanceCount@CArea@@QBE?BKXZ ENDP		; CArea::GetObjectInstanceCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?GetObjectDataPointer@CArea@@QBE_NKPAPBUSObjectData@1@@Z
_TEXT	SEGMENT
_dwIndex$ = 8						; size = 4
_ppObjectData$ = 12					; size = 4
?GetObjectDataPointer@CArea@@QBE_NKPAPBUSObjectData@1@@Z PROC ; CArea::GetObjectDataPointer, COMDAT
; _this$ = ecx

; 991  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 992  : 	if (!CheckObjectIndex(dwIndex))

  00004	8b 75 08	 mov	 esi, DWORD PTR _dwIndex$[ebp]
  00007	57		 push	 edi
  00008	56		 push	 esi
  00009	8b f9		 mov	 edi, ecx
  0000b	e8 00 00 00 00	 call	 ?CheckObjectIndex@CArea@@IBE_NK@Z ; CArea::CheckObjectIndex
  00010	84 c0		 test	 al, al
  00012	75 06		 jne	 SHORT $LN2@GetObjectD

; 1000 : }

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
$LN2@GetObjectD:

; 998  : 	*ppObjectData = &m_ObjectDataVector[dwIndex];

  0001a	8b 45 0c	 mov	 eax, DWORD PTR _ppObjectData$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1899 :         return _My_data._Myfirst[_Pos];

  0001d	8d 0c 76	 lea	 ecx, DWORD PTR [esi+esi*2]
  00020	c1 e1 04	 shl	 ecx, 4
  00023	03 4f 04	 add	 ecx, DWORD PTR [edi+4]
  00026	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 998  : 	*ppObjectData = &m_ObjectDataVector[dwIndex];

  00027	89 08		 mov	 DWORD PTR [eax], ecx

; 999  : 	return true;

  00029	b0 01		 mov	 al, 1

; 1000 : }

  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?GetObjectDataPointer@CArea@@QBE_NKPAPBUSObjectData@1@@Z ENDP ; CArea::GetObjectDataPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?GetObjectDataCount@CArea@@QAEKXZ
_TEXT	SEGMENT
?GetObjectDataCount@CArea@@QAEKXZ PROC			; CArea::GetObjectDataCount, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00000	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00003	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00008	2b 51 04	 sub	 edx, DWORD PTR [ecx+4]
  0000b	f7 ea		 imul	 edx
  0000d	c1 fa 03	 sar	 edx, 3
  00010	8b c2		 mov	 eax, edx
  00012	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00015	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 988  : }

  00017	c3		 ret	 0
?GetObjectDataCount@CArea@@QAEKXZ ENDP			; CArea::GetObjectDataCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?Load@CArea@@QAE_NPBD@Z
_TEXT	SEGMENT
_strObjectDataFileName$ = -112				; size = 24
_strAmbienceDataFileName$ = -88				; size = 24
$T2 = -64						; size = 24
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szPathName$ = 8					; size = 4
?Load@CArea@@QAE_NPBD@Z PROC				; CArea::Load, COMDAT
; _this$ = ecx

; 789  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Load@CArea@@QAE_NPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 64	 sub	 esp, 100		; 00000064H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b f1		 mov	 esi, ecx
  0002c	8b 7d 08	 mov	 edi, DWORD PTR _c_szPathName$[ebp]

; 790  : 	Clear();

  0002f	e8 00 00 00 00	 call	 ?Clear@CArea@@QAEXXZ	; CArea::Clear
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00034	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_0N@IIOKECFB@AreaData?4txt@+8
  00039	0f 57 c0	 xorps	 xmm0, xmm0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0003c	0f 11 45 d8	 movups	 XMMWORD PTR $T3[ebp], xmm0

; 2629 :             _My_data._Mysize = _Count;

  00040	c7 45 e8 0c 00
	00 00		 mov	 DWORD PTR $T3[ebp+16], 12 ; 0000000cH

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00047	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0N@IIOKECFB@AreaData?4txt@

; 2630 :             _My_data._Myres  = _BUF_SIZE - 1;

  0004f	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 15 ; 0000000fH

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00056	66 0f d6 45 d8	 movq	 QWORD PTR $T3[ebp], xmm0
  0005b	89 45 e0	 mov	 DWORD PTR $T3[ebp+8], eax

; 2637 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  0005e	c6 45 e4 00	 mov	 BYTE PTR $T3[ebp+12], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 792  : 	std::string strObjectDataFileName = c_szPathName + std::string("AreaData.txt");

  00062	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00065	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006c	50		 push	 eax
  0006d	8d 45 90	 lea	 eax, DWORD PTR _strObjectDataFileName$[ebp]
  00070	57		 push	 edi
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD$$QAV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00077	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4832 :         if (_My_data._Large_string_engaged()) {

  0007a	8b 4d ec	 mov	 ecx, DWORD PTR $T3[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 792  : 	std::string strObjectDataFileName = c_szPathName + std::string("AreaData.txt");

  0007d	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4832 :         if (_My_data._Large_string_engaged()) {

  00081	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00084	72 2c		 jb	 SHORT $LN57@Load
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00086	8b 55 d8	 mov	 edx, DWORD PTR $T3[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00089	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008a	8b c2		 mov	 eax, edx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0008c	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00092	72 14		 jb	 SHORT $LN67@Load

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00094	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00097	83 c1 23	 add	 ecx, 35			; 00000023H
  0009a	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0009c	83 c0 fc	 add	 eax, -4			; fffffffcH
  0009f	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a2	0f 87 7d 01 00
	00		 ja	 $LN208@Load
$LN67@Load:

; 265  :         ::operator delete(_Ptr, _Bytes);

  000a8	51		 push	 ecx
  000a9	52		 push	 edx
  000aa	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000af	83 c4 08	 add	 esp, 8
$LN57@Load:
  000b2	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  000b5	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  000bc	6a 20		 push	 32			; 00000020H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  000be	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 15 ; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000c5	c6 45 d8 00	 mov	 BYTE PTR $T3[ebp], 0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000c9	0f 11 45 c0	 movups	 XMMWORD PTR $T2[ebp], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  000cd	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 0

; 2650 :         _My_data._Myres               = _BUF_SIZE - 1;

  000d4	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 15 ; 0000000fH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  000db	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000e0	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_0BF@EMGBEFOB@AreaAmbienceData?4txt@

; 2653 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000e7	89 45 c0	 mov	 DWORD PTR $T2[ebp], eax

; 2654 : 
; 2655 :         _Start_element_lifetimes(_Unfancy(_New_ptr), _New_capacity + 1);
; 2656 : 
; 2657 :         _My_data._Mysize = _Count;

  000ea	c7 45 d0 14 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 20 ; 00000014H

; 2658 :         _My_data._Myres  = _New_capacity;

  000f1	c7 45 d4 1f 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 31 ; 0000001fH

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000f8	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  000fb	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0BF@EMGBEFOB@AreaAmbienceData?4txt@+16
  00101	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 2664 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  00104	c6 40 14 00	 mov	 BYTE PTR [eax+20], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 793  : 	std::string strAmbienceDataFileName = c_szPathName + std::string("AreaAmbienceData.txt");

  00108	8d 45 c0	 lea	 eax, DWORD PTR $T2[ebp]
  0010b	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0010f	50		 push	 eax
  00110	8d 45 a8	 lea	 eax, DWORD PTR _strAmbienceDataFileName$[ebp]
  00113	57		 push	 edi
  00114	50		 push	 eax
  00115	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD$$QAV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0011a	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  0011d	8b 4d d4	 mov	 ecx, DWORD PTR $T2[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 793  : 	std::string strAmbienceDataFileName = c_szPathName + std::string("AreaAmbienceData.txt");

  00120	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00124	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  00127	72 2c		 jb	 SHORT $LN121@Load
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00129	8b 55 c0	 mov	 edx, DWORD PTR $T2[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0012c	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0012d	8b c2		 mov	 eax, edx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0012f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00135	72 14		 jb	 SHORT $LN131@Load

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00137	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0013a	83 c1 23	 add	 ecx, 35			; 00000023H
  0013d	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0013f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00142	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00145	0f 87 df 00 00
	00		 ja	 $LN209@Load
$LN131@Load:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0014b	51		 push	 ecx
  0014c	52		 push	 edx
  0014d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00152	83 c4 08	 add	 esp, 8
$LN121@Load:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00155	83 7d a4 10	 cmp	 DWORD PTR _strObjectDataFileName$[ebp+20], 16 ; 00000010H

; 2235 :         const value_type* _Result = _Bx._Buf;

  00159	8d 45 90	 lea	 eax, DWORD PTR _strObjectDataFileName$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 795  : 	__Load_LoadObject(strObjectDataFileName.c_str());

  0015c	8b ce		 mov	 ecx, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  0015e	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 0

; 2236 :         if (_Large_string_engaged()) {

  00165	0f 43 45 90	 cmovae	 eax, DWORD PTR _strObjectDataFileName$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 795  : 	__Load_LoadObject(strObjectDataFileName.c_str());

  00169	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  0016a	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 15 ; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00171	c6 45 c0 00	 mov	 BYTE PTR $T2[ebp], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 795  : 	__Load_LoadObject(strObjectDataFileName.c_str());

  00175	e8 00 00 00 00	 call	 ?__Load_LoadObject@CArea@@IAE_NPBD@Z ; CArea::__Load_LoadObject
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  0017a	83 7d bc 10	 cmp	 DWORD PTR _strAmbienceDataFileName$[ebp+20], 16 ; 00000010H

; 2235 :         const value_type* _Result = _Bx._Buf;

  0017e	8d 45 a8	 lea	 eax, DWORD PTR _strAmbienceDataFileName$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 796  : 	__Load_LoadAmbience(strAmbienceDataFileName.c_str());

  00181	8b ce		 mov	 ecx, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  00183	0f 43 45 a8	 cmovae	 eax, DWORD PTR _strAmbienceDataFileName$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 796  : 	__Load_LoadAmbience(strAmbienceDataFileName.c_str());

  00187	50		 push	 eax
  00188	e8 00 00 00 00	 call	 ?__Load_LoadAmbience@CArea@@IAE_NPBD@Z ; CArea::__Load_LoadAmbience

; 797  : 	__Load_BuildObjectInstances();

  0018d	8b ce		 mov	 ecx, esi
  0018f	e8 00 00 00 00	 call	 ?__Load_BuildObjectInstances@CArea@@IAEXXZ ; CArea::__Load_BuildObjectInstances
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00194	8b 4d bc	 mov	 ecx, DWORD PTR _strAmbienceDataFileName$[ebp+20]
  00197	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  0019a	72 28		 jb	 SHORT $LN162@Load
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0019c	8b 55 a8	 mov	 edx, DWORD PTR _strAmbienceDataFileName$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0019f	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001a0	8b c2		 mov	 eax, edx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  001a2	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001a8	72 10		 jb	 SHORT $LN172@Load

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001aa	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  001ad	83 c1 23	 add	 ecx, 35			; 00000023H
  001b0	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001b2	83 c0 fc	 add	 eax, -4			; fffffffcH
  001b5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001b8	77 75		 ja	 SHORT $LN196@Load
$LN172@Load:

; 265  :         ::operator delete(_Ptr, _Bytes);

  001ba	51		 push	 ecx
  001bb	52		 push	 edx
  001bc	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001c1	83 c4 08	 add	 esp, 8
$LN162@Load:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  001c4	8b 4d a4	 mov	 ecx, DWORD PTR _strObjectDataFileName$[ebp+20]

; 4841 :         _My_data._Mysize = 0;

  001c7	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _strAmbienceDataFileName$[ebp+16], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  001ce	c7 45 bc 0f 00
	00 00		 mov	 DWORD PTR _strAmbienceDataFileName$[ebp+20], 15 ; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  001d5	c6 45 a8 00	 mov	 BYTE PTR _strAmbienceDataFileName$[ebp], 0

; 2244 :         return _BUF_SIZE <= _Myres;

  001d9	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  001dc	72 28		 jb	 SHORT $LN189@Load
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001de	8b 55 90	 mov	 edx, DWORD PTR _strObjectDataFileName$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  001e1	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001e2	8b c2		 mov	 eax, edx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  001e4	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001ea	72 10		 jb	 SHORT $LN199@Load

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001ec	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  001ef	83 c1 23	 add	 ecx, 35			; 00000023H
  001f2	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001f4	83 c0 fc	 add	 eax, -4			; fffffffcH
  001f7	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001fa	77 33		 ja	 SHORT $LN196@Load
$LN199@Load:

; 265  :         ::operator delete(_Ptr, _Bytes);

  001fc	51		 push	 ecx
  001fd	52		 push	 edx
  001fe	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00203	83 c4 08	 add	 esp, 8
$LN189@Load:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 800  : 	return true;

  00206	b0 01		 mov	 al, 1

; 801  : }

  00208	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0020b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00212	59		 pop	 ecx
  00213	5f		 pop	 edi
  00214	5e		 pop	 esi
  00215	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00218	33 cd		 xor	 ecx, ebp
  0021a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0021f	8b e5		 mov	 esp, ebp
  00221	5d		 pop	 ebp
  00222	c2 04 00	 ret	 4
$LN208@Load:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00225	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN209@Load:
  0022a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN196@Load:
  0022f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN206@Load:
  00234	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Load@CArea@@QAE_NPBD@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Load@CArea@@QAE_NPBD@Z$1:
  00008	8d 4d 90	 lea	 ecx, DWORD PTR _strObjectDataFileName$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Load@CArea@@QAE_NPBD@Z$2:
  00010	8d 4d c0	 lea	 ecx, DWORD PTR $T2[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Load@CArea@@QAE_NPBD@Z$3:
  00018	8d 4d a8	 lea	 ecx, DWORD PTR _strAmbienceDataFileName$[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
  00024	cc		 int	 3
__ehhandler$?Load@CArea@@QAE_NPBD@Z:
  00025	90		 npad	 1
  00026	90		 npad	 1
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002e	8b 4a 90	 mov	 ecx, DWORD PTR [edx-112]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0003b	33 c8		 xor	 ecx, eax
  0003d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00042	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Load@CArea@@QAE_NPBD@Z
  00047	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Load@CArea@@QAE_NPBD@Z ENDP				; CArea::Load
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?Clear@CArea@@QAEXXZ
_TEXT	SEGMENT
_rkEftMgr$1$ = -8					; size = 4
_i$ = -4						; size = 4
?Clear@CArea@@QAEXXZ PROC				; CArea::Clear, COMDAT
; _this$ = ecx

; 1095 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 77 10	 mov	 esi, DWORD PTR [edi+16]
  0000e	3b 77 14	 cmp	 esi, DWORD PTR [edi+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1098 : 	for (it = m_ObjectInstanceVector.begin();it!=m_ObjectInstanceVector.end();++it)

  00011	74 11		 je	 SHORT $LN3@Clear
$LL78@Clear:

; 1099 : 		__Clear_DestroyObjectInstance(*it);

  00013	ff 36		 push	 DWORD PTR [esi]
  00015	8b cf		 mov	 ecx, edi
  00017	e8 00 00 00 00	 call	 ?__Clear_DestroyObjectInstance@CArea@@IAEXPAUSObjectInstance@1@@Z ; CArea::__Clear_DestroyObjectInstance
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 79   :         ++_Ptr;

  0001c	83 c6 04	 add	 esi, 4

; 163  :         return _Ptr == _Right._Ptr;

  0001f	3b 77 14	 cmp	 esi, DWORD PTR [edi+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1098 : 	for (it = m_ObjectInstanceVector.begin();it!=m_ObjectInstanceVector.end();++it)

  00022	75 ef		 jne	 SHORT $LL78@Clear
$LN3@Clear:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00024	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00027	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002a	74 03		 je	 SHORT $LN79@Clear

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  0002c	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN79@Clear:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0002f	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00032	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00035	74 03		 je	 SHORT $LN82@Clear

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00037	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN82@Clear:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0003a	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  0003d	3b 47 20	 cmp	 eax, DWORD PTR [edi+32]
  00040	74 03		 je	 SHORT $LN85@Clear

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00042	89 47 20	 mov	 DWORD PTR [edi+32], eax
$LN85@Clear:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00045	8b 47 28	 mov	 eax, DWORD PTR [edi+40]
  00048	3b 47 2c	 cmp	 eax, DWORD PTR [edi+44]
  0004b	74 03		 je	 SHORT $LN88@Clear

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  0004d	89 47 2c	 mov	 DWORD PTR [edi+44], eax
$LN88@Clear:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00050	8b 47 34	 mov	 eax, DWORD PTR [edi+52]
  00053	3b 47 38	 cmp	 eax, DWORD PTR [edi+56]
  00056	74 03		 je	 SHORT $LN91@Clear

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00058	89 47 38	 mov	 DWORD PTR [edi+56], eax
$LN91@Clear:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0005b	8b 47 40	 mov	 eax, DWORD PTR [edi+64]
  0005e	3b 47 44	 cmp	 eax, DWORD PTR [edi+68]
  00061	74 03		 je	 SHORT $LN94@Clear

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00063	89 47 44	 mov	 DWORD PTR [edi+68], eax
$LN94@Clear:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00066	8b 47 4c	 mov	 eax, DWORD PTR [edi+76]
  00069	3b 47 50	 cmp	 eax, DWORD PTR [edi+80]
  0006c	74 03		 je	 SHORT $LN97@Clear

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  0006e	89 47 50	 mov	 DWORD PTR [edi+80], eax
$LN97@Clear:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00071	8b 47 58	 mov	 eax, DWORD PTR [edi+88]
  00074	3b 47 5c	 cmp	 eax, DWORD PTR [edi+92]
  00077	74 03		 je	 SHORT $LN100@Clear

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00079	89 47 5c	 mov	 DWORD PTR [edi+92], eax
$LN100@Clear:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1111 : 	m_GraphicThingInstanceCRCMap.clear();

  0007c	8d 4f 64	 lea	 ecx, DWORD PTR [edi+100]
  0007f	e8 00 00 00 00	 call	 ?clear@?$_Tree@V?$_Tmap_traits@PAVCGraphicThingInstance@@KU?$less@PAVCGraphicThingInstance@@@std@@V?$allocator@U?$pair@QAVCGraphicThingInstance@@K@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<CGraphicThingInstance *,unsigned long,std::less<CGraphicThingInstance *>,std::allocator<std::pair<CGraphicThingInstance * const,unsigned long> >,0> >::clear
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00084	8b 47 6c	 mov	 eax, DWORD PTR [edi+108]
  00087	3b 47 70	 cmp	 eax, DWORD PTR [edi+112]
  0008a	74 03		 je	 SHORT $LN103@Clear

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  0008c	89 47 70	 mov	 DWORD PTR [edi+112], eax
$LN103@Clear:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0008f	8b 47 78	 mov	 eax, DWORD PTR [edi+120]
  00092	3b 47 7c	 cmp	 eax, DWORD PTR [edi+124]
  00095	74 03		 je	 SHORT $LN106@Clear

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00097	89 47 7c	 mov	 DWORD PTR [edi+124], eax
$LN106@Clear:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1116 : 	ClearPortal();

  0009a	8b cf		 mov	 ecx, edi
  0009c	c7 87 94 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+148], 0
  000a6	e8 00 00 00 00	 call	 ?ClearPortal@CArea@@QAEXXZ ; CArea::ClearPortal
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1127 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  000ab	8b b7 8c 00 00
	00		 mov	 esi, DWORD PTR [edi+140]
  000b1	8d 9f 8c 00 00
	00		 lea	 ebx, DWORD PTR [edi+140]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1118 : 	CEffectManager& rkEftMgr=CEffectManager::Instance();

  000b7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCEffectManager@@@@0PAVCEffectManager@@A ; CSingleton<CEffectManager>::ms_singleton
  000bd	89 4d f8	 mov	 DWORD PTR _rkEftMgr$1$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  000c0	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1121 : 	for (i = m_EffectInstanceMap.begin(); i != m_EffectInstanceMap.end(); ++i)

  000c2	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  000c5	3b c6		 cmp	 eax, esi
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1121 : 	for (i = m_EffectInstanceMap.begin(); i != m_EffectInstanceMap.end(); ++i)

  000c7	74 23		 je	 SHORT $LN6@Clear
  000c9	0f 1f 80 00 00
	00 00		 npad	 7
$LL24@Clear:

; 1122 : 	{
; 1123 : 		CEffectInstance * pEffectInstance = i->second;
; 1124 : 		rkEftMgr.DestroyUnsafeEffectInstance(pEffectInstance);

  000d0	ff 70 14	 push	 DWORD PTR [eax+20]
  000d3	e8 00 00 00 00	 call	 ?DestroyUnsafeEffectInstance@CEffectManager@@QAE_NPAVCEffectInstance@@@Z ; CEffectManager::DestroyUnsafeEffectInstance
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 199  :         _Mybase::operator++();

  000d8	8d 4d fc	 lea	 ecx, DWORD PTR _i$[ebp]
  000db	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >,std::_Iterator_base0>::operator++

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  000e0	8b 33		 mov	 esi, DWORD PTR [ebx]

; 233  :         return this->_Ptr == _Right._Ptr;

  000e2	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1121 : 	for (i = m_EffectInstanceMap.begin(); i != m_EffectInstanceMap.end(); ++i)

  000e5	8b 4d f8	 mov	 ecx, DWORD PTR _rkEftMgr$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 233  :         return this->_Ptr == _Right._Ptr;

  000e8	3b c6		 cmp	 eax, esi
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1121 : 	for (i = m_EffectInstanceMap.begin(); i != m_EffectInstanceMap.end(); ++i)

  000ea	75 e4		 jne	 SHORT $LL24@Clear
$LN6@Clear:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1358 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  000ec	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  000ef	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  000f3	75 20		 jne	 SHORT $LN35@Clear
$LL34@Clear:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  000f5	ff 77 08	 push	 DWORD PTR [edi+8]
  000f8	8b cb		 mov	 ecx, ebx
  000fa	53		 push	 ebx
  000fb	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CEffectInstance *>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 754  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00100	8b c7		 mov	 eax, edi

; 755  :     _Val         = static_cast<_Other&&>(_New_val);

  00102	8b 3f		 mov	 edi, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00104	6a 18		 push	 24			; 00000018H
  00106	50		 push	 eax
  00107	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0010c	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0010f	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00113	74 e0		 je	 SHORT $LL34@Clear
$LN35@Clear:

; 1362 :         _Scary->_Mysize = 0;

  00115	5f		 pop	 edi
  00116	89 76 04	 mov	 DWORD PTR [esi+4], esi
  00119	89 36		 mov	 DWORD PTR [esi], esi
  0011b	89 76 08	 mov	 DWORD PTR [esi+8], esi
  0011e	5e		 pop	 esi
  0011f	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0
  00126	5b		 pop	 ebx
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1127 : }

  00127	8b e5		 mov	 esp, ebp
  00129	5d		 pop	 ebp
  0012a	c3		 ret	 0
?Clear@CArea@@QAEXXZ ENDP				; CArea::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?SetMapOutDoor@CArea@@QAEXPAVCMapOutdoor@@@Z
_TEXT	SEGMENT
_pOwnerOutdoorMap$ = 8					; size = 4
?SetMapOutDoor@CArea@@QAEXPAVCMapOutdoor@@@Z PROC	; CArea::SetMapOutDoor, COMDAT
; _this$ = ecx

; 1199 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1200 : 	m_pOwnerOutdoorMap=pOwnerOutdoorMap;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pOwnerOutdoorMap$[ebp]
  00006	89 81 88 00 00
	00		 mov	 DWORD PTR [ecx+136], eax

; 1201 : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?SetMapOutDoor@CArea@@QAEXPAVCMapOutdoor@@@Z ENDP	; CArea::SetMapOutDoor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?CollectBlendRenderingObject@CArea@@QAEXAAV?$vector@PAVCGraphicThingInstance@@V?$allocator@PAVCGraphicThingInstance@@@std@@@std@@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_rkVct_pkBlendThingInst$ = 8				; size = 4
?CollectBlendRenderingObject@CArea@@QAEXAAV?$vector@PAVCGraphicThingInstance@@V?$allocator@PAVCGraphicThingInstance@@@std@@@std@@@Z PROC ; CArea::CollectBlendRenderingObject, COMDAT
; _this$ = ecx

; 192  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8b c1		 mov	 eax, ecx
  00006	56		 push	 esi
  00007	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000a	8b 70 28	 mov	 esi, DWORD PTR [eax+40]
  0000d	3b 70 2c	 cmp	 esi, DWORD PTR [eax+44]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 194  : 	for (i=m_ThingCloneInstaceVector.begin(); i!=m_ThingCloneInstaceVector.end(); ++i)

  00010	74 45		 je	 SHORT $LN3@CollectBle
  00012	53		 push	 ebx
  00013	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 778  :         auto& _My_data   = _Mypair._Myval2;

  00014	8b 7d 08	 mov	 edi, DWORD PTR _rkVct_pkBlendThingInst$[ebp]
$LL21@CollectBle:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 196  : 		CGraphicThingInstance* pkThingInst=*i;

  00017	8b 1e		 mov	 ebx, DWORD PTR [esi]

; 197  : 		if (pkThingInst->isShow())

  00019	8b cb		 mov	 ecx, ebx
  0001b	e8 00 00 00 00	 call	 ?isShow@CGraphicObjectInstance@@QAE_NXZ ; CGraphicObjectInstance::isShow
  00020	84 c0		 test	 al, al
  00022	74 26		 je	 SHORT $LN2@CollectBle

; 198  : 		{
; 199  : 			if (pkThingInst->HaveBlendThing())

  00024	8b cb		 mov	 ecx, ebx
  00026	e8 00 00 00 00	 call	 ?HaveBlendThing@CGraphicThingInstance@@QAE_NXZ ; CGraphicThingInstance::HaveBlendThing
  0002b	84 c0		 test	 al, al
  0002d	74 1b		 je	 SHORT $LN2@CollectBle
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  0002f	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00032	3b 4f 08	 cmp	 ecx, DWORD PTR [edi+8]
  00035	74 0a		 je	 SHORT $LN35@CollectBle

; 797  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00037	8b 06		 mov	 eax, DWORD PTR [esi]
  00039	89 01		 mov	 DWORD PTR [ecx], eax

; 798  :         } else {
; 799  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 800  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 801  :             _ASAN_VECTOR_RELEASE_GUARD;
; 802  :         }
; 803  : 
; 804  :         _Orphan_range(_Mylast, _Mylast);
; 805  :         _Ty& _Result = *_Mylast;
; 806  :         ++_Mylast;

  0003b	83 47 04 04	 add	 DWORD PTR [edi+4], 4

; 782  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  0003f	eb 09		 jmp	 SHORT $LN2@CollectBle
$LN35@CollectBle:

; 783  :         }
; 784  : 
; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00041	56		 push	 esi
  00042	51		 push	 ecx
  00043	8b cf		 mov	 ecx, edi
  00045	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCGraphicThingInstance@@@?$vector@PAVCGraphicThingInstance@@V?$allocator@PAVCGraphicThingInstance@@@std@@@std@@AAEPAPAVCGraphicThingInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CGraphicThingInstance *,std::allocator<CGraphicThingInstance *> >::_Emplace_reallocate<CGraphicThingInstance * const &>
$LN2@CollectBle:

; 163  :         return _Ptr == _Right._Ptr;

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]

; 79   :         ++_Ptr;

  0004d	83 c6 04	 add	 esi, 4

; 163  :         return _Ptr == _Right._Ptr;

  00050	3b 70 2c	 cmp	 esi, DWORD PTR [eax+44]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 194  : 	for (i=m_ThingCloneInstaceVector.begin(); i!=m_ThingCloneInstaceVector.end(); ++i)

  00053	75 c2		 jne	 SHORT $LL21@CollectBle
  00055	5f		 pop	 edi
  00056	5b		 pop	 ebx
$LN3@CollectBle:
  00057	5e		 pop	 esi

; 200  : 				rkVct_pkBlendThingInst.push_back(*i);
; 201  : 		}
; 202  : 	}
; 203  : }

  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
?CollectBlendRenderingObject@CArea@@QAEXAAV?$vector@PAVCGraphicThingInstance@@V?$allocator@PAVCGraphicThingInstance@@@std@@@std@@@Z ENDP ; CArea::CollectBlendRenderingObject
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?CollectRenderingObject@CArea@@QAEXAAV?$vector@PAVCGraphicThingInstance@@V?$allocator@PAVCGraphicThingInstance@@@std@@@std@@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_rkVct_pkOpaqueThingInst$ = 8				; size = 4
?CollectRenderingObject@CArea@@QAEXAAV?$vector@PAVCGraphicThingInstance@@V?$allocator@PAVCGraphicThingInstance@@@std@@@std@@@Z PROC ; CArea::CollectRenderingObject, COMDAT
; _this$ = ecx

; 178  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8b c1		 mov	 eax, ecx
  00006	56		 push	 esi
  00007	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000a	8b 70 28	 mov	 esi, DWORD PTR [eax+40]
  0000d	3b 70 2c	 cmp	 esi, DWORD PTR [eax+44]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 180  : 	for (i=m_ThingCloneInstaceVector.begin(); i!=m_ThingCloneInstaceVector.end(); ++i)

  00010	74 45		 je	 SHORT $LN3@CollectRen
  00012	53		 push	 ebx
  00013	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 778  :         auto& _My_data   = _Mypair._Myval2;

  00014	8b 7d 08	 mov	 edi, DWORD PTR _rkVct_pkOpaqueThingInst$[ebp]
$LL21@CollectRen:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 182  : 		CGraphicThingInstance* pkThingInst=*i;

  00017	8b 1e		 mov	 ebx, DWORD PTR [esi]

; 183  : 		if (pkThingInst->isShow())

  00019	8b cb		 mov	 ecx, ebx
  0001b	e8 00 00 00 00	 call	 ?isShow@CGraphicObjectInstance@@QAE_NXZ ; CGraphicObjectInstance::isShow
  00020	84 c0		 test	 al, al
  00022	74 26		 je	 SHORT $LN2@CollectRen

; 184  : 		{
; 185  : 			if (!pkThingInst->HaveBlendThing())

  00024	8b cb		 mov	 ecx, ebx
  00026	e8 00 00 00 00	 call	 ?HaveBlendThing@CGraphicThingInstance@@QAE_NXZ ; CGraphicThingInstance::HaveBlendThing
  0002b	84 c0		 test	 al, al
  0002d	75 1b		 jne	 SHORT $LN2@CollectRen
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  0002f	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00032	3b 4f 08	 cmp	 ecx, DWORD PTR [edi+8]
  00035	74 0a		 je	 SHORT $LN35@CollectRen

; 797  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00037	8b 06		 mov	 eax, DWORD PTR [esi]
  00039	89 01		 mov	 DWORD PTR [ecx], eax

; 798  :         } else {
; 799  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 800  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 801  :             _ASAN_VECTOR_RELEASE_GUARD;
; 802  :         }
; 803  : 
; 804  :         _Orphan_range(_Mylast, _Mylast);
; 805  :         _Ty& _Result = *_Mylast;
; 806  :         ++_Mylast;

  0003b	83 47 04 04	 add	 DWORD PTR [edi+4], 4

; 782  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  0003f	eb 09		 jmp	 SHORT $LN2@CollectRen
$LN35@CollectRen:

; 783  :         }
; 784  : 
; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00041	56		 push	 esi
  00042	51		 push	 ecx
  00043	8b cf		 mov	 ecx, edi
  00045	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCGraphicThingInstance@@@?$vector@PAVCGraphicThingInstance@@V?$allocator@PAVCGraphicThingInstance@@@std@@@std@@AAEPAPAVCGraphicThingInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CGraphicThingInstance *,std::allocator<CGraphicThingInstance *> >::_Emplace_reallocate<CGraphicThingInstance * const &>
$LN2@CollectRen:

; 163  :         return _Ptr == _Right._Ptr;

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]

; 79   :         ++_Ptr;

  0004d	83 c6 04	 add	 esi, 4

; 163  :         return _Ptr == _Right._Ptr;

  00050	3b 70 2c	 cmp	 esi, DWORD PTR [eax+44]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 180  : 	for (i=m_ThingCloneInstaceVector.begin(); i!=m_ThingCloneInstaceVector.end(); ++i)

  00053	75 c2		 jne	 SHORT $LL21@CollectRen
  00055	5f		 pop	 edi
  00056	5b		 pop	 ebx
$LN3@CollectRen:
  00057	5e		 pop	 esi

; 186  : 				rkVct_pkOpaqueThingInst.push_back(*i);
; 187  : 		}
; 188  : 	}
; 189  : }

  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
?CollectRenderingObject@CArea@@QAEXAAV?$vector@PAVCGraphicThingInstance@@V?$allocator@PAVCGraphicThingInstance@@@std@@@std@@@Z ENDP ; CArea::CollectRenderingObject
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ??1CArea@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CArea@@UAE@XZ PROC					; CArea::~CArea, COMDAT
; _this$ = ecx

; 1209 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CArea@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CArea@@6B@

; 1210 : 	Clear();

  0002b	e8 00 00 00 00	 call	 ?Clear@CArea@@QAEXXZ	; CArea::Clear

; 1211 : }

  00030	8d 8e 98 00 00
	00		 lea	 ecx, DWORD PTR [esi+152]
  00036	e8 00 00 00 00	 call	 ??1?$_Tree@V?$_Tset_traits@HU?$less@H@std@@V?$allocator@H@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tset_traits<int,std::less<int>,std::allocator<int>,0> >::~_Tree<std::_Tset_traits<int,std::less<int>,std::allocator<int>,0> >
  0003b	8d 8e 8c 00 00
	00		 lea	 ecx, DWORD PTR [esi+140]
  00041	e8 00 00 00 00	 call	 ??1?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> >,0> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00046	8b 46 78	 mov	 eax, DWORD PTR [esi+120]
  00049	85 c0		 test	 eax, eax
  0004b	74 4b		 je	 SHORT $LN12@CArea

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0004d	8b 8e 80 00 00
	00		 mov	 ecx, DWORD PTR [esi+128]
  00053	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00055	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00058	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0005e	72 16		 jb	 SHORT $LN28@CArea

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00060	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00063	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00066	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00068	83 c0 fc	 add	 eax, -4			; fffffffcH
  0006b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0006e	0f 87 a0 02 00
	00		 ja	 $LN221@CArea

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00074	8b c2		 mov	 eax, edx
$LN28@CArea:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00076	51		 push	 ecx
  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  0007d	c7 46 78 00 00
	00 00		 mov	 DWORD PTR [esi+120], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00084	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  00087	c7 46 7c 00 00
	00 00		 mov	 DWORD PTR [esi+124], 0

; 2051 :             _Myend   = nullptr;

  0008e	c7 86 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+128], 0
$LN12@CArea:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00098	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  0009b	85 c0		 test	 eax, eax
  0009d	74 45		 je	 SHORT $LN37@CArea

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0009f	8b 4e 74	 mov	 ecx, DWORD PTR [esi+116]
  000a2	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000a4	83 e1 f8	 and	 ecx, -8			; fffffff8H

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000a7	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000ad	72 16		 jb	 SHORT $LN53@CArea

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000af	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000b2	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000b5	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000b7	83 c0 fc	 add	 eax, -4			; fffffffcH
  000ba	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000bd	0f 87 51 02 00
	00		 ja	 $LN221@CArea

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000c3	8b c2		 mov	 eax, edx
$LN53@CArea:

; 265  :         ::operator delete(_Ptr, _Bytes);

  000c5	51		 push	 ecx
  000c6	50		 push	 eax
  000c7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  000cc	c7 46 6c 00 00
	00 00		 mov	 DWORD PTR [esi+108], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  000d3	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  000d6	c7 46 70 00 00
	00 00		 mov	 DWORD PTR [esi+112], 0

; 2051 :             _Myend   = nullptr;

  000dd	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0
$LN37@CArea:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1211 : }

  000e4	8d 4e 64	 lea	 ecx, DWORD PTR [esi+100]
  000e7	e8 00 00 00 00	 call	 ??1?$_Tree@V?$_Tmap_traits@PAVCGraphicThingInstance@@KU?$less@PAVCGraphicThingInstance@@@std@@V?$allocator@U?$pair@QAVCGraphicThingInstance@@K@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<CGraphicThingInstance *,unsigned long,std::less<CGraphicThingInstance *>,std::allocator<std::pair<CGraphicThingInstance * const,unsigned long> >,0> >::~_Tree<std::_Tmap_traits<CGraphicThingInstance *,unsigned long,std::less<CGraphicThingInstance *>,std::allocator<std::pair<CGraphicThingInstance * const,unsigned long> >,0> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  000ec	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  000ef	85 c0		 test	 eax, eax
  000f1	74 45		 je	 SHORT $LN64@CArea

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000f3	8b 4e 60	 mov	 ecx, DWORD PTR [esi+96]
  000f6	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000f8	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000fb	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00101	72 16		 jb	 SHORT $LN80@CArea

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00103	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00106	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00109	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0010b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0010e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00111	0f 87 fd 01 00
	00		 ja	 $LN221@CArea

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00117	8b c2		 mov	 eax, edx
$LN80@CArea:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00119	51		 push	 ecx
  0011a	50		 push	 eax
  0011b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00120	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00127	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  0012a	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0

; 2051 :             _Myend   = nullptr;

  00131	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
$LN64@CArea:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00138	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  0013b	85 c0		 test	 eax, eax
  0013d	74 45		 je	 SHORT $LN88@CArea

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0013f	8b 4e 54	 mov	 ecx, DWORD PTR [esi+84]
  00142	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00144	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00147	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0014d	72 16		 jb	 SHORT $LN104@CArea

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0014f	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00152	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00155	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00157	83 c0 fc	 add	 eax, -4			; fffffffcH
  0015a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0015d	0f 87 b1 01 00
	00		 ja	 $LN221@CArea

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00163	8b c2		 mov	 eax, edx
$LN104@CArea:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00165	51		 push	 ecx
  00166	50		 push	 eax
  00167	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  0016c	c7 46 4c 00 00
	00 00		 mov	 DWORD PTR [esi+76], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00173	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  00176	c7 46 50 00 00
	00 00		 mov	 DWORD PTR [esi+80], 0

; 2051 :             _Myend   = nullptr;

  0017d	c7 46 54 00 00
	00 00		 mov	 DWORD PTR [esi+84], 0
$LN88@CArea:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00184	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  00187	85 c0		 test	 eax, eax
  00189	74 45		 je	 SHORT $LN112@CArea

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0018b	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  0018e	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00190	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00193	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00199	72 16		 jb	 SHORT $LN128@CArea

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0019b	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0019e	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  001a1	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001a3	83 c0 fc	 add	 eax, -4			; fffffffcH
  001a6	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001a9	0f 87 65 01 00
	00		 ja	 $LN221@CArea

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  001af	8b c2		 mov	 eax, edx
$LN128@CArea:

; 265  :         ::operator delete(_Ptr, _Bytes);

  001b1	51		 push	 ecx
  001b2	50		 push	 eax
  001b3	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  001b8	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  001bf	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  001c2	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0

; 2051 :             _Myend   = nullptr;

  001c9	c7 46 48 00 00
	00 00		 mov	 DWORD PTR [esi+72], 0
$LN112@CArea:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  001d0	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  001d3	85 c0		 test	 eax, eax
  001d5	74 45		 je	 SHORT $LN136@CArea

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  001d7	8b 4e 3c	 mov	 ecx, DWORD PTR [esi+60]
  001da	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001dc	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  001df	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001e5	72 16		 jb	 SHORT $LN152@CArea

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001e7	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  001ea	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  001ed	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001ef	83 c0 fc	 add	 eax, -4			; fffffffcH
  001f2	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001f5	0f 87 19 01 00
	00		 ja	 $LN221@CArea

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  001fb	8b c2		 mov	 eax, edx
$LN152@CArea:

; 265  :         ::operator delete(_Ptr, _Bytes);

  001fd	51		 push	 ecx
  001fe	50		 push	 eax
  001ff	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00204	c7 46 34 00 00
	00 00		 mov	 DWORD PTR [esi+52], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  0020b	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  0020e	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0

; 2051 :             _Myend   = nullptr;

  00215	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
$LN136@CArea:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  0021c	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  0021f	85 c0		 test	 eax, eax
  00221	74 45		 je	 SHORT $LN160@CArea

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00223	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  00226	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00228	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0022b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00231	72 16		 jb	 SHORT $LN176@CArea

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00233	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00236	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00239	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0023b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0023e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00241	0f 87 cd 00 00
	00		 ja	 $LN221@CArea

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00247	8b c2		 mov	 eax, edx
$LN176@CArea:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00249	51		 push	 ecx
  0024a	50		 push	 eax
  0024b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00250	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00257	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  0025a	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0

; 2051 :             _Myend   = nullptr;

  00261	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0
$LN160@CArea:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00268	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0026b	85 c0		 test	 eax, eax
  0026d	74 45		 je	 SHORT $LN184@CArea

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0026f	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00272	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00274	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00277	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0027d	72 16		 jb	 SHORT $LN200@CArea

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0027f	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00282	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00285	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00287	83 c0 fc	 add	 eax, -4			; fffffffcH
  0028a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0028d	0f 87 81 00 00
	00		 ja	 $LN221@CArea

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00293	8b c2		 mov	 eax, edx
$LN200@CArea:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00295	51		 push	 ecx
  00296	50		 push	 eax
  00297	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  0029c	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  002a3	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  002a6	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0

; 2051 :             _Myend   = nullptr;

  002ad	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0
$LN184@CArea:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  002b4	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  002b7	85 c0		 test	 eax, eax
  002b9	74 41		 je	 SHORT $LN208@CArea

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  002bb	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  002be	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002c0	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  002c3	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  002c9	72 12		 jb	 SHORT $LN224@CArea

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  002cb	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  002ce	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  002d1	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  002d3	83 c0 fc	 add	 eax, -4			; fffffffcH
  002d6	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  002d9	77 39		 ja	 SHORT $LN221@CArea

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  002db	8b c2		 mov	 eax, edx
$LN224@CArea:

; 265  :         ::operator delete(_Ptr, _Bytes);

  002dd	51		 push	 ecx
  002de	50		 push	 eax
  002df	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  002e4	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  002eb	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  002ee	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 2051 :             _Myend   = nullptr;

  002f5	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN208@CArea:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1211 : }

  002fc	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  002ff	e8 00 00 00 00	 call	 ??1?$vector@USObjectData@CArea@@V?$allocator@USObjectData@CArea@@@std@@@std@@QAE@XZ ; std::vector<CArea::SObjectData,std::allocator<CArea::SObjectData> >::~vector<CArea::SObjectData,std::allocator<CArea::SObjectData> >
  00304	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00307	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0030e	59		 pop	 ecx
  0030f	5e		 pop	 esi
  00310	8b e5		 mov	 esp, ebp
  00312	5d		 pop	 ebp
  00313	c3		 ret	 0
$LN221@CArea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00314	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN230@CArea:
  00319	cc		 int	 3
  0031a	cc		 int	 3
  0031b	cc		 int	 3
  0031c	cc		 int	 3
  0031d	cc		 int	 3
  0031e	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CArea@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CArea@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CArea@@UAE@XZ ENDP					; CArea::~CArea
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ??0CArea@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
_this$ = -20						; size = 4
_this$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CArea@@QAE@XZ PROC					; CArea::CArea, COMDAT
; _this$ = ecx

; 1204 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CArea@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f9		 mov	 edi, ecx
  00029	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  0002c	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CArea@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 398  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00032	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  00039	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  00040	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1204 : {

  00047	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 398  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0004e	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  00055	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
  0005c	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
  00063	c7 47 1c 00 00
	00 00		 mov	 DWORD PTR [edi+28], 0
  0006a	c7 47 20 00 00
	00 00		 mov	 DWORD PTR [edi+32], 0
  00071	c7 47 24 00 00
	00 00		 mov	 DWORD PTR [edi+36], 0
  00078	c7 47 28 00 00
	00 00		 mov	 DWORD PTR [edi+40], 0
  0007f	c7 47 2c 00 00
	00 00		 mov	 DWORD PTR [edi+44], 0
  00086	c7 47 30 00 00
	00 00		 mov	 DWORD PTR [edi+48], 0
  0008d	c7 47 34 00 00
	00 00		 mov	 DWORD PTR [edi+52], 0
  00094	c7 47 38 00 00
	00 00		 mov	 DWORD PTR [edi+56], 0
  0009b	c7 47 3c 00 00
	00 00		 mov	 DWORD PTR [edi+60], 0
  000a2	c7 47 40 00 00
	00 00		 mov	 DWORD PTR [edi+64], 0
  000a9	c7 47 44 00 00
	00 00		 mov	 DWORD PTR [edi+68], 0
  000b0	c7 47 48 00 00
	00 00		 mov	 DWORD PTR [edi+72], 0
  000b7	c7 47 4c 00 00
	00 00		 mov	 DWORD PTR [edi+76], 0
  000be	c7 47 50 00 00
	00 00		 mov	 DWORD PTR [edi+80], 0
  000c5	c7 47 54 00 00
	00 00		 mov	 DWORD PTR [edi+84], 0
  000cc	c7 47 58 00 00
	00 00		 mov	 DWORD PTR [edi+88], 0
  000d3	c7 47 5c 00 00
	00 00		 mov	 DWORD PTR [edi+92], 0
  000da	c7 47 60 00 00
	00 00		 mov	 DWORD PTR [edi+96], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1204 : {

  000e1	8d 77 64	 lea	 esi, DWORD PTR [edi+100]
  000e4	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  000e8	6a 18		 push	 24			; 00000018H
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1204 : {

  000ea	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 437  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  000ed	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  000f3	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  000fa	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 347  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  000ff	89 00		 mov	 DWORD PTR [eax], eax

; 348  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  00101	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 349  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  00104	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 350  :         _Pnode->_Color = _Black;

  00107	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1943 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  0010d	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 398  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0010f	c7 47 6c 00 00
	00 00		 mov	 DWORD PTR [edi+108], 0
  00116	c7 47 70 00 00
	00 00		 mov	 DWORD PTR [edi+112], 0
  0011d	c7 47 74 00 00
	00 00		 mov	 DWORD PTR [edi+116], 0
  00124	c7 47 78 00 00
	00 00		 mov	 DWORD PTR [edi+120], 0
  0012b	c7 47 7c 00 00
	00 00		 mov	 DWORD PTR [edi+124], 0
  00132	c7 87 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+128], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1204 : {

  0013c	8d b7 8c 00 00
	00		 lea	 esi, DWORD PTR [edi+140]
  00142	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  00146	6a 18		 push	 24			; 00000018H
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1204 : {

  00148	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 437  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  0014b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00151	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  00158	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 347  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  0015d	89 00		 mov	 DWORD PTR [eax], eax

; 348  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  0015f	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 349  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  00162	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 350  :         _Pnode->_Color = _Black;

  00165	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1943 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  0016b	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1204 : {

  0016d	8d b7 98 00 00
	00		 lea	 esi, DWORD PTR [edi+152]
  00173	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  00177	6a 14		 push	 20			; 00000014H
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1204 : {

  00179	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 437  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  0017c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00182	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  00189	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0018e	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 347  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  00191	89 00		 mov	 DWORD PTR [eax], eax

; 348  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  00193	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 349  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  00196	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 350  :         _Pnode->_Color = _Black;

  00199	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1943 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  0019f	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1206 : }

  001a1	c7 87 84 00 00
	00 ff 00 ff 00	 mov	 DWORD PTR [edi+132], 16711935 ; 00ff00ffH
  001ab	8b c7		 mov	 eax, edi
  001ad	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001b0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001b7	59		 pop	 ecx
  001b8	5f		 pop	 edi
  001b9	5e		 pop	 esi
  001ba	8b e5		 mov	 esp, ebp
  001bc	5d		 pop	 ebp
  001bd	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CArea@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@USObjectData@CArea@@V?$allocator@USObjectData@CArea@@@std@@@std@@QAE@XZ ; std::vector<CArea::SObjectData,std::allocator<CArea::SObjectData> >::~vector<CArea::SObjectData,std::allocator<CArea::SObjectData> >
__unwindfunclet$??0CArea@@QAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 10	 add	 ecx, 16			; 00000010H
  00011	e9 00 00 00 00	 jmp	 ??1?$vector@PAUSObjectInstance@CArea@@V?$allocator@PAUSObjectInstance@CArea@@@std@@@std@@QAE@XZ ; std::vector<CArea::SObjectInstance *,std::allocator<CArea::SObjectInstance *> >::~vector<CArea::SObjectInstance *,std::allocator<CArea::SObjectInstance *> >
__unwindfunclet$??0CArea@@QAE@XZ$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0001c	e9 00 00 00 00	 jmp	 ??1?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@QAE@XZ ; std::vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >::~vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >
__unwindfunclet$??0CArea@@QAE@XZ$3:
  00021	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 28	 add	 ecx, 40			; 00000028H
  00027	e9 00 00 00 00	 jmp	 ??1?$vector@PAVCGraphicThingInstance@@V?$allocator@PAVCGraphicThingInstance@@@std@@@std@@QAE@XZ ; std::vector<CGraphicThingInstance *,std::allocator<CGraphicThingInstance *> >::~vector<CGraphicThingInstance *,std::allocator<CGraphicThingInstance *> >
__unwindfunclet$??0CArea@@QAE@XZ$4:
  0002c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	83 c1 34	 add	 ecx, 52			; 00000034H
  00032	e9 00 00 00 00	 jmp	 ??1?$vector@PAVCDungeonBlock@@V?$allocator@PAVCDungeonBlock@@@std@@@std@@QAE@XZ ; std::vector<CDungeonBlock *,std::allocator<CDungeonBlock *> >::~vector<CDungeonBlock *,std::allocator<CDungeonBlock *> >
__unwindfunclet$??0CArea@@QAE@XZ$5:
  00037	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	83 c1 40	 add	 ecx, 64			; 00000040H
  0003d	e9 00 00 00 00	 jmp	 ??1?$vector@PAVCGraphicThingInstance@@V?$allocator@PAVCGraphicThingInstance@@@std@@@std@@QAE@XZ ; std::vector<CGraphicThingInstance *,std::allocator<CGraphicThingInstance *> >::~vector<CGraphicThingInstance *,std::allocator<CGraphicThingInstance *> >
__unwindfunclet$??0CArea@@QAE@XZ$6:
  00042	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00048	e9 00 00 00 00	 jmp	 ??1?$vector@PAVCGraphicThingInstance@@V?$allocator@PAVCGraphicThingInstance@@@std@@@std@@QAE@XZ ; std::vector<CGraphicThingInstance *,std::allocator<CGraphicThingInstance *> >::~vector<CGraphicThingInstance *,std::allocator<CGraphicThingInstance *> >
__unwindfunclet$??0CArea@@QAE@XZ$7:
  0004d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	83 c1 58	 add	 ecx, 88			; 00000058H
  00053	e9 00 00 00 00	 jmp	 ??1?$vector@PAUSAmbienceInstance@CArea@@V?$allocator@PAUSAmbienceInstance@CArea@@@std@@@std@@QAE@XZ ; std::vector<CArea::SAmbienceInstance *,std::allocator<CArea::SAmbienceInstance *> >::~vector<CArea::SAmbienceInstance *,std::allocator<CArea::SAmbienceInstance *> >
__unwindfunclet$??0CArea@@QAE@XZ$8:
  00058	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005b	83 c1 64	 add	 ecx, 100		; 00000064H
  0005e	e9 00 00 00 00	 jmp	 ??1?$map@PAVCGraphicThingInstance@@KU?$less@PAVCGraphicThingInstance@@@std@@V?$allocator@U?$pair@QAVCGraphicThingInstance@@K@std@@@3@@std@@QAE@XZ
__unwindfunclet$??0CArea@@QAE@XZ$9:
  00063	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00066	83 c1 6c	 add	 ecx, 108		; 0000006cH
  00069	e9 00 00 00 00	 jmp	 ??1?$vector@USCRCWithNumber@CArea@@V?$allocator@USCRCWithNumber@CArea@@@std@@@std@@QAE@XZ ; std::vector<CArea::SCRCWithNumber,std::allocator<CArea::SCRCWithNumber> >::~vector<CArea::SCRCWithNumber,std::allocator<CArea::SCRCWithNumber> >
__unwindfunclet$??0CArea@@QAE@XZ$10:
  0006e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	83 c1 78	 add	 ecx, 120		; 00000078H
  00074	e9 00 00 00 00	 jmp	 ??1?$vector@PAVCGraphicThingInstance@@V?$allocator@PAVCGraphicThingInstance@@@std@@@std@@QAE@XZ ; std::vector<CGraphicThingInstance *,std::allocator<CGraphicThingInstance *> >::~vector<CGraphicThingInstance *,std::allocator<CGraphicThingInstance *> >
__unwindfunclet$??0CArea@@QAE@XZ$11:
  00079	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	81 c1 8c 00 00
	00		 add	 ecx, 140		; 0000008cH
  00082	e9 00 00 00 00	 jmp	 ??1?$map@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@@std@@QAE@XZ
  00087	cc		 int	 3
  00088	cc		 int	 3
  00089	cc		 int	 3
  0008a	cc		 int	 3
  0008b	cc		 int	 3
__ehhandler$??0CArea@@QAE@XZ:
  0008c	90		 npad	 1
  0008d	90		 npad	 1
  0008e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00092	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00095	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00098	33 c8		 xor	 ecx, eax
  0009a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CArea@@QAE@XZ
  000a4	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CArea@@QAE@XZ ENDP					; CArea::CArea
; Function compile flags: /Ogtp
;	COMDAT ??_GSObjectInstance@CArea@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GSObjectInstance@CArea@@UAEPAXI@Z PROC		; CArea::SObjectInstance::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SObjectInstance@CArea@@6B@
  00010	74 0b		 je	 SHORT $LN4@scalar
  00012	6a 28		 push	 40			; 00000028H
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_GSObjectInstance@CArea@@UAEPAXI@Z ENDP		; CArea::SObjectInstance::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h
;	COMDAT ??1SObjectInstance@CArea@@UAE@XZ
_TEXT	SEGMENT
??1SObjectInstance@CArea@@UAE@XZ PROC			; CArea::SObjectInstance::~SObjectInstance, COMDAT
; _this$ = ecx

; 151  : 			{

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7SObjectInstance@CArea@@6B@

; 152  : 			}

  00006	c3		 ret	 0
??1SObjectInstance@CArea@@UAE@XZ ENDP			; CArea::SObjectInstance::~SObjectInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?SetTree@SObjectInstance@CArea@@QAEXMMMKPBD@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_dwTreeCRC$ = 20					; size = 4
_c_szTreeName$ = 24					; size = 4
?SetTree@SObjectInstance@CArea@@QAEXMMMKPBD@Z PROC	; CArea::SObjectInstance::SetTree, COMDAT
; _this$ = ecx

; 599  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 600  : 	CSpeedTreeForestDirectX8& rkForest=CSpeedTreeForestDirectX8::Instance();
; 601  : 	pTree=rkForest.CreateInstance(x, y, z, dwTreeCRC, c_szTreeName);

  00003	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _z$[ebp]
  00008	56		 push	 esi
  00009	ff 75 18	 push	 DWORD PTR _c_szTreeName$[ebp]
  0000c	8b f1		 mov	 esi, ecx
  0000e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCSpeedTreeForestDirectX8@@@@0PAVCSpeedTreeForestDirectX8@@A ; CSingleton<CSpeedTreeForestDirectX8>::ms_singleton
  00014	ff 75 14	 push	 DWORD PTR _dwTreeCRC$[ebp]
  00017	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0001a	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00020	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y$[ebp]
  00025	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0002b	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  00030	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00035	e8 00 00 00 00	 call	 ?CreateInstance@CSpeedTreeForest@@QAEPAVCSpeedTreeWrapper@@MMMKPBD@Z ; CSpeedTreeForest::CreateInstance
  0003a	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 602  : 	dwType = prt::PROPERTY_TYPE_TREE;

  0003d	c7 46 04 01 00
	00 00		 mov	 DWORD PTR [esi+4], 1
  00044	5e		 pop	 esi

; 603  : }

  00045	5d		 pop	 ebp
  00046	c2 14 00	 ret	 20			; 00000014H
?SetTree@SObjectInstance@CArea@@QAEXMMMKPBD@Z ENDP	; CArea::SObjectInstance::SetTree
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h
;	COMDAT ??_GSAmbienceInstance@CArea@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GSAmbienceInstance@CArea@@UAEPAXI@Z PROC		; CArea::SAmbienceInstance::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 76   : 			virtual ~SAmbienceInstance() {}

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	8d 4e 20	 lea	 ecx, DWORD PTR [esi+32]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SAmbienceInstance@CArea@@6B@
  0000f	e8 00 00 00 00	 call	 ??1TPropertyAmbience@prt@@QAE@XZ
  00014	8b ce		 mov	 ecx, esi
  00016	e8 00 00 00 00	 call	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
  0001b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001f	74 0b		 je	 SHORT $LN7@scalar
  00021	6a 6c		 push	 108			; 0000006cH
  00023	56		 push	 esi
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN7@scalar:
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??_GSAmbienceInstance@CArea@@UAEPAXI@Z ENDP		; CArea::SAmbienceInstance::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?__GetVolumeFromDistance@SAmbienceInstance@CArea@@QAEMM@Z
_TEXT	SEGMENT
tv136 = 8						; size = 4
_fDistance$ = 8						; size = 4
?__GetVolumeFromDistance@SAmbienceInstance@CArea@@QAEMM@Z PROC ; CArea::SAmbienceInstance::__GetVolumeFromDistance, COMDAT
; _this$ = ecx

; 1306 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1307 : 	float fMaxVolumeAreaRadius = float(dwRange) * fMaxVolumeAreaPercentage;

  00003	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00006	66 0f 6e c0	 movd	 xmm0, eax
  0000a	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  0000e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00011	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  0001a	66 0f 5a d8	 cvtpd2ps xmm3, xmm0
  0001e	0f 57 c0	 xorps	 xmm0, xmm0
  00021	0f 28 d3	 movaps	 xmm2, xmm3
  00024	f3 0f 59 51 14	 mulss	 xmm2, DWORD PTR [ecx+20]

; 1308 : 	if (fMaxVolumeAreaRadius <= 0.0f)

  00029	0f 2f c2	 comiss	 xmm0, xmm2
  0002c	73 2e		 jae	 SHORT $LN5@GetVolumeF

; 1309 : 		return 1.0f;
; 1310 : 	if (fDistance <= fMaxVolumeAreaRadius)

  0002e	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _fDistance$[ebp]
  00033	0f 2f d1	 comiss	 xmm2, xmm1
  00036	73 24		 jae	 SHORT $LN5@GetVolumeF

; 1312 : 
; 1313 : 	return 1.0f - ((fDistance - fMaxVolumeAreaRadius) / (dwRange - fMaxVolumeAreaRadius));

  00038	f3 0f 5c ca	 subss	 xmm1, xmm2
  0003c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00044	f3 0f 5c da	 subss	 xmm3, xmm2
  00048	f3 0f 5e cb	 divss	 xmm1, xmm3
  0004c	f3 0f 5c c1	 subss	 xmm0, xmm1
  00050	f3 0f 11 45 08	 movss	 DWORD PTR tv136[ebp], xmm0
  00055	d9 45 08	 fld	 DWORD PTR tv136[ebp]

; 1314 : }

  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
$LN5@GetVolumeF:

; 1311 : 		return 1.0f;

  0005c	d9 e8		 fld1

; 1314 : }

  0005e	5d		 pop	 ebp
  0005f	c2 04 00	 ret	 4
?__GetVolumeFromDistance@SAmbienceInstance@CArea@@QAEMM@Z ENDP ; CArea::SAmbienceInstance::__GetVolumeFromDistance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?Picking@SAmbienceInstance@CArea@@QAE_NXZ
_TEXT	SEGMENT
$T1 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
?Picking@SAmbienceInstance@CArea@@QAE_NXZ PROC		; CArea::SAmbienceInstance::Picking, COMDAT
; _this$ = ecx

; 1343 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00010	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1344 : 	return CGraphicCollisionObject::IntersectSphere(D3DXVECTOR3(fx, fy, fz), dwRange);

  00015	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00018	f3 0f 11 45 f0	 movss	 DWORD PTR $T1[ebp], xmm0

; 181  :     y = fy;

  0001d	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00022	f3 0f 11 45 f4	 movss	 DWORD PTR $T1[ebp+4], xmm0

; 182  :     z = fz;

  00027	f3 0f 10 41 0c	 movss	 xmm0, DWORD PTR [ecx+12]
  0002c	f3 0f 11 45 f8	 movss	 DWORD PTR $T1[ebp+8], xmm0
  00031	66 0f 6e c0	 movd	 xmm0, eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1344 : 	return CGraphicCollisionObject::IntersectSphere(D3DXVECTOR3(fx, fy, fz), dwRange);

  00035	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00039	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0003c	51		 push	 ecx
  0003d	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  00046	8d 45 f0	 lea	 eax, DWORD PTR $T1[ebp]
  00049	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0004d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 ?IntersectSphere@CGraphicCollisionObject@@IAE_NABUD3DXVECTOR3@@M@Z ; CGraphicCollisionObject::IntersectSphere

; 1345 : }

  00058	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005b	33 cd		 xor	 ecx, ebp
  0005d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
?Picking@SAmbienceInstance@CArea@@QAE_NXZ ENDP		; CArea::SAmbienceInstance::Picking
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?Render@SAmbienceInstance@CArea@@QAEXXZ
_TEXT	SEGMENT
tv207 = -16						; size = 8
_fxAdd$1$ = -8						; size = 4
tv209 = -4						; size = 4
?Render@SAmbienceInstance@CArea@@QAEXXZ PROC		; CArea::SAmbienceInstance::Render, COMDAT
; _this$ = ecx

; 1317 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 1318 : 	float fBoxSize = 10.0f;
; 1319 : 	STATEMANAGER.SetRenderState(D3DRS_TEXTUREFACTOR, 0xff00ff00);

  00008	68 00 ff 00 ff	 push	 -16711936		; ff00ff00H
  0000d	8b f1		 mov	 esi, ecx
  0000f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00015	6a 3c		 push	 60			; 0000003cH
  00017	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 1320 : 	RenderCube(fx-fBoxSize, fy-fBoxSize, fz-fBoxSize, fx+fBoxSize, fy+fBoxSize, fz+fBoxSize);

  0001c	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@41200000
  00024	83 ec 18	 sub	 esp, 24			; 00000018H
  00027	f3 0f 10 56 0c	 movss	 xmm2, DWORD PTR [esi+12]
  0002c	8b ce		 mov	 ecx, esi
  0002e	f3 0f 10 5e 08	 movss	 xmm3, DWORD PTR [esi+8]
  00033	0f 28 c2	 movaps	 xmm0, xmm2
  00036	f3 0f 10 66 04	 movss	 xmm4, DWORD PTR [esi+4]
  0003b	f3 0f 58 c1	 addss	 xmm0, xmm1
  0003f	f3 0f 5c d1	 subss	 xmm2, xmm1
  00043	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  00049	0f 28 c3	 movaps	 xmm0, xmm3
  0004c	f3 0f 58 c1	 addss	 xmm0, xmm1
  00050	f3 0f 5c d9	 subss	 xmm3, xmm1
  00054	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  0005a	0f 28 c4	 movaps	 xmm0, xmm4
  0005d	f3 0f 58 c1	 addss	 xmm0, xmm1
  00061	f3 0f 5c e1	 subss	 xmm4, xmm1
  00065	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  0006b	f3 0f 11 54 24
	08		 movss	 DWORD PTR [esp+8], xmm2
  00071	f3 0f 11 5c 24
	04		 movss	 DWORD PTR [esp+4], xmm3
  00077	f3 0f 11 24 24	 movss	 DWORD PTR [esp], xmm4
  0007c	e8 00 00 00 00	 call	 ?RenderCube@CScreen@@QAEXMMMMMM@Z ; CScreen::RenderCube

; 1321 : 	STATEMANAGER.SetRenderState(D3DRS_TEXTUREFACTOR, 0xffffffff);

  00081	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00087	6a ff		 push	 -1
  00089	6a 3c		 push	 60			; 0000003cH
  0008b	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 1322 : 	RenderSphere(NULL, fx, fy, fz, float(dwRange) * fMaxVolumeAreaPercentage, D3DFILL_POINT);

  00090	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00093	8b ce		 mov	 ecx, esi
  00095	6a 01		 push	 1
  00097	83 ec 10	 sub	 esp, 16			; 00000010H
  0009a	66 0f 6e c0	 movd	 xmm0, eax
  0009e	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  000a2	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000a5	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  000ae	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  000b2	f3 0f 59 46 14	 mulss	 xmm0, DWORD PTR [esi+20]
  000b7	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  000bd	f3 0f 10 46 0c	 movss	 xmm0, DWORD PTR [esi+12]
  000c2	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  000c8	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  000cd	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000d3	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  000d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000dd	6a 00		 push	 0
  000df	e8 00 00 00 00	 call	 ?RenderSphere@CScreen@@QAEXPBUD3DXMATRIX@@MMMMW4_D3DFILLMODE@@@Z ; CScreen::RenderSphere

; 1323 : 	RenderSphere(NULL, fx, fy, fz, float(dwRange), D3DFILL_POINT);

  000e4	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000e7	8b ce		 mov	 ecx, esi
  000e9	6a 01		 push	 1
  000eb	83 ec 10	 sub	 esp, 16			; 00000010H
  000ee	66 0f 6e c0	 movd	 xmm0, eax
  000f2	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  000f6	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000f9	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  00102	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00106	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  0010c	f3 0f 10 46 0c	 movss	 xmm0, DWORD PTR [esi+12]
  00111	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00117	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  0011c	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00122	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  00127	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012c	6a 00		 push	 0
  0012e	e8 00 00 00 00	 call	 ?RenderSphere@CScreen@@QAEXPBUD3DXMATRIX@@MMMMW4_D3DFILLMODE@@@Z ; CScreen::RenderSphere

; 1324 : 	RenderCircle2d(fx, fy, fz, float(dwRange) * fMaxVolumeAreaPercentage);

  00133	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00136	6a 32		 push	 50			; 00000032H
  00138	66 0f 6e c0	 movd	 xmm0, eax
  0013c	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00140	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00143	83 ec 10	 sub	 esp, 16			; 00000010H
  00146	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  0014f	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00153	f3 0f 59 46 14	 mulss	 xmm0, DWORD PTR [esi+20]
  00158	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  0015e	f3 0f 10 46 0c	 movss	 xmm0, DWORD PTR [esi+12]
  00163	8b ce		 mov	 ecx, esi
  00165	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0016b	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  00170	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00176	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  0017b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00180	e8 00 00 00 00	 call	 ?RenderCircle2d@CScreen@@QAEXMMMMH@Z ; CScreen::RenderCircle2d

; 1325 : 	RenderCircle2d(fx, fy, fz, float(dwRange));

  00185	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00188	8b ce		 mov	 ecx, esi
  0018a	6a 32		 push	 50			; 00000032H
  0018c	83 ec 10	 sub	 esp, 16			; 00000010H
  0018f	66 0f 6e c0	 movd	 xmm0, eax
  00193	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00197	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0019a	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  001a3	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  001a7	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  001ad	f3 0f 10 46 0c	 movss	 xmm0, DWORD PTR [esi+12]
  001b2	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  001b8	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  001bd	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  001c3	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  001c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001cd	e8 00 00 00 00	 call	 ?RenderCircle2d@CScreen@@QAEXMMMMH@Z ; CScreen::RenderCircle2d
  001d2	33 db		 xor	 ebx, ebx
$LL4@Render:

; 1329 : 		float fxAdd = cosf(float(i) * D3DX_PI/4.0f) * float(dwRange) / 2.0f;

  001d4	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  001d7	0f 57 c0	 xorps	 xmm0, xmm0
  001da	f3 0f 2a c3	 cvtsi2ss xmm0, ebx
  001de	0f 57 c9	 xorps	 xmm1, xmm1
  001e1	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40490fdb
  001e9	f2 0f 2a c8	 cvtsi2sd xmm1, eax
  001ed	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001f0	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3e800000
  001f8	f2 0f 58 0c c5
	00 00 00 00	 addsd	 xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 653  :             return (float)cos(_X);

  00201	0f 5a d0	 cvtps2pd xmm2, xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1329 : 		float fxAdd = cosf(float(i) * D3DX_PI/4.0f) * float(dwRange) / 2.0f;

  00204	66 0f 5a c1	 cvtpd2ps xmm0, xmm1
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 653  :             return (float)cos(_X);

  00208	f2 0f 11 55 f0	 movsd	 QWORD PTR tv207[ebp], xmm2
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1329 : 		float fxAdd = cosf(float(i) * D3DX_PI/4.0f) * float(dwRange) / 2.0f;

  0020d	f3 0f 11 45 fc	 movss	 DWORD PTR tv209[ebp], xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 653  :             return (float)cos(_X);

  00212	0f 28 c2	 movaps	 xmm0, xmm2
  00215	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
  0021a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1329 : 		float fxAdd = cosf(float(i) * D3DX_PI/4.0f) * float(dwRange) / 2.0f;

  0021e	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR tv209[ebp]
  00223	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  0022b	f3 0f 11 45 f8	 movss	 DWORD PTR _fxAdd$1$[ebp], xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 758  :             return (float)sin(_X);

  00230	f2 0f 10 45 f0	 movsd	 xmm0, QWORD PTR tv207[ebp]
  00235	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1332 : 		if (i%2)

  0023a	f3 0f 10 5d f8	 movss	 xmm3, DWORD PTR _fxAdd$1$[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 758  :             return (float)sin(_X);

  0023f	0f 57 e4	 xorps	 xmm4, xmm4
  00242	f2 0f 5a e0	 cvtsd2ss xmm4, xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1330 : 		float fyAdd = sinf(float(i) * D3DX_PI/4.0f) * float(dwRange) / 2.0f;

  00246	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0024e	f3 0f 59 65 fc	 mulss	 xmm4, DWORD PTR tv209[ebp]
  00253	f3 0f 59 e0	 mulss	 xmm4, xmm0

; 1332 : 		if (i%2)

  00257	f6 c3 01	 test	 bl, 1
  0025a	74 08		 je	 SHORT $LN5@Render

; 1333 : 		{
; 1334 : 			fxAdd /= 2.0f;

  0025c	f3 0f 59 d8	 mulss	 xmm3, xmm0

; 1335 : 			fyAdd /= 2.0f;

  00260	f3 0f 59 e0	 mulss	 xmm4, xmm0
$LN5@Render:

; 1336 : 		}
; 1337 : 
; 1338 : 		RenderLine2d(fx + fxAdd, fy + fyAdd, fx - fxAdd, fy - fyAdd, fz);

  00264	f3 0f 10 46 0c	 movss	 xmm0, DWORD PTR [esi+12]
  00269	83 ec 14	 sub	 esp, 20			; 00000014H
  0026c	f3 0f 10 4e 08	 movss	 xmm1, DWORD PTR [esi+8]
  00271	8b ce		 mov	 ecx, esi
  00273	f3 0f 10 56 04	 movss	 xmm2, DWORD PTR [esi+4]
  00278	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  0027e	0f 28 c1	 movaps	 xmm0, xmm1
  00281	f3 0f 5c c4	 subss	 xmm0, xmm4
  00285	f3 0f 58 cc	 addss	 xmm1, xmm4
  00289	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  0028f	0f 28 c2	 movaps	 xmm0, xmm2
  00292	f3 0f 5c c3	 subss	 xmm0, xmm3
  00296	f3 0f 58 d3	 addss	 xmm2, xmm3
  0029a	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  002a0	f3 0f 11 4c 24
	04		 movss	 DWORD PTR [esp+4], xmm1
  002a6	f3 0f 11 14 24	 movss	 DWORD PTR [esp], xmm2
  002ab	e8 00 00 00 00	 call	 ?RenderLine2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderLine2d
  002b0	43		 inc	 ebx
  002b1	83 fb 04	 cmp	 ebx, 4
  002b4	0f 8c 1a ff ff
	ff		 jl	 $LL4@Render

; 1326 : 
; 1327 : 	for (int i = 0; i < 4; ++i)

  002ba	5e		 pop	 esi
  002bb	5b		 pop	 ebx

; 1339 : 	}
; 1340 : }

  002bc	8b e5		 mov	 esp, ebp
  002be	5d		 pop	 ebp
  002bf	c3		 ret	 0
?Render@SAmbienceInstance@CArea@@QAEXXZ ENDP		; CArea::SAmbienceInstance::Render
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?UpdateLoopSound@SAmbienceInstance@CArea@@QAEXMMM@Z
_TEXT	SEGMENT
_fDistance$1$ = -4					; size = 4
_fxCenter$ = 8						; size = 4
_fyCenter$ = 12						; size = 4
_fzCenter$ = 16						; size = 4
?UpdateLoopSound@SAmbienceInstance@CArea@@QAEXMMM@Z PROC ; CArea::SAmbienceInstance::UpdateLoopSound, COMDAT
; _this$ = ecx

; 1274 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 08	 sub	 esp, 8
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx

; 1275 : 	float fDistance = sqrtf((fx - fxCenter)*(fx - fxCenter) + (fy - fyCenter)*(fy - fyCenter) + (fz - fzCenter)*(fz - fzCenter));

  0000d	f3 0f 10 4f 08	 movss	 xmm1, DWORD PTR [edi+8]
  00012	f3 0f 5c 4d 0c	 subss	 xmm1, DWORD PTR _fyCenter$[ebp]
  00017	f3 0f 10 57 04	 movss	 xmm2, DWORD PTR [edi+4]
  0001c	f3 0f 5c 55 08	 subss	 xmm2, DWORD PTR _fxCenter$[ebp]
  00021	f3 0f 10 47 0c	 movss	 xmm0, DWORD PTR [edi+12]
  00026	f3 0f 5c 45 10	 subss	 xmm0, DWORD PTR _fzCenter$[ebp]
  0002b	f3 0f 59 c9	 mulss	 xmm1, xmm1
  0002f	f3 0f 59 d2	 mulss	 xmm2, xmm2
  00033	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00037	f3 0f 58 ca	 addss	 xmm1, xmm2
  0003b	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  0003f	0f 5a c1	 cvtps2pd xmm0, xmm1
  00042	0f 57 c9	 xorps	 xmm1, xmm1
  00045	66 0f 2e c8	 ucomisd xmm1, xmm0
  00049	77 06		 ja	 SHORT $LN24@UpdateLoop
  0004b	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  0004f	eb 05		 jmp	 SHORT $LN25@UpdateLoop
$LN24@UpdateLoop:
  00051	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN25@UpdateLoop:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1276 : 	if (DWORD(fDistance) < dwRange)

  00056	8b 77 18	 mov	 esi, DWORD PTR [edi+24]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  00059	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0005d	f3 0f 11 44 24
	0c		 movss	 DWORD PTR _fDistance$1$[esp+16], xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1276 : 	if (DWORD(fDistance) < dwRange)

  00063	e8 00 00 00 00	 call	 __ftol3
  00068	3b 47 10	 cmp	 eax, DWORD PTR [edi+16]
  0006b	73 7f		 jae	 SHORT $LN2@UpdateLoop

; 1277 : 	{
; 1278 : 		if (-1 == iPlaySoundIndex)

  0006d	83 fe ff	 cmp	 esi, -1
  00070	75 4f		 jne	 SHORT $LN27@UpdateLoop
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1864 :         return _My_data._Myfirst == _My_data._Mylast;

  00072	8b 47 5c	 mov	 eax, DWORD PTR [edi+92]
  00075	3b 47 60	 cmp	 eax, DWORD PTR [edi+96]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1280 : 			if (AmbienceData.AmbienceSoundVector.empty())

  00078	0f 84 86 00 00
	00		 je	 $LN7@UpdateLoop
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  0007e	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2236 :         if (_Large_string_engaged()) {

  00082	72 02		 jb	 SHORT $LN18@UpdateLoop

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  00084	8b 00		 mov	 eax, DWORD PTR [eax]
$LN18@UpdateLoop:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1284 : 			iPlaySoundIndex = CSoundManager::Instance().PlayAmbienceSound3D(fx, fy, fz, c_szFileName, 0);

  00086	f3 0f 10 47 0c	 movss	 xmm0, DWORD PTR [edi+12]
  0008b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCSoundManager@@@@0PAVCSoundManager@@A ; CSingleton<CSoundManager>::ms_singleton
  00091	6a 00		 push	 0
  00093	50		 push	 eax
  00094	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00097	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0009d	f3 0f 10 47 08	 movss	 xmm0, DWORD PTR [edi+8]
  000a2	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000a8	f3 0f 10 47 04	 movss	 xmm0, DWORD PTR [edi+4]
  000ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b2	e8 00 00 00 00	 call	 ?PlayAmbienceSound3D@CSoundManager@@QAEHMMMPBDH@Z ; CSoundManager::PlayAmbienceSound3D
  000b7	8b f0		 mov	 esi, eax
  000b9	89 77 18	 mov	 DWORD PTR [edi+24], esi

; 1285 : //			Tracef(" %d : LoopPlay [%f] : %s\n", iPlaySoundIndex, fDistance, c_szFileName);
; 1286 : 		}
; 1287 : 
; 1288 : 		if (-1 != iPlaySoundIndex)

  000bc	83 fe ff	 cmp	 esi, -1
  000bf	74 43		 je	 SHORT $LN7@UpdateLoop
$LN27@UpdateLoop:

; 1289 : 		{
; 1290 : //			Tracef("%d : %f\n", iPlaySoundIndex, __GetVolumeFromDistance(fDistance));
; 1291 : 			CSoundManager::Instance().SetSoundVolume3D(iPlaySoundIndex, __GetVolumeFromDistance(fDistance));

  000c1	f3 0f 10 44 24
	0c		 movss	 xmm0, DWORD PTR _fDistance$1$[esp+16]
  000c7	51		 push	 ecx
  000c8	8b cf		 mov	 ecx, edi
  000ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000cf	e8 00 00 00 00	 call	 ?__GetVolumeFromDistance@SAmbienceInstance@CArea@@QAEMM@Z ; CArea::SAmbienceInstance::__GetVolumeFromDistance
  000d4	51		 push	 ecx
  000d5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCSoundManager@@@@0PAVCSoundManager@@A ; CSingleton<CSoundManager>::ms_singleton
  000db	d9 1c 24	 fstp	 DWORD PTR [esp]
  000de	56		 push	 esi
  000df	e8 00 00 00 00	 call	 ?SetSoundVolume3D@CSoundManager@@QAEXHM@Z ; CSoundManager::SetSoundVolume3D

; 1301 : 		}
; 1302 : 	}
; 1303 : }

  000e4	5f		 pop	 edi
  000e5	5e		 pop	 esi
  000e6	8b e5		 mov	 esp, ebp
  000e8	5d		 pop	 ebp
  000e9	c2 0c 00	 ret	 12			; 0000000cH
$LN2@UpdateLoop:

; 1292 : 		}
; 1293 : 	}
; 1294 : 	else
; 1295 : 	{
; 1296 : 		if (-1 != iPlaySoundIndex)

  000ec	83 fe ff	 cmp	 esi, -1
  000ef	74 13		 je	 SHORT $LN7@UpdateLoop

; 1297 : 		{
; 1298 : //			Tracef(" %d : LoopStop\n", iPlaySoundIndex);
; 1299 : 			CSoundManager::Instance().StopSound3D(iPlaySoundIndex);

  000f1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCSoundManager@@@@0PAVCSoundManager@@A ; CSingleton<CSoundManager>::ms_singleton
  000f7	56		 push	 esi
  000f8	e8 00 00 00 00	 call	 ?StopSound3D@CSoundManager@@QAEXH@Z ; CSoundManager::StopSound3D

; 1300 : 			iPlaySoundIndex = -1;

  000fd	c7 47 18 ff ff
	ff ff		 mov	 DWORD PTR [edi+24], -1
$LN7@UpdateLoop:

; 1301 : 		}
; 1302 : 	}
; 1303 : }

  00104	5f		 pop	 edi
  00105	5e		 pop	 esi
  00106	8b e5		 mov	 esp, ebp
  00108	5d		 pop	 ebp
  00109	c2 0c 00	 ret	 12			; 0000000cH
?UpdateLoopSound@SAmbienceInstance@CArea@@QAEXMMM@Z ENDP ; CArea::SAmbienceInstance::UpdateLoopSound
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?UpdateStepSound@SAmbienceInstance@CArea@@QAEXMMM@Z
_TEXT	SEGMENT
tv136 = -4						; size = 4
_fcurTime$1 = -4					; size = 4
_fxCenter$ = 8						; size = 4
_fyCenter$ = 12						; size = 4
_fzCenter$ = 16						; size = 4
?UpdateStepSound@SAmbienceInstance@CArea@@QAEXMMM@Z PROC ; CArea::SAmbienceInstance::UpdateStepSound, COMDAT
; _this$ = ecx

; 1247 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 1248 : 	float fDistance = sqrtf((fx - fxCenter)*(fx - fxCenter) + (fy - fyCenter)*(fy - fyCenter) + (fz - fzCenter)*(fz - fzCenter));

  0000a	f3 0f 10 4e 08	 movss	 xmm1, DWORD PTR [esi+8]
  0000f	f3 0f 5c 4d 0c	 subss	 xmm1, DWORD PTR _fyCenter$[ebp]
  00014	f3 0f 10 56 04	 movss	 xmm2, DWORD PTR [esi+4]
  00019	f3 0f 5c 55 08	 subss	 xmm2, DWORD PTR _fxCenter$[ebp]
  0001e	f3 0f 10 46 0c	 movss	 xmm0, DWORD PTR [esi+12]
  00023	f3 0f 5c 45 10	 subss	 xmm0, DWORD PTR _fzCenter$[ebp]
  00028	f3 0f 59 c9	 mulss	 xmm1, xmm1
  0002c	f3 0f 59 d2	 mulss	 xmm2, xmm2
  00030	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00034	f3 0f 58 ca	 addss	 xmm1, xmm2
  00038	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  0003c	0f 5a c1	 cvtps2pd xmm0, xmm1
  0003f	0f 57 c9	 xorps	 xmm1, xmm1
  00042	66 0f 2e c8	 ucomisd xmm1, xmm0
  00046	77 06		 ja	 SHORT $LN20@UpdateStep
  00048	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  0004c	eb 05		 jmp	 SHORT $LN21@UpdateStep
$LN20@UpdateStep:
  0004e	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN21@UpdateStep:
  00053	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1249 : 	if (DWORD(fDistance) < dwRange)

  00057	e8 00 00 00 00	 call	 __ftol3
  0005c	3b 46 10	 cmp	 eax, DWORD PTR [esi+16]
  0005f	0f 83 b0 00 00
	00		 jae	 $LN2@UpdateStep

; 1250 : 	{
; 1251 : 		float fcurTime = CTimer::Instance().GetCurrentSecond();

  00065	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  0006b	e8 00 00 00 00	 call	 ?GetCurrentSecond@CTimer@@QAEMXZ ; CTimer::GetCurrentSecond
  00070	d9 5c 24 04	 fstp	 DWORD PTR _fcurTime$1[esp+8]

; 1252 : 
; 1253 : 		if (fcurTime > fNextPlayTime)

  00074	f3 0f 10 44 24
	04		 movss	 xmm0, DWORD PTR _fcurTime$1[esp+8]
  0007a	0f 2f 46 1c	 comiss	 xmm0, DWORD PTR [esi+28]
  0007e	0f 86 9f 00 00
	00		 jbe	 $LN3@UpdateStep
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1864 :         return _My_data._Myfirst == _My_data._Mylast;

  00084	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00087	3b 46 60	 cmp	 eax, DWORD PTR [esi+96]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1255 : 			if (AmbienceData.AmbienceSoundVector.empty())

  0008a	0f 84 93 00 00
	00		 je	 $LN3@UpdateStep
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00090	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2236 :         if (_Large_string_engaged()) {

  00094	72 02		 jb	 SHORT $LN16@UpdateStep

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  00096	8b 00		 mov	 eax, DWORD PTR [eax]
$LN16@UpdateStep:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1259 : 			iPlaySoundIndex = CSoundManager::Instance().PlayAmbienceSound3D(fx, fy, fz, c_szFileName);

  00098	f3 0f 10 46 0c	 movss	 xmm0, DWORD PTR [esi+12]
  0009d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCSoundManager@@@@0PAVCSoundManager@@A ; CSingleton<CSoundManager>::ms_singleton
  000a3	6a 01		 push	 1
  000a5	50		 push	 eax
  000a6	83 ec 0c	 sub	 esp, 12			; 0000000cH
  000a9	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  000af	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  000b4	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000ba	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  000bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c4	e8 00 00 00 00	 call	 ?PlayAmbienceSound3D@CSoundManager@@QAEHMMMPBDH@Z ; CSoundManager::PlayAmbienceSound3D
  000c9	89 46 18	 mov	 DWORD PTR [esi+24], eax

; 1260 : //			Tracef(" %d : StepPlay [%f] : %s\n", iPlaySoundIndex, fDistance, c_szFileName);
; 1261 : 
; 1262 : 			fNextPlayTime = CTimer::Instance().GetCurrentSecond();

  000cc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  000d2	e8 00 00 00 00	 call	 ?GetCurrentSecond@CTimer@@QAEMXZ ; CTimer::GetCurrentSecond

; 1263 : 			fNextPlayTime += AmbienceData.fPlayInterval + frandom(0.0f, AmbienceData.fPlayIntervalVariation);

  000d7	f3 0f 10 46 54	 movss	 xmm0, DWORD PTR [esi+84]
  000dc	83 ec 08	 sub	 esp, 8
  000df	d9 5e 1c	 fstp	 DWORD PTR [esi+28]
  000e2	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000e8	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  000ef	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  000f4	d8 46 50	 fadd	 DWORD PTR [esi+80]
  000f7	83 c4 08	 add	 esp, 8
  000fa	d9 5c 24 04	 fstp	 DWORD PTR tv136[esp+8]
  000fe	f3 0f 10 44 24
	04		 movss	 xmm0, DWORD PTR tv136[esp+8]
  00104	f3 0f 58 46 1c	 addss	 xmm0, DWORD PTR [esi+28]
  00109	f3 0f 11 46 1c	 movss	 DWORD PTR [esi+28], xmm0

; 1270 : 	}
; 1271 : }

  0010e	5e		 pop	 esi
  0010f	8b e5		 mov	 esp, ebp
  00111	5d		 pop	 ebp
  00112	c2 0c 00	 ret	 12			; 0000000cH
$LN2@UpdateStep:

; 1264 : 		}
; 1265 : 	}
; 1266 : 	else
; 1267 : 	{
; 1268 : 		iPlaySoundIndex = -1;

  00115	c7 46 18 ff ff
	ff ff		 mov	 DWORD PTR [esi+24], -1

; 1269 : 		fNextPlayTime = 0.0f;

  0011c	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
$LN3@UpdateStep:

; 1270 : 	}
; 1271 : }

  00123	5e		 pop	 esi
  00124	8b e5		 mov	 esp, ebp
  00126	5d		 pop	 ebp
  00127	c2 0c 00	 ret	 12			; 0000000cH
?UpdateStepSound@SAmbienceInstance@CArea@@QAEXMMM@Z ENDP ; CArea::SAmbienceInstance::UpdateStepSound
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?UpdateOnceSound@SAmbienceInstance@CArea@@QAEXMMM@Z
_TEXT	SEGMENT
_fxCenter$ = 8						; size = 4
_fyCenter$ = 12						; size = 4
_fzCenter$ = 16						; size = 4
?UpdateOnceSound@SAmbienceInstance@CArea@@QAEXMMM@Z PROC ; CArea::SAmbienceInstance::UpdateOnceSound, COMDAT
; _this$ = ecx

; 1226 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 1227 : 	float fDistance = sqrtf((fx - fxCenter)*(fx - fxCenter) + (fy - fyCenter)*(fy - fyCenter) + (fz - fzCenter)*(fz - fzCenter));

  0000a	f3 0f 10 4e 08	 movss	 xmm1, DWORD PTR [esi+8]
  0000f	f3 0f 5c 4d 0c	 subss	 xmm1, DWORD PTR _fyCenter$[ebp]
  00014	f3 0f 10 56 04	 movss	 xmm2, DWORD PTR [esi+4]
  00019	f3 0f 5c 55 08	 subss	 xmm2, DWORD PTR _fxCenter$[ebp]
  0001e	f3 0f 10 46 0c	 movss	 xmm0, DWORD PTR [esi+12]
  00023	f3 0f 5c 45 10	 subss	 xmm0, DWORD PTR _fzCenter$[ebp]
  00028	f3 0f 59 c9	 mulss	 xmm1, xmm1
  0002c	f3 0f 59 d2	 mulss	 xmm2, xmm2
  00030	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00034	f3 0f 58 ca	 addss	 xmm1, xmm2
  00038	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  0003c	0f 5a c1	 cvtps2pd xmm0, xmm1
  0003f	0f 57 c9	 xorps	 xmm1, xmm1
  00042	66 0f 2e c8	 ucomisd xmm1, xmm0
  00046	77 06		 ja	 SHORT $LN20@UpdateOnce
  00048	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  0004c	eb 05		 jmp	 SHORT $LN21@UpdateOnce
$LN20@UpdateOnce:
  0004e	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN21@UpdateOnce:
  00053	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1228 : 	if (DWORD(fDistance) < dwRange)

  00057	e8 00 00 00 00	 call	 __ftol3
  0005c	3b 46 10	 cmp	 eax, DWORD PTR [esi+16]
  0005f	73 51		 jae	 SHORT $LN2@UpdateOnce

; 1229 : 	{
; 1230 : 		if (-1 == iPlaySoundIndex)

  00061	83 7e 18 ff	 cmp	 DWORD PTR [esi+24], -1
  00065	75 52		 jne	 SHORT $LN3@UpdateOnce
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1864 :         return _My_data._Myfirst == _My_data._Mylast;

  00067	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  0006a	3b 46 60	 cmp	 eax, DWORD PTR [esi+96]
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1232 : 			if (AmbienceData.AmbienceSoundVector.empty())

  0006d	74 4a		 je	 SHORT $LN3@UpdateOnce
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  0006f	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2236 :         if (_Large_string_engaged()) {

  00073	72 02		 jb	 SHORT $LN16@UpdateOnce

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  00075	8b 00		 mov	 eax, DWORD PTR [eax]
$LN16@UpdateOnce:
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1236 : 			iPlaySoundIndex = CSoundManager::Instance().PlayAmbienceSound3D(fx, fy, fz, c_szFileName);

  00077	f3 0f 10 46 0c	 movss	 xmm0, DWORD PTR [esi+12]
  0007c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCSoundManager@@@@0PAVCSoundManager@@A ; CSingleton<CSoundManager>::ms_singleton
  00082	6a 01		 push	 1
  00084	50		 push	 eax
  00085	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00088	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0008e	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  00093	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00099	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  0009e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a3	e8 00 00 00 00	 call	 ?PlayAmbienceSound3D@CSoundManager@@QAEHMMMPBDH@Z ; CSoundManager::PlayAmbienceSound3D
  000a8	89 46 18	 mov	 DWORD PTR [esi+24], eax

; 1243 : 	}
; 1244 : }

  000ab	5e		 pop	 esi
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 0c 00	 ret	 12			; 0000000cH
$LN2@UpdateOnce:

; 1237 : //			Tracef(" %d : OncePlay [%f] : %s\n", iPlaySoundIndex, fDistance, c_szFileName);
; 1238 : 		}
; 1239 : 	}
; 1240 : 	else
; 1241 : 	{
; 1242 : 		iPlaySoundIndex = -1;

  000b2	c7 46 18 ff ff
	ff ff		 mov	 DWORD PTR [esi+24], -1
$LN3@UpdateOnce:

; 1243 : 	}
; 1244 : }

  000b9	5e		 pop	 esi
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c2 0c 00	 ret	 12			; 0000000cH
?UpdateOnceSound@SAmbienceInstance@CArea@@QAEXMMM@Z ENDP ; CArea::SAmbienceInstance::UpdateOnceSound
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?__Update@SAmbienceInstance@CArea@@QAEXMMM@Z
_TEXT	SEGMENT
_fxCenter$ = 8						; size = 4
_fyCenter$ = 12						; size = 4
_fzCenter$ = 16						; size = 4
?__Update@SAmbienceInstance@CArea@@QAEXMMM@Z PROC	; CArea::SAmbienceInstance::__Update, COMDAT
; _this$ = ecx

; 1218 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 1219 : 	if (0 == dwRange)

  00005	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00009	74 28		 je	 SHORT $LN1@Update

; 1220 : 		return;
; 1221 : 
; 1222 : 	(this->*Update)(fxCenter, fyCenter, fzCenter);

  0000b	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fzCenter$[ebp]
  00010	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00013	8b 40 68	 mov	 eax, DWORD PTR [eax+104]
  00016	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0001c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fyCenter$[ebp]
  00021	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00027	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fxCenter$[ebp]
  0002c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00031	ff d0		 call	 eax
$LN1@Update:

; 1223 : }

  00033	5d		 pop	 ebp
  00034	c2 0c 00	 ret	 12			; 0000000cH
?__Update@SAmbienceInstance@CArea@@QAEXMMM@Z ENDP	; CArea::SAmbienceInstance::__Update
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.h
;	COMDAT ??1SAmbienceInstance@CArea@@UAE@XZ
_TEXT	SEGMENT
??1SAmbienceInstance@CArea@@UAE@XZ PROC			; CArea::SAmbienceInstance::~SAmbienceInstance, COMDAT
; _this$ = ecx

; 76   : 			virtual ~SAmbienceInstance() {}

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 4e 20	 lea	 ecx, DWORD PTR [esi+32]
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SAmbienceInstance@CArea@@6B@
  0000c	e8 00 00 00 00	 call	 ??1TPropertyAmbience@prt@@QAE@XZ
  00011	8b ce		 mov	 ecx, esi
  00013	5e		 pop	 esi
  00014	e9 00 00 00 00	 jmp	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
??1SAmbienceInstance@CArea@@UAE@XZ ENDP			; CArea::SAmbienceInstance::~SAmbienceInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ??0SAmbienceInstance@CArea@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0SAmbienceInstance@CArea@@QAE@XZ PROC			; CArea::SAmbienceInstance::SAmbienceInstance, COMDAT
; _this$ = ecx

; 1348 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000a	e8 00 00 00 00	 call	 ??0CScreen@@QAE@XZ	; CScreen::CScreen
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SAmbienceInstance@CArea@@6B@
  00015	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00018	0f 11 46 20	 movups	 XMMWORD PTR [esi+32], xmm0

; 4821 :         _My_data._Mysize = 0;

  0001c	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1355 : }

  00023	8b c6		 mov	 eax, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4822 :         _My_data._Myres  = _BUF_SIZE - 1;

  00025	c7 46 34 0f 00
	00 00		 mov	 DWORD PTR [esi+52], 15	; 0000000fH

; 4823 :         _My_data._Activate_SSO_buffer();
; 4824 : 
; 4825 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4826 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0002c	c6 46 20 00	 mov	 BYTE PTR [esi+32], 0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00030	0f 11 46 38	 movups	 XMMWORD PTR [esi+56], xmm0

; 4821 :         _My_data._Mysize = 0;

  00034	c7 46 48 00 00
	00 00		 mov	 DWORD PTR [esi+72], 0

; 4822 :         _My_data._Myres  = _BUF_SIZE - 1;

  0003b	c7 46 4c 0f 00
	00 00		 mov	 DWORD PTR [esi+76], 15	; 0000000fH

; 4823 :         _My_data._Activate_SSO_buffer();
; 4824 : 
; 4825 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4826 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00042	c6 46 38 00	 mov	 BYTE PTR [esi+56], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 398  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00046	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0
  0004d	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
  00054	c7 46 64 00 00
	00 00		 mov	 DWORD PTR [esi+100], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp

; 1349 : 	fx = 0.0f;

  0005b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1350 : 	fy = 0.0f;

  00062	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 1351 : 	fz = 0.0f;

  00069	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 1352 : 	dwRange = 0;

  00070	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 1353 : 	iPlaySoundIndex = -1;

  00077	c7 46 18 ff ff
	ff ff		 mov	 DWORD PTR [esi+24], -1

; 1354 : 	fNextPlayTime = 0.0f;

  0007e	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0

; 1355 : }

  00085	5e		 pop	 esi
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
??0SAmbienceInstance@CArea@@QAE@XZ ENDP			; CArea::SAmbienceInstance::SAmbienceInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?_Xlength@?$vector@USObjectData@CArea@@V?$allocator@USObjectData@CArea@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@USObjectData@CArea@@V?$allocator@USObjectData@CArea@@@std@@@std@@CAXXZ PROC ; std::vector<CArea::SObjectData,std::allocator<CArea::SObjectData> >::_Xlength, COMDAT

; 2138 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@USObjectData@CArea@@V?$allocator@USObjectData@CArea@@@std@@@std@@CAXXZ ENDP ; std::vector<CArea::SObjectData,std::allocator<CArea::SObjectData> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??1?$vector@USObjectData@CArea@@V?$allocator@USObjectData@CArea@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@USObjectData@CArea@@V?$allocator@USObjectData@CArea@@@std@@@std@@QAE@XZ PROC ; std::vector<CArea::SObjectData,std::allocator<CArea::SObjectData> >::~vector<CArea::SObjectData,std::allocator<CArea::SObjectData> >, COMDAT
; _this$ = ecx

; 766  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	85 f6		 test	 esi, esi
  00008	74 54		 je	 SHORT $LN4@vector

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000a	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0000d	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00012	2b ce		 sub	 ecx, esi
  00014	f7 e9		 imul	 ecx
  00016	c1 fa 03	 sar	 edx, 3
  00019	8b c2		 mov	 eax, edx
  0001b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001e	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00020	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00023	c1 e1 04	 shl	 ecx, 4

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00026	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002c	72 12		 jb	 SHORT $LN20@vector

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0002e	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00031	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00034	2b f2		 sub	 esi, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00036	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00039	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0003c	77 23		 ja	 SHORT $LN17@vector

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0003e	8b f2		 mov	 esi, edx
$LN20@vector:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00040	51		 push	 ecx
  00041	56		 push	 esi
  00042	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00047	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  0004d	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  00050	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 2051 :             _Myend   = nullptr;

  00057	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN4@vector:
  0005e	5f		 pop	 edi

; 772  :     }

  0005f	5e		 pop	 esi
  00060	c3		 ret	 0
$LN17@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00061	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN28@vector:
  00066	cc		 int	 3
??1?$vector@USObjectData@CArea@@V?$allocator@USObjectData@CArea@@@std@@@std@@QAE@XZ ENDP ; std::vector<CArea::SObjectData,std::allocator<CArea::SObjectData> >::~vector<CArea::SObjectData,std::allocator<CArea::SObjectData> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?InitializeRotation@SObjectData@CArea@@QAEXXZ
_TEXT	SEGMENT
?InitializeRotation@SObjectData@CArea@@QAEXXZ PROC	; CArea::SObjectData::InitializeRotation, COMDAT
; _this$ = ecx

; 23   : 	m_fYaw=m_fPitch=m_fRoll=0.0f;

  00000	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0
  00007	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0
  0000e	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0

; 24   : }

  00015	c3		 ret	 0
?InitializeRotation@SObjectData@CArea@@QAEXXZ ENDP	; CArea::SObjectData::InitializeRotation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@CAXXZ PROC ; std::vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >::_Xlength, COMDAT

; 2138 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@CAXXZ ENDP ; std::vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??1?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@QAE@XZ PROC ; std::vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >::~vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >, COMDAT
; _this$ = ecx

; 766  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 40		 je	 SHORT $LN4@vector

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000c	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00011	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN20@vector

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00019	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001c	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 22		 ja	 SHORT $LN17@vector

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00029	8b c2		 mov	 eax, edx
$LN20@vector:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0002b	51		 push	 ecx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00038	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2051 :             _Myend   = nullptr;

  00042	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  00049	5e		 pop	 esi

; 772  :     }

  0004a	c3		 ret	 0
$LN17@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN28@vector:
  00050	cc		 int	 3
??1?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@QAE@XZ ENDP ; std::vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >::~vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$map@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$map@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@@std@@QAE@XZ PROC ; std::map<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> > >::~map<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> > >, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> >,0> >
??1?$map@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@@std@@QAE@XZ ENDP ; std::map<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> > >::~map<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >::_Insert_node, COMDAT
; _this$ = ecx

; 646  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 647  :         ++_Mysize;
; 648  :         const auto _Head  = _Myhead;
; 649  :         _Newnode->_Parent = _Loc._Parent;

  00004	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0000e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00010	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00013	89 45 fc	 mov	 DWORD PTR __Head$1$[ebp], eax
  00016	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 650  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  00019	3b d0		 cmp	 edx, eax
  0001b	75 16		 jne	 SHORT $LN5@Insert_nod

; 651  :             _Head->_Left     = _Newnode;

  0001d	89 38		 mov	 DWORD PTR [eax], edi

; 652  :             _Head->_Parent   = _Newnode;

  0001f	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 653  :             _Head->_Right    = _Newnode;

  00022	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 712  :         return _Newnode;
; 713  :     }

  00025	8b c7		 mov	 eax, edi
  00027	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
  0002b	5f		 pop	 edi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 654  :             _Newnode->_Color = _Black; // the root is black
; 655  :             return _Newnode;
; 656  :         }
; 657  : 
; 658  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 659  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00033	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00037	75 0d		 jne	 SHORT $LN6@Insert_nod

; 660  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 661  :             _Loc._Parent->_Right = _Newnode;

  00039	89 7a 08	 mov	 DWORD PTR [edx+8], edi

; 662  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003c	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003f	75 0d		 jne	 SHORT $LN9@Insert_nod

; 663  :                 _Head->_Right = _Newnode;

  00041	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 664  :             }
; 665  :         } else { // add to left of _Loc._Parent

  00044	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 666  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 667  :             _Loc._Parent->_Left = _Newnode;

  00046	89 3a		 mov	 DWORD PTR [edx], edi

; 668  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00048	3b 10		 cmp	 edx, DWORD PTR [eax]
  0004a	75 02		 jne	 SHORT $LN9@Insert_nod

; 669  :                 _Head->_Left = _Newnode;

  0004c	89 38		 mov	 DWORD PTR [eax], edi
$LN9@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00051	8b c7		 mov	 eax, edi
  00053	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00057	0f 85 7d 01 00
	00		 jne	 $LN3@Insert_nod
  0005d	56		 push	 esi
  0005e	66 90		 npad	 2
$LL2@Insert_nod:

; 674  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00063	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	3b d1		 cmp	 edx, ecx
  0006a	0f 85 aa 00 00
	00		 jne	 $LN10@Insert_nod

; 675  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00070	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 676  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00073	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00077	0f 84 a3 00 00
	00		 je	 $LN76@Insert_nod

; 677  :                     _Pnode->_Parent->_Color          = _Black;
; 678  :                     _Parent_sibling->_Color          = _Black;
; 679  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 680  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 681  :                 } else { // parent's sibling has red and black children
; 682  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  0007d	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00080	3b c6		 cmp	 eax, esi
  00082	75 37		 jne	 SHORT $LN51@Insert_nod

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00084	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 683  :                         _Pnode = _Pnode->_Parent;

  00086	8b c2		 mov	 eax, edx

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00088	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0008b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00091	75 03		 jne	 SHORT $LN20@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  00093	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN20@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  00096	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00099	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  0009c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0009e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000a1	75 05		 jne	 SHORT $LN21@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  000a3	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  000a6	eb 0e		 jmp	 SHORT $LN24@Insert_nod
$LN21@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000a8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ab	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000ad	75 04		 jne	 SHORT $LN23@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  000af	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  000b1	eb 03		 jmp	 SHORT $LN24@Insert_nod
$LN23@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  000b3	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN24@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 479  :         _Wherenode->_Parent = _Pnode;

  000b8	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN51@Insert_nod:

; 684  :                         _Lrotate(_Pnode);
; 685  :                     }
; 686  : 
; 687  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 688  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c8	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 689  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 483  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000d2	8b 32		 mov	 esi, DWORD PTR [edx]

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  000d4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000d7	89 0a		 mov	 DWORD PTR [edx], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  000d9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000dc	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000e0	75 03		 jne	 SHORT $LN27@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  000e2	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN27@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  000e5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000e8	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  000eb	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000ed	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000f0	75 0b		 jne	 SHORT $LN28@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  000f2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  000f5	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  000f8	e9 cc 00 00 00	 jmp	 $LN75@Insert_nod
$LN28@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  000fd	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00100	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00103	75 0b		 jne	 SHORT $LN30@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00105	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00108	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  0010b	e9 b9 00 00 00	 jmp	 $LN75@Insert_nod
$LN30@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00110	89 31		 mov	 DWORD PTR [ecx], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00112	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  00115	e9 af 00 00 00	 jmp	 $LN75@Insert_nod
$LN10@Insert_nod:

; 692  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 693  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  0011a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0011e	75 1d		 jne	 SHORT $LN15@Insert_nod
$LN76@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00120	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1
  00124	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  00128	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0012e	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00132	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00135	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00138	e9 8f 00 00 00	 jmp	 $LN46@Insert_nod
$LN15@Insert_nod:

; 694  :                     _Pnode->_Parent->_Color          = _Black;
; 695  :                     _Parent_sibling->_Color          = _Black;
; 696  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 697  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 698  :                 } else { // parent's sibling has red and black children
; 699  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  0013d	8b 32		 mov	 esi, DWORD PTR [edx]
  0013f	3b c6		 cmp	 eax, esi
  00141	75 3a		 jne	 SHORT $LN39@Insert_nod

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00143	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 700  :                         _Pnode = _Pnode->_Parent;

  00146	8b c2		 mov	 eax, edx

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00148	89 08		 mov	 DWORD PTR [eax], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  0014a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0014d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00151	75 03		 jne	 SHORT $LN34@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  00153	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN34@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  00156	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00159	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  0015c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0015e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00161	75 05		 jne	 SHORT $LN35@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  00163	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00166	eb 0f		 jmp	 SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00168	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0016b	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0016e	75 05		 jne	 SHORT $LN37@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00170	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 496  :         } else {

  00173	eb 02		 jmp	 SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00175	89 31		 mov	 DWORD PTR [ecx], esi
$LN38@Insert_nod:

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00177	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 501  :         _Wherenode->_Parent = _Pnode;

  0017a	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN39@Insert_nod:

; 701  :                         _Rrotate(_Pnode);
; 702  :                     }
; 703  : 
; 704  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  0017d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 705  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00184	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00187	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0018a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 706  :                     _Lrotate(_Pnode->_Parent->_Parent);

  0018e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00191	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 461  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00194	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00197	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00199	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0019c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0019e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a2	75 03		 jne	 SHORT $LN41@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  001a4	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN41@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  001a7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001aa	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  001ad	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001af	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  001b2	75 05		 jne	 SHORT $LN42@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  001b4	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  001b7	eb 0e		 jmp	 SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001b9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001bc	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001be	75 04		 jne	 SHORT $LN44@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  001c2	eb 03		 jmp	 SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  001c4	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN45@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  001c7	89 16		 mov	 DWORD PTR [esi], edx
$LN75@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001c9	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN46@Insert_nod:
  001cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001cf	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001d3	0f 84 87 fe ff
	ff		 je	 $LL2@Insert_nod
  001d9	5e		 pop	 esi
$LN3@Insert_nod:

; 707  :                 }
; 708  :             }
; 709  :         }
; 710  : 
; 711  :         _Head->_Parent->_Color = _Black; // root is always black

  001da	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]
  001dd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e0	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 712  :         return _Newnode;
; 713  :     }

  001e4	8b c7		 mov	 eax, edi
  001e6	5f		 pop	 edi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z
_TEXT	SEGMENT
tv1038 = -16						; size = 4
$T1 = -12						; size = 4
tv1094 = -12						; size = 4
tv1075 = -12						; size = 4
tv1042 = -12						; size = 4
__Erasednode$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
__Where$ = 8						; size = 4
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >::_Extract, COMDAT
; _this$ = ecx

; 504  :     _Nodeptr _Extract(_Unchecked_const_iterator _Where) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 505  :         _Nodeptr _Erasednode = _Where._Ptr; // node to erase

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Where$[ebp]
  0000a	56		 push	 esi
  0000b	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx

; 506  :         ++_Where; // save successor iterator for return

  0000e	8d 4d 08	 lea	 ecx, DWORD PTR __Where$[ebp]
  00011	57		 push	 edi
  00012	89 5d f8	 mov	 DWORD PTR __Erasednode$1$[ebp], ebx
  00015	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >,std::_Iterator_base0>::operator++

; 507  : 
; 508  :         _Nodeptr _Fixnode; // the node to recolor as needed
; 509  :         _Nodeptr _Fixnodeparent; // parent of _Fixnode (which may be nil)
; 510  :         _Nodeptr _Pnode = _Erasednode;
; 511  : 
; 512  :         if (_Pnode->_Left->_Isnil) {

  0001a	8b 03		 mov	 eax, DWORD PTR [ebx]
  0001c	8b 7b 08	 mov	 edi, DWORD PTR [ebx+8]
  0001f	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00023	75 18		 jne	 SHORT $LN86@Extract

; 513  :             _Fixnode = _Pnode->_Right; // stitch up right subtree
; 514  :         } else if (_Pnode->_Right->_Isnil) {

  00025	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00029	74 04		 je	 SHORT $LN7@Extract

; 515  :             _Fixnode = _Pnode->_Left; // stitch up left subtree

  0002b	8b f8		 mov	 edi, eax

; 516  :         } else { // two subtrees, must lift successor node to replace erased

  0002d	eb 0e		 jmp	 SHORT $LN86@Extract
$LN7@Extract:

; 517  :             _Pnode   = _Where._Ptr; // _Pnode is successor node

  0002f	8b 55 08	 mov	 edx, DWORD PTR __Where$[ebp]

; 518  :             _Fixnode = _Pnode->_Right; // _Fixnode is only subtree

  00032	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  00035	3b d3		 cmp	 edx, ebx

; 519  :         }
; 520  : 
; 521  :         if (_Pnode == _Erasednode) { // at most one subtree, relink it

  00037	0f 85 95 00 00
	00		 jne	 $LN9@Extract
$LN86@Extract:

; 522  :             _Fixnodeparent = _Erasednode->_Parent;
; 523  :             if (!_Fixnode->_Isnil) {

  0003d	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00041	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  00044	75 03		 jne	 SHORT $LN11@Extract

; 524  :                 _Fixnode->_Parent = _Fixnodeparent; // link up

  00046	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN11@Extract:

; 525  :             }
; 526  : 
; 527  :             if (_Myhead->_Parent == _Erasednode) {

  00049	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
  0004c	8b 02		 mov	 eax, DWORD PTR [edx]
  0004e	39 58 04	 cmp	 DWORD PTR [eax+4], ebx
  00051	75 05		 jne	 SHORT $LN12@Extract

; 528  :                 _Myhead->_Parent = _Fixnode; // link down from root

  00053	89 78 04	 mov	 DWORD PTR [eax+4], edi
  00056	eb 0b		 jmp	 SHORT $LN15@Extract
$LN12@Extract:

; 529  :             } else if (_Fixnodeparent->_Left == _Erasednode) {

  00058	39 1e		 cmp	 DWORD PTR [esi], ebx
  0005a	75 04		 jne	 SHORT $LN14@Extract

; 530  :                 _Fixnodeparent->_Left = _Fixnode; // link down to left

  0005c	89 3e		 mov	 DWORD PTR [esi], edi

; 531  :             } else {

  0005e	eb 03		 jmp	 SHORT $LN15@Extract
$LN14@Extract:

; 532  :                 _Fixnodeparent->_Right = _Fixnode; // link down to right

  00060	89 7e 08	 mov	 DWORD PTR [esi+8], edi
$LN15@Extract:

; 533  :             }
; 534  : 
; 535  :             if (_Myhead->_Left == _Erasednode) {

  00063	8b 02		 mov	 eax, DWORD PTR [edx]
  00065	89 45 f4	 mov	 DWORD PTR tv1075[ebp], eax
  00068	39 18		 cmp	 DWORD PTR [eax], ebx
  0006a	75 28		 jne	 SHORT $LN16@Extract

; 536  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  0006c	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00070	74 04		 je	 SHORT $LN42@Extract
  00072	8b d6		 mov	 edx, esi
  00074	eb 19		 jmp	 SHORT $LN48@Extract
$LN42@Extract:

; 453  :         while (!_Pnode->_Left->_Isnil) {

  00076	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 536  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  00078	8b d7		 mov	 edx, edi

; 453  :         while (!_Pnode->_Left->_Isnil) {

  0007a	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0007e	75 0f		 jne	 SHORT $LN48@Extract
$LL47@Extract:
  00080	8b 01		 mov	 eax, DWORD PTR [ecx]

; 454  :             _Pnode = _Pnode->_Left;

  00082	8b d1		 mov	 edx, ecx
  00084	8b c8		 mov	 ecx, eax
  00086	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0008a	74 f4		 je	 SHORT $LL47@Extract
  0008c	8b 45 f4	 mov	 eax, DWORD PTR tv1075[ebp]
$LN48@Extract:

; 536  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  0008f	89 10		 mov	 DWORD PTR [eax], edx
  00091	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
$LN16@Extract:

; 537  :                                                   : _Min(_Fixnode); // smallest in relinked subtree
; 538  :             }
; 539  : 
; 540  :             if (_Myhead->_Right == _Erasednode) {

  00094	8b 02		 mov	 eax, DWORD PTR [edx]
  00096	39 58 08	 cmp	 DWORD PTR [eax+8], ebx
  00099	0f 85 a0 00 00
	00		 jne	 $LN55@Extract

; 541  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  0009f	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  000a3	74 0a		 je	 SHORT $LN44@Extract
  000a5	8b ce		 mov	 ecx, esi
  000a7	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 542  :                                                    : _Max(_Fixnode); // largest in relinked subtree
; 543  :             }
; 544  :         } else { // erased has two subtrees, _Pnode is successor to erased

  000aa	e9 90 00 00 00	 jmp	 $LN55@Extract
$LN44@Extract:

; 445  :         while (!_Pnode->_Right->_Isnil) {

  000af	8b 47 08	 mov	 eax, DWORD PTR [edi+8]

; 541  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  000b2	8b cf		 mov	 ecx, edi

; 445  :         while (!_Pnode->_Right->_Isnil) {

  000b4	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000b8	75 11		 jne	 SHORT $LN52@Extract
  000ba	66 0f 1f 44 00
	00		 npad	 6
$LL51@Extract:

; 446  :             _Pnode = _Pnode->_Right;

  000c0	8b c8		 mov	 ecx, eax
  000c2	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000c5	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000c9	74 f5		 je	 SHORT $LL51@Extract
$LN52@Extract:
  000cb	8b 02		 mov	 eax, DWORD PTR [edx]

; 541  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  000cd	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 542  :                                                    : _Max(_Fixnode); // largest in relinked subtree
; 543  :             }
; 544  :         } else { // erased has two subtrees, _Pnode is successor to erased

  000d0	eb 6d		 jmp	 SHORT $LN55@Extract
$LN9@Extract:

; 545  :             _Erasednode->_Left->_Parent = _Pnode; // link left up

  000d2	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 546  :             _Pnode->_Left               = _Erasednode->_Left; // link successor down
; 547  : 
; 548  :             if (_Pnode == _Erasednode->_Right) {

  000d5	8d 4a 04	 lea	 ecx, DWORD PTR [edx+4]
  000d8	8b 03		 mov	 eax, DWORD PTR [ebx]
  000da	89 02		 mov	 DWORD PTR [edx], eax
  000dc	89 4d f4	 mov	 DWORD PTR $T1[ebp], ecx
  000df	3b 53 08	 cmp	 edx, DWORD PTR [ebx+8]
  000e2	75 04		 jne	 SHORT $LN18@Extract

; 549  :                 _Fixnodeparent = _Pnode; // successor is next to erased

  000e4	8b f2		 mov	 esi, edx

; 550  :             } else { // successor further down, link in place of erased

  000e6	eb 1c		 jmp	 SHORT $LN19@Extract
$LN18@Extract:

; 551  :                 _Fixnodeparent = _Pnode->_Parent; // parent is successor's
; 552  :                 if (!_Fixnode->_Isnil) {

  000e8	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  000ec	8b 31		 mov	 esi, DWORD PTR [ecx]
  000ee	75 03		 jne	 SHORT $LN20@Extract

; 553  :                     _Fixnode->_Parent = _Fixnodeparent; // link fix up

  000f0	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN20@Extract:

; 554  :                 }
; 555  : 
; 556  :                 _Fixnodeparent->_Left        = _Fixnode; // link fix down

  000f3	89 3e		 mov	 DWORD PTR [esi], edi

; 557  :                 _Pnode->_Right               = _Erasednode->_Right; // link next down

  000f5	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  000f8	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 558  :                 _Erasednode->_Right->_Parent = _Pnode; // right up

  000fb	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  000fe	89 4d f4	 mov	 DWORD PTR $T1[ebp], ecx
  00101	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN19@Extract:

; 559  :             }
; 560  : 
; 561  :             if (_Myhead->_Parent == _Erasednode) {

  00104	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00107	8b 00		 mov	 eax, DWORD PTR [eax]
  00109	39 58 04	 cmp	 DWORD PTR [eax+4], ebx
  0010c	75 05		 jne	 SHORT $LN21@Extract

; 562  :                 _Myhead->_Parent = _Pnode; // link down from root

  0010e	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00111	eb 0e		 jmp	 SHORT $LN131@Extract
$LN21@Extract:

; 563  :             } else if (_Erasednode->_Parent->_Left == _Erasednode) {

  00113	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00116	39 18		 cmp	 DWORD PTR [eax], ebx
  00118	75 04		 jne	 SHORT $LN23@Extract

; 564  :                 _Erasednode->_Parent->_Left = _Pnode; // link down to left

  0011a	89 10		 mov	 DWORD PTR [eax], edx

; 565  :             } else {

  0011c	eb 03		 jmp	 SHORT $LN131@Extract
$LN23@Extract:

; 566  :                 _Erasednode->_Parent->_Right = _Pnode; // link down to right

  0011e	89 50 08	 mov	 DWORD PTR [eax+8], edx
$LN131@Extract:

; 567  :             }
; 568  : 
; 569  :             _Pnode->_Parent = _Erasednode->_Parent; // link successor up

  00121	b9 04 00 00 00	 mov	 ecx, 4
  00126	8b c3		 mov	 eax, ebx
  00128	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]
  0012b	8b 4d f4	 mov	 ecx, DWORD PTR $T1[ebp]
  0012e	89 01		 mov	 DWORD PTR [ecx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 99   :     _Ty _Tmp = _STD move(_Left);

  00130	8a 4a 0c	 mov	 cl, BYTE PTR [edx+12]

; 100  :     _Left    = _STD move(_Right);

  00133	8a 43 0c	 mov	 al, BYTE PTR [ebx+12]
  00136	88 42 0c	 mov	 BYTE PTR [edx+12], al
  00139	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]

; 101  :     _Right   = _STD move(_Tmp);

  0013c	88 4b 0c	 mov	 BYTE PTR [ebx+12], cl
$LN55@Extract:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 573  :         if (_Erasednode->_Color == _Black) { // erasing black link, must recolor/rebalance tree

  0013f	80 7b 0c 01	 cmp	 BYTE PTR [ebx+12], 1
  00143	0f 85 89 01 00
	00		 jne	 $LN25@Extract

; 574  :             for (; _Fixnode != _Myhead->_Parent && _Fixnode->_Color == _Black; _Fixnodeparent = _Fixnode->_Parent) {

  00149	8b 02		 mov	 eax, DWORD PTR [edx]
  0014b	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  0014e	0f 84 7a 01 00
	00		 je	 $LN3@Extract
  00154	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL4@Extract:
  00160	80 7f 0c 01	 cmp	 BYTE PTR [edi+12], 1
  00164	89 75 f4	 mov	 DWORD PTR tv1094[ebp], esi
  00167	0f 85 5e 01 00
	00		 jne	 $LN93@Extract

; 575  :                 if (_Fixnode == _Fixnodeparent->_Left) { // fixup left subtree

  0016d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0016f	3b f9		 cmp	 edi, ecx
  00171	0f 85 c3 00 00
	00		 jne	 $LN26@Extract

; 576  :                     _Pnode = _Fixnodeparent->_Right;

  00177	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 577  :                     if (_Pnode->_Color == _Red) { // rotate red up from right subtree

  0017a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0017e	75 57		 jne	 SHORT $LN87@Extract

; 578  :                         _Pnode->_Color         = _Black;

  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 461  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00184	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 579  :                         _Fixnodeparent->_Color = _Red;

  00187	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  0018b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0018d	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  00190	8b 01		 mov	 eax, DWORD PTR [ecx]
  00192	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00196	75 03		 jne	 SHORT $LN57@Extract

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  00198	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN57@Extract:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  0019b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0019e	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
  001a1	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  001a4	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  001a7	8b 00		 mov	 eax, DWORD PTR [eax]
  001a9	3b 70 04	 cmp	 esi, DWORD PTR [eax+4]
  001ac	75 0c		 jne	 SHORT $LN58@Extract

; 471  :             _Myhead->_Parent = _Pnode;

  001ae	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  001b1	89 31		 mov	 DWORD PTR [ecx], esi

; 479  :         _Wherenode->_Parent = _Pnode;

  001b3	89 0a		 mov	 DWORD PTR [edx], ecx

; 580  :                         _Lrotate(_Fixnodeparent);
; 581  :                         _Pnode = _Fixnodeparent->_Right;

  001b5	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001b8	eb 20		 jmp	 SHORT $LN80@Extract
$LN58@Extract:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001ba	8b 02		 mov	 eax, DWORD PTR [edx]
  001bc	3b 30		 cmp	 esi, DWORD PTR [eax]
  001be	75 0b		 jne	 SHORT $LN60@Extract

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 08		 mov	 DWORD PTR [eax], ecx

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  001c2	89 31		 mov	 DWORD PTR [ecx], esi

; 479  :         _Wherenode->_Parent = _Pnode;

  001c4	89 0a		 mov	 DWORD PTR [edx], ecx

; 580  :                         _Lrotate(_Fixnodeparent);
; 581  :                         _Pnode = _Fixnodeparent->_Right;

  001c6	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001c9	eb 0f		 jmp	 SHORT $LN80@Extract
$LN60@Extract:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  001cb	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  001ce	89 31		 mov	 DWORD PTR [ecx], esi

; 479  :         _Wherenode->_Parent = _Pnode;

  001d0	89 0a		 mov	 DWORD PTR [edx], ecx

; 580  :                         _Lrotate(_Fixnodeparent);
; 581  :                         _Pnode = _Fixnodeparent->_Right;

  001d2	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001d5	eb 03		 jmp	 SHORT $LN80@Extract
$LN87@Extract:
  001d7	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
$LN80@Extract:

; 582  :                     }
; 583  : 
; 584  :                     if (_Pnode->_Isnil) {

  001da	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001de	0f 85 d2 00 00
	00		 jne	 $LN2@Extract

; 585  :                         _Fixnode = _Fixnodeparent; // shouldn't happen
; 586  :                     } else if (_Pnode->_Left->_Color == _Black
; 587  :                                && _Pnode->_Right->_Color == _Black) { // redden right subtree with black children

  001e4	8b 01		 mov	 eax, DWORD PTR [ecx]
  001e6	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001ea	75 0d		 jne	 SHORT $LN89@Extract
  001ec	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001ef	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001f3	0f 84 b9 00 00
	00		 je	 $LN132@Extract
$LN89@Extract:

; 588  :                         _Pnode->_Color = _Red;
; 589  :                         _Fixnode       = _Fixnodeparent;
; 590  :                     } else { // must rearrange right subtree
; 591  :                         if (_Pnode->_Right->_Color == _Black) { // rotate red up from left sub-subtree

  001f9	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001fc	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  00200	75 16		 jne	 SHORT $LN33@Extract

; 592  :                             _Pnode->_Left->_Color = _Black;

  00202	8b 01		 mov	 eax, DWORD PTR [ecx]

; 593  :                             _Pnode->_Color        = _Red;
; 594  :                             _Rrotate(_Pnode);

  00204	51		 push	 ecx
  00205	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  00209	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  0020d	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00210	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >::_Rrotate

; 595  :                             _Pnode = _Fixnodeparent->_Right;

  00215	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
$LN33@Extract:

; 596  :                         }
; 597  : 
; 598  :                         _Pnode->_Color         = _Fixnodeparent->_Color;

  00218	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  0021b	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 599  :                         _Fixnodeparent->_Color = _Black;

  0021e	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 600  :                         _Pnode->_Right->_Color = _Black;

  00222	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 601  :                         _Lrotate(_Fixnodeparent);

  00225	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00228	56		 push	 esi
  00229	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  0022d	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >::_Lrotate

; 602  :                         break; // tree now recolored/rebalanced

  00232	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
  00235	e9 91 00 00 00	 jmp	 $LN93@Extract
$LN26@Extract:

; 603  :                     }
; 604  :                 } else { // fixup right subtree
; 605  :                     _Pnode = _Fixnodeparent->_Left;
; 606  :                     if (_Pnode->_Color == _Red) { // rotate red up from left subtree

  0023a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0023e	75 58		 jne	 SHORT $LN88@Extract

; 607  :                         _Pnode->_Color         = _Black;

  00240	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 483  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00244	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 608  :                         _Fixnodeparent->_Color = _Red;

  00246	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  0024a	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0024d	89 06		 mov	 DWORD PTR [esi], eax

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  0024f	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00252	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00256	75 03		 jne	 SHORT $LN64@Extract

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  00258	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN64@Extract:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  0025b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0025e	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
  00261	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  00264	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00267	8b 00		 mov	 eax, DWORD PTR [eax]
  00269	3b 70 04	 cmp	 esi, DWORD PTR [eax+4]
  0026c	75 0c		 jne	 SHORT $LN65@Extract

; 493  :             _Myhead->_Parent = _Pnode;

  0026e	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00271	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 501  :         _Wherenode->_Parent = _Pnode;

  00274	89 0a		 mov	 DWORD PTR [edx], ecx

; 609  :                         _Rrotate(_Fixnodeparent);
; 610  :                         _Pnode = _Fixnodeparent->_Left;

  00276	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00278	eb 21		 jmp	 SHORT $LN79@Extract
$LN65@Extract:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  0027a	8b 02		 mov	 eax, DWORD PTR [edx]
  0027c	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  0027f	75 0c		 jne	 SHORT $LN67@Extract

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00281	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00284	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 501  :         _Wherenode->_Parent = _Pnode;

  00287	89 0a		 mov	 DWORD PTR [edx], ecx

; 609  :                         _Rrotate(_Fixnodeparent);
; 610  :                         _Pnode = _Fixnodeparent->_Left;

  00289	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0028b	eb 0e		 jmp	 SHORT $LN79@Extract
$LN67@Extract:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  0028d	89 08		 mov	 DWORD PTR [eax], ecx

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  0028f	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 501  :         _Wherenode->_Parent = _Pnode;

  00292	89 0a		 mov	 DWORD PTR [edx], ecx

; 609  :                         _Rrotate(_Fixnodeparent);
; 610  :                         _Pnode = _Fixnodeparent->_Left;

  00294	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00296	eb 03		 jmp	 SHORT $LN79@Extract
$LN88@Extract:
  00298	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
$LN79@Extract:

; 611  :                     }
; 612  : 
; 613  :                     if (_Pnode->_Isnil) {

  0029b	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0029f	75 15		 jne	 SHORT $LN2@Extract

; 614  :                         _Fixnode = _Fixnodeparent; // shouldn't happen
; 615  :                     } else if (_Pnode->_Right->_Color == _Black
; 616  :                                && _Pnode->_Left->_Color == _Black) { // redden left subtree with black children

  002a1	8b 59 08	 mov	 ebx, DWORD PTR [ecx+8]
  002a4	80 7b 0c 01	 cmp	 BYTE PTR [ebx+12], 1
  002a8	75 3e		 jne	 SHORT $LN90@Extract
  002aa	8b 01		 mov	 eax, DWORD PTR [ecx]
  002ac	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  002b0	75 36		 jne	 SHORT $LN90@Extract
$LN132@Extract:

; 574  :             for (; _Fixnode != _Myhead->_Parent && _Fixnode->_Color == _Black; _Fixnodeparent = _Fixnode->_Parent) {

  002b2	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
$LN2@Extract:
  002b6	8b 32		 mov	 esi, DWORD PTR [edx]
  002b8	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
  002bb	8b 4d f4	 mov	 ecx, DWORD PTR tv1094[ebp]
  002be	8b f9		 mov	 edi, ecx
  002c0	8b 02		 mov	 eax, DWORD PTR [edx]
  002c2	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  002c5	0f 85 95 fe ff
	ff		 jne	 $LL4@Extract
$LN93@Extract:

; 631  :                         break; // tree now recolored/rebalanced
; 632  :                     }
; 633  :                 }
; 634  :             }
; 635  : 
; 636  :             _Fixnode->_Color = _Black; // stopping node is black

  002cb	8b 5d f8	 mov	 ebx, DWORD PTR __Erasednode$1$[ebp]
$LN3@Extract:
  002ce	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
$LN25@Extract:

; 637  :         }
; 638  : 
; 639  :         if (0 < _Mysize) {

  002d2	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  002d5	8b c3		 mov	 eax, ebx
  002d7	85 c9		 test	 ecx, ecx
  002d9	74 04		 je	 SHORT $LN40@Extract

; 640  :             --_Mysize;

  002db	49		 dec	 ecx
  002dc	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
$LN40@Extract:

; 641  :         }
; 642  : 
; 643  :         return _Erasednode;
; 644  :     }

  002df	5f		 pop	 edi
  002e0	5e		 pop	 esi
  002e1	5b		 pop	 ebx
  002e2	8b e5		 mov	 esp, ebp
  002e4	5d		 pop	 ebp
  002e5	c2 04 00	 ret	 4
$LN90@Extract:

; 617  :                         _Pnode->_Color = _Red;
; 618  :                         _Fixnode       = _Fixnodeparent;
; 619  :                     } else { // must rearrange left subtree
; 620  :                         if (_Pnode->_Left->_Color == _Black) { // rotate red up from right sub-subtree

  002e8	8b 01		 mov	 eax, DWORD PTR [ecx]
  002ea	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  002ee	75 13		 jne	 SHORT $LN39@Extract

; 621  :                             _Pnode->_Right->_Color = _Black;

  002f0	c6 43 0c 01	 mov	 BYTE PTR [ebx+12], 1

; 622  :                             _Pnode->_Color         = _Red;

  002f4	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 623  :                             _Lrotate(_Pnode);

  002f8	51		 push	 ecx
  002f9	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  002fc	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >::_Lrotate

; 624  :                             _Pnode = _Fixnodeparent->_Left;

  00301	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN39@Extract:

; 625  :                         }
; 626  : 
; 627  :                         _Pnode->_Color         = _Fixnodeparent->_Color;

  00303	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  00306	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 628  :                         _Fixnodeparent->_Color = _Black;

  00309	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 629  :                         _Pnode->_Left->_Color  = _Black;

  0030d	8b 01		 mov	 eax, DWORD PTR [ecx]

; 630  :                         _Rrotate(_Fixnodeparent);

  0030f	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00312	56		 push	 esi
  00313	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  00317	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >::_Rrotate
  0031c	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
  0031f	eb aa		 jmp	 SHORT $LN93@Extract
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >::_Extract
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >::_Rrotate, COMDAT
; _this$ = ecx

; 482  :     void _Rrotate(_Nodeptr _Wherenode) noexcept { // promote left node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 483  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 32		 mov	 esi, DWORD PTR [edx]

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	89 02		 mov	 DWORD PTR [edx], eax

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  0000e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Rrotate

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Rrotate:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0e		 jne	 SHORT $LN3@Rrotate

; 493  :             _Myhead->_Parent = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;
; 501  :         _Wherenode->_Parent = _Pnode;
; 502  :     }

  0002a	89 56 08	 mov	 DWORD PTR [esi+8], edx
  0002d	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00030	5e		 pop	 esi
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN3@Rrotate:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00035	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00038	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003b	75 0e		 jne	 SHORT $LN5@Rrotate

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  0003d	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;
; 501  :         _Wherenode->_Parent = _Pnode;
; 502  :     }

  00040	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00043	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00046	5e		 pop	 esi
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN5@Rrotate:

; 496  :         } else {
; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  0004b	89 30		 mov	 DWORD PTR [eax], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;
; 501  :         _Wherenode->_Parent = _Pnode;
; 502  :     }

  0004d	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00050	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >::_Rrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >::_Lrotate, COMDAT
; _this$ = ecx

; 460  :     void _Lrotate(_Nodeptr _Wherenode) noexcept { // promote right node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 461  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  0000a	8b 06		 mov	 eax, DWORD PTR [esi]
  0000c	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Lrotate

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Lrotate:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0d		 jne	 SHORT $LN3@Lrotate

; 471  :             _Myhead->_Parent = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;
; 479  :         _Wherenode->_Parent = _Pnode;
; 480  :     }

  0002a	89 16		 mov	 DWORD PTR [esi], edx
  0002c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0002f	5e		 pop	 esi
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
$LN3@Lrotate:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  00034	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00037	3b 10		 cmp	 edx, DWORD PTR [eax]
  00039	75 0c		 jne	 SHORT $LN5@Lrotate

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  0003b	89 30		 mov	 DWORD PTR [eax], esi

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;
; 479  :         _Wherenode->_Parent = _Pnode;
; 480  :     }

  0003d	89 16		 mov	 DWORD PTR [esi], edx
  0003f	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN5@Lrotate:

; 474  :         } else {
; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  00047	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;
; 479  :         _Wherenode->_Parent = _Pnode;
; 480  :     }

  0004a	89 16		 mov	 DWORD PTR [esi], edx
  0004c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0004f	5e		 pop	 esi
  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >::_Lrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> >,0> >, COMDAT
; _this$ = ecx

; 1080 :     ~_Tree() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00009	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000d	75 21		 jne	 SHORT $LN7@Tree
  0000f	90		 npad	 1
$LL6@Tree:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00010	ff 76 08	 push	 DWORD PTR [esi+8]
  00013	8b cf		 mov	 ecx, edi
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CEffectInstance *>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 754  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001b	8b c6		 mov	 eax, esi

; 755  :     _Val         = static_cast<_Other&&>(_New_val);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  0001f	6a 18		 push	 24			; 00000018H
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0002e	74 e0		 je	 SHORT $LL6@Tree
$LN7@Tree:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00030	6a 18		 push	 24			; 00000018H
  00032	ff 37		 push	 DWORD PTR [edi]
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00039	83 c4 08	 add	 esp, 8
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1087 :     }

  0003e	c3		 ret	 0
??1?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 137  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 138  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 139  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 140  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 87   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 141  :         _Throw_bad_array_new_length(); // add overflow
; 142  :     }
; 143  : 
; 144  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 87   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 145  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 146  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 147  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 148  : 
; 149  : #ifdef _DEBUG
; 150  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 151  : #endif // _DEBUG
; 152  :     return _Ptr;
; 153  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 145  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\memory
;	COMDAT ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >, COMDAT
; _this$ = ecx

; 3289 :         if (_Mypair._Myval2) {

  00000	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00002	85 c9		 test	 ecx, ecx
  00004	74 06		 je	 SHORT $LN6@unique_ptr

; 3180 :         delete _Ptr;

  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	6a 01		 push	 1
  0000a	ff 10		 call	 DWORD PTR [eax]
$LN6@unique_ptr:

; 3290 :             _Mypair._Get_first()(_Mypair._Myval2);
; 3291 :         }
; 3292 :     }

  0000c	c3		 ret	 0
??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
;	COMDAT ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
$T1 = 12						; size = 4
__Count$ = 12						; size = 4
??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>, COMDAT
; _this$ = ecx

; 2610 :     _CONSTEXPR20 void _Construct(const _Char_or_ptr _Arg, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	57		 push	 edi

; 2611 :         auto& _My_data = _Mypair._Myval2;
; 2612 :         _STL_INTERNAL_CHECK(!_My_data._Large_string_engaged());
; 2613 : 
; 2614 :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2615 :             _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Char_or_ptr, _Elem>);
; 2616 :         } else {
; 2617 :             _STL_INTERNAL_STATIC_ASSERT(_Is_elem_cptr<_Char_or_ptr>::value);
; 2618 :         }
; 2619 : 
; 2620 :         if (_Count > max_size()) {

  00005	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  00010	0f 87 9f 00 00
	00		 ja	 $LN33@Construct

; 2622 :         }
; 2623 : 
; 2624 :         auto& _Al       = _Getal();
; 2625 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 2626 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 2627 : 
; 2628 :         if (_Count < _BUF_SIZE) {

  00016	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH
  0001d	83 ff 10	 cmp	 edi, 16			; 00000010H
  00020	73 1a		 jae	 SHORT $LN3@Construct

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00022	57		 push	 edi
  00023	ff 75 08	 push	 DWORD PTR __Arg$[ebp]

; 2629 :             _My_data._Mysize = _Count;

  00026	89 7b 10	 mov	 DWORD PTR [ebx+16], edi

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00029	53		 push	 ebx
  0002a	e8 00 00 00 00	 call	 _memcpy
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2630 :             _My_data._Myres  = _BUF_SIZE - 1;
; 2631 : 
; 2632 :             if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2633 :                 _Traits::assign(_My_data._Bx._Buf, _Count, _Arg);
; 2634 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());
; 2635 :             } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2636 :                 _Traits::copy(_My_data._Bx._Buf, _Arg, _Count);
; 2637 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00032	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0
  00036	5f		 pop	 edi

; 2665 :         } else { // _Strat == _Construct_strategy::_From_string
; 2666 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);
; 2667 :         }
; 2668 : 
; 2669 :         _ASAN_STRING_CREATE(*this);
; 2670 :         _Proxy._Release();
; 2671 :     }

  00037	5b		 pop	 ebx
  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
$LN3@Construct:
  0003c	56		 push	 esi

; 4714 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0003d	8b f7		 mov	 esi, edi
  0003f	83 ce 0f	 or	 esi, 15			; 0000000fH
  00042	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4715 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00048	76 15		 jbe	 SHORT $LN10@Construct

; 4716 :             return _Max;

  0004a	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0004f	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0005a	83 c4 04	 add	 esp, 4
  0005d	eb 30		 jmp	 SHORT $LN31@Construct
$LN10@Construct:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 47   :     return _Left < _Right ? _Right : _Left;

  0005f	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00064	3b f0		 cmp	 esi, eax
  00066	0f 42 f0	 cmovb	 esi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2652 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00069	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0006c	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00071	72 0b		 jb	 SHORT $LN18@Construct

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00079	83 c4 04	 add	 esp, 4
  0007c	eb 11		 jmp	 SHORT $LN31@Construct
$LN18@Construct:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  0007e	85 c0		 test	 eax, eax
  00080	74 0b		 je	 SHORT $LN19@Construct

; 87   :         return ::operator new(_Bytes);

  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00088	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  0008b	eb 02		 jmp	 SHORT $LN31@Construct
$LN19@Construct:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  0008d	33 c0		 xor	 eax, eax
$LN31@Construct:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0008f	57		 push	 edi
  00090	ff 75 08	 push	 DWORD PTR __Arg$[ebp]

; 2653 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00093	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00096	50		 push	 eax

; 2653 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00097	89 03		 mov	 DWORD PTR [ebx], eax

; 2654 : 
; 2655 :         _Start_element_lifetimes(_Unfancy(_New_ptr), _New_capacity + 1);
; 2656 : 
; 2657 :         _My_data._Mysize = _Count;

  00099	89 7b 10	 mov	 DWORD PTR [ebx+16], edi

; 2658 :         _My_data._Myres  = _New_capacity;

  0009c	89 73 14	 mov	 DWORD PTR [ebx+20], esi

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0009f	e8 00 00 00 00	 call	 _memcpy

; 2659 :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2660 :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 2661 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 2662 :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2663 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);
; 2664 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000a4	8b 45 0c	 mov	 eax, DWORD PTR $T1[ebp]

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000a7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2659 :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2660 :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 2661 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 2662 :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2663 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);
; 2664 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000aa	5e		 pop	 esi
  000ab	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
  000af	5f		 pop	 edi

; 2665 :         } else { // _Strat == _Construct_strategy::_From_string
; 2666 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);
; 2667 :         }
; 2668 : 
; 2669 :         _ASAN_STRING_CREATE(*this);
; 2670 :         _Proxy._Release();
; 2671 :     }

  000b0	5b		 pop	 ebx
  000b1	5d		 pop	 ebp
  000b2	c2 08 00	 ret	 8
$LN33@Construct:

; 2621 :             _Xlen_string(); // result too long

  000b5	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN30@Construct:
  000ba	cc		 int	 3
??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
;	COMDAT ??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Left_size$ = 12					; size = 4
__Right$ = 16						; size = 4
__Right_size$ = 20					; size = 4
??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z PROC ; std::_Traits_compare<std::char_traits<char> >, COMDAT

; 553  :     _In_reads_(_Right_size) const _Traits_ptr_t<_Traits> _Right, const size_t _Right_size) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 383  :         return _CSTD memcmp(_First1, _First2, _Count);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]

; 553  :     _In_reads_(_Right_size) const _Traits_ptr_t<_Traits> _Right, const size_t _Right_size) noexcept {

  00006	53		 push	 ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 70   :     return _Right < _Left ? _Right : _Left;

  00007	8b 5d 14	 mov	 ebx, DWORD PTR __Right_size$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 553  :     _In_reads_(_Right_size) const _Traits_ptr_t<_Traits> _Right, const size_t _Right_size) noexcept {

  0000a	56		 push	 esi

; 383  :         return _CSTD memcmp(_First1, _First2, _Count);

  0000b	8b 75 10	 mov	 esi, DWORD PTR __Right$[ebp]

; 553  :     _In_reads_(_Right_size) const _Traits_ptr_t<_Traits> _Right, const size_t _Right_size) noexcept {

  0000e	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 70   :     return _Right < _Left ? _Right : _Left;

  0000f	8b 7d 0c	 mov	 edi, DWORD PTR __Left_size$[ebp]
  00012	3b df		 cmp	 ebx, edi
  00014	8b cf		 mov	 ecx, edi
  00016	0f 42 cb	 cmovb	 ecx, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 383  :         return _CSTD memcmp(_First1, _First2, _Count);

  00019	83 e9 04	 sub	 ecx, 4
  0001c	72 13		 jb	 SHORT $LN12@Traits_com
  0001e	66 90		 npad	 2
$LL13@Traits_com:
  00020	8b 02		 mov	 eax, DWORD PTR [edx]
  00022	3b 06		 cmp	 eax, DWORD PTR [esi]
  00024	75 10		 jne	 SHORT $LN11@Traits_com
  00026	83 c2 04	 add	 edx, 4
  00029	83 c6 04	 add	 esi, 4
  0002c	83 e9 04	 sub	 ecx, 4
  0002f	73 ef		 jae	 SHORT $LL13@Traits_com
$LN12@Traits_com:
  00031	83 f9 fc	 cmp	 ecx, -4			; fffffffcH
  00034	74 34		 je	 SHORT $LN10@Traits_com
$LN11@Traits_com:
  00036	8a 02		 mov	 al, BYTE PTR [edx]
  00038	3a 06		 cmp	 al, BYTE PTR [esi]
  0003a	75 27		 jne	 SHORT $LN14@Traits_com
  0003c	83 f9 fd	 cmp	 ecx, -3			; fffffffdH
  0003f	74 29		 je	 SHORT $LN10@Traits_com
  00041	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  00044	3a 46 01	 cmp	 al, BYTE PTR [esi+1]
  00047	75 1a		 jne	 SHORT $LN14@Traits_com
  00049	83 f9 fe	 cmp	 ecx, -2			; fffffffeH
  0004c	74 1c		 je	 SHORT $LN10@Traits_com
  0004e	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  00051	3a 46 02	 cmp	 al, BYTE PTR [esi+2]
  00054	75 0d		 jne	 SHORT $LN14@Traits_com
  00056	83 f9 ff	 cmp	 ecx, -1
  00059	74 0f		 je	 SHORT $LN10@Traits_com
  0005b	8a 42 03	 mov	 al, BYTE PTR [edx+3]
  0005e	3a 46 03	 cmp	 al, BYTE PTR [esi+3]
  00061	74 07		 je	 SHORT $LN10@Traits_com
$LN14@Traits_com:
  00063	1b c0		 sbb	 eax, eax
  00065	83 c8 01	 or	 eax, 1
  00068	eb 02		 jmp	 SHORT $LN15@Traits_com
$LN10@Traits_com:
  0006a	33 c0		 xor	 eax, eax
$LN15@Traits_com:

; 554  :     // compare [_Left, _Left + _Left_size) to [_Right, _Right + _Right_size) using _Traits
; 555  :     const int _Ans = _Traits::compare(_Left, _Right, (_STD min)(_Left_size, _Right_size));
; 556  : 
; 557  :     if (_Ans != 0) {

  0006c	85 c0		 test	 eax, eax
  0006e	75 10		 jne	 SHORT $LN1@Traits_com

; 558  :         return _Ans;
; 559  :     }
; 560  : 
; 561  :     if (_Left_size < _Right_size) {

  00070	3b df		 cmp	 ebx, edi
  00072	76 08		 jbe	 SHORT $LN26@Traits_com

; 566  :         return 1;
; 567  :     }
; 568  : 
; 569  :     return 0;
; 570  : }

  00074	5f		 pop	 edi
  00075	5e		 pop	 esi
  00076	83 c8 ff	 or	 eax, -1
  00079	5b		 pop	 ebx
  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
$LN26@Traits_com:

; 562  :         return -1;
; 563  :     }
; 564  : 
; 565  :     if (_Left_size > _Right_size) {

  0007c	1b c0		 sbb	 eax, eax
  0007e	f7 d8		 neg	 eax
$LN1@Traits_com:

; 566  :         return 1;
; 567  :     }
; 568  : 
; 569  :     return 0;
; 570  : }

  00080	5f		 pop	 edi
  00081	5e		 pop	 esi
  00082	5b		 pop	 ebx
  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z ENDP ; std::_Traits_compare<std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??1TPropertyDungeonBlock@prt@@QAE@XZ
_TEXT	SEGMENT
??1TPropertyDungeonBlock@prt@@QAE@XZ PROC		; prt::TPropertyDungeonBlock::~TPropertyDungeonBlock, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  00009	72 2c		 jb	 SHORT $LN15@TPropertyD
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0000e	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00015	72 16		 jb	 SHORT $LN25@TPropertyD

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00017	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001a	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001d	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00022	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00025	0f 87 a2 00 00
	00		 ja	 $LN77@TPropertyD

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002b	8b c2		 mov	 eax, edx
$LN25@TPropertyD:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0002d	51		 push	 ecx
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00034	83 c4 08	 add	 esp, 8
$LN15@TPropertyD:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  00037	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  0003e	c7 46 44 0f 00
	00 00		 mov	 DWORD PTR [esi+68], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00045	c6 46 30 00	 mov	 BYTE PTR [esi+48], 0

; 2244 :         return _BUF_SIZE <= _Myres;

  00049	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  0004c	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  0004f	72 28		 jb	 SHORT $LN43@TPropertyD
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00051	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00054	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00055	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0005b	72 12		 jb	 SHORT $LN53@TPropertyD

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0005d	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00060	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00063	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00065	83 c0 fc	 add	 eax, -4			; fffffffcH
  00068	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0006b	77 60		 ja	 SHORT $LN77@TPropertyD

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0006d	8b c2		 mov	 eax, edx
$LN53@TPropertyD:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0006f	51		 push	 ecx
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00076	83 c4 08	 add	 esp, 8
$LN43@TPropertyD:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  00079	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  00080	c7 46 2c 0f 00
	00 00		 mov	 DWORD PTR [esi+44], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00087	c6 46 18 00	 mov	 BYTE PTR [esi+24], 0

; 2244 :         return _BUF_SIZE <= _Myres;

  0008b	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0008e	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  00091	72 27		 jb	 SHORT $LN70@TPropertyD
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00093	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00095	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00096	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0009c	72 12		 jb	 SHORT $LN80@TPropertyD

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0009e	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000a1	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000a4	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a6	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a9	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000ac	77 1f		 ja	 SHORT $LN77@TPropertyD

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000ae	8b c2		 mov	 eax, edx
$LN80@TPropertyD:

; 265  :         ::operator delete(_Ptr, _Bytes);

  000b0	51		 push	 ecx
  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000b7	83 c4 08	 add	 esp, 8
$LN70@TPropertyD:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  000ba	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  000c1	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000c8	c6 06 00	 mov	 BYTE PTR [esi], 0
  000cb	5e		 pop	 esi
  000cc	c3		 ret	 0
$LN77@TPropertyD:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN94@TPropertyD:
  000d2	cc		 int	 3
??1TPropertyDungeonBlock@prt@@QAE@XZ ENDP		; prt::TPropertyDungeonBlock::~TPropertyDungeonBlock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??1TPropertyAmbience@prt@@QAE@XZ
_TEXT	SEGMENT
??1TPropertyAmbience@prt@@QAE@XZ PROC			; prt::TPropertyAmbience::~TPropertyAmbience, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 4e 3c	 lea	 ecx, DWORD PTR [esi+60]
  00006	e8 00 00 00 00	 call	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  0000b	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  0000e	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  00011	72 28		 jb	 SHORT $LN15@TPropertyA
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00013	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00016	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00017	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001d	72 12		 jb	 SHORT $LN25@TPropertyA

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001f	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00022	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00025	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00027	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002d	77 60		 ja	 SHORT $LN50@TPropertyA

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002f	8b c2		 mov	 eax, edx
$LN25@TPropertyA:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00031	51		 push	 ecx
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00038	83 c4 08	 add	 esp, 8
$LN15@TPropertyA:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  0003b	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  00042	c7 46 2c 0f 00
	00 00		 mov	 DWORD PTR [esi+44], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00049	c6 46 18 00	 mov	 BYTE PTR [esi+24], 0

; 2244 :         return _BUF_SIZE <= _Myres;

  0004d	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00050	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  00053	72 27		 jb	 SHORT $LN43@TPropertyA
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00055	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00057	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00058	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0005e	72 12		 jb	 SHORT $LN53@TPropertyA

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00060	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00063	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00066	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00068	83 c0 fc	 add	 eax, -4			; fffffffcH
  0006b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0006e	77 1f		 ja	 SHORT $LN50@TPropertyA

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00070	8b c2		 mov	 eax, edx
$LN53@TPropertyA:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00072	51		 push	 ecx
  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00079	83 c4 08	 add	 esp, 8
$LN43@TPropertyA:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  0007c	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  00083	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0008a	c6 06 00	 mov	 BYTE PTR [esi], 0
  0008d	5e		 pop	 esi
  0008e	c3		 ret	 0
$LN50@TPropertyA:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0008f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN64@TPropertyA:
  00094	cc		 int	 3
??1TPropertyAmbience@prt@@QAE@XZ ENDP			; prt::TPropertyAmbience::~TPropertyAmbience
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??1TPropertyEffect@prt@@QAE@XZ
_TEXT	SEGMENT
??1TPropertyEffect@prt@@QAE@XZ PROC			; prt::TPropertyEffect::~TPropertyEffect, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  00009	72 28		 jb	 SHORT $LN15@TPropertyE
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0000e	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00015	72 12		 jb	 SHORT $LN25@TPropertyE

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00017	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001a	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001d	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00022	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00025	77 60		 ja	 SHORT $LN50@TPropertyE

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00027	8b c2		 mov	 eax, edx
$LN25@TPropertyE:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00029	51		 push	 ecx
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00030	83 c4 08	 add	 esp, 8
$LN15@TPropertyE:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  00033	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  0003a	c7 46 2c 0f 00
	00 00		 mov	 DWORD PTR [esi+44], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00041	c6 46 18 00	 mov	 BYTE PTR [esi+24], 0

; 2244 :         return _BUF_SIZE <= _Myres;

  00045	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00048	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  0004b	72 27		 jb	 SHORT $LN43@TPropertyE
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0004d	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0004f	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00050	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00056	72 12		 jb	 SHORT $LN53@TPropertyE

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00058	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0005b	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0005e	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00060	83 c0 fc	 add	 eax, -4			; fffffffcH
  00063	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00066	77 1f		 ja	 SHORT $LN50@TPropertyE

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00068	8b c2		 mov	 eax, edx
$LN53@TPropertyE:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0006a	51		 push	 ecx
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00071	83 c4 08	 add	 esp, 8
$LN43@TPropertyE:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  00074	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  0007b	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00082	c6 06 00	 mov	 BYTE PTR [esi], 0
  00085	5e		 pop	 esi
  00086	c3		 ret	 0
$LN50@TPropertyE:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00087	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN64@TPropertyE:
  0008c	cc		 int	 3
??1TPropertyEffect@prt@@QAE@XZ ENDP			; prt::TPropertyEffect::~TPropertyEffect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??1TPropertyBuilding@prt@@QAE@XZ
_TEXT	SEGMENT
??1TPropertyBuilding@prt@@QAE@XZ PROC			; prt::TPropertyBuilding::~TPropertyBuilding, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  00009	72 2c		 jb	 SHORT $LN15@TPropertyB
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0000e	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00015	72 16		 jb	 SHORT $LN25@TPropertyB

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00017	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001a	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001d	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00022	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00025	0f 87 a2 00 00
	00		 ja	 $LN77@TPropertyB

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002b	8b c2		 mov	 eax, edx
$LN25@TPropertyB:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0002d	51		 push	 ecx
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00034	83 c4 08	 add	 esp, 8
$LN15@TPropertyB:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  00037	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  0003e	c7 46 44 0f 00
	00 00		 mov	 DWORD PTR [esi+68], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00045	c6 46 30 00	 mov	 BYTE PTR [esi+48], 0

; 2244 :         return _BUF_SIZE <= _Myres;

  00049	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  0004c	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  0004f	72 28		 jb	 SHORT $LN43@TPropertyB
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00051	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00054	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00055	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0005b	72 12		 jb	 SHORT $LN53@TPropertyB

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0005d	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00060	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00063	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00065	83 c0 fc	 add	 eax, -4			; fffffffcH
  00068	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0006b	77 60		 ja	 SHORT $LN77@TPropertyB

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0006d	8b c2		 mov	 eax, edx
$LN53@TPropertyB:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0006f	51		 push	 ecx
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00076	83 c4 08	 add	 esp, 8
$LN43@TPropertyB:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  00079	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  00080	c7 46 2c 0f 00
	00 00		 mov	 DWORD PTR [esi+44], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00087	c6 46 18 00	 mov	 BYTE PTR [esi+24], 0

; 2244 :         return _BUF_SIZE <= _Myres;

  0008b	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0008e	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  00091	72 27		 jb	 SHORT $LN70@TPropertyB
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00093	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00095	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00096	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0009c	72 12		 jb	 SHORT $LN80@TPropertyB

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0009e	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000a1	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000a4	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a6	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a9	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000ac	77 1f		 ja	 SHORT $LN77@TPropertyB

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000ae	8b c2		 mov	 eax, edx
$LN80@TPropertyB:

; 265  :         ::operator delete(_Ptr, _Bytes);

  000b0	51		 push	 ecx
  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000b7	83 c4 08	 add	 esp, 8
$LN70@TPropertyB:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  000ba	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  000c1	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000c8	c6 06 00	 mov	 BYTE PTR [esi], 0
  000cb	5e		 pop	 esi
  000cc	c3		 ret	 0
$LN77@TPropertyB:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN94@TPropertyB:
  000d2	cc		 int	 3
??1TPropertyBuilding@prt@@QAE@XZ ENDP			; prt::TPropertyBuilding::~TPropertyBuilding
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 766  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	85 f6		 test	 esi, esi
  00008	0f 84 a6 00 00
	00		 je	 $LN4@vector
  0000e	53		 push	 ebx

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);

  0000f	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1086 :         for (; _First != _Last; ++_First) {

  00012	3b f3		 cmp	 esi, ebx
  00014	74 47		 je	 SHORT $LN8@vector
$LL9@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00016	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00019	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  0001c	72 27		 jb	 SHORT $LN28@vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0001e	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00020	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00021	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00027	72 12		 jb	 SHORT $LN38@vector

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00029	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0002c	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0002f	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00031	83 c0 fc	 add	 eax, -4			; fffffffcH
  00034	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00037	77 7e		 ja	 SHORT $LN58@vector

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00039	8b c2		 mov	 eax, edx
$LN38@vector:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0003b	51		 push	 ecx
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00042	83 c4 08	 add	 esp, 8
$LN28@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  00045	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  0004c	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00053	c6 06 00	 mov	 BYTE PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1086 :         for (; _First != _Last; ++_First) {

  00056	83 c6 18	 add	 esi, 24			; 00000018H
  00059	3b f3		 cmp	 esi, ebx
  0005b	75 b9		 jne	 SHORT $LL9@vector
$LN8@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0005d	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00060	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00065	8b 37		 mov	 esi, DWORD PTR [edi]
  00067	2b ce		 sub	 ecx, esi
  00069	f7 e9		 imul	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0006b	5b		 pop	 ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0006c	c1 fa 02	 sar	 edx, 2
  0006f	8b c2		 mov	 eax, edx
  00071	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00074	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00076	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00079	c1 e1 03	 shl	 ecx, 3

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0007c	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00082	72 12		 jb	 SHORT $LN61@vector

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00084	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00087	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0008a	2b f2		 sub	 esi, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0008c	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  0008f	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00092	77 23		 ja	 SHORT $LN58@vector

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00094	8b f2		 mov	 esi, edx
$LN61@vector:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00096	51		 push	 ecx
  00097	56		 push	 esi
  00098	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  0009d	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  000a3	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  000a6	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 2051 :             _Myend   = nullptr;

  000ad	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN4@vector:
  000b4	5f		 pop	 edi

; 772  :     }

  000b5	5e		 pop	 esi
  000b6	c3		 ret	 0
$LN58@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000b7	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN76@vector:
  000bc	cc		 int	 3
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocale
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT
__Lock$2 = -24						; size = 4
__Psave$3 = -20						; size = 4
$T4 = -16						; size = 4
__Lock$5 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Psave_guard$6 = 8					; size = 4
__Loc$ = 8						; size = 4
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z PROC ; std::use_facet<std::ctype<char> >, COMDAT

; 422  : const _Facet& __CRTDECL use_facet(const locale& _Loc) { // get facet reference from locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 423  :     _BEGIN_LOCK(_LOCK_LOCALE) // the thread lock, make get atomic

  00028	6a 00		 push	 0
  0002a	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  0002d	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 102  :             if (_Id == 0) { // still zero, allocate stamp

  00032	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A ; std::ctype<char>::id

; 424  :     const locale::facet* _Psave = _Facetptr<_Facet>::_Psave; // static pointer to lazy facet

  00038	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave
  0003e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00045	89 5d ec	 mov	 DWORD PTR __Psave$3[ebp], ebx

; 102  :             if (_Id == 0) { // still zero, allocate stamp

  00048	85 ff		 test	 edi, edi
  0004a	75 2f		 jne	 SHORT $LN11@use_facet

; 103  :                 _BEGIN_LOCK(_LOCK_LOCALE)

  0004c	57		 push	 edi
  0004d	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$5[ebp]
  00050	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 104  :                 if (_Id == 0) {

  00055	39 3d 00 00 00
	00		 cmp	 DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A, edi ; std::ctype<char>::id
  0005b	75 10		 jne	 SHORT $LN12@use_facet

; 105  :                     _Id = static_cast<size_t>(++_Id_cnt);

  0005d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00062	40		 inc	 eax
  00063	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  00068	a3 00 00 00 00	 mov	 DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A, eax ; std::ctype<char>::id
$LN12@use_facet:

; 106  :                 }
; 107  :                 _END_LOCK()

  0006d	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$5[ebp]
  00070	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00075	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A ; std::ctype<char>::id
$LN11@use_facet:

; 369  :         const facet* _Facptr = _Id < _Ptr->_Facetcount ? _Ptr->_Facetvec[_Id] : nullptr; // null if id off end

  0007b	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  0007e	8d 0c bd 00 00
	00 00		 lea	 ecx, DWORD PTR [edi*4]
  00085	89 4d f0	 mov	 DWORD PTR $T4[ebp], ecx
  00088	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  0008b	3b 7a 0c	 cmp	 edi, DWORD PTR [edx+12]
  0008e	73 0c		 jae	 SHORT $LN19@use_facet
  00090	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00093	8b 34 01	 mov	 esi, DWORD PTR [ecx+eax]

; 370  :         if (_Facptr || !_Ptr->_Xparent) {

  00096	85 f6		 test	 esi, esi
  00098	75 60		 jne	 SHORT $LN34@use_facet
  0009a	eb 05		 jmp	 SHORT $LN36@use_facet
$LN19@use_facet:

; 108  :             }
; 109  :             return _Id;
; 110  :         }
; 111  : 
; 112  :     private:
; 113  :         size_t _Id; // the identifier stamp
; 114  : 
; 115  :         __PURE_APPDOMAIN_GLOBAL static int _Id_cnt;
; 116  :     };
; 117  : 
; 118  :     struct _Facet_guard;
; 119  : 
; 120  :     class _CRTIMP2_PURE_IMPORT facet : public _Facet_base, public _Crt_new_delete {
; 121  :         // base class for all locale facets, performs reference counting
; 122  :     private:
; 123  :         friend _Facet_guard;
; 124  : 
; 125  :     public:
; 126  :         static size_t __CLRCALL_OR_CDECL _Getcat(const facet** = nullptr, const locale* = nullptr) {
; 127  :             // get category value, or -1 if no corresponding C category
; 128  :             return static_cast<size_t>(-1);
; 129  :         }
; 130  : 
; 131  :         void __CLR_OR_THIS_CALL _Incref() noexcept override { // increment use count
; 132  :             _MT_INCR(_Myrefs);
; 133  :         }
; 134  : 
; 135  :         _Facet_base* __CLR_OR_THIS_CALL _Decref() noexcept override { // decrement use count
; 136  :             if (_MT_DECR(_Myrefs) == 0) {
; 137  :                 return this;
; 138  :             }
; 139  : 
; 140  :             return nullptr;
; 141  :         }
; 142  : 
; 143  :     private:
; 144  :         _Atomic_counter_t _Myrefs; // the reference count
; 145  : 
; 146  :     protected:
; 147  :         explicit __CLR_OR_THIS_CALL facet(size_t _Initrefs = 0)
; 148  :             : _Myrefs(static_cast<_Atomic_counter_t>(_Initrefs)) // non-atomic initialization
; 149  :         {}
; 150  : 
; 151  :         __CLR_OR_THIS_CALL ~facet() noexcept override {}
; 152  : 
; 153  :     public:
; 154  :         __CLR_OR_THIS_CALL facet(const facet&)            = delete;
; 155  :         facet& __CLR_OR_THIS_CALL operator=(const facet&) = delete;
; 156  :     };
; 157  : 
; 158  :     struct _NODISCARD _Facet_guard {
; 159  :         facet* _Target;
; 160  :         ~_Facet_guard() {
; 161  :             if (_Target) {
; 162  :                 delete _Target->_Decref();
; 163  :             }
; 164  :         }
; 165  :     };
; 166  : 
; 167  :     class _CRTIMP2_PURE_IMPORT _Locimp : public facet { // reference-counted actual implementation of a locale
; 168  :     protected:
; 169  :         __CLR_OR_THIS_CALL ~_Locimp() noexcept {
; 170  :             _Locimp_dtor(this);
; 171  :         }
; 172  : 
; 173  :     private:
; 174  :         static _Locimp* __CLRCALL_PURE_OR_CDECL _New_Locimp(bool _Transparent = false);
; 175  :         static _Locimp* __CLRCALL_PURE_OR_CDECL _New_Locimp(const _Locimp& _Right);
; 176  : 
; 177  :         static void __CLRCALL_PURE_OR_CDECL _Locimp_dtor(_Locimp*);
; 178  :         static void __CLRCALL_PURE_OR_CDECL _Locimp_Addfac(_Locimp*, facet*, size_t); // add a facet
; 179  :         static void __CLRCALL_PURE_OR_CDECL _Locimp_ctor(_Locimp*, const _Locimp&);
; 180  : 
; 181  :         friend locale;
; 182  : 
; 183  :         __CLR_OR_THIS_CALL _Locimp(bool _Transparent)
; 184  :             : locale::facet(1), _Facetvec(nullptr), _Facetcount(0), _Catmask(none), _Xparent(_Transparent), _Name("*") {
; 185  :         }
; 186  : 
; 187  :         __CLR_OR_THIS_CALL _Locimp(const _Locimp& _Right)
; 188  :             : locale::facet(1), _Facetvec(nullptr), _Facetcount(_Right._Facetcount), _Catmask(_Right._Catmask),
; 189  :               _Xparent(_Right._Xparent), _Name(_Right._Name.c_str()) {
; 190  :             _Locimp_ctor(this, _Right);
; 191  :         }
; 192  : 
; 193  :         void __CLR_OR_THIS_CALL _Addfac(facet* _Pfacet, size_t _Id) { // add a facet
; 194  :             _Locimp_Addfac(this, _Pfacet, _Id);
; 195  :         }
; 196  : 
; 197  :         static _Locimp* __CLRCALL_OR_CDECL _Makeloc(
; 198  :             const _Locinfo&, category, _Locimp*, const locale*); // make essential facets
; 199  : 
; 200  :         static void __CLRCALL_OR_CDECL _Makewloc(
; 201  :             const _Locinfo&, category, _Locimp*, const locale*); // make wchar_t facets
; 202  : 
; 203  : #if defined(_NATIVE_WCHAR_T_DEFINED) && !_ENFORCE_FACET_SPECIALIZATIONS
; 204  :         static void __CLRCALL_OR_CDECL _Makeushloc(
; 205  :             const _Locinfo&, category, _Locimp*, const locale*); // make ushort facets
; 206  : #endif // defined(_NATIVE_WCHAR_T_DEFINED) && !_ENFORCE_FACET_SPECIALIZATIONS
; 207  : 
; 208  :         static void __CLRCALL_OR_CDECL _Makexloc(
; 209  :             const _Locinfo&, category, _Locimp*, const locale*); // make remaining facets
; 210  : 
; 211  :         facet** _Facetvec; // pointer to vector of facets
; 212  :         size_t _Facetcount; // size of vector of facets
; 213  :         category _Catmask; // mask describing implemented categories
; 214  :         bool _Xparent; // true if locale is transparent
; 215  :         _Yarn<char> _Name; // locale name, or "*" if not known
; 216  : 
; 217  :         __PURE_APPDOMAIN_GLOBAL static _Locimp* _Clocptr;
; 218  : 
; 219  :     public:
; 220  :         _Locimp& __CLR_OR_THIS_CALL operator=(const _Locimp&) = delete;
; 221  :     };
; 222  : 
; 223  :     template <class _Elem, class _Traits, class _Alloc>
; 224  :     bool operator()(
; 225  :         const basic_string<_Elem, _Traits, _Alloc>& _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) const {
; 226  :         // compare _Left and _Right strings using collate facet in locale
; 227  :         const auto& _Coll_fac = _STD use_facet<_STD collate<_Elem>>(*this);
; 228  : 
; 229  :         const _Elem* const _Left_data  = _Left.data();
; 230  :         const _Elem* const _Right_data = _Right.data();
; 231  :         return _Coll_fac.compare(_Left_data, _Left_data + _Left.size(), _Right_data, _Right_data + _Right.size()) < 0;
; 232  :     }
; 233  : 
; 234  :     template <class _Facet>
; 235  :     locale combine(const locale& _Loc) const { // combine two locales
; 236  :         _Facet* _Facptr;
; 237  : 
; 238  :         _TRY_BEGIN
; 239  :         _Facptr = const_cast<_Facet*>(_STD addressof(_STD use_facet<_Facet>(_Loc)));
; 240  :         _CATCH_ALL
; 241  :         _Xruntime_error("locale::combine facet missing");
; 242  :         _CATCH_END
; 243  : 
; 244  :         _Locimp* _Newimp = _Locimp::_New_Locimp(*_Ptr);
; 245  :         _Newimp->_Addfac(_Facptr, _Facet::id);
; 246  :         _Newimp->_Catmask = none;
; 247  :         _Newimp->_Name    = "*";
; 248  :         return locale{_Newimp};
; 249  :     }
; 250  : 
; 251  :     template <class _Facet>
; 252  :     locale(const locale& _Loc, const _Facet* _Facptr) : _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr)) {
; 253  :         if (_Facptr) { // replace facet
; 254  :             _Ptr->_Addfac(const_cast<_Facet*>(_Facptr), _Facet::id);
; 255  :             _Ptr->_Catmask = none;
; 256  :             _Ptr->_Name    = "*";
; 257  :         }
; 258  :     }
; 259  : 
; 260  :     locale(_Uninitialized) {} // defer construction
; 261  : 
; 262  :     locale(const locale& _Right) noexcept : _Ptr(_Right._Ptr) {
; 263  :         _Ptr->_Incref();
; 264  :     }
; 265  : 
; 266  :     locale() noexcept : _Ptr(_Init(true)) {}
; 267  : 
; 268  : #if !defined(MRTDLL) || !defined(_CRTBLD)
; 269  :     locale(const locale& _Loc, const locale& _Other, category _Cat) : _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr)) {
; 270  :         // construct a locale by copying named facets
; 271  :         if (_Cat != none) { // worth adding, do it
; 272  :             _Facet_guard _Guard{_Ptr};
; 273  :             _BEGIN_LOCINFO(_Lobj)
; 274  :             _Locimp::_Makeloc(_Lobj, _Cat, _Ptr, &_Other);
; 275  :             _Lobj._Addcats(_Loc._Ptr->_Catmask, _Loc.name().c_str());
; 276  :             _Lobj._Addcats(_Other._Ptr->_Catmask, _Other.name().c_str());
; 277  :             _Ptr->_Catmask = _Loc._Ptr->_Catmask | _Other._Ptr->_Catmask;
; 278  :             _Ptr->_Name    = _Lobj._Getname();
; 279  :             _END_LOCINFO()
; 280  :             _Guard._Target = nullptr;
; 281  :         }
; 282  :     }
; 283  : 
; 284  : private:
; 285  :     void _Construct(const string& _Str, category _Cat) {
; 286  :         // construct a locale with named facets
; 287  :         bool _Bad = false;
; 288  :         _Init();
; 289  :         if (_Cat != none) { // worth adding, do it
; 290  :             _Facet_guard _Guard{_Ptr};
; 291  :             _BEGIN_LOCINFO(_Lobj(_Cat, _Str.c_str()))
; 292  :             if (_Badname(_Lobj)) {
; 293  :                 _Bad = true;
; 294  :             } else { // name okay, build the locale
; 295  :                 _Locimp::_Makeloc(_Lobj, _Cat, _Ptr, nullptr);
; 296  :                 _Ptr->_Catmask = _Cat;
; 297  :                 _Ptr->_Name    = _Str.c_str();
; 298  :             }
; 299  :             _END_LOCINFO()
; 300  :             _Guard._Target = nullptr;
; 301  :         }
; 302  : 
; 303  :         if (_Bad) { // Don't throw within _BEGIN_LOCINFO if we can avoid it
; 304  :             delete _Ptr->_Decref();
; 305  :             _Xruntime_error("bad locale name");
; 306  :         }
; 307  :     }
; 308  : 
; 309  : public:
; 310  :     explicit locale(const char* _Locname, category _Cat = all) : _Ptr(_Locimp::_New_Locimp()) {
; 311  :         // construct a locale with named facets
; 312  :         // _Locname might have been returned from setlocale().
; 313  :         // Therefore, _Construct() takes const string&.
; 314  :         if (_Locname) {
; 315  :             _Construct(_Locname, _Cat);
; 316  :             return;
; 317  :         }
; 318  : 
; 319  :         _Xruntime_error("bad locale name");
; 320  :     }
; 321  : 
; 322  :     locale(const locale& _Loc, const char* _Locname, category _Cat) : _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr)) {
; 323  :         // construct a locale by copying, replacing named facets
; 324  :         // _Locname might have been returned from setlocale().
; 325  :         // Therefore, _Construct() takes const string&.
; 326  :         if (_Locname) {
; 327  :             _Construct(_Locname, _Cat);
; 328  :             return;
; 329  :         }
; 330  : 
; 331  :         _Xruntime_error("bad locale name");
; 332  :     }
; 333  : 
; 334  :     explicit locale(const string& _Str, category _Cat = all) : _Ptr(_Locimp::_New_Locimp()) {
; 335  :         // construct a locale with named facets
; 336  :         _Construct(_Str, _Cat);
; 337  :     }
; 338  : 
; 339  :     locale(const locale& _Loc, const string& _Str, category _Cat) : _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr)) {
; 340  :         // construct a locale by copying, replacing named facets
; 341  :         _Construct(_Str, _Cat);
; 342  :     }
; 343  : #endif // !MRTDLL || !_CRTBLD
; 344  : 
; 345  :     ~locale() noexcept {
; 346  :         if (_Ptr) {
; 347  :             delete _Ptr->_Decref();
; 348  :         }
; 349  :     }
; 350  : 
; 351  :     const locale& operator=(const locale& _Right) noexcept {
; 352  :         if (_Ptr != _Right._Ptr) { // different implementation, point at new one
; 353  :             delete _Ptr->_Decref();
; 354  :             _Ptr = _Right._Ptr;
; 355  :             _Ptr->_Incref();
; 356  :         }
; 357  :         return *this;
; 358  :     }
; 359  : 
; 360  :     string name() const {
; 361  :         return _Ptr ? _Ptr->_Name.c_str() : string{};
; 362  :     }
; 363  : 
; 364  :     _Ret_z_ const char* _C_str() const noexcept {
; 365  :         return _Ptr ? _Ptr->_Name.c_str() : "";
; 366  :     }
; 367  : 
; 368  :     const facet* _Getfacet(size_t _Id) const { // look up a facet in locale object
; 369  :         const facet* _Facptr = _Id < _Ptr->_Facetcount ? _Ptr->_Facetvec[_Id] : nullptr; // null if id off end

  0009c	33 f6		 xor	 esi, esi
  0009e	89 4d f0	 mov	 DWORD PTR $T4[ebp], ecx
$LN36@use_facet:

; 370  :         if (_Facptr || !_Ptr->_Xparent) {

  000a1	80 7a 14 00	 cmp	 BYTE PTR [edx+20], 0
  000a5	74 13		 je	 SHORT $LN14@use_facet

; 371  :             return _Facptr; // found facet or not transparent
; 372  :         }
; 373  : 
; 374  :         // look in current locale
; 375  :         locale::_Locimp* _Ptr0 = _Getgloballocale();

  000a7	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale

; 376  :         if (_Id < _Ptr0->_Facetcount) {

  000ac	3b 78 0c	 cmp	 edi, DWORD PTR [eax+12]
  000af	73 0d		 jae	 SHORT $LN37@use_facet

; 377  :             return _Ptr0->_Facetvec[_Id]; // get from current locale

  000b1	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000b4	8b 75 f0	 mov	 esi, DWORD PTR $T4[ebp]
  000b7	8b 34 06	 mov	 esi, DWORD PTR [esi+eax]
$LN14@use_facet:

; 425  : 
; 426  :     const size_t _Id         = _Facet::id;
; 427  :     const locale::facet* _Pf = _Loc._Getfacet(_Id);
; 428  : 
; 429  :     if (!_Pf) {

  000ba	85 f6		 test	 esi, esi
  000bc	75 3c		 jne	 SHORT $LN34@use_facet
$LN37@use_facet:

; 430  :         if (_Psave) {

  000be	85 db		 test	 ebx, ebx
  000c0	74 04		 je	 SHORT $LN3@use_facet

; 431  :             _Pf = _Psave; // lazy facet already allocated

  000c2	8b f3		 mov	 esi, ebx
  000c4	eb 34		 jmp	 SHORT $LN34@use_facet
$LN3@use_facet:

; 432  :         } else if (_Facet::_Getcat(&_Psave, &_Loc) == static_cast<size_t>(-1)) {

  000c6	ff 75 08	 push	 DWORD PTR __Loc$[ebp]
  000c9	8d 45 ec	 lea	 eax, DWORD PTR __Psave$3[ebp]
  000cc	50		 push	 eax
  000cd	e8 00 00 00 00	 call	 ?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::ctype<char>::_Getcat
  000d2	83 c4 08	 add	 esp, 8
  000d5	83 f8 ff	 cmp	 eax, -1
  000d8	74 3c		 je	 SHORT $LN42@use_facet
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1515 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  000da	8b 75 ec	 mov	 esi, DWORD PTR __Psave$3[ebp]
  000dd	89 75 08	 mov	 DWORD PTR __Psave_guard$6[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocale

; 445  :             _Facet_Register(_Pfmod);

  000e0	56		 push	 esi
  000e1	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000e5	e8 00 00 00 00	 call	 ?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z ; std::_Facet_Register

; 446  : #endif // defined(_M_CEE)
; 447  : 
; 448  :             _Pfmod->_Incref();

  000ea	8b 16		 mov	 edx, DWORD PTR [esi]
  000ec	83 c4 04	 add	 esp, 4
  000ef	8b ce		 mov	 ecx, esi
  000f1	ff 52 04	 call	 DWORD PTR [edx+4]

; 449  :             _Facetptr<_Facet>::_Psave = _Psave;

  000f4	89 35 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B, esi ; std::_Facetptr<std::ctype<char> >::_Psave
$LN34@use_facet:

; 450  :             _Pf                       = _Psave;
; 451  : 
; 452  :             (void) _Psave_guard.release();
; 453  :         }
; 454  :     }
; 455  : 
; 456  :     return static_cast<const _Facet&>(*_Pf); // should be dynamic_cast

  000fa	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  000fd	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00102	8b c6		 mov	 eax, esi

; 457  :     _END_LOCK()
; 458  : } // end of use_facet body

  00104	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00107	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0010e	59		 pop	 ecx
  0010f	5f		 pop	 edi
  00110	5e		 pop	 esi
  00111	5b		 pop	 ebx
  00112	8b e5		 mov	 esp, ebp
  00114	5d		 pop	 ebp
  00115	c3		 ret	 0
$LN42@use_facet:

; 433  : #if _HAS_EXCEPTIONS
; 434  :             _Throw_bad_cast(); // lazy disallowed

  00116	e8 00 00 00 00	 call	 ?_Throw_bad_cast@std@@YAXXZ ; std::_Throw_bad_cast
$LN39@use_facet:
  0011b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$1:
  00008	8d 4d 08	 lea	 ecx, DWORD PTR __Psave_guard$6[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::ctype<char> >
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocale
;	COMDAT ??_G?$ctype@D@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$ctype@D@std@@MAEPAXI@Z PROC			; std::ctype<char>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2736 :     __CLR_OR_THIS_CALL ~ctype() noexcept override {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 2745 :         if (0 < _Ctype._Delfl) {

  00006	8b 46 10	 mov	 eax, DWORD PTR [esi+16]

; 2736 :     __CLR_OR_THIS_CALL ~ctype() noexcept override {

  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@D@std@@6B@

; 2745 :         if (0 < _Ctype._Delfl) {

  0000f	85 c0		 test	 eax, eax
  00011	7e 0a		 jle	 SHORT $LN16@scalar

; 2746 :             _CSTD free(const_cast<short*>(_Ctype._Table));

  00013	ff 76 0c	 push	 DWORD PTR [esi+12]
  00016	e8 00 00 00 00	 call	 _free
  0001b	eb 0a		 jmp	 SHORT $LN17@scalar
$LN16@scalar:

; 2747 :         } else if (_Ctype._Delfl < 0) {

  0001d	79 0b		 jns	 SHORT $LN10@scalar

; 2748 :             delete[] _Ctype._Table;

  0001f	ff 76 0c	 push	 DWORD PTR [esi+12]
  00022	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
$LN17@scalar:

; 2749 :         }
; 2750 : 
; 2751 :         _CSTD free(_Ctype._LocaleName);

  00027	83 c4 04	 add	 esp, 4
$LN10@scalar:
  0002a	ff 76 14	 push	 DWORD PTR [esi+20]
  0002d	e8 00 00 00 00	 call	 _free
  00032	83 c4 04	 add	 esp, 4

; 2738 :     }

  00035	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  0003b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0003f	74 0b		 je	 SHORT $LN12@scalar
  00041	6a 18		 push	 24			; 00000018H
  00043	56		 push	 esi
  00044	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00049	83 c4 08	 add	 esp, 8
$LN12@scalar:
  0004c	8b c6		 mov	 eax, esi
  0004e	5e		 pop	 esi
  0004f	5d		 pop	 ebp
  00050	c2 04 00	 ret	 4
??_G?$ctype@D@std@@MAEPAXI@Z ENDP			; std::ctype<char>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocale
;	COMDAT ?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
__Dest$ = 20						; size = 4
?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z PROC		; std::ctype<char>::do_narrow, COMDAT
; _this$ = ecx

; 2798 :         char* _Dest) const { // narrow elements in [_First, _Last) to chars

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2799 :         _Adl_verify_range(_First, _Last);
; 2800 :         _CSTD memcpy(_Dest, _First, static_cast<size_t>(_Last - _First));

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	51		 push	 ecx
  0000c	52		 push	 edx
  0000d	ff 75 14	 push	 DWORD PTR __Dest$[ebp]
  00010	e8 00 00 00 00	 call	 _memcpy

; 2801 :         return _Last;

  00015	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2802 :     }

  0001b	5d		 pop	 ebp
  0001c	c2 10 00	 ret	 16			; 00000010H
?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z ENDP		; std::ctype<char>::do_narrow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocale
;	COMDAT ?do_narrow@?$ctype@D@std@@MBEDDD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
___formal$ = 12						; size = 1
?do_narrow@?$ctype@D@std@@MBEDDD@Z PROC			; std::ctype<char>::do_narrow, COMDAT
; _this$ = ecx

; 2793 :     virtual _Elem __CLR_OR_THIS_CALL do_narrow(_Elem _Ch, char) const { // narrow char

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2794 :         return _Ch;

  00003	8a 45 08	 mov	 al, BYTE PTR __Ch$[ebp]

; 2795 :     }

  00006	5d		 pop	 ebp
  00007	c2 08 00	 ret	 8
?do_narrow@?$ctype@D@std@@MBEDDD@Z ENDP			; std::ctype<char>::do_narrow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocale
;	COMDAT ?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z PROC		; std::ctype<char>::do_widen, COMDAT
; _this$ = ecx

; 2787 :         const char* _First, const char* _Last, _Elem* _Dest) const { // widen chars in [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2788 :         _Adl_verify_range(_First, _Last);
; 2789 :         _CSTD memcpy(_Dest, _First, static_cast<size_t>(_Last - _First));

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	51		 push	 ecx
  0000c	52		 push	 edx
  0000d	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00010	e8 00 00 00 00	 call	 _memcpy

; 2790 :         return _Last;

  00015	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2791 :     }

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z ENDP		; std::ctype<char>::do_widen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocale
;	COMDAT ?do_widen@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
__Byte$ = 8						; size = 1
?do_widen@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_widen, COMDAT
; _this$ = ecx

; 2782 :     virtual _Elem __CLR_OR_THIS_CALL do_widen(char _Byte) const { // widen char

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2783 :         return _Byte;

  00003	8a 45 08	 mov	 al, BYTE PTR __Byte$[ebp]

; 2784 :     }

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?do_widen@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_widen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocale
;	COMDAT ?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z PROC		; std::ctype<char>::do_toupper, COMDAT
; _this$ = ecx

; 2773 :         const _Elem* _Last) const { // convert [_First, _Last) in place to upper case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2774 :         _Adl_verify_range(_First, _Last);
; 2775 :         for (; _First != _Last; ++_First) {

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 19		 je	 SHORT $LN10@do_toupper
  0000f	53		 push	 ebx
  00010	8d 59 08	 lea	 ebx, DWORD PTR [ecx+8]
$LL4@do_toupper:

; 2776 :             *_First = static_cast<_Elem>(_Toupper(static_cast<unsigned char>(*_First), &_Ctype));

  00013	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00016	53		 push	 ebx
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 __Toupper
  0001d	88 06		 mov	 BYTE PTR [esi], al
  0001f	83 c4 08	 add	 esp, 8
  00022	46		 inc	 esi
  00023	3b f7		 cmp	 esi, edi
  00025	75 ec		 jne	 SHORT $LL4@do_toupper

; 2774 :         _Adl_verify_range(_First, _Last);
; 2775 :         for (; _First != _Last; ++_First) {

  00027	5b		 pop	 ebx
$LN10@do_toupper:
  00028	5f		 pop	 edi

; 2777 :         }
; 2778 : 
; 2779 :         return _First;
; 2780 :     }

  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z ENDP		; std::ctype<char>::do_toupper
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocale
;	COMDAT ?do_toupper@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?do_toupper@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_toupper, COMDAT
; _this$ = ecx

; 2768 :     virtual _Elem __CLR_OR_THIS_CALL do_toupper(_Elem _Ch) const { // convert element to upper case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2769 :         return static_cast<_Elem>(_Toupper(static_cast<unsigned char>(_Ch), &_Ctype));

  00003	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00006	50		 push	 eax
  00007	0f b6 45 08	 movzx	 eax, BYTE PTR __Ch$[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 __Toupper
  00011	83 c4 08	 add	 esp, 8

; 2770 :     }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
?do_toupper@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_toupper
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocale
;	COMDAT ?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z PROC		; std::ctype<char>::do_tolower, COMDAT
; _this$ = ecx

; 2759 :         const _Elem* _Last) const { // convert [_First, _Last) in place to lower case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2760 :         _Adl_verify_range(_First, _Last);
; 2761 :         for (; _First != _Last; ++_First) {

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 19		 je	 SHORT $LN10@do_tolower
  0000f	53		 push	 ebx
  00010	8d 59 08	 lea	 ebx, DWORD PTR [ecx+8]
$LL4@do_tolower:

; 2762 :             *_First = static_cast<_Elem>(_Tolower(static_cast<unsigned char>(*_First), &_Ctype));

  00013	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00016	53		 push	 ebx
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 __Tolower
  0001d	88 06		 mov	 BYTE PTR [esi], al
  0001f	83 c4 08	 add	 esp, 8
  00022	46		 inc	 esi
  00023	3b f7		 cmp	 esi, edi
  00025	75 ec		 jne	 SHORT $LL4@do_tolower

; 2760 :         _Adl_verify_range(_First, _Last);
; 2761 :         for (; _First != _Last; ++_First) {

  00027	5b		 pop	 ebx
$LN10@do_tolower:
  00028	5f		 pop	 edi

; 2763 :         }
; 2764 : 
; 2765 :         return _First;
; 2766 :     }

  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z ENDP		; std::ctype<char>::do_tolower
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocale
;	COMDAT ?do_tolower@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?do_tolower@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_tolower, COMDAT
; _this$ = ecx

; 2754 :     virtual _Elem __CLR_OR_THIS_CALL do_tolower(_Elem _Ch) const { // convert element to lower case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2755 :         return static_cast<_Elem>(_Tolower(static_cast<unsigned char>(_Ch), &_Ctype));

  00003	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00006	50		 push	 eax
  00007	0f b6 45 08	 movzx	 eax, BYTE PTR __Ch$[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 __Tolower
  00011	83 c4 08	 add	 esp, 8

; 2756 :     }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
?do_tolower@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_tolower
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocale
;	COMDAT ??1?$ctype@D@std@@MAE@XZ
_TEXT	SEGMENT
??1?$ctype@D@std@@MAE@XZ PROC				; std::ctype<char>::~ctype<char>, COMDAT
; _this$ = ecx

; 2736 :     __CLR_OR_THIS_CALL ~ctype() noexcept override {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2745 :         if (0 < _Ctype._Delfl) {

  00003	8b 46 10	 mov	 eax, DWORD PTR [esi+16]

; 2736 :     __CLR_OR_THIS_CALL ~ctype() noexcept override {

  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@D@std@@6B@

; 2745 :         if (0 < _Ctype._Delfl) {

  0000c	85 c0		 test	 eax, eax
  0000e	7e 0a		 jle	 SHORT $LN10@ctype

; 2746 :             _CSTD free(const_cast<short*>(_Ctype._Table));

  00010	ff 76 0c	 push	 DWORD PTR [esi+12]
  00013	e8 00 00 00 00	 call	 _free
  00018	eb 0a		 jmp	 SHORT $LN11@ctype
$LN10@ctype:

; 2747 :         } else if (_Ctype._Delfl < 0) {

  0001a	79 0b		 jns	 SHORT $LN6@ctype

; 2748 :             delete[] _Ctype._Table;

  0001c	ff 76 0c	 push	 DWORD PTR [esi+12]
  0001f	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
$LN11@ctype:

; 2749 :         }
; 2750 : 
; 2751 :         _CSTD free(_Ctype._LocaleName);

  00024	83 c4 04	 add	 esp, 4
$LN6@ctype:
  00027	ff 76 14	 push	 DWORD PTR [esi+20]
  0002a	e8 00 00 00 00	 call	 _free
  0002f	83 c4 04	 add	 esp, 4

; 2737 :         _Tidy();
; 2738 :     }

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  00038	5e		 pop	 esi
  00039	c3		 ret	 0
??1?$ctype@D@std@@MAE@XZ ENDP				; std::ctype<char>::~ctype<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocinfo
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocinfo
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocinfo
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocinfo
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocinfo
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocinfo
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocale
;	COMDAT ?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T2 = -88						; size = 52
$T3 = -36						; size = 16
$T4 = -20						; size = 4
$T5 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::ctype<char>::_Getcat, COMDAT

; 2717 :     static size_t __CLRCALL_OR_CDECL _Getcat(const locale::facet** _Ppf = nullptr, const locale* _Ploc = nullptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 2718 :         if (_Ppf && !*_Ppf) {

  00027	8b 45 08	 mov	 eax, DWORD PTR __Ppf$[ebp]
  0002a	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T5[ebp], 0
  00031	85 c0		 test	 eax, eax
  00033	0f 84 7e 01 00
	00		 je	 $LN54@Getcat
  00039	83 38 00	 cmp	 DWORD PTR [eax], 0
  0003c	0f 85 75 01 00
	00		 jne	 $LN54@Getcat

; 2719 :             *_Ppf = new ctype<_Elem>(_Locinfo(_Ploc->_C_str()));

  00042	6a 18		 push	 24			; 00000018H
  00044	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00049	8b f0		 mov	 esi, eax
  0004b	83 c4 04	 add	 esp, 4
  0004e	89 75 ec	 mov	 DWORD PTR $T4[ebp], esi
  00051	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00058	85 f6		 test	 esi, esi
  0005a	0f 84 9a 00 00
	00		 je	 $LN4@Getcat

; 365  :         return _Ptr ? _Ptr->_Name.c_str() : "";

  00060	8b 45 0c	 mov	 eax, DWORD PTR __Ploc$[ebp]
  00063	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00066	85 c0		 test	 eax, eax
  00068	74 0c		 je	 SHORT $LN12@Getcat
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocinfo

; 188  :         return _Myptr ? _Myptr : &_Nul;

  0006a	8b 78 18	 mov	 edi, DWORD PTR [eax+24]
  0006d	85 ff		 test	 edi, edi
  0006f	75 0a		 jne	 SHORT $LN13@Getcat
  00071	8d 78 1c	 lea	 edi, DWORD PTR [eax+28]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocale

; 365  :         return _Ptr ? _Ptr->_Name.c_str() : "";

  00074	eb 05		 jmp	 SHORT $LN13@Getcat
$LN12@Getcat:
  00076	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_00CNPNBAHC@@
$LN13@Getcat:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocinfo

; 230  :         : _Lock(_LOCK_LOCALE)

  0007b	6a 00		 push	 0
  0007d	8d 4d a8	 lea	 ecx, DWORD PTR $T2[ebp]
  00080	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 138  :     __CLR_OR_THIS_CALL _Yarn() noexcept : _Myptr(nullptr), _Nul(0) {}

  00085	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+4], 0
  0008c	c6 45 b0 00	 mov	 BYTE PTR $T2[ebp+8], 0
  00090	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+12], 0
  00097	c6 45 b8 00	 mov	 BYTE PTR $T2[ebp+16], 0
  0009b	33 c0		 xor	 eax, eax
  0009d	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 0
  000a4	66 89 45 c0	 mov	 WORD PTR $T2[ebp+24], ax
  000a8	89 45 c4	 mov	 DWORD PTR $T2[ebp+28], eax
  000ab	66 89 45 c8	 mov	 WORD PTR $T2[ebp+32], ax
  000af	89 45 cc	 mov	 DWORD PTR $T2[ebp+36], eax
  000b2	88 45 d0	 mov	 BYTE PTR $T2[ebp+40], al
  000b5	89 45 d4	 mov	 DWORD PTR $T2[ebp+44], eax
  000b8	88 45 d8	 mov	 BYTE PTR $T2[ebp+48], al

; 232  :     {

  000bb	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7

; 233  :         if (_Pch) {

  000bf	85 ff		 test	 edi, edi
  000c1	0f 84 06 01 00
	00		 je	 $LN19@Getcat

; 234  :             _Locinfo_ctor(this, _Pch);

  000c7	8d 45 a8	 lea	 eax, DWORD PTR $T2[ebp]
  000ca	57		 push	 edi
  000cb	50		 push	 eax
  000cc	e8 00 00 00 00	 call	 ?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@PBD@Z ; std::_Locinfo::_Locinfo_ctor

; 275  :         return ::_Getctype();

  000d1	8d 45 dc	 lea	 eax, DWORD PTR $T3[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocale

; 2719 :             *_Ppf = new ctype<_Elem>(_Locinfo(_Ploc->_C_str()));

  000d4	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T5[ebp], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocinfo

; 275  :         return ::_Getctype();

  000db	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocale

; 148  :             : _Myrefs(static_cast<_Atomic_counter_t>(_Initrefs)) // non-atomic initialization

  000dc	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2713 :     __CLR_OR_THIS_CALL ctype(const _Locinfo& _Lobj, size_t _Refs = 0) : ctype_base(_Refs) {

  000e3	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@D@std@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocinfo

; 275  :         return ::_Getctype();

  000e9	e8 00 00 00 00	 call	 __Getctype
  000ee	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocale

; 2741 :         _Ctype = _Lobj._Getctype();

  000f1	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  000f4	0f 11 46 08	 movups	 XMMWORD PTR [esi+8], xmm0

; 2719 :             *_Ppf = new ctype<_Elem>(_Locinfo(_Ploc->_C_str()));

  000f8	eb 02		 jmp	 SHORT $LN5@Getcat
$LN4@Getcat:
  000fa	33 f6		 xor	 esi, esi
$LN5@Getcat:
  000fc	f6 45 f0 01	 test	 BYTE PTR $T5[ebp], 1
  00100	8b 45 08	 mov	 eax, DWORD PTR __Ppf$[ebp]
  00103	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0010a	89 30		 mov	 DWORD PTR [eax], esi
  0010c	0f 84 a5 00 00
	00		 je	 $LN54@Getcat
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocinfo

; 255  :         _Locinfo_dtor(this);

  00112	8d 45 a8	 lea	 eax, DWORD PTR $T2[ebp]
  00115	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 8
  0011c	50		 push	 eax
  0011d	e8 00 00 00 00	 call	 ?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z ; std::_Locinfo::_Locinfo_dtor

; 201  :         if (_Myptr) {

  00122	8b 45 d4	 mov	 eax, DWORD PTR $T2[ebp+44]

; 255  :         _Locinfo_dtor(this);

  00125	83 c4 04	 add	 esp, 4

; 201  :         if (_Myptr) {

  00128	85 c0		 test	 eax, eax
  0012a	74 09		 je	 SHORT $LN59@Getcat

; 202  : #ifdef _DEBUG
; 203  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 204  : #else // _DEBUG
; 205  :             _CSTD free(_Myptr);

  0012c	50		 push	 eax
  0012d	e8 00 00 00 00	 call	 _free
  00132	83 c4 04	 add	 esp, 4
$LN59@Getcat:

; 201  :         if (_Myptr) {

  00135	8b 45 cc	 mov	 eax, DWORD PTR $T2[ebp+36]

; 209  :         _Myptr = nullptr;

  00138	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+44], 0

; 201  :         if (_Myptr) {

  0013f	85 c0		 test	 eax, eax
  00141	74 09		 je	 SHORT $LN64@Getcat

; 202  : #ifdef _DEBUG
; 203  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 204  : #else // _DEBUG
; 205  :             _CSTD free(_Myptr);

  00143	50		 push	 eax
  00144	e8 00 00 00 00	 call	 _free
  00149	83 c4 04	 add	 esp, 4
$LN64@Getcat:

; 201  :         if (_Myptr) {

  0014c	8b 45 c4	 mov	 eax, DWORD PTR $T2[ebp+28]

; 209  :         _Myptr = nullptr;

  0014f	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+36], 0

; 201  :         if (_Myptr) {

  00156	85 c0		 test	 eax, eax
  00158	74 09		 je	 SHORT $LN69@Getcat

; 202  : #ifdef _DEBUG
; 203  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 204  : #else // _DEBUG
; 205  :             _CSTD free(_Myptr);

  0015a	50		 push	 eax
  0015b	e8 00 00 00 00	 call	 _free
  00160	83 c4 04	 add	 esp, 4
$LN69@Getcat:

; 201  :         if (_Myptr) {

  00163	8b 45 bc	 mov	 eax, DWORD PTR $T2[ebp+20]

; 209  :         _Myptr = nullptr;

  00166	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+28], 0

; 201  :         if (_Myptr) {

  0016d	85 c0		 test	 eax, eax
  0016f	74 09		 je	 SHORT $LN74@Getcat

; 202  : #ifdef _DEBUG
; 203  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 204  : #else // _DEBUG
; 205  :             _CSTD free(_Myptr);

  00171	50		 push	 eax
  00172	e8 00 00 00 00	 call	 _free
  00177	83 c4 04	 add	 esp, 4
$LN74@Getcat:

; 201  :         if (_Myptr) {

  0017a	8b 45 b4	 mov	 eax, DWORD PTR $T2[ebp+12]

; 209  :         _Myptr = nullptr;

  0017d	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 0

; 201  :         if (_Myptr) {

  00184	85 c0		 test	 eax, eax
  00186	74 09		 je	 SHORT $LN79@Getcat

; 202  : #ifdef _DEBUG
; 203  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 204  : #else // _DEBUG
; 205  :             _CSTD free(_Myptr);

  00188	50		 push	 eax
  00189	e8 00 00 00 00	 call	 _free
  0018e	83 c4 04	 add	 esp, 4
$LN79@Getcat:

; 201  :         if (_Myptr) {

  00191	8b 45 ac	 mov	 eax, DWORD PTR $T2[ebp+4]

; 209  :         _Myptr = nullptr;

  00194	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+12], 0

; 201  :         if (_Myptr) {

  0019b	85 c0		 test	 eax, eax
  0019d	74 09		 je	 SHORT $LN84@Getcat

; 202  : #ifdef _DEBUG
; 203  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 204  : #else // _DEBUG
; 205  :             _CSTD free(_Myptr);

  0019f	50		 push	 eax
  001a0	e8 00 00 00 00	 call	 _free
  001a5	83 c4 04	 add	 esp, 4
$LN84@Getcat:

; 256  :     }

  001a8	8d 4d a8	 lea	 ecx, DWORD PTR $T2[ebp]

; 209  :         _Myptr = nullptr;

  001ab	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+4], 0

; 256  :     }

  001b2	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
$LN54@Getcat:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocale

; 2722 :         return _X_CTYPE;

  001b7	b8 02 00 00 00	 mov	 eax, 2

; 2723 :     }

  001bc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001bf	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001c6	59		 pop	 ecx
  001c7	5f		 pop	 edi
  001c8	5e		 pop	 esi
  001c9	8b e5		 mov	 esp, ebp
  001cb	5d		 pop	 ebp
  001cc	c3		 ret	 0
$LN19@Getcat:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocinfo

; 238  :         _Xruntime_error("bad locale name");

  001cd	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@ELKIONDK@bad?5locale?5name@
  001d2	e8 00 00 00 00	 call	 ?_Xruntime_error@std@@YAXPBD@Z ; std::_Xruntime_error
$LN87@Getcat:
  001d7	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000	6a 18		 push	 24			; 00000018H
  00002	8b 45 ec	 mov	 eax, DWORD PTR $T4[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$2:
  0000f	8d 4d a8	 lea	 ecx, DWORD PTR $T2[ebp]
  00012	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$3:
  00017	8d 4d ac	 lea	 ecx, DWORD PTR $T2[ebp+4]
  0001a	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$4:
  0001f	8d 4d b4	 lea	 ecx, DWORD PTR $T2[ebp+12]
  00022	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$5:
  00027	8d 4d bc	 lea	 ecx, DWORD PTR $T2[ebp+20]
  0002a	e9 00 00 00 00	 jmp	 ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$6:
  0002f	8d 4d c4	 lea	 ecx, DWORD PTR $T2[ebp+28]
  00032	e9 00 00 00 00	 jmp	 ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$7:
  00037	8d 4d cc	 lea	 ecx, DWORD PTR $T2[ebp+36]
  0003a	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$8:
  0003f	8d 4d d4	 lea	 ecx, DWORD PTR $T2[ebp+44]
  00042	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
  00047	cc		 int	 3
  00048	cc		 int	 3
  00049	cc		 int	 3
  0004a	cc		 int	 3
  0004b	cc		 int	 3
__ehhandler$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  0004c	90		 npad	 1
  0004d	90		 npad	 1
  0004e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00052	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00055	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  00058	33 c8		 xor	 ecx, eax
  0005a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00064	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::ctype<char>::_Getcat
; Function compile flags: /Ogtp
;	COMDAT ??_Gctype_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gctype_base@std@@UAEPAXI@Z PROC			; std::ctype_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  00010	74 0b		 je	 SHORT $LN4@scalar
  00012	6a 08		 push	 8
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_Gctype_base@std@@UAEPAXI@Z ENDP			; std::ctype_base::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocale
;	COMDAT ??1ctype_base@std@@UAE@XZ
_TEXT	SEGMENT
??1ctype_base@std@@UAE@XZ PROC				; std::ctype_base::~ctype_base, COMDAT
; _this$ = ecx

; 2372 :     __CLR_OR_THIS_CALL ~ctype_base() noexcept override {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Facet_base@std@@6B@
  00006	c3		 ret	 0
??1ctype_base@std@@UAE@XZ ENDP				; std::ctype_base::~ctype_base
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocale
;	COMDAT ??1locale@std@@QAE@XZ
_TEXT	SEGMENT
??1locale@std@@QAE@XZ PROC				; std::locale::~locale, COMDAT
; _this$ = ecx

; 346  :         if (_Ptr) {

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	85 c9		 test	 ecx, ecx
  00005	74 11		 je	 SHORT $LN4@locale

; 347  :             delete _Ptr->_Decref();

  00007	8b 01		 mov	 eax, DWORD PTR [ecx]
  00009	ff 50 08	 call	 DWORD PTR [eax+8]
  0000c	85 c0		 test	 eax, eax
  0000e	74 08		 je	 SHORT $LN4@locale
  00010	8b 10		 mov	 edx, DWORD PTR [eax]
  00012	8b c8		 mov	 ecx, eax
  00014	6a 01		 push	 1
  00016	ff 12		 call	 DWORD PTR [edx]
$LN4@locale:

; 348  :         }
; 349  :     }

  00018	c3		 ret	 0
??1locale@std@@QAE@XZ ENDP				; std::locale::~locale
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_Gfacet@locale@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gfacet@locale@std@@MAEPAXI@Z PROC			; std::locale::facet::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  00010	74 0b		 je	 SHORT $LN4@scalar
  00012	6a 08		 push	 8
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_Gfacet@locale@std@@MAEPAXI@Z ENDP			; std::locale::facet::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocale
;	COMDAT ??1facet@locale@std@@MAE@XZ
_TEXT	SEGMENT
??1facet@locale@std@@MAE@XZ PROC			; std::locale::facet::~facet, COMDAT
; _this$ = ecx

; 151  :         __CLR_OR_THIS_CALL ~facet() noexcept override {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Facet_base@std@@6B@
  00006	c3		 ret	 0
??1facet@locale@std@@MAE@XZ ENDP			; std::locale::facet::~facet
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocale
;	COMDAT ?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
_TEXT	SEGMENT
?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ PROC	; std::locale::facet::_Decref, COMDAT
; _this$ = ecx

; 136  :             if (_MT_DECR(_Myrefs) == 0) {

  00000	83 c8 ff	 or	 eax, -1
  00003	f0 0f c1 41 04	 lock	  xadd	 DWORD PTR [ecx+4], eax
  00008	b8 00 00 00 00	 mov	 eax, 0
  0000d	0f 44 c1	 cmove	 eax, ecx

; 137  :                 return this;
; 138  :             }
; 139  : 
; 140  :             return nullptr;
; 141  :         }

  00010	c3		 ret	 0
?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ ENDP	; std::locale::facet::_Decref
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocale
;	COMDAT ?_Incref@facet@locale@std@@UAEXXZ
_TEXT	SEGMENT
?_Incref@facet@locale@std@@UAEXXZ PROC			; std::locale::facet::_Incref, COMDAT
; _this$ = ecx

; 132  :             _MT_INCR(_Myrefs);

  00000	f0 ff 41 04	 lock	  inc	 DWORD PTR [ecx+4]

; 133  :         }

  00004	c3		 ret	 0
?_Incref@facet@locale@std@@UAEXXZ ENDP			; std::locale::facet::_Incref
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocinfo
;	COMDAT ??1?$_Yarn@_W@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Yarn@_W@std@@QAE@XZ PROC				; std::_Yarn<wchar_t>::~_Yarn<wchar_t>, COMDAT
; _this$ = ecx

; 179  :     __CLR_OR_THIS_CALL ~_Yarn() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 201  :         if (_Myptr) {

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN6@Yarn

; 202  : #ifdef _DEBUG
; 203  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 204  : #else // _DEBUG
; 205  :             _CSTD free(_Myptr);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _free
  0000f	83 c4 04	 add	 esp, 4
$LN6@Yarn:

; 180  :         _Tidy();
; 181  :     }

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	5e		 pop	 esi
  00019	c3		 ret	 0
??1?$_Yarn@_W@std@@QAE@XZ ENDP				; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xlocinfo
;	COMDAT ??1?$_Yarn@D@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Yarn@D@std@@QAE@XZ PROC				; std::_Yarn<char>::~_Yarn<char>, COMDAT
; _this$ = ecx

; 179  :     __CLR_OR_THIS_CALL ~_Yarn() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 201  :         if (_Myptr) {

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN6@Yarn

; 202  : #ifdef _DEBUG
; 203  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 204  : #else // _DEBUG
; 205  :             _CSTD free(_Myptr);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _free
  0000f	83 c4 04	 add	 esp, 4
$LN6@Yarn:

; 180  :         _Tidy();
; 181  :     }

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	5e		 pop	 esi
  00019	c3		 ret	 0
??1?$_Yarn@D@std@@QAE@XZ ENDP				; std::_Yarn<char>::~_Yarn<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G_Facet_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Facet_base@std@@UAEPAXI@Z PROC			; std::_Facet_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  00010	74 0b		 je	 SHORT $LN4@scalar
  00012	6a 04		 push	 4
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_G_Facet_base@std@@UAEPAXI@Z ENDP			; std::_Facet_base::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xfacet
;	COMDAT ??1_Facet_base@std@@UAE@XZ
_TEXT	SEGMENT
??1_Facet_base@std@@UAE@XZ PROC				; std::_Facet_base::~_Facet_base, COMDAT
; _this$ = ecx

; 26   :     virtual __CLR_OR_THIS_CALL ~_Facet_base() noexcept {} // ensure that derived classes can be destroyed properly

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Facet_base@std@@6B@
  00006	c3		 ret	 0
??1_Facet_base@std@@UAE@XZ ENDP				; std::_Facet_base::~_Facet_base
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\typeinfo
;	COMDAT ?_Throw_bad_cast@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_cast@std@@YAXXZ PROC			; std::_Throw_bad_cast, COMDAT

; 68   : [[noreturn]] inline void _Throw_bad_cast() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 69   :     _THROW(bad_cast{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_cast@std@@QAE@XZ	; std::bad_cast::bad_cast
  0000e	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_cast@std@@YAXXZ ENDP			; std::_Throw_bad_cast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??_Gbad_cast@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_cast@std@@UAEPAXI@Z PROC			; std::bad_cast::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_cast@std@@UAEPAXI@Z ENDP			; std::bad_cast::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??0bad_cast@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_cast@std@@QAE@ABV01@@Z PROC			; std::bad_cast::bad_cast, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_cast@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_cast@std@@QAE@ABV01@@Z ENDP			; std::bad_cast::bad_cast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??1bad_cast@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_cast@std@@UAE@XZ PROC				; std::bad_cast::~bad_cast, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_cast@std@@UAE@XZ ENDP				; std::bad_cast::~bad_cast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_typeinfo.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_typeinfo.h
;	COMDAT ??0bad_cast@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_cast@std@@QAE@XZ PROC				; std::bad_cast::bad_cast, COMDAT
; _this$ = ecx

; 153  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 154  :     }

  00003	8b c1		 mov	 eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_08EPJLHIJG@bad?5cast@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_typeinfo.h

; 153  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_cast@std@@6B@

; 154  :     }

  00017	c3		 ret	 0
??0bad_cast@std@@QAE@XZ ENDP				; std::bad_cast::bad_cast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ?_Throw_tree_length_error@std@@YAXXZ
_TEXT	SEGMENT
?_Throw_tree_length_error@std@@YAXXZ PROC		; std::_Throw_tree_length_error, COMDAT

; 418  :     _Xlength_error("map/set too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Throw_tree:
  0000a	cc		 int	 3
?_Throw_tree_length_error@std@@YAXXZ ENDP		; std::_Throw_tree_length_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
;	COMDAT ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
__Count$ = 16						; size = 4
?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr, COMDAT
; _this$ = ecx

; 4570 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8b 55 10	 mov	 edx, DWORD PTR __Count$[ebp]
  00007	0f 57 c0	 xorps	 xmm0, xmm0
  0000a	56		 push	 esi

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0000b	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]

; 4570 :     {

  0000e	57		 push	 edi

; 2260 :         if (_Mysize < _Off) {

  0000f	8b 7d 0c	 mov	 edi, DWORD PTR __Off$[ebp]

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00012	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  00015	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  0001c	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 2260 :         if (_Mysize < _Off) {

  00023	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00026	3b c7		 cmp	 eax, edi
  00028	72 24		 jb	 SHORT $LN33@substr

; 2278 :         return (_STD min)(_Size, _Mysize - _Off);

  0002a	2b c7		 sub	 eax, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 70   :     return _Right < _Left ? _Right : _Left;

  0002c	3b c2		 cmp	 eax, edx
  0002e	0f 42 d0	 cmovb	 edx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00031	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 2236 :         if (_Large_string_engaged()) {

  00035	72 02		 jb	 SHORT $LN24@substr

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  00037	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN24@substr:

; 2511 :         _Construct<_Construct_strategy::_From_ptr>(

  00039	03 cf		 add	 ecx, edi
  0003b	52		 push	 edx
  0003c	51		 push	 ecx
  0003d	8b ce		 mov	 ecx, esi
  0003f	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>

; 4571 :         // return [_Off, _Off + _Count) as new string, default-constructing its allocator
; 4572 :         return basic_string{*this, _Off, _Count};
; 4573 :     }

  00044	5f		 pop	 edi
  00045	8b c6		 mov	 eax, esi
  00047	5e		 pop	 esi
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 0c 00	 ret	 12			; 0000000cH
$LN33@substr:

; 2261 :             _Xran();

  0004e	e8 00 00 00 00	 call	 ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
$LN31@substr:
  00053	cc		 int	 3
?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
;	COMDAT ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z
_TEXT	SEGMENT
tv213 = -8						; size = 4
__Result$1$ = -4					; size = 4
__Ptr$ = 8						; size = 4
__Possible_matches_end$1$ = 12				; size = 4
__Off$ = 12						; size = 4
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find, COMDAT
; _this$ = ecx

; 4355 :     /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00008	8b 75 08	 mov	 esi, DWORD PTR __Ptr$[ebp]
  0000b	8b de		 mov	 ebx, esi

; 4355 :     /* strengthened */ {

  0000d	57		 push	 edi

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0000e	8d 53 01	 lea	 edx, DWORD PTR [ebx+1]
$LL30@find:
  00011	8a 03		 mov	 al, BYTE PTR [ebx]
  00013	43		 inc	 ebx
  00014	84 c0		 test	 al, al
  00016	75 f9		 jne	 SHORT $LL30@find
  00018	2b da		 sub	 ebx, edx

; 2235 :         const value_type* _Result = _Bx._Buf;

  0001a	89 4d fc	 mov	 DWORD PTR __Result$1$[ebp], ecx

; 2244 :         return _BUF_SIZE <= _Myres;

  0001d	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 2235 :         const value_type* _Result = _Bx._Buf;

  00021	8b f9		 mov	 edi, ecx

; 2236 :         if (_Large_string_engaged()) {

  00023	72 05		 jb	 SHORT $LN6@find

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  00025	8b 39		 mov	 edi, DWORD PTR [ecx]
  00027	89 7d fc	 mov	 DWORD PTR __Result$1$[ebp], edi
$LN6@find:

; 4356 :         // look for [_Ptr, <null>) beginning at or after _Off
; 4357 :         return static_cast<size_type>(_Traits_find<_Traits>(

  0002a	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]

; 577  :     if (_Needle_size > _Hay_size || _Start_at > _Hay_size - _Needle_size) {

  0002d	3b d9		 cmp	 ebx, ecx
  0002f	0f 87 b7 00 00
	00		 ja	 $LN15@find
  00035	8b 45 0c	 mov	 eax, DWORD PTR __Off$[ebp]
  00038	2b cb		 sub	 ecx, ebx
  0003a	3b c1		 cmp	 eax, ecx
  0003c	0f 87 aa 00 00
	00		 ja	 $LN15@find

; 578  :         // xpos cannot exist, report failure
; 579  :         // N4950 [string.view.find]/3 says:
; 580  :         // 1. _Start_at <= xpos
; 581  :         // 2. xpos + _Needle_size <= _Hay_size;
; 582  :         // therefore:
; 583  :         // 3. _Needle_size <= _Hay_size (by 2) (checked above)
; 584  :         // 4. _Start_at + _Needle_size <= _Hay_size (substitute 1 into 2)
; 585  :         // 5. _Start_at <= _Hay_size - _Needle_size (4, move _Needle_size to other side) (also checked above)
; 586  :         return static_cast<size_t>(-1);
; 587  :     }
; 588  : 
; 589  :     if (_Needle_size == 0) { // empty string always matches if xpos is possible

  00042	85 db		 test	 ebx, ebx
  00044	0f 84 a5 00 00
	00		 je	 $LN12@find

; 590  :         return _Start_at;
; 591  :     }
; 592  : 
; 593  :     const auto _Possible_matches_end = _Haystack + (_Hay_size - _Needle_size) + 1;

  0004a	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0004d	03 d7		 add	 edx, edi

; 594  :     for (auto _Match_try = _Haystack + _Start_at;; ++_Match_try) {

  0004f	8d 0c 07	 lea	 ecx, DWORD PTR [edi+eax]

; 424  :         return static_cast<const _Elem*>(_CSTD memchr(_First, _Ch, _Count));

  00052	0f be 3e	 movsx	 edi, BYTE PTR [esi]

; 593  :     const auto _Possible_matches_end = _Haystack + (_Hay_size - _Needle_size) + 1;

  00055	89 55 0c	 mov	 DWORD PTR __Possible_matches_end$1$[ebp], edx

; 595  :         _Match_try = _Traits::find(_Match_try, static_cast<size_t>(_Possible_matches_end - _Match_try), *_Needle);

  00058	2b d1		 sub	 edx, ecx

; 424  :         return static_cast<const _Elem*>(_CSTD memchr(_First, _Ch, _Count));

  0005a	52		 push	 edx
  0005b	57		 push	 edi
  0005c	51		 push	 ecx
  0005d	89 7d f8	 mov	 DWORD PTR tv213[ebp], edi
  00060	e8 00 00 00 00	 call	 _memchr
  00065	8b f8		 mov	 edi, eax
  00067	83 c4 0c	 add	 esp, 12			; 0000000cH

; 596  :         if (!_Match_try) { // didn't find first character; report failure

  0006a	85 ff		 test	 edi, edi
  0006c	74 7e		 je	 SHORT $LN15@find
  0006e	66 90		 npad	 2
$LL13@find:

; 383  :         return _CSTD memcmp(_First1, _First2, _Count);

  00070	8b c6		 mov	 eax, esi
  00072	8b d7		 mov	 edx, edi
  00074	8b f3		 mov	 esi, ebx
  00076	83 ee 04	 sub	 esi, 4
  00079	72 16		 jb	 SHORT $LN33@find
  0007b	0f 1f 44 00 00	 npad	 5
$LL34@find:
  00080	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00082	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00084	75 10		 jne	 SHORT $LN32@find
  00086	83 c2 04	 add	 edx, 4
  00089	83 c0 04	 add	 eax, 4
  0008c	83 ee 04	 sub	 esi, 4
  0008f	73 ef		 jae	 SHORT $LL34@find
$LN33@find:
  00091	83 fe fc	 cmp	 esi, -4			; fffffffcH
  00094	74 34		 je	 SHORT $LN31@find
$LN32@find:
  00096	8a 0a		 mov	 cl, BYTE PTR [edx]
  00098	3a 08		 cmp	 cl, BYTE PTR [eax]
  0009a	75 27		 jne	 SHORT $LN35@find
  0009c	83 fe fd	 cmp	 esi, -3			; fffffffdH
  0009f	74 29		 je	 SHORT $LN31@find
  000a1	8a 4a 01	 mov	 cl, BYTE PTR [edx+1]
  000a4	3a 48 01	 cmp	 cl, BYTE PTR [eax+1]
  000a7	75 1a		 jne	 SHORT $LN35@find
  000a9	83 fe fe	 cmp	 esi, -2			; fffffffeH
  000ac	74 1c		 je	 SHORT $LN31@find
  000ae	8a 4a 02	 mov	 cl, BYTE PTR [edx+2]
  000b1	3a 48 02	 cmp	 cl, BYTE PTR [eax+2]
  000b4	75 0d		 jne	 SHORT $LN35@find
  000b6	83 fe ff	 cmp	 esi, -1
  000b9	74 0f		 je	 SHORT $LN31@find
  000bb	8a 4a 03	 mov	 cl, BYTE PTR [edx+3]
  000be	3a 48 03	 cmp	 cl, BYTE PTR [eax+3]
  000c1	74 07		 je	 SHORT $LN31@find
$LN35@find:
  000c3	1b c0		 sbb	 eax, eax
  000c5	83 c8 01	 or	 eax, 1
  000c8	eb 02		 jmp	 SHORT $LN36@find
$LN31@find:
  000ca	33 c0		 xor	 eax, eax
$LN36@find:

; 600  :         if (_Traits::compare(_Match_try, _Needle, _Needle_size) == 0) { // found match

  000cc	85 c0		 test	 eax, eax
  000ce	74 28		 je	 SHORT $LN26@find

; 594  :     for (auto _Match_try = _Haystack + _Start_at;; ++_Match_try) {

  000d0	8b 45 0c	 mov	 eax, DWORD PTR __Possible_matches_end$1$[ebp]
  000d3	47		 inc	 edi

; 595  :         _Match_try = _Traits::find(_Match_try, static_cast<size_t>(_Possible_matches_end - _Match_try), *_Needle);

  000d4	2b c7		 sub	 eax, edi

; 424  :         return static_cast<const _Elem*>(_CSTD memchr(_First, _Ch, _Count));

  000d6	50		 push	 eax
  000d7	ff 75 f8	 push	 DWORD PTR tv213[ebp]
  000da	57		 push	 edi
  000db	e8 00 00 00 00	 call	 _memchr

; 596  :         if (!_Match_try) { // didn't find first character; report failure

  000e0	8b 75 08	 mov	 esi, DWORD PTR __Ptr$[ebp]

; 424  :         return static_cast<const _Elem*>(_CSTD memchr(_First, _Ch, _Count));

  000e3	8b f8		 mov	 edi, eax
  000e5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 596  :         if (!_Match_try) { // didn't find first character; report failure

  000e8	85 ff		 test	 edi, edi
  000ea	75 84		 jne	 SHORT $LL13@find
$LN15@find:

; 4358 :             _Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize, _Off, _Ptr, _Traits::length(_Ptr)));
; 4359 :     }

  000ec	83 c8 ff	 or	 eax, -1
$LN12@find:
  000ef	5f		 pop	 edi
  000f0	5e		 pop	 esi
  000f1	5b		 pop	 ebx
  000f2	8b e5		 mov	 esp, ebp
  000f4	5d		 pop	 ebp
  000f5	c2 08 00	 ret	 8
$LN26@find:

; 601  :             return static_cast<size_t>(_Match_try - _Haystack);

  000f8	2b 7d fc	 sub	 edi, DWORD PTR __Result$1$[ebp]

; 4356 :         // look for [_Ptr, <null>) beginning at or after _Off
; 4357 :         return static_cast<size_type>(_Traits_find<_Traits>(

  000fb	8b c7		 mov	 eax, edi
  000fd	5f		 pop	 edi

; 4358 :             _Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize, _Off, _Ptr, _Traits::length(_Ptr)));
; 4359 :     }

  000fe	5e		 pop	 esi
  000ff	5b		 pop	 ebx
  00100	8b e5		 mov	 esp, ebp
  00102	5d		 pop	 ebp
  00103	c2 08 00	 ret	 8
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
tv507 = -12						; size = 4
__Old$1$ = -8						; size = 4
tv519 = -4						; size = 4
__Old_size$1$ = -4					; size = 4
__Ptr$ = 8						; size = 4
tv512 = 12						; size = 4
$T1 = 12						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 3268 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 3269 :         // append [_Ptr, _Ptr + _Count)
; 3270 :         const size_type _Old_size = _Mypair._Myval2._Mysize;
; 3271 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00011	8b c2		 mov	 eax, edx
  00013	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00016	2b c1		 sub	 eax, ecx
  00018	89 4d fc	 mov	 DWORD PTR __Old_size$1$[ebp], ecx
  0001b	89 55 f8	 mov	 DWORD PTR __Old$1$[ebp], edx
  0001e	3b d8		 cmp	 ebx, eax
  00020	77 2e		 ja	 SHORT $LN2@append

; 3272 :             _ASAN_STRING_MODIFY(*this, _Old_size, _Old_size + _Count);
; 3273 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00022	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  00025	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 2226 :         value_type* _Result = _Bx._Buf;

  00028	8b c7		 mov	 eax, edi

; 2244 :         return _BUF_SIZE <= _Myres;

  0002a	83 fa 10	 cmp	 edx, 16			; 00000010H

; 2227 :         if (_Large_string_engaged()) {

  0002d	72 02		 jb	 SHORT $LN5@append

; 2228 :             _Result = _Unfancy(_Bx._Ptr);

  0002f	8b 07		 mov	 eax, DWORD PTR [edi]
$LN5@append:

; 119  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00031	53		 push	 ebx
  00032	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 3274 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 3275 :             _Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

  00035	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]

; 119  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 _memmove
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3276 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  00041	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 3289 :     }

  00045	8b c7		 mov	 eax, edi
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
$LN2@append:

; 4766 :         if (max_size() - _Old_size < _Size_increase) {

  00050	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00055	2b c1		 sub	 eax, ecx
  00057	3b c3		 cmp	 eax, ebx
  00059	0f 82 26 01 00
	00		 jb	 $LN77@append

; 4768 :         }
; 4769 : 
; 4770 :         const size_type _New_size     = _Old_size + _Size_increase;

  0005f	8d 34 19	 lea	 esi, DWORD PTR [ecx+ebx]

; 4714 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00062	83 ce 0f	 or	 esi, 15			; 0000000fH
  00065	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4715 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0006b	76 18		 jbe	 SHORT $LN19@append

; 4716 :             return _Max;

  0006d	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00072	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0007d	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  00080	83 c4 04	 add	 esp, 4
  00083	eb 61		 jmp	 SHORT $LN75@append
$LN19@append:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4719 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00085	8b c2		 mov	 eax, edx
  00087	d1 e8		 shr	 eax, 1
  00089	89 45 0c	 mov	 DWORD PTR tv512[ebp], eax
  0008c	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00091	2b 45 0c	 sub	 eax, DWORD PTR tv512[ebp]
  00094	3b d0		 cmp	 edx, eax
  00096	76 18		 jbe	 SHORT $LN20@append

; 4720 :             return _Max;

  00098	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0009d	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a8	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  000ab	83 c4 04	 add	 esp, 4
  000ae	eb 36		 jmp	 SHORT $LN75@append
$LN20@append:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4723 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000b0	8b 45 0c	 mov	 eax, DWORD PTR tv512[ebp]
  000b3	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 47   :     return _Left < _Right ? _Right : _Left;

  000b5	3b f0		 cmp	 esi, eax
  000b7	0f 42 f0	 cmovb	 esi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4774 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  000ba	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000bd	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000c2	72 0e		 jb	 SHORT $LN27@append

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000c4	50		 push	 eax
  000c5	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000ca	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  000cd	83 c4 04	 add	 esp, 4
  000d0	eb 14		 jmp	 SHORT $LN75@append
$LN27@append:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  000d2	85 c0		 test	 eax, eax
  000d4	74 0e		 je	 SHORT $LN28@append

; 87   :         return ::operator new(_Bytes);

  000d6	50		 push	 eax
  000d7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 245  :         return _Traits::_Allocate(_Bytes);

  000dc	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]

; 87   :         return ::operator new(_Bytes);

  000df	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  000e2	eb 02		 jmp	 SHORT $LN75@append
$LN28@append:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  000e4	33 c0		 xor	 eax, eax
$LN75@append:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4782 :         if (_BUF_SIZE <= _Old_capacity) {

  000e6	83 7d f8 10	 cmp	 DWORD PTR __Old$1$[ebp], 16 ; 00000010H
  000ea	8d 14 19	 lea	 edx, DWORD PTR [ecx+ebx]
  000ed	89 77 14	 mov	 DWORD PTR [edi+20], esi
  000f0	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
  000f3	89 57 10	 mov	 DWORD PTR [edi+16], edx
  000f6	8d 14 1e	 lea	 edx, DWORD PTR [esi+ebx]
  000f9	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax
  000fc	89 75 fc	 mov	 DWORD PTR tv519[ebp], esi
  000ff	89 55 f4	 mov	 DWORD PTR tv507[ebp], edx
  00102	51		 push	 ecx
  00103	72 56		 jb	 SHORT $LN13@append

; 4783 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  00105	8b 37		 mov	 esi, DWORD PTR [edi]

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00107	56		 push	 esi
  00108	50		 push	 eax
  00109	e8 00 00 00 00	 call	 _memcpy
  0010e	53		 push	 ebx
  0010f	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00112	ff 75 fc	 push	 DWORD PTR tv519[ebp]
  00115	e8 00 00 00 00	 call	 _memcpy

; 3286 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0011a	8b 45 f4	 mov	 eax, DWORD PTR tv507[ebp]

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0011d	83 c4 18	 add	 esp, 24			; 00000018H

; 4785 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  00120	8b 4d f8	 mov	 ecx, DWORD PTR __Old$1$[ebp]
  00123	41		 inc	 ecx

; 3286 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00124	c6 00 00	 mov	 BYTE PTR [eax], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00127	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0012d	72 12		 jb	 SHORT $LN52@append

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0012f	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00132	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00135	2b f2		 sub	 esi, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00137	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  0013a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0013d	77 4b		 ja	 SHORT $LN49@append

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0013f	8b f2		 mov	 esi, edx
$LN52@append:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00141	51		 push	 ecx
  00142	56		 push	 esi
  00143	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 3280 :         return _Reallocate_grow_by(

  00148	8b 45 0c	 mov	 eax, DWORD PTR $T1[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  0014b	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 3280 :         return _Reallocate_grow_by(

  0014e	89 07		 mov	 DWORD PTR [edi], eax

; 3289 :     }

  00150	8b c7		 mov	 eax, edi
  00152	5f		 pop	 edi
  00153	5e		 pop	 esi
  00154	5b		 pop	 ebx
  00155	8b e5		 mov	 esp, ebp
  00157	5d		 pop	 ebp
  00158	c2 08 00	 ret	 8
$LN13@append:

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0015b	57		 push	 edi
  0015c	50		 push	 eax
  0015d	e8 00 00 00 00	 call	 _memcpy
  00162	53		 push	 ebx
  00163	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00166	56		 push	 esi
  00167	e8 00 00 00 00	 call	 _memcpy

; 3286 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0016c	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0016f	83 c4 18	 add	 esp, 24			; 00000018H

; 3286 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00172	c6 00 00	 mov	 BYTE PTR [eax], 0

; 3280 :         return _Reallocate_grow_by(

  00175	8b 45 0c	 mov	 eax, DWORD PTR $T1[ebp]
  00178	89 07		 mov	 DWORD PTR [edi], eax

; 3289 :     }

  0017a	8b c7		 mov	 eax, edi
  0017c	5f		 pop	 edi
  0017d	5e		 pop	 esi
  0017e	5b		 pop	 ebx
  0017f	8b e5		 mov	 esp, ebp
  00181	5d		 pop	 ebp
  00182	c2 08 00	 ret	 8
$LN77@append:

; 4767 :             _Xlen_string(); // result too long

  00185	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN49@append:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0018a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN73@append:
  0018f	cc		 int	 3
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 3118 :     _CONSTEXPR20 ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2244 :         return _BUF_SIZE <= _Myres;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  00009	72 27		 jb	 SHORT $LN12@basic_stri
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0000d	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN22@basic_stri

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN19@basic_stri

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN22@basic_stri:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN12@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 3126 :     }

  00044	c3		 ret	 0
$LN19@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN30@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Result$1$ = 8						; size = 4
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2491 :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 2235 :         const value_type* _Result = _Bx._Buf;

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Right$[ebp]
  00007	0f 57 c0	 xorps	 xmm0, xmm0

; 2491 :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx

; 2235 :         const value_type* _Result = _Bx._Buf;

  0000d	89 5d 08	 mov	 DWORD PTR __Result$1$[ebp], ebx
  00010	8b c3		 mov	 eax, ebx

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00012	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  00015	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  0001c	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2244 :         return _BUF_SIZE <= _Myres;

  00023	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H

; 2236 :         if (_Large_string_engaged()) {

  00027	72 05		 jb	 SHORT $LN12@basic_stri

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  00029	8b 03		 mov	 eax, DWORD PTR [ebx]
  0002b	89 45 08	 mov	 DWORD PTR __Result$1$[ebp], eax
$LN12@basic_stri:

; 2492 :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0002e	8b 5b 10	 mov	 ebx, DWORD PTR [ebx+16]

; 2620 :         if (_Count > max_size()) {

  00031	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  00037	0f 87 97 00 00
	00		 ja	 $LN49@basic_stri

; 2622 :         }
; 2623 : 
; 2624 :         auto& _Al       = _Getal();
; 2625 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 2626 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 2627 : 
; 2628 :         if (_Count < _BUF_SIZE) {

  0003d	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
  00044	83 fb 10	 cmp	 ebx, 16			; 00000010H
  00047	73 11		 jae	 SHORT $LN18@basic_stri

; 2629 :             _My_data._Mysize = _Count;

  00049	89 5f 10	 mov	 DWORD PTR [edi+16], ebx

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0004c	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]

; 2493 :     }

  0004f	8b c7		 mov	 eax, edi

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00051	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2493 :     }

  00054	5f		 pop	 edi
  00055	5b		 pop	 ebx
  00056	5d		 pop	 ebp
  00057	c2 04 00	 ret	 4
$LN18@basic_stri:
  0005a	56		 push	 esi

; 4714 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0005b	8b f3		 mov	 esi, ebx
  0005d	83 ce 0f	 or	 esi, 15			; 0000000fH
  00060	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4715 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00066	76 17		 jbe	 SHORT $LN25@basic_stri

; 4716 :             return _Max;

  00068	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0006d	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00078	83 c4 04	 add	 esp, 4
  0007b	8b c8		 mov	 ecx, eax
  0007d	eb 34		 jmp	 SHORT $LN32@basic_stri
$LN25@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 47   :     return _Left < _Right ? _Right : _Left;

  0007f	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00084	3b f0		 cmp	 esi, eax
  00086	0f 42 f0	 cmovb	 esi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2652 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00089	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0008c	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00091	72 0d		 jb	 SHORT $LN33@basic_stri

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00099	83 c4 04	 add	 esp, 4
  0009c	8b c8		 mov	 ecx, eax
  0009e	eb 13		 jmp	 SHORT $LN32@basic_stri
$LN33@basic_stri:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  000a0	85 c0		 test	 eax, eax
  000a2	74 0d		 je	 SHORT $LN34@basic_stri

; 87   :         return ::operator new(_Bytes);

  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000aa	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  000ad	8b c8		 mov	 ecx, eax
  000af	eb 02		 jmp	 SHORT $LN32@basic_stri
$LN34@basic_stri:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  000b1	33 c9		 xor	 ecx, ecx
$LN32@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2666 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);

  000b3	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  000b6	89 0f		 mov	 DWORD PTR [edi], ecx

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000b8	50		 push	 eax
  000b9	ff 75 08	 push	 DWORD PTR __Result$1$[ebp]

; 2657 :         _My_data._Mysize = _Count;

  000bc	89 5f 10	 mov	 DWORD PTR [edi+16], ebx

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000bf	51		 push	 ecx

; 2658 :         _My_data._Myres  = _New_capacity;

  000c0	89 77 14	 mov	 DWORD PTR [edi+20], esi

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c3	e8 00 00 00 00	 call	 _memcpy
  000c8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2493 :     }

  000cb	8b c7		 mov	 eax, edi

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000cd	5e		 pop	 esi

; 2493 :     }

  000ce	5f		 pop	 edi
  000cf	5b		 pop	 ebx
  000d0	5d		 pop	 ebp
  000d1	c2 04 00	 ret	 4
$LN49@basic_stri:

; 2621 :             _Xlen_string(); // result too long

  000d4	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN47@basic_stri:
  000d9	cc		 int	 3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
;	COMDAT ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ
_TEXT	SEGMENT
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Xran, COMDAT

; 2273 :         _Xout_of_range("invalid string position");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN3@Xran:
  0000a	cc		 int	 3
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2312 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 331  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 332  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
;	COMDAT __snprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__snprintf PROC						; COMDAT

; 1947 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1392 :         int const _Result = __stdio_common_vsprintf(

  00003	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 01	 or	 ecx, 1
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1393 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1394 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1395 : 
; 1396 :         return _Result < 0 ? -1 : _Result;

  00025	83 c9 ff	 or	 ecx, -1
  00028	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 48 c1	 cmovs	 eax, ecx

; 1948 :         int _Result;
; 1949 :         va_list _ArgList;
; 1950 :         __crt_va_start(_ArgList, _Format);
; 1951 :         _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
; 1952 :         __crt_va_end(_ArgList);
; 1953 :         return _Result;
; 1954 :     }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
__snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1771 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1392 :         int const _Result = __stdio_common_vsprintf(

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1393 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1394 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1395 : 
; 1396 :         return _Result < 0 ? -1 : _Result;

  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1772 :         int _Result;
; 1773 :         va_list _ArgList;
; 1774 :         __crt_va_start(_ArgList, _Format);
; 1775 : 
; 1776 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);
; 1777 : 
; 1778 :         __crt_va_end(_ArgList);
; 1779 :         return _Result;
; 1780 :     }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.h
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT
??0D3DXMATRIX@@QAE@XZ PROC				; D3DXMATRIX::D3DXMATRIX, COMDAT
; _this$ = ecx

; 177  :     D3DXMATRIX() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXMATRIX@@QAE@XZ ENDP				; D3DXMATRIX::D3DXMATRIX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\Area.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
