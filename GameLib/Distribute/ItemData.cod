; Listing generated by Microsoft (R) Optimizing Compiler Version 19.37.32822.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\GameLib\Distribute\ItemData.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_7?$CDynamicPool@VCItemData@@@@6B@		; CDynamicPool<CItemData>::`vftable'
PUBLIC	??_G?$CDynamicPool@VCItemData@@@@UAEPAXI@Z	; CDynamicPool<CItemData>::`scalar deleting destructor'
PUBLIC	??_R4?$CDynamicPool@VCItemData@@@@6B@		; CDynamicPool<CItemData>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPool@VCItemData@@@@@8		; CDynamicPool<CItemData> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPool@VCItemData@@@@8		; CDynamicPool<CItemData>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPool@VCItemData@@@@8		; CDynamicPool<CItemData>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPool@VCItemData@@@@8	; CDynamicPool<CItemData>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E?$CDynamicPool@VCItemData@@@@UAEPAXI@Z:PROC	; CDynamicPool<CItemData>::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPool@VCItemData@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPool@VCItemData@@@@8 DD FLAT:??_R0?AV?$CDynamicPool@VCItemData@@@@@8 ; CDynamicPool<CItemData>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPool@VCItemData@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPool@VCItemData@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPool@VCItemData@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPool@VCItemData@@@@8 ; CDynamicPool<CItemData>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPool@VCItemData@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPool@VCItemData@@@@8 DD 00H		; CDynamicPool<CItemData>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPool@VCItemData@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPool@VCItemData@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPool@VCItemData@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPool<CItemData> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPool@VCItemData@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPool@VCItemData@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPool@VCItemData@@@@6B@ DD 00H		; CDynamicPool<CItemData>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPool@VCItemData@@@@@8
	DD	FLAT:??_R3?$CDynamicPool@VCItemData@@@@8
rdata$r	ENDS
;	COMDAT ??_7?$CDynamicPool@VCItemData@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPool@VCItemData@@@@6B@ DD FLAT:??_R4?$CDynamicPool@VCItemData@@@@6B@ ; CDynamicPool<CItemData>::`vftable'
	DD	FLAT:??_E?$CDynamicPool@VCItemData@@@@UAEPAXI@Z
CONST	ENDS
CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??0CItemData@@QAE@XZ				; CItemData::CItemData
PUBLIC	??1CItemData@@UAE@XZ				; CItemData::~CItemData
PUBLIC	?Clear@CItemData@@QAEXXZ			; CItemData::Clear
PUBLIC	?SetSummary@CItemData@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CItemData::SetSummary
PUBLIC	?SetDescription@CItemData@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CItemData::SetDescription
PUBLIC	?GetModelThing@CItemData@@QAEPAVCGraphicThing@@XZ ; CItemData::GetModelThing
PUBLIC	?GetSubModelThing@CItemData@@QAEPAVCGraphicThing@@XZ ; CItemData::GetSubModelThing
PUBLIC	?GetDropModelThing@CItemData@@QAEPAVCGraphicThing@@XZ ; CItemData::GetDropModelThing
PUBLIC	?GetIconImage@CItemData@@QAEPAVCGraphicSubImage@@XZ ; CItemData::GetIconImage
PUBLIC	?GetLODModelThingCount@CItemData@@QAEKXZ	; CItemData::GetLODModelThingCount
PUBLIC	?GetLODModelThingPointer@CItemData@@QAEHKPAPAVCGraphicThing@@@Z ; CItemData::GetLODModelThingPointer
PUBLIC	?GetAttachingDataCount@CItemData@@QAEKXZ	; CItemData::GetAttachingDataCount
PUBLIC	?GetCollisionDataPointer@CItemData@@QAEHKPAPBUSAttachingData@NRaceData@@@Z ; CItemData::GetCollisionDataPointer
PUBLIC	?GetAttachingDataPointer@CItemData@@QAEHKPAPBUSAttachingData@NRaceData@@@Z ; CItemData::GetAttachingDataPointer
PUBLIC	?GetTable@CItemData@@QBEPBUSItemTable_r156@1@XZ	; CItemData::GetTable
PUBLIC	?GetIndex@CItemData@@QBEKXZ			; CItemData::GetIndex
PUBLIC	?GetName@CItemData@@QBEPBDXZ			; CItemData::GetName
PUBLIC	?GetDescription@CItemData@@QBEPBDXZ		; CItemData::GetDescription
PUBLIC	?GetSummary@CItemData@@QBEPBDXZ			; CItemData::GetSummary
PUBLIC	?GetType@CItemData@@QBEEXZ			; CItemData::GetType
PUBLIC	?GetSubType@CItemData@@QBEEXZ			; CItemData::GetSubType
PUBLIC	?GetRefine@CItemData@@QBEIXZ			; CItemData::GetRefine
PUBLIC	?GetUseTypeString@CItemData@@QBEPBDXZ		; CItemData::GetUseTypeString
PUBLIC	?GetWeaponType@CItemData@@QBEKXZ		; CItemData::GetWeaponType
PUBLIC	?GetSize@CItemData@@QBEEXZ			; CItemData::GetSize
PUBLIC	?IsAntiFlag@CItemData@@QBEHK@Z			; CItemData::IsAntiFlag
PUBLIC	?IsFlag@CItemData@@QBEHK@Z			; CItemData::IsFlag
PUBLIC	?IsWearableFlag@CItemData@@QBEHK@Z		; CItemData::IsWearableFlag
PUBLIC	?HasNextGrade@CItemData@@QBEHXZ			; CItemData::HasNextGrade
PUBLIC	?GetWearFlags@CItemData@@QBEKXZ			; CItemData::GetWearFlags
PUBLIC	?GetIBuyItemPrice@CItemData@@QBEKXZ		; CItemData::GetIBuyItemPrice
PUBLIC	?GetISellItemPrice@CItemData@@QBEKXZ		; CItemData::GetISellItemPrice
PUBLIC	?GetLimit@CItemData@@QBEHEPAUSItemLimit@1@@Z	; CItemData::GetLimit
PUBLIC	?GetApply@CItemData@@QBEHEPAUSItemApply@1@@Z	; CItemData::GetApply
PUBLIC	?GetValue@CItemData@@QBEJE@Z			; CItemData::GetValue
PUBLIC	?GetSocket@CItemData@@QBEJE@Z			; CItemData::GetSocket
PUBLIC	?SetSocket@CItemData@@QAEJEK@Z			; CItemData::SetSocket
PUBLIC	?GetSocketCount@CItemData@@QBEHXZ		; CItemData::GetSocketCount
PUBLIC	?GetIconNumber@CItemData@@QBEKXZ		; CItemData::GetIconNumber
PUBLIC	?GetSpecularPoweru@CItemData@@QBEIXZ		; CItemData::GetSpecularPoweru
PUBLIC	?GetSpecularPowerf@CItemData@@QBEMXZ		; CItemData::GetSpecularPowerf
PUBLIC	?IsEquipment@CItemData@@QBEHXZ			; CItemData::IsEquipment
PUBLIC	?SetDefaultItemData@CItemData@@QAEXPBD0@Z	; CItemData::SetDefaultItemData
PUBLIC	?SetItemTableData@CItemData@@QAEXPAUSItemTable_r156@1@@Z ; CItemData::SetItemTableData
PUBLIC	?SetItemScale@CItemData@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0000000@Z ; CItemData::SetItemScale
PUBLIC	?GetItemScale@CItemData@@QAE_NKAAM00000@Z	; CItemData::GetItemScale
PUBLIC	?__LoadFiles@CItemData@@IAEXXZ			; CItemData::__LoadFiles
PUBLIC	?__SetIconImage@CItemData@@IAEXPBD@Z		; CItemData::__SetIconImage
PUBLIC	??1?$vector@PAVCGraphicThing@@V?$allocator@PAVCGraphicThing@@@std@@@std@@QAE@XZ ; std::vector<CGraphicThing *,std::allocator<CGraphicThing *> >::~vector<CGraphicThing *,std::allocator<CGraphicThing *> >
PUBLIC	?_Xlength@?$vector@PAVCGraphicThing@@V?$allocator@PAVCGraphicThing@@@std@@@std@@CAXXZ ; std::vector<CGraphicThing *,std::allocator<CGraphicThing *> >::_Xlength
PUBLIC	??1?$vector@USAttachingData@NRaceData@@V?$allocator@USAttachingData@NRaceData@@@std@@@std@@QAE@XZ ; std::vector<NRaceData::SAttachingData,std::allocator<NRaceData::SAttachingData> >::~vector<NRaceData::SAttachingData,std::allocator<NRaceData::SAttachingData> >
PUBLIC	?DestroySystem@CItemData@@SAXXZ			; CItemData::DestroySystem
PUBLIC	?New@CItemData@@SAPAV1@XZ			; CItemData::New
PUBLIC	?Delete@CItemData@@SAXPAV1@@Z			; CItemData::Delete
PUBLIC	??_GCItemData@@UAEPAXI@Z			; CItemData::`scalar deleting destructor'
PUBLIC	??1?$CDynamicPool@VCItemData@@@@UAE@XZ		; CDynamicPool<CItemData>::~CDynamicPool<CItemData>
PUBLIC	?Delete@?$CDynamicPool@VCItemData@@@@KAXPAVCItemData@@@Z ; CDynamicPool<CItemData>::Delete
PUBLIC	?_Xlength@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@CAXXZ ; std::vector<CItemData *,std::allocator<CItemData *> >::_Xlength
PUBLIC	??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAVCGraphicThing@@V?$allocator@PAVCGraphicThing@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<CGraphicThing *,std::allocator<CGraphicThing *> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Emplace_reallocate@ABQAVCItemData@@@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@AAEPAPAVCItemData@@QAPAV2@ABQAV2@@Z ; std::vector<CItemData *,std::allocator<CItemData *> >::_Emplace_reallocate<CItemData * const &>
PUBLIC	??$_Zero_range@PAPAVCGraphicThing@@@std@@YAPAPAVCGraphicThing@@QAPAV1@0@Z ; std::_Zero_range<CGraphicThing * *>
PUBLIC	??$_Copy_memmove@PAPAVCGraphicThing@@PAPAV1@@std@@YAPAPAVCGraphicThing@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicThing * *,CGraphicThing * *>
PUBLIC	??$_Copy_memmove@PAPAVCItemData@@PAPAV1@@std@@YAPAPAVCItemData@@PAPAV1@00@Z ; std::_Copy_memmove<CItemData * *,CItemData * *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
PUBLIC	?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A ; CItemData::ms_kPool
PUBLIC	??_7CItemData@@6B@				; CItemData::`vftable'
PUBLIC	??_C@_0CD@GGDHOLJD@d?3?1ymir?5work?1item?1etc?1item_bag?4@ ; `string'
PUBLIC	??_C@_0BE@FMGIELLL@icon?1item?127995?4tga@	; `string'
PUBLIC	??_C@_0CI@CPFNJMPO@?$CFs?5not?5found?4?5CItemData?3?3__SetI@ ; `string'
PUBLIC	??_C@_0M@IHDHIBML@JOB_WARRIOR@			; `string'
PUBLIC	??_C@_0N@IAFGBDIL@JOB_ASSASSIN@			; `string'
PUBLIC	??_C@_08IJIBKCOK@JOB_SURA@			; `string'
PUBLIC	??_C@_0L@FBDFJGPA@JOB_SHAMAN@			; `string'
PUBLIC	??_C@_01BIAFAFID@F@				; `string'
PUBLIC	??_C@_0N@OHMMNDLH@NOT_USE_TYPE@			; `string'
PUBLIC	??_C@_0L@JIILHJGL@USE_TUNING@			; `string'
PUBLIC	??_C@_0P@MKAMDACK@USE_DETACHMENT@		; `string'
PUBLIC	??_C@_0BB@IPDHFONJ@USE_CLEAN_SOCKET@		; `string'
PUBLIC	??_C@_0BF@OFJOINJA@USE_CHANGE_ATTRIBUTE@	; `string'
PUBLIC	??_C@_0BC@CNMGHFMD@USE_ADD_ATTRIBUTE@		; `string'
PUBLIC	??_C@_0BD@OPDAABAO@USE_ADD_ATTRIBUTE2@		; `string'
PUBLIC	??_C@_0BJ@NMHGAPML@USE_ADD_ACCESSORY_SOCKET@	; `string'
PUBLIC	??_C@_0BO@CNHACOAA@USE_PUT_INTO_ACCESSORY_SOCKET@ ; `string'
PUBLIC	??_C@_0BJ@FLCFGEDJ@USE_PUT_INTO_BELT_SOCKET@	; `string'
PUBLIC	??_C@_0BJ@MMJPLFIL@USE_PUT_INTO_RING_SOCKET@	; `string'
PUBLIC	??_C@_0BI@JBGADBGG@USE_CHANGE_COSTUME_ATTR@	; `string'
PUBLIC	??_C@_0BH@GEFCODLD@USE_RESET_COSTUME_ATTR@	; `string'
PUBLIC	??_C@_0BB@HEDGKPKE@USE_UNKNOWN_TYPE@		; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CItemData@@6B@				; CItemData::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCItemData@@@8				; CItemData `RTTI Type Descriptor'
PUBLIC	??_R3CItemData@@8				; CItemData::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CItemData@@8				; CItemData::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CItemData@@8			; CItemData::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@4059000000000000
PUBLIC	__real@42c80000
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_atof:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?TraceError@@YAXPBDZZ:PROC			; TraceError
EXTRN	?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z:PROC ; CResourceManager::GetResourcePointer
EXTRN	?IsFileExist@CResourceManager@@QAE_NPBD@Z:PROC	; CResourceManager::IsFileExist
EXTRN	??_ECItemData@@UAEPAXI@Z:PROC			; CItemData::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A DD 01H DUP (?) ; CSingleton<CResourceManager>::ms_singleton
_BSS	ENDS
CRT$XCU	SEGMENT
??ms_kPool$initializer$@CItemData@@2P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A@@YAXXZ ; ??ms_kPool$initializer$@CItemData@@2P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CItemData@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CItemData@@8 DD FLAT:??_R0?AVCItemData@@@8 ; CItemData::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CItemData@@8
rdata$r	ENDS
;	COMDAT ??_R2CItemData@@8
rdata$r	SEGMENT
??_R2CItemData@@8 DD FLAT:??_R1A@?0A@EA@CItemData@@8	; CItemData::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CItemData@@8
rdata$r	SEGMENT
??_R3CItemData@@8 DD 00H				; CItemData::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CItemData@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCItemData@@@8
data$rs	SEGMENT
??_R0?AVCItemData@@@8 DD FLAT:??_7type_info@@6B@	; CItemData `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCItemData@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CItemData@@6B@
rdata$r	SEGMENT
??_R4CItemData@@6B@ DD 00H				; CItemData::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCItemData@@@8
	DD	FLAT:??_R3CItemData@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HEDGKPKE@USE_UNKNOWN_TYPE@
CONST	SEGMENT
??_C@_0BB@HEDGKPKE@USE_UNKNOWN_TYPE@ DB 'USE_UNKNOWN_TYPE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@GEFCODLD@USE_RESET_COSTUME_ATTR@
CONST	SEGMENT
??_C@_0BH@GEFCODLD@USE_RESET_COSTUME_ATTR@ DB 'USE_RESET_COSTUME_ATTR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@JBGADBGG@USE_CHANGE_COSTUME_ATTR@
CONST	SEGMENT
??_C@_0BI@JBGADBGG@USE_CHANGE_COSTUME_ATTR@ DB 'USE_CHANGE_COSTUME_ATTR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@MMJPLFIL@USE_PUT_INTO_RING_SOCKET@
CONST	SEGMENT
??_C@_0BJ@MMJPLFIL@USE_PUT_INTO_RING_SOCKET@ DB 'USE_PUT_INTO_RING_SOCKET'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@FLCFGEDJ@USE_PUT_INTO_BELT_SOCKET@
CONST	SEGMENT
??_C@_0BJ@FLCFGEDJ@USE_PUT_INTO_BELT_SOCKET@ DB 'USE_PUT_INTO_BELT_SOCKET'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@CNHACOAA@USE_PUT_INTO_ACCESSORY_SOCKET@
CONST	SEGMENT
??_C@_0BO@CNHACOAA@USE_PUT_INTO_ACCESSORY_SOCKET@ DB 'USE_PUT_INTO_ACCESS'
	DB	'ORY_SOCKET', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NMHGAPML@USE_ADD_ACCESSORY_SOCKET@
CONST	SEGMENT
??_C@_0BJ@NMHGAPML@USE_ADD_ACCESSORY_SOCKET@ DB 'USE_ADD_ACCESSORY_SOCKET'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OPDAABAO@USE_ADD_ATTRIBUTE2@
CONST	SEGMENT
??_C@_0BD@OPDAABAO@USE_ADD_ATTRIBUTE2@ DB 'USE_ADD_ATTRIBUTE2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CNMGHFMD@USE_ADD_ATTRIBUTE@
CONST	SEGMENT
??_C@_0BC@CNMGHFMD@USE_ADD_ATTRIBUTE@ DB 'USE_ADD_ATTRIBUTE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OFJOINJA@USE_CHANGE_ATTRIBUTE@
CONST	SEGMENT
??_C@_0BF@OFJOINJA@USE_CHANGE_ATTRIBUTE@ DB 'USE_CHANGE_ATTRIBUTE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IPDHFONJ@USE_CLEAN_SOCKET@
CONST	SEGMENT
??_C@_0BB@IPDHFONJ@USE_CLEAN_SOCKET@ DB 'USE_CLEAN_SOCKET', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MKAMDACK@USE_DETACHMENT@
CONST	SEGMENT
??_C@_0P@MKAMDACK@USE_DETACHMENT@ DB 'USE_DETACHMENT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JIILHJGL@USE_TUNING@
CONST	SEGMENT
??_C@_0L@JIILHJGL@USE_TUNING@ DB 'USE_TUNING', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OHMMNDLH@NOT_USE_TYPE@
CONST	SEGMENT
??_C@_0N@OHMMNDLH@NOT_USE_TYPE@ DB 'NOT_USE_TYPE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01BIAFAFID@F@
CONST	SEGMENT
??_C@_01BIAFAFID@F@ DB 'F', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FBDFJGPA@JOB_SHAMAN@
CONST	SEGMENT
??_C@_0L@FBDFJGPA@JOB_SHAMAN@ DB 'JOB_SHAMAN', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08IJIBKCOK@JOB_SURA@
CONST	SEGMENT
??_C@_08IJIBKCOK@JOB_SURA@ DB 'JOB_SURA', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IAFGBDIL@JOB_ASSASSIN@
CONST	SEGMENT
??_C@_0N@IAFGBDIL@JOB_ASSASSIN@ DB 'JOB_ASSASSIN', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IHDHIBML@JOB_WARRIOR@
CONST	SEGMENT
??_C@_0M@IHDHIBML@JOB_WARRIOR@ DB 'JOB_WARRIOR', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@CPFNJMPO@?$CFs?5not?5found?4?5CItemData?3?3__SetI@
CONST	SEGMENT
??_C@_0CI@CPFNJMPO@?$CFs?5not?5found?4?5CItemData?3?3__SetI@ DB '%s not f'
	DB	'ound. CItemData::__SetIconImage', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FMGIELLL@icon?1item?127995?4tga@
CONST	SEGMENT
??_C@_0BE@FMGIELLL@icon?1item?127995?4tga@ DB 'icon/item/27995.tga', 00H ; `string'
CONST	ENDS
;	COMDAT ?c_szAlterIconImage@?4??__SetIconImage@CItemData@@IAEXPBD@Z@4PBDB
_DATA	SEGMENT
?c_szAlterIconImage@?4??__SetIconImage@CItemData@@IAEXPBD@Z@4PBDB DD FLAT:??_C@_0BE@FMGIELLL@icon?1item?127995?4tga@ ; `CItemData::__SetIconImage'::`5'::c_szAlterIconImage
_DATA	ENDS
;	COMDAT ??_C@_0CD@GGDHOLJD@d?3?1ymir?5work?1item?1etc?1item_bag?4@
CONST	SEGMENT
??_C@_0CD@GGDHOLJD@d?3?1ymir?5work?1item?1etc?1item_bag?4@ DB 'd:/ymir wo'
	DB	'rk/item/etc/item_bag.gr2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7CItemData@@6B@
CONST	SEGMENT
??_7CItemData@@6B@ DD FLAT:??_R4CItemData@@6B@		; CItemData::`vftable'
	DD	FLAT:??_ECItemData@@UAEPAXI@Z
CONST	ENDS
_DATA	SEGMENT
?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A DD FLAT:??_7?$CDynamicPool@VCItemData@@@@6B@ ; CItemData::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Alloc@?$CDynamicPool@VCItemData@@@@QAEPAVCItemData@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Alloc@?$CDynamicPool@VCItemData@@@@QAEPAVCItemData@@XZ$0
__ehfuncinfo$?Alloc@?$CDynamicPool@VCItemData@@@@QAEPAVCItemData@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Alloc@?$CDynamicPool@VCItemData@@@@QAEPAVCItemData@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?New@CItemData@@SAPAV1@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?New@CItemData@@SAPAV1@XZ$0
__ehfuncinfo$?New@CItemData@@SAPAV1@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?New@CItemData@@SAPAV1@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CItemData@@QAE@XZ DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$??0CItemData@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CItemData@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CItemData@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CItemData@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CItemData@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CItemData@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CItemData@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0CItemData@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0CItemData@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??0CItemData@@QAE@XZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$??0CItemData@@QAE@XZ$8
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCItemData@@PAPAV1@@std@@YAPAPAVCItemData@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCItemData@@PAPAV1@@std@@YAPAPAVCItemData@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CItemData * *,CItemData * *>, COMDAT

; 4526 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4527 :     auto _FirstPtr              = _To_address(_First);
; 4528 :     auto _LastPtr               = _To_address(_Last);
; 4529 :     auto _DestPtr               = _To_address(_Dest);
; 4530 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4531 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4532 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4533 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4535 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4536 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4537 :     } else {
; 4538 :         return _Dest + (_LastPtr - _FirstPtr);
; 4539 :     }
; 4540 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAVCItemData@@PAPAV1@@std@@YAPAPAVCItemData@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CItemData * *,CItemData * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCGraphicThing@@PAPAV1@@std@@YAPAPAVCGraphicThing@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCGraphicThing@@PAPAV1@@std@@YAPAPAVCGraphicThing@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CGraphicThing * *,CGraphicThing * *>, COMDAT

; 4526 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4527 :     auto _FirstPtr              = _To_address(_First);
; 4528 :     auto _LastPtr               = _To_address(_Last);
; 4529 :     auto _DestPtr               = _To_address(_Dest);
; 4530 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4531 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4532 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4533 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4535 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4536 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4537 :     } else {
; 4538 :         return _Dest + (_LastPtr - _FirstPtr);
; 4539 :     }
; 4540 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAVCGraphicThing@@PAPAV1@@std@@YAPAPAVCGraphicThing@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CGraphicThing * *,CGraphicThing * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$_Zero_range@PAPAVCGraphicThing@@@std@@YAPAPAVCGraphicThing@@QAPAV1@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Zero_range@PAPAVCGraphicThing@@@std@@YAPAPAVCGraphicThing@@QAPAV1@0@Z PROC ; std::_Zero_range<CGraphicThing * *>, COMDAT

; 2017 : _Ptr _Zero_range(const _Ptr _First, const _Ptr _Last) { // fill [_First, _Last) with zeroes

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2018 :     char* const _First_ch = reinterpret_cast<char*>(_To_address(_First));
; 2019 :     char* const _Last_ch  = reinterpret_cast<char*>(_To_address(_Last));
; 2020 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	51		 push	 ecx
  0000c	6a 00		 push	 0
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 _memset

; 2021 :     return _Last;

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2022 : }

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Zero_range@PAPAVCGraphicThing@@@std@@YAPAPAVCGraphicThing@@QAPAV1@0@Z ENDP ; std::_Zero_range<CGraphicThing * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCItemData@@@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@AAEPAPAVCItemData@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
__Newsize$1$ = -12					; size = 4
tv607 = -8						; size = 4
tv590 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCItemData@@@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@AAEPAPAVCItemData@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CItemData *,std::allocator<CItemData *> >::_Emplace_reallocate<CItemData * const &>, COMDAT
; _this$ = ecx

; 812  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 813  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 814  :         _Alty& _Al        = _Getal();
; 815  :         auto& _My_data    = _Mypair._Myval2;
; 816  :         pointer& _Myfirst = _My_data._Myfirst;
; 817  :         pointer& _Mylast  = _My_data._Mylast;
; 818  : 
; 819  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 820  : 
; 821  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	2b d9		 sub	 ebx, ecx

; 822  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c1		 sub	 eax, ecx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 823  : 
; 824  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 0f 01 00
	00		 je	 $LN96@Emplace_re

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 826  :         }
; 827  : 
; 828  :         const size_type _Newsize     = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b d1		 sub	 edx, ecx

; 826  :         }
; 827  : 
; 828  :         const size_type _Newsize     = _Oldsize + 1;

  00030	89 7d f4	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 fa 02	 sar	 edx, 2

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b ca		 mov	 ecx, edx
  0003d	d1 e9		 shr	 ecx, 1
  0003f	2b c1		 sub	 eax, ecx
  00041	3b d0		 cmp	 edx, eax
  00043	76 15		 jbe	 SHORT $LN12@Emplace_re

; 1967 :             return _Max; // geometric growth would overflow

  00045	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004a	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1967 :             return _Max; // geometric growth would overflow

  0004b	89 45 f8	 mov	 DWORD PTR tv607[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00053	83 c4 04	 add	 esp, 4
  00056	8b f8		 mov	 edi, eax
  00058	eb 47		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1970 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005a	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 70   :         if (_Count > _Max_possible) {

  0005d	8b cf		 mov	 ecx, edi
  0005f	3b c7		 cmp	 eax, edi
  00061	0f 43 c8	 cmovae	 ecx, eax
  00064	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  0006a	0f 87 cc 00 00
	00		 ja	 $LN97@Emplace_re

; 72   :         }
; 73   :     }
; 74   : 
; 75   :     return _Count * _Ty_size;

  00070	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  00077	89 45 f8	 mov	 DWORD PTR tv607[ebp], eax

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0007a	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0007f	72 0d		 jb	 SHORT $LN24@Emplace_re

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00087	83 c4 04	 add	 esp, 4
  0008a	8b f8		 mov	 edi, eax
  0008c	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  0008e	85 c0		 test	 eax, eax
  00090	74 0d		 je	 SHORT $LN25@Emplace_re

; 87   :         return ::operator new(_Bytes);

  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00098	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  0009b	8b f8		 mov	 edi, eax
  0009d	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  0009f	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 836  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000a1	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000a4	8d 0c 9f	 lea	 ecx, DWORD PTR [edi+ebx*4]

; 837  :         _Constructed_first = _Newvec + _Whereoff;
; 838  : 
; 839  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000a7	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  000aa	89 4d fc	 mov	 DWORD PTR tv590[ebp], ecx
  000ad	8b 00		 mov	 eax, DWORD PTR [eax]
  000af	89 01		 mov	 DWORD PTR [ecx], eax
  000b1	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000b4	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000b6	3b d8		 cmp	 ebx, eax
  000b8	75 07		 jne	 SHORT $LN4@Emplace_re

; 845  :         } else { // provide basic guarantee

  000ba	8b 5d fc	 mov	 ebx, DWORD PTR tv590[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000bd	8b d7		 mov	 edx, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 845  :         } else { // provide basic guarantee

  000bf	eb 16		 jmp	 SHORT $LN52@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000c1	57		 push	 edi
  000c2	53		 push	 ebx
  000c3	51		 push	 ecx
  000c4	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCItemData@@PAPAV1@@std@@YAPAPAVCItemData@@PAPAV1@00@Z ; std::_Copy_memmove<CItemData * *,CItemData * *>
  000c9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000cc	8b cb		 mov	 ecx, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000ce	8b 5d fc	 mov	 ebx, DWORD PTR tv590[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000d1	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000d4	8d 53 04	 lea	 edx, DWORD PTR [ebx+4]
$LN52@Emplace_re:
  000d7	52		 push	 edx
  000d8	50		 push	 eax
  000d9	51		 push	 ecx
  000da	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCItemData@@PAPAV1@@std@@YAPAPAVCItemData@@PAPAV1@00@Z ; std::_Copy_memmove<CItemData * *,CItemData * *>

; 2023 :         if (_Myfirst) { // destroy and deallocate old array

  000df	8b 06		 mov	 eax, DWORD PTR [esi]

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000e1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2023 :         if (_Myfirst) { // destroy and deallocate old array

  000e4	85 c0		 test	 eax, eax
  000e6	74 2c		 je	 SHORT $LN70@Emplace_re

; 2024 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2025 :             _ASAN_VECTOR_REMOVE;
; 2026 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e8	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000eb	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ed	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000f0	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f6	72 12		 jb	 SHORT $LN80@Emplace_re

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f8	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000fb	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000fe	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00100	83 c0 fc	 add	 eax, -4			; fffffffcH
  00103	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00106	77 2a		 ja	 SHORT $LN77@Emplace_re

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00108	8b c2		 mov	 eax, edx
$LN80@Emplace_re:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0010a	51		 push	 ecx
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00111	83 c4 08	 add	 esp, 8
$LN70@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2030 :         _Mylast  = _Newvec + _Newsize;

  00114	8b 45 f4	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  00117	89 3e		 mov	 DWORD PTR [esi], edi
  00119	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]

; 849  :         }
; 850  :         _CATCH_ALL
; 851  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 852  :         _Al.deallocate(_Newvec, _Newcapacity);
; 853  :         _RERAISE;
; 854  :         _CATCH_END
; 855  : 
; 856  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 857  :         return _Newvec + _Whereoff;

  0011c	8b c3		 mov	 eax, ebx

; 2030 :         _Mylast  = _Newvec + _Newsize;

  0011e	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 2031 :         _Myend   = _Newvec + _Newcapacity;

  00121	8b 4d f8	 mov	 ecx, DWORD PTR tv607[ebp]
  00124	03 cf		 add	 ecx, edi

; 858  :     }

  00126	5f		 pop	 edi

; 2031 :         _Myend   = _Newvec + _Newcapacity;

  00127	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 858  :     }

  0012a	5e		 pop	 esi
  0012b	5b		 pop	 ebx
  0012c	8b e5		 mov	 esp, ebp
  0012e	5d		 pop	 ebp
  0012f	c2 08 00	 ret	 8
$LN77@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00132	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN96@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 825  :             _Xlength();

  00137	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@CAXXZ ; std::vector<CItemData *,std::allocator<CItemData *> >::_Xlength
$LN97@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 71   :             _Throw_bad_array_new_length(); // multiply overflow

  0013c	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN94@Emplace_re:
  00141	cc		 int	 3
??$_Emplace_reallocate@ABQAVCItemData@@@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@AAEPAPAVCItemData@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CItemData *,std::allocator<CItemData *> >::_Emplace_reallocate<CItemData * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAVCGraphicThing@@V?$allocator@PAVCGraphicThing@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
__Oldsize$1$ = -4					; size = 4
tv454 = 8						; size = 4
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAVCGraphicThing@@V?$allocator@PAVCGraphicThing@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<CGraphicThing *,std::allocator<CGraphicThing *> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1511 :     _CONSTEXPR20 void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 1512 :         if (_Newsize > max_size()) {

  00005	8b 5d 08	 mov	 ebx, DWORD PTR __Newsize$[ebp]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	57		 push	 edi
  0000c	81 fb ff ff ff
	3f		 cmp	 ebx, 1073741823		; 3fffffffH
  00012	0f 87 ec 00 00
	00		 ja	 $LN84@Resize_rea

; 1514 :         }
; 1515 : 
; 1516 :         auto& _Al         = _Getal();
; 1517 :         auto& _My_data    = _Mypair._Myval2;
; 1518 :         pointer& _Myfirst = _My_data._Myfirst;
; 1519 :         pointer& _Mylast  = _My_data._Mylast;
; 1520 : 
; 1521 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

  00018	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0001b	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 1514 :         }
; 1515 : 
; 1516 :         auto& _Al         = _Getal();
; 1517 :         auto& _My_data    = _Mypair._Myval2;
; 1518 :         pointer& _Myfirst = _My_data._Myfirst;
; 1519 :         pointer& _Mylast  = _My_data._Mylast;
; 1520 : 
; 1521 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

  00020	2b 0e		 sub	 ecx, DWORD PTR [esi]
  00022	c1 f9 02	 sar	 ecx, 2
  00025	89 4d fc	 mov	 DWORD PTR __Oldsize$1$[ebp], ecx

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0002b	2b 0e		 sub	 ecx, DWORD PTR [esi]
  0002d	c1 f9 02	 sar	 ecx, 2

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00030	8b d1		 mov	 edx, ecx
  00032	d1 ea		 shr	 edx, 1
  00034	2b c2		 sub	 eax, edx
  00036	3b c8		 cmp	 ecx, eax
  00038	76 15		 jbe	 SHORT $LN10@Resize_rea

; 1967 :             return _Max; // geometric growth would overflow

  0003a	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0003f	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1967 :             return _Max; // geometric growth would overflow

  00040	89 45 08	 mov	 DWORD PTR tv454[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00043	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00048	83 c4 04	 add	 esp, 4
  0004b	8b f8		 mov	 edi, eax
  0004d	eb 43		 jmp	 SHORT $LN21@Resize_rea
$LN10@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1970 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0004f	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 1971 : 
; 1972 :         if (_Geometric < _Newsize) {

  00052	3b c3		 cmp	 eax, ebx
  00054	73 1c		 jae	 SHORT $LN11@Resize_rea

; 1973 :             return _Newsize; // geometric growth would be insufficient

  00056	8b c3		 mov	 eax, ebx
$LN18@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 75   :     return _Count * _Ty_size;

  00058	c1 e0 02	 shl	 eax, 2
  0005b	89 45 08	 mov	 DWORD PTR tv454[ebp], eax

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0005e	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00063	72 1a		 jb	 SHORT $LN22@Resize_rea

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0006b	83 c4 04	 add	 esp, 4
  0006e	8b f8		 mov	 edi, eax
  00070	eb 20		 jmp	 SHORT $LN21@Resize_rea
$LN11@Resize_rea:

; 70   :         if (_Count > _Max_possible) {

  00072	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00077	0f 87 8c 00 00
	00		 ja	 $LN85@Resize_rea
  0007d	eb d9		 jmp	 SHORT $LN18@Resize_rea
$LN22@Resize_rea:

; 244  :     if (_Bytes != 0) {

  0007f	85 c0		 test	 eax, eax
  00081	74 0d		 je	 SHORT $LN23@Resize_rea

; 87   :         return ::operator new(_Bytes);

  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00089	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  0008c	8b f8		 mov	 edi, eax
  0008e	eb 02		 jmp	 SHORT $LN21@Resize_rea
$LN23@Resize_rea:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  00090	33 ff		 xor	 edi, edi
$LN21@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1525 :         const pointer _Appended_first = _Newvec + _Oldsize;

  00092	8b 55 fc	 mov	 edx, DWORD PTR __Oldsize$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 2035 :             _Zero_range(_PFirst, _PFirst + _Count);

  00095	8b c3		 mov	 eax, ebx
  00097	2b c2		 sub	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1525 :         const pointer _Appended_first = _Newvec + _Oldsize;

  00099	8d 0c 97	 lea	 ecx, DWORD PTR [edi+edx*4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 2035 :             _Zero_range(_PFirst, _PFirst + _Count);

  0009c	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0009f	50		 push	 eax
  000a0	51		 push	 ecx
  000a1	e8 00 00 00 00	 call	 ??$_Zero_range@PAPAVCGraphicThing@@@std@@YAPAPAVCGraphicThing@@QAPAV1@0@Z ; std::_Zero_range<CGraphicThing * *>

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000a6	57		 push	 edi
  000a7	ff 76 04	 push	 DWORD PTR [esi+4]
  000aa	ff 36		 push	 DWORD PTR [esi]
  000ac	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCGraphicThing@@PAPAV1@@std@@YAPAPAVCGraphicThing@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicThing * *,CGraphicThing * *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2023 :         if (_Myfirst) { // destroy and deallocate old array

  000b1	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000b3	83 c4 14	 add	 esp, 20			; 00000014H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2023 :         if (_Myfirst) { // destroy and deallocate old array

  000b6	85 c0		 test	 eax, eax
  000b8	74 2c		 je	 SHORT $LN59@Resize_rea

; 2024 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2025 :             _ASAN_VECTOR_REMOVE;
; 2026 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000ba	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000bd	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000bf	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000c2	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000c8	72 12		 jb	 SHORT $LN69@Resize_rea

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000ca	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000cd	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000d0	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000d2	83 c0 fc	 add	 eax, -4			; fffffffcH
  000d5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000d8	77 25		 ja	 SHORT $LN66@Resize_rea

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000da	8b c2		 mov	 eax, edx
$LN69@Resize_rea:

; 265  :         ::operator delete(_Ptr, _Bytes);

  000dc	51		 push	 ecx
  000dd	50		 push	 eax
  000de	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000e3	83 c4 08	 add	 esp, 8
$LN59@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2030 :         _Mylast  = _Newvec + _Newsize;

  000e6	8d 04 9f	 lea	 eax, DWORD PTR [edi+ebx*4]
  000e9	89 3e		 mov	 DWORD PTR [esi], edi
  000eb	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 2031 :         _Myend   = _Newvec + _Newcapacity;

  000ee	8b 45 08	 mov	 eax, DWORD PTR tv454[ebp]
  000f1	03 c7		 add	 eax, edi

; 1548 :     }

  000f3	5f		 pop	 edi

; 2031 :         _Myend   = _Newvec + _Newcapacity;

  000f4	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 1548 :     }

  000f7	5e		 pop	 esi
  000f8	5b		 pop	 ebx
  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c2 08 00	 ret	 8
$LN66@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ff	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN84@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1513 :             _Xlength();

  00104	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCGraphicThing@@V?$allocator@PAVCGraphicThing@@@std@@@std@@CAXXZ ; std::vector<CGraphicThing *,std::allocator<CGraphicThing *> >::_Xlength
$LN85@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 71   :             _Throw_bad_array_new_length(); // multiply overflow

  00109	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN82@Resize_rea:
  0010e	cc		 int	 3
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAVCGraphicThing@@V?$allocator@PAVCGraphicThing@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<CGraphicThing *,std::allocator<CGraphicThing *> >::_Resize_reallocate<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 1082 : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1086 :         for (; _First != _Last; ++_First) {

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 48		 je	 SHORT $LN45@Destroy_ra
  0000f	90		 npad	 1
$LL4@Destroy_ra:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00010	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00013	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  00016	72 27		 jb	 SHORT $LN23@Destroy_ra
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00018	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0001a	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0001b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00021	72 12		 jb	 SHORT $LN33@Destroy_ra

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00023	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00026	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00029	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0002b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00031	77 28		 ja	 SHORT $LN30@Destroy_ra

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00033	8b c2		 mov	 eax, edx
$LN33@Destroy_ra:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00035	51		 push	 ecx
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003c	83 c4 08	 add	 esp, 8
$LN23@Destroy_ra:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  0003f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  00046	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0004d	c6 06 00	 mov	 BYTE PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1086 :         for (; _First != _Last; ++_First) {

  00050	83 c6 18	 add	 esi, 24			; 00000018H
  00053	3b f7		 cmp	 esi, edi
  00055	75 b9		 jne	 SHORT $LL4@Destroy_ra
$LN45@Destroy_ra:
  00057	5f		 pop	 edi

; 1087 :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 1088 :         }
; 1089 :     }
; 1090 : }

  00058	5e		 pop	 esi
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
$LN30@Destroy_ra:

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0005b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN50@Destroy_ra:
  00060	cc		 int	 3
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
;	COMDAT ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z PROC ; std::operator==<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 5016 :     const basic_string<_Elem, _Traits, _Alloc>& _Left, _In_z_ const _Elem* const _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Right$[ebp]

; 5016 :     const basic_string<_Elem, _Traits, _Alloc>& _Left, _In_z_ const _Elem* const _Right) {

  00007	57		 push	 edi

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00008	8b fe		 mov	 edi, esi
  0000a	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
  0000d	0f 1f 00	 npad	 3
$LL18@operator:
  00010	8a 07		 mov	 al, BYTE PTR [edi]
  00012	47		 inc	 edi
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL18@operator

; 2235 :         const value_type* _Result = _Bx._Buf;

  00017	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0001a	2b f9		 sub	 edi, ecx

; 2235 :         const value_type* _Result = _Bx._Buf;

  0001c	8b ca		 mov	 ecx, edx

; 2244 :         return _BUF_SIZE <= _Myres;

  0001e	83 7a 14 10	 cmp	 DWORD PTR [edx+20], 16	; 00000010H

; 2236 :         if (_Large_string_engaged()) {

  00022	72 02		 jb	 SHORT $LN8@operator

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  00024	8b 0a		 mov	 ecx, DWORD PTR [edx]
$LN8@operator:

; 4590 :         return _Traits_equal<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize, _Ptr, _Traits::length(_Ptr));

  00026	8b 52 10	 mov	 edx, DWORD PTR [edx+16]

; 548  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  00029	3b d7		 cmp	 edx, edi
  0002b	75 5b		 jne	 SHORT $LN14@operator

; 383  :         return _CSTD memcmp(_First1, _First2, _Count);

  0002d	83 ea 04	 sub	 edx, 4
  00030	72 11		 jb	 SHORT $LN21@operator
$LL22@operator:
  00032	8b 01		 mov	 eax, DWORD PTR [ecx]
  00034	3b 06		 cmp	 eax, DWORD PTR [esi]
  00036	75 10		 jne	 SHORT $LN20@operator
  00038	83 c1 04	 add	 ecx, 4
  0003b	83 c6 04	 add	 esi, 4
  0003e	83 ea 04	 sub	 edx, 4
  00041	73 ef		 jae	 SHORT $LL22@operator
$LN21@operator:
  00043	83 fa fc	 cmp	 edx, -4			; fffffffcH
  00046	74 34		 je	 SHORT $LN19@operator
$LN20@operator:
  00048	8a 01		 mov	 al, BYTE PTR [ecx]
  0004a	3a 06		 cmp	 al, BYTE PTR [esi]
  0004c	75 27		 jne	 SHORT $LN23@operator
  0004e	83 fa fd	 cmp	 edx, -3			; fffffffdH
  00051	74 29		 je	 SHORT $LN19@operator
  00053	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  00056	3a 46 01	 cmp	 al, BYTE PTR [esi+1]
  00059	75 1a		 jne	 SHORT $LN23@operator
  0005b	83 fa fe	 cmp	 edx, -2			; fffffffeH
  0005e	74 1c		 je	 SHORT $LN19@operator
  00060	8a 41 02	 mov	 al, BYTE PTR [ecx+2]
  00063	3a 46 02	 cmp	 al, BYTE PTR [esi+2]
  00066	75 0d		 jne	 SHORT $LN23@operator
  00068	83 fa ff	 cmp	 edx, -1
  0006b	74 0f		 je	 SHORT $LN19@operator
  0006d	8a 41 03	 mov	 al, BYTE PTR [ecx+3]
  00070	3a 46 03	 cmp	 al, BYTE PTR [esi+3]
  00073	74 07		 je	 SHORT $LN19@operator
$LN23@operator:
  00075	1b c0		 sbb	 eax, eax
  00077	83 c8 01	 or	 eax, 1
  0007a	eb 02		 jmp	 SHORT $LN24@operator
$LN19@operator:
  0007c	33 c0		 xor	 eax, eax
$LN24@operator:

; 548  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  0007e	85 c0		 test	 eax, eax
  00080	75 06		 jne	 SHORT $LN14@operator
  00082	5f		 pop	 edi
  00083	b0 01		 mov	 al, 1

; 5017 :     return _Left._Equal(_Right);
; 5018 : }

  00085	5e		 pop	 esi
  00086	5d		 pop	 ebp
  00087	c3		 ret	 0
$LN14@operator:
  00088	5f		 pop	 edi

; 548  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  00089	32 c0		 xor	 al, al

; 5017 :     return _Left._Equal(_Right);
; 5018 : }

  0008b	5e		 pop	 esi
  0008c	5d		 pop	 ebp
  0008d	c3		 ret	 0
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ENDP ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CItemData::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A ; CItemData::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPool@VCItemData@@@@UAE@XZ ; CDynamicPool<CItemData>::~CDynamicPool<CItemData>
??__F?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CItemData::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ??__E?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CItemData::ms_kPool'', COMDAT

; 6    : CDynamicPool<CItemData>		CItemData::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CItemData::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CItemData::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPool@VCItemData@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPool@VCItemData@@@@UAEPAXI@Z PROC		; CDynamicPool<CItemData>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPool@VCItemData@@@@UAE@XZ ; CDynamicPool<CItemData>::~CDynamicPool<CItemData>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPool@VCItemData@@@@UAEPAXI@Z ENDP		; CDynamicPool<CItemData>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@CAXXZ PROC ; std::vector<CItemData *,std::allocator<CItemData *> >::_Xlength, COMDAT

; 2138 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@CAXXZ ENDP ; std::vector<CItemData *,std::allocator<CItemData *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPool@VCItemData@@@@KAXPAVCItemData@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPool@VCItemData@@@@KAXPAVCItemData@@@Z PROC ; CDynamicPool<CItemData>::Delete, COMDAT

; 109  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 110  : 			delete pkData;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _pkData$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 06		 je	 SHORT $LN3@Delete
  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	6a 01		 push	 1
  0000e	ff 10		 call	 DWORD PTR [eax]
$LN3@Delete:

; 111  : 		}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?Delete@?$CDynamicPool@VCItemData@@@@KAXPAVCItemData@@@Z ENDP ; CDynamicPool<CItemData>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPool@VCItemData@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPool@VCItemData@@@@UAE@XZ PROC		; CDynamicPool<CItemData>::~CDynamicPool<CItemData>, COMDAT
; _this$ = ecx

; 18   : 		{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDynamicPool@VCItemData@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000c	85 c0		 test	 eax, eax
  0000e	74 41		 je	 SHORT $LN6@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00013	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 12		 jb	 SHORT $LN22@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00020	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00023	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00026	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00028	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002e	77 6b		 ja	 SHORT $LN44@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b c2		 mov	 eax, edx
$LN22@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00039	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00040	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  00043	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 2051 :             _Myend   = nullptr;

  0004a	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN6@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00051	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00054	85 c0		 test	 eax, eax
  00056	74 41		 je	 SHORT $LN31@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00058	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0005b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0005d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00060	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00066	72 12		 jb	 SHORT $LN47@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00068	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0006b	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0006e	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00070	83 c0 fc	 add	 eax, -4			; fffffffcH
  00073	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00076	77 23		 ja	 SHORT $LN44@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00078	8b c2		 mov	 eax, edx
$LN47@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0007a	51		 push	 ecx
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00081	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00088	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  0008b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 2051 :             _Myend   = nullptr;

  00092	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN31@CDynamicPo:
  00099	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 26   : 		}

  0009a	c3		 ret	 0
$LN44@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0009b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN58@CDynamicPo:
  000a0	cc		 int	 3
??1?$CDynamicPool@VCItemData@@@@UAE@XZ ENDP		; CDynamicPool<CItemData>::~CDynamicPool<CItemData>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCItemData@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCItemData@@UAEPAXI@Z PROC				; CItemData::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CItemData@@UAE@XZ	; CItemData::~CItemData
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 58 02 00 00	 push	 600			; 00000258H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCItemData@@UAEPAXI@Z ENDP				; CItemData::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ?Delete@CItemData@@SAXPAV1@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
_pkItemData$ = 8					; size = 4
?Delete@CItemData@@SAXPAV1@@Z PROC			; CItemData::Delete, COMDAT

; 16   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 17   : 	pkItemData->Clear();

  00004	8b 75 08	 mov	 esi, DWORD PTR _pkItemData$[ebp]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ?Clear@CItemData@@QAEXXZ ; CItemData::Clear
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  0000e	a1 14 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A+20
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 18   : 	ms_kPool.Free(pkItemData);

  00013	89 75 08	 mov	 DWORD PTR _pkData$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  00016	3b 05 18 00 00
	00		 cmp	 eax, DWORD PTR ?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A+24
  0001c	74 0c		 je	 SHORT $LN8@Delete

; 797  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  0001e	89 30		 mov	 DWORD PTR [eax], esi

; 798  :         } else {
; 799  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 800  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 801  :             _ASAN_VECTOR_RELEASE_GUARD;
; 802  :         }
; 803  : 
; 804  :         _Orphan_range(_Mylast, _Mylast);
; 805  :         _Ty& _Result = *_Mylast;
; 806  :         ++_Mylast;

  00020	83 05 14 00 00
	00 04		 add	 DWORD PTR ?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A+20, 4
  00027	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 19   : }

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
$LN8@Delete:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0002a	8d 4d 08	 lea	 ecx, DWORD PTR _pkData$[ebp]
  0002d	51		 push	 ecx
  0002e	50		 push	 eax
  0002f	b9 10 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A+16
  00034	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCItemData@@@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@AAEPAPAVCItemData@@QAPAV2@ABQAV2@@Z ; std::vector<CItemData *,std::allocator<CItemData *> >::_Emplace_reallocate<CItemData * const &>
  00039	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 19   : }

  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?Delete@CItemData@@SAXPAV1@@Z ENDP			; CItemData::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ?New@CItemData@@SAPAV1@XZ
_TEXT	SEGMENT
$T2 = -16						; size = 4
_pkNewData$3 = -16					; size = 4
__$EHRec$ = -12						; size = 12
?New@CItemData@@SAPAV1@XZ PROC				; CItemData::New, COMDAT

; 11   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?New@CItemData@@SAPAV1@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1864 :         return _My_data._Myfirst == _My_data._Mylast;

  00024	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A+20
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 63   : 			if (m_kVct_pkFree.empty())

  0002a	39 0d 10 00 00
	00		 cmp	 DWORD PTR ?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A+16, ecx
  00030	0f 85 87 00 00
	00		 jne	 $LN4@New

; 65   : 				T* pkNewData=new T;

  00036	68 58 02 00 00	 push	 600			; 00000258H
  0003b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00040	83 c4 04	 add	 esp, 4
  00043	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004d	85 c0		 test	 eax, eax
  0004f	74 0b		 je	 SHORT $LN6@New
  00051	8b c8		 mov	 ecx, eax
  00053	e8 00 00 00 00	 call	 ??0CItemData@@QAE@XZ	; CItemData::CItemData
  00058	8b f0		 mov	 esi, eax
  0005a	eb 02		 jmp	 SHORT $LN7@New
$LN6@New:
  0005c	33 f6		 xor	 esi, esi
$LN7@New:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  0005e	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A+8
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 65   : 				T* pkNewData=new T;

  00063	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006a	89 75 f0	 mov	 DWORD PTR _pkNewData$3[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  0006d	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A+12
  00073	74 21		 je	 SHORT $LN14@New

; 797  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00075	89 30		 mov	 DWORD PTR [eax], esi
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 12   : 	return ms_kPool.Alloc();

  00077	8b c6		 mov	 eax, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 806  :         ++_Mylast;

  00079	83 05 08 00 00
	00 04		 add	 DWORD PTR ?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A+8, 4
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 67   : 				++m_uUsedCapacity;

  00080	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A+32
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 13   : }

  00086	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00089	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00090	59		 pop	 ecx
  00091	5e		 pop	 esi
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c3		 ret	 0
$LN14@New:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00096	8d 4d f0	 lea	 ecx, DWORD PTR _pkNewData$3[ebp]
  00099	51		 push	 ecx
  0009a	50		 push	 eax
  0009b	b9 04 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A+4
  000a0	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCItemData@@@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@AAEPAPAVCItemData@@QAPAV2@ABQAV2@@Z ; std::vector<CItemData *,std::allocator<CItemData *> >::_Emplace_reallocate<CItemData * const &>
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 67   : 				++m_uUsedCapacity;

  000a5	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A+32
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 12   : 	return ms_kPool.Alloc();

  000ab	8b c6		 mov	 eax, esi

; 13   : }

  000ad	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b7	59		 pop	 ecx
  000b8	5e		 pop	 esi
  000b9	8b e5		 mov	 esp, ebp
  000bb	5d		 pop	 ebp
  000bc	c3		 ret	 0
$LN4@New:
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 71   : 			T* pkFreeData=m_kVct_pkFree.back();

  000bd	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1713 :         --_Mylast;

  000c0	83 c1 fc	 add	 ecx, -4			; fffffffcH
  000c3	89 0d 14 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A+20, ecx
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 13   : }

  000c9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000cc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d3	59		 pop	 ecx
  000d4	5e		 pop	 esi
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?New@CItemData@@SAPAV1@XZ$0:
  00000	68 58 02 00 00	 push	 600			; 00000258H
  00005	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
__ehhandler$?New@CItemData@@SAPAV1@XZ:
  00017	90		 npad	 1
  00018	90		 npad	 1
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?New@CItemData@@SAPAV1@XZ
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?New@CItemData@@SAPAV1@XZ ENDP				; CItemData::New
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ?DestroySystem@CItemData@@SAXXZ
_TEXT	SEGMENT
?DestroySystem@CItemData@@SAXXZ PROC			; CItemData::DestroySystem, COMDAT

; 22   : {

  00000	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00001	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A+4
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 22   : {

  00007	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00008	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A+8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  0000e	3b f7		 cmp	 esi, edi
  00010	74 29		 je	 SHORT $LN26@DestroySys
$LL20@DestroySys:
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 110  : 			delete pkData;

  00012	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00014	85 c9		 test	 ecx, ecx
  00016	74 06		 je	 SHORT $LN18@DestroySys
  00018	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001a	6a 01		 push	 1
  0001c	ff 10		 call	 DWORD PTR [eax]
$LN18@DestroySys:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001e	83 c6 04	 add	 esi, 4
  00021	3b f7		 cmp	 esi, edi
  00023	75 ed		 jne	 SHORT $LL20@DestroySys
  00025	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A+8
  0002b	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A+4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	3b f7		 cmp	 esi, edi
  00033	74 06		 je	 SHORT $LN26@DestroySys

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00035	89 35 08 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A+8, esi
$LN26@DestroySys:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0003b	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A+16
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	3b 05 14 00 00
	00		 cmp	 eax, DWORD PTR ?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A+20
  00048	74 05		 je	 SHORT $LN29@DestroySys

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  0004a	a3 14 00 00 00	 mov	 DWORD PTR ?ms_kPool@CItemData@@2V?$CDynamicPool@VCItemData@@@@A+20, eax
$LN29@DestroySys:
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 24   : }

  0004f	c3		 ret	 0
?DestroySystem@CItemData@@SAXXZ ENDP			; CItemData::DestroySystem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??1?$vector@USAttachingData@NRaceData@@V?$allocator@USAttachingData@NRaceData@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__Last$1$ = -4						; size = 4
??1?$vector@USAttachingData@NRaceData@@V?$allocator@USAttachingData@NRaceData@@@std@@@std@@QAE@XZ PROC ; std::vector<NRaceData::SAttachingData,std::allocator<NRaceData::SAttachingData> >::~vector<NRaceData::SAttachingData,std::allocator<NRaceData::SAttachingData> >, COMDAT
; _this$ = ecx

; 766  :     _CONSTEXPR20 ~vector() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  0000a	8b 1f		 mov	 ebx, DWORD PTR [edi]
  0000c	85 db		 test	 ebx, ebx
  0000e	0f 84 b6 00 00
	00		 je	 $LN4@vector

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);

  00014	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00017	89 45 fc	 mov	 DWORD PTR __Last$1$[ebp], eax
  0001a	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1086 :         for (; _First != _Last; ++_First) {

  0001b	3b d8		 cmp	 ebx, eax
  0001d	74 54		 je	 SHORT $LN8@vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);

  0001f	8d 73 20	 lea	 esi, DWORD PTR [ebx+32]
$LL9@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00022	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00024	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  00027	72 2f		 jb	 SHORT $LN73@vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00029	8b 46 ec	 mov	 eax, DWORD PTR [esi-20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0002c	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0002d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00033	72 16		 jb	 SHORT $LN41@vector

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00035	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00038	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0003b	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0003d	83 c0 fc	 add	 eax, -4			; fffffffcH
  00040	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00043	0f 87 87 00 00
	00		 ja	 $LN62@vector

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00049	8b c2		 mov	 eax, edx
$LN41@vector:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0004b	51		 push	 ecx
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00052	8b 45 fc	 mov	 eax, DWORD PTR __Last$1$[ebp]
  00055	83 c4 08	 add	 esp, 8
$LN73@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  00058	c7 46 fc 00 00
	00 00		 mov	 DWORD PTR [esi-4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1086 :         for (; _First != _Last; ++_First) {

  0005f	83 c3 30	 add	 ebx, 48			; 00000030H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  00062	c7 06 0f 00 00
	00		 mov	 DWORD PTR [esi], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00068	c6 46 ec 00	 mov	 BYTE PTR [esi-20], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1086 :         for (; _First != _Last; ++_First) {

  0006c	83 c6 30	 add	 esi, 48			; 00000030H
  0006f	3b d8		 cmp	 ebx, eax
  00071	75 af		 jne	 SHORT $LL9@vector
$LN8@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00073	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00076	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0007b	8b 37		 mov	 esi, DWORD PTR [edi]
  0007d	2b ce		 sub	 ecx, esi
  0007f	f7 e9		 imul	 ecx
  00081	c1 fa 03	 sar	 edx, 3
  00084	8b c2		 mov	 eax, edx
  00086	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00089	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008b	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  0008e	c1 e1 04	 shl	 ecx, 4

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00091	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00097	72 12		 jb	 SHORT $LN65@vector

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00099	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  0009c	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009f	2b f2		 sub	 esi, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a1	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  000a4	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a7	77 27		 ja	 SHORT $LN62@vector

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a9	8b f2		 mov	 esi, edx
$LN65@vector:

; 265  :         ::operator delete(_Ptr, _Bytes);

  000ab	51		 push	 ecx
  000ac	56		 push	 esi
  000ad	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000b2	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  000b5	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0

; 2050 :             _Mylast  = nullptr;

  000bb	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 2051 :             _Myend   = nullptr;

  000c2	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  000c9	5e		 pop	 esi
$LN4@vector:
  000ca	5f		 pop	 edi

; 772  :     }

  000cb	5b		 pop	 ebx
  000cc	8b e5		 mov	 esp, ebp
  000ce	5d		 pop	 ebp
  000cf	c3		 ret	 0
$LN62@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000d0	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN82@vector:
  000d5	cc		 int	 3
??1?$vector@USAttachingData@NRaceData@@V?$allocator@USAttachingData@NRaceData@@@std@@@std@@QAE@XZ ENDP ; std::vector<NRaceData::SAttachingData,std::allocator<NRaceData::SAttachingData> >::~vector<NRaceData::SAttachingData,std::allocator<NRaceData::SAttachingData> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCGraphicThing@@V?$allocator@PAVCGraphicThing@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCGraphicThing@@V?$allocator@PAVCGraphicThing@@@std@@@std@@CAXXZ PROC ; std::vector<CGraphicThing *,std::allocator<CGraphicThing *> >::_Xlength, COMDAT

; 2138 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCGraphicThing@@V?$allocator@PAVCGraphicThing@@@std@@@std@@CAXXZ ENDP ; std::vector<CGraphicThing *,std::allocator<CGraphicThing *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??1?$vector@PAVCGraphicThing@@V?$allocator@PAVCGraphicThing@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAVCGraphicThing@@V?$allocator@PAVCGraphicThing@@@std@@@std@@QAE@XZ PROC ; std::vector<CGraphicThing *,std::allocator<CGraphicThing *> >::~vector<CGraphicThing *,std::allocator<CGraphicThing *> >, COMDAT
; _this$ = ecx

; 766  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 40		 je	 SHORT $LN4@vector

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000c	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00011	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN20@vector

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00019	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001c	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 22		 ja	 SHORT $LN17@vector

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00029	8b c2		 mov	 eax, edx
$LN20@vector:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0002b	51		 push	 ecx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00038	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2051 :             _Myend   = nullptr;

  00042	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  00049	5e		 pop	 esi

; 772  :     }

  0004a	c3		 ret	 0
$LN17@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN28@vector:
  00050	cc		 int	 3
??1?$vector@PAVCGraphicThing@@V?$allocator@PAVCGraphicThing@@@std@@@std@@QAE@XZ ENDP ; std::vector<CGraphicThing *,std::allocator<CGraphicThing *> >::~vector<CGraphicThing *,std::allocator<CGraphicThing *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ?__SetIconImage@CItemData@@IAEXPBD@Z
_TEXT	SEGMENT
_c_szFileName$ = 8					; size = 4
?__SetIconImage@CItemData@@IAEXPBD@Z PROC		; CItemData::__SetIconImage, COMDAT
; _this$ = ecx

; 152  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 153  : 	if (!CResourceManager::Instance().IsFileExist(c_szFileName))

  00005	8b 7d 08	 mov	 edi, DWORD PTR _c_szFileName$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
  00010	57		 push	 edi
  00011	e8 00 00 00 00	 call	 ?IsFileExist@CResourceManager@@QAE_NPBD@Z ; CResourceManager::IsFileExist
  00016	84 c0		 test	 al, al
  00018	75 35		 jne	 SHORT $LN2@SetIconIma

; 154  : 	{
; 155  : 		TraceError("%s not found. CItemData::__SetIconImage",c_szFileName);

  0001a	57		 push	 edi
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@CPFNJMPO@?$CFs?5not?5found?4?5CItemData?3?3__SetI@
  00020	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00025	83 c4 08	 add	 esp, 8

; 156  : 		m_pIconImage = NULL;

  00028	c7 86 ac 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+172], 0

; 157  : #ifdef ENABLE_LOAD_ALTER_ITEMICON
; 158  : 		static const char* c_szAlterIconImage = "icon/item/27995.tga";
; 159  : 		if (CResourceManager::Instance().IsFileExist(c_szAlterIconImage))

  00032	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
  00038	ff 35 00 00 00
	00		 push	 DWORD PTR ?c_szAlterIconImage@?4??__SetIconImage@CItemData@@IAEXPBD@Z@4PBDB
  0003e	e8 00 00 00 00	 call	 ?IsFileExist@CResourceManager@@QAE_NPBD@Z ; CResourceManager::IsFileExist
  00043	84 c0		 test	 al, al
  00045	74 23		 je	 SHORT $LN5@SetIconIma

; 160  : 			m_pIconImage = (CGraphicSubImage *)CResourceManager::Instance().GetResourcePointer(c_szAlterIconImage);

  00047	ff 35 00 00 00
	00		 push	 DWORD PTR ?c_szAlterIconImage@?4??__SetIconImage@CItemData@@IAEXPBD@Z@4PBDB

; 161  : #endif
; 162  : 	}

  0004d	eb 0a		 jmp	 SHORT $LN10@SetIconIma
$LN2@SetIconIma:

; 163  : 	else if (m_pIconImage == NULL)

  0004f	83 be ac 00 00
	00 00		 cmp	 DWORD PTR [esi+172], 0
  00056	75 12		 jne	 SHORT $LN5@SetIconIma

; 164  : 		m_pIconImage = (CGraphicSubImage *)CResourceManager::Instance().GetResourcePointer(c_szFileName);

  00058	57		 push	 edi
$LN10@SetIconIma:

; 165  : }

  00059	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
  0005f	e8 00 00 00 00	 call	 ?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z ; CResourceManager::GetResourcePointer
  00064	89 86 ac 00 00
	00		 mov	 DWORD PTR [esi+172], eax
$LN5@SetIconIma:
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5d		 pop	 ebp
  0006d	c2 04 00	 ret	 4
?__SetIconImage@CItemData@@IAEXPBD@Z ENDP		; CItemData::__SetIconImage
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ?__LoadFiles@CItemData@@IAEXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
tv621 = -12						; size = 4
_i$1$ = -8						; size = 4
$T2 = -1						; size = 1
?__LoadFiles@CItemData@@IAEXXZ PROC			; CItemData::__LoadFiles, COMDAT
; _this$ = ecx

; 125  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4228 :         return _Mypair._Myval2._Mysize == 0;

  00009	83 7f 14 00	 cmp	 DWORD PTR [edi+20], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 127  : 	if (!m_strModelFileName.empty())

  0000d	74 1d		 je	 SHORT $LN5@LoadFiles
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  0000f	83 7f 18 10	 cmp	 DWORD PTR [edi+24], 16	; 00000010H

; 4107 :         return _Mypair._Myval2._Myptr();

  00013	8d 47 04	 lea	 eax, DWORD PTR [edi+4]

; 2236 :         if (_Large_string_engaged()) {

  00016	72 02		 jb	 SHORT $LN34@LoadFiles

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  00018	8b 00		 mov	 eax, DWORD PTR [eax]
$LN34@LoadFiles:
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 128  : 		m_pModelThing = (CGraphicThing *)CResourceManager::Instance().GetResourcePointer(m_strModelFileName.c_str());

  0001a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z ; CResourceManager::GetResourcePointer
  00026	89 87 a0 00 00
	00		 mov	 DWORD PTR [edi+160], eax
$LN5@LoadFiles:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4228 :         return _Mypair._Myval2._Mysize == 0;

  0002c	83 7f 2c 00	 cmp	 DWORD PTR [edi+44], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 130  : 	if (!m_strSubModelFileName.empty())

  00030	74 1d		 je	 SHORT $LN6@LoadFiles
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00032	83 7f 30 10	 cmp	 DWORD PTR [edi+48], 16	; 00000010H

; 4107 :         return _Mypair._Myval2._Myptr();

  00036	8d 47 1c	 lea	 eax, DWORD PTR [edi+28]

; 2236 :         if (_Large_string_engaged()) {

  00039	72 02		 jb	 SHORT $LN41@LoadFiles

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  0003b	8b 00		 mov	 eax, DWORD PTR [eax]
$LN41@LoadFiles:
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 131  : 		m_pSubModelThing = (CGraphicThing *)CResourceManager::Instance().GetResourcePointer(m_strSubModelFileName.c_str());

  0003d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z ; CResourceManager::GetResourcePointer
  00049	89 87 a4 00 00
	00		 mov	 DWORD PTR [edi+164], eax
$LN6@LoadFiles:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4228 :         return _Mypair._Myval2._Mysize == 0;

  0004f	83 7f 44 00	 cmp	 DWORD PTR [edi+68], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 133  : 	if (!m_strDropModelFileName.empty())

  00053	74 1d		 je	 SHORT $LN7@LoadFiles
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00055	83 7f 48 10	 cmp	 DWORD PTR [edi+72], 16	; 00000010H

; 4107 :         return _Mypair._Myval2._Myptr();

  00059	8d 47 34	 lea	 eax, DWORD PTR [edi+52]

; 2236 :         if (_Large_string_engaged()) {

  0005c	72 02		 jb	 SHORT $LN48@LoadFiles

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  0005e	8b 00		 mov	 eax, DWORD PTR [eax]
$LN48@LoadFiles:
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 134  : 		m_pDropModelThing = (CGraphicThing *)CResourceManager::Instance().GetResourcePointer(m_strDropModelFileName.c_str());

  00060	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 ?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z ; CResourceManager::GetResourcePointer
  0006c	89 87 a8 00 00
	00		 mov	 DWORD PTR [edi+168], eax
$LN7@LoadFiles:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1864 :         return _My_data._Myfirst == _My_data._Mylast;

  00072	8b 87 94 00 00
	00		 mov	 eax, DWORD PTR [edi+148]
  00078	3b 87 98 00 00
	00		 cmp	 eax, DWORD PTR [edi+152]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 137  : 	if (!m_strLODModelFileNameVector.empty())

  0007e	0f 84 02 01 00
	00		 je	 $LN3@LoadFiles
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00084	8b 87 b0 00 00
	00		 mov	 eax, DWORD PTR [edi+176]
  0008a	53		 push	 ebx

; 1581 :             }
; 1582 :             _ASAN_VECTOR_RELEASE_GUARD;
; 1583 :             _Orphan_range(_Oldlast, _Oldlast);
; 1584 :         }
; 1585 : 
; 1586 :         // if _Newsize == _Oldsize, do nothing; avoid invalidating iterators
; 1587 :     }
; 1588 : 
; 1589 : public:
; 1590 :     _CONSTEXPR20 void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {
; 1591 :         // trim or append value-initialized elements, provide strong guarantee
; 1592 :         _Resize(_Newsize, _Value_init_tag{});
; 1593 :     }
; 1594 : 
; 1595 :     _CONSTEXPR20 void resize(_CRT_GUARDOVERFLOW const size_type _Newsize, const _Ty& _Val) {
; 1596 :         // trim or append copies of _Val, provide strong guarantee
; 1597 :         _Resize(_Newsize, _Val);
; 1598 :     }
; 1599 : 
; 1600 : private:
; 1601 :     _CONSTEXPR20 void _Reallocate_exactly(const size_type _Newcapacity) {
; 1602 :         // set capacity to _Newcapacity (without geometric growth), provide strong guarantee
; 1603 :         auto& _Al         = _Getal();
; 1604 :         auto& _My_data    = _Mypair._Myval2;
; 1605 :         pointer& _Myfirst = _My_data._Myfirst;
; 1606 :         pointer& _Mylast  = _My_data._Mylast;
; 1607 : 
; 1608 :         const auto _Size = static_cast<size_type>(_Mylast - _Myfirst);
; 1609 : 
; 1610 :         const pointer _Newvec = _Al.allocate(_Newcapacity);
; 1611 : 
; 1612 :         _TRY_BEGIN
; 1613 :         if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 1614 :             _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);
; 1615 :         } else {
; 1616 :             _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);
; 1617 :         }
; 1618 :         _CATCH_ALL
; 1619 :         _Al.deallocate(_Newvec, _Newcapacity);
; 1620 :         _RERAISE;
; 1621 :         _CATCH_END
; 1622 : 
; 1623 :         _Change_array(_Newvec, _Size, _Newcapacity);
; 1624 :     }
; 1625 : 
; 1626 : #if _ITERATOR_DEBUG_LEVEL != 0 && defined(_ENABLE_STL_INTERNAL_CHECK)
; 1627 :     void _Check_all_orphaned_locked() const noexcept {
; 1628 :         _Lockit _Lock(_LOCK_DEBUG);
; 1629 :         auto& _My_data = _Mypair._Myval2;
; 1630 :         _STL_INTERNAL_CHECK(!_My_data._Myproxy->_Myfirstiter);
; 1631 :     }
; 1632 : 
; 1633 :     _CONSTEXPR20 void _Check_all_orphaned() const noexcept {
; 1634 : #if _HAS_CXX20
; 1635 :         if (_STD is_constant_evaluated()) {
; 1636 :             auto& _My_data = _Mypair._Myval2;
; 1637 :             _STL_INTERNAL_CHECK(!_My_data._Myproxy->_Myfirstiter);
; 1638 :         } else
; 1639 : #endif // _HAS_CXX20
; 1640 :         {
; 1641 :             _Check_all_orphaned_locked();
; 1642 :         }
; 1643 :     }
; 1644 : #endif // _ITERATOR_DEBUG_LEVEL != 0 && defined(_ENABLE_STL_INTERNAL_CHECK)
; 1645 : 
; 1646 :     _CONSTEXPR20 void _Clear_and_reserve_geometric(const size_type _Newsize) {
; 1647 :         auto& _Al         = _Getal();
; 1648 :         auto& _My_data    = _Mypair._Myval2;
; 1649 :         pointer& _Myfirst = _My_data._Myfirst;
; 1650 :         pointer& _Mylast  = _My_data._Mylast;
; 1651 :         pointer& _Myend   = _My_data._Myend;
; 1652 : 
; 1653 : #if _ITERATOR_DEBUG_LEVEL != 0 && defined(_ENABLE_STL_INTERNAL_CHECK)
; 1654 :         _STL_INTERNAL_CHECK(_Newsize != 0);
; 1655 :         _Check_all_orphaned();
; 1656 : #endif // _ITERATOR_DEBUG_LEVEL != 0 && defined(_ENABLE_STL_INTERNAL_CHECK)
; 1657 : 
; 1658 :         if (_Newsize > max_size()) {
; 1659 :             _Xlength();
; 1660 :         }
; 1661 : 
; 1662 :         const size_type _Newcapacity = _Calculate_growth(_Newsize);
; 1663 : 
; 1664 :         if (_Myfirst) { // destroy and deallocate old array
; 1665 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 1666 :             _ASAN_VECTOR_REMOVE;
; 1667 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));
; 1668 : 
; 1669 :             _Myfirst = nullptr;
; 1670 :             _Mylast  = nullptr;
; 1671 :             _Myend   = nullptr;
; 1672 :         }
; 1673 : 
; 1674 :         _Buy_raw(_Newcapacity);
; 1675 :     }
; 1676 : 
; 1677 : public:
; 1678 :     _CONSTEXPR20 void reserve(_CRT_GUARDOVERFLOW const size_type _Newcapacity) {
; 1679 :         // increase capacity to _Newcapacity (without geometric growth), provide strong guarantee
; 1680 :         if (_Newcapacity > capacity()) { // something to do (reserve() never shrinks)
; 1681 :             if (_Newcapacity > max_size()) {
; 1682 :                 _Xlength();
; 1683 :             }
; 1684 : 
; 1685 :             _Reallocate_exactly(_Newcapacity);
; 1686 :         }
; 1687 :     }
; 1688 : 
; 1689 :     _CONSTEXPR20 void shrink_to_fit() { // reduce capacity to size, provide strong guarantee
; 1690 :         auto& _My_data         = _Mypair._Myval2;
; 1691 :         const pointer _Oldlast = _My_data._Mylast;
; 1692 :         if (_Oldlast != _My_data._Myend) { // something to do
; 1693 :             const pointer _Oldfirst = _My_data._Myfirst;
; 1694 :             if (_Oldfirst == _Oldlast) {
; 1695 :                 _Tidy();
; 1696 :             } else {
; 1697 :                 _Reallocate_exactly(static_cast<size_type>(_Oldlast - _Oldfirst));
; 1698 :             }
; 1699 :         }
; 1700 :     }
; 1701 : 
; 1702 :     _CONSTEXPR20 void pop_back() noexcept /* strengthened */ {
; 1703 :         auto& _My_data   = _Mypair._Myval2;
; 1704 :         pointer& _Mylast = _My_data._Mylast;
; 1705 : 
; 1706 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1707 :         _STL_VERIFY(_My_data._Myfirst != _Mylast, "vector empty before pop");
; 1708 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1709 : 
; 1710 :         _Orphan_range(_Mylast - 1, _Mylast);
; 1711 :         _Alty_traits::destroy(_Getal(), _Unfancy(_Mylast - 1));
; 1712 :         _ASAN_VECTOR_MODIFY(-1);
; 1713 :         --_Mylast;
; 1714 :     }
; 1715 : 
; 1716 :     _CONSTEXPR20 iterator erase(const_iterator _Where) noexcept(
; 1717 :         is_nothrow_move_assignable_v<value_type>) /* strengthened */ {
; 1718 :         const pointer _Whereptr = _Where._Ptr;
; 1719 :         auto& _My_data          = _Mypair._Myval2;
; 1720 :         pointer& _Mylast        = _My_data._Mylast;
; 1721 : 
; 1722 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1723 :         _STL_VERIFY(
; 1724 :             _Where._Getcont() == _STD addressof(_My_data) && _Whereptr >= _My_data._Myfirst && _Mylast > _Whereptr,
; 1725 :             "vector erase iterator outside range");
; 1726 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1727 : 
; 1728 :         _Orphan_range(_Whereptr, _Mylast);
; 1729 :         _STD _Move_unchecked(_Whereptr + 1, _Mylast, _Whereptr);
; 1730 :         _Alty_traits::destroy(_Getal(), _Unfancy(_Mylast - 1));
; 1731 :         _ASAN_VECTOR_MODIFY(-1);
; 1732 :         --_Mylast;
; 1733 :         return iterator(_Whereptr, _STD addressof(_My_data));
; 1734 :     }
; 1735 : 
; 1736 :     _CONSTEXPR20 iterator erase(const_iterator _First, const_iterator _Last) noexcept(
; 1737 :         is_nothrow_move_assignable_v<value_type>) /* strengthened */ {
; 1738 :         const pointer _Firstptr = _First._Ptr;
; 1739 :         const pointer _Lastptr  = _Last._Ptr;
; 1740 :         auto& _My_data          = _Mypair._Myval2;
; 1741 :         pointer& _Mylast        = _My_data._Mylast;
; 1742 : 
; 1743 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1744 :         _STL_VERIFY(_First._Getcont() == _STD addressof(_My_data) && _Last._Getcont() == _STD addressof(_My_data)
; 1745 :                         && _Firstptr >= _My_data._Myfirst && _Lastptr >= _Firstptr && _Mylast >= _Lastptr,
; 1746 :             "vector erase iterator outside range");
; 1747 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1748 : 
; 1749 :         if (_Firstptr != _Lastptr) { // something to do, invalidate iterators
; 1750 :             _Orphan_range(_Firstptr, _Mylast);
; 1751 : 
; 1752 :             const pointer _Newlast = _STD _Move_unchecked(_Lastptr, _Mylast, _Firstptr);
; 1753 :             _Destroy_range(_Newlast, _Mylast, _Getal());
; 1754 :             _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newlast - _Mylast)); // negative when destroying elements
; 1755 :             _Mylast = _Newlast;
; 1756 :         }
; 1757 : 
; 1758 :         return iterator(_Firstptr, _STD addressof(_My_data));
; 1759 :     }
; 1760 : 
; 1761 :     _CONSTEXPR20 void clear() noexcept { // erase all
; 1762 :         auto& _My_data    = _Mypair._Myval2;

  0008b	8d 9f b0 00 00
	00		 lea	 ebx, DWORD PTR [edi+176]
  00091	56		 push	 esi

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00092	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  00095	89 75 f4	 mov	 DWORD PTR $T1[ebp], esi
  00098	3b c6		 cmp	 eax, esi
  0009a	74 08		 je	 SHORT $LN52@LoadFiles

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  0009c	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  0009f	8b f0		 mov	 esi, eax
  000a1	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
$LN52@LoadFiles:

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000a4	8b 8f 98 00 00
	00		 mov	 ecx, DWORD PTR [edi+152]
  000aa	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  000af	2b 8f 94 00 00
	00		 sub	 ecx, DWORD PTR [edi+148]
  000b5	f7 e9		 imul	 ecx

; 1557 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  000b7	8b 03		 mov	 eax, DWORD PTR [ebx]

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000b9	c1 fa 02	 sar	 edx, 2
  000bc	8b ca		 mov	 ecx, edx
  000be	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  000c1	03 ca		 add	 ecx, edx

; 1557 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  000c3	8b d6		 mov	 edx, esi
  000c5	2b d0		 sub	 edx, eax
  000c7	c1 fa 02	 sar	 edx, 2

; 1558 :         if (_Newsize < _Oldsize) { // trim

  000ca	3b ca		 cmp	 ecx, edx
  000cc	73 08		 jae	 SHORT $LN60@LoadFiles

; 1559 :             const pointer _Newlast = _Myfirst + _Newsize;

  000ce	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]

; 1560 :             _Orphan_range(_Newlast, _Mylast);
; 1561 :             _Destroy_range(_Newlast, _Mylast, _Al);
; 1562 :             _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1563 :             _Mylast = _Newlast;

  000d1	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 1564 :             return;

  000d4	eb 30		 jmp	 SHORT $LN61@LoadFiles
$LN60@LoadFiles:

; 1565 :         }
; 1566 : 
; 1567 :         if (_Newsize > _Oldsize) { // append

  000d6	76 2e		 jbe	 SHORT $LN61@LoadFiles

; 1568 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

  000d8	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  000db	2b 03		 sub	 eax, DWORD PTR [ebx]
  000dd	c1 f8 02	 sar	 eax, 2

; 1569 :             if (_Newsize > _Oldcapacity) { // reallocate

  000e0	3b c8		 cmp	 ecx, eax
  000e2	76 0e		 jbe	 SHORT $LN62@LoadFiles

; 1570 :                 _Resize_reallocate(_Newsize, _Val);

  000e4	8d 45 ff	 lea	 eax, DWORD PTR $T2[ebp]
  000e7	50		 push	 eax
  000e8	51		 push	 ecx
  000e9	8b cb		 mov	 ecx, ebx
  000eb	e8 00 00 00 00	 call	 ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAVCGraphicThing@@V?$allocator@PAVCGraphicThing@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<CGraphicThing *,std::allocator<CGraphicThing *> >::_Resize_reallocate<std::_Value_init_tag>

; 1571 :                 return;

  000f0	eb 14		 jmp	 SHORT $LN61@LoadFiles
$LN62@LoadFiles:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 2035 :             _Zero_range(_PFirst, _PFirst + _Count);

  000f2	2b ca		 sub	 ecx, edx
  000f4	8d 34 8e	 lea	 esi, DWORD PTR [esi+ecx*4]
  000f7	56		 push	 esi
  000f8	ff 75 f4	 push	 DWORD PTR $T1[ebp]
  000fb	e8 00 00 00 00	 call	 ??$_Zero_range@PAPAVCGraphicThing@@@std@@YAPAPAVCGraphicThing@@QAPAV1@0@Z ; std::_Zero_range<CGraphicThing * *>
  00100	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1580 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  00103	89 73 04	 mov	 DWORD PTR [ebx+4], esi
$LN61@LoadFiles:

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00106	8b 8f 98 00 00
	00		 mov	 ecx, DWORD PTR [edi+152]
  0010c	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00111	8b b7 94 00 00
	00		 mov	 esi, DWORD PTR [edi+148]
  00117	2b ce		 sub	 ecx, esi
  00119	f7 e9		 imul	 ecx
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 142  : 		for (DWORD i = 0; i < m_strLODModelFileNameVector.size(); ++i)

  0011b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$1$[ebp], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00122	c1 fa 02	 sar	 edx, 2
  00125	8b c2		 mov	 eax, edx
  00127	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0012a	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 142  : 		for (DWORD i = 0; i < m_strLODModelFileNameVector.size(); ++i)

  0012c	74 56		 je	 SHORT $LN94@LoadFiles
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1868 :         auto& _My_data = _Mypair._Myval2;

  0012e	33 c0		 xor	 eax, eax
  00130	33 d2		 xor	 edx, edx
  00132	89 45 f4	 mov	 DWORD PTR tv621[ebp], eax
$LL4@LoadFiles:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00135	83 7c 30 14 10	 cmp	 DWORD PTR [eax+esi+20], 16 ; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1889 :         return _My_data._Myfirst[_Pos];

  0013a	8d 0c 30	 lea	 ecx, DWORD PTR [eax+esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  0013d	72 02		 jb	 SHORT $LN17@LoadFiles

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  0013f	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN17@LoadFiles:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1889 :         return _My_data._Myfirst[_Pos];

  00141	8b 03		 mov	 eax, DWORD PTR [ebx]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 145  : 			m_pLODModelThingVector[i] = (CGraphicThing *)CResourceManager::Instance().GetResourcePointer(c_rstrLODModelFileName.c_str());

  00143	51		 push	 ecx
  00144	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1889 :         return _My_data._Myfirst[_Pos];

  0014a	8d 34 90	 lea	 esi, DWORD PTR [eax+edx*4]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 145  : 			m_pLODModelThingVector[i] = (CGraphicThing *)CResourceManager::Instance().GetResourcePointer(c_rstrLODModelFileName.c_str());

  0014d	e8 00 00 00 00	 call	 ?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z ; CResourceManager::GetResourcePointer
  00152	ff 45 f8	 inc	 DWORD PTR _i$1$[ebp]
  00155	83 45 f4 18	 add	 DWORD PTR tv621[ebp], 24 ; 00000018H
  00159	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0015b	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00160	8b 8f 98 00 00
	00		 mov	 ecx, DWORD PTR [edi+152]
  00166	8b b7 94 00 00
	00		 mov	 esi, DWORD PTR [edi+148]
  0016c	2b ce		 sub	 ecx, esi
  0016e	f7 e9		 imul	 ecx
  00170	c1 fa 02	 sar	 edx, 2
  00173	8b c2		 mov	 eax, edx
  00175	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00178	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 142  : 		for (DWORD i = 0; i < m_strLODModelFileNameVector.size(); ++i)

  0017a	8b 55 f8	 mov	 edx, DWORD PTR _i$1$[ebp]
  0017d	3b d0		 cmp	 edx, eax
  0017f	8b 45 f4	 mov	 eax, DWORD PTR tv621[ebp]
  00182	72 b1		 jb	 SHORT $LL4@LoadFiles
$LN94@LoadFiles:
  00184	5e		 pop	 esi
  00185	5b		 pop	 ebx
$LN3@LoadFiles:
  00186	5f		 pop	 edi

; 146  : 		}
; 147  : 	}
; 148  : }

  00187	8b e5		 mov	 esp, ebp
  00189	5d		 pop	 ebp
  0018a	c3		 ret	 0
?__LoadFiles@CItemData@@IAEXXZ ENDP			; CItemData::__LoadFiles
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetItemScale@CItemData@@QAE_NKAAM00000@Z
_TEXT	SEGMENT
_dwPos$ = 8						; size = 4
_fScaleX$ = 12						; size = 4
_fScaleY$ = 16						; size = 4
_fScaleZ$ = 20						; size = 4
_fPositionX$ = 24					; size = 4
_fPositionY$ = 28					; size = 4
_fPositionZ$ = 32					; size = 4
?GetItemScale@CItemData@@QAE_NKAAM00000@Z PROC		; CItemData::GetItemScale, COMDAT
; _this$ = ecx

; 202  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 203  : 	fScaleX = m_ScaleTable.tInfo[dwPos].fScaleX;

  00004	8b 75 08	 mov	 esi, DWORD PTR _dwPos$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  0000d	8b 94 c7 68 01
	00 00		 mov	 edx, DWORD PTR [edi+eax*8+360]
  00014	8b 45 0c	 mov	 eax, DWORD PTR _fScaleX$[ebp]
  00017	89 10		 mov	 DWORD PTR [eax], edx

; 204  : 	fScaleY = m_ScaleTable.tInfo[dwPos].fScaleY;

  00019	8d 14 76	 lea	 edx, DWORD PTR [esi+esi*2]
  0001c	8b 8c d7 6c 01
	00 00		 mov	 ecx, DWORD PTR [edi+edx*8+364]
  00023	8b 45 10	 mov	 eax, DWORD PTR _fScaleY$[ebp]
  00026	89 08		 mov	 DWORD PTR [eax], ecx

; 205  : 	fScaleZ = m_ScaleTable.tInfo[dwPos].fScaleZ;

  00028	8b 8c d7 70 01
	00 00		 mov	 ecx, DWORD PTR [edi+edx*8+368]
  0002f	8b 45 14	 mov	 eax, DWORD PTR _fScaleZ$[ebp]
  00032	89 08		 mov	 DWORD PTR [eax], ecx

; 206  : 	fPositionX = m_ScaleTable.tInfo[dwPos].fPositionX;

  00034	8b 45 18	 mov	 eax, DWORD PTR _fPositionX$[ebp]
  00037	8b 8c d7 74 01
	00 00		 mov	 ecx, DWORD PTR [edi+edx*8+372]
  0003e	89 08		 mov	 DWORD PTR [eax], ecx

; 207  : 	fPositionY = m_ScaleTable.tInfo[dwPos].fPositionY;

  00040	8b 45 1c	 mov	 eax, DWORD PTR _fPositionY$[ebp]
  00043	8b 8c d7 78 01
	00 00		 mov	 ecx, DWORD PTR [edi+edx*8+376]
  0004a	89 08		 mov	 DWORD PTR [eax], ecx

; 208  : 	fPositionZ = m_ScaleTable.tInfo[dwPos].fPositionZ;

  0004c	8b 45 20	 mov	 eax, DWORD PTR _fPositionZ$[ebp]
  0004f	8b 8c d7 7c 01
	00 00		 mov	 ecx, DWORD PTR [edi+edx*8+380]

; 209  : 	return true;

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	89 08		 mov	 DWORD PTR [eax], ecx
  0005a	b0 01		 mov	 al, 1

; 210  : }

  0005c	5d		 pop	 ebp
  0005d	c2 1c 00	 ret	 28			; 0000001cH
?GetItemScale@CItemData@@QAE_NKAAM00000@Z ENDP		; CItemData::GetItemScale
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ?SetItemScale@CItemData@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0000000@Z
_TEXT	SEGMENT
_this$GSCopy$1$ = -8					; size = 4
tv1427 = -4						; size = 4
_strJob$ = 8						; size = 24
_strSex$ = 32						; size = 24
_strScaleX$ = 56					; size = 24
_strScaleY$ = 80					; size = 24
_strScaleZ$ = 104					; size = 24
_strPositionX$ = 128					; size = 24
_strPositionY$ = 152					; size = 24
_strPositionZ$ = 176					; size = 24
?SetItemScale@CItemData@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0000000@Z PROC ; CItemData::SetItemScale, COMDAT
; _this$ = ecx

; 174  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 175  : 	DWORD dwPos=0;
; 176  : 	if (strJob == "JOB_WARRIOR")

  00008	8d 45 08	 lea	 eax, DWORD PTR _strJob$[ebp]
  0000b	89 4d f8	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  0000e	68 00 00 00 00	 push	 OFFSET ??_C@_0M@IHDHIBML@JOB_WARRIOR@
  00013	50		 push	 eax
  00014	33 db		 xor	 ebx, ebx
  00016	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  0001b	83 c4 08	 add	 esp, 8
  0001e	84 c0		 test	 al, al
  00020	0f 85 62 01 00
	00		 jne	 $LN8@SetItemSca
$LN2@SetItemSca:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00026	8b 45 1c	 mov	 eax, DWORD PTR _strJob$[ebp+20]

; 2235 :         const value_type* _Result = _Bx._Buf;

  00029	8d 55 08	 lea	 edx, DWORD PTR _strJob$[ebp]

; 548  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  0002c	8b 4d 18	 mov	 ecx, DWORD PTR _strJob$[ebp+16]

; 2244 :         return _BUF_SIZE <= _Myres;

  0002f	83 f8 10	 cmp	 eax, 16			; 00000010H
  00032	57		 push	 edi

; 2236 :         if (_Large_string_engaged()) {

  00033	0f 43 55 08	 cmovae	 edx, DWORD PTR _strJob$[ebp]

; 548  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  00037	83 f9 0c	 cmp	 ecx, 12			; 0000000cH
  0003a	75 67		 jne	 SHORT $LN4@SetItemSca

; 383  :         return _CSTD memcmp(_First1, _First2, _Count);

  0003c	8b f9		 mov	 edi, ecx
  0003e	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0N@IAFGBDIL@JOB_ASSASSIN@
  00043	83 ef 04	 sub	 edi, 4
  00046	72 11		 jb	 SHORT $LN334@SetItemSca
$LL395@SetItemSca:
  00048	8b 02		 mov	 eax, DWORD PTR [edx]
  0004a	3b 06		 cmp	 eax, DWORD PTR [esi]
  0004c	75 10		 jne	 SHORT $LN333@SetItemSca
  0004e	83 c2 04	 add	 edx, 4
  00051	83 c6 04	 add	 esi, 4
  00054	83 ef 04	 sub	 edi, 4
  00057	73 ef		 jae	 SHORT $LL395@SetItemSca
$LN334@SetItemSca:
  00059	83 ff fc	 cmp	 edi, -4			; fffffffcH
  0005c	74 34		 je	 SHORT $LN332@SetItemSca
$LN333@SetItemSca:
  0005e	8a 02		 mov	 al, BYTE PTR [edx]
  00060	3a 06		 cmp	 al, BYTE PTR [esi]
  00062	75 27		 jne	 SHORT $LN336@SetItemSca
  00064	83 ff fd	 cmp	 edi, -3			; fffffffdH
  00067	74 29		 je	 SHORT $LN332@SetItemSca
  00069	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  0006c	3a 46 01	 cmp	 al, BYTE PTR [esi+1]
  0006f	75 1a		 jne	 SHORT $LN336@SetItemSca
  00071	83 ff fe	 cmp	 edi, -2			; fffffffeH
  00074	74 1c		 je	 SHORT $LN332@SetItemSca
  00076	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  00079	3a 46 02	 cmp	 al, BYTE PTR [esi+2]
  0007c	75 0d		 jne	 SHORT $LN336@SetItemSca
  0007e	83 ff ff	 cmp	 edi, -1
  00081	74 0f		 je	 SHORT $LN332@SetItemSca
  00083	8a 42 03	 mov	 al, BYTE PTR [edx+3]
  00086	3a 46 03	 cmp	 al, BYTE PTR [esi+3]
  00089	74 07		 je	 SHORT $LN332@SetItemSca
$LN336@SetItemSca:
  0008b	1b c0		 sbb	 eax, eax
  0008d	83 c8 01	 or	 eax, 1
  00090	eb 02		 jmp	 SHORT $LN337@SetItemSca
$LN332@SetItemSca:
  00092	33 c0		 xor	 eax, eax
$LN337@SetItemSca:

; 548  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  00094	85 c0		 test	 eax, eax
  00096	75 08		 jne	 SHORT $LN351@SetItemSca
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 179  : 		dwPos = NRaceData::JOB_ASSASSIN;

  00098	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]
  0009b	e9 e7 00 00 00	 jmp	 $LN398@SetItemSca
$LN351@SetItemSca:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 548  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  000a0	8b 45 1c	 mov	 eax, DWORD PTR _strJob$[ebp+20]
$LN4@SetItemSca:

; 2244 :         return _BUF_SIZE <= _Myres;

  000a3	83 f8 10	 cmp	 eax, 16			; 00000010H

; 2235 :         const value_type* _Result = _Bx._Buf;

  000a6	8d 55 08	 lea	 edx, DWORD PTR _strJob$[ebp]

; 2236 :         if (_Large_string_engaged()) {

  000a9	0f 43 55 08	 cmovae	 edx, DWORD PTR _strJob$[ebp]

; 548  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  000ad	83 f9 08	 cmp	 ecx, 8
  000b0	75 66		 jne	 SHORT $LN6@SetItemSca

; 383  :         return _CSTD memcmp(_First1, _First2, _Count);

  000b2	8b f9		 mov	 edi, ecx
  000b4	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_08IJIBKCOK@JOB_SURA@
  000b9	83 ef 04	 sub	 edi, 4
  000bc	72 13		 jb	 SHORT $LN340@SetItemSca
  000be	66 90		 npad	 2
$LL396@SetItemSca:
  000c0	8b 02		 mov	 eax, DWORD PTR [edx]
  000c2	3b 06		 cmp	 eax, DWORD PTR [esi]
  000c4	75 10		 jne	 SHORT $LN339@SetItemSca
  000c6	83 c2 04	 add	 edx, 4
  000c9	83 c6 04	 add	 esi, 4
  000cc	83 ef 04	 sub	 edi, 4
  000cf	73 ef		 jae	 SHORT $LL396@SetItemSca
$LN340@SetItemSca:
  000d1	83 ff fc	 cmp	 edi, -4			; fffffffcH
  000d4	74 34		 je	 SHORT $LN338@SetItemSca
$LN339@SetItemSca:
  000d6	8a 02		 mov	 al, BYTE PTR [edx]
  000d8	3a 06		 cmp	 al, BYTE PTR [esi]
  000da	75 27		 jne	 SHORT $LN342@SetItemSca
  000dc	83 ff fd	 cmp	 edi, -3			; fffffffdH
  000df	74 29		 je	 SHORT $LN338@SetItemSca
  000e1	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  000e4	3a 46 01	 cmp	 al, BYTE PTR [esi+1]
  000e7	75 1a		 jne	 SHORT $LN342@SetItemSca
  000e9	83 ff fe	 cmp	 edi, -2			; fffffffeH
  000ec	74 1c		 je	 SHORT $LN338@SetItemSca
  000ee	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  000f1	3a 46 02	 cmp	 al, BYTE PTR [esi+2]
  000f4	75 0d		 jne	 SHORT $LN342@SetItemSca
  000f6	83 ff ff	 cmp	 edi, -1
  000f9	74 0f		 je	 SHORT $LN338@SetItemSca
  000fb	8a 42 03	 mov	 al, BYTE PTR [edx+3]
  000fe	3a 46 03	 cmp	 al, BYTE PTR [esi+3]
  00101	74 07		 je	 SHORT $LN338@SetItemSca
$LN342@SetItemSca:
  00103	1b c0		 sbb	 eax, eax
  00105	83 c8 01	 or	 eax, 1
  00108	eb 02		 jmp	 SHORT $LN343@SetItemSca
$LN338@SetItemSca:
  0010a	33 c0		 xor	 eax, eax
$LN343@SetItemSca:

; 548  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  0010c	85 c0		 test	 eax, eax
  0010e	75 05		 jne	 SHORT $LN350@SetItemSca
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 181  : 		dwPos = NRaceData::JOB_SURA;

  00110	8d 58 02	 lea	 ebx, DWORD PTR [eax+2]
  00113	eb 72		 jmp	 SHORT $LN398@SetItemSca
$LN350@SetItemSca:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 548  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  00115	8b 45 1c	 mov	 eax, DWORD PTR _strJob$[ebp+20]
$LN6@SetItemSca:

; 2244 :         return _BUF_SIZE <= _Myres;

  00118	83 f8 10	 cmp	 eax, 16			; 00000010H

; 2235 :         const value_type* _Result = _Bx._Buf;

  0011b	8d 55 08	 lea	 edx, DWORD PTR _strJob$[ebp]

; 2236 :         if (_Large_string_engaged()) {

  0011e	0f 43 55 08	 cmovae	 edx, DWORD PTR _strJob$[ebp]

; 548  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  00122	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  00125	75 60		 jne	 SHORT $LN398@SetItemSca

; 383  :         return _CSTD memcmp(_First1, _First2, _Count);

  00127	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0L@FBDFJGPA@JOB_SHAMAN@
  0012c	83 e9 04	 sub	 ecx, 4
  0012f	72 11		 jb	 SHORT $LN346@SetItemSca
$LL397@SetItemSca:
  00131	8b 02		 mov	 eax, DWORD PTR [edx]
  00133	3b 06		 cmp	 eax, DWORD PTR [esi]
  00135	75 10		 jne	 SHORT $LN345@SetItemSca
  00137	83 c2 04	 add	 edx, 4
  0013a	83 c6 04	 add	 esi, 4
  0013d	83 e9 04	 sub	 ecx, 4
  00140	73 ef		 jae	 SHORT $LL397@SetItemSca
$LN346@SetItemSca:
  00142	83 f9 fc	 cmp	 ecx, -4			; fffffffcH
  00145	74 34		 je	 SHORT $LN344@SetItemSca
$LN345@SetItemSca:
  00147	8a 02		 mov	 al, BYTE PTR [edx]
  00149	3a 06		 cmp	 al, BYTE PTR [esi]
  0014b	75 27		 jne	 SHORT $LN348@SetItemSca
  0014d	83 f9 fd	 cmp	 ecx, -3			; fffffffdH
  00150	74 29		 je	 SHORT $LN344@SetItemSca
  00152	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  00155	3a 46 01	 cmp	 al, BYTE PTR [esi+1]
  00158	75 1a		 jne	 SHORT $LN348@SetItemSca
  0015a	83 f9 fe	 cmp	 ecx, -2			; fffffffeH
  0015d	74 1c		 je	 SHORT $LN344@SetItemSca
  0015f	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  00162	3a 46 02	 cmp	 al, BYTE PTR [esi+2]
  00165	75 0d		 jne	 SHORT $LN348@SetItemSca
  00167	83 f9 ff	 cmp	 ecx, -1
  0016a	74 0f		 je	 SHORT $LN344@SetItemSca
  0016c	8a 42 03	 mov	 al, BYTE PTR [edx+3]
  0016f	3a 46 03	 cmp	 al, BYTE PTR [esi+3]
  00172	74 07		 je	 SHORT $LN344@SetItemSca
$LN348@SetItemSca:
  00174	1b c0		 sbb	 eax, eax
  00176	83 c8 01	 or	 eax, 1
  00179	eb 02		 jmp	 SHORT $LN349@SetItemSca
$LN344@SetItemSca:
  0017b	33 c0		 xor	 eax, eax
$LN349@SetItemSca:

; 548  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  0017d	85 c0		 test	 eax, eax
  0017f	b9 03 00 00 00	 mov	 ecx, 3
  00184	0f 44 d9	 cmove	 ebx, ecx
$LN398@SetItemSca:
  00187	5f		 pop	 edi
$LN8@SetItemSca:
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 190  : 	if (strSex == "F")

  00188	8d 45 20	 lea	 eax, DWORD PTR _strSex$[ebp]
  0018b	68 00 00 00 00	 push	 OFFSET ??_C@_01BIAFAFID@F@
  00190	50		 push	 eax
  00191	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4107 :         return _Mypair._Myval2._Myptr();

  00196	84 c0		 test	 al, al
  00198	b9 01 00 00 00	 mov	 ecx, 1
  0019d	be 06 00 00 00	 mov	 esi, 6

; 2235 :         const value_type* _Result = _Bx._Buf;

  001a2	8d 45 38	 lea	 eax, DWORD PTR _strScaleX$[ebp]

; 4107 :         return _Mypair._Myval2._Myptr();

  001a5	0f 44 f1	 cmove	 esi, ecx
  001a8	03 f3		 add	 esi, ebx

; 2244 :         return _BUF_SIZE <= _Myres;

  001aa	83 7d 4c 10	 cmp	 DWORD PTR _strScaleX$[ebp+20], 16 ; 00000010H

; 2236 :         if (_Large_string_engaged()) {

  001ae	0f 43 45 38	 cmovae	 eax, DWORD PTR _strScaleX$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 193  : 	m_ScaleTable.tInfo[dwPos].fScaleX = float(atof(strScaleX.c_str()) / 100.0f);

  001b2	50		 push	 eax
  001b3	e8 00 00 00 00	 call	 _atof
  001b8	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  001be	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  001c1	8b 5d f8	 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]

; 194  : 	m_ScaleTable.tInfo[dwPos].fScaleY = float(atof(strScaleY.c_str()) / 100.0f);

  001c4	8d 34 76	 lea	 esi, DWORD PTR [esi+esi*2]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  001c7	83 7d 64 10	 cmp	 DWORD PTR _strScaleY$[ebp+20], 16 ; 00000010H
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 193  : 	m_ScaleTable.tInfo[dwPos].fScaleX = float(atof(strScaleX.c_str()) / 100.0f);

  001cb	d9 5d fc	 fstp	 DWORD PTR tv1427[ebp]
  001ce	d9 45 fc	 fld	 DWORD PTR tv1427[ebp]
  001d1	d9 9c c3 68 01
	00 00		 fstp	 DWORD PTR [ebx+eax*8+360]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2235 :         const value_type* _Result = _Bx._Buf;

  001d8	8d 45 50	 lea	 eax, DWORD PTR _strScaleY$[ebp]

; 2236 :         if (_Large_string_engaged()) {

  001db	0f 43 45 50	 cmovae	 eax, DWORD PTR _strScaleY$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 194  : 	m_ScaleTable.tInfo[dwPos].fScaleY = float(atof(strScaleY.c_str()) / 100.0f);

  001df	50		 push	 eax
  001e0	e8 00 00 00 00	 call	 _atof
  001e5	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2235 :         const value_type* _Result = _Bx._Buf;

  001eb	8d 45 68	 lea	 eax, DWORD PTR _strScaleZ$[ebp]

; 2244 :         return _BUF_SIZE <= _Myres;

  001ee	83 7d 7c 10	 cmp	 DWORD PTR _strScaleZ$[ebp+20], 16 ; 00000010H

; 2236 :         if (_Large_string_engaged()) {

  001f2	0f 43 45 68	 cmovae	 eax, DWORD PTR _strScaleZ$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 195  : 	m_ScaleTable.tInfo[dwPos].fScaleZ = float(atof(strScaleZ.c_str()) / 100.0f);

  001f6	50		 push	 eax
  001f7	d9 9c f3 6c 01
	00 00		 fstp	 DWORD PTR [ebx+esi*8+364]
  001fe	e8 00 00 00 00	 call	 _atof
  00203	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2235 :         const value_type* _Result = _Bx._Buf;

  00209	8d 85 80 00 00
	00		 lea	 eax, DWORD PTR _strPositionX$[ebp]

; 2244 :         return _BUF_SIZE <= _Myres;

  0020f	83 bd 94 00 00
	00 10		 cmp	 DWORD PTR _strPositionX$[ebp+20], 16 ; 00000010H

; 2236 :         if (_Large_string_engaged()) {

  00216	0f 43 85 80 00
	00 00		 cmovae	 eax, DWORD PTR _strPositionX$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 196  : 	m_ScaleTable.tInfo[dwPos].fPositionX = float(atof(strPositionX.c_str()) * 100.0f);

  0021d	50		 push	 eax
  0021e	d9 9c f3 70 01
	00 00		 fstp	 DWORD PTR [ebx+esi*8+368]
  00225	e8 00 00 00 00	 call	 _atof
  0022a	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4059000000000000
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2235 :         const value_type* _Result = _Bx._Buf;

  00230	8d 85 98 00 00
	00		 lea	 eax, DWORD PTR _strPositionY$[ebp]

; 2244 :         return _BUF_SIZE <= _Myres;

  00236	83 bd ac 00 00
	00 10		 cmp	 DWORD PTR _strPositionY$[ebp+20], 16 ; 00000010H

; 2236 :         if (_Large_string_engaged()) {

  0023d	0f 43 85 98 00
	00 00		 cmovae	 eax, DWORD PTR _strPositionY$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 197  : 	m_ScaleTable.tInfo[dwPos].fPositionY = float(atof(strPositionY.c_str()) * 100.0f);

  00244	50		 push	 eax
  00245	d9 9c f3 74 01
	00 00		 fstp	 DWORD PTR [ebx+esi*8+372]
  0024c	e8 00 00 00 00	 call	 _atof
  00251	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4059000000000000
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2235 :         const value_type* _Result = _Bx._Buf;

  00257	8d 85 b0 00 00
	00		 lea	 eax, DWORD PTR _strPositionZ$[ebp]

; 2244 :         return _BUF_SIZE <= _Myres;

  0025d	83 bd c4 00 00
	00 10		 cmp	 DWORD PTR _strPositionZ$[ebp+20], 16 ; 00000010H

; 2236 :         if (_Large_string_engaged()) {

  00264	0f 43 85 b0 00
	00 00		 cmovae	 eax, DWORD PTR _strPositionZ$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 198  : 	m_ScaleTable.tInfo[dwPos].fPositionZ = float(atof(strPositionZ.c_str()) * 100.0f);

  0026b	50		 push	 eax
  0026c	d9 9c f3 78 01
	00 00		 fstp	 DWORD PTR [ebx+esi*8+376]
  00273	e8 00 00 00 00	 call	 _atof
  00278	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4059000000000000
  0027e	83 c4 20	 add	 esp, 32			; 00000020H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00281	8b 4d 1c	 mov	 ecx, DWORD PTR _strJob$[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 198  : 	m_ScaleTable.tInfo[dwPos].fPositionZ = float(atof(strPositionZ.c_str()) * 100.0f);

  00284	d9 9c f3 7c 01
	00 00		 fstp	 DWORD PTR [ebx+esi*8+380]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  0028b	5e		 pop	 esi
  0028c	5b		 pop	 ebx
  0028d	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  00290	72 2c		 jb	 SHORT $LN73@SetItemSca
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00292	8b 55 08	 mov	 edx, DWORD PTR _strJob$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00295	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00296	8b c2		 mov	 eax, edx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00298	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0029e	72 14		 jb	 SHORT $LN83@SetItemSca

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  002a0	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  002a3	83 c1 23	 add	 ecx, 35			; 00000023H
  002a6	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  002a8	83 c0 fc	 add	 eax, -4			; fffffffcH
  002ab	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  002ae	0f 87 16 02 00
	00		 ja	 $LN270@SetItemSca
$LN83@SetItemSca:

; 265  :         ::operator delete(_Ptr, _Bytes);

  002b4	51		 push	 ecx
  002b5	52		 push	 edx
  002b6	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  002bb	83 c4 08	 add	 esp, 8
$LN73@SetItemSca:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  002be	8b 4d 34	 mov	 ecx, DWORD PTR _strSex$[ebp+20]

; 4841 :         _My_data._Mysize = 0;

  002c1	c7 45 18 00 00
	00 00		 mov	 DWORD PTR _strJob$[ebp+16], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  002c8	c7 45 1c 0f 00
	00 00		 mov	 DWORD PTR _strJob$[ebp+20], 15 ; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  002cf	c6 45 08 00	 mov	 BYTE PTR _strJob$[ebp], 0

; 2244 :         return _BUF_SIZE <= _Myres;

  002d3	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  002d6	72 2c		 jb	 SHORT $LN101@SetItemSca
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002d8	8b 55 20	 mov	 edx, DWORD PTR _strSex$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  002db	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002dc	8b c2		 mov	 eax, edx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  002de	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  002e4	72 14		 jb	 SHORT $LN111@SetItemSca

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  002e6	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  002e9	83 c1 23	 add	 ecx, 35			; 00000023H
  002ec	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  002ee	83 c0 fc	 add	 eax, -4			; fffffffcH
  002f1	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  002f4	0f 87 d0 01 00
	00		 ja	 $LN270@SetItemSca
$LN111@SetItemSca:

; 265  :         ::operator delete(_Ptr, _Bytes);

  002fa	51		 push	 ecx
  002fb	52		 push	 edx
  002fc	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00301	83 c4 08	 add	 esp, 8
$LN101@SetItemSca:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00304	8b 4d 4c	 mov	 ecx, DWORD PTR _strScaleX$[ebp+20]

; 4841 :         _My_data._Mysize = 0;

  00307	c7 45 30 00 00
	00 00		 mov	 DWORD PTR _strSex$[ebp+16], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  0030e	c7 45 34 0f 00
	00 00		 mov	 DWORD PTR _strSex$[ebp+20], 15 ; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00315	c6 45 20 00	 mov	 BYTE PTR _strSex$[ebp], 0

; 2244 :         return _BUF_SIZE <= _Myres;

  00319	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  0031c	72 2c		 jb	 SHORT $LN128@SetItemSca
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0031e	8b 55 38	 mov	 edx, DWORD PTR _strScaleX$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00321	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00322	8b c2		 mov	 eax, edx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00324	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0032a	72 14		 jb	 SHORT $LN138@SetItemSca

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0032c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0032f	83 c1 23	 add	 ecx, 35			; 00000023H
  00332	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00334	83 c0 fc	 add	 eax, -4			; fffffffcH
  00337	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0033a	0f 87 8a 01 00
	00		 ja	 $LN270@SetItemSca
$LN138@SetItemSca:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00340	51		 push	 ecx
  00341	52		 push	 edx
  00342	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00347	83 c4 08	 add	 esp, 8
$LN128@SetItemSca:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  0034a	8b 4d 64	 mov	 ecx, DWORD PTR _strScaleY$[ebp+20]

; 4841 :         _My_data._Mysize = 0;

  0034d	c7 45 48 00 00
	00 00		 mov	 DWORD PTR _strScaleX$[ebp+16], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  00354	c7 45 4c 0f 00
	00 00		 mov	 DWORD PTR _strScaleX$[ebp+20], 15 ; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0035b	c6 45 38 00	 mov	 BYTE PTR _strScaleX$[ebp], 0

; 2244 :         return _BUF_SIZE <= _Myres;

  0035f	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  00362	72 2c		 jb	 SHORT $LN155@SetItemSca
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00364	8b 55 50	 mov	 edx, DWORD PTR _strScaleY$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00367	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00368	8b c2		 mov	 eax, edx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0036a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00370	72 14		 jb	 SHORT $LN165@SetItemSca

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00372	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00375	83 c1 23	 add	 ecx, 35			; 00000023H
  00378	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0037a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0037d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00380	0f 87 44 01 00
	00		 ja	 $LN270@SetItemSca
$LN165@SetItemSca:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00386	51		 push	 ecx
  00387	52		 push	 edx
  00388	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0038d	83 c4 08	 add	 esp, 8
$LN155@SetItemSca:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00390	8b 4d 7c	 mov	 ecx, DWORD PTR _strScaleZ$[ebp+20]

; 4841 :         _My_data._Mysize = 0;

  00393	c7 45 60 00 00
	00 00		 mov	 DWORD PTR _strScaleY$[ebp+16], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  0039a	c7 45 64 0f 00
	00 00		 mov	 DWORD PTR _strScaleY$[ebp+20], 15 ; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  003a1	c6 45 50 00	 mov	 BYTE PTR _strScaleY$[ebp], 0

; 2244 :         return _BUF_SIZE <= _Myres;

  003a5	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  003a8	72 2c		 jb	 SHORT $LN182@SetItemSca
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  003aa	8b 55 68	 mov	 edx, DWORD PTR _strScaleZ$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  003ad	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  003ae	8b c2		 mov	 eax, edx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  003b0	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  003b6	72 14		 jb	 SHORT $LN192@SetItemSca

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  003b8	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  003bb	83 c1 23	 add	 ecx, 35			; 00000023H
  003be	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  003c0	83 c0 fc	 add	 eax, -4			; fffffffcH
  003c3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  003c6	0f 87 fe 00 00
	00		 ja	 $LN270@SetItemSca
$LN192@SetItemSca:

; 265  :         ::operator delete(_Ptr, _Bytes);

  003cc	51		 push	 ecx
  003cd	52		 push	 edx
  003ce	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  003d3	83 c4 08	 add	 esp, 8
$LN182@SetItemSca:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  003d6	8b 8d 94 00 00
	00		 mov	 ecx, DWORD PTR _strPositionX$[ebp+20]

; 4841 :         _My_data._Mysize = 0;

  003dc	c7 45 78 00 00
	00 00		 mov	 DWORD PTR _strScaleZ$[ebp+16], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  003e3	c7 45 7c 0f 00
	00 00		 mov	 DWORD PTR _strScaleZ$[ebp+20], 15 ; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  003ea	c6 45 68 00	 mov	 BYTE PTR _strScaleZ$[ebp], 0

; 2244 :         return _BUF_SIZE <= _Myres;

  003ee	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  003f1	72 2f		 jb	 SHORT $LN209@SetItemSca
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  003f3	8b 95 80 00 00
	00		 mov	 edx, DWORD PTR _strPositionX$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  003f9	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  003fa	8b c2		 mov	 eax, edx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  003fc	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00402	72 14		 jb	 SHORT $LN219@SetItemSca

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00404	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00407	83 c1 23	 add	 ecx, 35			; 00000023H
  0040a	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0040c	83 c0 fc	 add	 eax, -4			; fffffffcH
  0040f	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00412	0f 87 b2 00 00
	00		 ja	 $LN270@SetItemSca
$LN219@SetItemSca:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00418	51		 push	 ecx
  00419	52		 push	 edx
  0041a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0041f	83 c4 08	 add	 esp, 8
$LN209@SetItemSca:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00422	8b 8d ac 00 00
	00		 mov	 ecx, DWORD PTR _strPositionY$[ebp+20]

; 4841 :         _My_data._Mysize = 0;

  00428	c7 85 90 00 00
	00 00 00 00 00	 mov	 DWORD PTR _strPositionX$[ebp+16], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  00432	c7 85 94 00 00
	00 0f 00 00 00	 mov	 DWORD PTR _strPositionX$[ebp+20], 15 ; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0043c	c6 85 80 00 00
	00 00		 mov	 BYTE PTR _strPositionX$[ebp], 0

; 2244 :         return _BUF_SIZE <= _Myres;

  00443	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  00446	72 2b		 jb	 SHORT $LN236@SetItemSca
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00448	8b 95 98 00 00
	00		 mov	 edx, DWORD PTR _strPositionY$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0044e	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0044f	8b c2		 mov	 eax, edx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00451	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00457	72 10		 jb	 SHORT $LN246@SetItemSca

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00459	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0045c	83 c1 23	 add	 ecx, 35			; 00000023H
  0045f	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00461	83 c0 fc	 add	 eax, -4			; fffffffcH
  00464	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00467	77 61		 ja	 SHORT $LN270@SetItemSca
$LN246@SetItemSca:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00469	51		 push	 ecx
  0046a	52		 push	 edx
  0046b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00470	83 c4 08	 add	 esp, 8
$LN236@SetItemSca:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00473	8b 8d c4 00 00
	00		 mov	 ecx, DWORD PTR _strPositionZ$[ebp+20]

; 4841 :         _My_data._Mysize = 0;

  00479	c7 85 a8 00 00
	00 00 00 00 00	 mov	 DWORD PTR _strPositionY$[ebp+16], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  00483	c7 85 ac 00 00
	00 0f 00 00 00	 mov	 DWORD PTR _strPositionY$[ebp+20], 15 ; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0048d	c6 85 98 00 00
	00 00		 mov	 BYTE PTR _strPositionY$[ebp], 0

; 2244 :         return _BUF_SIZE <= _Myres;

  00494	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  00497	72 2b		 jb	 SHORT $LN263@SetItemSca
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00499	8b 95 b0 00 00
	00		 mov	 edx, DWORD PTR _strPositionZ$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0049f	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  004a0	8b c2		 mov	 eax, edx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  004a2	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  004a8	72 10		 jb	 SHORT $LN273@SetItemSca

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  004aa	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  004ad	83 c1 23	 add	 ecx, 35			; 00000023H
  004b0	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  004b2	83 c0 fc	 add	 eax, -4			; fffffffcH
  004b5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  004b8	77 10		 ja	 SHORT $LN270@SetItemSca
$LN273@SetItemSca:

; 265  :         ::operator delete(_Ptr, _Bytes);

  004ba	51		 push	 ecx
  004bb	52		 push	 edx
  004bc	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  004c1	83 c4 08	 add	 esp, 8
$LN263@SetItemSca:
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 199  : }

  004c4	8b e5		 mov	 esp, ebp
  004c6	5d		 pop	 ebp
  004c7	c2 c0 00	 ret	 192			; 000000c0H
$LN270@SetItemSca:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  004ca	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN399@SetItemSca:
  004cf	cc		 int	 3
?SetItemScale@CItemData@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0000000@Z ENDP ; CItemData::SetItemScale
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ?SetItemTableData@CItemData@@QAEXPAUSItemTable_r156@1@@Z
_TEXT	SEGMENT
_pItemTable$ = 8					; size = 4
?SetItemTableData@CItemData@@QAEXPAUSItemTable_r156@1@@Z PROC ; CItemData::SetItemTableData, COMDAT
; _this$ = ecx

; 168  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 169  : 	memcpy(&m_ItemTable, pItemTable, sizeof(TItemTable));

  00004	8b 75 08	 mov	 esi, DWORD PTR _pItemTable$[ebp]
  00007	57		 push	 edi
  00008	8d b9 cc 00 00
	00		 lea	 edi, DWORD PTR [ecx+204]
  0000e	b9 27 00 00 00	 mov	 ecx, 39			; 00000027H
  00013	f3 a5		 rep movsd
  00015	5f		 pop	 edi
  00016	5e		 pop	 esi

; 170  : }

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?SetItemTableData@CItemData@@QAEXPAUSItemTable_r156@1@@Z ENDP ; CItemData::SetItemTableData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ?SetDefaultItemData@CItemData@@QAEXPBD0@Z
_TEXT	SEGMENT
_c_szIconFileName$ = 8					; size = 4
tv170 = 12						; size = 4
_c_szModelFileName$ = 12				; size = 4
?SetDefaultItemData@CItemData@@QAEXPBD0@Z PROC		; CItemData::SetDefaultItemData, COMDAT
; _this$ = ecx

; 103  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 104  : 	if(c_szModelFileName)

  00005	8b 75 0c	 mov	 esi, DWORD PTR _c_szModelFileName$[ebp]
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx
  0000b	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  0000e	85 f6		 test	 esi, esi
  00010	74 31		 je	 SHORT $LN2@SetDefault
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00012	8b d6		 mov	 edx, esi
  00014	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00017	89 45 0c	 mov	 DWORD PTR tv170[ebp], eax
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL53@SetDefault:
  00020	8a 02		 mov	 al, BYTE PTR [edx]
  00022	42		 inc	 edx
  00023	84 c0		 test	 al, al
  00025	75 f9		 jne	 SHORT $LL53@SetDefault
  00027	2b 55 0c	 sub	 edx, DWORD PTR tv170[ebp]

; 3395 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0002a	52		 push	 edx
  0002b	56		 push	 esi
  0002c	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00031	8b c6		 mov	 eax, esi
  00033	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
$LL54@SetDefault:
  00036	8a 10		 mov	 dl, BYTE PTR [eax]
  00038	40		 inc	 eax
  00039	84 d2		 test	 dl, dl
  0003b	75 f9		 jne	 SHORT $LL54@SetDefault
  0003d	2b c1		 sub	 eax, ecx

; 3395 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0003f	50		 push	 eax
  00040	56		 push	 esi
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 108  : 	}

  00041	eb 13		 jmp	 SHORT $LN60@SetDefault
$LN2@SetDefault:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 3395 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00043	6a 00		 push	 0
  00045	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0004a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004f	6a 22		 push	 34			; 00000022H
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@GGDHOLJD@d?3?1ymir?5work?1item?1etc?1item_bag?4@
$LN60@SetDefault:

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00056	8d 4f 34	 lea	 ecx, DWORD PTR [edi+52]
  00059	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0005e	8b 55 08	 mov	 edx, DWORD PTR _c_szIconFileName$[ebp]
  00061	8b ca		 mov	 ecx, edx
  00063	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
$LL55@SetDefault:
  00066	8a 01		 mov	 al, BYTE PTR [ecx]
  00068	41		 inc	 ecx
  00069	84 c0		 test	 al, al
  0006b	75 f9		 jne	 SHORT $LL55@SetDefault
  0006d	2b ce		 sub	 ecx, esi

; 3395 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0006f	51		 push	 ecx
  00070	52		 push	 edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 114  : 	m_strIconFileName = c_szIconFileName;

  00071	8d 4f 4c	 lea	 ecx, DWORD PTR [edi+76]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 3395 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00074	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00079	6a 00		 push	 0
  0007b	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 116  : 	m_strSubModelFileName = "";

  00080	8d 4f 1c	 lea	 ecx, DWORD PTR [edi+28]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 3395 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00083	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00088	6a 00		 push	 0
  0008a	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 117  : 	m_strDescription = "";

  0008f	8d 4f 64	 lea	 ecx, DWORD PTR [edi+100]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 3395 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00092	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00097	6a 00		 push	 0
  00099	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 118  : 	m_strSummary = "";

  0009e	8d 4f 7c	 lea	 ecx, DWORD PTR [edi+124]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 3395 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000a1	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000a6	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 121  : 	__LoadFiles();

  000a9	8b cf		 mov	 ecx, edi
  000ab	66 0f d6 87 53
	01 00 00	 movq	 QWORD PTR [edi+339], xmm0
  000b3	c7 87 5b 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+347], 0
  000bd	e8 00 00 00 00	 call	 ?__LoadFiles@CItemData@@IAEXXZ ; CItemData::__LoadFiles
  000c2	5f		 pop	 edi
  000c3	5e		 pop	 esi
  000c4	5b		 pop	 ebx

; 122  : }

  000c5	5d		 pop	 ebp
  000c6	c2 08 00	 ret	 8
?SetDefaultItemData@CItemData@@QAEXPBD0@Z ENDP		; CItemData::SetDefaultItemData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ?IsEquipment@CItemData@@QBEHXZ
_TEXT	SEGMENT
?IsEquipment@CItemData@@QBEHXZ PROC			; CItemData::IsEquipment, COMDAT
; _this$ = ecx

; 428  : 	switch (GetType())

  00000	e8 00 00 00 00	 call	 ?GetType@CItemData@@QBEEXZ ; CItemData::GetType
  00005	0f b6 c0	 movzx	 eax, al
  00008	83 e8 01	 sub	 eax, 1
  0000b	74 08		 je	 SHORT $LN4@IsEquipmen
  0000d	83 e8 01	 sub	 eax, 1
  00010	74 03		 je	 SHORT $LN4@IsEquipmen

; 433  : 			break;
; 434  : 	}
; 435  : 
; 436  : 	return FALSE;

  00012	33 c0		 xor	 eax, eax

; 437  : }

  00014	c3		 ret	 0
$LN4@IsEquipmen:

; 429  : 	{
; 430  : 		case ITEM_TYPE_WEAPON:
; 431  : 		case ITEM_TYPE_ARMOR:
; 432  : 			return TRUE;

  00015	b8 01 00 00 00	 mov	 eax, 1

; 437  : }

  0001a	c3		 ret	 0
?IsEquipment@CItemData@@QBEHXZ ENDP			; CItemData::IsEquipment
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetSpecularPowerf@CItemData@@QBEMXZ
_TEXT	SEGMENT
tv78 = -4						; size = 4
?GetSpecularPowerf@CItemData@@QBEMXZ PROC		; CItemData::GetSpecularPowerf, COMDAT
; _this$ = ecx

; 415  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 416  : 	UINT uSpecularPower=GetSpecularPoweru();

  00004	e8 00 00 00 00	 call	 ?GetSpecularPoweru@CItemData@@QBEIXZ ; CItemData::GetSpecularPoweru
  00009	66 0f 6e c0	 movd	 xmm0, eax

; 417  : 
; 418  : 	return float(uSpecularPower) / 100.0f;

  0000d	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00011	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00014	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  0001d	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00021	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42c80000
  00029	f3 0f 11 45 fc	 movss	 DWORD PTR tv78[ebp], xmm0
  0002e	d9 45 fc	 fld	 DWORD PTR tv78[ebp]

; 419  : }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?GetSpecularPowerf@CItemData@@QBEMXZ ENDP		; CItemData::GetSpecularPowerf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetSpecularPoweru@CItemData@@QBEIXZ
_TEXT	SEGMENT
?GetSpecularPoweru@CItemData@@QBEIXZ PROC		; CItemData::GetSpecularPoweru, COMDAT
; _this$ = ecx

; 411  : 	return m_ItemTable.bSpecular;

  00000	0f b6 81 66 01
	00 00		 movzx	 eax, BYTE PTR [ecx+358]

; 412  : }

  00007	c3		 ret	 0
?GetSpecularPoweru@CItemData@@QBEIXZ ENDP		; CItemData::GetSpecularPoweru
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetIconNumber@CItemData@@QBEKXZ
_TEXT	SEGMENT
?GetIconNumber@CItemData@@QBEKXZ PROC			; CItemData::GetIconNumber, COMDAT
; _this$ = ecx

; 404  : 	return m_ItemTable.dwVnum;

  00000	8b 81 cc 00 00
	00		 mov	 eax, DWORD PTR [ecx+204]

; 405  : //!@#
; 406  : //	return m_ItemTable.dwIconNumber;
; 407  : }

  00006	c3		 ret	 0
?GetIconNumber@CItemData@@QBEKXZ ENDP			; CItemData::GetIconNumber
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetSocketCount@CItemData@@QBEHXZ
_TEXT	SEGMENT
?GetSocketCount@CItemData@@QBEHXZ PROC			; CItemData::GetSocketCount, COMDAT
; _this$ = ecx

; 399  : 	return m_ItemTable.bGainSocketPct;

  00000	0f b6 81 67 01
	00 00		 movzx	 eax, BYTE PTR [ecx+359]

; 400  : }

  00007	c3		 ret	 0
?GetSocketCount@CItemData@@QBEHXZ ENDP			; CItemData::GetSocketCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ?SetSocket@CItemData@@QAEJEK@Z
_TEXT	SEGMENT
_byIndex$ = 8						; size = 1
_value$ = 12						; size = 4
?SetSocket@CItemData@@QAEJEK@Z PROC			; CItemData::SetSocket, COMDAT
; _this$ = ecx

; 376  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 377  : 	if (byIndex >= ITEM_SOCKET_MAX_NUM)

  00003	8a 45 08	 mov	 al, BYTE PTR _byIndex$[ebp]
  00006	8b d1		 mov	 edx, ecx
  00008	3c 03		 cmp	 al, 3
  0000a	72 09		 jb	 SHORT $LN2@SetSocket

; 378  : 	{
; 379  : 		assert(byIndex < ITEM_SOCKET_MAX_NUM);
; 380  : 		return -1;

  0000c	b8 ff ff ff ff	 mov	 eax, -1

; 384  : }

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
$LN2@SetSocket:

; 381  : 	}
; 382  : 
; 383  : 	return m_ItemTable.alSockets[byIndex] = value;

  00015	0f b6 c8	 movzx	 ecx, al
  00018	8b 45 0c	 mov	 eax, DWORD PTR _value$[ebp]
  0001b	89 84 8a 53 01
	00 00		 mov	 DWORD PTR [edx+ecx*4+339], eax

; 384  : }

  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
?SetSocket@CItemData@@QAEJEK@Z ENDP			; CItemData::SetSocket
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetSocket@CItemData@@QBEJE@Z
_TEXT	SEGMENT
_byIndex$ = 8						; size = 1
?GetSocket@CItemData@@QBEJE@Z PROC			; CItemData::GetSocket, COMDAT
; _this$ = ecx

; 387  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 388  : 	if (byIndex >= ITEM_SOCKET_MAX_NUM)

  00003	8a 45 08	 mov	 al, BYTE PTR _byIndex$[ebp]
  00006	3c 03		 cmp	 al, 3
  00008	72 09		 jb	 SHORT $LN2@GetSocket

; 389  : 	{
; 390  : 		assert(byIndex < ITEM_SOCKET_MAX_NUM);
; 391  : 		return -1;

  0000a	b8 ff ff ff ff	 mov	 eax, -1

; 395  : }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
$LN2@GetSocket:

; 392  : 	}
; 393  : 
; 394  : 	return m_ItemTable.alSockets[byIndex];

  00013	0f b6 c0	 movzx	 eax, al
  00016	8b 84 81 53 01
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+339]

; 395  : }

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?GetSocket@CItemData@@QBEJE@Z ENDP			; CItemData::GetSocket
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetValue@CItemData@@QBEJE@Z
_TEXT	SEGMENT
_byIndex$ = 8						; size = 1
?GetValue@CItemData@@QBEJE@Z PROC			; CItemData::GetValue, COMDAT
; _this$ = ecx

; 365  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 366  : 	if (byIndex >= ITEM_VALUES_MAX_NUM)

  00003	8a 45 08	 mov	 al, BYTE PTR _byIndex$[ebp]
  00006	3c 06		 cmp	 al, 6
  00008	72 06		 jb	 SHORT $LN2@GetValue

; 367  : 	{
; 368  : 		assert(byIndex < ITEM_VALUES_MAX_NUM);
; 369  : 		return 0;

  0000a	33 c0		 xor	 eax, eax

; 373  : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
$LN2@GetValue:

; 370  : 	}
; 371  : 
; 372  : 	return m_ItemTable.alValues[byIndex];

  00010	0f b6 c0	 movzx	 eax, al
  00013	8b 84 81 3b 01
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+315]

; 373  : }

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?GetValue@CItemData@@QBEJE@Z ENDP			; CItemData::GetValue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetApply@CItemData@@QBEHEPAUSItemApply@1@@Z
_TEXT	SEGMENT
_byIndex$ = 8						; size = 1
_pItemApply$ = 12					; size = 4
?GetApply@CItemData@@QBEHEPAUSItemApply@1@@Z PROC	; CItemData::GetApply, COMDAT
; _this$ = ecx

; 353  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 354  : 	if (byIndex >= ITEM_APPLY_MAX_NUM)

  00003	8a 45 08	 mov	 al, BYTE PTR _byIndex$[ebp]
  00006	3c 03		 cmp	 al, 3
  00008	72 06		 jb	 SHORT $LN2@GetApply

; 355  : 	{
; 356  : 		assert(byIndex < ITEM_APPLY_MAX_NUM);
; 357  : 		return FALSE;

  0000a	33 c0		 xor	 eax, eax

; 362  : }

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
$LN2@GetApply:

; 358  : 	}
; 359  : 
; 360  : 	*pItemApply = m_ItemTable.aApplies[byIndex];

  00010	0f b6 c0	 movzx	 eax, al
  00013	83 c0 3c	 add	 eax, 60			; 0000003cH
  00016	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00019	8b 4d 0c	 mov	 ecx, DWORD PTR _pItemApply$[ebp]
  0001c	03 d0		 add	 edx, eax
  0001e	8b 02		 mov	 eax, DWORD PTR [edx]
  00020	89 01		 mov	 DWORD PTR [ecx], eax
  00022	8a 42 04	 mov	 al, BYTE PTR [edx+4]
  00025	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 361  : 	return TRUE;

  00028	b8 01 00 00 00	 mov	 eax, 1

; 362  : }

  0002d	5d		 pop	 ebp
  0002e	c2 08 00	 ret	 8
?GetApply@CItemData@@QBEHEPAUSItemApply@1@@Z ENDP	; CItemData::GetApply
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetLimit@CItemData@@QBEHEPAUSItemLimit@1@@Z
_TEXT	SEGMENT
_byIndex$ = 8						; size = 1
_pItemLimit$ = 12					; size = 4
?GetLimit@CItemData@@QBEHEPAUSItemLimit@1@@Z PROC	; CItemData::GetLimit, COMDAT
; _this$ = ecx

; 340  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 341  : 	if (byIndex >= ITEM_LIMIT_MAX_NUM)

  00003	8a 45 08	 mov	 al, BYTE PTR _byIndex$[ebp]
  00006	3c 02		 cmp	 al, 2
  00008	72 06		 jb	 SHORT $LN2@GetLimit

; 342  : 	{
; 343  : 		assert(byIndex < ITEM_LIMIT_MAX_NUM);
; 344  : 		return FALSE;

  0000a	33 c0		 xor	 eax, eax

; 350  : }

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
$LN2@GetLimit:

; 345  : 	}
; 346  : 
; 347  : 	*pItemLimit = m_ItemTable.aLimits[byIndex];

  00010	0f b6 c0	 movzx	 eax, al
  00013	83 c0 3a	 add	 eax, 58			; 0000003aH
  00016	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00019	8b 4d 0c	 mov	 ecx, DWORD PTR _pItemLimit$[ebp]
  0001c	03 d0		 add	 edx, eax
  0001e	8b 02		 mov	 eax, DWORD PTR [edx]
  00020	89 01		 mov	 DWORD PTR [ecx], eax
  00022	8a 42 04	 mov	 al, BYTE PTR [edx+4]
  00025	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 348  : 
; 349  : 	return TRUE;

  00028	b8 01 00 00 00	 mov	 eax, 1

; 350  : }

  0002d	5d		 pop	 ebp
  0002e	c2 08 00	 ret	 8
?GetLimit@CItemData@@QBEHEPAUSItemLimit@1@@Z ENDP	; CItemData::GetLimit
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetISellItemPrice@CItemData@@QBEKXZ
_TEXT	SEGMENT
?GetISellItemPrice@CItemData@@QBEKXZ PROC		; CItemData::GetISellItemPrice, COMDAT
; _this$ = ecx

; 335  : 	return m_ItemTable.dwISellItemPrice;

  00000	8b 81 1e 01 00
	00		 mov	 eax, DWORD PTR [ecx+286]

; 336  : }

  00006	c3		 ret	 0
?GetISellItemPrice@CItemData@@QBEKXZ ENDP		; CItemData::GetISellItemPrice
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetIBuyItemPrice@CItemData@@QBEKXZ
_TEXT	SEGMENT
?GetIBuyItemPrice@CItemData@@QBEKXZ PROC		; CItemData::GetIBuyItemPrice, COMDAT
; _this$ = ecx

; 330  : 	return m_ItemTable.dwIBuyItemPrice;

  00000	8b 81 1a 01 00
	00		 mov	 eax, DWORD PTR [ecx+282]

; 331  : }

  00006	c3		 ret	 0
?GetIBuyItemPrice@CItemData@@QBEKXZ ENDP		; CItemData::GetIBuyItemPrice
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetWearFlags@CItemData@@QBEKXZ
_TEXT	SEGMENT
?GetWearFlags@CItemData@@QBEKXZ PROC			; CItemData::GetWearFlags, COMDAT
; _this$ = ecx

; 325  : 	return m_ItemTable.dwWearFlags;

  00000	8b 81 12 01 00
	00		 mov	 eax, DWORD PTR [ecx+274]

; 326  : }

  00006	c3		 ret	 0
?GetWearFlags@CItemData@@QBEKXZ ENDP			; CItemData::GetWearFlags
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ?HasNextGrade@CItemData@@QBEHXZ
_TEXT	SEGMENT
?HasNextGrade@CItemData@@QBEHXZ PROC			; CItemData::HasNextGrade, COMDAT
; _this$ = ecx

; 320  : 	return 0 != m_ItemTable.dwRefinedVnum;

  00000	33 c0		 xor	 eax, eax
  00002	39 81 5f 01 00
	00		 cmp	 DWORD PTR [ecx+351], eax
  00008	0f 95 c0	 setne	 al

; 321  : }

  0000b	c3		 ret	 0
?HasNextGrade@CItemData@@QBEHXZ ENDP			; CItemData::HasNextGrade
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ?IsWearableFlag@CItemData@@QBEHK@Z
_TEXT	SEGMENT
_dwFlag$ = 8						; size = 4
?IsWearableFlag@CItemData@@QBEHK@Z PROC			; CItemData::IsWearableFlag, COMDAT
; _this$ = ecx

; 314  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 315  : 	return (dwFlag & m_ItemTable.dwWearFlags) != 0;

  00003	8b 81 12 01 00
	00		 mov	 eax, DWORD PTR [ecx+274]
  00009	23 45 08	 and	 eax, DWORD PTR _dwFlag$[ebp]
  0000c	f7 d8		 neg	 eax
  0000e	1b c0		 sbb	 eax, eax
  00010	f7 d8		 neg	 eax

; 316  : }

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?IsWearableFlag@CItemData@@QBEHK@Z ENDP			; CItemData::IsWearableFlag
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ?IsFlag@CItemData@@QBEHK@Z
_TEXT	SEGMENT
_dwFlag$ = 8						; size = 4
?IsFlag@CItemData@@QBEHK@Z PROC				; CItemData::IsFlag, COMDAT
; _this$ = ecx

; 309  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 310  : 	return (dwFlag & m_ItemTable.dwFlags) != 0;

  00003	8b 81 0e 01 00
	00		 mov	 eax, DWORD PTR [ecx+270]
  00009	23 45 08	 and	 eax, DWORD PTR _dwFlag$[ebp]
  0000c	f7 d8		 neg	 eax
  0000e	1b c0		 sbb	 eax, eax
  00010	f7 d8		 neg	 eax

; 311  : }

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?IsFlag@CItemData@@QBEHK@Z ENDP				; CItemData::IsFlag
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ?IsAntiFlag@CItemData@@QBEHK@Z
_TEXT	SEGMENT
_dwFlag$ = 8						; size = 4
?IsAntiFlag@CItemData@@QBEHK@Z PROC			; CItemData::IsAntiFlag, COMDAT
; _this$ = ecx

; 304  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 305  : 	return (dwFlag & m_ItemTable.dwAntiFlags) != 0;

  00003	8b 81 0a 01 00
	00		 mov	 eax, DWORD PTR [ecx+266]
  00009	23 45 08	 and	 eax, DWORD PTR _dwFlag$[ebp]
  0000c	f7 d8		 neg	 eax
  0000e	1b c0		 sbb	 eax, eax
  00010	f7 d8		 neg	 eax

; 306  : }

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?IsAntiFlag@CItemData@@QBEHK@Z ENDP			; CItemData::IsAntiFlag
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetSize@CItemData@@QBEEXZ
_TEXT	SEGMENT
?GetSize@CItemData@@QBEEXZ PROC				; CItemData::GetSize, COMDAT
; _this$ = ecx

; 300  : 	return m_ItemTable.bSize;

  00000	8a 81 09 01 00
	00		 mov	 al, BYTE PTR [ecx+265]

; 301  : }

  00006	c3		 ret	 0
?GetSize@CItemData@@QBEEXZ ENDP				; CItemData::GetSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetWeaponType@CItemData@@QBEKXZ
_TEXT	SEGMENT
?GetWeaponType@CItemData@@QBEKXZ PROC			; CItemData::GetWeaponType, COMDAT
; _this$ = ecx

; 290  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 291  : #ifdef ENABLE_WEAPON_COSTUME_SYSTEM
; 292  : 	if (GetType()==CItemData::ITEM_TYPE_COSTUME && GetSubType()==CItemData::COSTUME_WEAPON)

  00003	e8 00 00 00 00	 call	 ?GetType@CItemData@@QBEEXZ ; CItemData::GetType
  00008	3c 1c		 cmp	 al, 28			; 0000001cH
  0000a	75 16		 jne	 SHORT $LN2@GetWeaponT
  0000c	8b ce		 mov	 ecx, esi
  0000e	e8 00 00 00 00	 call	 ?GetSubType@CItemData@@QBEEXZ ; CItemData::GetSubType
  00013	3c 04		 cmp	 al, 4
  00015	75 0b		 jne	 SHORT $LN2@GetWeaponT

; 293  : 		return GetValue(3);

  00017	6a 03		 push	 3
  00019	8b ce		 mov	 ecx, esi
  0001b	e8 00 00 00 00	 call	 ?GetValue@CItemData@@QBEJE@Z ; CItemData::GetValue
  00020	5e		 pop	 esi

; 296  : }

  00021	c3		 ret	 0
$LN2@GetWeaponT:

; 294  : #endif
; 295  : 	return m_ItemTable.bSubType;

  00022	0f b6 86 07 01
	00 00		 movzx	 eax, BYTE PTR [esi+263]
  00029	5e		 pop	 esi

; 296  : }

  0002a	c3		 ret	 0
?GetWeaponType@CItemData@@QBEKXZ ENDP			; CItemData::GetWeaponType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetUseTypeString@CItemData@@QBEPBDXZ
_TEXT	SEGMENT
?GetUseTypeString@CItemData@@QBEPBDXZ PROC		; CItemData::GetUseTypeString, COMDAT
; _this$ = ecx

; 252  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 253  : 	if (GetType() != CItemData::ITEM_TYPE_USE)

  00003	e8 00 00 00 00	 call	 ?GetType@CItemData@@QBEEXZ ; CItemData::GetType
  00008	3c 03		 cmp	 al, 3
  0000a	74 07		 je	 SHORT $LN4@GetUseType

; 254  : 		return "NOT_USE_TYPE";

  0000c	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0N@OHMMNDLH@NOT_USE_TYPE@
  00011	5e		 pop	 esi

; 286  : }

  00012	c3		 ret	 0
$LN4@GetUseType:

; 255  : 
; 256  : 	switch (GetSubType())

  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ?GetSubType@CItemData@@QBEEXZ ; CItemData::GetSubType
  0001a	0f b6 c0	 movzx	 eax, al
  0001d	83 c0 fe	 add	 eax, -2			; fffffffeH
  00020	83 f8 1e	 cmp	 eax, 30			; 0000001eH
  00023	77 62		 ja	 SHORT $LN2@GetUseType
  00025	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN18@GetUseType[eax]
  0002c	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN19@GetUseType[eax*4]
$LN5@GetUseType:

; 257  : 	{
; 258  : 		case USE_TUNING:
; 259  : 			return DEF_STR(USE_TUNING);

  00033	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0L@JIILHJGL@USE_TUNING@
  00038	5e		 pop	 esi

; 286  : }

  00039	c3		 ret	 0
$LN6@GetUseType:

; 260  : 		case USE_DETACHMENT:
; 261  : 			return DEF_STR(USE_DETACHMENT);

  0003a	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0P@MKAMDACK@USE_DETACHMENT@
  0003f	5e		 pop	 esi

; 286  : }

  00040	c3		 ret	 0
$LN7@GetUseType:

; 262  : 		case USE_CLEAN_SOCKET:
; 263  : 			return DEF_STR(USE_CLEAN_SOCKET);

  00041	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BB@IPDHFONJ@USE_CLEAN_SOCKET@
  00046	5e		 pop	 esi

; 286  : }

  00047	c3		 ret	 0
$LN8@GetUseType:

; 264  : 		case USE_CHANGE_ATTRIBUTE:
; 265  : 			return DEF_STR(USE_CHANGE_ATTRIBUTE);

  00048	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@OFJOINJA@USE_CHANGE_ATTRIBUTE@
  0004d	5e		 pop	 esi

; 286  : }

  0004e	c3		 ret	 0
$LN9@GetUseType:

; 266  : 		case USE_ADD_ATTRIBUTE:
; 267  : 			return DEF_STR(USE_ADD_ATTRIBUTE);

  0004f	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@CNMGHFMD@USE_ADD_ATTRIBUTE@
  00054	5e		 pop	 esi

; 286  : }

  00055	c3		 ret	 0
$LN10@GetUseType:

; 268  : 		case USE_ADD_ATTRIBUTE2:
; 269  : 			return DEF_STR(USE_ADD_ATTRIBUTE2);

  00056	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BD@OPDAABAO@USE_ADD_ATTRIBUTE2@
  0005b	5e		 pop	 esi

; 286  : }

  0005c	c3		 ret	 0
$LN11@GetUseType:

; 270  : 		case USE_ADD_ACCESSORY_SOCKET:
; 271  : 			return DEF_STR(USE_ADD_ACCESSORY_SOCKET);

  0005d	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BJ@NMHGAPML@USE_ADD_ACCESSORY_SOCKET@
  00062	5e		 pop	 esi

; 286  : }

  00063	c3		 ret	 0
$LN12@GetUseType:

; 272  : 		case USE_PUT_INTO_ACCESSORY_SOCKET:
; 273  : 			return DEF_STR(USE_PUT_INTO_ACCESSORY_SOCKET);

  00064	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BO@CNHACOAA@USE_PUT_INTO_ACCESSORY_SOCKET@
  00069	5e		 pop	 esi

; 286  : }

  0006a	c3		 ret	 0
$LN13@GetUseType:

; 274  : 		case USE_PUT_INTO_BELT_SOCKET:
; 275  : 			return DEF_STR(USE_PUT_INTO_BELT_SOCKET);

  0006b	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BJ@FLCFGEDJ@USE_PUT_INTO_BELT_SOCKET@
  00070	5e		 pop	 esi

; 286  : }

  00071	c3		 ret	 0
$LN14@GetUseType:

; 276  : 		case USE_PUT_INTO_RING_SOCKET:
; 277  : 			return DEF_STR(USE_PUT_INTO_RING_SOCKET);

  00072	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BJ@MMJPLFIL@USE_PUT_INTO_RING_SOCKET@
  00077	5e		 pop	 esi

; 286  : }

  00078	c3		 ret	 0
$LN15@GetUseType:

; 278  : #ifdef ENABLE_USE_COSTUME_ATTR
; 279  : 		case USE_CHANGE_COSTUME_ATTR:
; 280  : 			return DEF_STR(USE_CHANGE_COSTUME_ATTR);

  00079	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BI@JBGADBGG@USE_CHANGE_COSTUME_ATTR@
  0007e	5e		 pop	 esi

; 286  : }

  0007f	c3		 ret	 0
$LN16@GetUseType:

; 281  : 		case USE_RESET_COSTUME_ATTR:
; 282  : 			return DEF_STR(USE_RESET_COSTUME_ATTR);

  00080	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BH@GEFCODLD@USE_RESET_COSTUME_ATTR@
  00085	5e		 pop	 esi

; 286  : }

  00086	c3		 ret	 0
$LN2@GetUseType:

; 283  : #endif
; 284  : 	}
; 285  : 	return "USE_UNKNOWN_TYPE";

  00087	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BB@HEDGKPKE@USE_UNKNOWN_TYPE@
  0008c	5e		 pop	 esi

; 286  : }

  0008d	c3		 ret	 0
  0008e	66 90		 npad	 2
$LN19@GetUseType:
  00090	00 00 00 00	 DD	 $LN5@GetUseType
  00094	00 00 00 00	 DD	 $LN6@GetUseType
  00098	00 00 00 00	 DD	 $LN7@GetUseType
  0009c	00 00 00 00	 DD	 $LN8@GetUseType
  000a0	00 00 00 00	 DD	 $LN9@GetUseType
  000a4	00 00 00 00	 DD	 $LN11@GetUseType
  000a8	00 00 00 00	 DD	 $LN12@GetUseType
  000ac	00 00 00 00	 DD	 $LN10@GetUseType
  000b0	00 00 00 00	 DD	 $LN13@GetUseType
  000b4	00 00 00 00	 DD	 $LN14@GetUseType
  000b8	00 00 00 00	 DD	 $LN15@GetUseType
  000bc	00 00 00 00	 DD	 $LN16@GetUseType
  000c0	00 00 00 00	 DD	 $LN2@GetUseType
$LN18@GetUseType:
  000c4	00		 DB	 0
  000c5	0c		 DB	 12			; 0000000cH
  000c6	0c		 DB	 12			; 0000000cH
  000c7	0c		 DB	 12			; 0000000cH
  000c8	0c		 DB	 12			; 0000000cH
  000c9	0c		 DB	 12			; 0000000cH
  000ca	0c		 DB	 12			; 0000000cH
  000cb	0c		 DB	 12			; 0000000cH
  000cc	0c		 DB	 12			; 0000000cH
  000cd	0c		 DB	 12			; 0000000cH
  000ce	0c		 DB	 12			; 0000000cH
  000cf	0c		 DB	 12			; 0000000cH
  000d0	01		 DB	 1
  000d1	0c		 DB	 12			; 0000000cH
  000d2	0c		 DB	 12			; 0000000cH
  000d3	02		 DB	 2
  000d4	03		 DB	 3
  000d5	04		 DB	 4
  000d6	05		 DB	 5
  000d7	06		 DB	 6
  000d8	07		 DB	 7
  000d9	0c		 DB	 12			; 0000000cH
  000da	0c		 DB	 12			; 0000000cH
  000db	0c		 DB	 12			; 0000000cH
  000dc	0c		 DB	 12			; 0000000cH
  000dd	0c		 DB	 12			; 0000000cH
  000de	0c		 DB	 12			; 0000000cH
  000df	08		 DB	 8
  000e0	09		 DB	 9
  000e1	0a		 DB	 10			; 0000000aH
  000e2	0b		 DB	 11			; 0000000bH
?GetUseTypeString@CItemData@@QBEPBDXZ ENDP		; CItemData::GetUseTypeString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetRefine@CItemData@@QBEIXZ
_TEXT	SEGMENT
?GetRefine@CItemData@@QBEIXZ PROC			; CItemData::GetRefine, COMDAT
; _this$ = ecx

; 423  : 	return GetIndex()%10;

  00000	e8 00 00 00 00	 call	 ?GetIndex@CItemData@@QBEKXZ ; CItemData::GetIndex
  00005	33 d2		 xor	 edx, edx
  00007	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  0000c	f7 f1		 div	 ecx
  0000e	8b c2		 mov	 eax, edx

; 424  : }

  00010	c3		 ret	 0
?GetRefine@CItemData@@QBEIXZ ENDP			; CItemData::GetRefine
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetSubType@CItemData@@QBEEXZ
_TEXT	SEGMENT
?GetSubType@CItemData@@QBEEXZ PROC			; CItemData::GetSubType, COMDAT
; _this$ = ecx

; 246  : 	return m_ItemTable.bSubType;

  00000	8a 81 07 01 00
	00		 mov	 al, BYTE PTR [ecx+263]

; 247  : }

  00006	c3		 ret	 0
?GetSubType@CItemData@@QBEEXZ ENDP			; CItemData::GetSubType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetType@CItemData@@QBEEXZ
_TEXT	SEGMENT
?GetType@CItemData@@QBEEXZ PROC				; CItemData::GetType, COMDAT
; _this$ = ecx

; 241  : 	return m_ItemTable.bType;

  00000	8a 81 06 01 00
	00		 mov	 al, BYTE PTR [ecx+262]

; 242  : }

  00006	c3		 ret	 0
?GetType@CItemData@@QBEEXZ ENDP				; CItemData::GetType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetSummary@CItemData@@QBEPBDXZ
_TEXT	SEGMENT
?GetSummary@CItemData@@QBEPBDXZ PROC			; CItemData::GetSummary, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00000	83 b9 90 00 00
	00 10		 cmp	 DWORD PTR [ecx+144], 16	; 00000010H

; 4107 :         return _Mypair._Myval2._Myptr();

  00007	8d 41 7c	 lea	 eax, DWORD PTR [ecx+124]

; 2236 :         if (_Large_string_engaged()) {

  0000a	72 02		 jb	 SHORT $LN6@GetSummary
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 235  : 	return m_strSummary.c_str();

  0000c	8b 00		 mov	 eax, DWORD PTR [eax]
$LN6@GetSummary:

; 236  : }

  0000e	c3		 ret	 0
?GetSummary@CItemData@@QBEPBDXZ ENDP			; CItemData::GetSummary
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetDescription@CItemData@@QBEPBDXZ
_TEXT	SEGMENT
?GetDescription@CItemData@@QBEPBDXZ PROC		; CItemData::GetDescription, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00000	83 79 78 10	 cmp	 DWORD PTR [ecx+120], 16	; 00000010H

; 4107 :         return _Mypair._Myval2._Myptr();

  00004	8d 41 64	 lea	 eax, DWORD PTR [ecx+100]

; 2236 :         if (_Large_string_engaged()) {

  00007	72 02		 jb	 SHORT $LN6@GetDescrip
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 230  : 	return m_strDescription.c_str();

  00009	8b 00		 mov	 eax, DWORD PTR [eax]
$LN6@GetDescrip:

; 231  : }

  0000b	c3		 ret	 0
?GetDescription@CItemData@@QBEPBDXZ ENDP		; CItemData::GetDescription
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetName@CItemData@@QBEPBDXZ
_TEXT	SEGMENT
?GetName@CItemData@@QBEPBDXZ PROC			; CItemData::GetName, COMDAT
; _this$ = ecx

; 225  : 	return m_ItemTable.szLocaleName;

  00000	8d 81 ed 00 00
	00		 lea	 eax, DWORD PTR [ecx+237]

; 226  : }

  00006	c3		 ret	 0
?GetName@CItemData@@QBEPBDXZ ENDP			; CItemData::GetName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetIndex@CItemData@@QBEKXZ
_TEXT	SEGMENT
?GetIndex@CItemData@@QBEKXZ PROC			; CItemData::GetIndex, COMDAT
; _this$ = ecx

; 220  : 	return m_ItemTable.dwVnum;

  00000	8b 81 cc 00 00
	00		 mov	 eax, DWORD PTR [ecx+204]

; 221  : }

  00006	c3		 ret	 0
?GetIndex@CItemData@@QBEKXZ ENDP			; CItemData::GetIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetTable@CItemData@@QBEPBUSItemTable_r156@1@XZ
_TEXT	SEGMENT
?GetTable@CItemData@@QBEPBUSItemTable_r156@1@XZ PROC	; CItemData::GetTable, COMDAT
; _this$ = ecx

; 215  : 	return &m_ItemTable;

  00000	8d 81 cc 00 00
	00		 lea	 eax, DWORD PTR [ecx+204]

; 216  : }

  00006	c3		 ret	 0
?GetTable@CItemData@@QBEPBUSItemTable_r156@1@XZ ENDP	; CItemData::GetTable
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetAttachingDataPointer@CItemData@@QAEHKPAPBUSAttachingData@NRaceData@@@Z
_TEXT	SEGMENT
_dwIndex$ = 8						; size = 4
_c_ppAttachingData$ = 12				; size = 4
?GetAttachingDataPointer@CItemData@@QAEHKPAPBUSAttachingData@NRaceData@@@Z PROC ; CItemData::GetAttachingDataPointer, COMDAT
; _this$ = ecx

; 84   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 85   : 	if (dwIndex >= GetAttachingDataCount())

  00006	e8 00 00 00 00	 call	 ?GetAttachingDataCount@CItemData@@QAEKXZ ; CItemData::GetAttachingDataCount
  0000b	8b 55 08	 mov	 edx, DWORD PTR _dwIndex$[ebp]
  0000e	3b d0		 cmp	 edx, eax
  00010	72 07		 jb	 SHORT $LN2@GetAttachi

; 86   : 		return FALSE;

  00012	33 c0		 xor	 eax, eax
  00014	5e		 pop	 esi

; 90   : }

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
$LN2@GetAttachi:

; 88   : 	*c_ppAttachingData = &m_AttachingDataVector[dwIndex];

  00019	8b 45 0c	 mov	 eax, DWORD PTR _c_ppAttachingData$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1889 :         return _My_data._Myfirst[_Pos];

  0001c	8d 0c 52	 lea	 ecx, DWORD PTR [edx+edx*2]
  0001f	c1 e1 04	 shl	 ecx, 4
  00022	03 8e bc 00 00
	00		 add	 ecx, DWORD PTR [esi+188]
  00028	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 88   : 	*c_ppAttachingData = &m_AttachingDataVector[dwIndex];

  00029	89 08		 mov	 DWORD PTR [eax], ecx

; 89   : 	return TRUE;

  0002b	b8 01 00 00 00	 mov	 eax, 1

; 90   : }

  00030	5d		 pop	 ebp
  00031	c2 08 00	 ret	 8
?GetAttachingDataPointer@CItemData@@QAEHKPAPBUSAttachingData@NRaceData@@@Z ENDP ; CItemData::GetAttachingDataPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetCollisionDataPointer@CItemData@@QAEHKPAPBUSAttachingData@NRaceData@@@Z
_TEXT	SEGMENT
_dwIndex$ = 8						; size = 4
_c_ppAttachingData$ = 12				; size = 4
?GetCollisionDataPointer@CItemData@@QAEHKPAPBUSAttachingData@NRaceData@@@Z PROC ; CItemData::GetCollisionDataPointer, COMDAT
; _this$ = ecx

; 72   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 73   : 	if (dwIndex >= GetAttachingDataCount())

  00006	e8 00 00 00 00	 call	 ?GetAttachingDataCount@CItemData@@QAEKXZ ; CItemData::GetAttachingDataCount
  0000b	8b 55 08	 mov	 edx, DWORD PTR _dwIndex$[ebp]
  0000e	3b d0		 cmp	 edx, eax
  00010	73 22		 jae	 SHORT $LN9@GetCollisi

; 76   : 	if (NRaceData::ATTACHING_DATA_TYPE_COLLISION_DATA != m_AttachingDataVector[dwIndex].dwType)

  00012	8b 8e bc 00 00
	00		 mov	 ecx, DWORD PTR [esi+188]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1889 :         return _My_data._Myfirst[_Pos];

  00018	8d 14 52	 lea	 edx, DWORD PTR [edx+edx*2]
  0001b	c1 e2 04	 shl	 edx, 4
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 76   : 	if (NRaceData::ATTACHING_DATA_TYPE_COLLISION_DATA != m_AttachingDataVector[dwIndex].dwType)

  0001e	03 ca		 add	 ecx, edx
  00020	83 39 01	 cmp	 DWORD PTR [ecx], 1
  00023	75 0f		 jne	 SHORT $LN9@GetCollisi

; 78   : 
; 79   : 	*c_ppAttachingData = &m_AttachingDataVector[dwIndex];

  00025	8b 45 0c	 mov	 eax, DWORD PTR _c_ppAttachingData$[ebp]
  00028	5e		 pop	 esi
  00029	89 08		 mov	 DWORD PTR [eax], ecx

; 80   : 	return TRUE;

  0002b	b8 01 00 00 00	 mov	 eax, 1

; 81   : }

  00030	5d		 pop	 ebp
  00031	c2 08 00	 ret	 8
$LN9@GetCollisi:

; 77   : 		return FALSE;

  00034	33 c0		 xor	 eax, eax
  00036	5e		 pop	 esi

; 81   : }

  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
?GetCollisionDataPointer@CItemData@@QAEHKPAPBUSAttachingData@NRaceData@@@Z ENDP ; CItemData::GetCollisionDataPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetAttachingDataCount@CItemData@@QAEKXZ
_TEXT	SEGMENT
?GetAttachingDataCount@CItemData@@QAEKXZ PROC		; CItemData::GetAttachingDataCount, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00000	8b 91 c0 00 00
	00		 mov	 edx, DWORD PTR [ecx+192]
  00006	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000b	2b 91 bc 00 00
	00		 sub	 edx, DWORD PTR [ecx+188]
  00011	f7 ea		 imul	 edx
  00013	c1 fa 03	 sar	 edx, 3
  00016	8b c2		 mov	 eax, edx
  00018	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001b	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 69   : }

  0001d	c3		 ret	 0
?GetAttachingDataCount@CItemData@@QAEKXZ ENDP		; CItemData::GetAttachingDataCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetLODModelThingPointer@CItemData@@QAEHKPAPAVCGraphicThing@@@Z
_TEXT	SEGMENT
_dwIndex$ = 8						; size = 4
_ppModelThing$ = 12					; size = 4
?GetLODModelThingPointer@CItemData@@QAEHKPAPAVCGraphicThing@@@Z PROC ; CItemData::GetLODModelThingPointer, COMDAT
; _this$ = ecx

; 57   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00003	8b 81 b4 00 00
	00		 mov	 eax, DWORD PTR [ecx+180]
  00009	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0000f	2b c2		 sub	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 58   : 	if (dwIndex >= m_pLODModelThingVector.size())

  00011	8b 4d 08	 mov	 ecx, DWORD PTR _dwIndex$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00014	c1 f8 02	 sar	 eax, 2
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 58   : 	if (dwIndex >= m_pLODModelThingVector.size())

  00017	3b c8		 cmp	 ecx, eax
  00019	72 06		 jb	 SHORT $LN2@GetLODMode

; 59   : 		return FALSE;

  0001b	33 c0		 xor	 eax, eax

; 64   : }

  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
$LN2@GetLODMode:

; 60   : 
; 61   : 	*ppModelThing = m_pLODModelThingVector[dwIndex];

  00021	8b 45 0c	 mov	 eax, DWORD PTR _ppModelThing$[ebp]
  00024	8b 0c 8a	 mov	 ecx, DWORD PTR [edx+ecx*4]
  00027	89 08		 mov	 DWORD PTR [eax], ecx

; 62   : 
; 63   : 	return TRUE;

  00029	b8 01 00 00 00	 mov	 eax, 1

; 64   : }

  0002e	5d		 pop	 ebp
  0002f	c2 08 00	 ret	 8
?GetLODModelThingPointer@CItemData@@QAEHKPAPAVCGraphicThing@@@Z ENDP ; CItemData::GetLODModelThingPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetLODModelThingCount@CItemData@@QAEKXZ
_TEXT	SEGMENT
?GetLODModelThingCount@CItemData@@QAEKXZ PROC		; CItemData::GetLODModelThingCount, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00000	8b 81 b4 00 00
	00		 mov	 eax, DWORD PTR [ecx+180]
  00006	2b 81 b0 00 00
	00		 sub	 eax, DWORD PTR [ecx+176]
  0000c	c1 f8 02	 sar	 eax, 2
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 54   : }

  0000f	c3		 ret	 0
?GetLODModelThingCount@CItemData@@QAEKXZ ENDP		; CItemData::GetLODModelThingCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetIconImage@CItemData@@QAEPAVCGraphicSubImage@@XZ
_TEXT	SEGMENT
?GetIconImage@CItemData@@QAEPAVCGraphicSubImage@@XZ PROC ; CItemData::GetIconImage, COMDAT
; _this$ = ecx

; 45   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 46   : 	if(m_pIconImage == NULL && m_strIconFileName.empty() == false)

  00003	83 be ac 00 00
	00 00		 cmp	 DWORD PTR [esi+172], 0
  0000a	75 17		 jne	 SHORT $LN13@GetIconIma
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4228 :         return _Mypair._Myval2._Mysize == 0;

  0000c	83 7e 5c 00	 cmp	 DWORD PTR [esi+92], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 46   : 	if(m_pIconImage == NULL && m_strIconFileName.empty() == false)

  00010	74 11		 je	 SHORT $LN13@GetIconIma
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00012	83 7e 60 10	 cmp	 DWORD PTR [esi+96], 16	; 00000010H

; 4107 :         return _Mypair._Myval2._Myptr();

  00016	8d 46 4c	 lea	 eax, DWORD PTR [esi+76]

; 2236 :         if (_Large_string_engaged()) {

  00019	72 02		 jb	 SHORT $LN9@GetIconIma

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  0001b	8b 00		 mov	 eax, DWORD PTR [eax]
$LN9@GetIconIma:
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 47   : 		__SetIconImage(m_strIconFileName.c_str());

  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ?__SetIconImage@CItemData@@IAEXPBD@Z ; CItemData::__SetIconImage
$LN13@GetIconIma:

; 48   : 	return m_pIconImage;
; 49   : }

  00023	8b 86 ac 00 00
	00		 mov	 eax, DWORD PTR [esi+172]
  00029	5e		 pop	 esi
  0002a	c3		 ret	 0
?GetIconImage@CItemData@@QAEPAVCGraphicSubImage@@XZ ENDP ; CItemData::GetIconImage
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetDropModelThing@CItemData@@QAEPAVCGraphicThing@@XZ
_TEXT	SEGMENT
?GetDropModelThing@CItemData@@QAEPAVCGraphicThing@@XZ PROC ; CItemData::GetDropModelThing, COMDAT
; _this$ = ecx

; 41   : 	return m_pDropModelThing;

  00000	8b 81 a8 00 00
	00		 mov	 eax, DWORD PTR [ecx+168]

; 42   : }

  00006	c3		 ret	 0
?GetDropModelThing@CItemData@@QAEPAVCGraphicThing@@XZ ENDP ; CItemData::GetDropModelThing
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetSubModelThing@CItemData@@QAEPAVCGraphicThing@@XZ
_TEXT	SEGMENT
?GetSubModelThing@CItemData@@QAEPAVCGraphicThing@@XZ PROC ; CItemData::GetSubModelThing, COMDAT
; _this$ = ecx

; 33   : 	if (m_pSubModelThing)

  00000	8b 81 a4 00 00
	00		 mov	 eax, DWORD PTR [ecx+164]
  00006	85 c0		 test	 eax, eax
  00008	75 06		 jne	 SHORT $LN3@GetSubMode

; 34   : 		return m_pSubModelThing;
; 35   : 	else
; 36   : 		return m_pModelThing;

  0000a	8b 81 a0 00 00
	00		 mov	 eax, DWORD PTR [ecx+160]
$LN3@GetSubMode:

; 37   : }

  00010	c3		 ret	 0
?GetSubModelThing@CItemData@@QAEPAVCGraphicThing@@XZ ENDP ; CItemData::GetSubModelThing
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ?GetModelThing@CItemData@@QAEPAVCGraphicThing@@XZ
_TEXT	SEGMENT
?GetModelThing@CItemData@@QAEPAVCGraphicThing@@XZ PROC	; CItemData::GetModelThing, COMDAT
; _this$ = ecx

; 28   : 	return m_pModelThing;

  00000	8b 81 a0 00 00
	00		 mov	 eax, DWORD PTR [ecx+160]

; 29   : }

  00006	c3		 ret	 0
?GetModelThing@CItemData@@QAEPAVCGraphicThing@@XZ ENDP	; CItemData::GetModelThing
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ?SetDescription@CItemData@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_c_rstDesc$ = 8						; size = 4
?SetDescription@CItemData@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CItemData::SetDescription, COMDAT
; _this$ = ecx

; 98   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 3156 :         if (this == _STD addressof(_Right)) {

  00003	8b 45 08	 mov	 eax, DWORD PTR _c_rstDesc$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 99   : 	m_strDescription=c_rstDesc;

  00006	83 c1 64	 add	 ecx, 100		; 00000064H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 3156 :         if (this == _STD addressof(_Right)) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	74 13		 je	 SHORT $LN3@SetDescrip

; 2244 :         return _BUF_SIZE <= _Myres;

  0000d	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2235 :         const value_type* _Result = _Bx._Buf;

  00011	8b d0		 mov	 edx, eax

; 2236 :         if (_Large_string_engaged()) {

  00013	72 02		 jb	 SHORT $LN7@SetDescrip

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  00015	8b 10		 mov	 edx, DWORD PTR [eax]
$LN7@SetDescrip:

; 3192 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00017	ff 70 10	 push	 DWORD PTR [eax+16]
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN3@SetDescrip:
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 100  : }

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
?SetDescription@CItemData@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CItemData::SetDescription
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ?SetSummary@CItemData@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_c_rstSumm$ = 8						; size = 4
?SetSummary@CItemData@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CItemData::SetSummary, COMDAT
; _this$ = ecx

; 93   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 3156 :         if (this == _STD addressof(_Right)) {

  00003	8b 45 08	 mov	 eax, DWORD PTR _c_rstSumm$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 94   : 	m_strSummary=c_rstSumm;

  00006	83 c1 7c	 add	 ecx, 124		; 0000007cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 3156 :         if (this == _STD addressof(_Right)) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	74 13		 je	 SHORT $LN3@SetSummary

; 2244 :         return _BUF_SIZE <= _Myres;

  0000d	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2235 :         const value_type* _Result = _Bx._Buf;

  00011	8b d0		 mov	 edx, eax

; 2236 :         if (_Large_string_engaged()) {

  00013	72 02		 jb	 SHORT $LN7@SetSummary

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  00015	8b 10		 mov	 edx, DWORD PTR [eax]
$LN7@SetSummary:

; 3192 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00017	ff 70 10	 push	 DWORD PTR [eax+16]
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN3@SetSummary:
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 95   : }

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
?SetSummary@CItemData@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CItemData::SetSummary
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ?Clear@CItemData@@QAEXXZ
_TEXT	SEGMENT
?Clear@CItemData@@QAEXXZ PROC				; CItemData::Clear, COMDAT
; _this$ = ecx

; 440  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f1		 mov	 esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 3395 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00004	6a 00		 push	 0
  00006	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 441  : 	m_strSummary = "";

  0000b	8d 4e 7c	 lea	 ecx, DWORD PTR [esi+124]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 3395 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0000e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00013	6a 00		 push	 0
  00015	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 442  : 	m_strModelFileName = "";

  0001a	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 3395 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0001d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00022	6a 00		 push	 0
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 443  : 	m_strSubModelFileName = "";

  00029	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 3395 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0002c	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00031	6a 00		 push	 0
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 444  : 	m_strDropModelFileName = "";

  00038	8d 4e 34	 lea	 ecx, DWORD PTR [esi+52]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 3395 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0003b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00040	6a 00		 push	 0
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 445  : 	m_strIconFileName = "";

  00047	8d 4e 4c	 lea	 ecx, DWORD PTR [esi+76]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 3395 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0004a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0004f	8b 86 94 00 00
	00		 mov	 eax, DWORD PTR [esi+148]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 446  : 	m_strLODModelFileNameVector.clear();

  00055	8d be 94 00 00
	00		 lea	 edi, DWORD PTR [esi+148]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0005b	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0005e	3b c1		 cmp	 eax, ecx
  00060	74 10		 je	 SHORT $LN33@Clear

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());

  00062	57		 push	 edi
  00063	51		 push	 ecx
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  0006a	8b 07		 mov	 eax, DWORD PTR [edi]
  0006c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006f	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN33@Clear:
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 448  : 	m_pModelThing = NULL;

  00072	c7 86 a0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+160], 0

; 449  : 	m_pSubModelThing = NULL;

  0007c	c7 86 a4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+164], 0

; 450  : 	m_pDropModelThing = NULL;

  00086	c7 86 a8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+168], 0

; 451  : 	m_pIconImage = NULL;

  00090	c7 86 ac 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+172], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0009a	8b 86 b0 00 00
	00		 mov	 eax, DWORD PTR [esi+176]
  000a0	3b 86 b4 00 00
	00		 cmp	 eax, DWORD PTR [esi+180]
  000a6	74 06		 je	 SHORT $LN36@Clear

; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  000a8	89 86 b4 00 00
	00		 mov	 DWORD PTR [esi+180], eax
$LN36@Clear:
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 454  : 	memset(&m_ItemTable, 0, sizeof(m_ItemTable));

  000ae	68 9c 00 00 00	 push	 156			; 0000009cH
  000b3	8d 86 cc 00 00
	00		 lea	 eax, DWORD PTR [esi+204]
  000b9	6a 00		 push	 0
  000bb	50		 push	 eax
  000bc	e8 00 00 00 00	 call	 _memset

; 455  : #ifdef ENABLE_ACCE_COSTUME_SYSTEM
; 456  : 	memset(&m_ScaleTable, 0, sizeof(m_ScaleTable));

  000c1	68 f0 00 00 00	 push	 240			; 000000f0H
  000c6	8d 86 68 01 00
	00		 lea	 eax, DWORD PTR [esi+360]
  000cc	6a 00		 push	 0
  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 _memset
  000d4	83 c4 18	 add	 esp, 24			; 00000018H
  000d7	5f		 pop	 edi
  000d8	5e		 pop	 esi

; 457  : #endif
; 458  : }

  000d9	c3		 ret	 0
?Clear@CItemData@@QAEXXZ ENDP				; CItemData::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ??1CItemData@@UAE@XZ
_TEXT	SEGMENT
??1CItemData@@UAE@XZ PROC				; CItemData::~CItemData, COMDAT
; _this$ = ecx

; 466  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 467  : }

  00003	8d 8e bc 00 00
	00		 lea	 ecx, DWORD PTR [esi+188]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CItemData@@6B@
  0000f	e8 00 00 00 00	 call	 ??1?$vector@USAttachingData@NRaceData@@V?$allocator@USAttachingData@NRaceData@@@std@@@std@@QAE@XZ ; std::vector<NRaceData::SAttachingData,std::allocator<NRaceData::SAttachingData> >::~vector<NRaceData::SAttachingData,std::allocator<NRaceData::SAttachingData> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00014	8b 86 b0 00 00
	00		 mov	 eax, DWORD PTR [esi+176]
  0001a	85 c0		 test	 eax, eax
  0001c	74 51		 je	 SHORT $LN6@CItemData

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0001e	8b 8e b8 00 00
	00		 mov	 ecx, DWORD PTR [esi+184]
  00024	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00026	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00029	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002f	72 16		 jb	 SHORT $LN22@CItemData

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00031	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00034	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00037	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00039	83 c0 fc	 add	 eax, -4			; fffffffcH
  0003c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0003f	0f 87 dc 01 00
	00		 ja	 $LN182@CItemData

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00045	8b c2		 mov	 eax, edx
$LN22@CItemData:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00047	51		 push	 ecx
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  0004e	c7 86 b0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+176], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00058	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  0005b	c7 86 b4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+180], 0

; 2051 :             _Myend   = nullptr;

  00065	c7 86 b8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+184], 0
$LN6@CItemData:
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 467  : }

  0006f	8d 8e 94 00 00
	00		 lea	 ecx, DWORD PTR [esi+148]
  00075	e8 00 00 00 00	 call	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  0007a	8b 8e 90 00 00
	00		 mov	 ecx, DWORD PTR [esi+144]
  00080	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  00083	72 2c		 jb	 SHORT $LN40@CItemData
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00085	8b 46 7c	 mov	 eax, DWORD PTR [esi+124]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00088	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00089	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0008f	72 16		 jb	 SHORT $LN50@CItemData

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00091	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00094	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00097	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00099	83 c0 fc	 add	 eax, -4			; fffffffcH
  0009c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0009f	0f 87 7c 01 00
	00		 ja	 $LN182@CItemData

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a5	8b c2		 mov	 eax, edx
$LN50@CItemData:

; 265  :         ::operator delete(_Ptr, _Bytes);

  000a7	51		 push	 ecx
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000ae	83 c4 08	 add	 esp, 8
$LN40@CItemData:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  000b1	c7 86 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+140], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  000bb	c7 86 90 00 00
	00 0f 00 00 00	 mov	 DWORD PTR [esi+144], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000c5	c6 46 7c 00	 mov	 BYTE PTR [esi+124], 0

; 2244 :         return _BUF_SIZE <= _Myres;

  000c9	8b 4e 78	 mov	 ecx, DWORD PTR [esi+120]
  000cc	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  000cf	72 2c		 jb	 SHORT $LN67@CItemData
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000d1	8b 46 64	 mov	 eax, DWORD PTR [esi+100]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  000d4	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000d5	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000db	72 16		 jb	 SHORT $LN77@CItemData

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000dd	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000e0	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000e3	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000e5	83 c0 fc	 add	 eax, -4			; fffffffcH
  000e8	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000eb	0f 87 30 01 00
	00		 ja	 $LN182@CItemData

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000f1	8b c2		 mov	 eax, edx
$LN77@CItemData:

; 265  :         ::operator delete(_Ptr, _Bytes);

  000f3	51		 push	 ecx
  000f4	50		 push	 eax
  000f5	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000fa	83 c4 08	 add	 esp, 8
$LN67@CItemData:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  000fd	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  00104	c7 46 78 0f 00
	00 00		 mov	 DWORD PTR [esi+120], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0010b	c6 46 64 00	 mov	 BYTE PTR [esi+100], 0

; 2244 :         return _BUF_SIZE <= _Myres;

  0010f	8b 4e 60	 mov	 ecx, DWORD PTR [esi+96]
  00112	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  00115	72 2c		 jb	 SHORT $LN94@CItemData
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00117	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0011a	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0011b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00121	72 16		 jb	 SHORT $LN104@CItemData

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00123	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00126	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00129	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0012b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0012e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00131	0f 87 ea 00 00
	00		 ja	 $LN182@CItemData

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00137	8b c2		 mov	 eax, edx
$LN104@CItemData:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00139	51		 push	 ecx
  0013a	50		 push	 eax
  0013b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00140	83 c4 08	 add	 esp, 8
$LN94@CItemData:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  00143	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  0014a	c7 46 60 0f 00
	00 00		 mov	 DWORD PTR [esi+96], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00151	c6 46 4c 00	 mov	 BYTE PTR [esi+76], 0

; 2244 :         return _BUF_SIZE <= _Myres;

  00155	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  00158	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  0015b	72 2c		 jb	 SHORT $LN121@CItemData
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0015d	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00160	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00161	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00167	72 16		 jb	 SHORT $LN131@CItemData

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00169	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0016c	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0016f	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00171	83 c0 fc	 add	 eax, -4			; fffffffcH
  00174	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00177	0f 87 a4 00 00
	00		 ja	 $LN182@CItemData

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0017d	8b c2		 mov	 eax, edx
$LN131@CItemData:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0017f	51		 push	 ecx
  00180	50		 push	 eax
  00181	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00186	83 c4 08	 add	 esp, 8
$LN121@CItemData:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  00189	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  00190	c7 46 48 0f 00
	00 00		 mov	 DWORD PTR [esi+72], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00197	c6 46 34 00	 mov	 BYTE PTR [esi+52], 0

; 2244 :         return _BUF_SIZE <= _Myres;

  0019b	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  0019e	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  001a1	72 28		 jb	 SHORT $LN148@CItemData
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001a3	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  001a6	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  001a7	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001ad	72 12		 jb	 SHORT $LN158@CItemData

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001af	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  001b2	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  001b5	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001b7	83 c0 fc	 add	 eax, -4			; fffffffcH
  001ba	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001bd	77 62		 ja	 SHORT $LN182@CItemData

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  001bf	8b c2		 mov	 eax, edx
$LN158@CItemData:

; 265  :         ::operator delete(_Ptr, _Bytes);

  001c1	51		 push	 ecx
  001c2	50		 push	 eax
  001c3	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001c8	83 c4 08	 add	 esp, 8
$LN148@CItemData:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  001cb	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  001d2	c7 46 30 0f 00
	00 00		 mov	 DWORD PTR [esi+48], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  001d9	c6 46 1c 00	 mov	 BYTE PTR [esi+28], 0

; 2244 :         return _BUF_SIZE <= _Myres;

  001dd	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  001e0	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  001e3	72 28		 jb	 SHORT $LN175@CItemData
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001e5	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  001e8	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  001e9	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001ef	72 12		 jb	 SHORT $LN185@CItemData

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001f1	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  001f4	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  001f7	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001f9	83 c0 fc	 add	 eax, -4			; fffffffcH
  001fc	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001ff	77 20		 ja	 SHORT $LN182@CItemData

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00201	8b c2		 mov	 eax, edx
$LN185@CItemData:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00203	51		 push	 ecx
  00204	50		 push	 eax
  00205	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0020a	83 c4 08	 add	 esp, 8
$LN175@CItemData:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  0020d	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  00214	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0021b	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  0021f	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 467  : }

  00220	c3		 ret	 0
$LN182@CItemData:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00221	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN211@CItemData:
  00226	cc		 int	 3
??1CItemData@@UAE@XZ ENDP				; CItemData::~CItemData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp
;	COMDAT ??0CItemData@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CItemData@@QAE@XZ PROC				; CItemData::CItemData, COMDAT
; _this$ = ecx

; 461  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CItemData@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CItemData@@6B@
  0002f	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00032	0f 11 46 04	 movups	 XMMWORD PTR [esi+4], xmm0

; 4821 :         _My_data._Mysize = 0;

  00036	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 4822 :         _My_data._Myres  = _BUF_SIZE - 1;

  0003d	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH

; 4826 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00044	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00048	0f 11 46 1c	 movups	 XMMWORD PTR [esi+28], xmm0

; 4821 :         _My_data._Mysize = 0;

  0004c	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0

; 4822 :         _My_data._Myres  = _BUF_SIZE - 1;

  00053	c7 46 30 0f 00
	00 00		 mov	 DWORD PTR [esi+48], 15	; 0000000fH
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 461  : {

  0005a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4826 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00061	c6 46 1c 00	 mov	 BYTE PTR [esi+28], 0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00065	0f 11 46 34	 movups	 XMMWORD PTR [esi+52], xmm0

; 4821 :         _My_data._Mysize = 0;

  00069	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0

; 4822 :         _My_data._Myres  = _BUF_SIZE - 1;

  00070	c7 46 48 0f 00
	00 00		 mov	 DWORD PTR [esi+72], 15	; 0000000fH

; 4826 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00077	c6 46 34 00	 mov	 BYTE PTR [esi+52], 0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0007b	0f 11 46 4c	 movups	 XMMWORD PTR [esi+76], xmm0

; 4821 :         _My_data._Mysize = 0;

  0007f	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0

; 4822 :         _My_data._Myres  = _BUF_SIZE - 1;

  00086	c7 46 60 0f 00
	00 00		 mov	 DWORD PTR [esi+96], 15	; 0000000fH

; 4826 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0008d	c6 46 4c 00	 mov	 BYTE PTR [esi+76], 0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00091	0f 11 46 64	 movups	 XMMWORD PTR [esi+100], xmm0

; 4821 :         _My_data._Mysize = 0;

  00095	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0

; 4822 :         _My_data._Myres  = _BUF_SIZE - 1;

  0009c	c7 46 78 0f 00
	00 00		 mov	 DWORD PTR [esi+120], 15	; 0000000fH

; 4826 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000a3	c6 46 64 00	 mov	 BYTE PTR [esi+100], 0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000a7	0f 11 46 7c	 movups	 XMMWORD PTR [esi+124], xmm0

; 4821 :         _My_data._Mysize = 0;

  000ab	c7 86 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+140], 0

; 4822 :         _My_data._Myres  = _BUF_SIZE - 1;

  000b5	c7 86 90 00 00
	00 0f 00 00 00	 mov	 DWORD PTR [esi+144], 15	; 0000000fH

; 4826 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000bf	c6 46 7c 00	 mov	 BYTE PTR [esi+124], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 398  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  000c3	c7 86 94 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+148], 0
  000cd	c7 86 98 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+152], 0
  000d7	c7 86 9c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+156], 0
  000e1	c7 86 b0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+176], 0
  000eb	c7 86 b4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+180], 0
  000f5	c7 86 b8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+184], 0
  000ff	c7 86 bc 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+188], 0
  00109	c7 86 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+192], 0
  00113	c7 86 c4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+196], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.cpp

; 461  : {

  0011d	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8

; 462  : 	Clear();

  00121	e8 00 00 00 00	 call	 ?Clear@CItemData@@QAEXXZ ; CItemData::Clear

; 463  : }

  00126	8b c6		 mov	 eax, esi
  00128	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0012b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00132	59		 pop	 ecx
  00133	5e		 pop	 esi
  00134	8b e5		 mov	 esp, ebp
  00136	5d		 pop	 ebp
  00137	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CItemData@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0CItemData@@QAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0CItemData@@QAE@XZ$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 34	 add	 ecx, 52			; 00000034H
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0CItemData@@QAE@XZ$3:
  00021	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00027	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0CItemData@@QAE@XZ$4:
  0002c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	83 c1 64	 add	 ecx, 100		; 00000064H
  00032	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0CItemData@@QAE@XZ$5:
  00037	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	83 c1 7c	 add	 ecx, 124		; 0000007cH
  0003d	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0CItemData@@QAE@XZ$6:
  00042	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  0004b	e9 00 00 00 00	 jmp	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__unwindfunclet$??0CItemData@@QAE@XZ$7:
  00050	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	81 c1 b0 00 00
	00		 add	 ecx, 176		; 000000b0H
  00059	e9 00 00 00 00	 jmp	 ??1?$vector@PAVCGraphicThing@@V?$allocator@PAVCGraphicThing@@@std@@@std@@QAE@XZ ; std::vector<CGraphicThing *,std::allocator<CGraphicThing *> >::~vector<CGraphicThing *,std::allocator<CGraphicThing *> >
__unwindfunclet$??0CItemData@@QAE@XZ$8:
  0005e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	81 c1 bc 00 00
	00		 add	 ecx, 188		; 000000bcH
  00067	e9 00 00 00 00	 jmp	 ??1?$vector@USAttachingData@NRaceData@@V?$allocator@USAttachingData@NRaceData@@@std@@@std@@QAE@XZ ; std::vector<NRaceData::SAttachingData,std::allocator<NRaceData::SAttachingData> >::~vector<NRaceData::SAttachingData,std::allocator<NRaceData::SAttachingData> >
  0006c	cc		 int	 3
  0006d	cc		 int	 3
  0006e	cc		 int	 3
  0006f	cc		 int	 3
  00070	cc		 int	 3
__ehhandler$??0CItemData@@QAE@XZ:
  00071	90		 npad	 1
  00072	90		 npad	 1
  00073	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00077	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0007a	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0007d	33 c8		 xor	 ecx, eax
  0007f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00084	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CItemData@@QAE@XZ
  00089	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CItemData@@QAE@XZ ENDP				; CItemData::CItemData
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 137  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 138  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 139  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 140  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 87   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 141  :         _Throw_bad_array_new_length(); // add overflow
; 142  :     }
; 143  : 
; 144  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 87   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 145  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 146  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 147  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 148  : 
; 149  : #ifdef _DEBUG
; 150  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 151  : #endif // _DEBUG
; 152  :     return _Ptr;
; 153  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 145  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 766  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 65		 je	 SHORT $LN4@vector
  00009	57		 push	 edi

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);

  0000a	56		 push	 esi
  0000b	ff 76 04	 push	 DWORD PTR [esi+4]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00014	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00017	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0001c	8b 3e		 mov	 edi, DWORD PTR [esi]
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00021	2b cf		 sub	 ecx, edi
  00023	f7 e9		 imul	 ecx
  00025	c1 fa 02	 sar	 edx, 2
  00028	8b c2		 mov	 eax, edx
  0002a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0002d	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002f	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00032	c1 e1 03	 shl	 ecx, 3

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00035	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0003b	72 12		 jb	 SHORT $LN20@vector

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0003d	8b 57 fc	 mov	 edx, DWORD PTR [edi-4]
  00040	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00043	2b fa		 sub	 edi, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  00048	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0004b	77 23		 ja	 SHORT $LN17@vector

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0004d	8b fa		 mov	 edi, edx
$LN20@vector:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0004f	51		 push	 ecx
  00050	57		 push	 edi
  00051	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00056	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00059	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 2050 :             _Mylast  = nullptr;

  0005f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2051 :             _Myend   = nullptr;

  00066	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0006d	5f		 pop	 edi
$LN4@vector:
  0006e	5e		 pop	 esi

; 772  :     }

  0006f	c3		 ret	 0
$LN17@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00070	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN28@vector:
  00075	cc		 int	 3
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__Old$1$ = -4						; size = 4
__Ptr$ = 8						; size = 4
$T1 = 12						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 3374 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 3375 :         // assign [_Ptr, _Ptr + _Count)
; 3376 :         if (_Count <= _Mypair._Myval2._Myres) {

  00005	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	57		 push	 edi
  0000c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000f	89 4d fc	 mov	 DWORD PTR __Old$1$[ebp], ecx
  00012	3b d9		 cmp	 ebx, ecx
  00014	77 28		 ja	 SHORT $LN2@assign

; 2226 :         value_type* _Result = _Bx._Buf;

  00016	8b fe		 mov	 edi, esi

; 2244 :         return _BUF_SIZE <= _Myres;

  00018	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2227 :         if (_Large_string_engaged()) {

  0001b	72 02		 jb	 SHORT $LN5@assign

; 2228 :             _Result = _Unfancy(_Bx._Ptr);

  0001d	8b 3e		 mov	 edi, DWORD PTR [esi]
$LN5@assign:

; 119  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0001f	53		 push	 ebx
  00020	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 3377 :             _ASAN_STRING_MODIFY(*this, _Mypair._Myval2._Mysize, _Count);
; 3378 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 3379 :             _Mypair._Myval2._Mysize = _Count;

  00023	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 119  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00026	57		 push	 edi
  00027	e8 00 00 00 00	 call	 _memmove
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3380 :             _Traits::move(_Old_ptr, _Ptr, _Count);
; 3381 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0002f	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 3390 :             },
; 3391 :             _Ptr);
; 3392 :     }

  00033	8b c6		 mov	 eax, esi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
$LN2@assign:

; 4734 :         if (_New_size > max_size()) {

  0003e	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  00044	0f 87 d4 00 00
	00		 ja	 $LN69@assign

; 4714 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0004a	8b fb		 mov	 edi, ebx
  0004c	83 cf 0f	 or	 edi, 15			; 0000000fH
  0004f	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 4715 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00055	76 15		 jbe	 SHORT $LN19@assign

; 4716 :             return _Max;

  00057	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0005c	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00067	83 c4 04	 add	 esp, 4
  0006a	eb 52		 jmp	 SHORT $LN67@assign
$LN19@assign:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4719 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0006c	8b d1		 mov	 edx, ecx
  0006e	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00073	d1 ea		 shr	 edx, 1
  00075	2b c2		 sub	 eax, edx
  00077	3b c8		 cmp	 ecx, eax
  00079	76 15		 jbe	 SHORT $LN20@assign

; 4720 :             return _Max;

  0007b	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00080	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0008b	83 c4 04	 add	 esp, 4
  0008e	eb 2e		 jmp	 SHORT $LN67@assign
$LN20@assign:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4723 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00090	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 47   :     return _Left < _Right ? _Right : _Left;

  00093	3b f8		 cmp	 edi, eax
  00095	0f 42 f8	 cmovb	 edi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4741 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00098	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0009b	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000a0	72 0b		 jb	 SHORT $LN27@assign

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a8	83 c4 04	 add	 esp, 4
  000ab	eb 11		 jmp	 SHORT $LN67@assign
$LN27@assign:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  000ad	85 c0		 test	 eax, eax
  000af	74 0b		 je	 SHORT $LN28@assign

; 87   :         return ::operator new(_Bytes);

  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000b7	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  000ba	eb 02		 jmp	 SHORT $LN67@assign
$LN28@assign:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  000bc	33 c0		 xor	 eax, eax
$LN67@assign:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000be	53		 push	 ebx
  000bf	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 4746 :         _Mypair._Myval2._Mysize = _New_size;

  000c2	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c5	50		 push	 eax

; 4746 :         _Mypair._Myval2._Mysize = _New_size;

  000c6	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 4747 :         _Mypair._Myval2._Myres  = _New_capacity;

  000c9	89 7e 14	 mov	 DWORD PTR [esi+20], edi

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000cc	e8 00 00 00 00	 call	 _memcpy

; 3389 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000d1	8b 7d 0c	 mov	 edi, DWORD PTR $T1[ebp]

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4749 :         if (_BUF_SIZE <= _Old_capacity) {

  000d7	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]

; 3389 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000da	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 4749 :         if (_BUF_SIZE <= _Old_capacity) {

  000de	83 f8 10	 cmp	 eax, 16			; 00000010H
  000e1	72 29		 jb	 SHORT $LN13@assign

; 4750 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  000e3	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e6	8b 06		 mov	 eax, DWORD PTR [esi]

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000e8	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000ee	72 12		 jb	 SHORT $LN50@assign

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f0	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f3	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f6	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f8	83 c0 fc	 add	 eax, -4			; fffffffcH
  000fb	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000fe	77 19		 ja	 SHORT $LN47@assign

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00100	8b c2		 mov	 eax, edx
$LN50@assign:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00102	51		 push	 ecx
  00103	50		 push	 eax
  00104	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00109	83 c4 08	 add	 esp, 8
$LN13@assign:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 3385 :         return _Reallocate_for(

  0010c	89 3e		 mov	 DWORD PTR [esi], edi

; 3390 :             },
; 3391 :             _Ptr);
; 3392 :     }

  0010e	8b c6		 mov	 eax, esi
  00110	5f		 pop	 edi
  00111	5e		 pop	 esi
  00112	5b		 pop	 ebx
  00113	8b e5		 mov	 esp, ebp
  00115	5d		 pop	 ebp
  00116	c2 08 00	 ret	 8
$LN47@assign:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00119	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN69@assign:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4735 :             _Xlen_string(); // result too long

  0011e	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN65@assign:
  00123	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 3118 :     _CONSTEXPR20 ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2244 :         return _BUF_SIZE <= _Myres;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  00009	72 27		 jb	 SHORT $LN12@basic_stri
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0000d	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN22@basic_stri

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN19@basic_stri

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN22@basic_stri:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN12@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 3126 :     }

  00044	c3		 ret	 0
$LN19@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN30@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2312 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 331  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 332  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
