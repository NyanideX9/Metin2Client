; Listing generated by Microsoft (R) Optimizing Compiler Version 19.37.32822.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\GameLib\Distribute\WeaponTrace.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_7?$CDynamicPool@VCWeaponTrace@@@@6B@		; CDynamicPool<CWeaponTrace>::`vftable'
PUBLIC	??_G?$CDynamicPool@VCWeaponTrace@@@@UAEPAXI@Z	; CDynamicPool<CWeaponTrace>::`scalar deleting destructor'
PUBLIC	??_R4?$CDynamicPool@VCWeaponTrace@@@@6B@	; CDynamicPool<CWeaponTrace>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPool@VCWeaponTrace@@@@@8	; CDynamicPool<CWeaponTrace> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPool@VCWeaponTrace@@@@8		; CDynamicPool<CWeaponTrace>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPool@VCWeaponTrace@@@@8		; CDynamicPool<CWeaponTrace>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPool@VCWeaponTrace@@@@8	; CDynamicPool<CWeaponTrace>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E?$CDynamicPool@VCWeaponTrace@@@@UAEPAXI@Z:PROC ; CDynamicPool<CWeaponTrace>::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPool@VCWeaponTrace@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPool@VCWeaponTrace@@@@8 DD FLAT:??_R0?AV?$CDynamicPool@VCWeaponTrace@@@@@8 ; CDynamicPool<CWeaponTrace>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPool@VCWeaponTrace@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPool@VCWeaponTrace@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPool@VCWeaponTrace@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPool@VCWeaponTrace@@@@8 ; CDynamicPool<CWeaponTrace>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPool@VCWeaponTrace@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPool@VCWeaponTrace@@@@8 DD 00H		; CDynamicPool<CWeaponTrace>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPool@VCWeaponTrace@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPool@VCWeaponTrace@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPool@VCWeaponTrace@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPool<CWeaponTrace> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPool@VCWeaponTrace@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPool@VCWeaponTrace@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPool@VCWeaponTrace@@@@6B@ DD 00H		; CDynamicPool<CWeaponTrace>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPool@VCWeaponTrace@@@@@8
	DD	FLAT:??_R3?$CDynamicPool@VCWeaponTrace@@@@8
rdata$r	ENDS
;	COMDAT ??_7?$CDynamicPool@VCWeaponTrace@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPool@VCWeaponTrace@@@@6B@ DD FLAT:??_R4?$CDynamicPool@VCWeaponTrace@@@@6B@ ; CDynamicPool<CWeaponTrace>::`vftable'
	DD	FLAT:??_E?$CDynamicPool@VCWeaponTrace@@@@UAEPAXI@Z
CONST	ENDS
CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0D3DXVECTOR3@@QAE@XZ				; D3DXVECTOR3::D3DXVECTOR3
PUBLIC	??0D3DXMATRIX@@QAE@XZ				; D3DXMATRIX::D3DXMATRIX
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?DestroySystem@CWeaponTrace@@SAXXZ		; CWeaponTrace::DestroySystem
PUBLIC	?Delete@CWeaponTrace@@SAXPAV1@@Z		; CWeaponTrace::Delete
PUBLIC	?New@CWeaponTrace@@SAPAV1@XZ			; CWeaponTrace::New
PUBLIC	??0CWeaponTrace@@QAE@XZ				; CWeaponTrace::CWeaponTrace
PUBLIC	??1CWeaponTrace@@UAE@XZ				; CWeaponTrace::~CWeaponTrace
PUBLIC	?Clear@CWeaponTrace@@QAEXXZ			; CWeaponTrace::Clear
PUBLIC	?TurnOn@CWeaponTrace@@QAEXXZ			; CWeaponTrace::TurnOn
PUBLIC	?TurnOff@CWeaponTrace@@QAEXXZ			; CWeaponTrace::TurnOff
PUBLIC	?UseAlpha@CWeaponTrace@@QAEXXZ			; CWeaponTrace::UseAlpha
PUBLIC	?UseTexture@CWeaponTrace@@QAEXXZ		; CWeaponTrace::UseTexture
PUBLIC	?SetTexture@CWeaponTrace@@QAEXPBD@Z		; CWeaponTrace::SetTexture
PUBLIC	?SetWeaponInstance@CWeaponTrace@@QAE_NPAVCGraphicThingInstance@@KPBD@Z ; CWeaponTrace::SetWeaponInstance
PUBLIC	?SetPosition@CWeaponTrace@@QAEXMMM@Z		; CWeaponTrace::SetPosition
PUBLIC	?SetRotation@CWeaponTrace@@QAEXM@Z		; CWeaponTrace::SetRotation
PUBLIC	?SetLifeTime@CWeaponTrace@@QAEXM@Z		; CWeaponTrace::SetLifeTime
PUBLIC	?SetSamplingTime@CWeaponTrace@@QAEXM@Z		; CWeaponTrace::SetSamplingTime
PUBLIC	?Update@CWeaponTrace@@QAEXM@Z			; CWeaponTrace::Update
PUBLIC	?Render@CWeaponTrace@@QAEXXZ			; CWeaponTrace::Render
PUBLIC	?Initialize@CWeaponTrace@@QAEXXZ		; CWeaponTrace::Initialize
PUBLIC	?BuildVertex@CWeaponTrace@@IAE_NXZ		; CWeaponTrace::BuildVertex
PUBLIC	?push_front@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAEX$$QAU?$pair@MUD3DXVECTOR3@@@2@@Z ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::push_front
PUBLIC	??1?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE@XZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::~deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >
PUBLIC	?erase@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@2@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@2@0@Z ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::erase
PUBLIC	?_Xlen@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@ABEXXZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Xlen
PUBLIC	?_Growmap@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@AAEXI@Z ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Growmap
PUBLIC	?_Tidy@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@AAEXXZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Tidy
PUBLIC	??1?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAE@XZ ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::~vector<SPDTVertex,std::allocator<SPDTVertex> >
PUBLIC	?_Xlength@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@CAXXZ ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Xlength
PUBLIC	??_GCWeaponTrace@@UAEPAXI@Z			; CWeaponTrace::`scalar deleting destructor'
PUBLIC	??1?$CDynamicPool@VCWeaponTrace@@@@UAE@XZ	; CDynamicPool<CWeaponTrace>::~CDynamicPool<CWeaponTrace>
PUBLIC	?Delete@?$CDynamicPool@VCWeaponTrace@@@@KAXPAVCWeaponTrace@@@Z ; CDynamicPool<CWeaponTrace>::Delete
PUBLIC	?_Xlength@?$vector@PAVCWeaponTrace@@V?$allocator@PAVCWeaponTrace@@@std@@@std@@CAXXZ ; std::vector<CWeaponTrace *,std::allocator<CWeaponTrace *> >::_Xlength
PUBLIC	??$_Emplace_reallocate@ABUSPDTVertex@@@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@AAEPAUSPDTVertex@@QAU2@ABU2@@Z ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Emplace_reallocate<SPDTVertex const &>
PUBLIC	??$_Emplace_reallocate@ABQAVCWeaponTrace@@@?$vector@PAVCWeaponTrace@@V?$allocator@PAVCWeaponTrace@@@std@@@std@@AAEPAPAVCWeaponTrace@@QAPAV2@ABQAV2@@Z ; std::vector<CWeaponTrace *,std::allocator<CWeaponTrace *> >::_Emplace_reallocate<CWeaponTrace * const &>
PUBLIC	??$uninitialized_copy@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0PAPAU10@@Z ; std::uninitialized_copy<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *>
PUBLIC	??$_Uninitialized_value_construct_n_unchecked1@PAPAU?$pair@MUD3DXVECTOR3@@@std@@I@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@I@Z ; std::_Uninitialized_value_construct_n_unchecked1<std::pair<float,D3DXVECTOR3> * *,unsigned int>
PUBLIC	??$_Zero_range@PAPAU?$pair@MUD3DXVECTOR3@@@std@@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0@Z ; std::_Zero_range<std::pair<float,D3DXVECTOR3> * *>
PUBLIC	??$_Copy_memmove@PAUSPDTVertex@@PAU1@@std@@YAPAUSPDTVertex@@PAU1@00@Z ; std::_Copy_memmove<SPDTVertex *,SPDTVertex *>
PUBLIC	??$_Copy_memmove@PAPAVCWeaponTrace@@PAPAV1@@std@@YAPAPAVCWeaponTrace@@PAPAV1@00@Z ; std::_Copy_memmove<CWeaponTrace * *,CWeaponTrace * *>
PUBLIC	??$_Copy_memmove@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@00@Z ; std::_Copy_memmove<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
PUBLIC	?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
PUBLIC	?ms_kPool@CWeaponTrace@@1V?$CDynamicPool@VCWeaponTrace@@@@A ; CWeaponTrace::ms_kPool
PUBLIC	??_7CWeaponTrace@@6B@				; CWeaponTrace::`vftable'
PUBLIC	??_C@_0BA@NCBBOAJD@lot_ade10?92?4tga@		; `string'
PUBLIC	??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@	; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CWeaponTrace@@6B@				; CWeaponTrace::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCWeaponTrace@@@8			; CWeaponTrace `RTTI Type Descriptor'
PUBLIC	??_R3CWeaponTrace@@8				; CWeaponTrace::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CWeaponTrace@@8				; CWeaponTrace::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CWeaponTrace@@8			; CWeaponTrace::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@0000000000000000
PUBLIC	__real@38d1b717
PUBLIC	__real@3c8efa35
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@3fb99999a0000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@4004000000000000
PUBLIC	__real@40400000
PUBLIC	__real@40800000
PUBLIC	__real@437f0000
PUBLIC	__real@c0000000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_D3DXMatrixMultiply@12:PROC
EXTRN	_D3DXMatrixTranslation@16:PROC
EXTRN	_D3DXMatrixRotationZ@8:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?fMAX@@YAMMM@Z:PROC				; fMAX
EXTRN	?GetCurrentSecond@CTimer@@QAEMXZ:PROC		; CTimer::GetCurrentSecond
EXTRN	??0CGraphicImageInstance@@QAE@XZ:PROC		; CGraphicImageInstance::CGraphicImageInstance
EXTRN	??1CGraphicImageInstance@@UAE@XZ:PROC		; CGraphicImageInstance::~CGraphicImageInstance
EXTRN	?SetImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z:PROC ; CGraphicImageInstance::SetImagePointer
EXTRN	?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z:PROC ; CResourceManager::GetResourcePointer
EXTRN	?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; CStateManager::SaveRenderState
EXTRN	?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z:PROC ; CStateManager::RestoreRenderState
EXTRN	?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; CStateManager::SetRenderState
EXTRN	?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z:PROC ; CStateManager::SetTexture
EXTRN	?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z:PROC ; CStateManager::SetTextureStageState
EXTRN	?SaveVertexShader@CStateManager@@QAEXK@Z:PROC	; CStateManager::SaveVertexShader
EXTRN	?RestoreVertexShader@CStateManager@@QAEXXZ:PROC	; CStateManager::RestoreVertexShader
EXTRN	?SaveTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z:PROC ; CStateManager::SaveTransform
EXTRN	?RestoreTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@@Z:PROC ; CStateManager::RestoreTransform
EXTRN	?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z:PROC ; CStateManager::DrawPrimitiveUP
EXTRN	?Update@CGraphicObjectInstance@@QAEXXZ:PROC	; CGraphicObjectInstance::Update
EXTRN	?DeformNoSkin@CGraphicThingInstance@@QAEXXZ:PROC ; CGraphicThingInstance::DeformNoSkin
EXTRN	?GetBoundBox@CGraphicThingInstance@@QAEHKPAUD3DXVECTOR3@@0@Z:PROC ; CGraphicThingInstance::GetBoundBox
EXTRN	?GetBoneMatrix@CGraphicThingInstance@@QAEHKKPAPAUD3DXMATRIX@@@Z:PROC ; CGraphicThingInstance::GetBoneMatrix
EXTRN	?GetCompositeBoneMatrix@CGraphicThingInstance@@QAEHKKPAPAUD3DXMATRIX@@@Z:PROC ; CGraphicThingInstance::GetCompositeBoneMatrix
EXTRN	??_ECWeaponTrace@@UAEPAXI@Z:PROC		; CWeaponTrace::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__chkstk:PROC
EXTRN	__ftol3:PROC
EXTRN	__libm_sse2_sqrt_precise:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A DD 01H DUP (?) ; CSingleton<CTimer>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A DD 01H DUP (?) ; CSingleton<CResourceManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A DD 01H DUP (?) ; CSingleton<CStateManager>::ms_singleton
_BSS	ENDS
CRT$XCU	SEGMENT
??ms_kPool$initializer$@CWeaponTrace@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@CWeaponTrace@@1V?$CDynamicPool@VCWeaponTrace@@@@A@@YAXXZ ; ??ms_kPool$initializer$@CWeaponTrace@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT __real@c0000000
CONST	SEGMENT
__real@c0000000 DD 0c0000000r			; -2
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@4004000000000000
CONST	SEGMENT
__real@4004000000000000 DQ 04004000000000000r	; 2.5
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fb99999a0000000
CONST	SEGMENT
__real@3fb99999a0000000 DQ 03fb99999a0000000r	; 0.1
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3c8efa35
CONST	SEGMENT
__real@3c8efa35 DD 03c8efa35r			; 0.0174533
CONST	ENDS
;	COMDAT __real@38d1b717
CONST	SEGMENT
__real@38d1b717 DD 038d1b717r			; 0.0001
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CWeaponTrace@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CWeaponTrace@@8 DD FLAT:??_R0?AVCWeaponTrace@@@8 ; CWeaponTrace::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CWeaponTrace@@8
rdata$r	ENDS
;	COMDAT ??_R2CWeaponTrace@@8
rdata$r	SEGMENT
??_R2CWeaponTrace@@8 DD FLAT:??_R1A@?0A@EA@CWeaponTrace@@8 ; CWeaponTrace::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CWeaponTrace@@8
rdata$r	SEGMENT
??_R3CWeaponTrace@@8 DD 00H				; CWeaponTrace::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CWeaponTrace@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCWeaponTrace@@@8
data$rs	SEGMENT
??_R0?AVCWeaponTrace@@@8 DD FLAT:??_7type_info@@6B@	; CWeaponTrace `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCWeaponTrace@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CWeaponTrace@@6B@
rdata$r	SEGMENT
??_R4CWeaponTrace@@6B@ DD 00H				; CWeaponTrace::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCWeaponTrace@@@8
	DD	FLAT:??_R3CWeaponTrace@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@
CONST	SEGMENT
??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@ DB 'deque<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NCBBOAJD@lot_ade10?92?4tga@
CONST	SEGMENT
??_C@_0BA@NCBBOAJD@lot_ade10?92?4tga@ DB 'lot_ade10-2.tga', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7CWeaponTrace@@6B@
CONST	SEGMENT
??_7CWeaponTrace@@6B@ DD FLAT:??_R4CWeaponTrace@@6B@	; CWeaponTrace::`vftable'
	DD	FLAT:??_ECWeaponTrace@@UAEPAXI@Z
CONST	ENDS
_DATA	SEGMENT
?ms_kPool@CWeaponTrace@@1V?$CDynamicPool@VCWeaponTrace@@@@A DD FLAT:??_7?$CDynamicPool@VCWeaponTrace@@@@6B@ ; CWeaponTrace::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Alloc@?$CDynamicPool@VCWeaponTrace@@@@QAEPAVCWeaponTrace@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Alloc@?$CDynamicPool@VCWeaponTrace@@@@QAEPAVCWeaponTrace@@XZ$0
__ehfuncinfo$?Alloc@?$CDynamicPool@VCWeaponTrace@@@@QAEPAVCWeaponTrace@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Alloc@?$CDynamicPool@VCWeaponTrace@@@@QAEPAVCWeaponTrace@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?BuildVertex@CWeaponTrace@@IAE_NXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?BuildVertex@CWeaponTrace@@IAE_NXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?BuildVertex@CWeaponTrace@@IAE_NXZ$1
__ehfuncinfo$?BuildVertex@CWeaponTrace@@IAE_NXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?BuildVertex@CWeaponTrace@@IAE_NXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CWeaponTrace@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CWeaponTrace@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CWeaponTrace@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CWeaponTrace@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CWeaponTrace@@QAE@XZ$3
__ehfuncinfo$??0CWeaponTrace@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0CWeaponTrace@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?New@CWeaponTrace@@SAPAV1@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?New@CWeaponTrace@@SAPAV1@XZ$0
__ehfuncinfo$?New@CWeaponTrace@@SAPAV1@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?New@CWeaponTrace@@SAPAV1@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@00@Z PROC ; std::_Copy_memmove<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *>, COMDAT

; 4526 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4527 :     auto _FirstPtr              = _To_address(_First);
; 4528 :     auto _LastPtr               = _To_address(_Last);
; 4529 :     auto _DestPtr               = _To_address(_Dest);
; 4530 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4531 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4532 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4533 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4535 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4536 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4537 :     } else {
; 4538 :         return _Dest + (_LastPtr - _FirstPtr);
; 4539 :     }
; 4540 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@00@Z ENDP ; std::_Copy_memmove<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCWeaponTrace@@PAPAV1@@std@@YAPAPAVCWeaponTrace@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCWeaponTrace@@PAPAV1@@std@@YAPAPAVCWeaponTrace@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CWeaponTrace * *,CWeaponTrace * *>, COMDAT

; 4526 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4527 :     auto _FirstPtr              = _To_address(_First);
; 4528 :     auto _LastPtr               = _To_address(_Last);
; 4529 :     auto _DestPtr               = _To_address(_Dest);
; 4530 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4531 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4532 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4533 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4535 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4536 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4537 :     } else {
; 4538 :         return _Dest + (_LastPtr - _FirstPtr);
; 4539 :     }
; 4540 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAVCWeaponTrace@@PAPAV1@@std@@YAPAPAVCWeaponTrace@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CWeaponTrace * *,CWeaponTrace * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$_Copy_memmove@PAUSPDTVertex@@PAU1@@std@@YAPAUSPDTVertex@@PAU1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAUSPDTVertex@@PAU1@@std@@YAPAUSPDTVertex@@PAU1@00@Z PROC ; std::_Copy_memmove<SPDTVertex *,SPDTVertex *>, COMDAT

; 4526 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4527 :     auto _FirstPtr              = _To_address(_First);
; 4528 :     auto _LastPtr               = _To_address(_Last);
; 4529 :     auto _DestPtr               = _To_address(_Dest);
; 4530 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4531 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4532 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4533 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4535 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4536 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4537 :     } else {
; 4538 :         return _Dest + (_LastPtr - _FirstPtr);
; 4539 :     }
; 4540 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAUSPDTVertex@@PAU1@@std@@YAPAUSPDTVertex@@PAU1@00@Z ENDP ; std::_Copy_memmove<SPDTVertex *,SPDTVertex *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$_Zero_range@PAPAU?$pair@MUD3DXVECTOR3@@@std@@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Zero_range@PAPAU?$pair@MUD3DXVECTOR3@@@std@@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0@Z PROC ; std::_Zero_range<std::pair<float,D3DXVECTOR3> * *>, COMDAT

; 2017 : _Ptr _Zero_range(const _Ptr _First, const _Ptr _Last) { // fill [_First, _Last) with zeroes

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2018 :     char* const _First_ch = reinterpret_cast<char*>(_To_address(_First));
; 2019 :     char* const _Last_ch  = reinterpret_cast<char*>(_To_address(_Last));
; 2020 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	51		 push	 ecx
  0000c	6a 00		 push	 0
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 _memset

; 2021 :     return _Last;

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2022 : }

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Zero_range@PAPAU?$pair@MUD3DXVECTOR3@@@std@@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0@Z ENDP ; std::_Zero_range<std::pair<float,D3DXVECTOR3> * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n_unchecked1@PAPAU?$pair@MUD3DXVECTOR3@@@std@@I@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@I@Z
_TEXT	SEGMENT
__UFirst$ = 8						; size = 4
__Count$ = 12						; size = 4
??$_Uninitialized_value_construct_n_unchecked1@PAPAU?$pair@MUD3DXVECTOR3@@@std@@I@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@I@Z PROC ; std::_Uninitialized_value_construct_n_unchecked1<std::pair<float,D3DXVECTOR3> * *,unsigned int>, COMDAT

; 2049 : _NoThrowFwdIt _Uninitialized_value_construct_n_unchecked1(_NoThrowFwdIt _UFirst, _Diff _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2050 :     // value-initialize all elements in [_UFirst, _UFirst + _Count)
; 2051 :     _STL_INTERNAL_CHECK(_Count >= 0);
; 2052 :     if constexpr (_Use_memset_value_construct_v<_NoThrowFwdIt>) {
; 2053 :         return _Zero_range(_UFirst, _UFirst + _Count);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __UFirst$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00009	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0000c	89 45 0c	 mov	 DWORD PTR __Count$[ebp], eax
  0000f	89 4d 08	 mov	 DWORD PTR __UFirst$[ebp], ecx

; 2054 :     } else {
; 2055 :         _Uninitialized_backout<_NoThrowFwdIt> _Backout{_UFirst};
; 2056 :         for (; 0 < _Count; --_Count) {
; 2057 :             _Backout._Emplace_back();
; 2058 :         }
; 2059 : 
; 2060 :         return _Backout._Release();
; 2061 :     }
; 2062 : }

  00012	5d		 pop	 ebp

; 2050 :     // value-initialize all elements in [_UFirst, _UFirst + _Count)
; 2051 :     _STL_INTERNAL_CHECK(_Count >= 0);
; 2052 :     if constexpr (_Use_memset_value_construct_v<_NoThrowFwdIt>) {
; 2053 :         return _Zero_range(_UFirst, _UFirst + _Count);

  00013	e9 00 00 00 00	 jmp	 ??$_Zero_range@PAPAU?$pair@MUD3DXVECTOR3@@@std@@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0@Z ; std::_Zero_range<std::pair<float,D3DXVECTOR3> * *>
??$_Uninitialized_value_construct_n_unchecked1@PAPAU?$pair@MUD3DXVECTOR3@@@std@@I@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@I@Z ENDP ; std::_Uninitialized_value_construct_n_unchecked1<std::pair<float,D3DXVECTOR3> * *,unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$uninitialized_copy@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0PAPAU10@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$uninitialized_copy@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0PAPAU10@@Z PROC ; std::uninitialized_copy<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *>, COMDAT

; 1915 : _NoThrowFwdIt uninitialized_copy(const _InIt _First, const _InIt _Last, _NoThrowFwdIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1916 :     // copy [_First, _Last) to raw [_Dest, ...)
; 1917 :     _Adl_verify_range(_First, _Last);
; 1918 :     auto _UFirst      = _Get_unwrapped(_First);
; 1919 :     const auto _ULast = _Get_unwrapped(_Last);
; 1920 :     auto _UDest       = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
; 1921 :     _Seek_wrapped(_Dest, _Uninitialized_copy_unchecked(_UFirst, _ULast, _UDest));
; 1922 :     return _Dest;
; 1923 : }

  00003	5d		 pop	 ebp

; 1902 :             return _Copy_memmove(_First, _Last, _Dest);

  00004	e9 00 00 00 00	 jmp	 ??$_Copy_memmove@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@00@Z ; std::_Copy_memmove<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *>
??$uninitialized_copy@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0PAPAU10@@Z ENDP ; std::uninitialized_copy<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCWeaponTrace@@@?$vector@PAVCWeaponTrace@@V?$allocator@PAVCWeaponTrace@@@std@@@std@@AAEPAPAVCWeaponTrace@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
__Newsize$1$ = -12					; size = 4
tv607 = -8						; size = 4
tv590 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCWeaponTrace@@@?$vector@PAVCWeaponTrace@@V?$allocator@PAVCWeaponTrace@@@std@@@std@@AAEPAPAVCWeaponTrace@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CWeaponTrace *,std::allocator<CWeaponTrace *> >::_Emplace_reallocate<CWeaponTrace * const &>, COMDAT
; _this$ = ecx

; 812  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 813  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 814  :         _Alty& _Al        = _Getal();
; 815  :         auto& _My_data    = _Mypair._Myval2;
; 816  :         pointer& _Myfirst = _My_data._Myfirst;
; 817  :         pointer& _Mylast  = _My_data._Mylast;
; 818  : 
; 819  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 820  : 
; 821  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	2b d9		 sub	 ebx, ecx

; 822  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c1		 sub	 eax, ecx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 823  : 
; 824  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 0f 01 00
	00		 je	 $LN96@Emplace_re

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 826  :         }
; 827  : 
; 828  :         const size_type _Newsize     = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b d1		 sub	 edx, ecx

; 826  :         }
; 827  : 
; 828  :         const size_type _Newsize     = _Oldsize + 1;

  00030	89 7d f4	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 fa 02	 sar	 edx, 2

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b ca		 mov	 ecx, edx
  0003d	d1 e9		 shr	 ecx, 1
  0003f	2b c1		 sub	 eax, ecx
  00041	3b d0		 cmp	 edx, eax
  00043	76 15		 jbe	 SHORT $LN12@Emplace_re

; 1967 :             return _Max; // geometric growth would overflow

  00045	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004a	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1967 :             return _Max; // geometric growth would overflow

  0004b	89 45 f8	 mov	 DWORD PTR tv607[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00053	83 c4 04	 add	 esp, 4
  00056	8b f8		 mov	 edi, eax
  00058	eb 47		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1970 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005a	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 70   :         if (_Count > _Max_possible) {

  0005d	8b cf		 mov	 ecx, edi
  0005f	3b c7		 cmp	 eax, edi
  00061	0f 43 c8	 cmovae	 ecx, eax
  00064	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  0006a	0f 87 cc 00 00
	00		 ja	 $LN97@Emplace_re

; 72   :         }
; 73   :     }
; 74   : 
; 75   :     return _Count * _Ty_size;

  00070	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  00077	89 45 f8	 mov	 DWORD PTR tv607[ebp], eax

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0007a	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0007f	72 0d		 jb	 SHORT $LN24@Emplace_re

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00087	83 c4 04	 add	 esp, 4
  0008a	8b f8		 mov	 edi, eax
  0008c	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  0008e	85 c0		 test	 eax, eax
  00090	74 0d		 je	 SHORT $LN25@Emplace_re

; 87   :         return ::operator new(_Bytes);

  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00098	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  0009b	8b f8		 mov	 edi, eax
  0009d	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  0009f	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 836  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000a1	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000a4	8d 0c 9f	 lea	 ecx, DWORD PTR [edi+ebx*4]

; 837  :         _Constructed_first = _Newvec + _Whereoff;
; 838  : 
; 839  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000a7	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  000aa	89 4d fc	 mov	 DWORD PTR tv590[ebp], ecx
  000ad	8b 00		 mov	 eax, DWORD PTR [eax]
  000af	89 01		 mov	 DWORD PTR [ecx], eax
  000b1	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000b4	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000b6	3b d8		 cmp	 ebx, eax
  000b8	75 07		 jne	 SHORT $LN4@Emplace_re

; 845  :         } else { // provide basic guarantee

  000ba	8b 5d fc	 mov	 ebx, DWORD PTR tv590[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000bd	8b d7		 mov	 edx, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 845  :         } else { // provide basic guarantee

  000bf	eb 16		 jmp	 SHORT $LN52@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000c1	57		 push	 edi
  000c2	53		 push	 ebx
  000c3	51		 push	 ecx
  000c4	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCWeaponTrace@@PAPAV1@@std@@YAPAPAVCWeaponTrace@@PAPAV1@00@Z ; std::_Copy_memmove<CWeaponTrace * *,CWeaponTrace * *>
  000c9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000cc	8b cb		 mov	 ecx, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000ce	8b 5d fc	 mov	 ebx, DWORD PTR tv590[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000d1	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000d4	8d 53 04	 lea	 edx, DWORD PTR [ebx+4]
$LN52@Emplace_re:
  000d7	52		 push	 edx
  000d8	50		 push	 eax
  000d9	51		 push	 ecx
  000da	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCWeaponTrace@@PAPAV1@@std@@YAPAPAVCWeaponTrace@@PAPAV1@00@Z ; std::_Copy_memmove<CWeaponTrace * *,CWeaponTrace * *>

; 2023 :         if (_Myfirst) { // destroy and deallocate old array

  000df	8b 06		 mov	 eax, DWORD PTR [esi]

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000e1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2023 :         if (_Myfirst) { // destroy and deallocate old array

  000e4	85 c0		 test	 eax, eax
  000e6	74 2c		 je	 SHORT $LN70@Emplace_re

; 2024 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2025 :             _ASAN_VECTOR_REMOVE;
; 2026 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e8	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000eb	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ed	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000f0	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f6	72 12		 jb	 SHORT $LN80@Emplace_re

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f8	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000fb	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000fe	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00100	83 c0 fc	 add	 eax, -4			; fffffffcH
  00103	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00106	77 2a		 ja	 SHORT $LN77@Emplace_re

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00108	8b c2		 mov	 eax, edx
$LN80@Emplace_re:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0010a	51		 push	 ecx
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00111	83 c4 08	 add	 esp, 8
$LN70@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2030 :         _Mylast  = _Newvec + _Newsize;

  00114	8b 45 f4	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  00117	89 3e		 mov	 DWORD PTR [esi], edi
  00119	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]

; 849  :         }
; 850  :         _CATCH_ALL
; 851  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 852  :         _Al.deallocate(_Newvec, _Newcapacity);
; 853  :         _RERAISE;
; 854  :         _CATCH_END
; 855  : 
; 856  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 857  :         return _Newvec + _Whereoff;

  0011c	8b c3		 mov	 eax, ebx

; 2030 :         _Mylast  = _Newvec + _Newsize;

  0011e	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 2031 :         _Myend   = _Newvec + _Newcapacity;

  00121	8b 4d f8	 mov	 ecx, DWORD PTR tv607[ebp]
  00124	03 cf		 add	 ecx, edi

; 858  :     }

  00126	5f		 pop	 edi

; 2031 :         _Myend   = _Newvec + _Newcapacity;

  00127	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 858  :     }

  0012a	5e		 pop	 esi
  0012b	5b		 pop	 ebx
  0012c	8b e5		 mov	 esp, ebp
  0012e	5d		 pop	 ebp
  0012f	c2 08 00	 ret	 8
$LN77@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00132	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN96@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 825  :             _Xlength();

  00137	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCWeaponTrace@@V?$allocator@PAVCWeaponTrace@@@std@@@std@@CAXXZ ; std::vector<CWeaponTrace *,std::allocator<CWeaponTrace *> >::_Xlength
$LN97@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 71   :             _Throw_bad_array_new_length(); // multiply overflow

  0013c	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN94@Emplace_re:
  00141	cc		 int	 3
??$_Emplace_reallocate@ABQAVCWeaponTrace@@@?$vector@PAVCWeaponTrace@@V?$allocator@PAVCWeaponTrace@@@std@@@std@@AAEPAPAVCWeaponTrace@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CWeaponTrace *,std::allocator<CWeaponTrace *> >::_Emplace_reallocate<CWeaponTrace * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??$_Emplace_reallocate@ABUSPDTVertex@@@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@AAEPAUSPDTVertex@@QAU2@ABU2@@Z
_TEXT	SEGMENT
__Oldsize$1$ = -12					; size = 4
tv557 = -8						; size = 4
__Whereoff$1$ = -8					; size = 4
tv574 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABUSPDTVertex@@@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@AAEPAUSPDTVertex@@QAU2@ABU2@@Z PROC ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Emplace_reallocate<SPDTVertex const &>, COMDAT
; _this$ = ecx

; 812  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 813  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 814  :         _Alty& _Al        = _Getal();
; 815  :         auto& _My_data    = _Mypair._Myval2;
; 816  :         pointer& _Myfirst = _My_data._Myfirst;
; 817  :         pointer& _Mylast  = _My_data._Mylast;
; 818  : 
; 819  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 820  : 
; 821  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00006	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  00009	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000e	53		 push	 ebx
  0000f	8b d9		 mov	 ebx, ecx
  00011	57		 push	 edi
  00012	8b 3b		 mov	 edi, DWORD PTR [ebx]
  00014	2b d7		 sub	 edx, edi

; 822  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00016	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00019	f7 ea		 imul	 edx
  0001b	2b cf		 sub	 ecx, edi
  0001d	c1 fa 02	 sar	 edx, 2
  00020	8b c2		 mov	 eax, edx
  00022	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00025	03 c2		 add	 eax, edx
  00027	89 45 f8	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  0002a	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0002f	f7 e9		 imul	 ecx
  00031	c1 fa 02	 sar	 edx, 2
  00034	8b c2		 mov	 eax, edx
  00036	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00039	03 c2		 add	 eax, edx
  0003b	89 45 f4	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 823  : 
; 824  :         if (_Oldsize == max_size()) {

  0003e	3d aa aa aa 0a	 cmp	 eax, 178956970		; 0aaaaaaaH
  00043	0f 84 40 01 00
	00		 je	 $LN104@Emplace_re

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00049	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  0004c	2b cf		 sub	 ecx, edi
  0004e	56		 push	 esi

; 826  :         }
; 827  : 
; 828  :         const size_type _Newsize     = _Oldsize + 1;

  0004f	8d 70 01	 lea	 esi, DWORD PTR [eax+1]

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00052	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00057	f7 e9		 imul	 ecx

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00059	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0005e	c1 fa 02	 sar	 edx, 2
  00061	8b ca		 mov	 ecx, edx
  00063	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00066	03 ca		 add	 ecx, edx

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00068	8b d1		 mov	 edx, ecx
  0006a	d1 ea		 shr	 edx, 1
  0006c	2b c2		 sub	 eax, edx
  0006e	3b c8		 cmp	 ecx, eax
  00070	76 15		 jbe	 SHORT $LN12@Emplace_re

; 1967 :             return _Max; // geometric growth would overflow

  00072	b8 f0 ff ff ff	 mov	 eax, -16		; fffffff0H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00077	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1967 :             return _Max; // geometric growth would overflow

  00078	89 45 fc	 mov	 DWORD PTR tv574[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007b	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00080	83 c4 04	 add	 esp, 4
  00083	8b f8		 mov	 edi, eax
  00085	eb 46		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1970 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00087	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 70   :         if (_Count > _Max_possible) {

  0008a	8b ce		 mov	 ecx, esi
  0008c	3b c6		 cmp	 eax, esi
  0008e	0f 43 c8	 cmovae	 ecx, eax
  00091	81 f9 aa aa aa
	0a		 cmp	 ecx, 178956970		; 0aaaaaaaH
  00097	0f 87 f1 00 00
	00		 ja	 $LN105@Emplace_re

; 72   :         }
; 73   :     }
; 74   : 
; 75   :     return _Count * _Ty_size;

  0009d	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
  000a0	c1 e0 03	 shl	 eax, 3
  000a3	89 45 fc	 mov	 DWORD PTR tv574[ebp], eax

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000a6	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000ab	72 0d		 jb	 SHORT $LN24@Emplace_re

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000ad	50		 push	 eax
  000ae	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000b3	83 c4 04	 add	 esp, 4
  000b6	8b f8		 mov	 edi, eax
  000b8	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  000ba	85 c0		 test	 eax, eax
  000bc	74 0d		 je	 SHORT $LN25@Emplace_re

; 87   :         return ::operator new(_Bytes);

  000be	50		 push	 eax
  000bf	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000c4	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  000c7	8b f8		 mov	 edi, eax
  000c9	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  000cb	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 836  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000cd	8b 45 f8	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]

; 839  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000d0	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  000d3	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000d6	8d 34 c7	 lea	 esi, DWORD PTR [edi+eax*8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 719  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  000d9	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 836  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000dc	89 75 f8	 mov	 DWORD PTR tv557[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 719  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  000df	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  000e2	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  000e5	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  000ea	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 839  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000ef	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  000f2	8b 03		 mov	 eax, DWORD PTR [ebx]
  000f4	3b d1		 cmp	 edx, ecx
  000f6	75 04		 jne	 SHORT $LN4@Emplace_re
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000f8	8b f7		 mov	 esi, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 845  :         } else { // provide basic guarantee

  000fa	eb 14		 jmp	 SHORT $LN58@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000fc	57		 push	 edi
  000fd	52		 push	 edx
  000fe	50		 push	 eax
  000ff	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAUSPDTVertex@@PAU1@@std@@YAPAUSPDTVertex@@PAU1@00@Z ; std::_Copy_memmove<SPDTVertex *,SPDTVertex *>
  00104	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00107	83 c4 0c	 add	 esp, 12			; 0000000cH
  0010a	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  0010d	83 c6 18	 add	 esi, 24			; 00000018H
$LN58@Emplace_re:
  00110	56		 push	 esi
  00111	51		 push	 ecx
  00112	50		 push	 eax
  00113	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAUSPDTVertex@@PAU1@@std@@YAPAUSPDTVertex@@PAU1@00@Z ; std::_Copy_memmove<SPDTVertex *,SPDTVertex *>

; 2023 :         if (_Myfirst) { // destroy and deallocate old array

  00118	8b 33		 mov	 esi, DWORD PTR [ebx]

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  0011a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2023 :         if (_Myfirst) { // destroy and deallocate old array

  0011d	85 f6		 test	 esi, esi
  0011f	74 40		 je	 SHORT $LN78@Emplace_re

; 2024 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2025 :             _ASAN_VECTOR_REMOVE;
; 2026 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00121	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00124	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00129	2b ce		 sub	 ecx, esi
  0012b	f7 e9		 imul	 ecx
  0012d	c1 fa 02	 sar	 edx, 2
  00130	8b c2		 mov	 eax, edx
  00132	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00135	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00137	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  0013a	c1 e1 03	 shl	 ecx, 3

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0013d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00143	72 12		 jb	 SHORT $LN88@Emplace_re

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00145	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00148	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0014b	2b f2		 sub	 esi, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0014d	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00150	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00153	77 2f		 ja	 SHORT $LN85@Emplace_re

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00155	8b f2		 mov	 esi, edx
$LN88@Emplace_re:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00157	51		 push	 ecx
  00158	56		 push	 esi
  00159	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0015e	83 c4 08	 add	 esp, 8
$LN78@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2030 :         _Mylast  = _Newvec + _Newsize;

  00161	8b 45 f4	 mov	 eax, DWORD PTR __Oldsize$1$[ebp]
  00164	40		 inc	 eax
  00165	89 3b		 mov	 DWORD PTR [ebx], edi

; 849  :         }
; 850  :         _CATCH_ALL
; 851  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 852  :         _Al.deallocate(_Newvec, _Newcapacity);
; 853  :         _RERAISE;
; 854  :         _CATCH_END
; 855  : 
; 856  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 857  :         return _Newvec + _Whereoff;

  00167	5e		 pop	 esi

; 2030 :         _Mylast  = _Newvec + _Newsize;

  00168	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]

; 849  :         }
; 850  :         _CATCH_ALL
; 851  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 852  :         _Al.deallocate(_Newvec, _Newcapacity);
; 853  :         _RERAISE;
; 854  :         _CATCH_END
; 855  : 
; 856  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 857  :         return _Newvec + _Whereoff;

  0016b	8b 45 f8	 mov	 eax, DWORD PTR tv557[ebp]

; 2030 :         _Mylast  = _Newvec + _Newsize;

  0016e	8d 0c cf	 lea	 ecx, DWORD PTR [edi+ecx*8]
  00171	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx

; 2031 :         _Myend   = _Newvec + _Newcapacity;

  00174	8b 4d fc	 mov	 ecx, DWORD PTR tv574[ebp]
  00177	03 cf		 add	 ecx, edi

; 858  :     }

  00179	5f		 pop	 edi

; 2031 :         _Myend   = _Newvec + _Newcapacity;

  0017a	89 4b 08	 mov	 DWORD PTR [ebx+8], ecx

; 858  :     }

  0017d	5b		 pop	 ebx
  0017e	8b e5		 mov	 esp, ebp
  00180	5d		 pop	 ebp
  00181	c2 08 00	 ret	 8
$LN85@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00184	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN104@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 825  :             _Xlength();

  00189	e8 00 00 00 00	 call	 ?_Xlength@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@CAXXZ ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Xlength
$LN105@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 71   :             _Throw_bad_array_new_length(); // multiply overflow

  0018e	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN102@Emplace_re:
  00193	cc		 int	 3
??$_Emplace_reallocate@ABUSPDTVertex@@@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@AAEPAUSPDTVertex@@QAU2@ABU2@@Z ENDP ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Emplace_reallocate<SPDTVertex const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@CWeaponTrace@@1V?$CDynamicPool@VCWeaponTrace@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@CWeaponTrace@@1V?$CDynamicPool@VCWeaponTrace@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CWeaponTrace::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CWeaponTrace@@1V?$CDynamicPool@VCWeaponTrace@@@@A ; CWeaponTrace::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPool@VCWeaponTrace@@@@UAE@XZ ; CDynamicPool<CWeaponTrace>::~CDynamicPool<CWeaponTrace>
??__F?ms_kPool@CWeaponTrace@@1V?$CDynamicPool@VCWeaponTrace@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CWeaponTrace::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
;	COMDAT ??__E?ms_kPool@CWeaponTrace@@1V?$CDynamicPool@VCWeaponTrace@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@CWeaponTrace@@1V?$CDynamicPool@VCWeaponTrace@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CWeaponTrace::ms_kPool'', COMDAT

; 7    : CDynamicPool<CWeaponTrace> CWeaponTrace::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@CWeaponTrace@@1V?$CDynamicPool@VCWeaponTrace@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CWeaponTrace::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@CWeaponTrace@@1V?$CDynamicPool@VCWeaponTrace@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CWeaponTrace::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPool@VCWeaponTrace@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPool@VCWeaponTrace@@@@UAEPAXI@Z PROC	; CDynamicPool<CWeaponTrace>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPool@VCWeaponTrace@@@@UAE@XZ ; CDynamicPool<CWeaponTrace>::~CDynamicPool<CWeaponTrace>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPool@VCWeaponTrace@@@@UAEPAXI@Z ENDP	; CDynamicPool<CWeaponTrace>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCWeaponTrace@@V?$allocator@PAVCWeaponTrace@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCWeaponTrace@@V?$allocator@PAVCWeaponTrace@@@std@@@std@@CAXXZ PROC ; std::vector<CWeaponTrace *,std::allocator<CWeaponTrace *> >::_Xlength, COMDAT

; 2138 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCWeaponTrace@@V?$allocator@PAVCWeaponTrace@@@std@@@std@@CAXXZ ENDP ; std::vector<CWeaponTrace *,std::allocator<CWeaponTrace *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPool@VCWeaponTrace@@@@KAXPAVCWeaponTrace@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPool@VCWeaponTrace@@@@KAXPAVCWeaponTrace@@@Z PROC ; CDynamicPool<CWeaponTrace>::Delete, COMDAT

; 109  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 110  : 			delete pkData;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _pkData$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 06		 je	 SHORT $LN3@Delete
  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	6a 01		 push	 1
  0000e	ff 10		 call	 DWORD PTR [eax]
$LN3@Delete:

; 111  : 		}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?Delete@?$CDynamicPool@VCWeaponTrace@@@@KAXPAVCWeaponTrace@@@Z ENDP ; CDynamicPool<CWeaponTrace>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPool@VCWeaponTrace@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPool@VCWeaponTrace@@@@UAE@XZ PROC		; CDynamicPool<CWeaponTrace>::~CDynamicPool<CWeaponTrace>, COMDAT
; _this$ = ecx

; 18   : 		{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDynamicPool@VCWeaponTrace@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000c	85 c0		 test	 eax, eax
  0000e	74 41		 je	 SHORT $LN6@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00013	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 12		 jb	 SHORT $LN22@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00020	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00023	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00026	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00028	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002e	77 6b		 ja	 SHORT $LN44@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b c2		 mov	 eax, edx
$LN22@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00039	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00040	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  00043	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 2051 :             _Myend   = nullptr;

  0004a	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN6@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00051	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00054	85 c0		 test	 eax, eax
  00056	74 41		 je	 SHORT $LN31@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00058	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0005b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0005d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00060	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00066	72 12		 jb	 SHORT $LN47@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00068	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0006b	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0006e	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00070	83 c0 fc	 add	 eax, -4			; fffffffcH
  00073	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00076	77 23		 ja	 SHORT $LN44@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00078	8b c2		 mov	 eax, edx
$LN47@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0007a	51		 push	 ecx
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00081	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00088	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  0008b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 2051 :             _Myend   = nullptr;

  00092	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN31@CDynamicPo:
  00099	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 26   : 		}

  0009a	c3		 ret	 0
$LN44@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0009b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN58@CDynamicPo:
  000a0	cc		 int	 3
??1?$CDynamicPool@VCWeaponTrace@@@@UAE@XZ ENDP		; CDynamicPool<CWeaponTrace>::~CDynamicPool<CWeaponTrace>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCWeaponTrace@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCWeaponTrace@@UAEPAXI@Z PROC			; CWeaponTrace::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CWeaponTrace@@UAE@XZ	; CWeaponTrace::~CWeaponTrace
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 8c 00 00 00	 push	 140			; 0000008cH
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCWeaponTrace@@UAEPAXI@Z ENDP			; CWeaponTrace::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?_Xlength@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@CAXXZ PROC ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Xlength, COMDAT

; 2138 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@CAXXZ ENDP ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??1?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAE@XZ PROC ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::~vector<SPDTVertex,std::allocator<SPDTVertex> >, COMDAT
; _this$ = ecx

; 766  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	85 f6		 test	 esi, esi
  00008	74 54		 je	 SHORT $LN4@vector

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000a	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0000d	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00012	2b ce		 sub	 ecx, esi
  00014	f7 e9		 imul	 ecx
  00016	c1 fa 02	 sar	 edx, 2
  00019	8b c2		 mov	 eax, edx
  0001b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001e	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00020	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00023	c1 e1 03	 shl	 ecx, 3

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00026	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002c	72 12		 jb	 SHORT $LN20@vector

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0002e	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00031	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00034	2b f2		 sub	 esi, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00036	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00039	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0003c	77 23		 ja	 SHORT $LN17@vector

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0003e	8b f2		 mov	 esi, edx
$LN20@vector:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00040	51		 push	 ecx
  00041	56		 push	 esi
  00042	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00047	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  0004d	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  00050	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 2051 :             _Myend   = nullptr;

  00057	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN4@vector:
  0005e	5f		 pop	 edi

; 772  :     }

  0005f	5e		 pop	 esi
  00060	c3		 ret	 0
$LN17@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00061	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN28@vector:
  00066	cc		 int	 3
??1?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAE@XZ ENDP ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::~vector<SPDTVertex,std::allocator<SPDTVertex> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
;	COMDAT ?_Tidy@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@AAEXXZ PROC ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Tidy, COMDAT
; _this$ = ecx

; 1584 :     void _Tidy() noexcept { // free all storage

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 1045 :         return _Mysize() == 0;

  00003	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00006	85 c0		 test	 eax, eax

; 1585 :         _Orphan_all();
; 1586 : 
; 1587 :         _Alpty _Almap(_Getal());
; 1588 :         while (!empty()) {

  00008	74 15		 je	 SHORT $LN61@Tidy
  0000a	66 0f 1f 44 00
	00		 npad	 6
$LL2@Tidy:

; 1208 :         if (--_Mysize() == 0) {

  00010	83 c0 ff	 add	 eax, -1
  00013	89 47 10	 mov	 DWORD PTR [edi+16], eax
  00016	75 f8		 jne	 SHORT $LL2@Tidy

; 1209 :             _Myoff() = 0;

  00018	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN61@Tidy:

; 1589 :             pop_back();
; 1590 :         }
; 1591 : 
; 1592 :         if (_Map() != nullptr) {

  0001f	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0
  00023	74 53		 je	 SHORT $LN60@Tidy

; 1593 :             for (size_type _Block = _Mapsize(); _Block > 0;) { // free storage for a block and destroy pointer

  00025	56		 push	 esi
  00026	8b 77 08	 mov	 esi, DWORD PTR [edi+8]
  00029	85 f6		 test	 esi, esi
  0002b	74 1d		 je	 SHORT $LN5@Tidy
  0002d	0f 1f 00	 npad	 3
$LL4@Tidy:

; 1594 :                 if (_Map()[--_Block]) { // free block

  00030	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00033	4e		 dec	 esi
  00034	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]
  00037	85 c0		 test	 eax, eax
  00039	74 0b		 je	 SHORT $LN41@Tidy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  0003b	6a 10		 push	 16			; 00000010H
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00043	83 c4 08	 add	 esp, 8
$LN41@Tidy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 1593 :             for (size_type _Block = _Mapsize(); _Block > 0;) { // free storage for a block and destroy pointer

  00046	85 f6		 test	 esi, esi
  00048	75 e6		 jne	 SHORT $LL4@Tidy
$LN5@Tidy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0004a	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0004d	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00050	c1 e1 02	 shl	 ecx, 2
  00053	5e		 pop	 esi

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00054	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0005a	72 12		 jb	 SHORT $LN33@Tidy

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0005c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0005f	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00062	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00064	83 c0 fc	 add	 eax, -4			; fffffffcH
  00067	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0006a	77 1c		 ja	 SHORT $LN30@Tidy

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0006c	8b c2		 mov	 eax, edx
$LN33@Tidy:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0006e	51		 push	 ecx
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00075	83 c4 08	 add	 esp, 8
$LN60@Tidy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 1603 :         _Mapsize() = 0;

  00078	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 1604 :         _Map()     = nullptr;

  0007f	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  00086	5f		 pop	 edi

; 1605 :     }

  00087	c3		 ret	 0
$LN30@Tidy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00088	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN70@Tidy:
  0008d	cc		 int	 3
?_Tidy@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@AAEXXZ ENDP ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
;	COMDAT ?_Growmap@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@AAEXI@Z
_TEXT	SEGMENT
tv468 = -4						; size = 4
$T1 = 8							; size = 4
__Count$ = 8						; size = 4
?_Growmap@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@AAEXI@Z PROC ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Growmap, COMDAT
; _this$ = ecx

; 1545 :     void _Growmap(size_type _Count) { // grow map by at least _Count pointers, _Mapsize() a power of 2

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 1546 :         static_assert(_Minimum_map_size > 1, "The _Xlen() test should always be performed.");
; 1547 : 
; 1548 :         _Alpty _Almap(_Getal());
; 1549 :         size_type _Newsize = _Mapsize() > 0 ? _Mapsize() : 1;

  00005	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00008	b8 01 00 00 00	 mov	 eax, 1
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	8b f9		 mov	 edi, ecx
  00011	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  00014	85 d2		 test	 edx, edx
  00016	0f 45 c2	 cmovne	 eax, edx
  00019	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@Growmap:

; 1550 :         while (_Newsize - _Mapsize() < _Count || _Newsize < _Minimum_map_size) {

  00020	8b f0		 mov	 esi, eax
  00022	2b f2		 sub	 esi, edx
  00024	3b f3		 cmp	 esi, ebx
  00026	72 05		 jb	 SHORT $LN4@Growmap
  00028	83 f8 08	 cmp	 eax, 8
  0002b	73 13		 jae	 SHORT $LN3@Growmap
$LN4@Growmap:

; 1551 :             // scale _Newsize to 2^N >= _Mapsize() + _Count
; 1552 :             if (max_size() / _Block_size - _Newsize < _Newsize) {

  0002d	b9 ff ff ff 0f	 mov	 ecx, 268435455		; 0fffffffH
  00032	2b c8		 sub	 ecx, eax
  00034	3b c8		 cmp	 ecx, eax
  00036	0f 82 fb 00 00
	00		 jb	 $LN46@Growmap

; 1554 :             }
; 1555 : 
; 1556 :             _Newsize *= 2;

  0003c	03 c0		 add	 eax, eax

; 1557 :         }

  0003e	eb e0		 jmp	 SHORT $LL2@Growmap
$LN3@Growmap:

; 1558 :         _Count = _Newsize - _Mapsize();
; 1559 : 
; 1560 :         size_type _Myboff = _Myoff() / _Block_size;

  00040	8b 5f 0c	 mov	 ebx, DWORD PTR [edi+12]
  00043	89 5d 08	 mov	 DWORD PTR $T1[ebp], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 70   :         if (_Count > _Max_possible) {

  00046	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  0004b	0f 87 ed 00 00
	00		 ja	 $LN61@Growmap

; 72   :         }
; 73   :     }
; 74   : 
; 75   :     return _Count * _Ty_size;

  00051	c1 e0 02	 shl	 eax, 2

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00054	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00059	72 0d		 jb	 SHORT $LN19@Growmap

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00061	83 c4 04	 add	 esp, 4
  00064	8b d8		 mov	 ebx, eax
  00066	eb 13		 jmp	 SHORT $LN18@Growmap
$LN19@Growmap:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  00068	85 c0		 test	 eax, eax
  0006a	74 0d		 je	 SHORT $LN20@Growmap

; 87   :         return ::operator new(_Bytes);

  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00072	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  00075	8b d8		 mov	 ebx, eax
  00077	eb 02		 jmp	 SHORT $LN18@Growmap
$LN20@Growmap:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  00079	33 db		 xor	 ebx, ebx
$LN18@Growmap:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 1562 :         _Mapptr _Myptr    = _Newmap + _Myboff;

  0007b	8b 55 08	 mov	 edx, DWORD PTR $T1[ebp]

; 1563 : 
; 1564 :         _Myptr = _STD uninitialized_copy(_Map() + _Myboff, _Map() + _Mapsize(), _Myptr); // copy initial to end

  0007e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00081	c1 e2 02	 shl	 edx, 2
  00084	89 55 fc	 mov	 DWORD PTR tv468[ebp], edx
  00087	8d 04 1a	 lea	 eax, DWORD PTR [edx+ebx]
  0008a	50		 push	 eax
  0008b	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0008e	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00091	50		 push	 eax
  00092	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
  00095	50		 push	 eax
  00096	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0PAPAU10@@Z ; std::uninitialized_copy<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *>
  0009b	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0009e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1565 :         if (_Myboff <= _Count) { // increment greater than offset of initial block

  000a1	50		 push	 eax
  000a2	39 75 08	 cmp	 DWORD PTR $T1[ebp], esi
  000a5	77 22		 ja	 SHORT $LN6@Growmap

; 1566 :             _Myptr = _STD uninitialized_copy(_Map(), _Map() + _Myboff, _Myptr); // copy rest of old

  000a7	8b 45 fc	 mov	 eax, DWORD PTR tv468[ebp]
  000aa	03 c1		 add	 eax, ecx
  000ac	50		 push	 eax
  000ad	51		 push	 ecx
  000ae	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0PAPAU10@@Z ; std::uninitialized_copy<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *>

; 1567 :             _Uninitialized_value_construct_n_unchecked1(_Myptr, _Count - _Myboff); // clear suffix of new

  000b3	8b ce		 mov	 ecx, esi
  000b5	2b 4d 08	 sub	 ecx, DWORD PTR $T1[ebp]
  000b8	51		 push	 ecx
  000b9	50		 push	 eax
  000ba	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n_unchecked1@PAPAU?$pair@MUD3DXVECTOR3@@@std@@I@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@I@Z ; std::_Uninitialized_value_construct_n_unchecked1<std::pair<float,D3DXVECTOR3> * *,unsigned int>

; 1568 :             _Uninitialized_value_construct_n_unchecked1(_Newmap, _Myboff); // clear prefix of new
; 1569 :         } else { // increment not greater than offset of initial block

  000bf	8b 45 08	 mov	 eax, DWORD PTR $T1[ebp]
  000c2	83 c4 14	 add	 esp, 20			; 00000014H
  000c5	8b cb		 mov	 ecx, ebx
  000c7	eb 24		 jmp	 SHORT $LN7@Growmap
$LN6@Growmap:

; 1570 :             _STD uninitialized_copy(_Map(), _Map() + _Count, _Myptr); // copy more old

  000c9	8d 04 b1	 lea	 eax, DWORD PTR [ecx+esi*4]
  000cc	50		 push	 eax
  000cd	51		 push	 ecx
  000ce	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0PAPAU10@@Z ; std::uninitialized_copy<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *>

; 1571 :             _Myptr = _STD uninitialized_copy(_Map() + _Count, _Map() + _Myboff, _Newmap); // copy rest of old

  000d3	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000d6	8b 45 fc	 mov	 eax, DWORD PTR tv468[ebp]
  000d9	03 c1		 add	 eax, ecx
  000db	53		 push	 ebx
  000dc	50		 push	 eax
  000dd	8d 04 b1	 lea	 eax, DWORD PTR [ecx+esi*4]
  000e0	50		 push	 eax
  000e1	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0PAPAU10@@Z ; std::uninitialized_copy<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *>

; 1572 :             _Uninitialized_value_construct_n_unchecked1(_Myptr, _Count); // clear rest to initial block

  000e6	8b c8		 mov	 ecx, eax
  000e8	83 c4 18	 add	 esp, 24			; 00000018H
  000eb	8b c6		 mov	 eax, esi
$LN7@Growmap:

; 1573 :         }
; 1574 : 
; 1575 :         if (_Map() != nullptr) {

  000ed	50		 push	 eax
  000ee	51		 push	 ecx
  000ef	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n_unchecked1@PAPAU?$pair@MUD3DXVECTOR3@@@std@@I@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@I@Z ; std::_Uninitialized_value_construct_n_unchecked1<std::pair<float,D3DXVECTOR3> * *,unsigned int>
  000f4	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000f7	83 c4 08	 add	 esp, 8
  000fa	85 c0		 test	 eax, eax
  000fc	74 2a		 je	 SHORT $LN31@Growmap
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000fe	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00101	c1 e1 02	 shl	 ecx, 2

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00104	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0010a	72 12		 jb	 SHORT $LN41@Growmap

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0010c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0010f	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00112	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00114	83 c0 fc	 add	 eax, -4			; fffffffcH
  00117	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0011a	77 27		 ja	 SHORT $LN38@Growmap

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0011c	8b c2		 mov	 eax, edx
$LN41@Growmap:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0011e	51		 push	 ecx
  0011f	50		 push	 eax
  00120	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00125	83 c4 08	 add	 esp, 8
$LN31@Growmap:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 1581 :         _Mapsize() += _Count;

  00128	01 77 08	 add	 DWORD PTR [edi+8], esi
  0012b	89 5f 04	 mov	 DWORD PTR [edi+4], ebx

; 1582 :     }

  0012e	5f		 pop	 edi
  0012f	5e		 pop	 esi
  00130	5b		 pop	 ebx
  00131	8b e5		 mov	 esp, ebp
  00133	5d		 pop	 ebp
  00134	c2 04 00	 ret	 4
$LN46@Growmap:

; 1553 :                 _Xlen(); // result too long

  00137	8b cf		 mov	 ecx, edi
  00139	e8 00 00 00 00	 call	 ?_Xlen@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@ABEXXZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Xlen
$LN61@Growmap:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 71   :             _Throw_bad_array_new_length(); // multiply overflow

  0013e	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN38@Growmap:

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00143	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN59@Growmap:
  00148	cc		 int	 3
?_Growmap@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@AAEXI@Z ENDP ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Growmap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
;	COMDAT ?_Xlen@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@ABEXXZ
_TEXT	SEGMENT
?_Xlen@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@ABEXXZ PROC ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Xlen, COMDAT
; _this$ = ecx

; 1538 :         _Xlength_error("deque<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@ABEXXZ ENDP ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
;	COMDAT ?erase@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@2@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
__Off$1$ = -40						; size = 4
_this$1$ = -36						; size = 4
__ULast$1$ = -28					; size = 4
$T8 = -20						; size = 4
$T9 = -16						; size = 4
$T10 = -16						; size = 4
__Count$1$ = -12					; size = 4
$T11 = -8						; size = 4
__Last$$sroa$930$1$ = -8				; size = 4
$T12 = -8						; size = 4
__UFirst$1$ = -4					; size = 4
$T13 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 12
__Last_arg$ = 24					; size = 12
?erase@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@2@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@2@0@Z PROC ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::erase, COMDAT
; _this$ = ecx

; 1403 :         is_nothrow_move_assignable_v<value_type>) /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	89 75 dc	 mov	 DWORD PTR _this$1$[ebp], esi
  0000d	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1284 :         if (_Parent) { // have a parent, do adoption

  0000e	85 f6		 test	 esi, esi
  00010	74 04		 je	 SHORT $LN72@erase

; 1285 :             _Myproxy = _Parent->_Myproxy;

  00012	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 1286 :         } else { // no future parent, just disown current parent

  00014	eb 02		 jmp	 SHORT $LN400@erase
$LN72@erase:

; 1287 :             _Myproxy = nullptr;

  00016	33 c9		 xor	 ecx, ecx
$LN400@erase:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 349  :         return static_cast<difference_type>(this->_Myoff - _Right._Myoff);

  00018	8b 5d 14	 mov	 ebx, DWORD PTR __First_arg$[ebp+8]
  0001b	8b d3		 mov	 edx, ebx

; 255  :     _Deque_const_iterator(_Size_type _Off, const _Container_base12* _Pdeque) noexcept : _Myoff(_Off) {

  0001d	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 349  :         return static_cast<difference_type>(this->_Myoff - _Right._Myoff);

  00020	2b d0		 sub	 edx, eax
  00022	89 55 d8	 mov	 DWORD PTR __Off$1$[ebp], edx
  00025	8b 55 20	 mov	 edx, DWORD PTR __Last_arg$[ebp+8]
  00028	8b fa		 mov	 edi, edx
  0002a	2b fb		 sub	 edi, ebx

; 255  :     _Deque_const_iterator(_Size_type _Off, const _Container_base12* _Pdeque) noexcept : _Myoff(_Off) {

  0002c	89 4d f8	 mov	 DWORD PTR __Last$$sroa$930$1$[ebp], ecx
  0002f	89 45 fc	 mov	 DWORD PTR __UFirst$1$[ebp], eax

; 349  :         return static_cast<difference_type>(this->_Myoff - _Right._Myoff);

  00032	89 7d f4	 mov	 DWORD PTR __Count$1$[ebp], edi

; 1404 :         iterator _First = _Make_iter(_First_arg);
; 1405 :         iterator _Last  = _Make_iter(_Last_arg);
; 1406 : 
; 1407 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1408 :         _STL_VERIFY(_First <= _Last && begin() <= _First && _Last <= end(), "deque erase iterator outside range");
; 1409 :         _Adl_verify_range(_First, _Last);
; 1410 : 
; 1411 :         auto _Off   = static_cast<size_type>(_First - begin());
; 1412 :         auto _Count = static_cast<size_type>(_Last - _First);
; 1413 :         bool _Moved = _Off > 0 && _Off + _Count < _Mysize();
; 1414 : 
; 1415 : #else // _ITERATOR_DEBUG_LEVEL == 2
; 1416 :         auto _Off   = static_cast<size_type>(_First - begin());
; 1417 :         auto _Count = static_cast<size_type>(_Last - _First);
; 1418 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1419 : 
; 1420 :         if (_Count == 0) {

  00035	75 18		 jne	 SHORT $LN8@erase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1299 :     mutable _Iterator_base12* _Mynextiter = nullptr;

  00037	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1255 :         _Myproxy = _Right._Myproxy;

  0003a	89 08		 mov	 DWORD PTR [eax], ecx
  0003c	89 58 08	 mov	 DWORD PTR [eax+8], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 1443 :     }

  0003f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 1c 00	 ret	 28			; 0000001cH
$LN8@erase:

; 939  :         return iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

  0004f	8b f8		 mov	 edi, eax
  00051	03 7e 10	 add	 edi, DWORD PTR [esi+16]
  00054	89 7d e4	 mov	 DWORD PTR __ULast$1$[ebp], edi

; 349  :         return static_cast<difference_type>(this->_Myoff - _Right._Myoff);

  00057	2b fa		 sub	 edi, edx

; 1421 :             return _First;
; 1422 :         }
; 1423 : 
; 1424 :         if (_Off < static_cast<size_type>(end() - _Last)) { // closer to front

  00059	39 7d d8	 cmp	 DWORD PTR __Off$1$[ebp], edi
  0005c	8b 7d f4	 mov	 edi, DWORD PTR __Count$1$[ebp]
  0005f	0f 83 87 00 00
	00		 jae	 $LN9@erase

; 517  :         return {this->_Myoff, this->_Getcont()};

  00065	8b 06		 mov	 eax, DWORD PTR [esi]
  00067	85 c9		 test	 ecx, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1293 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

  00069	74 04		 je	 SHORT $LN187@erase
  0006b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0006d	eb 02		 jmp	 SHORT $LN402@erase
$LN187@erase:
  0006f	33 c0		 xor	 eax, eax
$LN402@erase:
  00071	89 45 f0	 mov	 DWORD PTR $T10[ebp], eax
  00074	8b 45 f8	 mov	 eax, DWORD PTR __Last$$sroa$930$1$[ebp]
  00077	85 c0		 test	 eax, eax
  00079	74 04		 je	 SHORT $LN205@erase
  0007b	8b 00		 mov	 eax, DWORD PTR [eax]
  0007d	eb 02		 jmp	 SHORT $LN403@erase
$LN205@erase:
  0007f	33 c0		 xor	 eax, eax
$LN403@erase:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 4954 :     _Seek_wrapped(_Dest, _Move_backward_unchecked(_UFirst, _ULast, _UDest));

  00081	89 45 f8	 mov	 DWORD PTR $T12[ebp], eax
  00084	39 5d fc	 cmp	 DWORD PTR __UFirst$1$[ebp], ebx

; 4940 :     while (_First != _Last) {

  00087	74 47		 je	 SHORT $LL397@erase
  00089	8b 75 f0	 mov	 esi, DWORD PTR $T10[ebp]
  0008c	8b fa		 mov	 edi, edx
  0008e	66 90		 npad	 2
$LL212@erase:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00090	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 67   :         --_Myoff;

  00093	4b		 dec	 ebx

; 168  :         return const_cast<reference>(_Mybase::operator*());

  00094	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00097	49		 dec	 ecx
  00098	23 cb		 and	 ecx, ebx

; 67   :         --_Myoff;

  0009a	4f		 dec	 edi

; 168  :         return const_cast<reference>(_Mybase::operator*());

  0009b	8b 14 88	 mov	 edx, DWORD PTR [eax+ecx*4]

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0009e	8b 45 f8	 mov	 eax, DWORD PTR $T12[ebp]
  000a1	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 168  :         return const_cast<reference>(_Mybase::operator*());

  000a4	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  000a7	49		 dec	 ecx
  000a8	23 cf		 and	 ecx, edi

; 168  :         return const_cast<reference>(_Mybase::operator*());

  000aa	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 340  :         first  = _STD forward<_Ty1>(_Right.first);

  000ad	8b 02		 mov	 eax, DWORD PTR [edx]
  000af	89 01		 mov	 DWORD PTR [ecx], eax

; 341  :         second = _STD forward<_Ty2>(_Right.second);

  000b1	f3 0f 7e 42 04	 movq	 xmm0, QWORD PTR [edx+4]
  000b6	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0
  000bb	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  000be	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  000c1	3b 5d fc	 cmp	 ebx, DWORD PTR __UFirst$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 4940 :     while (_First != _Last) {

  000c4	75 ca		 jne	 SHORT $LL212@erase
  000c6	8b 75 dc	 mov	 esi, DWORD PTR _this$1$[ebp]
  000c9	8b 7d f4	 mov	 edi, DWORD PTR __Count$1$[ebp]
  000cc	0f 1f 40 00	 npad	 4
$LL397@erase:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 1138 :         if (--_Mysize() == 0) {

  000d0	83 46 10 ff	 add	 DWORD PTR [esi+16], -1
  000d4	75 09		 jne	 SHORT $LN41@erase

; 1139 :             _Myoff() = 0;

  000d6	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 1140 :         } else {

  000dd	eb 03		 jmp	 SHORT $LN2@erase
$LN41@erase:

; 1141 :             ++_Myoff();

  000df	ff 46 0c	 inc	 DWORD PTR [esi+12]
$LN2@erase:

; 1425 :             _STD move_backward(begin(), _First, _Last); // copy over hole
; 1426 :             for (; _Count > 0; --_Count) {

  000e2	83 ef 01	 sub	 edi, 1
  000e5	75 e9		 jne	 SHORT $LL397@erase
  000e7	e9 8b 00 00 00	 jmp	 $LN6@erase
$LN9@erase:

; 517  :         return {this->_Myoff, this->_Getcont()};

  000ec	8b 45 f8	 mov	 eax, DWORD PTR __Last$$sroa$930$1$[ebp]
  000ef	85 c0		 test	 eax, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1293 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

  000f1	74 04		 je	 SHORT $LN287@erase
  000f3	8b 00		 mov	 eax, DWORD PTR [eax]
  000f5	eb 02		 jmp	 SHORT $LN404@erase
$LN287@erase:
  000f7	33 c0		 xor	 eax, eax
$LN404@erase:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 517  :         return {this->_Myoff, this->_Getcont()};

  000f9	89 45 f8	 mov	 DWORD PTR $T11[ebp], eax
  000fc	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1293 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

  000fe	85 c9		 test	 ecx, ecx
  00100	74 04		 je	 SHORT $LN317@erase
  00102	8b 01		 mov	 eax, DWORD PTR [ecx]
  00104	eb 02		 jmp	 SHORT $LN405@erase
$LN317@erase:
  00106	33 c0		 xor	 eax, eax
$LN405@erase:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 4912 :     _Seek_wrapped(_Dest, _STD _Move_unchecked(_UFirst, _ULast, _UDest));

  00108	89 45 f0	 mov	 DWORD PTR $T9[ebp], eax
  0010b	3b 55 e4	 cmp	 edx, DWORD PTR __ULast$1$[ebp]

; 4898 :     for (; _First != _Last; ++_Dest, (void) ++_First) {

  0010e	74 55		 je	 SHORT $LL399@erase
  00110	8b 75 f8	 mov	 esi, DWORD PTR $T11[ebp]
  00113	8b f8		 mov	 edi, eax
  00115	89 5d fc	 mov	 DWORD PTR $T13[ebp], ebx
  00118	89 55 ec	 mov	 DWORD PTR $T8[ebp], edx
  0011b	0f 1f 44 00 00	 npad	 5
$LL335@erase:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00120	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 168  :         return const_cast<reference>(_Mybase::operator*());

  00123	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00126	49		 dec	 ecx
  00127	23 ca		 and	 ecx, edx

; 168  :         return const_cast<reference>(_Mybase::operator*());

  00129	8b 14 88	 mov	 edx, DWORD PTR [eax+ecx*4]

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0012c	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]

; 168  :         return const_cast<reference>(_Mybase::operator*());

  0012f	8b 47 04	 mov	 eax, DWORD PTR [edi+4]

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00132	49		 dec	 ecx
  00133	23 cb		 and	 ecx, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 341  :         second = _STD forward<_Ty2>(_Right.second);

  00135	8b 5d fc	 mov	 ebx, DWORD PTR $T13[ebp]
  00138	43		 inc	 ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 56   :         ++_Myoff;

  00139	89 5d fc	 mov	 DWORD PTR $T13[ebp], ebx

; 168  :         return const_cast<reference>(_Mybase::operator*());

  0013c	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 340  :         first  = _STD forward<_Ty1>(_Right.first);

  0013f	8b 02		 mov	 eax, DWORD PTR [edx]
  00141	89 01		 mov	 DWORD PTR [ecx], eax

; 341  :         second = _STD forward<_Ty2>(_Right.second);

  00143	f3 0f 7e 42 04	 movq	 xmm0, QWORD PTR [edx+4]
  00148	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0
  0014d	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 56   :         ++_Myoff;

  00150	8b 55 ec	 mov	 edx, DWORD PTR $T8[ebp]
  00153	42		 inc	 edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 341  :         second = _STD forward<_Ty2>(_Right.second);

  00154	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 56   :         ++_Myoff;

  00157	89 55 ec	 mov	 DWORD PTR $T8[ebp], edx
  0015a	3b 55 e4	 cmp	 edx, DWORD PTR __ULast$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 4898 :     for (; _First != _Last; ++_Dest, (void) ++_First) {

  0015d	75 c1		 jne	 SHORT $LL335@erase
  0015f	8b 75 dc	 mov	 esi, DWORD PTR _this$1$[ebp]
  00162	8b 7d f4	 mov	 edi, DWORD PTR __Count$1$[ebp]
$LL399@erase:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 1208 :         if (--_Mysize() == 0) {

  00165	83 46 10 ff	 add	 DWORD PTR [esi+16], -1
  00169	75 07		 jne	 SHORT $LN5@erase

; 1209 :             _Myoff() = 0;

  0016b	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN5@erase:

; 1427 :                 pop_front(); // pop copied elements
; 1428 :             }
; 1429 :         } else { // closer to back
; 1430 :             _STD move(_Last, end(), _First); // copy over hole
; 1431 :             for (; _Count > 0; --_Count) {

  00172	83 ef 01	 sub	 edi, 1
  00175	75 ee		 jne	 SHORT $LL399@erase
$LN6@erase:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1299 :     mutable _Iterator_base12* _Mynextiter = nullptr;

  00177	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1285 :             _Myproxy = _Parent->_Myproxy;

  0017a	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 1443 :     }

  0017c	5f		 pop	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1255 :         _Myproxy = _Right._Myproxy;

  0017d	89 08		 mov	 DWORD PTR [eax], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 321  :         _Myoff += _Off;

  0017f	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00182	03 4d d8	 add	 ecx, DWORD PTR __Off$1$[ebp]

; 1443 :     }

  00185	5e		 pop	 esi

; 321  :         _Myoff += _Off;

  00186	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1443 :     }

  00189	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00190	5b		 pop	 ebx
  00191	8b e5		 mov	 esp, ebp
  00193	5d		 pop	 ebp
  00194	c2 1c 00	 ret	 28			; 0000001cH
?erase@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@2@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@2@0@Z ENDP ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
;	COMDAT ??1?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE@XZ PROC ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::~deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >, COMDAT
; _this$ = ecx

; 904  :     ~deque() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 905  :         _Tidy();

  00003	e8 00 00 00 00	 call	 ?_Tidy@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@AAEXXZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Tidy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 754  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00008	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  0000a	6a 08		 push	 8
  0000c	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 755  :     _Val         = static_cast<_Other&&>(_New_val);

  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00013	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00018	83 c4 08	 add	 esp, 8
  0001b	5e		 pop	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 908  :     }

  0001c	c3		 ret	 0
??1?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE@XZ ENDP ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::~deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
;	COMDAT ?push_front@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAEX$$QAU?$pair@MUD3DXVECTOR3@@@2@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_front@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAEX$$QAU?$pair@MUD3DXVECTOR3@@@2@@Z PROC ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::push_front, COMDAT
; _this$ = ecx

; 789  :     void push_front(_Ty&& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	57		 push	 edi

; 1167 :         if (_Myoff() % _Block_size == 0 && _Mapsize() <= (_Mysize() + _Block_size) / _Block_size) {

  00008	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000b	40		 inc	 eax
  0000c	39 46 08	 cmp	 DWORD PTR [esi+8], eax
  0000f	77 07		 ja	 SHORT $LN6@push_front

; 1168 :             _Growmap(1);

  00011	6a 01		 push	 1
  00013	e8 00 00 00 00	 call	 ?_Growmap@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@AAEXI@Z ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Growmap
$LN6@push_front:

; 1169 :         }
; 1170 :         _Myoff() &= _Mapsize() * _Block_size - 1;

  00018	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0001b	8b 7e 0c	 mov	 edi, DWORD PTR [esi+12]
  0001e	8d 48 ff	 lea	 ecx, DWORD PTR [eax-1]
  00021	23 f9		 and	 edi, ecx
  00023	89 7e 0c	 mov	 DWORD PTR [esi+12], edi

; 1171 :         size_type _Newoff      = _Myoff() != 0 ? _Myoff() : _Mapsize() * _Block_size;
; 1172 :         const size_type _Block = _Getblock(--_Newoff);

  00026	0f 44 f8	 cmove	 edi, eax

; 1173 :         if (_Map()[_Block] == nullptr) {

  00029	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002c	4f		 dec	 edi

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0002d	23 cf		 and	 ecx, edi

; 1173 :         if (_Map()[_Block] == nullptr) {

  0002f	8d 1c 8d 00 00
	00 00		 lea	 ebx, DWORD PTR [ecx*4]
  00036	83 3c 03 00	 cmp	 DWORD PTR [ebx+eax], 0
  0003a	75 10		 jne	 SHORT $LN7@push_front
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  0003c	6a 10		 push	 16			; 00000010H
  0003e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 1174 :             _Map()[_Block] = _Getal().allocate(_Block_size);

  00043	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  00046	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 1174 :             _Map()[_Block] = _Getal().allocate(_Block_size);

  00049	89 04 0b	 mov	 DWORD PTR [ebx+ecx], eax
$LN7@push_front:

; 1175 :         }
; 1176 : 
; 1177 :         _Alty_traits::construct(

  0004c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 719  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  0004f	8b 0c 03	 mov	 ecx, DWORD PTR [ebx+eax]
  00052	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  00055	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00058	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 1181 :         ++_Mysize();

  0005b	ff 46 10	 inc	 DWORD PTR [esi+16]
  0005e	89 7e 0c	 mov	 DWORD PTR [esi+12], edi
  00061	5f		 pop	 edi
  00062	5e		 pop	 esi
  00063	5b		 pop	 ebx

; 790  :         emplace_front(_STD move(_Val));
; 791  :     }

  00064	5d		 pop	 ebp
  00065	c2 04 00	 ret	 4
?push_front@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAEX$$QAU?$pair@MUD3DXVECTOR3@@@2@@Z ENDP ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::push_front
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
;	COMDAT ?BuildVertex@CWeaponTrace@@IAE_NXZ
_TEXT	SEGMENT
_v$25 = -6196						; size = 24
_m_ShortVertexVector$ = -6172				; size = 12
_Output$1$ = -6160					; size = 4
tv7451 = -6152						; size = 4
_a$26 = -6148						; size = 12
_b$27 = -6136						; size = 12
_m_LongVertexVector$ = -6124				; size = 12
_timebase$1$ = -6112					; size = 4
tv7286 = -6108						; size = 4
__First$ = -6104					; size = 8
__First$ = -6104					; size = 8
_dt$1$ = -6100						; size = 4
tv7475 = -6100						; size = 4
$T28 = -6096						; size = 4
_cc$1$ = -6092						; size = 4
tv7409 = -6092						; size = 4
_length$1$ = -6088					; size = 4
tv7289 = -6080						; size = 4
tv7241 = -6080						; size = 4
tv7492 = -6076						; size = 4
tv7490 = -6076						; size = 4
tv7491 = -6072						; size = 4
tv7489 = -6072						; size = 4
_n$1$ = -6068						; size = 4
_loop$1$ = -6064					; size = 4
_sp$1$ = -6060						; size = 4
_d$16$sroa$2387$1$ = -6056				; size = 4
_c$15$sroa$2391$1$ = -6052				; size = 4
_d$16$sroa$2389$1$ = -6048				; size = 4
$T29 = -6044						; size = 4
_base$1$ = -6044					; size = 4
_d$16$sroa$2388$1$ = -6040				; size = 4
_timenext$1$ = -6036					; size = 4
tv7422 = -6036						; size = 4
_f$1$ = -6032						; size = 4
_c$15$sroa$2390$1$ = -6032				; size = 4
_c$15$sroa$2392$1$ = -6028				; size = 4
_this$GSCopy$1$ = -6024					; size = 4
_t$1$ = -6020						; size = 4
_i$1$ = -6020						; size = 4
tv7243 = -6020						; size = 4
_stk$ = -6016						; size = 1200
_h$ = -4816						; size = 1200
_r$ = -3616						; size = 3600
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?BuildVertex@CWeaponTrace@@IAE_NXZ PROC			; CWeaponTrace::BuildVertex, COMDAT
; _this$ = ecx

; 122  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?BuildVertex@CWeaponTrace@@IAE_NXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 28 18 00 00	 mov	 eax, 6184		; 00001828H
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	56		 push	 esi
  00026	57		 push	 edi
  00027	50		 push	 eax
  00028	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00031	8b c1		 mov	 eax, ecx
  00033	89 85 78 e8 ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], eax

; 123  : 	const int max_size = 300;
; 124  : 	// calculate speed
; 125  : 	float h[max_size];
; 126  : 	float stk[max_size];
; 127  : 	int sp=0;
; 128  : 	D3DXVECTOR3 r[max_size];
; 129  : 
; 130  : 	if (m_LongTimePointList.size()<=1)

  00039	8b 78 2c	 mov	 edi, DWORD PTR [eax+44]
  0003c	33 f6		 xor	 esi, esi
  0003e	89 b5 54 e8 ff
	ff		 mov	 DWORD PTR _sp$1$[ebp], esi
  00044	83 ff 01	 cmp	 edi, 1
  00047	77 07		 ja	 SHORT $LN25@BuildVerte

; 131  : 		return false;

  00049	32 c0		 xor	 al, al
  0004b	e9 5b 0d 00 00	 jmp	 $LN1@BuildVerte
$LN25@BuildVerte:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 398  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00050	89 b5 e4 e7 ff
	ff		 mov	 DWORD PTR _m_ShortVertexVector$[ebp], esi
  00056	89 b5 e8 e7 ff
	ff		 mov	 DWORD PTR _m_ShortVertexVector$[ebp+4], esi
  0005c	89 b5 ec e7 ff
	ff		 mov	 DWORD PTR _m_ShortVertexVector$[ebp+8], esi
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 144  : 	std::vector<TPDTVertex> m_ShortVertexVector, m_LongVertexVector;

  00062	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 398  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00069	c7 85 14 e8 ff
	ff 00 00 00 00	 mov	 DWORD PTR _m_LongVertexVector$[ebp], 0
  00073	c7 85 18 e8 ff
	ff 00 00 00 00	 mov	 DWORD PTR _m_LongVertexVector$[ebp+4], 0
  0007d	c7 85 1c e8 ff
	ff 00 00 00 00	 mov	 DWORD PTR _m_LongVertexVector$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 955  :         return _Unchecked_iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

  00087	8b d7		 mov	 edx, edi
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 144  : 	std::vector<TPDTVertex> m_ShortVertexVector, m_LongVertexVector;

  00089	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 955  :         return _Unchecked_iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

  0008d	03 50 28	 add	 edx, DWORD PTR [eax+40]
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 146  : 	float length = min(m_fLifeTime, m_LongTimePointList.back().first);

  00090	8b 85 78 e8 ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 1105 :         return *_Prev_iter(_Unchecked_end());

  00096	89 95 2c e8 ff
	ff		 mov	 DWORD PTR __First$[ebp+4], edx
  0009c	8d 4a ff	 lea	 ecx, DWORD PTR [edx-1]
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 146  : 	float length = min(m_fLifeTime, m_LongTimePointList.back().first);

  0009f	f3 0f 10 50 3c	 movss	 xmm2, DWORD PTR [eax+60]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  000a4	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  000a7	48		 dec	 eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 146  : 	float length = min(m_fLifeTime, m_LongTimePointList.back().first);

  000a8	f3 0f 11 95 38
	e8 ff ff	 movss	 DWORD PTR _length$1$[ebp], xmm2
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  000b0	23 c8		 and	 ecx, eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 146  : 	float length = min(m_fLifeTime, m_LongTimePointList.back().first);

  000b2	8b 85 78 e8 ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  000b8	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  000bb	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  000be	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000c2	0f 2f c2	 comiss	 xmm0, xmm2
  000c5	77 25		 ja	 SHORT $LN32@BuildVerte
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  000c7	8b 8d 78 e8 ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]

; 1105 :         return *_Prev_iter(_Unchecked_end());

  000cd	89 95 2c e8 ff
	ff		 mov	 DWORD PTR __First$[ebp+4], edx
  000d3	4a		 dec	 edx

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  000d4	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  000d7	48		 dec	 eax
  000d8	23 d0		 and	 edx, eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 146  : 	float length = min(m_fLifeTime, m_LongTimePointList.back().first);

  000da	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  000dd	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  000e0	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000e4	f3 0f 11 85 38
	e8 ff ff	 movss	 DWORD PTR _length$1$[ebp], xmm0
$LN32@BuildVerte:

; 181  : 		r[n]-=r[n-1];

  000ec	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f000000
  000f4	8d 57 ff	 lea	 edx, DWORD PTR [edi-1]
  000f7	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR __real@40800000
  000ff	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  00102	f3 0f 10 3d 00
	00 00 00	 movss	 xmm7, DWORD PTR __real@3f800000
  0010a	8d 3c 52	 lea	 edi, DWORD PTR [edx+edx*2]
  0010d	33 c9		 xor	 ecx, ecx
  0010f	89 95 4c e8 ff
	ff		 mov	 DWORD PTR _n$1$[ebp], edx
  00115	89 8d 50 e8 ff
	ff		 mov	 DWORD PTR _loop$1$[ebp], ecx
  0011b	89 85 f8 e7 ff
	ff		 mov	 DWORD PTR tv7451[ebp], eax
$LL4@BuildVerte:

; 154  : 	{
; 155  : 		TTimePointList & Input = (loop) ? m_LongTimePointList : m_ShortTimePointList;
; 156  : 		std::vector<TPDTVertex> & Output = (loop) ? m_LongVertexVector : m_ShortVertexVector;

  00121	85 c9		 test	 ecx, ecx
  00123	8d b5 e4 e7 ff
	ff		 lea	 esi, DWORD PTR _m_ShortVertexVector$[ebp]
  00129	8d 85 14 e8 ff
	ff		 lea	 eax, DWORD PTR _m_LongVertexVector$[ebp]
  0012f	0f 44 c6	 cmove	 eax, esi

; 160  : 		for(i=0;i<n;++i)

  00132	8b b5 54 e8 ff
	ff		 mov	 esi, DWORD PTR _sp$1$[ebp]
  00138	89 85 f0 e7 ff
	ff		 mov	 DWORD PTR _Output$1$[ebp], eax
  0013e	33 c0		 xor	 eax, eax
  00140	89 85 7c e8 ff
	ff		 mov	 DWORD PTR _i$1$[ebp], eax
  00146	85 d2		 test	 edx, edx
  00148	0f 8e 50 01 00
	00		 jle	 $LN674@BuildVerte
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 947  :         return _Unchecked_iterator(_Myoff(), _STD addressof(_Get_data()));

  0014e	8b bd 78 e8 ff
	ff		 mov	 edi, DWORD PTR _this$GSCopy$1$[ebp]
  00154	85 c9		 test	 ecx, ecx
  00156	8b 95 50 e8 ff
	ff		 mov	 edx, DWORD PTR _loop$1$[ebp]
  0015c	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  00161	f3 0f 10 3d 00
	00 00 00	 movss	 xmm7, DWORD PTR __real@40400000
  00169	b8 28 00 00 00	 mov	 eax, 40			; 00000028H
  0016e	0f 44 c1	 cmove	 eax, ecx
  00171	be 24 00 00 00	 mov	 esi, 36			; 00000024H
  00176	85 d2		 test	 edx, edx
  00178	8b 0c 38	 mov	 ecx, DWORD PTR [eax+edi]
  0017b	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00180	0f 44 f0	 cmove	 esi, eax
  00183	89 8d 64 e8 ff
	ff		 mov	 DWORD PTR $T29[ebp], ecx
  00189	03 f7		 add	 esi, edi
  0018b	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00190	85 d2		 test	 edx, edx
  00192	89 b5 48 e8 ff
	ff		 mov	 DWORD PTR tv7491[ebp], esi
  00198	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0019d	0f 44 c2	 cmove	 eax, edx
  001a0	03 c7		 add	 eax, edi
  001a2	89 85 44 e8 ff
	ff		 mov	 DWORD PTR tv7492[ebp], eax
  001a8	8d 85 e8 f1 ff
	ff		 lea	 eax, DWORD PTR _r$[ebp+8]
  001ae	89 85 6c e8 ff
	ff		 mov	 DWORD PTR tv7422[ebp], eax
$LL7@BuildVerte:

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  001b4	8b 16		 mov	 edx, DWORD PTR [esi]
  001b6	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]

; 48   :         return _Mycont->_Map[_Block][_Off];

  001b9	8b 85 44 e8 ff
	ff		 mov	 eax, DWORD PTR tv7492[ebp]

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  001bf	4a		 dec	 edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 163  : 			r[i] = (Input[i+1].second - Input[i].second)*(3/h[i]);

  001c0	0f 28 d7	 movaps	 xmm2, xmm7
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 48   :         return _Mycont->_Map[_Block][_Off];

  001c3	8b 08		 mov	 ecx, DWORD PTR [eax]

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  001c5	8b c7		 mov	 eax, edi
  001c7	23 c2		 and	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 162  : 			h[i] = Input[i+1].first - Input[i].first;

  001c9	8b 34 81	 mov	 esi, DWORD PTR [ecx+eax*4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  001cc	8b 85 64 e8 ff
	ff		 mov	 eax, DWORD PTR $T29[ebp]
  001d2	23 c2		 and	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 160  : 		for(i=0;i<n;++i)

  001d4	8b 95 4c e8 ff
	ff		 mov	 edx, DWORD PTR _n$1$[ebp]

; 162  : 			h[i] = Input[i+1].first - Input[i].first;

  001da	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  001de	f3 0f 10 5e 08	 movss	 xmm3, DWORD PTR [esi+8]
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 162  : 			h[i] = Input[i+1].first - Input[i].first;

  001e3	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  001e6	8b 8d 7c e8 ff
	ff		 mov	 ecx, DWORD PTR _i$1$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  001ec	f3 0f 10 4e 0c	 movss	 xmm1, DWORD PTR [esi+12]
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 162  : 			h[i] = Input[i+1].first - Input[i].first;

  001f1	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  001f5	f3 0f 5c 58 08	 subss	 xmm3, DWORD PTR [eax+8]
  001fa	f3 0f 5c 48 0c	 subss	 xmm1, DWORD PTR [eax+12]
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 163  : 			r[i] = (Input[i+1].second - Input[i].second)*(3/h[i]);

  001ff	f3 0f 5e d0	 divss	 xmm2, xmm0
  00203	f3 0f 11 84 8d
	30 ed ff ff	 movss	 DWORD PTR _h$[ebp+ecx*4], xmm0
  0020c	41		 inc	 ecx
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0020d	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  00212	f3 0f 5c 40 04	 subss	 xmm0, DWORD PTR [eax+4]
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 163  : 			r[i] = (Input[i+1].second - Input[i].second)*(3/h[i]);

  00217	8b 85 6c e8 ff
	ff		 mov	 eax, DWORD PTR tv7422[ebp]
  0021d	8b b5 48 e8 ff
	ff		 mov	 esi, DWORD PTR tv7491[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00223	f3 0f 59 da	 mulss	 xmm3, xmm2
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 160  : 		for(i=0;i<n;++i)

  00227	89 8d 7c e8 ff
	ff		 mov	 DWORD PTR _i$1$[ebp], ecx
  0022d	8b cf		 mov	 ecx, edi

; 163  : 			r[i] = (Input[i+1].second - Input[i].second)*(3/h[i]);

  0022f	f3 0f 59 c2	 mulss	 xmm0, xmm2
  00233	89 8d 64 e8 ff
	ff		 mov	 DWORD PTR $T29[ebp], ecx
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 181  :     y = fy;

  00239	f3 0f 59 ca	 mulss	 xmm1, xmm2
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 163  : 			r[i] = (Input[i+1].second - Input[i].second)*(3/h[i]);

  0023d	f3 0f 11 40 f8	 movss	 DWORD PTR [eax-8], xmm0
  00242	f3 0f 11 58 fc	 movss	 DWORD PTR [eax-4], xmm3
  00247	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1
  0024b	83 c0 0c	 add	 eax, 12			; 0000000cH
  0024e	89 85 6c e8 ff
	ff		 mov	 DWORD PTR tv7422[ebp], eax
  00254	39 95 7c e8 ff
	ff		 cmp	 DWORD PTR _i$1$[ebp], edx
  0025a	0f 8c 54 ff ff
	ff		 jl	 $LL7@BuildVerte
  00260	8b b5 54 e8 ff
	ff		 mov	 esi, DWORD PTR _sp$1$[ebp]
  00266	8d 3c 52	 lea	 edi, DWORD PTR [edx+edx*2]
  00269	c7 84 bd e0 f1
	ff ff 00 00 00
	00		 mov	 DWORD PTR _r$[ebp+edi*4], 0
  00274	8b ca		 mov	 ecx, edx
  00276	c7 84 bd e4 f1
	ff ff 00 00 00
	00		 mov	 DWORD PTR _r$[ebp+edi*4+4], 0
  00281	c7 84 bd e8 f1
	ff ff 00 00 00
	00		 mov	 DWORD PTR _r$[ebp+edi*4+8], 0
  0028c	f3 0f 10 3d 00
	00 00 00	 movss	 xmm7, DWORD PTR __real@3f800000
  00294	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f000000
  0029c	eb 1b		 jmp	 SHORT $LN675@BuildVerte
$LN674@BuildVerte:

; 164  : 		}
; 165  : 		r[n] = D3DXVECTOR3(0.0f,0.0f,0.0f);

  0029e	89 84 bd e0 f1
	ff ff		 mov	 DWORD PTR _r$[ebp+edi*4], eax

; 166  : 		for(i=n;i>0;i--)

  002a5	8b ca		 mov	 ecx, edx
  002a7	89 84 bd e4 f1
	ff ff		 mov	 DWORD PTR _r$[ebp+edi*4+4], eax
  002ae	89 84 bd e8 f1
	ff ff		 mov	 DWORD PTR _r$[ebp+edi*4+8], eax
  002b5	85 d2		 test	 edx, edx
  002b7	7e 3b		 jle	 SHORT $LN9@BuildVerte
$LN675@BuildVerte:

; 164  : 		}
; 165  : 		r[n] = D3DXVECTOR3(0.0f,0.0f,0.0f);

  002b9	8d 84 bd dc f1
	ff ff		 lea	 eax, DWORD PTR _r$[ebp+edi*4-4]
$LL10@BuildVerte:
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  002c0	f3 0f 10 40 f8	 movss	 xmm0, DWORD PTR [eax-8]
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 166  : 		for(i=n;i>0;i--)

  002c5	49		 dec	 ecx
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  002c6	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  002cb	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 205  :     y += v.y;

  002d0	f3 0f 10 40 fc	 movss	 xmm0, DWORD PTR [eax-4]
  002d5	f3 0f 58 40 08	 addss	 xmm0, DWORD PTR [eax+8]
  002da	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 206  :     z += v.z;

  002df	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  002e4	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  002e8	f3 0f 11 40 0c	 movss	 DWORD PTR [eax+12], xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 166  : 		for(i=n;i>0;i--)

  002ed	83 e8 0c	 sub	 eax, 12			; 0000000cH
  002f0	85 c9		 test	 ecx, ecx
  002f2	7f cc		 jg	 SHORT $LL10@BuildVerte
$LN9@BuildVerte:
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 222  :     x *= f;

  002f4	f3 0f 10 85 e0
	f1 ff ff	 movss	 xmm0, DWORD PTR _r$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 171  : 		float rate = 0.5f;

  002fc	0f 28 f1	 movaps	 xmm6, xmm1
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 222  :     x *= f;

  002ff	f3 0f 59 c1	 mulss	 xmm0, xmm1
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 173  : 		stk[sp++] = rate;

  00303	c7 84 b5 80 e8
	ff ff 00 00 00
	3f		 mov	 DWORD PTR _stk$[ebp+esi*4], 1056964608 ; 3f000000H
  0030e	46		 inc	 esi
  0030f	89 b5 54 e8 ff
	ff		 mov	 DWORD PTR _sp$1$[ebp], esi
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 222  :     x *= f;

  00315	f3 0f 11 85 e0
	f1 ff ff	 movss	 DWORD PTR _r$[ebp], xmm0

; 223  :     y *= f;

  0031d	f3 0f 10 85 e4
	f1 ff ff	 movss	 xmm0, DWORD PTR _r$[ebp+4]
  00325	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00329	f3 0f 11 85 e4
	f1 ff ff	 movss	 DWORD PTR _r$[ebp+4], xmm0

; 224  :     z *= f;

  00331	f3 0f 10 85 e8
	f1 ff ff	 movss	 xmm0, DWORD PTR _r$[ebp+8]
  00339	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0033d	f3 0f 11 85 e8
	f1 ff ff	 movss	 DWORD PTR _r$[ebp+8], xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 174  : 		for(i=1;i<n;i++)

  00345	83 fa 01	 cmp	 edx, 1
  00348	7e 64		 jle	 SHORT $LN12@BuildVerte

; 171  : 		float rate = 0.5f;

  0034a	8d 85 f0 f1 ff
	ff		 lea	 eax, DWORD PTR _r$[ebp+16]
  00350	4a		 dec	 edx
$LL13@BuildVerte:

; 177  : 			rate = 1/(4-rate);

  00351	0f 28 c4	 movaps	 xmm0, xmm4
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 213  :     x -= v.x;

  00354	f3 0f 10 58 fc	 movss	 xmm3, DWORD PTR [eax-4]
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 177  : 			rate = 1/(4-rate);

  00359	f3 0f 5c c6	 subss	 xmm0, xmm6
  0035d	0f 28 f7	 movaps	 xmm6, xmm7
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 213  :     x -= v.x;

  00360	f3 0f 5c 58 f0	 subss	 xmm3, DWORD PTR [eax-16]
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 177  : 			rate = 1/(4-rate);

  00365	f3 0f 5e f0	 divss	 xmm6, xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 214  :     y -= v.y;

  00369	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]

; 222  :     x *= f;

  0036d	f3 0f 59 de	 mulss	 xmm3, xmm6
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 179  : 			stk[sp++]=rate;

  00371	f3 0f 11 b4 b5
	80 e8 ff ff	 movss	 DWORD PTR _stk$[ebp+esi*4], xmm6
  0037a	46		 inc	 esi
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 222  :     x *= f;

  0037b	f3 0f 11 58 fc	 movss	 DWORD PTR [eax-4], xmm3

; 214  :     y -= v.y;

  00380	f3 0f 5c 40 f4	 subss	 xmm0, DWORD PTR [eax-12]

; 223  :     y *= f;

  00385	f3 0f 59 c6	 mulss	 xmm0, xmm6
  00389	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 215  :     z -= v.z;

  0038d	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00392	f3 0f 5c 40 f8	 subss	 xmm0, DWORD PTR [eax-8]

; 224  :     z *= f;

  00397	f3 0f 59 c6	 mulss	 xmm0, xmm6
  0039b	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 174  : 		for(i=1;i<n;i++)

  003a0	83 c0 0c	 add	 eax, 12			; 0000000cH
  003a3	83 ea 01	 sub	 edx, 1
  003a6	75 a9		 jne	 SHORT $LL13@BuildVerte
  003a8	89 b5 54 e8 ff
	ff		 mov	 DWORD PTR _sp$1$[ebp], esi
$LN12@BuildVerte:

; 182  : 		rate = 1/(2-rate);

  003ae	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  003b6	0f 28 cf	 movaps	 xmm1, xmm7
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 213  :     x -= v.x;

  003b9	f3 0f 10 ac bd
	e0 f1 ff ff	 movss	 xmm5, DWORD PTR _r$[ebp+edi*4]
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 182  : 		rate = 1/(2-rate);

  003c2	f3 0f 5c c6	 subss	 xmm0, xmm6
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 213  :     x -= v.x;

  003c6	f3 0f 5c ac bd
	d4 f1 ff ff	 subss	 xmm5, DWORD PTR _r$[ebp+edi*4-12]

; 214  :     y -= v.y;

  003cf	f3 0f 10 a4 bd
	e4 f1 ff ff	 movss	 xmm4, DWORD PTR _r$[ebp+edi*4+4]

; 215  :     z -= v.z;

  003d8	f3 0f 10 9c bd
	e8 f1 ff ff	 movss	 xmm3, DWORD PTR _r$[ebp+edi*4+8]
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 181  : 		r[n]-=r[n-1];

  003e1	8b 8d f8 e7 ff
	ff		 mov	 ecx, DWORD PTR tv7451[ebp]

; 182  : 		rate = 1/(2-rate);

  003e7	f3 0f 5e c8	 divss	 xmm1, xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 213  :     x -= v.x;

  003eb	f3 0f 11 ac bd
	e0 f1 ff ff	 movss	 DWORD PTR _r$[ebp+edi*4], xmm5

; 222  :     x *= f;

  003f4	f3 0f 59 e9	 mulss	 xmm5, xmm1

; 214  :     y -= v.y;

  003f8	f3 0f 5c a4 bd
	d8 f1 ff ff	 subss	 xmm4, DWORD PTR _r$[ebp+edi*4-8]

; 222  :     x *= f;

  00401	f3 0f 11 ac bd
	e0 f1 ff ff	 movss	 DWORD PTR _r$[ebp+edi*4], xmm5

; 223  :     y *= f;

  0040a	f3 0f 59 e1	 mulss	 xmm4, xmm1
  0040e	f3 0f 11 a4 bd
	e4 f1 ff ff	 movss	 DWORD PTR _r$[ebp+edi*4+4], xmm4

; 215  :     z -= v.z;

  00417	f3 0f 5c 9c bd
	dc f1 ff ff	 subss	 xmm3, DWORD PTR _r$[ebp+edi*4-4]

; 224  :     z *= f;

  00420	f3 0f 59 d9	 mulss	 xmm3, xmm1
  00424	f3 0f 11 9c bd
	e8 f1 ff ff	 movss	 DWORD PTR _r$[ebp+edi*4+8], xmm3
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 185  : 		for(i=n-1;i>=0;i--)

  0042d	85 c9		 test	 ecx, ecx
  0042f	78 64		 js	 SHORT $LN15@BuildVerte

; 181  : 		r[n]-=r[n-1];

  00431	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
  00434	8d 84 85 e4 f1
	ff ff		 lea	 eax, DWORD PTR _r$[ebp+eax*4+4]
  0043b	0f 1f 44 00 00	 npad	 5
$LL16@BuildVerte:

; 186  : 		{
; 187  : 			r[i] -= stk[--sp] * r[i+1];

  00440	f3 0f 10 a4 b5
	7c e8 ff ff	 movss	 xmm4, DWORD PTR _stk$[ebp+esi*4-4]
  00449	4e		 dec	 esi
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 213  :     x -= v.x;

  0044a	f3 0f 10 40 fc	 movss	 xmm0, DWORD PTR [eax-4]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0044f	0f 28 cc	 movaps	 xmm1, xmm4
  00452	f3 0f 59 48 08	 mulss	 xmm1, DWORD PTR [eax+8]

; 213  :     x -= v.x;

  00457	f3 0f 5c c1	 subss	 xmm0, xmm1

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0045b	0f 28 cc	 movaps	 xmm1, xmm4

; 213  :     x -= v.x;

  0045e	f3 0f 11 40 fc	 movss	 DWORD PTR [eax-4], xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00463	f3 0f 59 48 0c	 mulss	 xmm1, DWORD PTR [eax+12]

; 214  :     y -= v.y;

  00468	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0046c	f3 0f 5c c1	 subss	 xmm0, xmm1
  00470	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00474	f3 0f 59 60 10	 mulss	 xmm4, DWORD PTR [eax+16]

; 215  :     z -= v.z;

  00479	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0047e	f3 0f 5c c4	 subss	 xmm0, xmm4
  00482	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 185  : 		for(i=n-1;i>=0;i--)

  00487	83 e8 0c	 sub	 eax, 12			; 0000000cH
  0048a	83 e9 01	 sub	 ecx, 1
  0048d	79 b1		 jns	 SHORT $LL16@BuildVerte
  0048f	89 b5 54 e8 ff
	ff		 mov	 DWORD PTR _sp$1$[ebp], esi
$LN15@BuildVerte:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 947  :         return _Unchecked_iterator(_Myoff(), _STD addressof(_Get_data()));

  00495	8b 8d 50 e8 ff
	ff		 mov	 ecx, DWORD PTR _loop$1$[ebp]
  0049b	ba 14 00 00 00	 mov	 edx, 20			; 00000014H
  004a0	8b bd 78 e8 ff
	ff		 mov	 edi, DWORD PTR _this$GSCopy$1$[ebp]
  004a6	85 c9		 test	 ecx, ecx
  004a8	b8 28 00 00 00	 mov	 eax, 40			; 00000028H
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 193  : 		float timebase=0,timenext=h[base], dt=m_fSamplingTime;

  004ad	f3 0f 10 a5 30
	ed ff ff	 movss	 xmm4, DWORD PTR _h$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 947  :         return _Unchecked_iterator(_Myoff(), _STD addressof(_Get_data()));

  004b5	0f 44 c2	 cmove	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 196  : 		c = ( 3*v3Tmp - r[base+1]*h[base] - (2*h[base])*r[base] )

  004b8	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 947  :         return _Unchecked_iterator(_Myoff(), _STD addressof(_Get_data()));

  004c0	03 c7		 add	 eax, edi
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  004c2	f3 0f 10 9d ec
	f1 ff ff	 movss	 xmm3, DWORD PTR _r$[ebp+12]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 947  :         return _Unchecked_iterator(_Myoff(), _STD addressof(_Get_data()));

  004ca	89 85 30 e8 ff
	ff		 mov	 DWORD PTR $T28[ebp], eax

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  004d0	85 c9		 test	 ecx, ecx
  004d2	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  004d7	f3 0f 11 9d 60
	e8 ff ff	 movss	 DWORD PTR _d$16$sroa$2389$1$[ebp], xmm3

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  004df	0f 28 f4	 movaps	 xmm6, xmm4
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 190  : 		int base = 0;

  004e2	c7 85 64 e8 ff
	ff 00 00 00 00	 mov	 DWORD PTR _base$1$[ebp], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 43   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

  004ec	8b 30		 mov	 esi, DWORD PTR [eax]
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 195  : 		b = r[base];

  004ee	0f 28 ec	 movaps	 xmm5, xmm4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  004f1	b8 24 00 00 00	 mov	 eax, 36			; 00000024H
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  004f6	f3 0f 59 f4	 mulss	 xmm6, xmm4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  004fa	0f 44 c2	 cmove	 eax, edx
  004fd	8b 14 38	 mov	 edx, DWORD PTR [eax+edi]
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 195  : 		b = r[base];

  00500	f3 0f 58 ec	 addss	 xmm5, xmm4
  00504	f3 0f 11 a5 6c
	e8 ff ff	 movss	 DWORD PTR _timenext$1$[ebp], xmm4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0050c	03 c7		 add	 eax, edi
  0050e	4a		 dec	 edx
  0050f	89 85 48 e8 ff
	ff		 mov	 DWORD PTR tv7489[ebp], eax

; 48   :         return _Mycont->_Map[_Block][_Off];

  00515	85 c9		 test	 ecx, ecx
  00517	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0051c	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00521	0f 44 c1	 cmove	 eax, ecx
  00524	8b 0c 38	 mov	 ecx, DWORD PTR [eax+edi]
  00527	03 c7		 add	 eax, edi
  00529	89 85 44 e8 ff
	ff		 mov	 DWORD PTR tv7490[ebp], eax

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0052f	8b c2		 mov	 eax, edx
  00531	23 c6		 and	 eax, esi
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 196  : 		c = ( 3*v3Tmp - r[base+1]*h[base] - (2*h[base])*r[base] )

  00533	f3 0f 5e ce	 divss	 xmm1, xmm6
  00537	8b 3c 81	 mov	 edi, DWORD PTR [ecx+eax*4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 78   :         _Myoff += _Off;

  0053a	8d 46 01	 lea	 eax, DWORD PTR [esi+1]

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0053d	23 c2		 and	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 192  : 		D3DXVECTOR3 v3Tmp = Input[base+1].second-Input[base].second;

  0053f	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00542	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  00547	f3 0f 5c 47 0c	 subss	 xmm0, DWORD PTR [edi+12]
  0054c	f3 0f 10 78 04	 movss	 xmm7, DWORD PTR [eax+4]
  00551	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [eax+8]
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 193  : 		float timebase=0,timenext=h[base], dt=m_fSamplingTime;

  00556	8b 85 78 e8 ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0055c	f3 0f 5c 7f 04	 subss	 xmm7, DWORD PTR [edi+4]
  00561	f3 0f 11 85 7c
	e8 ff ff	 movss	 DWORD PTR tv7243[ebp], xmm0
  00569	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 193  : 		float timebase=0,timenext=h[base], dt=m_fSamplingTime;

  0056c	f3 0f 11 85 20
	e8 ff ff	 movss	 DWORD PTR _timebase$1$[ebp], xmm0
  00574	f3 0f 10 40 40	 movss	 xmm0, DWORD PTR [eax+64]
  00579	f3 0f 11 85 2c
	e8 ff ff	 movss	 DWORD PTR _dt$1$[ebp], xmm0

; 194  : 		a = Input[base].second;

  00581	f3 0f 7e 47 04	 movq	 xmm0, QWORD PTR [edi+4]
  00586	66 0f d6 85 fc
	e7 ff ff	 movq	 QWORD PTR _a$26[ebp], xmm0

; 195  : 		b = r[base];

  0058e	f3 0f 7e 85 e0
	f1 ff ff	 movq	 xmm0, QWORD PTR _r$[ebp]
  00596	66 0f d6 85 08
	e8 ff ff	 movq	 QWORD PTR _b$27[ebp], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  0059e	0f 28 c7	 movaps	 xmm0, xmm7
  005a1	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40400000
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 194  : 		a = Input[base].second;

  005a9	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  005ac	f3 0f 5c 57 08	 subss	 xmm2, DWORD PTR [edi+8]
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 194  : 		a = Input[base].second;

  005b1	89 85 04 e8 ff
	ff		 mov	 DWORD PTR _a$26[ebp+8], eax
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  005b7	f3 0f 11 85 74
	e8 ff ff	 movss	 DWORD PTR _c$15$sroa$2392$1$[ebp], xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  005bf	0f 28 c4	 movaps	 xmm0, xmm4
  005c2	f3 0f 59 c3	 mulss	 xmm0, xmm3
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 195  : 		b = r[base];

  005c6	8b 85 e8 f1 ff
	ff		 mov	 eax, DWORD PTR _r$[ebp+8]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  005cc	f3 0f 10 9d 74
	e8 ff ff	 movss	 xmm3, DWORD PTR _c$15$sroa$2392$1$[ebp]
  005d4	f3 0f 11 95 40
	e8 ff ff	 movss	 DWORD PTR tv7241[ebp], xmm2

; 180  :     x = fx;

  005dc	f3 0f 59 15 00
	00 00 00	 mulss	 xmm2, DWORD PTR __real@40400000

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  005e4	f3 0f 5c d8	 subss	 xmm3, xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 195  : 		b = r[base];

  005e8	89 85 10 e8 ff
	ff		 mov	 DWORD PTR _b$27[ebp+8], eax
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  005ee	0f 28 c5	 movaps	 xmm0, xmm5
  005f1	f3 0f 59 85 e0
	f1 ff ff	 mulss	 xmm0, DWORD PTR _r$[ebp]

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  005f9	f3 0f 11 9d 74
	e8 ff ff	 movss	 DWORD PTR _c$15$sroa$2392$1$[ebp], xmm3

; 182  :     z = fz;

  00601	f3 0f 5c d8	 subss	 xmm3, xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 196  : 		c = ( 3*v3Tmp - r[base+1]*h[base] - (2*h[base])*r[base] )

  00605	0f 28 c3	 movaps	 xmm0, xmm3
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00608	f3 0f 11 9d 74
	e8 ff ff	 movss	 DWORD PTR _c$15$sroa$2392$1$[ebp], xmm3
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 196  : 		c = ( 3*v3Tmp - r[base+1]*h[base] - (2*h[base])*r[base] )

  00610	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00614	f3 0f 11 85 74
	e8 ff ff	 movss	 DWORD PTR _c$15$sroa$2392$1$[ebp], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  0061c	0f 28 c4	 movaps	 xmm0, xmm4
  0061f	f3 0f 59 85 f0
	f1 ff ff	 mulss	 xmm0, DWORD PTR _r$[ebp+16]

; 180  :     x = fx;

  00627	f3 0f 5c d0	 subss	 xmm2, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0062b	f3 0f 10 85 e4
	f1 ff ff	 movss	 xmm0, DWORD PTR _r$[ebp+4]

; 181  :     y = fy;

  00633	f3 0f 10 9d 7c
	e8 ff ff	 movss	 xmm3, DWORD PTR tv7243[ebp]
  0063b	f3 0f 59 1d 00
	00 00 00	 mulss	 xmm3, DWORD PTR __real@40400000

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00643	f3 0f 11 85 68
	e8 ff ff	 movss	 DWORD PTR _d$16$sroa$2388$1$[ebp], xmm0
  0064b	f3 0f 59 c5	 mulss	 xmm0, xmm5

; 182  :     z = fz;

  0064f	f3 0f 59 3d 00
	00 00 00	 mulss	 xmm7, DWORD PTR __real@c0000000

; 180  :     x = fx;

  00657	f3 0f 5c d0	 subss	 xmm2, xmm0

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  0065b	0f 28 c4	 movaps	 xmm0, xmm4
  0065e	f3 0f 59 85 f4
	f1 ff ff	 mulss	 xmm0, DWORD PTR _r$[ebp+20]

; 181  :     y = fy;

  00666	f3 0f 5c d8	 subss	 xmm3, xmm0

; 180  :     x = fx;

  0066a	f3 0f 59 d1	 mulss	 xmm2, xmm1

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0066e	f3 0f 10 85 e8
	f1 ff ff	 movss	 xmm0, DWORD PTR _r$[ebp+8]
  00676	f3 0f 11 85 58
	e8 ff ff	 movss	 DWORD PTR _d$16$sroa$2387$1$[ebp], xmm0
  0067e	f3 0f 59 c5	 mulss	 xmm0, xmm5

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00682	0f 28 ec	 movaps	 xmm5, xmm4

; 180  :     x = fx;

  00685	f3 0f 11 95 5c
	e8 ff ff	 movss	 DWORD PTR _c$15$sroa$2391$1$[ebp], xmm2

; 181  :     y = fy;

  0068d	f3 0f 5c d8	 subss	 xmm3, xmm0

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00691	0f 28 c5	 movaps	 xmm0, xmm5
  00694	f3 0f 59 c6	 mulss	 xmm0, xmm6
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 198  : 		d = ( -2*v3Tmp + (r[base+1]+r[base])*h[base])

  00698	f3 0f 10 35 00
	00 00 00	 movss	 xmm6, DWORD PTR __real@3f800000
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 181  :     y = fy;

  006a0	f3 0f 59 d9	 mulss	 xmm3, xmm1
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 198  : 		d = ( -2*v3Tmp + (r[base+1]+r[base])*h[base])

  006a4	0f 28 ce	 movaps	 xmm1, xmm6
  006a7	f3 0f 5e c8	 divss	 xmm1, xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  006ab	f3 0f 10 85 60
	e8 ff ff	 movss	 xmm0, DWORD PTR _d$16$sroa$2389$1$[ebp]
  006b3	f3 0f 58 85 e0
	f1 ff ff	 addss	 xmm0, DWORD PTR _r$[ebp]

; 181  :     y = fy;

  006bb	f3 0f 11 9d 70
	e8 ff ff	 movss	 DWORD PTR _c$15$sroa$2390$1$[ebp], xmm3

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  006c3	f3 0f 10 9d 68
	e8 ff ff	 movss	 xmm3, DWORD PTR _d$16$sroa$2388$1$[ebp]
  006cb	f3 0f 58 9d f0
	f1 ff ff	 addss	 xmm3, DWORD PTR _r$[ebp+16]
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 198  : 		d = ( -2*v3Tmp + (r[base+1]+r[base])*h[base])

  006d3	f3 0f 59 c5	 mulss	 xmm0, xmm5
  006d7	f3 0f 59 dd	 mulss	 xmm3, xmm5
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  006db	f3 0f 58 c7	 addss	 xmm0, xmm7
  006df	0f 57 ff	 xorps	 xmm7, xmm7
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 198  : 		d = ( -2*v3Tmp + (r[base+1]+r[base])*h[base])

  006e2	f3 0f 59 c1	 mulss	 xmm0, xmm1
  006e6	f3 0f 11 85 60
	e8 ff ff	 movss	 DWORD PTR _d$16$sroa$2389$1$[ebp], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 180  :     x = fx;

  006ee	f3 0f 10 85 40
	e8 ff ff	 movss	 xmm0, DWORD PTR tv7241[ebp]
  006f6	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@c0000000
  006fe	f3 0f 58 d8	 addss	 xmm3, xmm0

; 181  :     y = fy;

  00702	f3 0f 10 85 7c
	e8 ff ff	 movss	 xmm0, DWORD PTR tv7243[ebp]
  0070a	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@c0000000

; 180  :     x = fx;

  00712	f3 0f 59 d9	 mulss	 xmm3, xmm1
  00716	f3 0f 11 9d 68
	e8 ff ff	 movss	 DWORD PTR _d$16$sroa$2388$1$[ebp], xmm3

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0071e	f3 0f 10 9d 58
	e8 ff ff	 movss	 xmm3, DWORD PTR _d$16$sroa$2387$1$[ebp]
  00726	f3 0f 58 9d f4
	f1 ff ff	 addss	 xmm3, DWORD PTR _r$[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 198  : 		d = ( -2*v3Tmp + (r[base+1]+r[base])*h[base])

  0072e	f3 0f 59 dd	 mulss	 xmm3, xmm5
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 181  :     y = fy;

  00732	f3 0f 58 d8	 addss	 xmm3, xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 201  : 		for(float t = 0; t<=length; t+=dt)

  00736	f3 0f 10 85 38
	e8 ff ff	 movss	 xmm0, DWORD PTR _length$1$[ebp]
  0073e	0f 2f c7	 comiss	 xmm0, xmm7
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 181  :     y = fy;

  00741	f3 0f 59 d9	 mulss	 xmm3, xmm1
  00745	0f 57 c9	 xorps	 xmm1, xmm1
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 201  : 		for(float t = 0; t<=length; t+=dt)

  00748	f3 0f 11 8d 7c
	e8 ff ff	 movss	 DWORD PTR _t$1$[ebp], xmm1
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 181  :     y = fy;

  00750	f3 0f 11 9d 58
	e8 ff ff	 movss	 DWORD PTR _d$16$sroa$2387$1$[ebp], xmm3
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 201  : 		for(float t = 0; t<=length; t+=dt)

  00758	0f 82 65 05 00
	00		 jb	 $LN2@BuildVerte
  0075e	66 90		 npad	 2
$LL19@BuildVerte:

; 203  : 			while (t>timenext)

  00760	0f 2f cd	 comiss	 xmm1, xmm5
  00763	8b 8d 64 e8 ff
	ff		 mov	 ecx, DWORD PTR _base$1$[ebp]
  00769	0f 86 d9 02 00
	00		 jbe	 $LN676@BuildVerte
  0076f	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
  00772	8d 95 e8 f1 ff
	ff		 lea	 edx, DWORD PTR _r$[ebp+8]
  00778	8d 14 82	 lea	 edx, DWORD PTR [edx+eax*4]
  0077b	0f 1f 44 00 00	 npad	 5
$LL20@BuildVerte:

; 204  : 			{
; 205  : 				timebase = timenext;
; 206  : 				base++;

  00780	41		 inc	 ecx
  00781	f3 0f 11 ad 20
	e8 ff ff	 movss	 DWORD PTR _timebase$1$[ebp], xmm5
  00789	83 c2 0c	 add	 edx, 12			; 0000000cH
  0078c	89 8d 64 e8 ff
	ff		 mov	 DWORD PTR _base$1$[ebp], ecx
  00792	89 95 34 e8 ff
	ff		 mov	 DWORD PTR tv7409[ebp], edx

; 207  : 				if (base>=n) break;

  00798	3b 8d 4c e8 ff
	ff		 cmp	 ecx, DWORD PTR _n$1$[ebp]
  0079e	0f 8d a1 02 00
	00		 jge	 $LN677@BuildVerte
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 43   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

  007a4	8b 85 30 e8 ff
	ff		 mov	 eax, DWORD PTR $T28[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 211  : 				c = ( 3*v3Tmp - r[base+1]*h[base] - (2*h[base])*r[base] )

  007aa	0f 28 d6	 movaps	 xmm2, xmm6
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 43   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

  007ad	8b 30		 mov	 esi, DWORD PTR [eax]

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  007af	8b 85 48 e8 ff
	ff		 mov	 eax, DWORD PTR tv7489[ebp]

; 78   :         _Myoff += _Off;

  007b5	03 f1		 add	 esi, ecx

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  007b7	8b 08		 mov	 ecx, DWORD PTR [eax]

; 48   :         return _Mycont->_Map[_Block][_Off];

  007b9	8b 85 44 e8 ff
	ff		 mov	 eax, DWORD PTR tv7490[ebp]

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  007bf	49		 dec	 ecx

; 48   :         return _Mycont->_Map[_Block][_Off];

  007c0	8b 10		 mov	 edx, DWORD PTR [eax]

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  007c2	8b c6		 mov	 eax, esi
  007c4	23 c1		 and	 eax, ecx
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 208  : 				D3DXVECTOR3 v3Tmp = Input[base+1].second-Input[base].second;

  007c6	8b 3c 82	 mov	 edi, DWORD PTR [edx+eax*4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 78   :         _Myoff += _Off;

  007c9	8d 46 01	 lea	 eax, DWORD PTR [esi+1]

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  007cc	23 c1		 and	 eax, ecx
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 211  : 				c = ( 3*v3Tmp - r[base+1]*h[base] - (2*h[base])*r[base] )

  007ce	8b 8d 64 e8 ff
	ff		 mov	 ecx, DWORD PTR _base$1$[ebp]
  007d4	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  007d7	8b 95 34 e8 ff
	ff		 mov	 edx, DWORD PTR tv7409[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  007dd	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  007e2	f3 0f 5c 47 08	 subss	 xmm0, DWORD PTR [edi+8]
  007e7	f3 0f 10 78 04	 movss	 xmm7, DWORD PTR [eax+4]
  007ec	f3 0f 5c 7f 04	 subss	 xmm7, DWORD PTR [edi+4]

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  007f1	f3 0f 10 72 08	 movss	 xmm6, DWORD PTR [edx+8]
  007f6	f3 0f 11 b5 68
	e8 ff ff	 movss	 DWORD PTR _d$16$sroa$2388$1$[ebp], xmm6

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  007fe	f3 0f 11 85 24
	e8 ff ff	 movss	 DWORD PTR tv7286[ebp], xmm0
  00806	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  0080b	f3 0f 5c 47 0c	 subss	 xmm0, DWORD PTR [edi+12]

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00810	f3 0f 10 72 0c	 movss	 xmm6, DWORD PTR [edx+12]
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 209  : 				a = Input[base].second;

  00815	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00818	f3 0f 11 b5 58
	e8 ff ff	 movss	 DWORD PTR _d$16$sroa$2387$1$[ebp], xmm6
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 209  : 				a = Input[base].second;

  00820	89 85 04 e8 ff
	ff		 mov	 DWORD PTR _a$26[ebp+8], eax
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00826	f3 0f 11 85 40
	e8 ff ff	 movss	 DWORD PTR tv7289[ebp], xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 209  : 				a = Input[base].second;

  0082e	f3 0f 7e 47 04	 movq	 xmm0, QWORD PTR [edi+4]
  00833	66 0f d6 85 fc
	e7 ff ff	 movq	 QWORD PTR _a$26[ebp], xmm0

; 210  : 				b = r[base];

  0083b	f3 0f 7e 42 f8	 movq	 xmm0, QWORD PTR [edx-8]
  00840	66 0f d6 85 08
	e8 ff ff	 movq	 QWORD PTR _b$27[ebp], xmm0

; 211  : 				c = ( 3*v3Tmp - r[base+1]*h[base] - (2*h[base])*r[base] )

  00848	f3 0f 10 84 8d
	30 ed ff ff	 movss	 xmm0, DWORD PTR _h$[ebp+ecx*4]
  00851	0f 28 e8	 movaps	 xmm5, xmm0
  00854	8b 02		 mov	 eax, DWORD PTR [edx]
  00856	f3 0f 59 e8	 mulss	 xmm5, xmm0
  0085a	0f 28 c8	 movaps	 xmm1, xmm0
  0085d	89 85 10 e8 ff
	ff		 mov	 DWORD PTR _b$27[ebp+8], eax
  00863	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00867	f3 0f 10 42 04	 movss	 xmm0, DWORD PTR [edx+4]
  0086c	f3 0f 11 85 60
	e8 ff ff	 movss	 DWORD PTR _d$16$sroa$2389$1$[ebp], xmm0
  00874	f3 0f 59 84 8d
	30 ed ff ff	 mulss	 xmm0, DWORD PTR _h$[ebp+ecx*4]
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 211  : 				c = ( 3*v3Tmp - r[base+1]*h[base] - (2*h[base])*r[base] )

  0087d	f3 0f 5e d5	 divss	 xmm2, xmm5
  00881	f3 0f 11 95 70
	e8 ff ff	 movss	 DWORD PTR _f$1$[ebp], xmm2
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00889	0f 28 d7	 movaps	 xmm2, xmm7
  0088c	f3 0f 59 15 00
	00 00 00	 mulss	 xmm2, DWORD PTR __real@40400000

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00894	f3 0f 5c d0	 subss	 xmm2, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00898	f3 0f 10 42 f8	 movss	 xmm0, DWORD PTR [edx-8]
  0089d	f3 0f 59 c1	 mulss	 xmm0, xmm1

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  008a1	f3 0f 5c d0	 subss	 xmm2, xmm0

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  008a5	0f 28 c2	 movaps	 xmm0, xmm2

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  008a8	f3 0f 11 95 74
	e8 ff ff	 movss	 DWORD PTR _c$15$sroa$2392$1$[ebp], xmm2

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  008b0	f3 0f 59 85 70
	e8 ff ff	 mulss	 xmm0, DWORD PTR _f$1$[ebp]
  008b8	f3 0f 11 85 74
	e8 ff ff	 movss	 DWORD PTR _c$15$sroa$2392$1$[ebp], xmm0

; 180  :     x = fx;

  008c0	f3 0f 10 85 24
	e8 ff ff	 movss	 xmm0, DWORD PTR tv7286[ebp]
  008c8	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40400000
  008d0	f3 0f 11 85 5c
	e8 ff ff	 movss	 DWORD PTR _c$15$sroa$2391$1$[ebp], xmm0

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  008d8	f3 0f 10 85 68
	e8 ff ff	 movss	 xmm0, DWORD PTR _d$16$sroa$2388$1$[ebp]
  008e0	f3 0f 59 84 8d
	30 ed ff ff	 mulss	 xmm0, DWORD PTR _h$[ebp+ecx*4]

; 180  :     x = fx;

  008e9	f3 0f 10 95 5c
	e8 ff ff	 movss	 xmm2, DWORD PTR _c$15$sroa$2391$1$[ebp]
  008f1	f3 0f 5c d0	 subss	 xmm2, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  008f5	f3 0f 10 42 fc	 movss	 xmm0, DWORD PTR [edx-4]
  008fa	f3 0f 59 c1	 mulss	 xmm0, xmm1

; 180  :     x = fx;

  008fe	f3 0f 5c d0	 subss	 xmm2, xmm0
  00902	f3 0f 11 95 5c
	e8 ff ff	 movss	 DWORD PTR _c$15$sroa$2391$1$[ebp], xmm2
  0090a	f3 0f 10 95 70
	e8 ff ff	 movss	 xmm2, DWORD PTR _f$1$[ebp]
  00912	f3 0f 10 85 5c
	e8 ff ff	 movss	 xmm0, DWORD PTR _c$15$sroa$2391$1$[ebp]
  0091a	f3 0f 59 c2	 mulss	 xmm0, xmm2
  0091e	f3 0f 11 85 5c
	e8 ff ff	 movss	 DWORD PTR _c$15$sroa$2391$1$[ebp], xmm0

; 181  :     y = fy;

  00926	f3 0f 10 85 40
	e8 ff ff	 movss	 xmm0, DWORD PTR tv7289[ebp]
  0092e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40400000
  00936	f3 0f 11 85 70
	e8 ff ff	 movss	 DWORD PTR _c$15$sroa$2390$1$[ebp], xmm0

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  0093e	0f 28 c6	 movaps	 xmm0, xmm6
  00941	f3 0f 59 84 8d
	30 ed ff ff	 mulss	 xmm0, DWORD PTR _h$[ebp+ecx*4]

; 181  :     y = fy;

  0094a	f3 0f 10 b5 70
	e8 ff ff	 movss	 xmm6, DWORD PTR _c$15$sroa$2390$1$[ebp]
  00952	f3 0f 5c f0	 subss	 xmm6, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00956	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]

; 181  :     y = fy;

  0095a	f3 0f 11 b5 70
	e8 ff ff	 movss	 DWORD PTR _c$15$sroa$2390$1$[ebp], xmm6

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00962	f3 0f 59 c1	 mulss	 xmm0, xmm1

; 181  :     y = fy;

  00966	0f 28 ce	 movaps	 xmm1, xmm6

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00969	f3 0f 10 9d 68
	e8 ff ff	 movss	 xmm3, DWORD PTR _d$16$sroa$2388$1$[ebp]
  00971	f3 0f 58 5a fc	 addss	 xmm3, DWORD PTR [edx-4]

; 181  :     y = fy;

  00976	f3 0f 5c c8	 subss	 xmm1, xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 203  : 			while (t>timenext)

  0097a	f3 0f 10 35 00
	00 00 00	 movss	 xmm6, DWORD PTR __real@3f800000

; 213  : 				d = ( -2*v3Tmp + (r[base+1]+r[base])*h[base])

  00982	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 181  :     y = fy;

  0098a	f3 0f 59 ca	 mulss	 xmm1, xmm2

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0098e	f3 0f 10 95 60
	e8 ff ff	 movss	 xmm2, DWORD PTR _d$16$sroa$2389$1$[ebp]
  00996	f3 0f 58 52 f8	 addss	 xmm2, DWORD PTR [edx-8]

; 181  :     y = fy;

  0099b	f3 0f 11 8d 70
	e8 ff ff	 movss	 DWORD PTR _c$15$sroa$2390$1$[ebp], xmm1
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 213  : 				d = ( -2*v3Tmp + (r[base+1]+r[base])*h[base])

  009a3	f3 0f 10 8c 8d
	30 ed ff ff	 movss	 xmm1, DWORD PTR _h$[ebp+ecx*4]
  009ac	f3 0f 59 e9	 mulss	 xmm5, xmm1
  009b0	f3 0f 59 d1	 mulss	 xmm2, xmm1
  009b4	f3 0f 5e c5	 divss	 xmm0, xmm5
  009b8	f3 0f 10 2d 00
	00 00 00	 movss	 xmm5, DWORD PTR __real@c0000000
  009c0	f3 0f 59 fd	 mulss	 xmm7, xmm5
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 180  :     x = fx;

  009c4	f3 0f 59 d9	 mulss	 xmm3, xmm1
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 213  : 				d = ( -2*v3Tmp + (r[base+1]+r[base])*h[base])

  009c8	f3 0f 58 d7	 addss	 xmm2, xmm7
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  009cc	f3 0f 59 d0	 mulss	 xmm2, xmm0
  009d0	f3 0f 11 95 60
	e8 ff ff	 movss	 DWORD PTR _d$16$sroa$2389$1$[ebp], xmm2

; 180  :     x = fx;

  009d8	f3 0f 10 95 24
	e8 ff ff	 movss	 xmm2, DWORD PTR tv7286[ebp]
  009e0	f3 0f 59 d5	 mulss	 xmm2, xmm5
  009e4	f3 0f 58 da	 addss	 xmm3, xmm2

; 181  :     y = fy;

  009e8	f3 0f 10 95 40
	e8 ff ff	 movss	 xmm2, DWORD PTR tv7289[ebp]
  009f0	f3 0f 59 d5	 mulss	 xmm2, xmm5
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 216  : 				timenext+=h[base];

  009f4	f3 0f 10 ad 6c
	e8 ff ff	 movss	 xmm5, DWORD PTR _timenext$1$[ebp]
  009fc	f3 0f 58 e9	 addss	 xmm5, xmm1
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00a00	f3 0f 59 d8	 mulss	 xmm3, xmm0
  00a04	f3 0f 11 9d 68
	e8 ff ff	 movss	 DWORD PTR _d$16$sroa$2388$1$[ebp], xmm3

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00a0c	f3 0f 10 9d 58
	e8 ff ff	 movss	 xmm3, DWORD PTR _d$16$sroa$2387$1$[ebp]
  00a14	f3 0f 58 1a	 addss	 xmm3, DWORD PTR [edx]
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 216  : 				timenext+=h[base];

  00a18	f3 0f 11 ad 6c
	e8 ff ff	 movss	 DWORD PTR _timenext$1$[ebp], xmm5
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 181  :     y = fy;

  00a20	f3 0f 59 d9	 mulss	 xmm3, xmm1
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 203  : 			while (t>timenext)

  00a24	f3 0f 10 8d 7c
	e8 ff ff	 movss	 xmm1, DWORD PTR _t$1$[ebp]
  00a2c	0f 2f cd	 comiss	 xmm1, xmm5
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 181  :     y = fy;

  00a2f	f3 0f 58 da	 addss	 xmm3, xmm2
  00a33	f3 0f 59 d8	 mulss	 xmm3, xmm0
  00a37	f3 0f 11 9d 58
	e8 ff ff	 movss	 DWORD PTR _d$16$sroa$2387$1$[ebp], xmm3
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 203  : 			while (t>timenext)

  00a3f	0f 87 3b fd ff
	ff		 ja	 $LL20@BuildVerte
$LN677@BuildVerte:
  00a45	0f 57 ff	 xorps	 xmm7, xmm7
$LN676@BuildVerte:

; 217  : 				if (loop)
; 218  : 				{
; 219  : 					//Tracef("%f:%f %f %f\n",Input[base].first,Input[base].second.x,Input[base].second.y,Input[base].second.z);
; 220  : 				}
; 221  : 			}
; 222  : 			if (base>n) break;

  00a48	3b 8d 4c e8 ff
	ff		 cmp	 ecx, DWORD PTR _n$1$[ebp]
  00a4e	0f 8f 6f 02 00
	00		 jg	 $LN2@BuildVerte
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 43   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

  00a54	8b 85 30 e8 ff
	ff		 mov	 eax, DWORD PTR $T28[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 227  : 			float ttt = min(max((t+Input[0].first)/m_fLifeTime,0.0f),1.0f);

  00a5a	0f 28 c1	 movaps	 xmm0, xmm1
  00a5d	0f 28 e1	 movaps	 xmm4, xmm1
  00a60	f3 0f 5c a5 20
	e8 ff ff	 subss	 xmm4, DWORD PTR _timebase$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 43   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

  00a68	8b 08		 mov	 ecx, DWORD PTR [eax]

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00a6a	8b 85 48 e8 ff
	ff		 mov	 eax, DWORD PTR tv7489[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 223  : 			float cc = t - timebase;

  00a70	f3 0f 11 a5 34
	e8 ff ff	 movss	 DWORD PTR _cc$1$[ebp], xmm4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00a78	8b 10		 mov	 edx, DWORD PTR [eax]

; 48   :         return _Mycont->_Map[_Block][_Off];

  00a7a	8b 85 44 e8 ff
	ff		 mov	 eax, DWORD PTR tv7490[ebp]

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00a80	4a		 dec	 edx

; 48   :         return _Mycont->_Map[_Block][_Off];

  00a81	8b 30		 mov	 esi, DWORD PTR [eax]
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 227  : 			float ttt = min(max((t+Input[0].first)/m_fLifeTime,0.0f),1.0f);

  00a83	8b 85 78 e8 ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  00a89	f3 0f 10 58 3c	 movss	 xmm3, DWORD PTR [eax+60]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 203  :         _Deque_unchecked_iterator _Tmp = *this;

  00a8e	8b c1		 mov	 eax, ecx

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00a90	23 c2		 and	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 227  : 			float ttt = min(max((t+Input[0].first)/m_fLifeTime,0.0f),1.0f);

  00a92	8b 04 86	 mov	 eax, DWORD PTR [esi+eax*4]
  00a95	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  00a99	f3 0f 5e c3	 divss	 xmm0, xmm3
  00a9d	0f 2f c7	 comiss	 xmm0, xmm7
  00aa0	76 1c		 jbe	 SHORT $LN673@BuildVerte
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 203  :         _Deque_unchecked_iterator _Tmp = *this;

  00aa2	8b c1		 mov	 eax, ecx
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 227  : 			float ttt = min(max((t+Input[0].first)/m_fLifeTime,0.0f),1.0f);

  00aa4	0f 28 c1	 movaps	 xmm0, xmm1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00aa7	23 c2		 and	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 227  : 			float ttt = min(max((t+Input[0].first)/m_fLifeTime,0.0f),1.0f);

  00aa9	8b 04 86	 mov	 eax, DWORD PTR [esi+eax*4]
  00aac	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  00ab0	f3 0f 5e c3	 divss	 xmm0, xmm3
  00ab4	0f 2f f0	 comiss	 xmm6, xmm0
  00ab7	77 05		 ja	 SHORT $LN673@BuildVerte
  00ab9	0f 28 d6	 movaps	 xmm2, xmm6
  00abc	eb 2c		 jmp	 SHORT $LN40@BuildVerte
$LN673@BuildVerte:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 203  :         _Deque_unchecked_iterator _Tmp = *this;

  00abe	8b c1		 mov	 eax, ecx
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 227  : 			float ttt = min(max((t+Input[0].first)/m_fLifeTime,0.0f),1.0f);

  00ac0	0f 28 c1	 movaps	 xmm0, xmm1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00ac3	23 c2		 and	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 227  : 			float ttt = min(max((t+Input[0].first)/m_fLifeTime,0.0f),1.0f);

  00ac5	8b 04 86	 mov	 eax, DWORD PTR [esi+eax*4]
  00ac8	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  00acc	f3 0f 5e c3	 divss	 xmm0, xmm3
  00ad0	0f 2f c7	 comiss	 xmm0, xmm7
  00ad3	76 12		 jbe	 SHORT $LN37@BuildVerte
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00ad5	23 ca		 and	 ecx, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 227  : 			float ttt = min(max((t+Input[0].first)/m_fLifeTime,0.0f),1.0f);

  00ad7	0f 28 d1	 movaps	 xmm2, xmm1
  00ada	8b 04 8e	 mov	 eax, DWORD PTR [esi+ecx*4]
  00add	f3 0f 58 10	 addss	 xmm2, DWORD PTR [eax]
  00ae1	f3 0f 5e d3	 divss	 xmm2, xmm3
  00ae5	eb 03		 jmp	 SHORT $LN40@BuildVerte
$LN37@BuildVerte:
  00ae7	0f 57 d2	 xorps	 xmm2, xmm2
$LN40@BuildVerte:

; 228  : 			v.diffuse = D3DXCOLOR(0.3f,0.8f,1.0f, (loop)?min(max((1.0f-ttt)*(1.0f-ttt)/2.5-0.1f,0.0f),1.0f):0.0f );

  00aea	8b b5 50 e8 ff
	ff		 mov	 esi, DWORD PTR _loop$1$[ebp]
  00af0	85 f6		 test	 esi, esi
  00af2	74 39		 je	 SHORT $LN47@BuildVerte
  00af4	0f 28 c6	 movaps	 xmm0, xmm6
  00af7	f3 0f 5c c2	 subss	 xmm0, xmm2
  00afb	f2 0f 10 15 00
	00 00 00	 movsd	 xmm2, QWORD PTR __real@3ff0000000000000
  00b03	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00b07	0f 5a c0	 cvtps2pd xmm0, xmm0
  00b0a	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4004000000000000
  00b12	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fb99999a0000000
  00b1a	f2 0f 5f 05 00
	00 00 00	 maxsd	 xmm0, QWORD PTR __real@0000000000000000
  00b22	66 0f 2f d0	 comisd	 xmm2, xmm0
  00b26	77 08		 ja	 SHORT $LN48@BuildVerte
  00b28	0f 28 c2	 movaps	 xmm0, xmm2
  00b2b	eb 03		 jmp	 SHORT $LN48@BuildVerte
$LN47@BuildVerte:
  00b2d	0f 57 c0	 xorps	 xmm0, xmm0
$LN48@BuildVerte:
  00b30	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  00b34	0f 2f c6	 comiss	 xmm0, xmm6
  00b37	72 07		 jb	 SHORT $LN218@BuildVerte
  00b39	b9 ff 00 00 00	 mov	 ecx, 255		; 000000ffH
  00b3e	eb 30		 jmp	 SHORT $LN217@BuildVerte
$LN218@BuildVerte:
  00b40	0f 2f f8	 comiss	 xmm7, xmm0
  00b43	72 04		 jb	 SHORT $LN216@BuildVerte
  00b45	33 c9		 xor	 ecx, ecx
  00b47	eb 27		 jmp	 SHORT $LN217@BuildVerte
$LN216@BuildVerte:
  00b49	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00b51	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00b59	e8 00 00 00 00	 call	 __ftol3
  00b5e	f3 0f 10 8d 7c
	e8 ff ff	 movss	 xmm1, DWORD PTR _t$1$[ebp]
  00b66	8b c8		 mov	 ecx, eax
  00b68	f3 0f 10 a5 34
	e8 ff ff	 movss	 xmm4, DWORD PTR _cc$1$[ebp]
$LN217@BuildVerte:

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00b70	f3 0f 10 85 60
	e8 ff ff	 movss	 xmm0, DWORD PTR _d$16$sroa$2389$1$[ebp]
  00b78	f3 0f 10 95 68
	e8 ff ff	 movss	 xmm2, DWORD PTR _d$16$sroa$2388$1$[ebp]
  00b80	f3 0f 10 9d 58
	e8 ff ff	 movss	 xmm3, DWORD PTR _d$16$sroa$2387$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 232  : 			v.texCoord.x = t/m_fLifeTime;

  00b88	8b 85 78 e8 ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00b8e	f3 0f 59 c4	 mulss	 xmm0, xmm4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  00b92	8b 95 f0 e7 ff
	ff		 mov	 edx, DWORD PTR _Output$1$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00b98	f3 0f 59 d4	 mulss	 xmm2, xmm4

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00b9c	c1 e1 18	 shl	 ecx, 24			; 00000018H

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00b9f	f3 0f 58 85 74
	e8 ff ff	 addss	 xmm0, DWORD PTR _c$15$sroa$2392$1$[ebp]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00ba7	f3 0f 59 dc	 mulss	 xmm3, xmm4

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00bab	81 c9 ff cc 4d
	00		 or	 ecx, 5098751		; 004dccffH
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 228  : 			v.diffuse = D3DXCOLOR(0.3f,0.8f,1.0f, (loop)?min(max((1.0f-ttt)*(1.0f-ttt)/2.5-0.1f,0.0f),1.0f):0.0f );

  00bb1	89 8d d8 e7 ff
	ff		 mov	 DWORD PTR _v$25[ebp+12], ecx
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00bb7	f3 0f 58 95 5c
	e8 ff ff	 addss	 xmm2, DWORD PTR _c$15$sroa$2391$1$[ebp]

; 181  :     y = fy;

  00bbf	f3 0f 58 9d 70
	e8 ff ff	 addss	 xmm3, DWORD PTR _c$15$sroa$2390$1$[ebp]

; 182  :     z = fz;

  00bc7	f3 0f 59 c4	 mulss	 xmm0, xmm4

; 180  :     x = fx;

  00bcb	f3 0f 59 d4	 mulss	 xmm2, xmm4

; 182  :     z = fz;

  00bcf	f3 0f 58 85 08
	e8 ff ff	 addss	 xmm0, DWORD PTR _b$27[ebp]
  00bd7	f3 0f 59 dc	 mulss	 xmm3, xmm4

; 180  :     x = fx;

  00bdb	f3 0f 58 95 0c
	e8 ff ff	 addss	 xmm2, DWORD PTR _b$27[ebp+4]

; 181  :     y = fy;

  00be3	f3 0f 58 9d 10
	e8 ff ff	 addss	 xmm3, DWORD PTR _b$27[ebp+8]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00beb	f3 0f 59 c4	 mulss	 xmm0, xmm4

; 180  :     x = fx;

  00bef	f3 0f 59 d4	 mulss	 xmm2, xmm4

; 181  :     y = fy;

  00bf3	f3 0f 59 dc	 mulss	 xmm3, xmm4
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 232  : 			v.texCoord.x = t/m_fLifeTime;

  00bf7	0f 28 e1	 movaps	 xmm4, xmm1
  00bfa	f3 0f 5e 60 3c	 divss	 xmm4, DWORD PTR [eax+60]

; 233  : 			v.texCoord.y = loop ? 0 : 1;

  00bff	33 c0		 xor	 eax, eax
  00c01	85 f6		 test	 esi, esi
  00c03	0f 94 c0	 sete	 al
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00c06	f3 0f 58 85 fc
	e7 ff ff	 addss	 xmm0, DWORD PTR _a$26[ebp]

; 180  :     x = fx;

  00c0e	f3 0f 58 95 00
	e8 ff ff	 addss	 xmm2, DWORD PTR _a$26[ebp+4]

; 181  :     y = fy;

  00c16	f3 0f 58 9d 04
	e8 ff ff	 addss	 xmm3, DWORD PTR _a$26[ebp+8]
  00c1e	66 0f 6e e8	 movd	 xmm5, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  00c22	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 233  : 			v.texCoord.y = loop ? 0 : 1;

  00c25	0f 5b ed	 cvtdq2ps xmm5, xmm5
  00c28	f3 0f 11 85 cc
	e7 ff ff	 movss	 DWORD PTR _v$25[ebp], xmm0
  00c30	f3 0f 11 95 d0
	e7 ff ff	 movss	 DWORD PTR _v$25[ebp+4], xmm2
  00c38	f3 0f 11 9d d4
	e7 ff ff	 movss	 DWORD PTR _v$25[ebp+8], xmm3
  00c40	f3 0f 11 a5 dc
	e7 ff ff	 movss	 DWORD PTR _v$25[ebp+16], xmm4
  00c48	f3 0f 11 ad e0
	e7 ff ff	 movss	 DWORD PTR _v$25[ebp+20], xmm5
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  00c50	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  00c53	74 23		 je	 SHORT $LN170@BuildVerte
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 254  :         ::new (static_cast<void*>(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

  00c55	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00c59	f3 0f 11 50 04	 movss	 DWORD PTR [eax+4], xmm2
  00c5e	f3 0f 11 58 08	 movss	 DWORD PTR [eax+8], xmm3
  00c63	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00c66	f3 0f 11 60 10	 movss	 DWORD PTR [eax+16], xmm4
  00c6b	f3 0f 11 68 14	 movss	 DWORD PTR [eax+20], xmm5
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 806  :         ++_Mylast;

  00c70	83 c0 18	 add	 eax, 24			; 00000018H
  00c73	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 782  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00c76	eb 17		 jmp	 SHORT $LN17@BuildVerte
$LN170@BuildVerte:

; 783  :         }
; 784  : 
; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00c78	8d 8d cc e7 ff
	ff		 lea	 ecx, DWORD PTR _v$25[ebp]
  00c7e	51		 push	 ecx
  00c7f	50		 push	 eax
  00c80	8b ca		 mov	 ecx, edx
  00c82	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABUSPDTVertex@@@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@AAEPAUSPDTVertex@@QAU2@ABU2@@Z ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Emplace_reallocate<SPDTVertex const &>
  00c87	f3 0f 10 8d 7c
	e8 ff ff	 movss	 xmm1, DWORD PTR _t$1$[ebp]
$LN17@BuildVerte:
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 201  : 		for(float t = 0; t<=length; t+=dt)

  00c8f	f3 0f 58 8d 2c
	e8 ff ff	 addss	 xmm1, DWORD PTR _dt$1$[ebp]
  00c97	f3 0f 10 95 38
	e8 ff ff	 movss	 xmm2, DWORD PTR _length$1$[ebp]
  00c9f	0f 57 ff	 xorps	 xmm7, xmm7
  00ca2	f3 0f 10 ad 6c
	e8 ff ff	 movss	 xmm5, DWORD PTR _timenext$1$[ebp]
  00caa	f3 0f 10 35 00
	00 00 00	 movss	 xmm6, DWORD PTR __real@3f800000
  00cb2	0f 2f d1	 comiss	 xmm2, xmm1
  00cb5	f3 0f 11 8d 7c
	e8 ff ff	 movss	 DWORD PTR _t$1$[ebp], xmm1
  00cbd	0f 83 9d fa ff
	ff		 jae	 $LL19@BuildVerte
$LN2@BuildVerte:

; 147  : 
; 148  : 	int n = m_LongTimePointList.size()-1;
; 149  : 	assert(n<max_size-1);
; 150  : 
; 151  : 	// cubic spline
; 152  : 
; 153  : 	for(int loop = 0; loop<=1; ++loop)

  00cc3	8b 8d 50 e8 ff
	ff		 mov	 ecx, DWORD PTR _loop$1$[ebp]
  00cc9	8b 95 4c e8 ff
	ff		 mov	 edx, DWORD PTR _n$1$[ebp]
  00ccf	41		 inc	 ecx
  00cd0	f3 0f 10 3d 00
	00 00 00	 movss	 xmm7, DWORD PTR __real@3f800000
  00cd8	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f000000
  00ce0	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR __real@40800000
  00ce8	89 8d 50 e8 ff
	ff		 mov	 DWORD PTR _loop$1$[ebp], ecx
  00cee	8d 3c 52	 lea	 edi, DWORD PTR [edx+edx*2]
  00cf1	83 f9 01	 cmp	 ecx, 1
  00cf4	0f 8e 27 f4 ff
	ff		 jle	 $LL4@BuildVerte
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1762 :         auto& _My_data    = _Mypair._Myval2;

  00cfa	8b bd 78 e8 ff
	ff		 mov	 edi, DWORD PTR _this$GSCopy$1$[ebp]

; 1763 :         pointer& _Myfirst = _My_data._Myfirst;
; 1764 :         pointer& _Mylast  = _My_data._Mylast;
; 1765 : 
; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00d00	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  00d03	3b 47 34	 cmp	 eax, DWORD PTR [edi+52]
  00d06	74 03		 je	 SHORT $LN566@BuildVerte

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00d08	89 47 34	 mov	 DWORD PTR [edi+52], eax
$LN566@BuildVerte:

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00d0b	8b b5 14 e8 ff
	ff		 mov	 esi, DWORD PTR _m_LongVertexVector$[ebp]
  00d11	3b b5 18 e8 ff
	ff		 cmp	 esi, DWORD PTR _m_LongVertexVector$[ebp+4]
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 264  : 		lit != m_LongVertexVector.end();

  00d17	0f 84 76 00 00
	00		 je	 $LN23@BuildVerte
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1806 :         return iterator(_My_data._Mylast, _STD addressof(_My_data));

  00d1d	8b 85 e4 e7 ff
	ff		 mov	 eax, DWORD PTR _m_ShortVertexVector$[ebp]
  00d23	2b c6		 sub	 eax, esi
  00d25	89 85 2c e8 ff
	ff		 mov	 DWORD PTR tv7475[ebp], eax
  00d2b	0f 1f 44 00 00	 npad	 5
$LL503@BuildVerte:

; 781  :         if (_Mylast != _My_data._Myend) {

  00d30	8b 47 34	 mov	 eax, DWORD PTR [edi+52]
  00d33	3b 47 38	 cmp	 eax, DWORD PTR [edi+56]
  00d36	74 16		 je	 SHORT $LN529@BuildVerte
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 254  :         ::new (static_cast<void*>(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

  00d38	0f 10 06	 movups	 xmm0, XMMWORD PTR [esi]
  00d3b	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  00d3e	f3 0f 7e 46 10	 movq	 xmm0, QWORD PTR [esi+16]
  00d43	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 806  :         ++_Mylast;

  00d48	83 47 34 18	 add	 DWORD PTR [edi+52], 24	; 00000018H

; 782  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00d4c	eb 0a		 jmp	 SHORT $LN528@BuildVerte
$LN529@BuildVerte:

; 783  :         }
; 784  : 
; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00d4e	56		 push	 esi
  00d4f	50		 push	 eax
  00d50	8d 4f 30	 lea	 ecx, DWORD PTR [edi+48]
  00d53	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABUSPDTVertex@@@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@AAEPAUSPDTVertex@@QAU2@ABU2@@Z ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Emplace_reallocate<SPDTVertex const &>
$LN528@BuildVerte:

; 781  :         if (_Mylast != _My_data._Myend) {

  00d58	8b 8d 2c e8 ff
	ff		 mov	 ecx, DWORD PTR tv7475[ebp]
  00d5e	8b 47 34	 mov	 eax, DWORD PTR [edi+52]
  00d61	03 ce		 add	 ecx, esi
  00d63	3b 47 38	 cmp	 eax, DWORD PTR [edi+56]
  00d66	74 16		 je	 SHORT $LN538@BuildVerte
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 254  :         ::new (static_cast<void*>(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

  00d68	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00d6b	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  00d6e	f3 0f 7e 41 10	 movq	 xmm0, QWORD PTR [ecx+16]
  00d73	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 806  :         ++_Mylast;

  00d78	83 47 34 18	 add	 DWORD PTR [edi+52], 24	; 00000018H

; 782  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00d7c	eb 0a		 jmp	 SHORT $LN22@BuildVerte
$LN538@BuildVerte:

; 783  :         }
; 784  : 
; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00d7e	51		 push	 ecx
  00d7f	50		 push	 eax
  00d80	8d 4f 30	 lea	 ecx, DWORD PTR [edi+48]
  00d83	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABUSPDTVertex@@@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@AAEPAUSPDTVertex@@QAU2@ABU2@@Z ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Emplace_reallocate<SPDTVertex const &>
$LN22@BuildVerte:

; 79   :         ++_Ptr;

  00d88	83 c6 18	 add	 esi, 24			; 00000018H

; 163  :         return _Ptr == _Right._Ptr;

  00d8b	3b b5 18 e8 ff
	ff		 cmp	 esi, DWORD PTR _m_LongVertexVector$[ebp+4]
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 264  : 		lit != m_LongVertexVector.end();

  00d91	75 9d		 jne	 SHORT $LL503@BuildVerte
$LN23@BuildVerte:

; 265  : 		++lit,++sit)
; 266  : 		{
; 267  : 			m_PDTVertexVector.push_back(*lit);
; 268  : 			m_PDTVertexVector.push_back(*sit);
; 269  : 			/*float len = D3DXVec3Length(&(lit->position - sit->position));
; 270  : 			if (len>160)
; 271  : 				Tracef("dist:%f\n",len);*/
; 272  : 		}
; 273  : 
; 274  : 	return true;

  00d93	8d 8d 14 e8 ff
	ff		 lea	 ecx, DWORD PTR _m_LongVertexVector$[ebp]
  00d99	e8 00 00 00 00	 call	 ??1?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAE@XZ ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::~vector<SPDTVertex,std::allocator<SPDTVertex> >
  00d9e	8d 8d e4 e7 ff
	ff		 lea	 ecx, DWORD PTR _m_ShortVertexVector$[ebp]
  00da4	e8 00 00 00 00	 call	 ??1?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAE@XZ ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::~vector<SPDTVertex,std::allocator<SPDTVertex> >
  00da9	b0 01		 mov	 al, 1
$LN1@BuildVerte:

; 275  : }

  00dab	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00dae	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00db5	59		 pop	 ecx
  00db6	5f		 pop	 edi
  00db7	5e		 pop	 esi
  00db8	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00dbb	33 cd		 xor	 ecx, ebp
  00dbd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00dc2	8b e5		 mov	 esp, ebp
  00dc4	5d		 pop	 ebp
  00dc5	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?BuildVertex@CWeaponTrace@@IAE_NXZ$0:
  00000	8d 8d e4 e7 ff
	ff		 lea	 ecx, DWORD PTR _m_ShortVertexVector$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAE@XZ ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::~vector<SPDTVertex,std::allocator<SPDTVertex> >
__unwindfunclet$?BuildVertex@CWeaponTrace@@IAE_NXZ$1:
  0000b	8d 8d 14 e8 ff
	ff		 lea	 ecx, DWORD PTR _m_LongVertexVector$[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAE@XZ ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::~vector<SPDTVertex,std::allocator<SPDTVertex> >
  00016	cc		 int	 3
  00017	cc		 int	 3
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
__ehhandler$?BuildVertex@CWeaponTrace@@IAE_NXZ:
  0001b	90		 npad	 1
  0001c	90		 npad	 1
  0001d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00021	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00024	8b 8a cc e7 ff
	ff		 mov	 ecx, DWORD PTR [edx-6196]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00034	33 c8		 xor	 ecx, eax
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?BuildVertex@CWeaponTrace@@IAE_NXZ
  00040	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?BuildVertex@CWeaponTrace@@IAE_NXZ ENDP			; CWeaponTrace::BuildVertex
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
;	COMDAT ?Initialize@CWeaponTrace@@QAEXXZ
_TEXT	SEGMENT
?Initialize@CWeaponTrace@@QAEXXZ PROC			; CWeaponTrace::Initialize, COMDAT
; _this$ = ecx

; 442  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 443  : 	m_pInstance = NULL;

  00003	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0

; 444  : 	m_dwModelInstanceIndex = 0;

  0000a	c7 46 48 00 00
	00 00		 mov	 DWORD PTR [esi+72], 0

; 445  : 
; 446  : 	m_fx = 0.0f;

  00011	c7 46 6c 00 00
	00 00		 mov	 DWORD PTR [esi+108], 0

; 447  : 	m_fy = 0.0f;

  00018	c7 46 70 00 00
	00 00		 mov	 DWORD PTR [esi+112], 0

; 448  : 	m_fz = 0.0f;

  0001f	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0

; 449  : 	m_fRotation = 0.0f;

  00026	c7 46 78 00 00
	00 00		 mov	 DWORD PTR [esi+120], 0

; 450  : 
; 451  : 	m_fLifeTime = 0.18f;

  0002d	c7 46 3c ec 51
	38 3e		 mov	 DWORD PTR [esi+60], 1043878380 ; 3e3851ecH

; 452  : 	//m_fLifeTime = 3.0f;
; 453  : 	m_fSamplingTime = 0.003f;

  00034	c7 46 40 a6 9b
	44 3b		 mov	 DWORD PTR [esi+64], 994352038 ; 3b449ba6H

; 454  : 	//m_fLifeTime = 3.0f;
; 455  : 	//m_fSamplingTime = 0.003f;
; 456  : 
; 457  : 	m_isPlaying = FALSE;

  0003b	c7 86 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+128], 0

; 458  : 
; 459  : 	m_bUseTexture = false;

  00045	c6 86 84 00 00
	00 00		 mov	 BYTE PTR [esi+132], 0

; 460  : 
; 461  : 	m_iBoneIndex = 0;

  0004c	c7 86 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+136], 0

; 462  : 
; 463  : 	m_fLastUpdate = CTimer::Instance().GetCurrentSecond();

  00056	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  0005c	e8 00 00 00 00	 call	 ?GetCurrentSecond@CTimer@@QAEMXZ ; CTimer::GetCurrentSecond
  00061	d9 5e 04	 fstp	 DWORD PTR [esi+4]
  00064	5e		 pop	 esi

; 464  : 	///////////////////////////////////////////////////////////////////////
; 465  : 
; 466  : 	//const int c_iSplineCount = 8;
; 467  : 	//m_SplineValueVector.clear();
; 468  : 	//m_SplineValueVector.resize(c_iSplineCount);
; 469  : 
; 470  : 	//for (int i = 0; i < c_iSplineCount; ++i)
; 471  : 	//{
; 472  : 	//	float fValue = float(i) / float(c_iSplineCount);
; 473  : 	//	m_SplineValueVector[i].fValue1 = fValue;
; 474  : 	//	m_SplineValueVector[i].fValue2 = fValue * fValue;
; 475  : 	//	m_SplineValueVector[i].fValue3 = fValue * fValue * fValue;
; 476  : 	//}
; 477  : 
; 478  : }

  00065	c3		 ret	 0
?Initialize@CWeaponTrace@@QAEXXZ ENDP			; CWeaponTrace::Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
;	COMDAT ?Render@CWeaponTrace@@QAEXXZ
_TEXT	SEGMENT
_matWorld$ = -68					; size = 64
__$ArrayPad$ = -4					; size = 4
?Render@CWeaponTrace@@QAEXXZ PROC			; CWeaponTrace::Render, COMDAT
; _this$ = ecx

; 278  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b f1		 mov	 esi, ecx

; 279  : 	//if (!m_isPlaying)
; 280  : 	//	return;
; 281  : 	//if (m_CurvingTraceVector.size() < 4)
; 282  : 	//	return;
; 283  : 
; 284  : 	if (!BuildVertex())

  00013	e8 00 00 00 00	 call	 ?BuildVertex@CWeaponTrace@@IAE_NXZ ; CWeaponTrace::BuildVertex
  00018	84 c0		 test	 al, al
  0001a	0f 84 f8 02 00
	00		 je	 $LN1@Render
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00020	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  00023	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00028	2b 4e 30	 sub	 ecx, DWORD PTR [esi+48]
  0002b	f7 e9		 imul	 ecx
  0002d	c1 fa 02	 sar	 edx, 2
  00030	8b c2		 mov	 eax, edx
  00032	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00035	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 287  : 	if (m_PDTVertexVector.size()<4)

  00037	83 f8 04	 cmp	 eax, 4
  0003a	0f 82 d8 02 00
	00		 jb	 $LN1@Render

; 297  : 	STATEMANAGER.SaveTransform(D3DTS_WORLD, &matWorld);

  00040	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00046	8d 45 bc	 lea	 eax, DWORD PTR _matWorld$[ebp]
  00049	50		 push	 eax
  0004a	68 00 01 00 00	 push	 256			; 00000100H
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  0004f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _matWorld$[ebp+56], 0
  00056	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _matWorld$[ebp+52], 0
  0005d	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _matWorld$[ebp+48], 0
  00064	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _matWorld$[ebp+44], 0
  0006b	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _matWorld$[ebp+36], 0
  00072	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _matWorld$[ebp+32], 0
  00079	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _matWorld$[ebp+28], 0
  00080	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _matWorld$[ebp+24], 0
  00087	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _matWorld$[ebp+16], 0
  0008e	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _matWorld$[ebp+12], 0
  00095	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _matWorld$[ebp+8], 0
  0009c	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _matWorld$[ebp+4], 0

; 1517 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 1518 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 1519 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;
; 1520 : 
; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  000a3	c7 45 f8 00 00
	80 3f		 mov	 DWORD PTR _matWorld$[ebp+60], 1065353216 ; 3f800000H
  000aa	c7 45 e4 00 00
	80 3f		 mov	 DWORD PTR _matWorld$[ebp+40], 1065353216 ; 3f800000H
  000b1	c7 45 d0 00 00
	80 3f		 mov	 DWORD PTR _matWorld$[ebp+20], 1065353216 ; 3f800000H
  000b8	c7 45 bc 00 00
	80 3f		 mov	 DWORD PTR _matWorld$[ebp], 1065353216 ; 3f800000H
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 297  : 	STATEMANAGER.SaveTransform(D3DTS_WORLD, &matWorld);

  000bf	e8 00 00 00 00	 call	 ?SaveTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SaveTransform

; 298  : 	STATEMANAGER.SaveVertexShader(D3DFVF_XYZ | D3DFVF_DIFFUSE | D3DFVF_TEX1);

  000c4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000ca	68 42 01 00 00	 push	 322			; 00000142H
  000cf	e8 00 00 00 00	 call	 ?SaveVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SaveVertexShader

; 299  : 	STATEMANAGER.SaveRenderState(D3DRS_CULLMODE, D3DCULL_NONE);

  000d4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000da	6a 01		 push	 1
  000dc	6a 16		 push	 22			; 00000016H
  000de	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 300  : 
; 301  : 	STATEMANAGER.SaveRenderState(D3DRS_ALPHABLENDENABLE, TRUE);

  000e3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000e9	6a 01		 push	 1
  000eb	6a 1b		 push	 27			; 0000001bH
  000ed	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 302  : 	STATEMANAGER.SaveRenderState(D3DRS_SRCBLEND, D3DBLEND_SRCALPHA);

  000f2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000f8	6a 05		 push	 5
  000fa	6a 13		 push	 19			; 00000013H
  000fc	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 303  : 	STATEMANAGER.SaveRenderState(D3DRS_DESTBLEND, D3DBLEND_INVSRCALPHA);

  00101	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00107	6a 06		 push	 6
  00109	6a 14		 push	 20			; 00000014H
  0010b	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 304  : 
; 305  : 	STATEMANAGER.SaveRenderState(D3DRS_ALPHATESTENABLE, FALSE);

  00110	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00116	6a 00		 push	 0
  00118	6a 0f		 push	 15			; 0000000fH
  0011a	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 306  : 	STATEMANAGER.SaveRenderState(D3DRS_ALPHAREF, 0x00000011);

  0011f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00125	6a 11		 push	 17			; 00000011H
  00127	6a 18		 push	 24			; 00000018H
  00129	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 307  : 	STATEMANAGER.SaveRenderState(D3DRS_ALPHAFUNC, D3DCMP_GREATER);

  0012e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00134	6a 05		 push	 5
  00136	6a 19		 push	 25			; 00000019H
  00138	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 308  : 
; 309  : 	STATEMANAGER.SaveRenderState(D3DRS_ZENABLE, TRUE);

  0013d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00143	6a 01		 push	 1
  00145	6a 07		 push	 7
  00147	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 310  : 	STATEMANAGER.SaveRenderState(D3DRS_ZFUNC, D3DCMP_LESSEQUAL);

  0014c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00152	6a 04		 push	 4
  00154	6a 17		 push	 23			; 00000017H
  00156	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 311  : 	STATEMANAGER.SaveRenderState(D3DRS_ZWRITEENABLE, FALSE);

  0015b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00161	6a 00		 push	 0
  00163	6a 0e		 push	 14			; 0000000eH
  00165	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 312  : 
; 313  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_DIFFUSE);

  0016a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00170	6a 00		 push	 0
  00172	6a 02		 push	 2
  00174	6a 00		 push	 0
  00176	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 314  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG2, D3DTA_TEXTURE);

  0017b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00181	6a 02		 push	 2
  00183	6a 03		 push	 3
  00185	6a 00		 push	 0
  00187	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 315  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP, (m_bUseTexture)?D3DTOP_SELECTARG2:D3DTOP_SELECTARG1);

  0018c	33 c0		 xor	 eax, eax
  0018e	38 86 84 00 00
	00		 cmp	 BYTE PTR [esi+132], al
  00194	0f 95 c0	 setne	 al
  00197	83 c0 02	 add	 eax, 2
  0019a	50		 push	 eax
  0019b	6a 01		 push	 1
  0019d	6a 00		 push	 0
  0019f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001a5	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 316  : 	//STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP, D3DTOP_SELECTARG1);
; 317  : 	//STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP, D3DTOP_MODULATE);
; 318  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAARG1, D3DTA_DIFFUSE);

  001aa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001b0	6a 00		 push	 0
  001b2	6a 05		 push	 5
  001b4	6a 00		 push	 0
  001b6	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 319  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAARG2, D3DTA_TEXTURE);

  001bb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001c1	6a 02		 push	 2
  001c3	6a 06		 push	 6
  001c5	6a 00		 push	 0
  001c7	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 320  : 	//STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_MODULATE);
; 321  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAOP, (m_bUseTexture)?D3DTOP_SELECTARG2:D3DTOP_SELECTARG1);

  001cc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001d2	33 c0		 xor	 eax, eax
  001d4	38 86 84 00 00
	00		 cmp	 BYTE PTR [esi+132], al
  001da	0f 95 c0	 setne	 al
  001dd	83 c0 02	 add	 eax, 2
  001e0	50		 push	 eax
  001e1	6a 04		 push	 4
  001e3	6a 00		 push	 0
  001e5	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 322  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_COLOROP, D3DTOP_DISABLE);

  001ea	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001f0	6a 01		 push	 1
  001f2	6a 01		 push	 1
  001f4	6a 01		 push	 1
  001f6	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 323  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_ALPHAOP, D3DTOP_DISABLE);

  001fb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00201	6a 01		 push	 1
  00203	6a 04		 push	 4
  00205	6a 01		 push	 1
  00207	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 324  : 	STATEMANAGER.SetRenderState(D3DRS_LIGHTING, FALSE);

  0020c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00212	6a 00		 push	 0
  00214	68 89 00 00 00	 push	 137			; 00000089H
  00219	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 325  : 	STATEMANAGER.SetTexture(0, lpTexture);

  0021e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00224	6a 00		 push	 0
  00226	6a 00		 push	 0
  00228	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 326  : 	STATEMANAGER.SetTexture(1, NULL);

  0022d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00233	6a 00		 push	 0
  00235	6a 01		 push	 1
  00237	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 327  : 	STATEMANAGER.DrawPrimitiveUP(D3DPT_TRIANGLESTRIP,

  0023c	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0023f	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00244	8b 56 34	 mov	 edx, DWORD PTR [esi+52]
  00247	2b d1		 sub	 edx, ecx
  00249	f7 ea		 imul	 edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 327  : 	STATEMANAGER.DrawPrimitiveUP(D3DPT_TRIANGLESTRIP,

  0024b	6a 18		 push	 24			; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0024d	c1 fa 02	 sar	 edx, 2
  00250	8b c2		 mov	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 327  : 	STATEMANAGER.DrawPrimitiveUP(D3DPT_TRIANGLESTRIP,

  00252	83 c2 fe	 add	 edx, -2			; fffffffeH
  00255	51		 push	 ecx
  00256	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0025c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 327  : 	STATEMANAGER.DrawPrimitiveUP(D3DPT_TRIANGLESTRIP,

  0025f	03 c2		 add	 eax, edx
  00261	50		 push	 eax
  00262	6a 05		 push	 5
  00264	e8 00 00 00 00	 call	 ?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z ; CStateManager::DrawPrimitiveUP

; 328  : 								 int(m_PDTVertexVector.size() - 2),
; 329  : 								 &m_PDTVertexVector[0],
; 330  : 								 sizeof(TPDTVertex));
; 331  : 
; 332  : 	STATEMANAGER.SetRenderState(D3DRS_LIGHTING, TRUE);

  00269	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0026f	6a 01		 push	 1
  00271	68 89 00 00 00	 push	 137			; 00000089H
  00276	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 333  : 
; 334  : 	STATEMANAGER.RestoreRenderState(D3DRS_ZENABLE);

  0027b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00281	6a 07		 push	 7
  00283	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 335  : 	STATEMANAGER.RestoreRenderState(D3DRS_ZFUNC);

  00288	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0028e	6a 17		 push	 23			; 00000017H
  00290	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 336  : 	STATEMANAGER.RestoreRenderState(D3DRS_ZWRITEENABLE);

  00295	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0029b	6a 0e		 push	 14			; 0000000eH
  0029d	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 337  : 
; 338  : 	STATEMANAGER.RestoreRenderState(D3DRS_ALPHATESTENABLE);

  002a2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002a8	6a 0f		 push	 15			; 0000000fH
  002aa	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 339  : 	STATEMANAGER.RestoreRenderState(D3DRS_ALPHAREF);

  002af	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002b5	6a 18		 push	 24			; 00000018H
  002b7	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 340  : 	STATEMANAGER.RestoreRenderState(D3DRS_ALPHAFUNC);

  002bc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002c2	6a 19		 push	 25			; 00000019H
  002c4	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 341  : 
; 342  : 	STATEMANAGER.RestoreRenderState(D3DRS_ALPHABLENDENABLE);

  002c9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002cf	6a 1b		 push	 27			; 0000001bH
  002d1	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 343  : 	STATEMANAGER.RestoreRenderState(D3DRS_SRCBLEND);

  002d6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002dc	6a 13		 push	 19			; 00000013H
  002de	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 344  : 	STATEMANAGER.RestoreRenderState(D3DRS_DESTBLEND);

  002e3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002e9	6a 14		 push	 20			; 00000014H
  002eb	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 345  : 
; 346  : 	STATEMANAGER.RestoreTransform(D3DTS_WORLD);

  002f0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002f6	68 00 01 00 00	 push	 256			; 00000100H
  002fb	e8 00 00 00 00	 call	 ?RestoreTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@@Z ; CStateManager::RestoreTransform

; 347  : 	STATEMANAGER.RestoreVertexShader();

  00300	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00306	e8 00 00 00 00	 call	 ?RestoreVertexShader@CStateManager@@QAEXXZ ; CStateManager::RestoreVertexShader

; 348  : 	STATEMANAGER.RestoreRenderState(D3DRS_CULLMODE);

  0030b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00311	6a 16		 push	 22			; 00000016H
  00313	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState
$LN1@Render:

; 349  : }

  00318	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0031b	33 cd		 xor	 ecx, ebp
  0031d	5e		 pop	 esi
  0031e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00323	8b e5		 mov	 esp, ebp
  00325	5d		 pop	 ebp
  00326	c3		 ret	 0
?Render@CWeaponTrace@@QAEXXZ ENDP			; CWeaponTrace::Render
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
;	COMDAT ?Update@CWeaponTrace@@QAEXM@Z
_TEXT	SEGMENT
$T2 = -364						; size = 16
$T3 = -348						; size = 16
$T4 = -344						; size = 12
$T5 = -344						; size = 12
$T6 = -344						; size = 12
_pBoneMat$7 = -332					; size = 4
_fElapsedTime$ = -332					; size = 4
tv1695 = -328						; size = 4
tv1693 = -328						; size = 4
_pMatrix$8 = -328					; size = 4
_matPoint$9 = -324					; size = 64
_matTranslation$10 = -260				; size = 64
_matRotation$11 = -196					; size = 64
_mat$12 = -132						; size = 64
$T13 = -68						; size = 64
$T14 = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_fReachScale$ = 8					; size = 4
?Update@CWeaponTrace@@QAEXM@Z PROC			; CWeaponTrace::Update, COMDAT
; _this$ = ecx

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 6c 01 00
	00		 sub	 esp, 364		; 0000016cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b f9		 mov	 edi, ecx

; 29   : 	float fElapsedTime = CTimer::Instance().GetCurrentSecond() - m_fLastUpdate;

  00018	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  0001e	e8 00 00 00 00	 call	 ?GetCurrentSecond@CTimer@@QAEMXZ ; CTimer::GetCurrentSecond
  00023	d8 67 04	 fsub	 DWORD PTR [edi+4]

; 30   : 	m_fLastUpdate = CTimer::Instance().GetCurrentSecond();

  00026	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  0002c	d9 9d b4 fe ff
	ff		 fstp	 DWORD PTR _fElapsedTime$[ebp]
  00032	e8 00 00 00 00	 call	 ?GetCurrentSecond@CTimer@@QAEMXZ ; CTimer::GetCurrentSecond

; 31   : 
; 32   : 	if (!m_pInstance)

  00037	83 7f 44 00	 cmp	 DWORD PTR [edi+68], 0
  0003b	d9 5f 04	 fstp	 DWORD PTR [edi+4]
  0003e	0f 84 72 03 00
	00		 je	 $LN14@Update
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1285 :             _Myproxy = _Parent->_Myproxy;

  00044	8b 77 08	 mov	 esi, DWORD PTR [edi+8]
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 36   : 		for(it=m_ShortTimePointList.begin();it!=m_ShortTimePointList.end();++it)

  00047	8d 5f 08	 lea	 ebx, DWORD PTR [edi+8]
  0004a	8b 53 0c	 mov	 edx, DWORD PTR [ebx+12]
  0004d	f3 0f 10 8d b4
	fe ff ff	 movss	 xmm1, DWORD PTR _fElapsedTime$[ebp]
$LL239@Update:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 939  :         return iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

  00055	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  00058	03 43 0c	 add	 eax, DWORD PTR [ebx+12]
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 36   : 		for(it=m_ShortTimePointList.begin();it!=m_ShortTimePointList.end();++it)

  0005b	3b d0		 cmp	 edx, eax
  0005d	74 42		 je	 SHORT $LN3@Update
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1293 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

  0005f	85 f6		 test	 esi, esi
  00061	74 04		 je	 SHORT $LN188@Update
  00063	8b 06		 mov	 eax, DWORD PTR [esi]
  00065	eb 02		 jmp	 SHORT $LN189@Update
$LN188@Update:
  00067	33 c0		 xor	 eax, eax
$LN189@Update:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00069	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 38   : 			it->first += fElapsedTime;

  0006c	0f 28 c1	 movaps	 xmm0, xmm1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 269  :         return _Mycont->_Map[_Block][_Off];

  0006f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00072	49		 dec	 ecx
  00073	23 ca		 and	 ecx, edx

; 269  :         return _Mycont->_Map[_Block][_Off];

  00075	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 38   : 			it->first += fElapsedTime;

  00078	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  0007c	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1293 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

  00080	85 f6		 test	 esi, esi
  00082	74 04		 je	 SHORT $LN176@Update
  00084	8b 06		 mov	 eax, DWORD PTR [esi]
  00086	eb 02		 jmp	 SHORT $LN177@Update
$LN176@Update:
  00088	33 c0		 xor	 eax, eax
$LN177@Update:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0008a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 456  :         return pointer_traits<pointer>::pointer_to(**this);

  0008d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00090	49		 dec	 ecx
  00091	23 ca		 and	 ecx, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 39   : 			if (it->first>m_fLifeTime)

  00093	42		 inc	 edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 456  :         return pointer_traits<pointer>::pointer_to(**this);

  00094	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 39   : 			if (it->first>m_fLifeTime)

  00097	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0009b	0f 2f 47 3c	 comiss	 xmm0, DWORD PTR [edi+60]
  0009f	76 b4		 jbe	 SHORT $LL239@Update
$LN3@Update:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 939  :         return iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

  000a1	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  000a4	03 43 10	 add	 eax, DWORD PTR [ebx+16]
  000a7	89 85 b8 fe ff
	ff		 mov	 DWORD PTR tv1695[ebp], eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 45   : 		if (it!=m_ShortTimePointList.end())

  000ad	3b d0		 cmp	 edx, eax
  000af	74 48		 je	 SHORT $LN10@Update
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1284 :         if (_Parent) { // have a parent, do adoption

  000b1	85 db		 test	 ebx, ebx
  000b3	74 04		 je	 SHORT $LN209@Update

; 1285 :             _Myproxy = _Parent->_Myproxy;

  000b5	8b 0b		 mov	 ecx, DWORD PTR [ebx]

; 1286 :         } else { // no future parent, just disown current parent

  000b7	eb 02		 jmp	 SHORT $LN210@Update
$LN209@Update:

; 1287 :             _Myproxy = nullptr;

  000b9	33 c9		 xor	 ecx, ecx
$LN210@Update:
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 46   : 		m_ShortTimePointList.erase(it,m_ShortTimePointList.end());

  000bb	83 ec 0c	 sub	 esp, 12			; 0000000cH
  000be	8b c4		 mov	 eax, esp
  000c0	83 ec 0c	 sub	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1255 :         _Myproxy = _Right._Myproxy;

  000c3	89 08		 mov	 DWORD PTR [eax], ecx
  000c5	8b 8d b8 fe ff
	ff		 mov	 ecx, DWORD PTR tv1695[ebp]
  000cb	89 48 08	 mov	 DWORD PTR [eax+8], ecx
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 46   : 		m_ShortTimePointList.erase(it,m_ShortTimePointList.end());

  000ce	8b cb		 mov	 ecx, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1299 :     mutable _Iterator_base12* _Mynextiter = nullptr;

  000d0	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 46   : 		m_ShortTimePointList.erase(it,m_ShortTimePointList.end());

  000d7	8b c4		 mov	 eax, esp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1299 :     mutable _Iterator_base12* _Mynextiter = nullptr;

  000d9	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1255 :         _Myproxy = _Right._Myproxy;

  000e0	89 30		 mov	 DWORD PTR [eax], esi
  000e2	89 50 08	 mov	 DWORD PTR [eax+8], edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 46   : 		m_ShortTimePointList.erase(it,m_ShortTimePointList.end());

  000e5	8d 85 a8 fe ff
	ff		 lea	 eax, DWORD PTR $T6[ebp]
  000eb	50		 push	 eax
  000ec	e8 00 00 00 00	 call	 ?erase@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@2@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@2@0@Z ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::erase
  000f1	f3 0f 10 8d b4
	fe ff ff	 movss	 xmm1, DWORD PTR _fElapsedTime$[ebp]
$LN10@Update:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1285 :             _Myproxy = _Parent->_Myproxy;

  000f9	8b 77 1c	 mov	 esi, DWORD PTR [edi+28]
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 47   : 		for(it=m_LongTimePointList.begin();it!=m_LongTimePointList.end();++it)

  000fc	8d 5f 1c	 lea	 ebx, DWORD PTR [edi+28]
  000ff	8b 53 0c	 mov	 edx, DWORD PTR [ebx+12]
$LL105@Update:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 939  :         return iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

  00102	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  00105	03 43 0c	 add	 eax, DWORD PTR [ebx+12]
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 47   : 		for(it=m_LongTimePointList.begin();it!=m_LongTimePointList.end();++it)

  00108	3b d0		 cmp	 edx, eax
  0010a	74 42		 je	 SHORT $LN6@Update
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1293 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

  0010c	85 f6		 test	 esi, esi
  0010e	74 04		 je	 SHORT $LN54@Update
  00110	8b 06		 mov	 eax, DWORD PTR [esi]
  00112	eb 02		 jmp	 SHORT $LN55@Update
$LN54@Update:
  00114	33 c0		 xor	 eax, eax
$LN55@Update:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00116	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 49   : 			it->first += fElapsedTime;

  00119	0f 28 c1	 movaps	 xmm0, xmm1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 269  :         return _Mycont->_Map[_Block][_Off];

  0011c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0011f	49		 dec	 ecx
  00120	23 ca		 and	 ecx, edx

; 269  :         return _Mycont->_Map[_Block][_Off];

  00122	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 49   : 			it->first += fElapsedTime;

  00125	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  00129	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1293 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

  0012d	85 f6		 test	 esi, esi
  0012f	74 04		 je	 SHORT $LN42@Update
  00131	8b 06		 mov	 eax, DWORD PTR [esi]
  00133	eb 02		 jmp	 SHORT $LN43@Update
$LN42@Update:
  00135	33 c0		 xor	 eax, eax
$LN43@Update:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00137	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 456  :         return pointer_traits<pointer>::pointer_to(**this);

  0013a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0013d	49		 dec	 ecx
  0013e	23 ca		 and	 ecx, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 50   : 			if (it->first>m_fLifeTime)

  00140	42		 inc	 edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 456  :         return pointer_traits<pointer>::pointer_to(**this);

  00141	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 50   : 			if (it->first>m_fLifeTime)

  00144	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00148	0f 2f 47 3c	 comiss	 xmm0, DWORD PTR [edi+60]
  0014c	76 b4		 jbe	 SHORT $LL105@Update
$LN6@Update:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 939  :         return iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

  0014e	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  00151	03 43 10	 add	 eax, DWORD PTR [ebx+16]
  00154	89 85 b8 fe ff
	ff		 mov	 DWORD PTR tv1693[ebp], eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 56   : 		if (it!=m_LongTimePointList.end())

  0015a	3b d0		 cmp	 edx, eax
  0015c	74 40		 je	 SHORT $LN12@Update
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1284 :         if (_Parent) { // have a parent, do adoption

  0015e	85 db		 test	 ebx, ebx
  00160	74 04		 je	 SHORT $LN81@Update

; 1285 :             _Myproxy = _Parent->_Myproxy;

  00162	8b 0b		 mov	 ecx, DWORD PTR [ebx]

; 1286 :         } else { // no future parent, just disown current parent

  00164	eb 02		 jmp	 SHORT $LN82@Update
$LN81@Update:

; 1287 :             _Myproxy = nullptr;

  00166	33 c9		 xor	 ecx, ecx
$LN82@Update:
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 57   : 			m_LongTimePointList.erase(it, m_LongTimePointList.end());

  00168	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0016b	8b c4		 mov	 eax, esp
  0016d	83 ec 0c	 sub	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1255 :         _Myproxy = _Right._Myproxy;

  00170	89 08		 mov	 DWORD PTR [eax], ecx
  00172	8b 8d b8 fe ff
	ff		 mov	 ecx, DWORD PTR tv1693[ebp]
  00178	89 48 08	 mov	 DWORD PTR [eax+8], ecx
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 57   : 			m_LongTimePointList.erase(it, m_LongTimePointList.end());

  0017b	8b cb		 mov	 ecx, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1299 :     mutable _Iterator_base12* _Mynextiter = nullptr;

  0017d	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 57   : 			m_LongTimePointList.erase(it, m_LongTimePointList.end());

  00184	8b c4		 mov	 eax, esp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1299 :     mutable _Iterator_base12* _Mynextiter = nullptr;

  00186	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1255 :         _Myproxy = _Right._Myproxy;

  0018d	89 30		 mov	 DWORD PTR [eax], esi
  0018f	89 50 08	 mov	 DWORD PTR [eax+8], edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 57   : 			m_LongTimePointList.erase(it, m_LongTimePointList.end());

  00192	8d 85 a8 fe ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  00198	50		 push	 eax
  00199	e8 00 00 00 00	 call	 ?erase@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@2@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@2@0@Z ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::erase
$LN12@Update:

; 58   : 	}
; 59   : 
; 60   : 	if (m_isPlaying && m_fz>=0.0001f)

  0019e	83 bf 80 00 00
	00 00		 cmp	 DWORD PTR [edi+128], 0
  001a5	0f 84 0b 02 00
	00		 je	 $LN14@Update
  001ab	f3 0f 10 47 74	 movss	 xmm0, DWORD PTR [edi+116]
  001b0	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@38d1b717
  001b7	0f 82 f9 01 00
	00		 jb	 $LN14@Update

; 61   : 	{
; 62   : 		D3DXMATRIX * pMatrix;
; 63   : 		if (m_pInstance->GetCompositeBoneMatrix(m_dwModelInstanceIndex, m_iBoneIndex, &pMatrix))

  001bd	8b 4f 44	 mov	 ecx, DWORD PTR [edi+68]
  001c0	8d 85 b8 fe ff
	ff		 lea	 eax, DWORD PTR _pMatrix$8[ebp]
  001c6	50		 push	 eax
  001c7	ff b7 88 00 00
	00		 push	 DWORD PTR [edi+136]
  001cd	ff 77 48	 push	 DWORD PTR [edi+72]
  001d0	e8 00 00 00 00	 call	 ?GetCompositeBoneMatrix@CGraphicThingInstance@@QAEHKKPAPAUD3DXMATRIX@@@Z ; CGraphicThingInstance::GetCompositeBoneMatrix
  001d5	85 c0		 test	 eax, eax
  001d7	0f 84 d9 01 00
	00		 je	 $LN14@Update

; 64   : 		{
; 65   : 			D3DXMATRIX * pBoneMat;
; 66   : 			m_pInstance->GetBoneMatrix(m_dwModelInstanceIndex, m_iBoneIndex, &pBoneMat);

  001dd	8b 4f 44	 mov	 ecx, DWORD PTR [edi+68]
  001e0	8d 85 b4 fe ff
	ff		 lea	 eax, DWORD PTR _pBoneMat$7[ebp]
  001e6	50		 push	 eax
  001e7	ff b7 88 00 00
	00		 push	 DWORD PTR [edi+136]
  001ed	ff 77 48	 push	 DWORD PTR [edi+72]
  001f0	e8 00 00 00 00	 call	 ?GetBoneMatrix@CGraphicThingInstance@@QAEHKKPAPAUD3DXMATRIX@@@Z ; CGraphicThingInstance::GetBoneMatrix

; 67   : 			D3DXMATRIX mat = *pMatrix;

  001f5	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR _pMatrix$8[ebp]

; 68   : 			mat._41 = pBoneMat->_41;
; 69   : 			mat._42 = pBoneMat->_42;
; 70   : 			mat._43 = pBoneMat->_43;
; 71   : 			D3DXMATRIX matPoint;
; 72   : 			D3DXMATRIX matTranslation;
; 73   : 			D3DXMATRIX matRotation;
; 74   : 
; 75   : 			//D3DXMatrixTranslation(&matTranslation, 0.0f, m_fLength, 0.0f);
; 76   : 			D3DXMatrixTranslation(&matTranslation, 0.0f, 0.0f, m_fLength*fReachScale);

  001fb	83 ec 0c	 sub	 esp, 12			; 0000000cH
  001fe	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00201	0f 11 85 7c ff
	ff ff		 movups	 XMMWORD PTR _mat$12[ebp], xmm0
  00208	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  0020c	0f 11 45 8c	 movups	 XMMWORD PTR _mat$12[ebp+16], xmm0
  00210	0f 10 40 20	 movups	 xmm0, XMMWORD PTR [eax+32]
  00214	0f 11 45 9c	 movups	 XMMWORD PTR _mat$12[ebp+32], xmm0
  00218	0f 10 40 30	 movups	 xmm0, XMMWORD PTR [eax+48]
  0021c	8b 85 b4 fe ff
	ff		 mov	 eax, DWORD PTR _pBoneMat$7[ebp]
  00222	0f 11 45 ac	 movups	 XMMWORD PTR _mat$12[ebp+48], xmm0
  00226	f3 0f 10 40 30	 movss	 xmm0, DWORD PTR [eax+48]
  0022b	f3 0f 11 45 ac	 movss	 DWORD PTR _mat$12[ebp+48], xmm0
  00230	f3 0f 10 40 34	 movss	 xmm0, DWORD PTR [eax+52]
  00235	f3 0f 11 45 b0	 movss	 DWORD PTR _mat$12[ebp+52], xmm0
  0023a	f3 0f 10 40 38	 movss	 xmm0, DWORD PTR [eax+56]
  0023f	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _matTranslation$10[ebp]
  00245	f3 0f 11 45 b4	 movss	 DWORD PTR _mat$12[ebp+56], xmm0
  0024a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fReachScale$[ebp]
  0024f	f3 0f 59 47 7c	 mulss	 xmm0, DWORD PTR [edi+124]
  00254	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0025a	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR [esp+4], 0
  00262	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  00269	50		 push	 eax
  0026a	e8 00 00 00 00	 call	 _D3DXMatrixTranslation@16

; 77   : 			D3DXMatrixRotationZ(&matRotation, D3DXToRadian(m_fRotation));

  0026f	f3 0f 10 47 78	 movss	 xmm0, DWORD PTR [edi+120]
  00274	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _matRotation$11[ebp]
  0027a	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  00282	51		 push	 ecx
  00283	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00288	50		 push	 eax
  00289	e8 00 00 00 00	 call	 _D3DXMatrixRotationZ@8
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 580  :     D3DXMatrixMultiply(&matT, this, &mat);

  0028e	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _matRotation$11[ebp]
  00294	50		 push	 eax
  00295	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _mat$12[ebp]
  0029b	50		 push	 eax
  0029c	8d 45 bc	 lea	 eax, DWORD PTR $T14[ebp]
  0029f	50		 push	 eax
  002a0	e8 00 00 00 00	 call	 _D3DXMatrixMultiply@12
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 80   : 			matPoint = /**pMatrix*/mat * matRotation;

  002a5	0f 10 45 bc	 movups	 xmm0, XMMWORD PTR $T14[ebp]

; 87   : 			m_ShortTimePointList.push_front(

  002a9	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  002ac	c7 85 94 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 80   : 			matPoint = /**pMatrix*/mat * matRotation;

  002b6	0f 10 4d ec	 movups	 xmm1, XMMWORD PTR $T14[ebp+48]
  002ba	0f 11 85 bc fe
	ff ff		 movups	 XMMWORD PTR _matPoint$9[ebp], xmm0
  002c1	0f 10 45 cc	 movups	 xmm0, XMMWORD PTR $T14[ebp+16]

; 87   : 			m_ShortTimePointList.push_front(

  002c5	0f 28 d1	 movaps	 xmm2, xmm1
  002c8	f3 0f 58 57 6c	 addss	 xmm2, DWORD PTR [edi+108]
  002cd	0f 11 85 cc fe
	ff ff		 movups	 XMMWORD PTR _matPoint$9[ebp+16], xmm0
  002d4	0f 10 45 dc	 movups	 xmm0, XMMWORD PTR $T14[ebp+32]
  002d8	0f 11 8d ec fe
	ff ff		 movups	 XMMWORD PTR _matPoint$9[ebp+48], xmm1
  002df	0f 11 85 dc fe
	ff ff		 movups	 XMMWORD PTR _matPoint$9[ebp+32], xmm0
  002e6	0f 28 c1	 movaps	 xmm0, xmm1
  002e9	0f c6 c1 55	 shufps	 xmm0, xmm1, 85		; 00000055H
  002ed	f3 0f 58 47 70	 addss	 xmm0, DWORD PTR [edi+112]
  002f2	0f c6 c9 aa	 shufps	 xmm1, xmm1, 170		; 000000aaH
  002f6	f3 0f 58 4f 74	 addss	 xmm1, DWORD PTR [edi+116]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  002fb	0f 14 d0	 unpcklps xmm2, xmm0
  002fe	66 0f d6 95 98
	fe ff ff	 movq	 QWORD PTR $T2[ebp+4], xmm2
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00306	f3 0f 11 8d b0
	fe ff ff	 movss	 DWORD PTR $T4[ebp+8], xmm1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  0030e	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR $T4[ebp+8]
  00314	89 85 a0 fe ff
	ff		 mov	 DWORD PTR $T2[ebp+12], eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 87   : 			m_ShortTimePointList.push_front(

  0031a	8d 85 94 fe ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  00320	50		 push	 eax
  00321	e8 00 00 00 00	 call	 ?push_front@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAEX$$QAU?$pair@MUD3DXVECTOR3@@@2@@Z ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::push_front
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 580  :     D3DXMatrixMultiply(&matT, this, &mat);

  00326	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR _matPoint$9[ebp]
  0032c	50		 push	 eax
  0032d	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _matTranslation$10[ebp]
  00333	50		 push	 eax
  00334	8d 45 bc	 lea	 eax, DWORD PTR $T13[ebp]
  00337	50		 push	 eax
  00338	e8 00 00 00 00	 call	 _D3DXMatrixMultiply@12
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 98   : 			matPoint = matTranslation * matPoint;

  0033d	0f 10 45 bc	 movups	 xmm0, XMMWORD PTR $T13[ebp]
  00341	0f 11 85 bc fe
	ff ff		 movups	 XMMWORD PTR _matPoint$9[ebp], xmm0
  00348	0f 10 45 cc	 movups	 xmm0, XMMWORD PTR $T13[ebp+16]
  0034c	0f 11 85 cc fe
	ff ff		 movups	 XMMWORD PTR _matPoint$9[ebp+16], xmm0
  00353	0f 10 4d ec	 movups	 xmm1, XMMWORD PTR $T13[ebp+48]

; 104  : 			m_LongTimePointList.push_front(

  00357	8d 85 a4 fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  0035d	8b cb		 mov	 ecx, ebx
  0035f	0f 10 45 dc	 movups	 xmm0, XMMWORD PTR $T13[ebp+32]
  00363	50		 push	 eax
  00364	0f 11 8d ec fe
	ff ff		 movups	 XMMWORD PTR _matPoint$9[ebp+48], xmm1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  0036b	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T3[ebp], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 98   : 			matPoint = matTranslation * matPoint;

  00375	0f 11 85 dc fe
	ff ff		 movups	 XMMWORD PTR _matPoint$9[ebp+32], xmm0

; 104  : 			m_LongTimePointList.push_front(

  0037c	0f 28 c1	 movaps	 xmm0, xmm1
  0037f	f3 0f 58 47 6c	 addss	 xmm0, DWORD PTR [edi+108]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00384	f3 0f 11 85 a8
	fe ff ff	 movss	 DWORD PTR $T3[ebp+4], xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 104  : 			m_LongTimePointList.push_front(

  0038c	0f 28 c1	 movaps	 xmm0, xmm1
  0038f	0f c6 c1 55	 shufps	 xmm0, xmm1, 85		; 00000055H
  00393	f3 0f 58 47 70	 addss	 xmm0, DWORD PTR [edi+112]
  00398	0f c6 c9 aa	 shufps	 xmm1, xmm1, 170		; 000000aaH
  0039c	f3 0f 58 4f 74	 addss	 xmm1, DWORD PTR [edi+116]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  003a1	f3 0f 11 85 ac
	fe ff ff	 movss	 DWORD PTR $T3[ebp+8], xmm0
  003a9	f3 0f 11 8d b0
	fe ff ff	 movss	 DWORD PTR $T3[ebp+12], xmm1
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 104  : 			m_LongTimePointList.push_front(

  003b1	e8 00 00 00 00	 call	 ?push_front@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAEX$$QAU?$pair@MUD3DXVECTOR3@@@2@@Z ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::push_front
$LN14@Update:

; 105  : 				TTimePoint(
; 106  : 					0.0f,
; 107  : 					D3DXVECTOR3(
; 108  : 						m_fx + matPoint._41,
; 109  : 						m_fy + matPoint._42,
; 110  : 						m_fz + matPoint._43
; 111  : 						)
; 112  : 					)
; 113  : 				);
; 114  : 		}
; 115  : 	}
; 116  : 
; 117  : 	//if (!BuildVertex())
; 118  : 	//	return;
; 119  : }

  003b6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003b9	5f		 pop	 edi
  003ba	5e		 pop	 esi
  003bb	33 cd		 xor	 ecx, ebp
  003bd	5b		 pop	 ebx
  003be	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003c3	8b e5		 mov	 esp, ebp
  003c5	5d		 pop	 ebp
  003c6	c2 04 00	 ret	 4
?Update@CWeaponTrace@@QAEXM@Z ENDP			; CWeaponTrace::Update
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
;	COMDAT ?SetSamplingTime@CWeaponTrace@@QAEXM@Z
_TEXT	SEGMENT
_fSamplingTime$ = 8					; size = 4
?SetSamplingTime@CWeaponTrace@@QAEXM@Z PROC		; CWeaponTrace::SetSamplingTime, COMDAT
; _this$ = ecx

; 417  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 418  : 	m_fSamplingTime = fSamplingTime;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fSamplingTime$[ebp]
  00008	f3 0f 11 41 40	 movss	 DWORD PTR [ecx+64], xmm0

; 419  : }

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
?SetSamplingTime@CWeaponTrace@@QAEXM@Z ENDP		; CWeaponTrace::SetSamplingTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
;	COMDAT ?SetLifeTime@CWeaponTrace@@QAEXM@Z
_TEXT	SEGMENT
_fLifeTime$ = 8						; size = 4
?SetLifeTime@CWeaponTrace@@QAEXM@Z PROC			; CWeaponTrace::SetLifeTime, COMDAT
; _this$ = ecx

; 412  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 413  : 	m_fLifeTime = fLifeTime;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fLifeTime$[ebp]
  00008	f3 0f 11 41 3c	 movss	 DWORD PTR [ecx+60], xmm0

; 414  : }

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
?SetLifeTime@CWeaponTrace@@QAEXM@Z ENDP			; CWeaponTrace::SetLifeTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
;	COMDAT ?SetRotation@CWeaponTrace@@QAEXM@Z
_TEXT	SEGMENT
_fRotation$ = 8						; size = 4
?SetRotation@CWeaponTrace@@QAEXM@Z PROC			; CWeaponTrace::SetRotation, COMDAT
; _this$ = ecx

; 407  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 408  : 	m_fRotation = fRotation;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fRotation$[ebp]
  00008	f3 0f 11 41 78	 movss	 DWORD PTR [ecx+120], xmm0

; 409  : }

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
?SetRotation@CWeaponTrace@@QAEXM@Z ENDP			; CWeaponTrace::SetRotation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
;	COMDAT ?SetPosition@CWeaponTrace@@QAEXMMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
?SetPosition@CWeaponTrace@@QAEXMMM@Z PROC		; CWeaponTrace::SetPosition, COMDAT
; _this$ = ecx

; 400  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 401  : 	m_fx = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00008	f3 0f 11 41 6c	 movss	 DWORD PTR [ecx+108], xmm0

; 402  : 	m_fy = fy;

  0000d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00012	f3 0f 11 41 70	 movss	 DWORD PTR [ecx+112], xmm0

; 403  : 	m_fz = fz;

  00017	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0001c	f3 0f 11 41 74	 movss	 DWORD PTR [ecx+116], xmm0

; 404  : }

  00021	5d		 pop	 ebp
  00022	c2 0c 00	 ret	 12			; 0000000cH
?SetPosition@CWeaponTrace@@QAEXMMM@Z ENDP		; CWeaponTrace::SetPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
;	COMDAT ?SetWeaponInstance@CWeaponTrace@@QAE_NPAVCGraphicThingInstance@@KPBD@Z
_TEXT	SEGMENT
tv459 = -40						; size = 8
_pmat$ = -40						; size = 4
_v3Max$ = -28						; size = 12
_v3Min$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_pInstance$ = 8						; size = 4
_dwModelIndex$ = 12					; size = 4
_c_szBoneName$ = 16					; size = 4
?SetWeaponInstance@CWeaponTrace@@QAE_NPAVCGraphicThingInstance@@KPBD@Z PROC ; CWeaponTrace::SetWeaponInstance, COMDAT
; _this$ = ecx

; 371  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c4		 xor	 eax, esp
  00010	89 44 24 28	 mov	 DWORD PTR __$ArrayPad$[esp+44], eax
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	8b 75 08	 mov	 esi, DWORD PTR _pInstance$[ebp]
  00019	8b d9		 mov	 ebx, ecx
  0001b	57		 push	 edi

; 372  : 	pInstance->Update();

  0001c	8b ce		 mov	 ecx, esi
  0001e	e8 00 00 00 00	 call	 ?Update@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::Update

; 373  : 	pInstance->DeformNoSkin();

  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?DeformNoSkin@CGraphicThingInstance@@QAEXXZ ; CGraphicThingInstance::DeformNoSkin

; 374  : 
; 375  : 	D3DXVECTOR3 v3Min;
; 376  : 	D3DXVECTOR3 v3Max;
; 377  : 	if (!pInstance->GetBoundBox(dwModelIndex, &v3Min, &v3Max))

  0002a	8b 7d 0c	 mov	 edi, DWORD PTR _dwModelIndex$[ebp]
  0002d	8d 44 24 1c	 lea	 eax, DWORD PTR _v3Max$[esp+56]
  00031	50		 push	 eax
  00032	8d 44 24 2c	 lea	 eax, DWORD PTR _v3Min$[esp+60]
  00036	8b ce		 mov	 ecx, esi
  00038	50		 push	 eax
  00039	57		 push	 edi
  0003a	e8 00 00 00 00	 call	 ?GetBoundBox@CGraphicThingInstance@@QAEHKPAUD3DXVECTOR3@@0@Z ; CGraphicThingInstance::GetBoundBox
  0003f	85 c0		 test	 eax, eax
  00041	75 16		 jne	 SHORT $LN2@SetWeaponI

; 378  : 		return false;

  00043	32 c0		 xor	 al, al

; 397  : }

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	8b 4c 24 28	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+44]
  0004c	33 cc		 xor	 ecx, esp
  0004e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 0c 00	 ret	 12			; 0000000cH
$LN2@SetWeaponI:

; 379  : 
; 380  : 	m_iBoneIndex = 0;
; 381  : 	m_dwModelInstanceIndex = dwModelIndex;
; 382  : 
; 383  : 	m_pInstance = pInstance;
; 384  : 	D3DXMATRIX * pmat;
; 385  : 	pInstance->GetBoneMatrix(dwModelIndex, 0, &pmat);

  00059	8d 44 24 10	 lea	 eax, DWORD PTR _pmat$[esp+56]
  0005d	c7 83 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+136], 0
  00067	50		 push	 eax
  00068	6a 00		 push	 0
  0006a	57		 push	 edi
  0006b	8b ce		 mov	 ecx, esi
  0006d	89 7b 48	 mov	 DWORD PTR [ebx+72], edi
  00070	89 73 44	 mov	 DWORD PTR [ebx+68], esi
  00073	e8 00 00 00 00	 call	 ?GetBoneMatrix@CGraphicThingInstance@@QAEHKKPAPAUD3DXMATRIX@@@Z ; CGraphicThingInstance::GetBoneMatrix
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00078	8b 44 24 10	 mov	 eax, DWORD PTR _pmat$[esp+56]
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 388  : 	m_fLength =

  0007c	83 ec 08	 sub	 esp, 8
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 180  :     x = fx;

  0007f	f3 0f 10 60 30	 movss	 xmm4, DWORD PTR [eax+48]

; 181  :     y = fy;

  00084	f3 0f 10 68 34	 movss	 xmm5, DWORD PTR [eax+52]

; 182  :     z = fz;

  00089	0f 28 cc	 movaps	 xmm1, xmm4
  0008c	f3 0f 5c 4c 24
	24		 subss	 xmm1, DWORD PTR _v3Max$[esp+64]
  00092	f3 0f 10 58 38	 movss	 xmm3, DWORD PTR [eax+56]

; 180  :     x = fx;

  00097	0f 28 d5	 movaps	 xmm2, xmm5
  0009a	f3 0f 5c 54 24
	28		 subss	 xmm2, DWORD PTR _v3Max$[esp+68]
  000a0	f3 0f 5c 6c 24
	34		 subss	 xmm5, DWORD PTR _v3Min$[esp+68]

; 182  :     z = fz;

  000a6	f3 0f 5c 64 24
	30		 subss	 xmm4, DWORD PTR _v3Min$[esp+64]
  000ac	0f 28 c3	 movaps	 xmm0, xmm3

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  000af	f3 0f 59 c9	 mulss	 xmm1, xmm1

; 181  :     y = fy;

  000b3	f3 0f 5c 44 24
	2c		 subss	 xmm0, DWORD PTR _v3Max$[esp+72]
  000b9	f3 0f 5c 5c 24
	38		 subss	 xmm3, DWORD PTR _v3Min$[esp+72]

; 182  :     z = fz;

  000bf	f3 0f 59 d2	 mulss	 xmm2, xmm2
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 388  : 	m_fLength =

  000c3	f3 0f 59 ed	 mulss	 xmm5, xmm5
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  000c7	f3 0f 59 e4	 mulss	 xmm4, xmm4
  000cb	f3 0f 58 d1	 addss	 xmm2, xmm1
  000cf	f3 0f 59 c0	 mulss	 xmm0, xmm0
  000d3	f3 0f 58 ec	 addss	 xmm5, xmm4
  000d7	f3 0f 59 db	 mulss	 xmm3, xmm3
  000db	f3 0f 58 d0	 addss	 xmm2, xmm0
  000df	f3 0f 58 eb	 addss	 xmm5, xmm3
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 388  : 	m_fLength =

  000e3	f3 0f 11 54 24
	04		 movss	 DWORD PTR [esp+4], xmm2
  000e9	f3 0f 11 2c 24	 movss	 DWORD PTR [esp], xmm5
  000ee	e8 00 00 00 00	 call	 ?fMAX@@YAMMM@Z		; fMAX
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  000f3	dd 5c 24 18	 fstp	 QWORD PTR tv459[esp+64]
  000f7	f2 0f 10 44 24
	18		 movsd	 xmm0, QWORD PTR tv459[esp+64]
  000fd	0f 57 c9	 xorps	 xmm1, xmm1
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 388  : 	m_fLength =

  00100	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  00103	66 0f 2e c8	 ucomisd xmm1, xmm0
  00107	77 06		 ja	 SHORT $LN20@SetWeaponI
  00109	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  0010d	eb 05		 jmp	 SHORT $LN21@SetWeaponI
$LN20@SetWeaponI:
  0010f	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN21@SetWeaponI:
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 397  : }

  00114	8b 4c 24 34	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+56]
  00118	b0 01		 mov	 al, 1
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  0011a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 397  : }

  0011e	5f		 pop	 edi
  0011f	5e		 pop	 esi
  00120	f3 0f 11 43 7c	 movss	 DWORD PTR [ebx+124], xmm0
  00125	5b		 pop	 ebx
  00126	33 cc		 xor	 ecx, esp
  00128	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0012d	8b e5		 mov	 esp, ebp
  0012f	5d		 pop	 ebp
  00130	c2 0c 00	 ret	 12			; 0000000cH
?SetWeaponInstance@CWeaponTrace@@QAE_NPAVCGraphicThingInstance@@KPBD@Z ENDP ; CWeaponTrace::SetWeaponInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
;	COMDAT ?SetTexture@CWeaponTrace@@QAEXPBD@Z
_TEXT	SEGMENT
_c_szFileName$ = 8					; size = 4
?SetTexture@CWeaponTrace@@QAEXPBD@Z PROC		; CWeaponTrace::SetTexture, COMDAT
; _this$ = ecx

; 362  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 363  : 	CGraphicImage * pImage = (CGraphicImage *)CResourceManager::Instance().GetResourcePointer("lot_ade10-2.tga");

  00003	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@NCBBOAJD@lot_ade10?92?4tga@
  0000e	e8 00 00 00 00	 call	 ?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z ; CResourceManager::GetResourcePointer

; 364  : 	m_ImageInstance.SetImagePointer(pImage);

  00013	50		 push	 eax
  00014	8d 4e 4c	 lea	 ecx, DWORD PTR [esi+76]
  00017	e8 00 00 00 00	 call	 ?SetImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z ; CGraphicImageInstance::SetImagePointer
  0001c	5e		 pop	 esi

; 365  : 
; 366  : 	//CGraphicTexture * pTexture = m_ImageInstance.GetTexturePointer();
; 367  : 	//m_lpTexture = pTexture->GetD3DTexture();
; 368  : }

  0001d	c2 04 00	 ret	 4
?SetTexture@CWeaponTrace@@QAEXPBD@Z ENDP		; CWeaponTrace::SetTexture
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
;	COMDAT ?UseTexture@CWeaponTrace@@QAEXXZ
_TEXT	SEGMENT
?UseTexture@CWeaponTrace@@QAEXXZ PROC			; CWeaponTrace::UseTexture, COMDAT
; _this$ = ecx

; 358  : 	m_bUseTexture = true;

  00000	c6 81 84 00 00
	00 01		 mov	 BYTE PTR [ecx+132], 1

; 359  : }

  00007	c3		 ret	 0
?UseTexture@CWeaponTrace@@QAEXXZ ENDP			; CWeaponTrace::UseTexture
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
;	COMDAT ?UseAlpha@CWeaponTrace@@QAEXXZ
_TEXT	SEGMENT
?UseAlpha@CWeaponTrace@@QAEXXZ PROC			; CWeaponTrace::UseAlpha, COMDAT
; _this$ = ecx

; 353  : 	m_bUseTexture = false;

  00000	c6 81 84 00 00
	00 00		 mov	 BYTE PTR [ecx+132], 0

; 354  : }

  00007	c3		 ret	 0
?UseAlpha@CWeaponTrace@@QAEXXZ ENDP			; CWeaponTrace::UseAlpha
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
;	COMDAT ?TurnOff@CWeaponTrace@@QAEXXZ
_TEXT	SEGMENT
?TurnOff@CWeaponTrace@@QAEXXZ PROC			; CWeaponTrace::TurnOff, COMDAT
; _this$ = ecx

; 427  : 	m_isPlaying = FALSE;

  00000	c7 81 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+128], 0

; 428  : 	//Clear();
; 429  : }

  0000a	c3		 ret	 0
?TurnOff@CWeaponTrace@@QAEXXZ ENDP			; CWeaponTrace::TurnOff
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
;	COMDAT ?TurnOn@CWeaponTrace@@QAEXXZ
_TEXT	SEGMENT
?TurnOn@CWeaponTrace@@QAEXXZ PROC			; CWeaponTrace::TurnOn, COMDAT
; _this$ = ecx

; 423  : 	m_isPlaying = TRUE;

  00000	c7 81 80 00 00
	00 01 00 00 00	 mov	 DWORD PTR [ecx+128], 1

; 424  : }

  0000a	c3		 ret	 0
?TurnOn@CWeaponTrace@@QAEXXZ ENDP			; CWeaponTrace::TurnOn
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
;	COMDAT ?Clear@CWeaponTrace@@QAEXXZ
_TEXT	SEGMENT
?Clear@CWeaponTrace@@QAEXXZ PROC			; CWeaponTrace::Clear, COMDAT
; _this$ = ecx

; 432  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 433  : 	//m_PDTVertexVector.clear();
; 434  : 	//m_CurvingTraceVector.clear();
; 435  : 
; 436  : 	m_ShortTimePointList.clear();

  00003	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 1454 :         _Tidy();

  00006	e8 00 00 00 00	 call	 ?_Tidy@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@AAEXXZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Tidy
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 437  : 	m_LongTimePointList.clear();

  0000b	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 1454 :         _Tidy();

  0000e	e8 00 00 00 00	 call	 ?_Tidy@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@AAEXXZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Tidy
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 438  : 	Initialize();

  00013	8b ce		 mov	 ecx, esi
  00015	5e		 pop	 esi
  00016	e9 00 00 00 00	 jmp	 ?Initialize@CWeaponTrace@@QAEXXZ ; CWeaponTrace::Initialize
?Clear@CWeaponTrace@@QAEXXZ ENDP			; CWeaponTrace::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
;	COMDAT ??1CWeaponTrace@@UAE@XZ
_TEXT	SEGMENT
??1CWeaponTrace@@UAE@XZ PROC				; CWeaponTrace::~CWeaponTrace, COMDAT
; _this$ = ecx

; 485  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 486  : }

  00004	8d 4f 4c	 lea	 ecx, DWORD PTR [edi+76]
  00007	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CWeaponTrace@@6B@
  0000d	e8 00 00 00 00	 call	 ??1CGraphicImageInstance@@UAE@XZ ; CGraphicImageInstance::~CGraphicImageInstance
  00012	8d 4f 30	 lea	 ecx, DWORD PTR [edi+48]
  00015	e8 00 00 00 00	 call	 ??1?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAE@XZ ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::~vector<SPDTVertex,std::allocator<SPDTVertex> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 905  :         _Tidy();

  0001a	8d 4f 1c	 lea	 ecx, DWORD PTR [edi+28]
  0001d	e8 00 00 00 00	 call	 ?_Tidy@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@AAEXXZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Tidy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 754  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00022	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00025	6a 08		 push	 8
  00027	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 755  :     _Val         = static_cast<_Other&&>(_New_val);

  00028	c7 47 1c 00 00
	00 00		 mov	 DWORD PTR [edi+28], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  0002f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00034	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 905  :         _Tidy();

  00037	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  0003a	e8 00 00 00 00	 call	 ?_Tidy@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@AAEXXZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Tidy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 754  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0003f	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00042	6a 08		 push	 8
  00044	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 755  :     _Val         = static_cast<_Other&&>(_New_val);

  00045	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  0004c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00051	83 c4 08	 add	 esp, 8
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 486  : }

  00056	c3		 ret	 0
??1CWeaponTrace@@UAE@XZ ENDP				; CWeaponTrace::~CWeaponTrace
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
;	COMDAT ??0CWeaponTrace@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CWeaponTrace@@QAE@XZ PROC				; CWeaponTrace::CWeaponTrace, COMDAT
; _this$ = ecx

; 481  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CWeaponTrace@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  0002a	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CWeaponTrace@@6B@
  00030	8d 77 08	 lea	 esi, DWORD PTR [edi+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  00033	6a 08		 push	 8

; 1219 :     _Container_proxy* _Myproxy = nullptr;

  00035	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 559  :     _Deque_val() noexcept : _Map(), _Mapsize(0), _Myoff(0), _Mysize(0) {}

  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00042	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00049	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00050	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  00057	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 1189 :     mutable _Iterator_base12* _Myfirstiter = nullptr;

  0005c	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1206 :         _Myproxy            = _New_proxy;

  00063	89 06		 mov	 DWORD PTR [esi], eax

; 1207 :         _New_proxy->_Mycont = this;

  00065	89 30		 mov	 DWORD PTR [eax], esi
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 481  : {

  00067	8d 77 1c	 lea	 esi, DWORD PTR [edi+28]
  0006a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  00071	6a 08		 push	 8

; 1219 :     _Container_proxy* _Myproxy = nullptr;

  00073	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 559  :     _Deque_val() noexcept : _Map(), _Mapsize(0), _Myoff(0), _Mysize(0) {}

  00079	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00080	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00087	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0008e	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  00095	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0009a	83 c4 08	 add	 esp, 8

; 1189 :     mutable _Iterator_base12* _Myfirstiter = nullptr;

  0009d	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1206 :         _Myproxy            = _New_proxy;

  000a4	89 06		 mov	 DWORD PTR [esi], eax

; 1207 :         _New_proxy->_Mycont = this;

  000a6	89 30		 mov	 DWORD PTR [eax], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 398  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  000a8	c7 47 30 00 00
	00 00		 mov	 DWORD PTR [edi+48], 0
  000af	c7 47 34 00 00
	00 00		 mov	 DWORD PTR [edi+52], 0
  000b6	c7 47 38 00 00
	00 00		 mov	 DWORD PTR [edi+56], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 481  : {

  000bd	8d 4f 4c	 lea	 ecx, DWORD PTR [edi+76]
  000c0	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000c4	e8 00 00 00 00	 call	 ??0CGraphicImageInstance@@QAE@XZ ; CGraphicImageInstance::CGraphicImageInstance

; 482  : 	Initialize();

  000c9	8b cf		 mov	 ecx, edi
  000cb	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  000cf	e8 00 00 00 00	 call	 ?Initialize@CWeaponTrace@@QAEXXZ ; CWeaponTrace::Initialize

; 483  : }

  000d4	8b c7		 mov	 eax, edi
  000d6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e0	59		 pop	 ecx
  000e1	5f		 pop	 edi
  000e2	5e		 pop	 esi
  000e3	8b e5		 mov	 esp, ebp
  000e5	5d		 pop	 ebp
  000e6	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CWeaponTrace@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 08	 add	 ecx, 8
  00006	e9 00 00 00 00	 jmp	 ??1?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE@XZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::~deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >
__unwindfunclet$??0CWeaponTrace@@QAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00011	e9 00 00 00 00	 jmp	 ??1?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE@XZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::~deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >
__unwindfunclet$??0CWeaponTrace@@QAE@XZ$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 30	 add	 ecx, 48			; 00000030H
  0001c	e9 00 00 00 00	 jmp	 ??1?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAE@XZ ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::~vector<SPDTVertex,std::allocator<SPDTVertex> >
__unwindfunclet$??0CWeaponTrace@@QAE@XZ$3:
  00021	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00027	e9 00 00 00 00	 jmp	 ??1CGraphicImageInstance@@UAE@XZ ; CGraphicImageInstance::~CGraphicImageInstance
  0002c	cc		 int	 3
  0002d	cc		 int	 3
  0002e	cc		 int	 3
  0002f	cc		 int	 3
  00030	cc		 int	 3
__ehhandler$??0CWeaponTrace@@QAE@XZ:
  00031	90		 npad	 1
  00032	90		 npad	 1
  00033	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00037	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003a	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0003d	33 c8		 xor	 ecx, eax
  0003f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00044	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CWeaponTrace@@QAE@XZ
  00049	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CWeaponTrace@@QAE@XZ ENDP				; CWeaponTrace::CWeaponTrace
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
;	COMDAT ?New@CWeaponTrace@@SAPAV1@XZ
_TEXT	SEGMENT
$T2 = -16						; size = 4
_pkNewData$3 = -16					; size = 4
__$EHRec$ = -12						; size = 12
?New@CWeaponTrace@@SAPAV1@XZ PROC			; CWeaponTrace::New, COMDAT

; 23   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?New@CWeaponTrace@@SAPAV1@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1864 :         return _My_data._Myfirst == _My_data._Mylast;

  00024	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?ms_kPool@CWeaponTrace@@1V?$CDynamicPool@VCWeaponTrace@@@@A+20
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 63   : 			if (m_kVct_pkFree.empty())

  0002a	39 0d 10 00 00
	00		 cmp	 DWORD PTR ?ms_kPool@CWeaponTrace@@1V?$CDynamicPool@VCWeaponTrace@@@@A+16, ecx
  00030	0f 85 87 00 00
	00		 jne	 $LN4@New

; 65   : 				T* pkNewData=new T;

  00036	68 8c 00 00 00	 push	 140			; 0000008cH
  0003b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00040	83 c4 04	 add	 esp, 4
  00043	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004d	85 c0		 test	 eax, eax
  0004f	74 0b		 je	 SHORT $LN6@New
  00051	8b c8		 mov	 ecx, eax
  00053	e8 00 00 00 00	 call	 ??0CWeaponTrace@@QAE@XZ	; CWeaponTrace::CWeaponTrace
  00058	8b f0		 mov	 esi, eax
  0005a	eb 02		 jmp	 SHORT $LN7@New
$LN6@New:
  0005c	33 f6		 xor	 esi, esi
$LN7@New:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  0005e	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CWeaponTrace@@1V?$CDynamicPool@VCWeaponTrace@@@@A+8
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 65   : 				T* pkNewData=new T;

  00063	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006a	89 75 f0	 mov	 DWORD PTR _pkNewData$3[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  0006d	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?ms_kPool@CWeaponTrace@@1V?$CDynamicPool@VCWeaponTrace@@@@A+12
  00073	74 21		 je	 SHORT $LN14@New

; 797  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00075	89 30		 mov	 DWORD PTR [eax], esi
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 24   : 	return ms_kPool.Alloc();

  00077	8b c6		 mov	 eax, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 806  :         ++_Mylast;

  00079	83 05 08 00 00
	00 04		 add	 DWORD PTR ?ms_kPool@CWeaponTrace@@1V?$CDynamicPool@VCWeaponTrace@@@@A+8, 4
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 67   : 				++m_uUsedCapacity;

  00080	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_kPool@CWeaponTrace@@1V?$CDynamicPool@VCWeaponTrace@@@@A+32
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 25   : }

  00086	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00089	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00090	59		 pop	 ecx
  00091	5e		 pop	 esi
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c3		 ret	 0
$LN14@New:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00096	8d 4d f0	 lea	 ecx, DWORD PTR _pkNewData$3[ebp]
  00099	51		 push	 ecx
  0009a	50		 push	 eax
  0009b	b9 04 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CWeaponTrace@@1V?$CDynamicPool@VCWeaponTrace@@@@A+4
  000a0	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCWeaponTrace@@@?$vector@PAVCWeaponTrace@@V?$allocator@PAVCWeaponTrace@@@std@@@std@@AAEPAPAVCWeaponTrace@@QAPAV2@ABQAV2@@Z ; std::vector<CWeaponTrace *,std::allocator<CWeaponTrace *> >::_Emplace_reallocate<CWeaponTrace * const &>
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 67   : 				++m_uUsedCapacity;

  000a5	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_kPool@CWeaponTrace@@1V?$CDynamicPool@VCWeaponTrace@@@@A+32
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 24   : 	return ms_kPool.Alloc();

  000ab	8b c6		 mov	 eax, esi

; 25   : }

  000ad	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b7	59		 pop	 ecx
  000b8	5e		 pop	 esi
  000b9	8b e5		 mov	 esp, ebp
  000bb	5d		 pop	 ebp
  000bc	c3		 ret	 0
$LN4@New:
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 71   : 			T* pkFreeData=m_kVct_pkFree.back();

  000bd	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1713 :         --_Mylast;

  000c0	83 c1 fc	 add	 ecx, -4			; fffffffcH
  000c3	89 0d 14 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CWeaponTrace@@1V?$CDynamicPool@VCWeaponTrace@@@@A+20, ecx
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 25   : }

  000c9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000cc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d3	59		 pop	 ecx
  000d4	5e		 pop	 esi
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?New@CWeaponTrace@@SAPAV1@XZ$0:
  00000	68 8c 00 00 00	 push	 140			; 0000008cH
  00005	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
__ehhandler$?New@CWeaponTrace@@SAPAV1@XZ:
  00017	90		 npad	 1
  00018	90		 npad	 1
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?New@CWeaponTrace@@SAPAV1@XZ
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?New@CWeaponTrace@@SAPAV1@XZ ENDP			; CWeaponTrace::New
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
;	COMDAT ?Delete@CWeaponTrace@@SAXPAV1@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
_pkWTDel$ = 8						; size = 4
?Delete@CWeaponTrace@@SAXPAV1@@Z PROC			; CWeaponTrace::Delete, COMDAT

; 15   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 16   : 	assert(pkWTDel!=NULL && "CWeaponTrace::Delete");
; 17   : 
; 18   : 	pkWTDel->Clear();

  00004	8b 75 08	 mov	 esi, DWORD PTR _pkWTDel$[ebp]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ?Clear@CWeaponTrace@@QAEXXZ ; CWeaponTrace::Clear
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  0000e	a1 14 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CWeaponTrace@@1V?$CDynamicPool@VCWeaponTrace@@@@A+20
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 19   : 	ms_kPool.Free(pkWTDel);

  00013	89 75 08	 mov	 DWORD PTR _pkData$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  00016	3b 05 18 00 00
	00		 cmp	 eax, DWORD PTR ?ms_kPool@CWeaponTrace@@1V?$CDynamicPool@VCWeaponTrace@@@@A+24
  0001c	74 0c		 je	 SHORT $LN8@Delete

; 797  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  0001e	89 30		 mov	 DWORD PTR [eax], esi

; 798  :         } else {
; 799  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 800  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 801  :             _ASAN_VECTOR_RELEASE_GUARD;
; 802  :         }
; 803  : 
; 804  :         _Orphan_range(_Mylast, _Mylast);
; 805  :         _Ty& _Result = *_Mylast;
; 806  :         ++_Mylast;

  00020	83 05 14 00 00
	00 04		 add	 DWORD PTR ?ms_kPool@CWeaponTrace@@1V?$CDynamicPool@VCWeaponTrace@@@@A+20, 4
  00027	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 20   : }

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
$LN8@Delete:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0002a	8d 4d 08	 lea	 ecx, DWORD PTR _pkData$[ebp]
  0002d	51		 push	 ecx
  0002e	50		 push	 eax
  0002f	b9 10 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CWeaponTrace@@1V?$CDynamicPool@VCWeaponTrace@@@@A+16
  00034	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCWeaponTrace@@@?$vector@PAVCWeaponTrace@@V?$allocator@PAVCWeaponTrace@@@std@@@std@@AAEPAPAVCWeaponTrace@@QAPAV2@ABQAV2@@Z ; std::vector<CWeaponTrace *,std::allocator<CWeaponTrace *> >::_Emplace_reallocate<CWeaponTrace * const &>
  00039	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 20   : }

  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?Delete@CWeaponTrace@@SAXPAV1@@Z ENDP			; CWeaponTrace::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp
;	COMDAT ?DestroySystem@CWeaponTrace@@SAXXZ
_TEXT	SEGMENT
?DestroySystem@CWeaponTrace@@SAXXZ PROC			; CWeaponTrace::DestroySystem, COMDAT

; 10   : {

  00000	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00001	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?ms_kPool@CWeaponTrace@@1V?$CDynamicPool@VCWeaponTrace@@@@A+4
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 10   : {

  00007	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00008	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?ms_kPool@CWeaponTrace@@1V?$CDynamicPool@VCWeaponTrace@@@@A+8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  0000e	3b f7		 cmp	 esi, edi
  00010	74 29		 je	 SHORT $LN26@DestroySys
$LL20@DestroySys:
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 110  : 			delete pkData;

  00012	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00014	85 c9		 test	 ecx, ecx
  00016	74 06		 je	 SHORT $LN18@DestroySys
  00018	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001a	6a 01		 push	 1
  0001c	ff 10		 call	 DWORD PTR [eax]
$LN18@DestroySys:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001e	83 c6 04	 add	 esi, 4
  00021	3b f7		 cmp	 esi, edi
  00023	75 ed		 jne	 SHORT $LL20@DestroySys
  00025	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?ms_kPool@CWeaponTrace@@1V?$CDynamicPool@VCWeaponTrace@@@@A+8
  0002b	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?ms_kPool@CWeaponTrace@@1V?$CDynamicPool@VCWeaponTrace@@@@A+4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	3b f7		 cmp	 esi, edi
  00033	74 06		 je	 SHORT $LN26@DestroySys

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00035	89 35 08 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CWeaponTrace@@1V?$CDynamicPool@VCWeaponTrace@@@@A+8, esi
$LN26@DestroySys:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0003b	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CWeaponTrace@@1V?$CDynamicPool@VCWeaponTrace@@@@A+16
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	3b 05 14 00 00
	00		 cmp	 eax, DWORD PTR ?ms_kPool@CWeaponTrace@@1V?$CDynamicPool@VCWeaponTrace@@@@A+20
  00048	74 05		 je	 SHORT $LN29@DestroySys

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  0004a	a3 14 00 00 00	 mov	 DWORD PTR ?ms_kPool@CWeaponTrace@@1V?$CDynamicPool@VCWeaponTrace@@@@A+20, eax
$LN29@DestroySys:
; File C:\Marty 5.5\Src-Client\Client\GameLib\WeaponTrace.cpp

; 12   : }

  0004f	c3		 ret	 0
?DestroySystem@CWeaponTrace@@SAXXZ ENDP			; CWeaponTrace::DestroySystem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 137  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 138  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 139  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 140  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 87   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 141  :         _Throw_bad_array_new_length(); // add overflow
; 142  :     }
; 143  : 
; 144  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 87   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 145  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 146  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 147  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 148  : 
; 149  : #ifdef _DEBUG
; 150  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 151  : #endif // _DEBUG
; 152  :     return _Ptr;
; 153  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 145  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 331  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 332  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.h
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT
??0D3DXMATRIX@@QAE@XZ PROC				; D3DXMATRIX::D3DXMATRIX, COMDAT
; _this$ = ecx

; 177  :     D3DXMATRIX() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXMATRIX@@QAE@XZ ENDP				; D3DXMATRIX::D3DXMATRIX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.h
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT
??0D3DXVECTOR3@@QAE@XZ PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 89   :     D3DXVECTOR3() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXVECTOR3@@QAE@XZ ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
