; Listing generated by Microsoft (R) Optimizing Compiler Version 19.37.32822.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\GameLib\Distribute\ItemManager.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
?piecewise_construct@std@@3Upiecewise_construct_t@1@B	ORG $+1 ; std::piecewise_construct
CONST	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	_sprintf
PUBLIC	__snprintf
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
PUBLIC	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
PUBLIC	?_Throw_tree_length_error@std@@YAXXZ		; std::_Throw_tree_length_error
PUBLIC	??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
PUBLIC	??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??1?$CSingleton@VCItemManager@@@@UAE@XZ		; CSingleton<CItemManager>::~CSingleton<CItemManager>
PUBLIC	??_G?$CSingleton@VCItemManager@@@@UAEPAXI@Z	; CSingleton<CItemManager>::`scalar deleting destructor'
PUBLIC	??0CItemManager@@QAE@XZ				; CItemManager::CItemManager
PUBLIC	??1CItemManager@@UAE@XZ				; CItemManager::~CItemManager
PUBLIC	?Destroy@CItemManager@@QAEXXZ			; CItemManager::Destroy
PUBLIC	?SelectItemData@CItemManager@@QAEHK@Z		; CItemManager::SelectItemData
PUBLIC	?GetSelectedItemDataPointer@CItemManager@@QAEPAVCItemData@@XZ ; CItemManager::GetSelectedItemDataPointer
PUBLIC	?GetItemDataPointer@CItemManager@@QAEHKPAPAVCItemData@@@Z ; CItemManager::GetItemDataPointer
PUBLIC	?LoadItemDesc@CItemManager@@QAE_NPBD@Z		; CItemManager::LoadItemDesc
PUBLIC	?LoadItemList@CItemManager@@QAE_NPBD@Z		; CItemManager::LoadItemList
PUBLIC	?LoadItemTable@CItemManager@@QAE_NPBD@Z		; CItemManager::LoadItemTable
PUBLIC	?LoadItemScale@CItemManager@@QAE_NPBD@Z		; CItemManager::LoadItemScale
PUBLIC	?MakeItemData@CItemManager@@QAEPAVCItemData@@K@Z ; CItemManager::MakeItemData
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CItemData *> > >::_Insert_node
PUBLIC	?_Xlength@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@CAXXZ ; std::vector<CItemData *,std::allocator<CItemData *> >::_Xlength
PUBLIC	??_GCItemManager@@UAEPAXI@Z			; CItemManager::`scalar deleting destructor'
PUBLIC	??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCItemData@@@1@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CItemData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CItemData *> >,0> >::insert<0,0>
PUBLIC	?__SnapString@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@AAV12@@Z ; __SnapString
PUBLIC	?GetHashCode@@YAKPBD@Z				; GetHashCode
PUBLIC	??1?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKK@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,unsigned long> > >::_Insert_node
PUBLIC	??1?$map@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@@std@@QAE@XZ ; std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >::~map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >
PUBLIC	??1?$_Tree@V?$_Tmap_traits@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::~_Tree<std::_Tmap_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >
PUBLIC	??R?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@QBE_NABU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@0@Z ; std::less<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator()
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Insert_node
PUBLIC	??1?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@XZ ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::~pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??1?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@QAE@XZ ; std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::~pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$?0PBDPBD$0A@@?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@$$QAU?$pair@PBDPBD@1@@Z ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><char const *,char const *,0>
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CItemData *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CItemData *>,void *> > >
PUBLIC	??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CItemData *> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CItemData *>,void *> > >
PUBLIC	??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$_Find_lower_bound@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@?$_Tree@V?$_Tmap_traits@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@1@ABU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@@Z ; std::_Tree<std::_Tmap_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Find_lower_bound<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$_Lower_bound_duplicate@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@?$_Tree@V?$_Tmap_traits@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@$0A@@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@1@ABU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@@Z ; std::_Tree<std::_Tmap_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Lower_bound_duplicate<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
PUBLIC	??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
PUBLIC	??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Find_lower_bound<unsigned long>
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKK@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,unsigned long> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,unsigned long>,void *> > >
PUBLIC	??$_Emplace_reallocate@ABQAVCItemData@@@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@AAEPAPAVCItemData@@QAPAV2@ABQAV2@@Z ; std::vector<CItemData *,std::allocator<CItemData *> >::_Emplace_reallocate<CItemData * const &>
PUBLIC	??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CItemData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CItemData *> >,0> >::_Find_lower_bound<unsigned long>
PUBLIC	??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$destroy@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@1@QAU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::destroy<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CItemData *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CItemData *>,void *> > >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,unsigned long>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,unsigned long>,void *> > >
PUBLIC	??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$_Find_hint@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@?$_Tree@V?$_Tmap_traits@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_hint_result@PAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@1@QAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@1@ABU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@@Z ; std::_Tree<std::_Tmap_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Find_hint<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$_Copy_memmove@PAPAVCItemData@@PAPAV1@@std@@YAPAPAVCItemData@@PAPAV1@00@Z ; std::_Copy_memmove<CItemData * *,CItemData * *>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_0BB@GCADKGJO@map?1set?5too?5long@		; `string'
PUBLIC	?ms_singleton@?$CSingleton@VCLZO@@@@0PAVCLZO@@A	; CSingleton<CLZO>::ms_singleton
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position@	; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A ; CSingleton<CEterPackManager>::ms_singleton
PUBLIC	?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
PUBLIC	?ms_singleton@?$CSingleton@VCItemManager@@@@0PAVCItemManager@@A ; CSingleton<CItemManager>::ms_singleton
PUBLIC	??_7?$CSingleton@VCItemManager@@@@6B@		; CSingleton<CItemManager>::`vftable'
PUBLIC	??_7CItemManager@@6B@				; CItemManager::`vftable'
PUBLIC	??_C@_0DB@OJKGMCEF@?5CItemManager?3?3SelectItemData?5?9@ ; `string'
PUBLIC	??_C@_0DF@GPLOHCFJ@?5CItemManager?3?3GetItemDataPoint@ ; `string'
PUBLIC	??_C@_01GPOEFGEJ@?7@				; `string'
PUBLIC	??_C@_0DF@BBNNBFGM@?5CItemManager?3?3LoadItemList?$CI?$CFs?$CJ@ ; `string'
PUBLIC	??_C@_0BD@MGMLGJGK@icon?1item?1?$CF?45d?4tga@	; `string'
PUBLIC	??_C@_0CC@GKBFKKKF@d?3?1ymir?5work?1item?1weapon?1?$CF?45d?4g@ ; `string'
PUBLIC	??_C@_0DJ@OBCJLLMB@CItemManager?3?3LoadItemDesc?$CIc_sz@ ; `string'
PUBLIC	??_C@_0DP@NBGHGGP@CPythonItem?3?3LoadItemTable?3?5inv@ ; `string'
PUBLIC	??_C@_0FE@FEBCGCHP@CPythonItem?3?3LoadItemTable?3?5inv@ ; `string'
PUBLIC	??_C@_0DH@PMBKMONN@CPythonItem?3?3LoadItemTable?3?5inv@ ; `string'
PUBLIC	??_C@_0BD@KPPKEKHD@icon?1item?1?$CF05d?4tga@	; `string'
PUBLIC	??_C@_0CF@JIKMIDCO@LoadItemScale?3?5invalid?5line?5?$CFd?5@ ; `string'
PUBLIC	??_C@_01PLPBNMEI@M@				; `string'
PUBLIC	??_C@_0M@BIDPEPDP@JOB_WOLFMAN@			; `string'
PUBLIC	??_C@_04HGOCMIOC@0?426@				; `string'
PUBLIC	??_C@_0N@IAFGBDIL@JOB_ASSASSIN@			; `string'
PUBLIC	??_C@_04OJKDIPFL@0?438@				; `string'
PUBLIC	??_C@_01BIAFAFID@F@				; `string'
PUBLIC	??_C@_04OKCHFLDF@0?418@				; `string'
PUBLIC	??_C@_0L@FBDFJGPA@JOB_SHAMAN@			; `string'
PUBLIC	??_C@_04DJKDFOCF@0?421@				; `string'
PUBLIC	??_C@_08IJIBKCOK@JOB_SURA@			; `string'
PUBLIC	??_C@_03OICINGJI@0?43@				; `string'
PUBLIC	??_C@_0M@IHDHIBML@JOB_WARRIOR@			; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CItemManager@@6B@				; CItemManager::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCItemManager@@@8			; CItemManager `RTTI Type Descriptor'
PUBLIC	??_R3CItemManager@@8				; CItemManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CItemManager@@8				; CItemManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CItemManager@@8			; CItemManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$CSingleton@VCItemManager@@@@8	; CSingleton<CItemManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$CSingleton@VCItemManager@@@@@8	; CSingleton<CItemManager> `RTTI Type Descriptor'
PUBLIC	??_R3?$CSingleton@VCItemManager@@@@8		; CSingleton<CItemManager>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CSingleton@VCItemManager@@@@8		; CSingleton<CItemManager>::`RTTI Base Class Array'
PUBLIC	??_R4?$CSingleton@VCItemManager@@@@6B@		; CSingleton<CItemManager>::`RTTI Complete Object Locator'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_abort:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	__atoi64:PROC
EXTRN	_toupper:PROC
EXTRN	_strncpy_s:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?Tracenf@@YAXPBDZZ:PROC				; Tracenf
EXTRN	?Tracef@@YAXPBDZZ:PROC				; Tracef
EXTRN	?TraceError@@YAXPBDZZ:PROC			; TraceError
EXTRN	??0CMemoryTextFileLoader@@QAE@XZ:PROC		; CMemoryTextFileLoader::CMemoryTextFileLoader
EXTRN	??1CMemoryTextFileLoader@@UAE@XZ:PROC		; CMemoryTextFileLoader::~CMemoryTextFileLoader
EXTRN	?Bind@CMemoryTextFileLoader@@QAEXHPBX@Z:PROC	; CMemoryTextFileLoader::Bind
EXTRN	?GetLineCount@CMemoryTextFileLoader@@QAEKXZ:PROC ; CMemoryTextFileLoader::GetLineCount
EXTRN	?SplitLine@CMemoryTextFileLoader@@QAE_NKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PBD@Z:PROC ; CMemoryTextFileLoader::SplitLine
EXTRN	?SplitLineByTab@CMemoryTextFileLoader@@QAE_NKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z:PROC ; CMemoryTextFileLoader::SplitLineByTab
EXTRN	??0CLZObject@@QAE@XZ:PROC			; CLZObject::CLZObject
EXTRN	??1CLZObject@@QAE@XZ:PROC			; CLZObject::~CLZObject
EXTRN	?Decompress@CLZO@@QAE_NAAVCLZObject@@PBEPAK@Z:PROC ; CLZO::Decompress
EXTRN	??0CMappedFile@@QAE@XZ:PROC			; CMappedFile::CMappedFile
EXTRN	??1CMappedFile@@UAE@XZ:PROC			; CMappedFile::~CMappedFile
EXTRN	?Size@CMappedFile@@QAEKXZ:PROC			; CMappedFile::Size
EXTRN	?Read@CMappedFile@@QAEHPAXH@Z:PROC		; CMappedFile::Read
EXTRN	?Get@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z:PROC ; CEterPackManager::Get
EXTRN	?IsFileExist@CResourceManager@@QAE_NPBD@Z:PROC	; CResourceManager::IsFileExist
EXTRN	?SetSummary@CItemData@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; CItemData::SetSummary
EXTRN	?SetDescription@CItemData@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; CItemData::SetDescription
EXTRN	?GetTable@CItemData@@QBEPBUSItemTable_r156@1@XZ:PROC ; CItemData::GetTable
EXTRN	?SetDefaultItemData@CItemData@@QAEXPBD0@Z:PROC	; CItemData::SetDefaultItemData
EXTRN	?SetItemTableData@CItemData@@QAEXPAUSItemTable_r156@1@@Z:PROC ; CItemData::SetItemTableData
EXTRN	?SetItemScale@CItemData@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0000000@Z:PROC ; CItemData::SetItemScale
EXTRN	?New@CItemData@@SAPAV1@XZ:PROC			; CItemData::New
EXTRN	?Delete@CItemData@@SAXPAV1@@Z:PROC		; CItemData::Delete
EXTRN	??_E?$CSingleton@VCItemManager@@@@UAEPAXI@Z:PROC ; CSingleton<CItemManager>::`vector deleting destructor'
EXTRN	??_ECItemManager@@UAEPAXI@Z:PROC		; CItemManager::`vector deleting destructor'
EXTRN	?Vietnam_ConvertWeaponVnum@@YAKK@Z:PROC		; Vietnam_ConvertWeaponVnum
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?USE_VIETNAM_CONVERT_WEAPON_VNUM@@3HA:DWORD	; USE_VIETNAM_CONVERT_WEAPON_VNUM
EXTRN	___security_cookie:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCLZO@@@@0PAVCLZO@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCLZO@@@@0PAVCLZO@@A DD 01H DUP (?) ; CSingleton<CLZO>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A DD 01H DUP (?) ; CSingleton<CEterPackManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A DD 01H DUP (?) ; CSingleton<CResourceManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCItemManager@@@@0PAVCItemManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCItemManager@@@@0PAVCItemManager@@A DD 01H DUP (?) ; CSingleton<CItemManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?scaleMap@?5??LoadItemScale@CItemManager@@QAE_NPBD@Z@4V?$map@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@@std@@A
_BSS	SEGMENT
?scaleMap@?5??LoadItemScale@CItemManager@@QAE_NPBD@Z@4V?$map@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@@std@@A DQ 01H DUP (?) ; `CItemManager::LoadItemScale'::`6'::scaleMap
_BSS	ENDS
;	COMDAT ?$TSS0@?5??LoadItemScale@CItemManager@@QAE_NPBD@Z@4HA
_BSS	SEGMENT
?$TSS0@?5??LoadItemScale@CItemManager@@QAE_NPBD@Z@4HA DD 01H DUP (?) ; `CItemManager::LoadItemScale'::`6'::$TSS0
_BSS	ENDS
;	COMDAT ??_R4?$CSingleton@VCItemManager@@@@6B@
rdata$r	SEGMENT
??_R4?$CSingleton@VCItemManager@@@@6B@ DD 00H		; CSingleton<CItemManager>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CSingleton@VCItemManager@@@@@8
	DD	FLAT:??_R3?$CSingleton@VCItemManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CSingleton@VCItemManager@@@@8
rdata$r	SEGMENT
??_R2?$CSingleton@VCItemManager@@@@8 DD FLAT:??_R1A@?0A@EA@?$CSingleton@VCItemManager@@@@8 ; CSingleton<CItemManager>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CSingleton@VCItemManager@@@@8
rdata$r	SEGMENT
??_R3?$CSingleton@VCItemManager@@@@8 DD 00H		; CSingleton<CItemManager>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CSingleton@VCItemManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CSingleton@VCItemManager@@@@@8
data$rs	SEGMENT
??_R0?AV?$CSingleton@VCItemManager@@@@@8 DD FLAT:??_7type_info@@6B@ ; CSingleton<CItemManager> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CSingleton@VCItemManager@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CSingleton@VCItemManager@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CSingleton@VCItemManager@@@@8 DD FLAT:??_R0?AV?$CSingleton@VCItemManager@@@@@8 ; CSingleton<CItemManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CSingleton@VCItemManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CItemManager@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CItemManager@@8 DD FLAT:??_R0?AVCItemManager@@@8 ; CItemManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CItemManager@@8
rdata$r	ENDS
;	COMDAT ??_R2CItemManager@@8
rdata$r	SEGMENT
??_R2CItemManager@@8 DD FLAT:??_R1A@?0A@EA@CItemManager@@8 ; CItemManager::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$CSingleton@VCItemManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R3CItemManager@@8
rdata$r	SEGMENT
??_R3CItemManager@@8 DD 00H				; CItemManager::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CItemManager@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCItemManager@@@8
data$rs	SEGMENT
??_R0?AVCItemManager@@@8 DD FLAT:??_7type_info@@6B@	; CItemManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCItemManager@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CItemManager@@6B@
rdata$r	SEGMENT
??_R4CItemManager@@6B@ DD 00H				; CItemManager::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCItemManager@@@8
	DD	FLAT:??_R3CItemManager@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IHDHIBML@JOB_WARRIOR@
CONST	SEGMENT
??_C@_0M@IHDHIBML@JOB_WARRIOR@ DB 'JOB_WARRIOR', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03OICINGJI@0?43@
CONST	SEGMENT
??_C@_03OICINGJI@0?43@ DB '0.3', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08IJIBKCOK@JOB_SURA@
CONST	SEGMENT
??_C@_08IJIBKCOK@JOB_SURA@ DB 'JOB_SURA', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DJKDFOCF@0?421@
CONST	SEGMENT
??_C@_04DJKDFOCF@0?421@ DB '0.21', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FBDFJGPA@JOB_SHAMAN@
CONST	SEGMENT
??_C@_0L@FBDFJGPA@JOB_SHAMAN@ DB 'JOB_SHAMAN', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04OKCHFLDF@0?418@
CONST	SEGMENT
??_C@_04OKCHFLDF@0?418@ DB '0.18', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01BIAFAFID@F@
CONST	SEGMENT
??_C@_01BIAFAFID@F@ DB 'F', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04OJKDIPFL@0?438@
CONST	SEGMENT
??_C@_04OJKDIPFL@0?438@ DB '0.38', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IAFGBDIL@JOB_ASSASSIN@
CONST	SEGMENT
??_C@_0N@IAFGBDIL@JOB_ASSASSIN@ DB 'JOB_ASSASSIN', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04HGOCMIOC@0?426@
CONST	SEGMENT
??_C@_04HGOCMIOC@0?426@ DB '0.26', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BIDPEPDP@JOB_WOLFMAN@
CONST	SEGMENT
??_C@_0M@BIDPEPDP@JOB_WOLFMAN@ DB 'JOB_WOLFMAN', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01PLPBNMEI@M@
CONST	SEGMENT
??_C@_01PLPBNMEI@M@ DB 'M', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@JIKMIDCO@LoadItemScale?3?5invalid?5line?5?$CFd?5@
CONST	SEGMENT
??_C@_0CF@JIKMIDCO@LoadItemScale?3?5invalid?5line?5?$CFd?5@ DB 'LoadItemS'
	DB	'cale: invalid line %d (%s).', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@KPPKEKHD@icon?1item?1?$CF05d?4tga@
CONST	SEGMENT
??_C@_0BD@KPPKEKHD@icon?1item?1?$CF05d?4tga@ DB 'icon/item/%05d.tga', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@PMBKMONN@CPythonItem?3?3LoadItemTable?3?5inv@
CONST	SEGMENT
??_C@_0DH@PMBKMONN@CPythonItem?3?3LoadItemTable?3?5inv@ DB 'CPythonItem::'
	DB	'LoadItemTable: invalid item proto type %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FE@FEBCGCHP@CPythonItem?3?3LoadItemTable?3?5inv@
CONST	SEGMENT
??_C@_0FE@FEBCGCHP@CPythonItem?3?3LoadItemTable?3?5inv@ DB 'CPythonItem::'
	DB	'LoadItemTable: invalid item_proto[%s] STRIDE[%d] != sizeof(SI'
	DB	'temTable)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@NBGHGGP@CPythonItem?3?3LoadItemTable?3?5inv@
CONST	SEGMENT
??_C@_0DP@NBGHGGP@CPythonItem?3?3LoadItemTable?3?5inv@ DB 'CPythonItem::L'
	DB	'oadItemTable: invalid item_proto[%s] VERSION[%d]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@OBCJLLMB@CItemManager?3?3LoadItemDesc?$CIc_sz@
CONST	SEGMENT
??_C@_0DJ@OBCJLLMB@CItemManager?3?3LoadItemDesc?$CIc_sz@ DB 'CItemManager'
	DB	'::LoadItemDesc(c_szFileName=%s) - Load Error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@GKBFKKKF@d?3?1ymir?5work?1item?1weapon?1?$CF?45d?4g@
CONST	SEGMENT
??_C@_0CC@GKBFKKKF@d?3?1ymir?5work?1item?1weapon?1?$CF?45d?4g@ DB 'd:/ymi'
	DB	'r work/item/weapon/%.5d.gr2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MGMLGJGK@icon?1item?1?$CF?45d?4tga@
CONST	SEGMENT
??_C@_0BD@MGMLGJGK@icon?1item?1?$CF?45d?4tga@ DB 'icon/item/%.5d.tga', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@BBNNBFGM@?5CItemManager?3?3LoadItemList?$CI?$CFs?$CJ@
CONST	SEGMENT
??_C@_0DF@BBNNBFGM@?5CItemManager?3?3LoadItemList?$CI?$CFs?$CJ@ DB ' CIte'
	DB	'mManager::LoadItemList(%s) - StrangeLine in %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01GPOEFGEJ@?7@
CONST	SEGMENT
??_C@_01GPOEFGEJ@?7@ DB 09H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@GPLOHCFJ@?5CItemManager?3?3GetItemDataPoint@
CONST	SEGMENT
??_C@_0DF@GPLOHCFJ@?5CItemManager?3?3GetItemDataPoint@ DB ' CItemManager:'
	DB	':GetItemDataPointer - FIND ERROR [%d]', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@OJKGMCEF@?5CItemManager?3?3SelectItemData?5?9@
CONST	SEGMENT
??_C@_0DB@OJKGMCEF@?5CItemManager?3?3SelectItemData?5?9@ DB ' CItemManage'
	DB	'r::SelectItemData - FIND ERROR [%d]', 0aH, 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
?s_adwItemProtoKey@@3PAKA DD 02a4a1H			; s_adwItemProtoKey
	DD	045415aaH
	DD	0185a8be7H
	DD	01aad6abH
_DATA	ENDS
;	COMDAT ??_7CItemManager@@6B@
CONST	SEGMENT
??_7CItemManager@@6B@ DD FLAT:??_R4CItemManager@@6B@	; CItemManager::`vftable'
	DD	FLAT:??_ECItemManager@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CSingleton@VCItemManager@@@@6B@
CONST	SEGMENT
??_7?$CSingleton@VCItemManager@@@@6B@ DD FLAT:??_R4?$CSingleton@VCItemManager@@@@6B@ ; CSingleton<CItemManager>::`vftable'
	DD	FLAT:??_E?$CSingleton@VCItemManager@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position@ DB 'invalid string position'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
CONST	SEGMENT
??_C@_0BB@GCADKGJO@map?1set?5too?5long@ DB 'map/set too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@ABU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@1@QAU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@1@ABU31@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@ABU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@1@QAU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@1@ABU31@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@ABU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@1@QAU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@1@ABU31@@Z$0
__ehfuncinfo$??$construct@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@ABU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@1@QAU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@1@ABU31@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$construct@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@ABU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@1@QAU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@1@ABU31@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@1@ABU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@1@ABU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@1@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@1@ABU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@1@@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$??$?0ABU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@1@ABU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@1@@Z$4
	DD	01H
	DD	FLAT:__unwindfunclet$??$?0ABU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@1@ABU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@1@@Z$2
__ehfuncinfo$??$?0ABU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@1@ABU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@1@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??$?0ABU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@1@ABU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0U?$pair@$$CBKK@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@1@$$QAU?$pair@$$CBKK@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@$$CBKK@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@1@$$QAU?$pair@$$CBKK@1@@Z$1
__ehfuncinfo$??$?0U?$pair@$$CBKK@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@1@$$QAU?$pair@$$CBKK@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0U?$pair@$$CBKK@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@1@$$QAU?$pair@$$CBKK@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0U?$pair@$$CBKPAVCItemData@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@1@$$QAU?$pair@$$CBKPAVCItemData@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@$$CBKPAVCItemData@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@1@$$QAU?$pair@$$CBKPAVCItemData@@@1@@Z$1
__ehfuncinfo$??$?0U?$pair@$$CBKPAVCItemData@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@1@$$QAU?$pair@$$CBKPAVCItemData@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0U?$pair@$$CBKPAVCItemData@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@1@$$QAU?$pair@$$CBKPAVCItemData@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace_hint@ABU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@?$_Tree@V?$_Tmap_traits@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@1@QAU21@ABU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace_hint@ABU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@?$_Tree@V?$_Tmap_traits@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@1@QAU21@ABU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@1@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace_hint@ABU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@?$_Tree@V?$_Tmap_traits@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@1@QAU21@ABU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@1@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Emplace_hint@ABU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@?$_Tree@V?$_Tmap_traits@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@1@QAU21@ABU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@1@@Z$5
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Emplace_hint@ABU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@?$_Tree@V?$_Tmap_traits@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@1@QAU21@ABU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@1@@Z$3
__ehfuncinfo$??$_Emplace_hint@ABU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@?$_Tree@V?$_Tmap_traits@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@1@QAU21@ABU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@1@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??$_Emplace_hint@ABU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@?$_Tree@V?$_Tmap_traits@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@1@QAU21@ABU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABUpiecewise_construct_t@std@@V?$tuple@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@1@$$QAV?$tuple@$$V@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABUpiecewise_construct_t@std@@V?$tuple@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@1@$$QAV?$tuple@$$V@1@@Z$1
__ehfuncinfo$??$?0ABUpiecewise_construct_t@std@@V?$tuple@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@1@$$QAV?$tuple@$$V@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0ABUpiecewise_construct_t@std@@V?$tuple@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@1@$$QAV?$tuple@$$V@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV01@$0A@@?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV01@$0A@@?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z$0
__ehfuncinfo$??$?0AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV01@$0A@@?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV01@$0A@@?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@U?$pair@$$CBKK@std@@@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKK@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@U?$pair@$$CBKK@std@@@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKK@1@@Z$2
__ehfuncinfo$??$_Emplace@U?$pair@$$CBKK@std@@@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKK@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@U?$pair@$$CBKK@std@@@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKK@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@U?$pair@$$CBKPAVCItemData@@@std@@@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAVCItemData@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@U?$pair@$$CBKPAVCItemData@@@std@@@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAVCItemData@@@1@@Z$2
__ehfuncinfo$??$_Emplace@U?$pair@$$CBKPAVCItemData@@@std@@@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAVCItemData@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@U?$pair@$$CBKPAVCItemData@@@std@@@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAVCItemData@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Insert_range_unchecked@PBU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PBU12@@?$_Tree@V?$_Tmap_traits@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@$0A@@std@@@std@@IAEXPBU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@1@QBU21@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Insert_range_unchecked@PBU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PBU12@@?$_Tree@V?$_Tmap_traits@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@$0A@@std@@@std@@IAEXPBU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@1@QBU21@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Insert_range_unchecked@PBU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PBU12@@?$_Tree@V?$_Tmap_traits@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@$0A@@std@@@std@@IAEXPBU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@1@QBU21@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Insert_range_unchecked@PBU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PBU12@@?$_Tree@V?$_Tmap_traits@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@$0A@@std@@@std@@IAEXPBU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@1@QBU21@@Z$5
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Insert_range_unchecked@PBU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PBU12@@?$_Tree@V?$_Tmap_traits@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@$0A@@std@@@std@@IAEXPBU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@1@QBU21@@Z$3
__ehfuncinfo$??$_Insert_range_unchecked@PBU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PBU12@@?$_Tree@V?$_Tmap_traits@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@$0A@@std@@@std@@IAEXPBU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@1@QBU21@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??$_Insert_range_unchecked@PBU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PBU12@@?$_Tree@V?$_Tmap_traits@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@$0A@@std@@@std@@IAEXPBU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@1@QBU21@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Try_emplace@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@$$V@?$map@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@_N@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Try_emplace@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@$$V@?$map@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@_N@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@@Z$2
__ehfuncinfo$??$_Try_emplace@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@$$V@?$map@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@_N@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Try_emplace@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@$$V@?$map@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@_N@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$make_pair@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV12@@std@@YA?AU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@0@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$make_pair@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV12@@std@@YA?AU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@0@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z$1
__ehfuncinfo$??$make_pair@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV12@@std@@YA?AU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@0@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$make_pair@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV12@@std@@YA?AU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@0@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0U?$pair@PBDPBD@std@@AAY03$$CBD$0A@@?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@QAE@$$QAU?$pair@PBDPBD@1@AAY03$$CBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@PBDPBD@std@@AAY03$$CBD$0A@@?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@QAE@$$QAU?$pair@PBDPBD@1@AAY03$$CBD@Z$0
__ehfuncinfo$??$?0U?$pair@PBDPBD@std@@AAY03$$CBD$0A@@?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@QAE@$$QAU?$pair@PBDPBD@1@AAY03$$CBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0U?$pair@PBDPBD@std@@AAY03$$CBD$0A@@?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@QAE@$$QAU?$pair@PBDPBD@1@AAY03$$CBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0U?$pair@PBDPBD@std@@AAY04$$CBD$0A@@?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@QAE@$$QAU?$pair@PBDPBD@1@AAY04$$CBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@PBDPBD@std@@AAY04$$CBD$0A@@?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@QAE@$$QAU?$pair@PBDPBD@1@AAY04$$CBD@Z$0
__ehfuncinfo$??$?0U?$pair@PBDPBD@std@@AAY04$$CBD$0A@@?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@QAE@$$QAU?$pair@PBDPBD@1@AAY04$$CBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0U?$pair@PBDPBD@std@@AAY04$$CBD$0A@@?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@QAE@$$QAU?$pair@PBDPBD@1@AAY04$$CBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0U?$pair@PBDPBD@std@@AAY01$$CBD$0A@@?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@QAE@$$QAU?$pair@PBDPBD@1@AAY01$$CBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@PBDPBD@std@@AAY01$$CBD$0A@@?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@QAE@$$QAU?$pair@PBDPBD@1@AAY01$$CBD@Z$0
__ehfuncinfo$??$?0U?$pair@PBDPBD@std@@AAY01$$CBD$0A@@?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@QAE@$$QAU?$pair@PBDPBD@1@AAY01$$CBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0U?$pair@PBDPBD@std@@AAY01$$CBD$0A@@?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@QAE@$$QAU?$pair@PBDPBD@1@AAY01$$CBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0PBDPBD$0A@@?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@$$QAU?$pair@PBDPBD@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0PBDPBD$0A@@?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@$$QAU?$pair@PBDPBD@1@@Z$0
__ehfuncinfo$??$?0PBDPBD$0A@@?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@$$QAU?$pair@PBDPBD@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0PBDPBD$0A@@?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@$$QAU?$pair@PBDPBD@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@ABU01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@ABU01@@Z$0
__ehfuncinfo$??0?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@ABU01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@ABU01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@QAE@ABU01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@QAE@ABU01@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@QAE@ABU01@@Z$0
__ehfuncinfo$??0?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@QAE@ABU01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@QAE@ABU01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$map@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@@std@@QAE@V?$initializer_list@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@1@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??0?$map@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@@std@@QAE@V?$initializer_list@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0?$map@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@@std@@QAE@V?$initializer_list@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$map@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@@std@@QAE@V?$initializer_list@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$map@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@@std@@QAE@V?$initializer_list@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@1@@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$map@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@@std@@QAE@V?$initializer_list@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@1@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0?$map@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@@std@@QAE@V?$initializer_list@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@1@@Z$6
	DD	02H
	DD	FLAT:__unwindfunclet$??0?$map@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@@std@@QAE@V?$initializer_list@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@1@@Z$4
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??A?$map@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??A?$map@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@@Z$2
__ehfuncinfo$??A?$map@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??A?$map@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?insert@?$_Tree@V?$_Tmap_traits@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@$0A@@std@@@std@@QAEXV?$initializer_list@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?insert@?$_Tree@V?$_Tmap_traits@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@$0A@@std@@@std@@QAEXV?$initializer_list@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?insert@?$_Tree@V?$_Tmap_traits@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@$0A@@std@@@std@@QAEXV?$initializer_list@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?insert@?$_Tree@V?$_Tmap_traits@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@$0A@@std@@@std@@QAEXV?$initializer_list@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@@Z$5
	DD	01H
	DD	FLAT:__unwindfunclet$?insert@?$_Tree@V?$_Tmap_traits@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@$0A@@std@@@std@@QAEXV?$initializer_list@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@@Z$3
__ehfuncinfo$?insert@?$_Tree@V?$_Tmap_traits@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@$0A@@std@@@std@@QAEXV?$initializer_list@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?insert@?$_Tree@V?$_Tmap_traits@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@$0A@@std@@@std@@QAEXV?$initializer_list@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKK@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKK@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKK@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKK@1@@Z$2
__ehfuncinfo$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKK@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKK@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKK@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKK@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCItemData@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCItemData@@@1@@Z$2
__ehfuncinfo$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCItemData@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCItemData@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?LoadItemScale@CItemManager@@QAE_NPBD@Z DD 019930522H
	DD	02bH
	DD	FLAT:__unwindtable$?LoadItemScale@CItemManager@@QAE_NPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?LoadItemScale@CItemManager@@QAE_NPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$71
	DD	03H
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$4
	DD	05H
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$75
	DD	05H
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$5
	DD	07H
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$101
	DD	07H
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$6
	DD	09H
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$113
	DD	09H
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$7
	DD	0bH
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$109
	DD	0bH
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$8
	DD	0dH
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$105
	DD	0dH
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$9
	DD	0fH
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$97
	DD	0fH
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$10
	DD	011H
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$93
	DD	011H
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$11
	DD	013H
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$89
	DD	03H
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$13
	DD	015H
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$79
	DD	016H
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$82
	DD	016H
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$81
	DD	018H
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$85
	DD	018H
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$83
	DD	02H
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$14
	DD	01bH
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$15
	DD	01cH
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$16
	DD	01dH
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$17
	DD	01eH
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$50
	DD	01eH
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$18
	DD	020H
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$54
	DD	020H
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$19
	DD	01eH
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$19
	DD	023H
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$20
	DD	024H
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$21
	DD	025H
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$22
	DD	026H
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$23
	DD	027H
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$24
	DD	028H
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$25
	DD	029H
	DD	FLAT:__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$26
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LoadItemTable@CItemManager@@QAE_NPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadItemTable@CItemManager@@QAE_NPBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadItemTable@CItemManager@@QAE_NPBD@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?LoadItemTable@CItemManager@@QAE_NPBD@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?LoadItemTable@CItemManager@@QAE_NPBD@Z$6
__ehfuncinfo$?LoadItemTable@CItemManager@@QAE_NPBD@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?LoadItemTable@CItemManager@@QAE_NPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LoadItemList@CItemManager@@QAE_NPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadItemList@CItemManager@@QAE_NPBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadItemList@CItemManager@@QAE_NPBD@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?LoadItemList@CItemManager@@QAE_NPBD@Z$2
__ehfuncinfo$?LoadItemList@CItemManager@@QAE_NPBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?LoadItemList@CItemManager@@QAE_NPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?LoadItemDesc@CItemManager@@QAE_NPBD@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?LoadItemDesc@CItemManager@@QAE_NPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?LoadItemDesc@CItemManager@@QAE_NPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadItemDesc@CItemManager@@QAE_NPBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadItemDesc@CItemManager@@QAE_NPBD@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?LoadItemDesc@CItemManager@@QAE_NPBD@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?LoadItemDesc@CItemManager@@QAE_NPBD@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?LoadItemDesc@CItemManager@@QAE_NPBD@Z$4
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CItemManager@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CItemManager@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CItemManager@@QAE@XZ$0
__ehfuncinfo$??0CItemManager@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CItemManager@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCItemData@@PAPAV1@@std@@YAPAPAVCItemData@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCItemData@@PAPAV1@@std@@YAPAPAVCItemData@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CItemData * *,CItemData * *>, COMDAT

; 4526 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4527 :     auto _FirstPtr              = _To_address(_First);
; 4528 :     auto _LastPtr               = _To_address(_Last);
; 4529 :     auto _DestPtr               = _To_address(_Dest);
; 4530 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4531 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4532 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4533 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4535 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4536 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4537 :     } else {
; 4538 :         return _Dest + (_LastPtr - _FirstPtr);
; 4539 :     }
; 4540 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAVCItemData@@PAPAV1@@std@@YAPAPAVCItemData@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CItemData * *,CItemData * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
;	COMDAT ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z PROC ; std::operator<<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 5056 :     const basic_string<_Elem, _Traits, _Alloc>& _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2235 :         const value_type* _Result = _Bx._Buf;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b c8		 mov	 ecx, eax

; 2244 :         return _BUF_SIZE <= _Myres;

  00008	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2236 :         if (_Large_string_engaged()) {

  0000c	72 02		 jb	 SHORT $LN6@operator

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  0000e	8b 08		 mov	 ecx, DWORD PTR [eax]
$LN6@operator:
  00010	53		 push	 ebx
  00011	56		 push	 esi

; 2235 :         const value_type* _Result = _Bx._Buf;

  00012	8b 75 08	 mov	 esi, DWORD PTR __Left$[ebp]
  00015	8b d6		 mov	 edx, esi
  00017	57		 push	 edi

; 2244 :         return _BUF_SIZE <= _Myres;

  00018	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2236 :         if (_Large_string_engaged()) {

  0001c	72 02		 jb	 SHORT $LN11@operator

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  0001e	8b 16		 mov	 edx, DWORD PTR [esi]
$LN11@operator:

; 4626 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  00020	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 70   :     return _Right < _Left ? _Right : _Left;

  00023	8b f3		 mov	 esi, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4626 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  00025	8b 78 10	 mov	 edi, DWORD PTR [eax+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 70   :     return _Right < _Left ? _Right : _Left;

  00028	3b fb		 cmp	 edi, ebx
  0002a	0f 42 f7	 cmovb	 esi, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 383  :         return _CSTD memcmp(_First1, _First2, _Count);

  0002d	83 ee 04	 sub	 esi, 4
  00030	72 11		 jb	 SHORT $LN26@operator
$LL27@operator:
  00032	8b 02		 mov	 eax, DWORD PTR [edx]
  00034	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00036	75 10		 jne	 SHORT $LN25@operator
  00038	83 c2 04	 add	 edx, 4
  0003b	83 c1 04	 add	 ecx, 4
  0003e	83 ee 04	 sub	 esi, 4
  00041	73 ef		 jae	 SHORT $LL27@operator
$LN26@operator:
  00043	83 fe fc	 cmp	 esi, -4			; fffffffcH
  00046	74 34		 je	 SHORT $LN24@operator
$LN25@operator:
  00048	8a 02		 mov	 al, BYTE PTR [edx]
  0004a	3a 01		 cmp	 al, BYTE PTR [ecx]
  0004c	75 27		 jne	 SHORT $LN28@operator
  0004e	83 fe fd	 cmp	 esi, -3			; fffffffdH
  00051	74 29		 je	 SHORT $LN24@operator
  00053	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  00056	3a 41 01	 cmp	 al, BYTE PTR [ecx+1]
  00059	75 1a		 jne	 SHORT $LN28@operator
  0005b	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0005e	74 1c		 je	 SHORT $LN24@operator
  00060	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  00063	3a 41 02	 cmp	 al, BYTE PTR [ecx+2]
  00066	75 0d		 jne	 SHORT $LN28@operator
  00068	83 fe ff	 cmp	 esi, -1
  0006b	74 0f		 je	 SHORT $LN24@operator
  0006d	8a 42 03	 mov	 al, BYTE PTR [edx+3]
  00070	3a 41 03	 cmp	 al, BYTE PTR [ecx+3]
  00073	74 07		 je	 SHORT $LN24@operator
$LN28@operator:
  00075	1b c0		 sbb	 eax, eax
  00077	83 c8 01	 or	 eax, 1
  0007a	eb 02		 jmp	 SHORT $LN29@operator
$LN24@operator:
  0007c	33 c0		 xor	 eax, eax
$LN29@operator:

; 557  :     if (_Ans != 0) {

  0007e	85 c0		 test	 eax, eax
  00080	75 13		 jne	 SHORT $LN18@operator

; 558  :         return _Ans;
; 559  :     }
; 560  : 
; 561  :     if (_Left_size < _Right_size) {

  00082	3b fb		 cmp	 edi, ebx
  00084	76 0b		 jbe	 SHORT $LN42@operator

; 5057 :     return _Left.compare(_Right) < 0;

  00086	5f		 pop	 edi

; 562  :         return -1;

  00087	83 c8 ff	 or	 eax, -1

; 5057 :     return _Left.compare(_Right) < 0;

  0008a	5e		 pop	 esi
  0008b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0008e	5b		 pop	 ebx

; 5058 : }

  0008f	5d		 pop	 ebp
  00090	c3		 ret	 0
$LN42@operator:

; 565  :     if (_Left_size > _Right_size) {

  00091	1b c0		 sbb	 eax, eax
  00093	f7 d8		 neg	 eax
$LN18@operator:

; 5057 :     return _Left.compare(_Right) < 0;

  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0009a	5b		 pop	 ebx

; 5058 : }

  0009b	5d		 pop	 ebp
  0009c	c3		 ret	 0
??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ENDP ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??$_Find_hint@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@?$_Tree@V?$_Tmap_traits@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_hint_result@PAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@1@QAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@1@ABU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@@Z
_TEXT	SEGMENT
__Loc$1 = -24						; size = 12
tv758 = -12						; size = 4
tv757 = -8						; size = 4
_this$1$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
tv756 = 12						; size = 4
__Hint$ = 12						; size = 4
__Keyval$ = 16						; size = 4
tv753 = 19						; size = 1
??$_Find_hint@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@?$_Tree@V?$_Tmap_traits@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_hint_result@PAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@1@QAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@1@ABU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Find_hint<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 1496 :     _Tree_find_hint_result<_Nodeptr> _Find_hint(const _Nodeptr _Hint, const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 1497 :         const auto& _Comp = _Getcomp();
; 1498 :         const auto _Head  = _Get_scary()->_Myhead;

  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	53		 push	 ebx
  00009	56		 push	 esi
  0000a	57		 push	 edi

; 1499 :         if constexpr (_Multi) { // insert even if duplicate
; 1500 :             if (_Hint->_Isnil) {
; 1501 :                 // insert at end if greater than or equal to last element
; 1502 :                 if (_Head->_Parent->_Isnil || !_DEBUG_LT_PRED(_Comp, _Keyval, _Traits::_Kfn(_Head->_Right->_Myval))) {
; 1503 :                     return {{_Head->_Right, _Tree_child::_Right}, false};
; 1504 :                 }
; 1505 : 
; 1506 :                 // _Hint is end(); it must be closer to the end of equivalents
; 1507 :                 return {_Find_upper_bound(_Keyval)._Location, false};
; 1508 :             }
; 1509 : 
; 1510 :             if (_Hint == _Head->_Left) {
; 1511 :                 // insert at beginning if less than or equal to first element
; 1512 :                 if (!_DEBUG_LT_PRED(_Comp, _Traits::_Kfn(_Hint->_Myval), _Keyval)) {
; 1513 :                     return {{_Hint, _Tree_child::_Left}, false};
; 1514 :                 }
; 1515 : 
; 1516 :                 // _Hint is begin(); it must be closer to the beginning of equivalents
; 1517 :                 return {_Find_lower_bound(_Keyval)._Location, false};
; 1518 :             }
; 1519 : 
; 1520 :             if (!_DEBUG_LT_PRED(_Comp, _Traits::_Kfn(_Hint->_Myval), _Keyval)) {
; 1521 :                 // _Val <= *_Hint
; 1522 :                 const auto _Prev = (--(_Unchecked_const_iterator(_Hint, nullptr)))._Ptr;
; 1523 :                 if (!_DEBUG_LT_PRED(_Comp, _Keyval, _Traits::_Kfn(_Prev->_Myval))) {
; 1524 :                     // _Val <= *_Hint and _Val >= *prev(_Hint); insert here
; 1525 :                     if (_Prev->_Right->_Isnil) {
; 1526 :                         return {{_Prev, _Tree_child::_Right}, false};
; 1527 :                     } else {
; 1528 :                         return {{_Hint, _Tree_child::_Left}, false};
; 1529 :                     }
; 1530 :                 }
; 1531 : 
; 1532 :                 // _Val goes before *_Hint; _Hint must be closer to the end of equivalents
; 1533 :                 return {_Find_upper_bound(_Keyval)._Location, false};
; 1534 :             }
; 1535 : 
; 1536 :             // _Val goes after *_Hint; _Hint must be closer to the beginning of equivalents
; 1537 :             return {_Find_lower_bound(_Keyval)._Location, false};
; 1538 :         } else { // insert only if unique
; 1539 :             if (_Hint->_Isnil) { // insert at end if after last element

  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Hint$[ebp]
  0000e	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  00011	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00015	74 3e		 je	 SHORT $LN2@Find_hint

; 1540 :                 // insert at end if greater than last element
; 1541 :                 if (_Head->_Parent->_Isnil || _DEBUG_LT_PRED(_Comp, _Traits::_Kfn(_Head->_Right->_Myval), _Keyval)) {

  00017	8d 70 08	 lea	 esi, DWORD PTR [eax+8]
  0001a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001d	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00021	75 17		 jne	 SHORT $LN65@Find_hint
  00023	8b 06		 mov	 eax, DWORD PTR [esi]
  00025	8b 5d 10	 mov	 ebx, DWORD PTR __Keyval$[ebp]
  00028	83 c0 10	 add	 eax, 16			; 00000010H
  0002b	53		 push	 ebx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??R?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@QBE_NABU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@0@Z ; std::less<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator()
  00032	84 c0		 test	 al, al
  00034	0f 84 6d 01 00
	00		 je	 $LN16@Find_hint
$LN65@Find_hint:

; 1542 :                     return {{_Head->_Right, _Tree_child::_Right}, false};

  0003a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0003d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003f	5f		 pop	 edi

; 1582 :         }
; 1583 :     }

  00040	5e		 pop	 esi
  00041	89 08		 mov	 DWORD PTR [eax], ecx
  00043	c6 40 08 00	 mov	 BYTE PTR [eax+8], 0
  00047	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  0004e	5b		 pop	 ebx
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 0c 00	 ret	 12			; 0000000cH
$LN2@Find_hint:

; 1543 :                 }
; 1544 :             } else if (_Hint == _Head->_Left) {

  00055	8d 77 10	 lea	 esi, DWORD PTR [edi+16]
  00058	8b 5d 10	 mov	 ebx, DWORD PTR __Keyval$[ebp]
  0005b	56		 push	 esi
  0005c	53		 push	 ebx
  0005d	3b 38		 cmp	 edi, DWORD PTR [eax]
  0005f	75 26		 jne	 SHORT $LN6@Find_hint

; 1545 :                 // insert at beginning if less than first element
; 1546 :                 if (_DEBUG_LT_PRED(_Comp, _Keyval, _Traits::_Kfn(_Hint->_Myval))) {

  00061	e8 00 00 00 00	 call	 ??R?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@QBE_NABU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@0@Z ; std::less<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator()
  00066	84 c0		 test	 al, al
  00068	0f 84 39 01 00
	00		 je	 $LN16@Find_hint

; 1547 :                     return {{_Hint, _Tree_child::_Left}, false};

  0006e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00071	89 38		 mov	 DWORD PTR [eax], edi
  00073	5f		 pop	 edi

; 1582 :         }
; 1583 :     }

  00074	5e		 pop	 esi
  00075	c7 40 04 01 00
	00 00		 mov	 DWORD PTR [eax+4], 1
  0007c	c6 40 08 00	 mov	 BYTE PTR [eax+8], 0
  00080	5b		 pop	 ebx
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c2 0c 00	 ret	 12			; 0000000cH
$LN6@Find_hint:

; 1548 :                 }
; 1549 :             } else if (_DEBUG_LT_PRED(_Comp, _Keyval, _Traits::_Kfn(_Hint->_Myval))) {

  00087	e8 00 00 00 00	 call	 ??R?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@QBE_NABU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@0@Z ; std::less<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator()
  0008c	84 c0		 test	 al, al
  0008e	0f 84 a6 00 00
	00		 je	 $LN9@Find_hint

; 74   :         } else if (_Ptr->_Left->_Isnil) { // climb looking for left subtree

  00094	8b 37		 mov	 esi, DWORD PTR [edi]

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00096	8b c7		 mov	 eax, edi

; 74   :         } else if (_Ptr->_Left->_Isnil) { // climb looking for left subtree

  00098	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0009c	74 3e		 je	 SHORT $LN28@Find_hint

; 75   :             _Nodeptr _Pnode;
; 76   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Left) {

  0009e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  000a1	8b cf		 mov	 ecx, edi
  000a3	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  000a7	75 2a		 jne	 SHORT $LN25@Find_hint

; 1540 :                 // insert at end if greater than last element
; 1541 :                 if (_Head->_Parent->_Isnil || _DEBUG_LT_PRED(_Comp, _Traits::_Kfn(_Head->_Right->_Myval), _Keyval)) {

  000a9	8b d7		 mov	 edx, edi
  000ab	8b df		 mov	 ebx, edi
  000ad	0f 1f 00	 npad	 3
$LL24@Find_hint:

; 76   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Left) {

  000b0	8b cb		 mov	 ecx, ebx
  000b2	89 75 f4	 mov	 DWORD PTR tv758[ebp], esi
  000b5	89 75 f8	 mov	 DWORD PTR tv757[ebp], esi
  000b8	89 75 0c	 mov	 DWORD PTR tv756[ebp], esi
  000bb	3b 16		 cmp	 edx, DWORD PTR [esi]
  000bd	75 11		 jne	 SHORT $LN66@Find_hint

; 77   :                 _Ptr = _Pnode; // ==> parent while left subtree

  000bf	8b c6		 mov	 eax, esi
  000c1	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  000c4	8b d0		 mov	 edx, eax
  000c6	8b d8		 mov	 ebx, eax
  000c8	8b c8		 mov	 ecx, eax
  000ca	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  000ce	74 e0		 je	 SHORT $LL24@Find_hint
$LN66@Find_hint:
  000d0	8b 5d 10	 mov	 ebx, DWORD PTR __Keyval$[ebp]
$LN25@Find_hint:

; 78   :             }
; 79   : 
; 80   :             if (!_Ptr->_Isnil) { // decrement non-begin()
; 81   :                 _Ptr = _Pnode; // ==> parent if not head
; 82   :             }
; 83   :         } else {

  000d3	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000d7	0f 45 f1	 cmovne	 esi, ecx
  000da	eb 14		 jmp	 SHORT $LN34@Find_hint
$LN28@Find_hint:

; 445  :         while (!_Pnode->_Right->_Isnil) {

  000dc	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000df	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000e3	75 0b		 jne	 SHORT $LN34@Find_hint
$LL33@Find_hint:

; 446  :             _Pnode = _Pnode->_Right;

  000e5	8b f0		 mov	 esi, eax
  000e7	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000ea	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000ee	74 f5		 je	 SHORT $LL33@Find_hint
$LN34@Find_hint:

; 1550 :                 // _Val < *_Hint
; 1551 :                 const auto _Prev = (--(_Unchecked_const_iterator(_Hint, nullptr)))._Ptr;
; 1552 :                 if (_DEBUG_LT_PRED(_Comp, _Traits::_Kfn(_Prev->_Myval), _Keyval)) {

  000f0	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000f3	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  000f6	53		 push	 ebx
  000f7	50		 push	 eax
  000f8	e8 00 00 00 00	 call	 ??R?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@QBE_NABU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@0@Z ; std::less<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator()
  000fd	84 c0		 test	 al, al
  000ff	0f 84 a2 00 00
	00		 je	 $LN16@Find_hint

; 1553 :                     // _Val < *_Hint and _Val > *prev(_Hint); insert here
; 1554 :                     if (_Prev->_Right->_Isnil) {

  00105	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00108	8a 48 0d	 mov	 cl, BYTE PTR [eax+13]
  0010b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0010e	c6 40 08 00	 mov	 BYTE PTR [eax+8], 0
  00112	84 c9		 test	 cl, cl
  00114	74 12		 je	 SHORT $LN12@Find_hint

; 1555 :                         return {{_Prev, _Tree_child::_Right}, false};

  00116	5f		 pop	 edi
  00117	89 30		 mov	 DWORD PTR [eax], esi

; 1582 :         }
; 1583 :     }

  00119	5e		 pop	 esi
  0011a	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00121	5b		 pop	 ebx
  00122	8b e5		 mov	 esp, ebp
  00124	5d		 pop	 ebp
  00125	c2 0c 00	 ret	 12			; 0000000cH
$LN12@Find_hint:

; 1556 :                     } else {
; 1557 :                         return {{_Hint, _Tree_child::_Left}, false};

  00128	89 38		 mov	 DWORD PTR [eax], edi
  0012a	5f		 pop	 edi

; 1582 :         }
; 1583 :     }

  0012b	5e		 pop	 esi
  0012c	c7 40 04 01 00
	00 00		 mov	 DWORD PTR [eax+4], 1
  00133	5b		 pop	 ebx
  00134	8b e5		 mov	 esp, ebp
  00136	5d		 pop	 ebp
  00137	c2 0c 00	 ret	 12			; 0000000cH
$LN9@Find_hint:

; 1558 :                     }
; 1559 :                 }
; 1560 :             } else if (_DEBUG_LT_PRED(_Comp, _Traits::_Kfn(_Hint->_Myval), _Keyval)) {

  0013a	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0013d	53		 push	 ebx
  0013e	56		 push	 esi
  0013f	e8 00 00 00 00	 call	 ??R?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@QBE_NABU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@0@Z ; std::less<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator()
  00144	84 c0		 test	 al, al
  00146	0f 84 cd 00 00
	00		 je	 $LN14@Find_hint

; 51   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  0014c	8b 77 08	 mov	 esi, DWORD PTR [edi+8]
  0014f	8a 46 0d	 mov	 al, BYTE PTR [esi+13]
  00152	88 45 13	 mov	 BYTE PTR tv753[ebp], al
  00155	84 c0		 test	 al, al
  00157	74 23		 je	 SHORT $LN41@Find_hint

; 52   :             _Nodeptr _Pnode;
; 53   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  00159	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  0015c	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00160	0f 85 94 00 00
	00		 jne	 $LN17@Find_hint

; 1540 :                 // insert at end if greater than last element
; 1541 :                 if (_Head->_Parent->_Isnil || _DEBUG_LT_PRED(_Comp, _Traits::_Kfn(_Head->_Right->_Myval), _Keyval)) {

  00166	8b c7		 mov	 eax, edi
$LL39@Find_hint:

; 53   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  00168	8b ce		 mov	 ecx, esi
  0016a	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0016d	75 21		 jne	 SHORT $LN46@Find_hint
  0016f	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  00172	8b c1		 mov	 eax, ecx
  00174	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00178	74 ee		 je	 SHORT $LL39@Find_hint

; 54   :                 _Ptr = _Pnode; // ==> parent while right subtree
; 55   :             }
; 56   : 
; 57   :             _Ptr = _Pnode; // ==> parent (head if end())
; 58   :         } else {

  0017a	eb 14		 jmp	 SHORT $LN46@Find_hint
$LN41@Find_hint:

; 453  :         while (!_Pnode->_Left->_Isnil) {

  0017c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0017e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00182	75 0c		 jne	 SHORT $LN46@Find_hint
$LL45@Find_hint:
  00184	8b 01		 mov	 eax, DWORD PTR [ecx]

; 454  :             _Pnode = _Pnode->_Left;

  00186	8b f1		 mov	 esi, ecx
  00188	8b c8		 mov	 ecx, eax
  0018a	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0018e	74 f4		 je	 SHORT $LL45@Find_hint
$LN46@Find_hint:

; 1561 :                 // _Val > *_Hint
; 1562 :                 const auto _Next = (++(_Unchecked_const_iterator(_Hint, nullptr)))._Ptr;
; 1563 :                 if (_Next->_Isnil || _DEBUG_LT_PRED(_Comp, _Keyval, _Traits::_Kfn(_Next->_Myval))) {

  00190	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00194	75 64		 jne	 SHORT $LN17@Find_hint
  00196	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00199	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  0019c	50		 push	 eax
  0019d	53		 push	 ebx
  0019e	e8 00 00 00 00	 call	 ??R?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@QBE_NABU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@0@Z ; std::less<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator()
  001a3	84 c0		 test	 al, al
  001a5	75 53		 jne	 SHORT $LN17@Find_hint
$LN16@Find_hint:

; 1574 :             }
; 1575 : 
; 1576 :             const auto _Loc = _Find_lower_bound(_Keyval);

  001a7	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  001aa	8d 45 e8	 lea	 eax, DWORD PTR __Loc$1[ebp]
  001ad	53		 push	 ebx
  001ae	50		 push	 eax
  001af	e8 00 00 00 00	 call	 ??$_Find_lower_bound@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@?$_Tree@V?$_Tmap_traits@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@1@ABU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@@Z ; std::_Tree<std::_Tmap_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Find_lower_bound<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1577 :             if (_Lower_bound_duplicate(_Loc._Bound, _Keyval)) {

  001b4	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  001b7	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  001ba	53		 push	 ebx
  001bb	8b 5d f0	 mov	 ebx, DWORD PTR __Loc$1[ebp+8]
  001be	53		 push	 ebx
  001bf	e8 00 00 00 00	 call	 ??$_Lower_bound_duplicate@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@?$_Tree@V?$_Tmap_traits@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@$0A@@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@1@ABU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@@Z ; std::_Tree<std::_Tmap_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Lower_bound_duplicate<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  001c4	84 c0		 test	 al, al
  001c6	74 18		 je	 SHORT $LN19@Find_hint

; 1578 :                 return {{_Loc._Bound, _Tree_child::_Unused}, true};

  001c8	5f		 pop	 edi
  001c9	89 1e		 mov	 DWORD PTR [esi], ebx
  001cb	8b c6		 mov	 eax, esi
  001cd	c7 46 04 02 00
	00 00		 mov	 DWORD PTR [esi+4], 2
  001d4	c6 46 08 01	 mov	 BYTE PTR [esi+8], 1

; 1582 :         }
; 1583 :     }

  001d8	5e		 pop	 esi
  001d9	5b		 pop	 ebx
  001da	8b e5		 mov	 esp, ebp
  001dc	5d		 pop	 ebp
  001dd	c2 0c 00	 ret	 12			; 0000000cH
$LN19@Find_hint:

; 1579 :             }
; 1580 : 
; 1581 :             return {_Loc._Location, false};

  001e0	8b 45 e8	 mov	 eax, DWORD PTR __Loc$1[ebp]
  001e3	8b 4d ec	 mov	 ecx, DWORD PTR __Loc$1[ebp+4]
  001e6	89 06		 mov	 DWORD PTR [esi], eax
  001e8	8b c6		 mov	 eax, esi
  001ea	5f		 pop	 edi
  001eb	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  001ee	c6 46 08 00	 mov	 BYTE PTR [esi+8], 0

; 1582 :         }
; 1583 :     }

  001f2	5e		 pop	 esi
  001f3	5b		 pop	 ebx
  001f4	8b e5		 mov	 esp, ebp
  001f6	5d		 pop	 ebp
  001f7	c2 0c 00	 ret	 12			; 0000000cH
$LN17@Find_hint:

; 1564 :                     // _Val > *_Hint and _Val < *next(_Hint); insert here
; 1565 :                     if (_Hint->_Right->_Isnil) {

  001fa	80 7d 13 00	 cmp	 BYTE PTR tv753[ebp], 0
  001fe	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00201	c6 40 08 00	 mov	 BYTE PTR [eax+8], 0
  00205	75 19		 jne	 SHORT $LN90@Find_hint

; 1566 :                         return {{_Hint, _Tree_child::_Right}, false};
; 1567 :                     }
; 1568 : 
; 1569 :                     return {{_Next, _Tree_child::_Left}, false};

  00207	5f		 pop	 edi
  00208	89 30		 mov	 DWORD PTR [eax], esi

; 1582 :         }
; 1583 :     }

  0020a	5e		 pop	 esi
  0020b	c7 40 04 01 00
	00 00		 mov	 DWORD PTR [eax+4], 1
  00212	5b		 pop	 ebx
  00213	8b e5		 mov	 esp, ebp
  00215	5d		 pop	 ebp
  00216	c2 0c 00	 ret	 12			; 0000000cH
$LN14@Find_hint:

; 1570 :                 }
; 1571 :             } else {
; 1572 :                 // _Val is equivalent to *_Hint; don't insert
; 1573 :                 return {{_Hint, _Tree_child::_Right}, true};

  00219	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0021c	c6 40 08 01	 mov	 BYTE PTR [eax+8], 1
$LN90@Find_hint:

; 1582 :         }
; 1583 :     }

  00220	89 38		 mov	 DWORD PTR [eax], edi
  00222	5f		 pop	 edi
  00223	5e		 pop	 esi
  00224	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  0022b	5b		 pop	 ebx
  0022c	8b e5		 mov	 esp, ebp
  0022e	5d		 pop	 ebp
  0022f	c2 0c 00	 ret	 12			; 0000000cH
??$_Find_hint@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@?$_Tree@V?$_Tmap_traits@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_hint_result@PAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@1@QAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@1@ABU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Find_hint<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 1927 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1928 :     // move [_First, _Last) to raw _Dest, using _Al
; 1929 :     // note: only called internally from elsewhere in the STL
; 1930 :     using _Ptrval     = typename _Alloc::value_type*;
; 1931 :     auto _UFirst      = _Get_unwrapped(_First);
; 1932 :     const auto _ULast = _Get_unwrapped(_Last);
; 1933 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1934 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1935 : #if _HAS_CXX20
; 1936 :         if (!_STD is_constant_evaluated())
; 1937 : #endif // _HAS_CXX20
; 1938 :         {
; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1940 :             return _Dest + (_ULast - _UFirst);
; 1941 :         }
; 1942 :     }
; 1943 : 
; 1944 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1945 :     for (; _UFirst != _ULast; ++_UFirst) {

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	56		 push	 esi

; 1791 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  0000a	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]

; 1928 :     // move [_First, _Last) to raw _Dest, using _Al
; 1929 :     // note: only called internally from elsewhere in the STL
; 1930 :     using _Ptrval     = typename _Alloc::value_type*;
; 1931 :     auto _UFirst      = _Get_unwrapped(_First);
; 1932 :     const auto _ULast = _Get_unwrapped(_Last);
; 1933 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1934 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1935 : #if _HAS_CXX20
; 1936 :         if (!_STD is_constant_evaluated())
; 1937 : #endif // _HAS_CXX20
; 1938 :         {
; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1940 :             return _Dest + (_ULast - _UFirst);
; 1941 :         }
; 1942 :     }
; 1943 : 
; 1944 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1945 :     for (; _UFirst != _ULast; ++_UFirst) {

  0000d	3b c2		 cmp	 eax, edx
  0000f	74 4f		 je	 SHORT $LN3@Uninitiali

; 1791 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00011	8b ce		 mov	 ecx, esi
  00013	2b c8		 sub	 ecx, eax
  00015	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL4@Uninitiali:
  00020	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00023	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  00026	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  0002d	c7 44 01 14 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+20], 0

; 2999 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00035	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00038	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  0003b	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  00040	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1803 :         ++_Last;

  00045	83 c6 18	 add	 esi, 24			; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4821 :         _My_data._Mysize = 0;

  00048	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 4822 :         _My_data._Myres  = _BUF_SIZE - 1;

  0004f	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 4823 :         _My_data._Activate_SSO_buffer();
; 4824 : 
; 4825 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4826 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00056	c6 00 00	 mov	 BYTE PTR [eax], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1803 :         ++_Last;

  00059	83 c0 18	 add	 eax, 24			; 00000018H

; 1928 :     // move [_First, _Last) to raw _Dest, using _Al
; 1929 :     // note: only called internally from elsewhere in the STL
; 1930 :     using _Ptrval     = typename _Alloc::value_type*;
; 1931 :     auto _UFirst      = _Get_unwrapped(_First);
; 1932 :     const auto _ULast = _Get_unwrapped(_Last);
; 1933 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1934 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1935 : #if _HAS_CXX20
; 1936 :         if (!_STD is_constant_evaluated())
; 1937 : #endif // _HAS_CXX20
; 1938 :         {
; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1940 :             return _Dest + (_ULast - _UFirst);
; 1941 :         }
; 1942 :     }
; 1943 : 
; 1944 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1945 :     for (; _UFirst != _ULast; ++_UFirst) {

  0005c	3b c2		 cmp	 eax, edx
  0005e	75 c0		 jne	 SHORT $LL4@Uninitiali
$LN3@Uninitiali:

; 1797 :         _Destroy_range(_First, _Last, _Al);

  00060	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00063	56		 push	 esi
  00064	56		 push	 esi
  00065	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  0006a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1946 :         _Backout._Emplace_back(_STD move(*_UFirst));
; 1947 :     }
; 1948 : 
; 1949 :     return _Backout._Release();

  0006d	8b c6		 mov	 eax, esi
  0006f	5e		 pop	 esi

; 1950 : }

  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,unsigned long>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,unsigned long>,void *> > >, COMDAT
; _this$ = ecx

; 1156 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 265  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 18		 push	 24			; 00000018H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 1157 :             _Al.deallocate(_Ptr, 1);
; 1158 :         }
; 1159 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,unsigned long>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,unsigned long>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CItemData *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CItemData *>,void *> > >, COMDAT
; _this$ = ecx

; 1156 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 265  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 18		 push	 24			; 00000018H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 1157 :             _Al.deallocate(_Ptr, 1);
; 1158 :         }
; 1159 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CItemData *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CItemData *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$destroy@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@1@QAU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@1@QAU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::destroy<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 724  :     static _CONSTEXPR20 void destroy(_Alloc&, _Uty* const _Ptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 0c	 mov	 esi, DWORD PTR __Ptr$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00007	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  0000a	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  0000d	72 28		 jb	 SHORT $LN21@destroy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000f	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00012	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00013	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00019	72 12		 jb	 SHORT $LN31@destroy

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001b	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001e	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00021	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00023	83 c0 fc	 add	 eax, -4			; fffffffcH
  00026	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00029	77 27		 ja	 SHORT $LN28@destroy

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002b	8b c2		 mov	 eax, edx
$LN31@destroy:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0002d	51		 push	 ecx
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00034	83 c4 08	 add	 esp, 8
$LN21@destroy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  00037	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0
  0003e	8b ce		 mov	 ecx, esi

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  00040	c7 46 44 0f 00
	00 00		 mov	 DWORD PTR [esi+68], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00047	c6 46 30 00	 mov	 BYTE PTR [esi+48], 0
  0004b	5e		 pop	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 730  :     }

  0004c	5d		 pop	 ebp
  0004d	e9 00 00 00 00	 jmp	 ??1?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@XZ
$LN28@destroy:

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00052	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN43@destroy:
  00057	cc		 int	 3
??$destroy@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@1@QAU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::destroy<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z
_TEXT	SEGMENT
__Oldsize$1$ = -12					; size = 4
_this$1$ = -8						; size = 4
__Whereoff$1$ = -8					; size = 4
tv582 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 812  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 813  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 814  :         _Alty& _Al        = _Getal();
; 815  :         auto& _My_data    = _Mypair._Myval2;
; 816  :         pointer& _Myfirst = _My_data._Myfirst;
; 817  :         pointer& _Mylast  = _My_data._Mylast;
; 818  : 
; 819  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 820  : 
; 821  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00006	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  00009	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000e	53		 push	 ebx
  0000f	56		 push	 esi
  00010	8b f1		 mov	 esi, ecx
  00012	57		 push	 edi
  00013	8b 3e		 mov	 edi, DWORD PTR [esi]
  00015	2b d7		 sub	 edx, edi

; 822  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	f7 ea		 imul	 edx
  0001c	2b cf		 sub	 ecx, edi
  0001e	c1 fa 02	 sar	 edx, 2
  00021	8b c2		 mov	 eax, edx
  00023	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00026	03 c2		 add	 eax, edx
  00028	89 45 f8	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  0002b	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00030	f7 e9		 imul	 ecx
  00032	c1 fa 02	 sar	 edx, 2
  00035	8b c2		 mov	 eax, edx
  00037	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0003a	03 c2		 add	 eax, edx
  0003c	89 45 f4	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 823  : 
; 824  :         if (_Oldsize == max_size()) {

  0003f	3d aa aa aa 0a	 cmp	 eax, 178956970		; 0aaaaaaaH
  00044	0f 84 77 01 00
	00		 je	 $LN90@Emplace_re

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0004a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 826  :         }
; 827  : 
; 828  :         const size_type _Newsize     = _Oldsize + 1;

  0004d	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00050	2b cf		 sub	 ecx, edi
  00052	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00057	f7 e9		 imul	 ecx

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00059	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0005e	c1 fa 02	 sar	 edx, 2
  00061	8b ca		 mov	 ecx, edx
  00063	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00066	03 ca		 add	 ecx, edx

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00068	8b d1		 mov	 edx, ecx
  0006a	d1 ea		 shr	 edx, 1
  0006c	2b c2		 sub	 eax, edx
  0006e	3b c8		 cmp	 ecx, eax
  00070	76 15		 jbe	 SHORT $LN12@Emplace_re

; 1967 :             return _Max; // geometric growth would overflow

  00072	b8 f0 ff ff ff	 mov	 eax, -16		; fffffff0H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00077	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1967 :             return _Max; // geometric growth would overflow

  00078	89 45 fc	 mov	 DWORD PTR tv582[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007b	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00080	83 c4 04	 add	 esp, 4
  00083	8b f8		 mov	 edi, eax
  00085	eb 46		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1970 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00087	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 70   :         if (_Count > _Max_possible) {

  0008a	8b cb		 mov	 ecx, ebx
  0008c	3b c3		 cmp	 eax, ebx
  0008e	0f 43 c8	 cmovae	 ecx, eax
  00091	81 f9 aa aa aa
	0a		 cmp	 ecx, 178956970		; 0aaaaaaaH
  00097	0f 87 29 01 00
	00		 ja	 $LN91@Emplace_re

; 72   :         }
; 73   :     }
; 74   : 
; 75   :     return _Count * _Ty_size;

  0009d	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
  000a0	c1 e0 03	 shl	 eax, 3
  000a3	89 45 fc	 mov	 DWORD PTR tv582[ebp], eax

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000a6	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000ab	72 0d		 jb	 SHORT $LN24@Emplace_re

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000ad	50		 push	 eax
  000ae	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000b3	83 c4 04	 add	 esp, 4
  000b6	8b f8		 mov	 edi, eax
  000b8	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  000ba	85 c0		 test	 eax, eax
  000bc	74 0d		 je	 SHORT $LN25@Emplace_re

; 87   :         return ::operator new(_Bytes);

  000be	50		 push	 eax
  000bf	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000c4	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  000c7	8b f8		 mov	 edi, eax
  000c9	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  000cb	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 836  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000cd	8b 45 f8	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
  000d0	0f 57 c0	 xorps	 xmm0, xmm0
  000d3	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000d6	8d 1c c7	 lea	 ebx, DWORD PTR [edi+eax*8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2999 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000d9	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000dc	0f 11 03	 movups	 XMMWORD PTR [ebx], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  000df	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  000e6	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0

; 2999 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000ed	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 836  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000f0	89 5d f8	 mov	 DWORD PTR _this$1$[ebp], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2999 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000f3	0f 11 03	 movups	 XMMWORD PTR [ebx], xmm0
  000f6	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  000fb	66 0f d6 43 10	 movq	 QWORD PTR [ebx+16], xmm0

; 4821 :         _My_data._Mysize = 0;

  00100	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 4822 :         _My_data._Myres  = _BUF_SIZE - 1;

  00107	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 4823 :         _My_data._Activate_SSO_buffer();
; 4824 : 
; 4825 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4826 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0010e	c6 00 00	 mov	 BYTE PTR [eax], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 839  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00111	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00114	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00117	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00119	3b c2		 cmp	 eax, edx
  0011b	75 04		 jne	 SHORT $LN4@Emplace_re

; 840  :             if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 841  :                 _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);

  0011d	8b c7		 mov	 eax, edi

; 842  :             } else {
; 843  :                 _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);
; 844  :             }
; 845  :         } else { // provide basic guarantee

  0011f	eb 15		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 846  :             _Uninitialized_move(_Myfirst, _Whereptr, _Newvec, _Al);

  00121	56		 push	 esi
  00122	57		 push	 edi
  00123	50		 push	 eax
  00124	51		 push	 ecx
  00125	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 847  :             _Constructed_first = _Newvec;
; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  0012a	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  0012d	8d 43 18	 lea	 eax, DWORD PTR [ebx+24]
  00130	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00133	83 c4 10	 add	 esp, 16			; 00000010H
$LN5@Emplace_re:
  00136	56		 push	 esi
  00137	50		 push	 eax
  00138	52		 push	 edx
  00139	51		 push	 ecx
  0013a	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 2023 :         if (_Myfirst) { // destroy and deallocate old array

  0013f	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 847  :             _Constructed_first = _Newvec;
; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  00141	83 c4 10	 add	 esp, 16			; 00000010H

; 2023 :         if (_Myfirst) { // destroy and deallocate old array

  00144	85 c9		 test	 ecx, ecx
  00146	74 52		 je	 SHORT $LN64@Emplace_re

; 2024 :             _Destroy_range(_Myfirst, _Mylast, _Al);

  00148	56		 push	 esi
  00149	ff 76 04	 push	 DWORD PTR [esi+4]
  0014c	51		 push	 ecx
  0014d	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 2025 :             _ASAN_VECTOR_REMOVE;
; 2026 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00152	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00155	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0015a	8b 1e		 mov	 ebx, DWORD PTR [esi]
  0015c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0015f	2b cb		 sub	 ecx, ebx
  00161	f7 e9		 imul	 ecx
  00163	c1 fa 02	 sar	 edx, 2
  00166	8b c2		 mov	 eax, edx
  00168	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0016b	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0016d	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00170	c1 e1 03	 shl	 ecx, 3

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00173	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00179	72 12		 jb	 SHORT $LN74@Emplace_re

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0017b	8b 53 fc	 mov	 edx, DWORD PTR [ebx-4]
  0017e	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00181	2b da		 sub	 ebx, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00183	8d 43 fc	 lea	 eax, DWORD PTR [ebx-4]
  00186	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00189	77 31		 ja	 SHORT $LN71@Emplace_re

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0018b	8b da		 mov	 ebx, edx
$LN74@Emplace_re:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0018d	51		 push	 ecx
  0018e	53		 push	 ebx
  0018f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00194	8b 5d f8	 mov	 ebx, DWORD PTR _this$1$[ebp]
  00197	83 c4 08	 add	 esp, 8
$LN64@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2030 :         _Mylast  = _Newvec + _Newsize;

  0019a	8b 45 f4	 mov	 eax, DWORD PTR __Oldsize$1$[ebp]
  0019d	40		 inc	 eax
  0019e	89 3e		 mov	 DWORD PTR [esi], edi
  001a0	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]

; 849  :         }
; 850  :         _CATCH_ALL
; 851  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 852  :         _Al.deallocate(_Newvec, _Newcapacity);
; 853  :         _RERAISE;
; 854  :         _CATCH_END
; 855  : 
; 856  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 857  :         return _Newvec + _Whereoff;

  001a3	8b c3		 mov	 eax, ebx

; 2030 :         _Mylast  = _Newvec + _Newsize;

  001a5	8d 0c cf	 lea	 ecx, DWORD PTR [edi+ecx*8]
  001a8	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 2031 :         _Myend   = _Newvec + _Newcapacity;

  001ab	8b 4d fc	 mov	 ecx, DWORD PTR tv582[ebp]
  001ae	03 cf		 add	 ecx, edi

; 858  :     }

  001b0	5f		 pop	 edi

; 2031 :         _Myend   = _Newvec + _Newcapacity;

  001b1	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 858  :     }

  001b4	5e		 pop	 esi
  001b5	5b		 pop	 ebx
  001b6	8b e5		 mov	 esp, ebp
  001b8	5d		 pop	 ebp
  001b9	c2 08 00	 ret	 8
$LN71@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001bc	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN90@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 825  :             _Xlength();

  001c1	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
$LN91@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 71   :             _Throw_bad_array_new_length(); // multiply overflow

  001c6	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN88@Emplace_re:
  001cb	cc		 int	 3
??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@ABK@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@ABK@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CItemData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CItemData *> >,0> >::_Find_lower_bound<unsigned long>, COMDAT
; _this$ = ecx

; 1611 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1612 :         const auto _Scary = _Get_scary();
; 1613 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000b	89 02		 mov	 DWORD PTR [edx], eax
  0000d	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00014	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1614 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1615 :         while (!_Trynode->_Isnil) {

  00017	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001b	75 28		 jne	 SHORT $LN12@Find_lower
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00020	56		 push	 esi
  00021	8b 31		 mov	 esi, DWORD PTR [ecx]
$LL2@Find_lower:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1616 :             _Result._Location._Parent = _Trynode;

  00023	89 02		 mov	 DWORD PTR [edx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  00025	39 70 10	 cmp	 DWORD PTR [eax+16], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1617 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00028	73 07		 jae	 SHORT $LN4@Find_lower

; 1618 :                 _Result._Location._Child = _Tree_child::_Right;
; 1619 :                 _Trynode                 = _Trynode->_Right;

  0002a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002d	33 c9		 xor	 ecx, ecx

; 1620 :             } else {

  0002f	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1621 :                 _Result._Location._Child = _Tree_child::_Left;
; 1622 :                 _Result._Bound           = _Trynode;

  00031	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1623 :                 _Trynode                 = _Trynode->_Left;

  00034	b9 01 00 00 00	 mov	 ecx, 1
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Find_lower:

; 1614 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1615 :         while (!_Trynode->_Isnil) {

  0003b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00042	74 df		 je	 SHORT $LL2@Find_lower
  00044	5e		 pop	 esi
$LN12@Find_lower:

; 1624 :             }
; 1625 :         }
; 1626 : 
; 1627 :         return _Result;
; 1628 :     }

  00045	8b c2		 mov	 eax, edx
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@ABK@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CItemData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CItemData *> >,0> >::_Find_lower_bound<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCItemData@@@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@AAEPAPAVCItemData@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
__Newsize$1$ = -12					; size = 4
tv607 = -8						; size = 4
tv590 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCItemData@@@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@AAEPAPAVCItemData@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CItemData *,std::allocator<CItemData *> >::_Emplace_reallocate<CItemData * const &>, COMDAT
; _this$ = ecx

; 812  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 813  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 814  :         _Alty& _Al        = _Getal();
; 815  :         auto& _My_data    = _Mypair._Myval2;
; 816  :         pointer& _Myfirst = _My_data._Myfirst;
; 817  :         pointer& _Mylast  = _My_data._Mylast;
; 818  : 
; 819  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 820  : 
; 821  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	2b d9		 sub	 ebx, ecx

; 822  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c1		 sub	 eax, ecx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 823  : 
; 824  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 0f 01 00
	00		 je	 $LN96@Emplace_re

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 826  :         }
; 827  : 
; 828  :         const size_type _Newsize     = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b d1		 sub	 edx, ecx

; 826  :         }
; 827  : 
; 828  :         const size_type _Newsize     = _Oldsize + 1;

  00030	89 7d f4	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 fa 02	 sar	 edx, 2

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b ca		 mov	 ecx, edx
  0003d	d1 e9		 shr	 ecx, 1
  0003f	2b c1		 sub	 eax, ecx
  00041	3b d0		 cmp	 edx, eax
  00043	76 15		 jbe	 SHORT $LN12@Emplace_re

; 1967 :             return _Max; // geometric growth would overflow

  00045	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004a	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1967 :             return _Max; // geometric growth would overflow

  0004b	89 45 f8	 mov	 DWORD PTR tv607[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00053	83 c4 04	 add	 esp, 4
  00056	8b f8		 mov	 edi, eax
  00058	eb 47		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1970 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005a	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 70   :         if (_Count > _Max_possible) {

  0005d	8b cf		 mov	 ecx, edi
  0005f	3b c7		 cmp	 eax, edi
  00061	0f 43 c8	 cmovae	 ecx, eax
  00064	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  0006a	0f 87 cc 00 00
	00		 ja	 $LN97@Emplace_re

; 72   :         }
; 73   :     }
; 74   : 
; 75   :     return _Count * _Ty_size;

  00070	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  00077	89 45 f8	 mov	 DWORD PTR tv607[ebp], eax

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0007a	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0007f	72 0d		 jb	 SHORT $LN24@Emplace_re

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00087	83 c4 04	 add	 esp, 4
  0008a	8b f8		 mov	 edi, eax
  0008c	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  0008e	85 c0		 test	 eax, eax
  00090	74 0d		 je	 SHORT $LN25@Emplace_re

; 87   :         return ::operator new(_Bytes);

  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00098	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  0009b	8b f8		 mov	 edi, eax
  0009d	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  0009f	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 836  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000a1	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000a4	8d 0c 9f	 lea	 ecx, DWORD PTR [edi+ebx*4]

; 837  :         _Constructed_first = _Newvec + _Whereoff;
; 838  : 
; 839  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000a7	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  000aa	89 4d fc	 mov	 DWORD PTR tv590[ebp], ecx
  000ad	8b 00		 mov	 eax, DWORD PTR [eax]
  000af	89 01		 mov	 DWORD PTR [ecx], eax
  000b1	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000b4	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000b6	3b d8		 cmp	 ebx, eax
  000b8	75 07		 jne	 SHORT $LN4@Emplace_re

; 845  :         } else { // provide basic guarantee

  000ba	8b 5d fc	 mov	 ebx, DWORD PTR tv590[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000bd	8b d7		 mov	 edx, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 845  :         } else { // provide basic guarantee

  000bf	eb 16		 jmp	 SHORT $LN52@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000c1	57		 push	 edi
  000c2	53		 push	 ebx
  000c3	51		 push	 ecx
  000c4	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCItemData@@PAPAV1@@std@@YAPAPAVCItemData@@PAPAV1@00@Z ; std::_Copy_memmove<CItemData * *,CItemData * *>
  000c9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000cc	8b cb		 mov	 ecx, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000ce	8b 5d fc	 mov	 ebx, DWORD PTR tv590[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000d1	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000d4	8d 53 04	 lea	 edx, DWORD PTR [ebx+4]
$LN52@Emplace_re:
  000d7	52		 push	 edx
  000d8	50		 push	 eax
  000d9	51		 push	 ecx
  000da	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCItemData@@PAPAV1@@std@@YAPAPAVCItemData@@PAPAV1@00@Z ; std::_Copy_memmove<CItemData * *,CItemData * *>

; 2023 :         if (_Myfirst) { // destroy and deallocate old array

  000df	8b 06		 mov	 eax, DWORD PTR [esi]

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000e1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2023 :         if (_Myfirst) { // destroy and deallocate old array

  000e4	85 c0		 test	 eax, eax
  000e6	74 2c		 je	 SHORT $LN70@Emplace_re

; 2024 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2025 :             _ASAN_VECTOR_REMOVE;
; 2026 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e8	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000eb	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ed	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000f0	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f6	72 12		 jb	 SHORT $LN80@Emplace_re

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f8	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000fb	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000fe	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00100	83 c0 fc	 add	 eax, -4			; fffffffcH
  00103	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00106	77 2a		 ja	 SHORT $LN77@Emplace_re

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00108	8b c2		 mov	 eax, edx
$LN80@Emplace_re:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0010a	51		 push	 ecx
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00111	83 c4 08	 add	 esp, 8
$LN70@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2030 :         _Mylast  = _Newvec + _Newsize;

  00114	8b 45 f4	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  00117	89 3e		 mov	 DWORD PTR [esi], edi
  00119	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]

; 849  :         }
; 850  :         _CATCH_ALL
; 851  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 852  :         _Al.deallocate(_Newvec, _Newcapacity);
; 853  :         _RERAISE;
; 854  :         _CATCH_END
; 855  : 
; 856  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 857  :         return _Newvec + _Whereoff;

  0011c	8b c3		 mov	 eax, ebx

; 2030 :         _Mylast  = _Newvec + _Newsize;

  0011e	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 2031 :         _Myend   = _Newvec + _Newcapacity;

  00121	8b 4d f8	 mov	 ecx, DWORD PTR tv607[ebp]
  00124	03 cf		 add	 ecx, edi

; 858  :     }

  00126	5f		 pop	 edi

; 2031 :         _Myend   = _Newvec + _Newcapacity;

  00127	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 858  :     }

  0012a	5e		 pop	 esi
  0012b	5b		 pop	 ebx
  0012c	8b e5		 mov	 esp, ebp
  0012e	5d		 pop	 ebp
  0012f	c2 08 00	 ret	 8
$LN77@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00132	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN96@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 825  :             _Xlength();

  00137	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@CAXXZ ; std::vector<CItemData *,std::allocator<CItemData *> >::_Xlength
$LN97@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 71   :             _Throw_bad_array_new_length(); // multiply overflow

  0013c	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN94@Emplace_re:
  00141	cc		 int	 3
??$_Emplace_reallocate@ABQAVCItemData@@@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@AAEPAPAVCItemData@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CItemData *,std::allocator<CItemData *> >::_Emplace_reallocate<CItemData * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKK@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKK@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,unsigned long> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,unsigned long>,void *> > >, COMDAT
; _this$ = ecx

; 744  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000e	75 25		 jne	 SHORT $LN3@Erase_tree
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR __Al$[ebp]
$LL2@Erase_tree:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00014	ff 76 08	 push	 DWORD PTR [esi+8]
  00017	8b cb		 mov	 ecx, ebx
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKK@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,unsigned long> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,unsigned long>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 754  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001f	8b c6		 mov	 eax, esi

; 755  :     _Val         = static_cast<_Other&&>(_New_val);

  00021	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00023	6a 18		 push	 24			; 00000018H
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00032	74 e0		 je	 SHORT $LL2@Erase_tree
  00034	5f		 pop	 edi
$LN3@Erase_tree:
  00035	5e		 pop	 esi

; 747  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 748  :         }
; 749  :     }

  00036	5b		 pop	 ebx
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKK@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,unsigned long> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,unsigned long>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@ABK@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@ABK@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Find_lower_bound<unsigned long>, COMDAT
; _this$ = ecx

; 1611 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1612 :         const auto _Scary = _Get_scary();
; 1613 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000b	89 02		 mov	 DWORD PTR [edx], eax
  0000d	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00014	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1614 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1615 :         while (!_Trynode->_Isnil) {

  00017	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001b	75 28		 jne	 SHORT $LN12@Find_lower
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00020	56		 push	 esi
  00021	8b 31		 mov	 esi, DWORD PTR [ecx]
$LL2@Find_lower:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1616 :             _Result._Location._Parent = _Trynode;

  00023	89 02		 mov	 DWORD PTR [edx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  00025	39 70 10	 cmp	 DWORD PTR [eax+16], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1617 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00028	73 07		 jae	 SHORT $LN4@Find_lower

; 1618 :                 _Result._Location._Child = _Tree_child::_Right;
; 1619 :                 _Trynode                 = _Trynode->_Right;

  0002a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002d	33 c9		 xor	 ecx, ecx

; 1620 :             } else {

  0002f	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1621 :                 _Result._Location._Child = _Tree_child::_Left;
; 1622 :                 _Result._Bound           = _Trynode;

  00031	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1623 :                 _Trynode                 = _Trynode->_Left;

  00034	b9 01 00 00 00	 mov	 ecx, 1
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Find_lower:

; 1614 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1615 :         while (!_Trynode->_Isnil) {

  0003b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00042	74 df		 je	 SHORT $LL2@Find_lower
  00044	5e		 pop	 esi
$LN12@Find_lower:

; 1624 :             }
; 1625 :         }
; 1626 : 
; 1627 :         return _Result;
; 1628 :     }

  00045	8b c2		 mov	 eax, edx
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@ABK@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Find_lower_bound<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@1@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >, COMDAT
; _this$ = ecx

; 744  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000d	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00011	75 34		 jne	 SHORT $LN3@Erase_tree
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR __Al$[ebp]
  00017	57		 push	 edi
$LL2@Erase_tree:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00018	ff 76 08	 push	 DWORD PTR [esi+8]
  0001b	8b c8		 mov	 ecx, eax
  0001d	53		 push	 ebx
  0001e	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 754  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00023	8b fe		 mov	 edi, esi

; 755  :     _Val         = static_cast<_Other&&>(_New_val);

  00025	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 382  :         allocator_traits<_Alloc>::destroy(_Al, _STD addressof(_Ptr->_Myval));

  00027	8d 47 10	 lea	 eax, DWORD PTR [edi+16]
  0002a	50		 push	 eax
  0002b	53		 push	 ebx
  0002c	e8 00 00 00 00	 call	 ??$destroy@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@1@QAU?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::destroy<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00031	6a 58		 push	 88			; 00000058H
  00033	57		 push	 edi
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00039	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  0003c	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0003f	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00043	74 d3		 je	 SHORT $LL2@Erase_tree
  00045	5f		 pop	 edi
  00046	5b		 pop	 ebx
$LN3@Erase_tree:
  00047	5e		 pop	 esi

; 747  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 748  :         }
; 749  :     }

  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >, COMDAT
; _this$ = ecx

; 1156 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN10@Tree_temp_

; 265  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 58		 push	 88			; 00000058H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN10@Tree_temp_:
  00012	c3		 ret	 0
??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >, COMDAT
; _this$ = ecx

; 1156 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 265  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 58		 push	 88			; 00000058H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 1157 :             _Al.deallocate(_Ptr, 1);
; 1158 :         }
; 1159 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??$_Lower_bound_duplicate@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@?$_Tree@V?$_Tmap_traits@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@$0A@@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@1@ABU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@@Z
_TEXT	SEGMENT
__Bound$ = 8						; size = 4
__Keyval$ = 12						; size = 4
??$_Lower_bound_duplicate@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@?$_Tree@V?$_Tmap_traits@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@$0A@@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@1@ABU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Lower_bound_duplicate<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 1606 :     bool _Lower_bound_duplicate(const _Nodeptr _Bound, const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bound$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0000c	75 3e		 jne	 SHORT $LN3@Lower_boun
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 506  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  0000e	8b 7d 0c	 mov	 edi, DWORD PTR __Keyval$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00011	8d 70 10	 lea	 esi, DWORD PTR [eax+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 506  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  0001b	83 c4 08	 add	 esp, 8
  0001e	84 c0		 test	 al, al
  00020	75 2a		 jne	 SHORT $LN3@Lower_boun
  00022	57		 push	 edi
  00023	56		 push	 esi
  00024	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  00029	83 c4 08	 add	 esp, 8
  0002c	84 c0		 test	 al, al
  0002e	75 14		 jne	 SHORT $LN12@Lower_boun
  00030	8d 46 18	 lea	 eax, DWORD PTR [esi+24]
  00033	50		 push	 eax
  00034	8d 47 18	 lea	 eax, DWORD PTR [edi+24]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  0003d	83 c4 08	 add	 esp, 8
  00040	84 c0		 test	 al, al
  00042	75 08		 jne	 SHORT $LN3@Lower_boun
$LN12@Lower_boun:
  00044	5f		 pop	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00045	b0 01		 mov	 al, 1

; 1608 :     }

  00047	5e		 pop	 esi
  00048	5d		 pop	 ebp
  00049	c2 08 00	 ret	 8
$LN3@Lower_boun:
  0004c	5f		 pop	 edi

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0004d	32 c0		 xor	 al, al

; 1608 :     }

  0004f	5e		 pop	 esi
  00050	5d		 pop	 ebp
  00051	c2 08 00	 ret	 8
??$_Lower_bound_duplicate@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@?$_Tree@V?$_Tmap_traits@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@$0A@@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@1@ABU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Lower_bound_duplicate<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??$_Find_lower_bound@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@?$_Tree@V?$_Tmap_traits@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@1@ABU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@?$_Tree@V?$_Tmap_traits@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@1@ABU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Find_lower_bound<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 1611 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1612 :         const auto _Scary = _Get_scary();
; 1613 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  0000d	89 37		 mov	 DWORD PTR [edi], esi

; 1614 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1615 :         while (!_Trynode->_Isnil) {

  0000f	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00013	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  0001a	89 47 08	 mov	 DWORD PTR [edi+8], eax
  0001d	75 5c		 jne	 SHORT $LN18@Find_lower
  0001f	8b 45 0c	 mov	 eax, DWORD PTR __Keyval$[ebp]
  00022	53		 push	 ebx
$LL2@Find_lower:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 506  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  00023	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1617 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00024	8d 5e 10	 lea	 ebx, DWORD PTR [esi+16]
  00027	89 37		 mov	 DWORD PTR [edi], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 506  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  00029	53		 push	 ebx
  0002a	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  0002f	83 c4 08	 add	 esp, 8
  00032	84 c0		 test	 al, al
  00034	75 33		 jne	 SHORT $LN17@Find_lower
  00036	53		 push	 ebx
  00037	ff 75 0c	 push	 DWORD PTR __Keyval$[ebp]
  0003a	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  0003f	83 c4 08	 add	 esp, 8
  00042	84 c0		 test	 al, al
  00044	75 17		 jne	 SHORT $LN4@Find_lower
  00046	8b 45 0c	 mov	 eax, DWORD PTR __Keyval$[ebp]
  00049	83 c0 18	 add	 eax, 24			; 00000018H
  0004c	50		 push	 eax
  0004d	8d 43 18	 lea	 eax, DWORD PTR [ebx+24]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  00056	83 c4 08	 add	 esp, 8
  00059	84 c0		 test	 al, al
  0005b	75 0c		 jne	 SHORT $LN17@Find_lower
$LN4@Find_lower:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1622 :                 _Result._Bound           = _Trynode;

  0005d	89 77 08	 mov	 DWORD PTR [edi+8], esi

; 1623 :                 _Trynode                 = _Trynode->_Left;

  00060	b8 01 00 00 00	 mov	 eax, 1
  00065	8b 36		 mov	 esi, DWORD PTR [esi]
  00067	eb 05		 jmp	 SHORT $LN5@Find_lower
$LN17@Find_lower:

; 1618 :                 _Result._Location._Child = _Tree_child::_Right;
; 1619 :                 _Trynode                 = _Trynode->_Right;

  00069	8b 76 08	 mov	 esi, DWORD PTR [esi+8]
  0006c	33 c0		 xor	 eax, eax
$LN5@Find_lower:

; 1614 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1615 :         while (!_Trynode->_Isnil) {

  0006e	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00071	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00075	8b 45 0c	 mov	 eax, DWORD PTR __Keyval$[ebp]
  00078	74 a9		 je	 SHORT $LL2@Find_lower
  0007a	5b		 pop	 ebx
$LN18@Find_lower:

; 1624 :             }
; 1625 :         }
; 1626 : 
; 1627 :         return _Result;
; 1628 :     }

  0007b	8b c7		 mov	 eax, edi
  0007d	5f		 pop	 edi
  0007e	5e		 pop	 esi
  0007f	5d		 pop	 ebp
  00080	c2 08 00	 ret	 8
??$_Find_lower_bound@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@?$_Tree@V?$_Tmap_traits@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@1@ABU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Find_lower_bound<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 1082 : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1086 :         for (; _First != _Last; ++_First) {

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 48		 je	 SHORT $LN45@Destroy_ra
  0000f	90		 npad	 1
$LL4@Destroy_ra:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00010	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00013	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  00016	72 27		 jb	 SHORT $LN23@Destroy_ra
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00018	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0001a	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0001b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00021	72 12		 jb	 SHORT $LN33@Destroy_ra

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00023	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00026	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00029	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0002b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00031	77 28		 ja	 SHORT $LN30@Destroy_ra

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00033	8b c2		 mov	 eax, edx
$LN33@Destroy_ra:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00035	51		 push	 ecx
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003c	83 c4 08	 add	 esp, 8
$LN23@Destroy_ra:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  0003f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  00046	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0004d	c6 06 00	 mov	 BYTE PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1086 :         for (; _First != _Last; ++_First) {

  00050	83 c6 18	 add	 esi, 24			; 00000018H
  00053	3b f7		 cmp	 esi, edi
  00055	75 b9		 jne	 SHORT $LL4@Destroy_ra
$LN45@Destroy_ra:
  00057	5f		 pop	 edi

; 1087 :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 1088 :         }
; 1089 :     }
; 1090 : }

  00058	5e		 pop	 esi
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
$LN30@Destroy_ra:

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0005b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN50@Destroy_ra:
  00060	cc		 int	 3
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CItemData *> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CItemData *>,void *> > >, COMDAT
; _this$ = ecx

; 752  :     void _Erase_head(_Alnode& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 753  :         this->_Orphan_all();
; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  00007	8b 37		 mov	 esi, DWORD PTR [edi]
  00009	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0000c	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00010	75 25		 jne	 SHORT $LN5@Erase_head
  00012	53		 push	 ebx
  00013	8b 5d 08	 mov	 ebx, DWORD PTR __Al$[ebp]
$LL4@Erase_head:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00016	ff 76 08	 push	 DWORD PTR [esi+8]
  00019	8b cf		 mov	 ecx, edi
  0001b	53		 push	 ebx
  0001c	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CItemData *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CItemData *>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 754  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00021	8b c6		 mov	 eax, esi

; 755  :     _Val         = static_cast<_Other&&>(_New_val);

  00023	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00025	6a 18		 push	 24			; 00000018H
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002d	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00030	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00034	74 e0		 je	 SHORT $LL4@Erase_head
  00036	5b		 pop	 ebx
$LN5@Erase_head:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00037	6a 18		 push	 24			; 00000018H
  00039	ff 37		 push	 DWORD PTR [edi]
  0003b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00040	83 c4 08	 add	 esp, 8
  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 756  :     }

  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CItemData *> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CItemData *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CItemData *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CItemData *>,void *> > >, COMDAT
; _this$ = ecx

; 744  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000e	75 25		 jne	 SHORT $LN3@Erase_tree
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR __Al$[ebp]
$LL2@Erase_tree:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00014	ff 76 08	 push	 DWORD PTR [esi+8]
  00017	8b cb		 mov	 ecx, ebx
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CItemData *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CItemData *>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 754  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001f	8b c6		 mov	 eax, esi

; 755  :     _Val         = static_cast<_Other&&>(_New_val);

  00021	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00023	6a 18		 push	 24			; 00000018H
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00032	74 e0		 je	 SHORT $LL2@Erase_tree
  00034	5f		 pop	 edi
$LN3@Erase_tree:
  00035	5e		 pop	 esi

; 747  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 748  :         }
; 749  :     }

  00036	5b		 pop	 ebx
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CItemData *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CItemData *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??__FscaleMap@?5??LoadItemScale@CItemManager@@QAE_NPBD@Z@YAXXZ
text$yd	SEGMENT
??__FscaleMap@?5??LoadItemScale@CItemManager@@QAE_NPBD@Z@YAXXZ PROC ; `CItemManager::LoadItemScale'::`6'::`dynamic atexit destructor for 'scaleMap'', COMDAT
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?scaleMap@?5??LoadItemScale@CItemManager@@QAE_NPBD@Z@4V?$map@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@@std@@A
  00005	b9 00 00 00 00	 mov	 ecx, OFFSET ?scaleMap@?5??LoadItemScale@CItemManager@@QAE_NPBD@Z@4V?$map@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@@std@@A
  0000a	ff 70 04	 push	 DWORD PTR [eax+4]
  0000d	68 00 00 00 00	 push	 OFFSET ?scaleMap@?5??LoadItemScale@CItemManager@@QAE_NPBD@Z@4V?$map@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@@std@@A
  00012	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00017	6a 58		 push	 88			; 00000058H
  00019	ff 35 00 00 00
	00		 push	 DWORD PTR ?scaleMap@?5??LoadItemScale@CItemManager@@QAE_NPBD@Z@4V?$map@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@@std@@A
  0001f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00024	83 c4 08	 add	 esp, 8
  00027	c3		 ret	 0
??__FscaleMap@?5??LoadItemScale@CItemManager@@QAE_NPBD@Z@YAXXZ ENDP ; `CItemManager::LoadItemScale'::`6'::`dynamic atexit destructor for 'scaleMap''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
;	COMDAT ??$?0PBDPBD$0A@@?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@$$QAU?$pair@PBDPBD@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
tv208 = 8						; size = 4
tv204 = 8						; size = 4
__Right$ = 8						; size = 4
??$?0PBDPBD$0A@@?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@$$QAU?$pair@PBDPBD@1@@Z PROC ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><char const *,char const *,0>, COMDAT
; _this$ = ecx

; 270  :         : first(_STD forward<_Other1>(_Right.first)), second(_STD forward<_Other2>(_Right.second)) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?0PBDPBD$0A@@?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@$$QAU?$pair@PBDPBD@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002a	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  0002d	0f 57 c0	 xorps	 xmm0, xmm0
  00030	8b 17		 mov	 edx, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00032	8b ca		 mov	 ecx, edx

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00034	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  00037	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  0003e	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00045	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  00048	89 45 08	 mov	 DWORD PTR tv204[ebp], eax
  0004b	0f 1f 44 00 00	 npad	 5
$LL29@allocator:
  00050	8a 01		 mov	 al, BYTE PTR [ecx]
  00052	41		 inc	 ecx
  00053	84 c0		 test	 al, al
  00055	75 f9		 jne	 SHORT $LL29@allocator
  00057	2b 4d 08	 sub	 ecx, DWORD PTR tv204[ebp]

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0005a	51		 push	 ecx
  0005b	52		 push	 edx
  0005c	8b ce		 mov	 ecx, esi
  0005e	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 270  :         : first(_STD forward<_Other1>(_Right.first)), second(_STD forward<_Other2>(_Right.second)) {}

  00063	8b 7f 04	 mov	 edi, DWORD PTR [edi+4]
  00066	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00069	8b c7		 mov	 eax, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 270  :         : first(_STD forward<_Other1>(_Right.first)), second(_STD forward<_Other2>(_Right.second)) {}

  0006b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00072	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00075	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  00078	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0007f	8d 50 01	 lea	 edx, DWORD PTR [eax+1]

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  00082	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00089	89 55 08	 mov	 DWORD PTR tv208[ebp], edx
  0008c	0f 1f 40 00	 npad	 4
$LL30@allocator:
  00090	8a 10		 mov	 dl, BYTE PTR [eax]
  00092	40		 inc	 eax
  00093	84 d2		 test	 dl, dl
  00095	75 f9		 jne	 SHORT $LL30@allocator
  00097	2b 45 08	 sub	 eax, DWORD PTR tv208[ebp]

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0009a	50		 push	 eax
  0009b	57		 push	 edi
  0009c	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 270  :         : first(_STD forward<_Other1>(_Right.first)), second(_STD forward<_Other2>(_Right.second)) {}

  000a1	8b c6		 mov	 eax, esi
  000a3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ad	59		 pop	 ecx
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0PBDPBD$0A@@?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@$$QAU?$pair@PBDPBD@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$?0PBDPBD$0A@@?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@$$QAU?$pair@PBDPBD@1@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?0PBDPBD$0A@@?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@$$QAU?$pair@PBDPBD@1@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?0PBDPBD$0A@@?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@$$QAU?$pair@PBDPBD@1@@Z ENDP ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><char const *,char const *,0>
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??1?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@QAE@XZ PROC ; std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::~pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  00009	72 28		 jb	 SHORT $LN15@pair
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0000e	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00015	72 12		 jb	 SHORT $LN25@pair

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00017	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001a	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001d	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00022	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00025	77 26		 ja	 SHORT $LN22@pair

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00027	8b c2		 mov	 eax, edx
$LN25@pair:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00029	51		 push	 ecx
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00030	83 c4 08	 add	 esp, 8
$LN15@pair:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  00033	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0
  0003a	8b ce		 mov	 ecx, esi

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  0003c	c7 46 44 0f 00
	00 00		 mov	 DWORD PTR [esi+68], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00043	c6 46 30 00	 mov	 BYTE PTR [esi+48], 0
  00047	5e		 pop	 esi
  00048	e9 00 00 00 00	 jmp	 ??1?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@XZ
$LN22@pair:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN34@pair:
  00052	cc		 int	 3
??1?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@QAE@XZ ENDP ; std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::~pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??1?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@XZ PROC ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::~pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  00009	72 28		 jb	 SHORT $LN15@pair
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0000e	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00015	72 12		 jb	 SHORT $LN25@pair

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00017	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001a	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001d	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00022	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00025	77 60		 ja	 SHORT $LN50@pair

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00027	8b c2		 mov	 eax, edx
$LN25@pair:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00029	51		 push	 ecx
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00030	83 c4 08	 add	 esp, 8
$LN15@pair:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  00033	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  0003a	c7 46 2c 0f 00
	00 00		 mov	 DWORD PTR [esi+44], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00041	c6 46 18 00	 mov	 BYTE PTR [esi+24], 0

; 2244 :         return _BUF_SIZE <= _Myres;

  00045	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00048	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  0004b	72 27		 jb	 SHORT $LN43@pair
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0004d	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0004f	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00050	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00056	72 12		 jb	 SHORT $LN53@pair

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00058	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0005b	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0005e	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00060	83 c0 fc	 add	 eax, -4			; fffffffcH
  00063	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00066	77 1f		 ja	 SHORT $LN50@pair

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00068	8b c2		 mov	 eax, edx
$LN53@pair:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0006a	51		 push	 ecx
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00071	83 c4 08	 add	 esp, 8
$LN43@pair:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  00074	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  0007b	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00082	c6 06 00	 mov	 BYTE PTR [esi], 0
  00085	5e		 pop	 esi
  00086	c3		 ret	 0
$LN50@pair:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00087	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN64@pair:
  0008c	cc		 int	 3
??1?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@XZ ENDP ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::~pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Insert_node, COMDAT
; _this$ = ecx

; 646  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 647  :         ++_Mysize;
; 648  :         const auto _Head  = _Myhead;
; 649  :         _Newnode->_Parent = _Loc._Parent;

  00004	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0000e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00010	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00013	89 45 fc	 mov	 DWORD PTR __Head$1$[ebp], eax
  00016	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 650  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  00019	3b d0		 cmp	 edx, eax
  0001b	75 16		 jne	 SHORT $LN5@Insert_nod

; 651  :             _Head->_Left     = _Newnode;

  0001d	89 38		 mov	 DWORD PTR [eax], edi

; 652  :             _Head->_Parent   = _Newnode;

  0001f	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 653  :             _Head->_Right    = _Newnode;

  00022	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 712  :         return _Newnode;
; 713  :     }

  00025	8b c7		 mov	 eax, edi
  00027	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
  0002b	5f		 pop	 edi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 654  :             _Newnode->_Color = _Black; // the root is black
; 655  :             return _Newnode;
; 656  :         }
; 657  : 
; 658  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 659  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00033	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00037	75 0d		 jne	 SHORT $LN6@Insert_nod

; 660  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 661  :             _Loc._Parent->_Right = _Newnode;

  00039	89 7a 08	 mov	 DWORD PTR [edx+8], edi

; 662  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003c	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003f	75 0d		 jne	 SHORT $LN9@Insert_nod

; 663  :                 _Head->_Right = _Newnode;

  00041	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 664  :             }
; 665  :         } else { // add to left of _Loc._Parent

  00044	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 666  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 667  :             _Loc._Parent->_Left = _Newnode;

  00046	89 3a		 mov	 DWORD PTR [edx], edi

; 668  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00048	3b 10		 cmp	 edx, DWORD PTR [eax]
  0004a	75 02		 jne	 SHORT $LN9@Insert_nod

; 669  :                 _Head->_Left = _Newnode;

  0004c	89 38		 mov	 DWORD PTR [eax], edi
$LN9@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00051	8b c7		 mov	 eax, edi
  00053	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00057	0f 85 7d 01 00
	00		 jne	 $LN3@Insert_nod
  0005d	56		 push	 esi
  0005e	66 90		 npad	 2
$LL2@Insert_nod:

; 674  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00063	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	3b d1		 cmp	 edx, ecx
  0006a	0f 85 aa 00 00
	00		 jne	 $LN10@Insert_nod

; 675  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00070	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 676  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00073	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00077	0f 84 a3 00 00
	00		 je	 $LN76@Insert_nod

; 677  :                     _Pnode->_Parent->_Color          = _Black;
; 678  :                     _Parent_sibling->_Color          = _Black;
; 679  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 680  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 681  :                 } else { // parent's sibling has red and black children
; 682  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  0007d	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00080	3b c6		 cmp	 eax, esi
  00082	75 37		 jne	 SHORT $LN51@Insert_nod

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00084	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 683  :                         _Pnode = _Pnode->_Parent;

  00086	8b c2		 mov	 eax, edx

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00088	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0008b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00091	75 03		 jne	 SHORT $LN20@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  00093	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN20@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  00096	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00099	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  0009c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0009e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000a1	75 05		 jne	 SHORT $LN21@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  000a3	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  000a6	eb 0e		 jmp	 SHORT $LN24@Insert_nod
$LN21@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000a8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ab	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000ad	75 04		 jne	 SHORT $LN23@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  000af	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  000b1	eb 03		 jmp	 SHORT $LN24@Insert_nod
$LN23@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  000b3	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN24@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 479  :         _Wherenode->_Parent = _Pnode;

  000b8	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN51@Insert_nod:

; 684  :                         _Lrotate(_Pnode);
; 685  :                     }
; 686  : 
; 687  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 688  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c8	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 689  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 483  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000d2	8b 32		 mov	 esi, DWORD PTR [edx]

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  000d4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000d7	89 0a		 mov	 DWORD PTR [edx], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  000d9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000dc	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000e0	75 03		 jne	 SHORT $LN27@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  000e2	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN27@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  000e5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000e8	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  000eb	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000ed	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000f0	75 0b		 jne	 SHORT $LN28@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  000f2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  000f5	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  000f8	e9 cc 00 00 00	 jmp	 $LN75@Insert_nod
$LN28@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  000fd	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00100	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00103	75 0b		 jne	 SHORT $LN30@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00105	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00108	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  0010b	e9 b9 00 00 00	 jmp	 $LN75@Insert_nod
$LN30@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00110	89 31		 mov	 DWORD PTR [ecx], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00112	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  00115	e9 af 00 00 00	 jmp	 $LN75@Insert_nod
$LN10@Insert_nod:

; 692  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 693  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  0011a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0011e	75 1d		 jne	 SHORT $LN15@Insert_nod
$LN76@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00120	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1
  00124	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  00128	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0012e	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00132	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00135	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00138	e9 8f 00 00 00	 jmp	 $LN46@Insert_nod
$LN15@Insert_nod:

; 694  :                     _Pnode->_Parent->_Color          = _Black;
; 695  :                     _Parent_sibling->_Color          = _Black;
; 696  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 697  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 698  :                 } else { // parent's sibling has red and black children
; 699  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  0013d	8b 32		 mov	 esi, DWORD PTR [edx]
  0013f	3b c6		 cmp	 eax, esi
  00141	75 3a		 jne	 SHORT $LN39@Insert_nod

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00143	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 700  :                         _Pnode = _Pnode->_Parent;

  00146	8b c2		 mov	 eax, edx

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00148	89 08		 mov	 DWORD PTR [eax], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  0014a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0014d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00151	75 03		 jne	 SHORT $LN34@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  00153	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN34@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  00156	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00159	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  0015c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0015e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00161	75 05		 jne	 SHORT $LN35@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  00163	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00166	eb 0f		 jmp	 SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00168	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0016b	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0016e	75 05		 jne	 SHORT $LN37@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00170	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 496  :         } else {

  00173	eb 02		 jmp	 SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00175	89 31		 mov	 DWORD PTR [ecx], esi
$LN38@Insert_nod:

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00177	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 501  :         _Wherenode->_Parent = _Pnode;

  0017a	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN39@Insert_nod:

; 701  :                         _Rrotate(_Pnode);
; 702  :                     }
; 703  : 
; 704  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  0017d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 705  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00184	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00187	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0018a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 706  :                     _Lrotate(_Pnode->_Parent->_Parent);

  0018e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00191	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 461  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00194	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00197	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00199	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0019c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0019e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a2	75 03		 jne	 SHORT $LN41@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  001a4	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN41@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  001a7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001aa	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  001ad	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001af	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  001b2	75 05		 jne	 SHORT $LN42@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  001b4	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  001b7	eb 0e		 jmp	 SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001b9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001bc	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001be	75 04		 jne	 SHORT $LN44@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  001c2	eb 03		 jmp	 SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  001c4	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN45@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  001c7	89 16		 mov	 DWORD PTR [esi], edx
$LN75@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001c9	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN46@Insert_nod:
  001cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001cf	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001d3	0f 84 87 fe ff
	ff		 je	 $LL2@Insert_nod
  001d9	5e		 pop	 esi
$LN3@Insert_nod:

; 707  :                 }
; 708  :             }
; 709  :         }
; 710  : 
; 711  :         _Head->_Parent->_Color = _Black; // root is always black

  001da	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]
  001dd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e0	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 712  :         return _Newnode;
; 713  :     }

  001e4	8b c7		 mov	 eax, edi
  001e6	5f		 pop	 edi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
;	COMDAT ??R?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@QBE_NABU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??R?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@QBE_NABU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@0@Z PROC ; std::less<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator(), COMDAT
; _this$ = ecx

; 2464 :         noexcept(noexcept(_Fake_copy_init<bool>(_Left < _Right))) /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 506  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Right$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2464 :         noexcept(noexcept(_Fake_copy_init<bool>(_Left < _Right))) /* strengthened */ {

  00007	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 506  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  00008	8b 7d 08	 mov	 edi, DWORD PTR __Left$[ebp]
  0000b	56		 push	 esi
  0000c	57		 push	 edi
  0000d	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  00012	83 c4 08	 add	 esp, 8
  00015	84 c0		 test	 al, al
  00017	75 2a		 jne	 SHORT $LN6@operator
  00019	57		 push	 edi
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  00020	83 c4 08	 add	 esp, 8
  00023	84 c0		 test	 al, al
  00025	75 14		 jne	 SHORT $LN5@operator
  00027	8d 46 18	 lea	 eax, DWORD PTR [esi+24]
  0002a	50		 push	 eax
  0002b	8d 47 18	 lea	 eax, DWORD PTR [edi+24]
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  00034	83 c4 08	 add	 esp, 8
  00037	84 c0		 test	 al, al
  00039	75 08		 jne	 SHORT $LN6@operator
$LN5@operator:
  0003b	5f		 pop	 edi
  0003c	32 c0		 xor	 al, al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2466 :     }

  0003e	5e		 pop	 esi
  0003f	5d		 pop	 ebp
  00040	c2 08 00	 ret	 8
$LN6@operator:
  00043	5f		 pop	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 506  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  00044	b0 01		 mov	 al, 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2466 :     }

  00046	5e		 pop	 esi
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
??R?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@QBE_NABU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@0@Z ENDP ; std::less<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator()
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree@V?$_Tmap_traits@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::~_Tree<std::_Tmap_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >, COMDAT
; _this$ = ecx

; 1080 :     ~_Tree() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	ff 70 04	 push	 DWORD PTR [eax+4]
  00008	56		 push	 esi
  00009	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  0000e	6a 58		 push	 88			; 00000058H
  00010	ff 36		 push	 DWORD PTR [esi]
  00012	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00017	83 c4 08	 add	 esp, 8
  0001a	5e		 pop	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1087 :     }

  0001b	c3		 ret	 0
??1?$_Tree@V?$_Tmap_traits@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::~_Tree<std::_Tmap_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$map@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$map@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@@std@@QAE@XZ PROC ; std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >::~map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >
??1?$map@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@@std@@QAE@XZ ENDP ; std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >::~map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKK@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKK@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,unsigned long> > >::_Insert_node, COMDAT
; _this$ = ecx

; 646  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 647  :         ++_Mysize;
; 648  :         const auto _Head  = _Myhead;
; 649  :         _Newnode->_Parent = _Loc._Parent;

  00004	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0000e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00010	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00013	89 45 fc	 mov	 DWORD PTR __Head$1$[ebp], eax
  00016	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 650  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  00019	3b d0		 cmp	 edx, eax
  0001b	75 16		 jne	 SHORT $LN5@Insert_nod

; 651  :             _Head->_Left     = _Newnode;

  0001d	89 38		 mov	 DWORD PTR [eax], edi

; 652  :             _Head->_Parent   = _Newnode;

  0001f	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 653  :             _Head->_Right    = _Newnode;

  00022	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 712  :         return _Newnode;
; 713  :     }

  00025	8b c7		 mov	 eax, edi
  00027	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
  0002b	5f		 pop	 edi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 654  :             _Newnode->_Color = _Black; // the root is black
; 655  :             return _Newnode;
; 656  :         }
; 657  : 
; 658  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 659  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00033	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00037	75 0d		 jne	 SHORT $LN6@Insert_nod

; 660  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 661  :             _Loc._Parent->_Right = _Newnode;

  00039	89 7a 08	 mov	 DWORD PTR [edx+8], edi

; 662  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003c	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003f	75 0d		 jne	 SHORT $LN9@Insert_nod

; 663  :                 _Head->_Right = _Newnode;

  00041	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 664  :             }
; 665  :         } else { // add to left of _Loc._Parent

  00044	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 666  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 667  :             _Loc._Parent->_Left = _Newnode;

  00046	89 3a		 mov	 DWORD PTR [edx], edi

; 668  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00048	3b 10		 cmp	 edx, DWORD PTR [eax]
  0004a	75 02		 jne	 SHORT $LN9@Insert_nod

; 669  :                 _Head->_Left = _Newnode;

  0004c	89 38		 mov	 DWORD PTR [eax], edi
$LN9@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00051	8b c7		 mov	 eax, edi
  00053	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00057	0f 85 7d 01 00
	00		 jne	 $LN3@Insert_nod
  0005d	56		 push	 esi
  0005e	66 90		 npad	 2
$LL2@Insert_nod:

; 674  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00063	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	3b d1		 cmp	 edx, ecx
  0006a	0f 85 aa 00 00
	00		 jne	 $LN10@Insert_nod

; 675  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00070	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 676  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00073	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00077	0f 84 a3 00 00
	00		 je	 $LN76@Insert_nod

; 677  :                     _Pnode->_Parent->_Color          = _Black;
; 678  :                     _Parent_sibling->_Color          = _Black;
; 679  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 680  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 681  :                 } else { // parent's sibling has red and black children
; 682  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  0007d	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00080	3b c6		 cmp	 eax, esi
  00082	75 37		 jne	 SHORT $LN51@Insert_nod

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00084	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 683  :                         _Pnode = _Pnode->_Parent;

  00086	8b c2		 mov	 eax, edx

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00088	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0008b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00091	75 03		 jne	 SHORT $LN20@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  00093	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN20@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  00096	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00099	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  0009c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0009e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000a1	75 05		 jne	 SHORT $LN21@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  000a3	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  000a6	eb 0e		 jmp	 SHORT $LN24@Insert_nod
$LN21@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000a8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ab	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000ad	75 04		 jne	 SHORT $LN23@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  000af	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  000b1	eb 03		 jmp	 SHORT $LN24@Insert_nod
$LN23@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  000b3	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN24@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 479  :         _Wherenode->_Parent = _Pnode;

  000b8	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN51@Insert_nod:

; 684  :                         _Lrotate(_Pnode);
; 685  :                     }
; 686  : 
; 687  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 688  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c8	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 689  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 483  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000d2	8b 32		 mov	 esi, DWORD PTR [edx]

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  000d4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000d7	89 0a		 mov	 DWORD PTR [edx], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  000d9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000dc	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000e0	75 03		 jne	 SHORT $LN27@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  000e2	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN27@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  000e5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000e8	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  000eb	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000ed	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000f0	75 0b		 jne	 SHORT $LN28@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  000f2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  000f5	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  000f8	e9 cc 00 00 00	 jmp	 $LN75@Insert_nod
$LN28@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  000fd	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00100	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00103	75 0b		 jne	 SHORT $LN30@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00105	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00108	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  0010b	e9 b9 00 00 00	 jmp	 $LN75@Insert_nod
$LN30@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00110	89 31		 mov	 DWORD PTR [ecx], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00112	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  00115	e9 af 00 00 00	 jmp	 $LN75@Insert_nod
$LN10@Insert_nod:

; 692  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 693  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  0011a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0011e	75 1d		 jne	 SHORT $LN15@Insert_nod
$LN76@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00120	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1
  00124	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  00128	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0012e	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00132	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00135	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00138	e9 8f 00 00 00	 jmp	 $LN46@Insert_nod
$LN15@Insert_nod:

; 694  :                     _Pnode->_Parent->_Color          = _Black;
; 695  :                     _Parent_sibling->_Color          = _Black;
; 696  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 697  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 698  :                 } else { // parent's sibling has red and black children
; 699  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  0013d	8b 32		 mov	 esi, DWORD PTR [edx]
  0013f	3b c6		 cmp	 eax, esi
  00141	75 3a		 jne	 SHORT $LN39@Insert_nod

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00143	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 700  :                         _Pnode = _Pnode->_Parent;

  00146	8b c2		 mov	 eax, edx

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00148	89 08		 mov	 DWORD PTR [eax], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  0014a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0014d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00151	75 03		 jne	 SHORT $LN34@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  00153	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN34@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  00156	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00159	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  0015c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0015e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00161	75 05		 jne	 SHORT $LN35@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  00163	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00166	eb 0f		 jmp	 SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00168	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0016b	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0016e	75 05		 jne	 SHORT $LN37@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00170	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 496  :         } else {

  00173	eb 02		 jmp	 SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00175	89 31		 mov	 DWORD PTR [ecx], esi
$LN38@Insert_nod:

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00177	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 501  :         _Wherenode->_Parent = _Pnode;

  0017a	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN39@Insert_nod:

; 701  :                         _Rrotate(_Pnode);
; 702  :                     }
; 703  : 
; 704  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  0017d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 705  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00184	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00187	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0018a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 706  :                     _Lrotate(_Pnode->_Parent->_Parent);

  0018e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00191	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 461  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00194	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00197	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00199	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0019c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0019e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a2	75 03		 jne	 SHORT $LN41@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  001a4	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN41@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  001a7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001aa	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  001ad	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001af	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  001b2	75 05		 jne	 SHORT $LN42@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  001b4	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  001b7	eb 0e		 jmp	 SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001b9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001bc	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001be	75 04		 jne	 SHORT $LN44@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  001c2	eb 03		 jmp	 SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  001c4	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN45@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  001c7	89 16		 mov	 DWORD PTR [esi], edx
$LN75@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001c9	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN46@Insert_nod:
  001cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001cf	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001d3	0f 84 87 fe ff
	ff		 je	 $LL2@Insert_nod
  001d9	5e		 pop	 esi
$LN3@Insert_nod:

; 707  :                 }
; 708  :             }
; 709  :         }
; 710  : 
; 711  :         _Head->_Parent->_Color = _Black; // root is always black

  001da	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]
  001dd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e0	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 712  :         return _Newnode;
; 713  :     }

  001e4	8b c7		 mov	 eax, edi
  001e6	5f		 pop	 edi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKK@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,unsigned long> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >, COMDAT
; _this$ = ecx

; 1080 :     ~_Tree() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00009	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000d	75 21		 jne	 SHORT $LN7@Tree
  0000f	90		 npad	 1
$LL6@Tree:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00010	ff 76 08	 push	 DWORD PTR [esi+8]
  00013	8b cf		 mov	 ecx, edi
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKK@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,unsigned long> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,unsigned long>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 754  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001b	8b c6		 mov	 eax, esi

; 755  :     _Val         = static_cast<_Other&&>(_New_val);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  0001f	6a 18		 push	 24			; 00000018H
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0002e	74 e0		 je	 SHORT $LL6@Tree
$LN7@Tree:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00030	6a 18		 push	 24			; 00000018H
  00032	ff 37		 push	 DWORD PTR [edi]
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00039	83 c4 08	 add	 esp, 8
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1087 :     }

  0003e	c3		 ret	 0
??1?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
;	COMDAT ?GetHashCode@@YAKPBD@Z
_TEXT	SEGMENT
_pString$ = 8						; size = 4
?GetHashCode@@YAKPBD@Z PROC				; GetHashCode, COMDAT

; 239  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 240  : 	   unsigned long i,len;
; 241  : 	   unsigned long ch;
; 242  : 	   unsigned long result;
; 243  : 
; 244  : 	   len     = strlen( pString );

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _pString$[ebp]
  00007	8b cb		 mov	 ecx, ebx
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0000e	66 90		 npad	 2
$LL12@GetHashCod:
  00010	8a 01		 mov	 al, BYTE PTR [ecx]
  00012	41		 inc	 ecx
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL12@GetHashCod

; 245  : 	   result = 5381;

  00017	bf 05 15 00 00	 mov	 edi, 5381		; 00001505H
  0001c	be 00 00 00 00	 mov	 esi, 0
  00021	2b ca		 sub	 ecx, edx

; 246  : 	   for( i=0; i<len; i++ )

  00023	74 12		 je	 SHORT $LN13@GetHashCod
$LL8@GetHashCod:

; 247  : 	   {
; 248  : 	   	   ch = (unsigned long)pString[i];

  00025	0f be 14 1e	 movsx	 edx, BYTE PTR [esi+ebx]

; 249  : 	   	   result = ((result<< 5) + result) + ch; // hash * 33 + ch

  00029	8b c7		 mov	 eax, edi
  0002b	c1 e0 05	 shl	 eax, 5
  0002e	46		 inc	 esi
  0002f	03 f8		 add	 edi, eax
  00031	03 fa		 add	 edi, edx
  00033	3b f1		 cmp	 esi, ecx
  00035	72 ee		 jb	 SHORT $LL8@GetHashCod
$LN13@GetHashCod:

; 250  : 	   }
; 251  : 
; 252  : 	   return result;
; 253  : }

  00037	8b c7		 mov	 eax, edi
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?GetHashCode@@YAKPBD@Z ENDP				; GetHashCode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
;	COMDAT ?__SnapString@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@AAV12@@Z
_TEXT	SEGMENT
__Result$1$ = -32					; size = 4
$T1 = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_c_rstSrc$ = 8						; size = 4
_rstTemp$ = 12						; size = 4
?__SnapString@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@AAV12@@Z PROC ; __SnapString, COMDAT

; 179  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 55 08	 mov	 edx, DWORD PTR _c_rstSrc$[ebp]
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	8b 75 0c	 mov	 esi, DWORD PTR _rstTemp$[ebp]

; 180  : 	UINT uSrcLen=c_rstSrc.length();

  00018	8b 5a 10	 mov	 ebx, DWORD PTR [edx+16]
  0001b	57		 push	 edi

; 181  : 	if (uSrcLen<2)

  0001c	83 fb 02	 cmp	 ebx, 2
  0001f	0f 82 cf 00 00
	00		 jb	 $LN98@SnapString
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00025	8b 7a 14	 mov	 edi, DWORD PTR [edx+20]

; 2235 :         const value_type* _Result = _Bx._Buf;

  00028	8b c2		 mov	 eax, edx

; 2244 :         return _BUF_SIZE <= _Myres;

  0002a	83 ff 10	 cmp	 edi, 16			; 00000010H

; 2236 :         if (_Large_string_engaged()) {

  0002d	72 02		 jb	 SHORT $LN96@SnapString

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  0002f	8b 02		 mov	 eax, DWORD PTR [edx]
$LN96@SnapString:
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 184  : 	if (c_rstSrc[0]!='"')

  00031	80 38 22	 cmp	 BYTE PTR [eax], 34	; 00000022H
  00034	0f 85 ba 00 00
	00		 jne	 $LN98@SnapString
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2235 :         const value_type* _Result = _Bx._Buf;

  0003a	89 55 e0	 mov	 DWORD PTR __Result$1$[ebp], edx

; 2244 :         return _BUF_SIZE <= _Myres;

  0003d	83 ff 10	 cmp	 edi, 16			; 00000010H

; 2236 :         if (_Large_string_engaged()) {

  00040	72 05		 jb	 SHORT $LN97@SnapString

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  00042	8b 02		 mov	 eax, DWORD PTR [edx]
  00044	89 45 e0	 mov	 DWORD PTR __Result$1$[ebp], eax
$LN97@SnapString:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1520 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00047	8b 7d e0	 mov	 edi, DWORD PTR __Result$1$[ebp]
  0004a	8d 4b ff	 lea	 ecx, DWORD PTR [ebx-1]
  0004d	8b c1		 mov	 eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2293 :     size_type _Mysize = 0; // current length of string

  0004f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T1[ebp+16], 0
  00056	0f 57 c0	 xorps	 xmm0, xmm0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  00059	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR $T1[ebp+20], 0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00060	0f 11 45 e4	 movups	 XMMWORD PTR $T1[ebp], xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1520 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00064	80 7c 1f ff 22	 cmp	 BYTE PTR [edi+ebx-1], 34 ; 00000022H
  00069	0f 45 c3	 cmovne	 eax, ebx
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 193  : 	rstTemp=c_rstSrc.substr(uLeftCut, uRightCut-uLeftCut);

  0006c	48		 dec	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 70   :     return _Right < _Left ? _Right : _Left;

  0006d	3b c8		 cmp	 ecx, eax
  0006f	0f 42 c1	 cmovb	 eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00072	83 7a 14 10	 cmp	 DWORD PTR [edx+20], 16	; 00000010H

; 2236 :         if (_Large_string_engaged()) {

  00076	72 02		 jb	 SHORT $LN44@SnapString

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  00078	8b 12		 mov	 edx, DWORD PTR [edx]
$LN44@SnapString:

; 2511 :         _Construct<_Construct_strategy::_From_ptr>(

  0007a	50		 push	 eax
  0007b	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  0007e	50		 push	 eax
  0007f	8d 4d e4	 lea	 ecx, DWORD PTR $T1[ebp]
  00082	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>

; 2961 :         if (this == _STD addressof(_Right)) {

  00087	8d 45 e4	 lea	 eax, DWORD PTR $T1[ebp]
  0008a	3b f0		 cmp	 esi, eax
  0008c	74 23		 je	 SHORT $LN100@SnapString

; 2962 :             return *this;
; 2963 :         }
; 2964 : 
; 2965 :         auto& _Al                 = _Getal();
; 2966 :         auto& _Right_al           = _Right._Getal();
; 2967 :         constexpr auto _Pocma_val = _Choose_pocma_v<_Alty>;
; 2968 :         if constexpr (_Pocma_val == _Pocma_values::_Propagate_allocators) {
; 2969 :             if (_Al != _Right_al) {
; 2970 :                 // intentionally slams into noexcept on OOM, TRANSITION, VSO-466800
; 2971 :                 _Mypair._Myval2._Orphan_all();
; 2972 :                 _Mypair._Myval2._Reload_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Al), _GET_PROXY_ALLOCATOR(_Alty, _Right_al));
; 2973 :             }
; 2974 :         } else if constexpr (_Pocma_val == _Pocma_values::_No_propagate_allocators) {
; 2975 :             if (_Al != _Right_al) {
; 2976 :                 assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);
; 2977 :                 return *this;
; 2978 :             }
; 2979 :         }
; 2980 : 
; 2981 :         _Tidy_deallocate();

  0008e	8b ce		 mov	 ecx, esi
  00090	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate

; 2999 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00095	0f 10 45 e4	 movups	 xmm0, XMMWORD PTR $T1[ebp]

; 4822 :         _My_data._Myres  = _BUF_SIZE - 1;

  00099	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH

; 4823 :         _My_data._Activate_SSO_buffer();
; 4824 : 
; 4825 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4826 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0009e	c6 45 e4 00	 mov	 BYTE PTR $T1[ebp], 0

; 2999 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000a2	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  000a5	f3 0f 7e 45 f4	 movq	 xmm0, QWORD PTR $T1[ebp+16]
  000aa	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0

; 2961 :         if (this == _STD addressof(_Right)) {

  000af	eb 03		 jmp	 SHORT $LN66@SnapString
$LN100@SnapString:
  000b1	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp+20]
$LN66@SnapString:

; 2244 :         return _BUF_SIZE <= _Myres;

  000b4	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  000b7	72 28		 jb	 SHORT $LN79@SnapString
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000b9	8b 55 e4	 mov	 edx, DWORD PTR $T1[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  000bc	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000bd	8b c2		 mov	 eax, edx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000bf	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000c5	72 10		 jb	 SHORT $LN89@SnapString

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000c7	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000ca	83 c1 23	 add	 ecx, 35			; 00000023H
  000cd	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cf	83 c0 fc	 add	 eax, -4			; fffffffcH
  000d2	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000d5	77 30		 ja	 SHORT $LN112@SnapString
$LN89@SnapString:

; 265  :         ::operator delete(_Ptr, _Bytes);

  000d7	51		 push	 ecx
  000d8	52		 push	 edx
  000d9	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000de	83 c4 08	 add	 esp, 8
$LN79@SnapString:
  000e1	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 194  : 	return rstTemp;

  000e2	8b c6		 mov	 eax, esi

; 195  : }

  000e4	5e		 pop	 esi
  000e5	5b		 pop	 ebx
  000e6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e9	33 cd		 xor	 ecx, ebp
  000eb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f0	8b e5		 mov	 esp, ebp
  000f2	5d		 pop	 ebp
  000f3	c3		 ret	 0
$LN98@SnapString:
  000f4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f7	8b c2		 mov	 eax, edx
  000f9	5f		 pop	 edi
  000fa	5e		 pop	 esi
  000fb	33 cd		 xor	 ecx, ebp
  000fd	5b		 pop	 ebx
  000fe	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00103	8b e5		 mov	 esp, ebp
  00105	5d		 pop	 ebp
  00106	c3		 ret	 0
$LN112@SnapString:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00107	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN110@SnapString:
  0010c	cc		 int	 3
?__SnapString@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@AAV12@@Z ENDP ; __SnapString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCItemData@@@1@@Z
_TEXT	SEGMENT
__Loc$2 = -36						; size = 12
$T3 = -24						; size = 12
$T4 = -20						; size = 8
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Val$ = 12						; size = 4
??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCItemData@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CItemData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CItemData *> >,0> >::insert<0,0>, COMDAT
; _this$ = ecx

; 1230 :     pair<iterator, bool> insert(value_type&& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCItemData@@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx

; 1002 :             _Loc                = _Find_lower_bound(_Keyval);

  0002a	8b 5d 0c	 mov	 ebx, DWORD PTR __Val$[ebp]
  0002d	8d 45 e8	 lea	 eax, DWORD PTR $T3[ebp]
  00030	53		 push	 ebx
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CItemData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CItemData *> >,0> >::_Find_lower_bound<unsigned long>
  00037	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0003a	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0003e	66 0f d6 45 dc	 movq	 QWORD PTR __Loc$2[ebp], xmm0

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00043	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00047	75 0b		 jne	 SHORT $LN4@insert
  00049	8b 03		 mov	 eax, DWORD PTR [ebx]
  0004b	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  0004e	72 04		 jb	 SHORT $LN4@insert
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00050	32 d2		 xor	 dl, dl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1004 :                 return {_Loc._Bound, false};

  00052	eb 51		 jmp	 SHORT $LN79@insert
$LN4@insert:

; 1631 :         if (max_size() == _Get_scary()->_Mysize) {

  00054	81 7f 04 aa aa
	aa 0a		 cmp	 DWORD PTR [edi+4], 178956970 ; 0aaaaaaaH
  0005b	74 64		 je	 SHORT $LN94@insert

; 1008 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  0005d	8b 37		 mov	 esi, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1144 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  0005f	89 7d ec	 mov	 DWORD PTR $T4[ebp], edi

; 87   :         return ::operator new(_Bytes);

  00062	6a 18		 push	 24			; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00064	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1151 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0006b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+4], 0

; 87   :         return ::operator new(_Bytes);

  00072	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00077	8b 0b		 mov	 ecx, DWORD PTR [ebx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  00079	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  0007c	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  0007f	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00082	8b cf		 mov	 ecx, edi
  00084	50		 push	 eax
  00085	ff 75 e0	 push	 DWORD PTR __Loc$2[ebp+4]

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00088	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0008b	ff 75 dc	 push	 DWORD PTR __Loc$2[ebp]

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  0008e	89 30		 mov	 DWORD PTR [eax], esi

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  00090	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  00093	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 811  :         this->_Ptr->_Color = _Red;

  00096	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0009c	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CItemData *> > >::_Insert_node
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  000a1	8b c8		 mov	 ecx, eax
  000a3	b2 01		 mov	 dl, 1
$LN79@insert:
  000a5	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000a8	89 08		 mov	 DWORD PTR [eax], ecx
  000aa	88 50 04	 mov	 BYTE PTR [eax+4], dl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1233 :     }

  000ad	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b7	59		 pop	 ecx
  000b8	5f		 pop	 edi
  000b9	5e		 pop	 esi
  000ba	5b		 pop	 ebx
  000bb	8b e5		 mov	 esp, ebp
  000bd	5d		 pop	 ebp
  000be	c2 08 00	 ret	 8
$LN94@insert:

; 1632 :             _Throw_tree_length_error();

  000c1	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN92@insert:
  000c6	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCItemData@@@1@@Z$2:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR $T4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CItemData *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CItemData *>,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCItemData@@@1@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCItemData@@@1@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCItemData@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CItemData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CItemData *> >,0> >::insert<0,0>
; Function compile flags: /Ogtp
;	COMDAT ??_GCItemManager@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCItemManager@@UAEPAXI@Z PROC			; CItemManager::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CItemManager@@UAE@XZ	; CItemManager::~CItemManager
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 1c		 push	 28			; 0000001cH
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCItemManager@@UAEPAXI@Z ENDP			; CItemManager::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@CAXXZ PROC ; std::vector<CItemData *,std::allocator<CItemData *> >::_Xlength, COMDAT

; 2138 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@CAXXZ ENDP ; std::vector<CItemData *,std::allocator<CItemData *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CItemData *> > >::_Insert_node, COMDAT
; _this$ = ecx

; 646  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 647  :         ++_Mysize;
; 648  :         const auto _Head  = _Myhead;
; 649  :         _Newnode->_Parent = _Loc._Parent;

  00004	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0000e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00010	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00013	89 45 fc	 mov	 DWORD PTR __Head$1$[ebp], eax
  00016	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 650  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  00019	3b d0		 cmp	 edx, eax
  0001b	75 16		 jne	 SHORT $LN5@Insert_nod

; 651  :             _Head->_Left     = _Newnode;

  0001d	89 38		 mov	 DWORD PTR [eax], edi

; 652  :             _Head->_Parent   = _Newnode;

  0001f	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 653  :             _Head->_Right    = _Newnode;

  00022	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 712  :         return _Newnode;
; 713  :     }

  00025	8b c7		 mov	 eax, edi
  00027	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
  0002b	5f		 pop	 edi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 654  :             _Newnode->_Color = _Black; // the root is black
; 655  :             return _Newnode;
; 656  :         }
; 657  : 
; 658  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 659  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00033	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00037	75 0d		 jne	 SHORT $LN6@Insert_nod

; 660  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 661  :             _Loc._Parent->_Right = _Newnode;

  00039	89 7a 08	 mov	 DWORD PTR [edx+8], edi

; 662  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003c	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003f	75 0d		 jne	 SHORT $LN9@Insert_nod

; 663  :                 _Head->_Right = _Newnode;

  00041	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 664  :             }
; 665  :         } else { // add to left of _Loc._Parent

  00044	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 666  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 667  :             _Loc._Parent->_Left = _Newnode;

  00046	89 3a		 mov	 DWORD PTR [edx], edi

; 668  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00048	3b 10		 cmp	 edx, DWORD PTR [eax]
  0004a	75 02		 jne	 SHORT $LN9@Insert_nod

; 669  :                 _Head->_Left = _Newnode;

  0004c	89 38		 mov	 DWORD PTR [eax], edi
$LN9@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00051	8b c7		 mov	 eax, edi
  00053	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00057	0f 85 7d 01 00
	00		 jne	 $LN3@Insert_nod
  0005d	56		 push	 esi
  0005e	66 90		 npad	 2
$LL2@Insert_nod:

; 674  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00063	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	3b d1		 cmp	 edx, ecx
  0006a	0f 85 aa 00 00
	00		 jne	 $LN10@Insert_nod

; 675  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00070	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 676  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00073	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00077	0f 84 a3 00 00
	00		 je	 $LN76@Insert_nod

; 677  :                     _Pnode->_Parent->_Color          = _Black;
; 678  :                     _Parent_sibling->_Color          = _Black;
; 679  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 680  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 681  :                 } else { // parent's sibling has red and black children
; 682  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  0007d	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00080	3b c6		 cmp	 eax, esi
  00082	75 37		 jne	 SHORT $LN51@Insert_nod

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00084	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 683  :                         _Pnode = _Pnode->_Parent;

  00086	8b c2		 mov	 eax, edx

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00088	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0008b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00091	75 03		 jne	 SHORT $LN20@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  00093	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN20@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  00096	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00099	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  0009c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0009e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000a1	75 05		 jne	 SHORT $LN21@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  000a3	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  000a6	eb 0e		 jmp	 SHORT $LN24@Insert_nod
$LN21@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000a8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ab	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000ad	75 04		 jne	 SHORT $LN23@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  000af	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  000b1	eb 03		 jmp	 SHORT $LN24@Insert_nod
$LN23@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  000b3	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN24@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 479  :         _Wherenode->_Parent = _Pnode;

  000b8	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN51@Insert_nod:

; 684  :                         _Lrotate(_Pnode);
; 685  :                     }
; 686  : 
; 687  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 688  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c8	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 689  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 483  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000d2	8b 32		 mov	 esi, DWORD PTR [edx]

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  000d4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000d7	89 0a		 mov	 DWORD PTR [edx], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  000d9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000dc	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000e0	75 03		 jne	 SHORT $LN27@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  000e2	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN27@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  000e5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000e8	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  000eb	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000ed	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000f0	75 0b		 jne	 SHORT $LN28@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  000f2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  000f5	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  000f8	e9 cc 00 00 00	 jmp	 $LN75@Insert_nod
$LN28@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  000fd	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00100	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00103	75 0b		 jne	 SHORT $LN30@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00105	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00108	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  0010b	e9 b9 00 00 00	 jmp	 $LN75@Insert_nod
$LN30@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00110	89 31		 mov	 DWORD PTR [ecx], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00112	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  00115	e9 af 00 00 00	 jmp	 $LN75@Insert_nod
$LN10@Insert_nod:

; 692  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 693  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  0011a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0011e	75 1d		 jne	 SHORT $LN15@Insert_nod
$LN76@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00120	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1
  00124	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  00128	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0012e	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00132	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00135	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00138	e9 8f 00 00 00	 jmp	 $LN46@Insert_nod
$LN15@Insert_nod:

; 694  :                     _Pnode->_Parent->_Color          = _Black;
; 695  :                     _Parent_sibling->_Color          = _Black;
; 696  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 697  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 698  :                 } else { // parent's sibling has red and black children
; 699  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  0013d	8b 32		 mov	 esi, DWORD PTR [edx]
  0013f	3b c6		 cmp	 eax, esi
  00141	75 3a		 jne	 SHORT $LN39@Insert_nod

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00143	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 700  :                         _Pnode = _Pnode->_Parent;

  00146	8b c2		 mov	 eax, edx

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00148	89 08		 mov	 DWORD PTR [eax], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  0014a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0014d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00151	75 03		 jne	 SHORT $LN34@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  00153	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN34@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  00156	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00159	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  0015c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0015e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00161	75 05		 jne	 SHORT $LN35@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  00163	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00166	eb 0f		 jmp	 SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00168	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0016b	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0016e	75 05		 jne	 SHORT $LN37@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00170	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 496  :         } else {

  00173	eb 02		 jmp	 SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00175	89 31		 mov	 DWORD PTR [ecx], esi
$LN38@Insert_nod:

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00177	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 501  :         _Wherenode->_Parent = _Pnode;

  0017a	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN39@Insert_nod:

; 701  :                         _Rrotate(_Pnode);
; 702  :                     }
; 703  : 
; 704  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  0017d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 705  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00184	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00187	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0018a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 706  :                     _Lrotate(_Pnode->_Parent->_Parent);

  0018e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00191	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 461  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00194	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00197	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00199	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0019c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0019e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a2	75 03		 jne	 SHORT $LN41@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  001a4	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN41@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  001a7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001aa	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  001ad	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001af	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  001b2	75 05		 jne	 SHORT $LN42@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  001b4	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  001b7	eb 0e		 jmp	 SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001b9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001bc	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001be	75 04		 jne	 SHORT $LN44@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  001c2	eb 03		 jmp	 SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  001c4	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN45@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  001c7	89 16		 mov	 DWORD PTR [esi], edx
$LN75@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001c9	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN46@Insert_nod:
  001cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001cf	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001d3	0f 84 87 fe ff
	ff		 je	 $LL2@Insert_nod
  001d9	5e		 pop	 esi
$LN3@Insert_nod:

; 707  :                 }
; 708  :             }
; 709  :         }
; 710  : 
; 711  :         _Head->_Parent->_Color = _Black; // root is always black

  001da	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]
  001dd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e0	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 712  :         return _Newnode;
; 713  :     }

  001e4	8b c7		 mov	 eax, edi
  001e6	5f		 pop	 edi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CItemData *> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
;	COMDAT ?MakeItemData@CItemManager@@QAEPAVCItemData@@K@Z
_TEXT	SEGMENT
__Loc$1 = -20						; size = 12
$T2 = -16						; size = 8
$T3 = -8						; size = 8
_dwIndex$ = 8						; size = 4
?MakeItemData@CItemManager@@QAEPAVCItemData@@K@Z PROC	; CItemManager::MakeItemData, COMDAT
; _this$ = ecx

; 78   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	53		 push	 ebx
  00007	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00008	8d 45 08	 lea	 eax, DWORD PTR _dwIndex$[ebp]
  0000b	50		 push	 eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 79   : 	TItemMap::iterator f = m_ItemMap.find(dwIndex);

  0000c	8d 79 04	 lea	 edi, DWORD PTR [ecx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0000f	8d 45 ec	 lea	 eax, DWORD PTR __Loc$1[ebp]
  00012	8b cf		 mov	 ecx, edi
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CItemData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CItemData *> >,0> >::_Find_lower_bound<unsigned long>

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0001a	8b 45 f4	 mov	 eax, DWORD PTR __Loc$1[ebp+8]
  0001d	8b 5d 08	 mov	 ebx, DWORD PTR _dwIndex$[ebp]
  00020	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00024	75 14		 jne	 SHORT $LN39@MakeItemDa
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  00026	3b 58 10	 cmp	 ebx, DWORD PTR [eax+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00029	72 0f		 jb	 SHORT $LN39@MakeItemDa

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0002b	39 07		 cmp	 DWORD PTR [edi], eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 81   : 	if (m_ItemMap.end() == f)

  0002d	74 0b		 je	 SHORT $LN39@MakeItemDa

; 88   : 	}
; 89   : 
; 90   : 	return f->second;

  0002f	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00032	5f		 pop	 edi

; 91   : }

  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
$LN39@MakeItemDa:
  0003a	56		 push	 esi

; 82   : 	{
; 83   : 		CItemData * pItemData = CItemData::New();

  0003b	e8 00 00 00 00	 call	 ?New@CItemData@@SAPAV1@XZ ; CItemData::New
  00040	8b f0		 mov	 esi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00042	89 5d f8	 mov	 DWORD PTR $T3[ebp], ebx
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 85   : 		m_ItemMap.insert(TItemMap::value_type(dwIndex, pItemData));

  00045	8d 45 f8	 lea	 eax, DWORD PTR $T3[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00048	89 75 fc	 mov	 DWORD PTR $T3[ebp+4], esi
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 85   : 		m_ItemMap.insert(TItemMap::value_type(dwIndex, pItemData));

  0004b	50		 push	 eax
  0004c	8d 45 f0	 lea	 eax, DWORD PTR $T2[ebp]
  0004f	8b cf		 mov	 ecx, edi
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCItemData@@@1@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CItemData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CItemData *> >,0> >::insert<0,0>

; 86   : 
; 87   : 		return pItemData;

  00057	8b c6		 mov	 eax, esi
  00059	5e		 pop	 esi
  0005a	5f		 pop	 edi

; 91   : }

  0005b	5b		 pop	 ebx
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c2 04 00	 ret	 4
?MakeItemData@CItemManager@@QAEPAVCItemData@@K@Z ENDP	; CItemManager::MakeItemData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\initializer_list
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\initializer_list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
;	COMDAT ?LoadItemScale@CItemManager@@QAE_NPBD@Z
_TEXT	SEGMENT
$T2 = -1404						; size = 12
$T3 = -1392						; size = 4
$T4 = -1388						; size = 4
$T5 = -1384						; size = 4
$T6 = -1380						; size = 4
$T7 = -1376						; size = 4
$T8 = -1372						; size = 4
$T9 = -1368						; size = 4
__Loc$10 = -1364					; size = 12
$T11 = -1352						; size = 8
_kTextFileLoader$ = -1344				; size = 16
$T12 = -1328						; size = 8
$T13 = -1320						; size = 8
$T14 = -1312						; size = 8
$T15 = -1304						; size = 8
$T16 = -1296						; size = 8
$T17 = -1288						; size = 8
$T18 = -1280						; size = 8
$T19 = -1272						; size = 8
$T20 = -1264						; size = 8
__Loc$21 = -1256					; size = 12
_strScaleY$1$ = -1244					; size = 4
$T22 = -1240						; size = 8
_strScaleZ$1$ = -1232					; size = 4
_this$GSCopy$1$ = -1228					; size = 4
tv6814 = -1224						; size = 4
_pvData$ = -1220					; size = 4
_pItemData$1$ = -1216					; size = 4
$T23 = -1216						; size = 4
_strScaleX$1$ = -1212					; size = 4
_this$ = -1212						; size = 4
__Ptr$1$ = -1208					; size = 4
_c_szFileName$GSCopy$1$ = -1204				; size = 4
__Ptr$1$ = -1200					; size = 4
_j$1$ = -1196						; size = 4
$T24 = -1192						; size = 4
_i$1$ = -1188						; size = 4
$T25 = -1184						; size = 4
__Ptr$1$ = -1184					; size = 4
_kTokenVector$ = -1180					; size = 12
$T26 = -1165						; size = 1
__First$1$ = -1164					; size = 4
__Result$1$ = -1164					; size = 4
__Result$1$ = -1164					; size = 4
__Result$2$ = -1164					; size = 4
__Result$2$ = -1164					; size = 4
__Result$1$ = -1164					; size = 4
__Myhead$1$ = -1160					; size = 4
__ULast$1$ = -1160					; size = 4
__ULast$1$ = -1160					; size = 4
__Result$2$ = -1160					; size = 4
__Count$1$ = -1160					; size = 4
__Count$1$ = -1160					; size = 4
__Count$1$ = -1160					; size = 4
__Count$1$ = -1160					; size = 4
__Count$1$ = -1160					; size = 4
__Result$2$ = -1160					; size = 4
__Result$2$ = -1160					; size = 4
_kFile$ = -1156						; size = 324
$T27 = -832						; size = 648
$T28 = -184						; size = 48
_strPositionZ$29 = -136					; size = 24
_strPositionY$30 = -112					; size = 24
_strPositionX$31 = -88					; size = 24
_strJob$32 = -64					; size = 24
_strSex$33 = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szFileName$ = 8					; size = 4
?LoadItemScale@CItemManager@@QAE_NPBD@Z PROC		; CItemManager::LoadItemScale, COMDAT
; _this$ = ecx

; 388  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadItemScale@CItemManager@@QAE_NPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 70 05 00
	00		 sub	 esp, 1392		; 00000570H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	89 8d 34 fb ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  00033	8b 7d 08	 mov	 edi, DWORD PTR _c_szFileName$[ebp]

; 389  : 	const VOID* pvData;
; 390  : 	CMappedFile kFile;

  00036	8d 8d 7c fb ff
	ff		 lea	 ecx, DWORD PTR _kFile$[ebp]
  0003c	89 bd 4c fb ff
	ff		 mov	 DWORD PTR _c_szFileName$GSCopy$1$[ebp], edi
  00042	c7 85 58 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR $T24[ebp], 0
  0004c	e8 00 00 00 00	 call	 ??0CMappedFile@@QAE@XZ	; CMappedFile::CMappedFile

; 391  : 	if (!CEterPackManager::Instance().Get(kFile, c_szFileName, &pvData))

  00051	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A ; CSingleton<CEterPackManager>::ms_singleton
  00057	8d 85 3c fb ff
	ff		 lea	 eax, DWORD PTR _pvData$[ebp]
  0005d	50		 push	 eax
  0005e	57		 push	 edi
  0005f	8d 85 7c fb ff
	ff		 lea	 eax, DWORD PTR _kFile$[ebp]
  00065	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ?Get@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z ; CEterPackManager::Get
  00072	84 c0		 test	 al, al
  00074	75 0b		 jne	 SHORT $LN9@LoadItemSc
  00076	88 85 73 fb ff
	ff		 mov	 BYTE PTR $T26[ebp], al
  0007c	e9 42 0d 00 00	 jmp	 $LN44@LoadItemSc
$LN9@LoadItemSc:

; 392  : 		return false;
; 393  : 
; 394  : 	CMemoryTextFileLoader kTextFileLoader;

  00081	8d 8d c0 fa ff
	ff		 lea	 ecx, DWORD PTR _kTextFileLoader$[ebp]
  00087	e8 00 00 00 00	 call	 ??0CMemoryTextFileLoader@@QAE@XZ ; CMemoryTextFileLoader::CMemoryTextFileLoader

; 395  : 	kTextFileLoader.Bind(kFile.Size(), pvData);

  0008c	ff b5 3c fb ff
	ff		 push	 DWORD PTR _pvData$[ebp]
  00092	8d 8d 7c fb ff
	ff		 lea	 ecx, DWORD PTR _kFile$[ebp]
  00098	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0009c	e8 00 00 00 00	 call	 ?Size@CMappedFile@@QAEKXZ ; CMappedFile::Size
  000a1	50		 push	 eax
  000a2	8d 8d c0 fa ff
	ff		 lea	 ecx, DWORD PTR _kTextFileLoader$[ebp]
  000a8	e8 00 00 00 00	 call	 ?Bind@CMemoryTextFileLoader@@QAEXHPBX@Z ; CMemoryTextFileLoader::Bind
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 398  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  000ad	c7 85 64 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _kTokenVector$[ebp], 0
  000b7	c7 85 68 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _kTokenVector$[ebp+4], 0
  000c1	c7 85 6c fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _kTokenVector$[ebp+8], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 398  : 	for (DWORD i = 0; i < kTextFileLoader.GetLineCount(); ++i)

  000cb	33 f6		 xor	 esi, esi
  000cd	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000d1	8d 8d c0 fa ff
	ff		 lea	 ecx, DWORD PTR _kTextFileLoader$[ebp]
  000d7	89 b5 5c fb ff
	ff		 mov	 DWORD PTR _i$1$[ebp], esi
  000dd	e8 00 00 00 00	 call	 ?GetLineCount@CMemoryTextFileLoader@@QAEKXZ ; CMemoryTextFileLoader::GetLineCount
  000e2	85 c0		 test	 eax, eax
  000e4	0f 84 bc 0c 00
	00		 je	 $LN1325@LoadItemSc

; 409  : 		static std::map<std::pair<std::string, std::string>, std::string> scaleMap = {

  000ea	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __tls_index
  000f0	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  000f6	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  000f9	89 85 38 fb ff
	ff		 mov	 DWORD PTR tv6814[ebp], eax
  000ff	90		 npad	 1
$LL4@LoadItemSc:

; 399  : 	{
; 400  : 		if (!kTextFileLoader.SplitLineByTab(i, &kTokenVector))

  00100	8d 85 64 fb ff
	ff		 lea	 eax, DWORD PTR _kTokenVector$[ebp]
  00106	50		 push	 eax
  00107	56		 push	 esi
  00108	8d 8d c0 fa ff
	ff		 lea	 ecx, DWORD PTR _kTextFileLoader$[ebp]
  0010e	e8 00 00 00 00	 call	 ?SplitLineByTab@CMemoryTextFileLoader@@QAE_NKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z ; CMemoryTextFileLoader::SplitLineByTab
  00113	84 c0		 test	 al, al
  00115	0f 84 71 0c 00
	00		 je	 $LN2@LoadItemSc
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0011b	8b 8d 68 fb ff
	ff		 mov	 ecx, DWORD PTR _kTokenVector$[ebp+4]
  00121	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00126	2b 8d 64 fb ff
	ff		 sub	 ecx, DWORD PTR _kTokenVector$[ebp]
  0012c	f7 e9		 imul	 ecx
  0012e	c1 fa 02	 sar	 edx, 2
  00131	8b c2		 mov	 eax, edx
  00133	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00136	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 403  : 		if (kTokenVector.size() < ITEMSCALE_REQ)

  00138	83 f8 06	 cmp	 eax, 6
  0013b	73 14		 jae	 SHORT $LN11@LoadItemSc

; 404  : 		{
; 405  : 			TraceError("LoadItemScale: invalid line %d (%s).", i, c_szFileName);

  0013d	57		 push	 edi
  0013e	56		 push	 esi
  0013f	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@JIKMIDCO@LoadItemScale?3?5invalid?5line?5?$CFd?5@
  00144	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00149	83 c4 0c	 add	 esp, 12			; 0000000cH

; 406  : 			continue;

  0014c	e9 3b 0c 00 00	 jmp	 $LN2@LoadItemSc
$LN11@LoadItemSc:

; 409  : 		static std::map<std::pair<std::string, std::string>, std::string> scaleMap = {

  00151	8b 85 38 fb ff
	ff		 mov	 eax, DWORD PTR tv6814[ebp]
  00157	8b 08		 mov	 ecx, DWORD PTR [eax]
  00159	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?5??LoadItemScale@CItemManager@@QAE_NPBD@Z@4HA
  0015e	3b 81 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[ecx]
  00164	0f 8f 8c 0c 00
	00		 jg	 $LN1338@LoadItemSc
$LN1326@LoadItemSc:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1889 :         return _My_data._Myfirst[_Pos];

  0016a	8b 85 64 fb ff
	ff		 mov	 eax, DWORD PTR _kTokenVector$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 420  : 		std::string strJob = kTokenVector[ITEMSCALE_JOB];

  00170	8d 4d c0	 lea	 ecx, DWORD PTR _strJob$32[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1889 :         return _My_data._Myfirst[_Pos];

  00173	83 c0 18	 add	 eax, 24			; 00000018H
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 420  : 		std::string strJob = kTokenVector[ITEMSCALE_JOB];

  00176	50		 push	 eax
  00177	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1889 :         return _My_data._Myfirst[_Pos];

  0017c	8b 85 64 fb ff
	ff		 mov	 eax, DWORD PTR _kTokenVector$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 421  : 		std::string strSex = kTokenVector[ITEMSCALE_SEX];

  00182	8d 4d d8	 lea	 ecx, DWORD PTR _strSex$33[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1889 :         return _My_data._Myfirst[_Pos];

  00185	83 c0 30	 add	 eax, 48			; 00000030H
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 420  : 		std::string strJob = kTokenVector[ITEMSCALE_JOB];

  00188	c6 45 fc 1b	 mov	 BYTE PTR __$EHRec$[ebp+8], 27 ; 0000001bH

; 421  : 		std::string strSex = kTokenVector[ITEMSCALE_SEX];

  0018c	50		 push	 eax
  0018d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00192	83 7d d4 10	 cmp	 DWORD PTR _strJob$32[ebp+20], 16 ; 00000010H

; 2226 :         value_type* _Result = _Bx._Buf;

  00196	8d 7d c0	 lea	 edi, DWORD PTR _strJob$32[ebp]

; 2227 :         if (_Large_string_engaged()) {

  00199	8b 75 c0	 mov	 esi, DWORD PTR _strJob$32[ebp]

; 2226 :         value_type* _Result = _Bx._Buf;

  0019c	8d 55 c0	 lea	 edx, DWORD PTR _strJob$32[ebp]

; 2227 :         if (_Large_string_engaged()) {

  0019f	8b 45 d0	 mov	 eax, DWORD PTR _strJob$32[ebp+16]

; 2244 :         return _BUF_SIZE <= _Myres;

  001a2	0f 93 c1	 setae	 cl

; 2227 :         if (_Large_string_engaged()) {

  001a5	0f 43 fe	 cmovae	 edi, esi
  001a8	84 c9		 test	 cl, cl
  001aa	74 04		 je	 SHORT $LN707@LoadItemSc

; 2228 :             _Result = _Unfancy(_Bx._Ptr);

  001ac	03 c6		 add	 eax, esi
  001ae	eb 05		 jmp	 SHORT $LN1334@LoadItemSc
$LN707@LoadItemSc:

; 3925 :         return iterator(

  001b0	03 c2		 add	 eax, edx

; 2226 :         value_type* _Result = _Bx._Buf;

  001b2	8d 75 c0	 lea	 esi, DWORD PTR _strJob$32[ebp]
$LN1334@LoadItemSc:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 3445 :     for (; _UFirst != _ULast; ++_UFirst, (void) ++_UDest) {

  001b5	89 85 78 fb ff
	ff		 mov	 DWORD PTR __ULast$1$[ebp], eax
  001bb	3b f0		 cmp	 esi, eax
  001bd	74 1a		 je	 SHORT $LN728@LoadItemSc
  001bf	2b fe		 sub	 edi, esi
$LL729@LoadItemSc:

; 3446 :         *_UDest = _Func(*_UFirst);

  001c1	0f be 06	 movsx	 eax, BYTE PTR [esi]
  001c4	50		 push	 eax
  001c5	e8 00 00 00 00	 call	 _toupper
  001ca	88 04 37	 mov	 BYTE PTR [edi+esi], al
  001cd	83 c4 04	 add	 esp, 4
  001d0	46		 inc	 esi
  001d1	3b b5 78 fb ff
	ff		 cmp	 esi, DWORD PTR __ULast$1$[ebp]
  001d7	75 e8		 jne	 SHORT $LL729@LoadItemSc
$LN728@LoadItemSc:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  001d9	83 7d ec 10	 cmp	 DWORD PTR _strSex$33[ebp+20], 16 ; 00000010H

; 2226 :         value_type* _Result = _Bx._Buf;

  001dd	8d 7d d8	 lea	 edi, DWORD PTR _strSex$33[ebp]

; 2227 :         if (_Large_string_engaged()) {

  001e0	8b 75 d8	 mov	 esi, DWORD PTR _strSex$33[ebp]

; 2226 :         value_type* _Result = _Bx._Buf;

  001e3	8d 55 d8	 lea	 edx, DWORD PTR _strSex$33[ebp]

; 2227 :         if (_Large_string_engaged()) {

  001e6	8b 45 e8	 mov	 eax, DWORD PTR _strSex$33[ebp+16]

; 2244 :         return _BUF_SIZE <= _Myres;

  001e9	0f 93 c1	 setae	 cl

; 2227 :         if (_Large_string_engaged()) {

  001ec	0f 43 fe	 cmovae	 edi, esi
  001ef	84 c9		 test	 cl, cl
  001f1	74 04		 je	 SHORT $LN747@LoadItemSc

; 2228 :             _Result = _Unfancy(_Bx._Ptr);

  001f3	03 c6		 add	 eax, esi
  001f5	eb 05		 jmp	 SHORT $LN1335@LoadItemSc
$LN747@LoadItemSc:

; 3925 :         return iterator(

  001f7	03 c2		 add	 eax, edx

; 2226 :         value_type* _Result = _Bx._Buf;

  001f9	8d 75 d8	 lea	 esi, DWORD PTR _strSex$33[ebp]
$LN1335@LoadItemSc:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 3445 :     for (; _UFirst != _ULast; ++_UFirst, (void) ++_UDest) {

  001fc	89 85 78 fb ff
	ff		 mov	 DWORD PTR __ULast$1$[ebp], eax
  00202	3b f0		 cmp	 esi, eax
  00204	74 22		 je	 SHORT $LN768@LoadItemSc
  00206	2b fe		 sub	 edi, esi
  00208	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL769@LoadItemSc:

; 3446 :         *_UDest = _Func(*_UFirst);

  00210	0f be 06	 movsx	 eax, BYTE PTR [esi]
  00213	50		 push	 eax
  00214	e8 00 00 00 00	 call	 _toupper
  00219	88 04 37	 mov	 BYTE PTR [edi+esi], al
  0021c	83 c4 04	 add	 esp, 4
  0021f	46		 inc	 esi
  00220	3b b5 78 fb ff
	ff		 cmp	 esi, DWORD PTR __ULast$1$[ebp]
  00226	75 e8		 jne	 SHORT $LL769@LoadItemSc
$LN768@LoadItemSc:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1889 :         return _My_data._Myfirst[_Pos];

  00228	8b 85 64 fb ff
	ff		 mov	 eax, DWORD PTR _kTokenVector$[ebp]
  0022e	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00231	0f 11 45 a8	 movups	 XMMWORD PTR _strPositionX$31[ebp], xmm0

; 2630 :             _My_data._Myres  = _BUF_SIZE - 1;

  00235	c7 45 bc 0f 00
	00 00		 mov	 DWORD PTR _strPositionX$31[ebp+20], 15 ; 0000000fH

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0023c	66 c7 45 a8 30
	00		 mov	 WORD PTR _strPositionX$31[ebp], 48 ; 00000030H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1889 :         return _My_data._Myfirst[_Pos];

  00242	8d 48 48	 lea	 ecx, DWORD PTR [eax+72]
  00245	89 8d 44 fb ff
	ff		 mov	 DWORD PTR _strScaleX$1$[ebp], ecx
  0024b	8d 48 60	 lea	 ecx, DWORD PTR [eax+96]
  0024e	83 c0 78	 add	 eax, 120		; 00000078H
  00251	89 8d 24 fb ff
	ff		 mov	 DWORD PTR _strScaleY$1$[ebp], ecx
  00257	89 85 30 fb ff
	ff		 mov	 DWORD PTR _strScaleZ$1$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2629 :             _My_data._Mysize = _Count;

  0025d	b8 01 00 00 00	 mov	 eax, 1
  00262	89 45 b8	 mov	 DWORD PTR _strPositionX$31[ebp+16], eax

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00265	0f 11 45 90	 movups	 XMMWORD PTR _strPositionY$30[ebp], xmm0

; 2629 :             _My_data._Mysize = _Count;

  00269	89 45 a0	 mov	 DWORD PTR _strPositionY$30[ebp+16], eax

; 2630 :             _My_data._Myres  = _BUF_SIZE - 1;

  0026c	c7 45 a4 0f 00
	00 00		 mov	 DWORD PTR _strPositionY$30[ebp+20], 15 ; 0000000fH

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00273	66 c7 45 90 30
	00		 mov	 WORD PTR _strPositionY$30[ebp], 48 ; 00000030H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00279	8d 45 c0	 lea	 eax, DWORD PTR _strJob$32[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 429  : 		std::string strPositionY = "0";

  0027c	c6 45 fc 1e	 mov	 BYTE PTR __$EHRec$[ebp+8], 30 ; 0000001eH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00280	50		 push	 eax
  00281	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR $T28[ebp]
  00287	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0028c	8d 45 d8	 lea	 eax, DWORD PTR _strSex$33[ebp]
  0028f	c6 45 fc 1f	 mov	 BYTE PTR __$EHRec$[ebp+8], 31 ; 0000001fH
  00293	50		 push	 eax
  00294	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR $T28[ebp+24]
  0029a	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 562  :     return _Mypair(_STD forward<_Ty1>(_Val1), _STD forward<_Ty2>(_Val2));

  0029f	83 8d 58 fb ff
	ff 01		 or	 DWORD PTR $T24[ebp], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map

; 198  :         const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);

  002a6	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR $T28[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 430  : 		std::string strPositionZ = scaleMap[std::make_pair(strJob, strSex)];

  002ac	c6 45 fc 20	 mov	 BYTE PTR __$EHRec$[ebp+8], 32 ; 00000020H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map

; 198  :         const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);

  002b0	50		 push	 eax
  002b1	8d 85 ac fa ff
	ff		 lea	 eax, DWORD PTR __Loc$10[ebp]
  002b7	b9 00 00 00 00	 mov	 ecx, OFFSET ?scaleMap@?5??LoadItemScale@CItemManager@@QAE_NPBD@Z@4V?$map@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@@std@@A
  002bc	50		 push	 eax
  002bd	e8 00 00 00 00	 call	 ??$_Find_lower_bound@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@?$_Tree@V?$_Tmap_traits@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@1@ABU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@@Z ; std::_Tree<std::_Tmap_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Find_lower_bound<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  002c2	8b bd b4 fa ff
	ff		 mov	 edi, DWORD PTR __Loc$10[ebp+8]
  002c8	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  002cc	75 4a		 jne	 SHORT $LN523@LoadItemSc
  002ce	8d 77 10	 lea	 esi, DWORD PTR [edi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 506  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  002d1	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR $T28[ebp]
  002d7	56		 push	 esi
  002d8	50		 push	 eax
  002d9	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  002de	83 c4 08	 add	 esp, 8
  002e1	84 c0		 test	 al, al
  002e3	75 33		 jne	 SHORT $LN523@LoadItemSc
  002e5	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR $T28[ebp]
  002eb	50		 push	 eax
  002ec	56		 push	 esi
  002ed	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  002f2	83 c4 08	 add	 esp, 8
  002f5	84 c0		 test	 al, al
  002f7	0f 85 31 01 00
	00		 jne	 $LN522@LoadItemSc
  002fd	8d 46 18	 lea	 eax, DWORD PTR [esi+24]
  00300	50		 push	 eax
  00301	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR $T28[ebp+24]
  00307	50		 push	 eax
  00308	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  0030d	83 c4 08	 add	 esp, 8
  00310	84 c0		 test	 al, al
  00312	0f 84 16 01 00
	00		 je	 $LN522@LoadItemSc
$LN523@LoadItemSc:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1631 :         if (max_size() == _Get_scary()->_Mysize) {

  00318	81 3d 04 00 00
	00 2e ba e8 02	 cmp	 DWORD PTR ?scaleMap@?5??LoadItemScale@CItemManager@@QAE_NPBD@Z@4V?$map@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@@std@@A+4, 48806446 ; 02e8ba2eH
  00322	0f 84 e2 0f 00
	00		 je	 $LN1271@LoadItemSc
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map

; 206  :         const auto _Inserted = _Tree_temp_node<_Alnode>(_Mybase::_Getal(), _Scary->_Myhead, piecewise_construct,

  00328	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?scaleMap@?5??LoadItemScale@CItemManager@@QAE_NPBD@Z@4V?$map@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@@std@@A
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1144 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  0032e	c7 85 d0 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR $T12[ebp], OFFSET ?scaleMap@?5??LoadItemScale@CItemManager@@QAE_NPBD@Z@4V?$map@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@@std@@A

; 87   :         return ::operator new(_Bytes);

  00338	6a 58		 push	 88			; 00000058H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  0033a	c6 45 fc 21	 mov	 BYTE PTR __$EHRec$[ebp+8], 33 ; 00000021H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1151 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0033e	c7 85 d4 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR $T12[ebp+4], 0

; 87   :         return ::operator new(_Bytes);

  00348	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0034d	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 787  :     }

  00350	c6 45 fc 20	 mov	 BYTE PTR __$EHRec$[ebp+8], 32 ; 00000020H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  00354	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 755  :     _Val         = static_cast<_Other&&>(_New_val);

  00357	c7 85 d4 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR $T12[ebp+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map

; 212  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00361	b9 00 00 00 00	 mov	 ecx, OFFSET ?scaleMap@?5??LoadItemScale@CItemManager@@QAE_NPBD@Z@4V?$map@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@@std@@A
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00366	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  0036a	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  00371	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], 0

; 2999 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00378	0f 10 85 48 ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T28[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map

; 212  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0037f	50		 push	 eax
  00380	ff b5 b0 fa ff
	ff		 push	 DWORD PTR __Loc$10[ebp+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2999 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00386	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0
  0038a	f3 0f 7e 85 58
	ff ff ff	 movq	 xmm0, QWORD PTR $T28[ebp+16]
  00392	66 0f d6 40 20	 movq	 QWORD PTR [eax+32], xmm0
  00397	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map

; 212  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0039a	ff b5 ac fa ff
	ff		 push	 DWORD PTR __Loc$10[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4821 :         _My_data._Mysize = 0;

  003a0	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T28[ebp+16], 0

; 4822 :         _My_data._Myres  = _BUF_SIZE - 1;

  003aa	c7 85 5c ff ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T28[ebp+20], 15 ; 0000000fH

; 4823 :         _My_data._Activate_SSO_buffer();
; 4824 : 
; 4825 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4826 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  003b4	c6 85 48 ff ff
	ff 00		 mov	 BYTE PTR $T28[ebp], 0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  003bb	0f 11 40 28	 movups	 XMMWORD PTR [eax+40], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  003bf	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [eax+56], 0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  003c6	c7 40 3c 00 00
	00 00		 mov	 DWORD PTR [eax+60], 0

; 2999 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  003cd	0f 10 85 60 ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T28[ebp+24]
  003d4	0f 11 40 28	 movups	 XMMWORD PTR [eax+40], xmm0
  003d8	f3 0f 7e 85 70
	ff ff ff	 movq	 xmm0, QWORD PTR $T28[ebp+40]
  003e0	66 0f d6 40 38	 movq	 QWORD PTR [eax+56], xmm0
  003e5	0f 57 c0	 xorps	 xmm0, xmm0

; 4821 :         _My_data._Mysize = 0;

  003e8	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T28[ebp+40], 0

; 4822 :         _My_data._Myres  = _BUF_SIZE - 1;

  003f2	c7 85 74 ff ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T28[ebp+44], 15 ; 0000000fH

; 4823 :         _My_data._Activate_SSO_buffer();
; 4824 : 
; 4825 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4826 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  003fc	c6 85 60 ff ff
	ff 00		 mov	 BYTE PTR $T28[ebp+24], 0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00403	0f 11 40 40	 movups	 XMMWORD PTR [eax+64], xmm0

; 4821 :         _My_data._Mysize = 0;

  00407	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0

; 4822 :         _My_data._Myres  = _BUF_SIZE - 1;

  0040e	c7 40 54 0f 00
	00 00		 mov	 DWORD PTR [eax+84], 15	; 0000000fH

; 4823 :         _My_data._Activate_SSO_buffer();
; 4824 : 
; 4825 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4826 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00415	c6 40 40 00	 mov	 BYTE PTR [eax+64], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  00419	89 30		 mov	 DWORD PTR [eax], esi

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  0041b	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  0041e	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 811  :         this->_Ptr->_Color = _Red;

  00421	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map

; 212  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00427	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Insert_node
  0042c	8b f8		 mov	 edi, eax
$LN522@LoadItemSc:

; 176  :         return _Try_emplace(_STD move(_Keyval)).first->_Myval.second;

  0042e	8d 47 40	 lea	 eax, DWORD PTR [edi+64]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 430  : 		std::string strPositionZ = scaleMap[std::make_pair(strJob, strSex)];

  00431	50		 push	 eax
  00432	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _strPositionZ$29[ebp]
  00438	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0043d	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR $T28[ebp]
  00443	c6 45 fc 23	 mov	 BYTE PTR __$EHRec$[ebp+8], 35 ; 00000023H
  00447	e8 00 00 00 00	 call	 ??1?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@XZ
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0044c	8b 8d 68 fb ff
	ff		 mov	 ecx, DWORD PTR _kTokenVector$[ebp+4]
  00452	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00457	8b b5 64 fb ff
	ff		 mov	 esi, DWORD PTR _kTokenVector$[ebp]
  0045d	2b ce		 sub	 ecx, esi
  0045f	f7 e9		 imul	 ecx
  00461	c1 fa 02	 sar	 edx, 2
  00464	8b c2		 mov	 eax, edx
  00466	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00469	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 431  : 		if (kTokenVector.size() == ITEMSCALE_NUM)

  0046b	83 f8 09	 cmp	 eax, 9
  0046e	75 30		 jne	 SHORT $LN12@LoadItemSc
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1889 :         return _My_data._Myfirst[_Pos];

  00470	8d 86 90 00 00
	00		 lea	 eax, DWORD PTR [esi+144]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 433  : 			strPositionX = kTokenVector[ITEMSCALE_POSITION_X];

  00476	50		 push	 eax
  00477	8d 4d a8	 lea	 ecx, DWORD PTR _strPositionX$31[ebp]
  0047a	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1889 :         return _My_data._Myfirst[_Pos];

  0047f	8b 85 64 fb ff
	ff		 mov	 eax, DWORD PTR _kTokenVector$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 434  : 			strPositionY = kTokenVector[ITEMSCALE_POSITION_Y];

  00485	8d 4d 90	 lea	 ecx, DWORD PTR _strPositionY$30[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1889 :         return _My_data._Myfirst[_Pos];

  00488	05 a8 00 00 00	 add	 eax, 168		; 000000a8H
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 434  : 			strPositionY = kTokenVector[ITEMSCALE_POSITION_Y];

  0048d	50		 push	 eax
  0048e	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1889 :         return _My_data._Myfirst[_Pos];

  00493	8b 85 64 fb ff
	ff		 mov	 eax, DWORD PTR _kTokenVector$[ebp]
  00499	05 c0 00 00 00	 add	 eax, 192		; 000000c0H
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 436  : 		}

  0049e	eb 0b		 jmp	 SHORT $LN1336@LoadItemSc
$LN12@LoadItemSc:

; 437  : 		else if (kTokenVector.size() == ITEMSCALE_AURA_NUM)

  004a0	83 f8 07	 cmp	 eax, 7
  004a3	75 18		 jne	 SHORT $LN14@LoadItemSc
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1889 :         return _My_data._Myfirst[_Pos];

  004a5	8d 86 90 00 00
	00		 lea	 eax, DWORD PTR [esi+144]
$LN1336@LoadItemSc:
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 443  : 		for (int j = 0; j < 5; ++j)

  004ab	50		 push	 eax
  004ac	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _strPositionZ$29[ebp]
  004b2	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  004b7	8b b5 64 fb ff
	ff		 mov	 esi, DWORD PTR _kTokenVector$[ebp]
$LN14@LoadItemSc:
  004bd	8b 45 a8	 mov	 eax, DWORD PTR _strPositionX$31[ebp]
  004c0	33 ff		 xor	 edi, edi
  004c2	89 85 60 fb ff
	ff		 mov	 DWORD PTR __Ptr$1$[ebp], eax
  004c8	8b 45 90	 mov	 eax, DWORD PTR _strPositionY$30[ebp]
  004cb	89 85 50 fb ff
	ff		 mov	 DWORD PTR __Ptr$1$[ebp], eax
  004d1	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _strPositionZ$29[ebp]
  004d7	89 bd 54 fb ff
	ff		 mov	 DWORD PTR _j$1$[ebp], edi
  004dd	89 85 48 fb ff
	ff		 mov	 DWORD PTR __Ptr$1$[ebp], eax
$LL8@LoadItemSc:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  004e3	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  004e7	72 02		 jb	 SHORT $LN129@LoadItemSc

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  004e9	8b 36		 mov	 esi, DWORD PTR [esi]
$LN129@LoadItemSc:
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 445  : 			CItemData * pItemData = MakeItemData(atoi(kTokenVector[ITEMSCALE_VNUM].c_str()) + j);

  004eb	56		 push	 esi
  004ec	e8 00 00 00 00	 call	 __atoi64
  004f1	8b 8d 34 fb ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  004f7	83 c4 04	 add	 esp, 4
  004fa	03 c7		 add	 eax, edi
  004fc	50		 push	 eax
  004fd	e8 00 00 00 00	 call	 ?MakeItemData@CItemManager@@QAEPAVCItemData@@K@Z ; CItemManager::MakeItemData
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2620 :         if (_Count > max_size()) {

  00502	8b 4d 88	 mov	 ecx, DWORD PTR _strPositionZ$29[ebp+16]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 446  : 			pItemData->SetItemScale(strJob, strSex, strScaleX, strScaleY, strScaleZ, strPositionX, strPositionY, strPositionZ);

  00505	83 ec 18	 sub	 esp, 24			; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  00508	83 7d 8c 10	 cmp	 DWORD PTR _strPositionZ$29[ebp+20], 16 ; 00000010H
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 446  : 			pItemData->SetItemScale(strJob, strSex, strScaleX, strScaleY, strScaleZ, strPositionX, strPositionY, strPositionZ);

  0050c	8b fc		 mov	 edi, esp
  0050e	89 85 40 fb ff
	ff		 mov	 DWORD PTR _pItemData$1$[ebp], eax
  00514	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2235 :         const value_type* _Result = _Bx._Buf;

  00517	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _strPositionZ$29[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 446  : 			pItemData->SetItemScale(strJob, strSex, strScaleX, strScaleY, strScaleZ, strPositionX, strPositionY, strPositionZ);

  0051d	89 a5 90 fa ff
	ff		 mov	 DWORD PTR $T3[ebp], esp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  00523	0f 43 85 48 fb
	ff ff		 cmovae	 eax, DWORD PTR __Ptr$1$[ebp]
  0052a	89 85 78 fb ff
	ff		 mov	 DWORD PTR __Result$2$[ebp], eax

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00530	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  00533	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  0053a	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2620 :         if (_Count > max_size()) {

  00541	81 f9 ff ff ff
	7f		 cmp	 ecx, 2147483647		; 7fffffffH
  00547	0f 87 a4 08 00
	00		 ja	 $LN1279@LoadItemSc

; 2621 :             _Xlen_string(); // result too long
; 2622 :         }
; 2623 : 
; 2624 :         auto& _Al       = _Getal();
; 2625 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 2626 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 2627 : 
; 2628 :         if (_Count < _BUF_SIZE) {

  0054d	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
  00554	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00557	73 0b		 jae	 SHORT $LN103@LoadItemSc

; 2629 :             _My_data._Mysize = _Count;

  00559	89 4f 10	 mov	 DWORD PTR [edi+16], ecx

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0055c	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0055f	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2647 :             return;

  00562	eb 75		 jmp	 SHORT $LN124@LoadItemSc
$LN103@LoadItemSc:

; 4714 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00564	8b f1		 mov	 esi, ecx
  00566	83 ce 0f	 or	 esi, 15			; 0000000fH
  00569	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4715 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0056f	76 17		 jbe	 SHORT $LN110@LoadItemSc

; 4716 :             return _Max;

  00571	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00576	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0057b	50		 push	 eax
  0057c	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00581	83 c4 04	 add	 esp, 4
  00584	8b c8		 mov	 ecx, eax
  00586	eb 35		 jmp	 SHORT $LN117@LoadItemSc
$LN110@LoadItemSc:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4723 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00588	83 fe 16	 cmp	 esi, 22			; 00000016H
  0058b	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00590	0f 42 f0	 cmovb	 esi, eax

; 2652 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00593	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00596	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0059b	72 0d		 jb	 SHORT $LN118@LoadItemSc

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0059d	50		 push	 eax
  0059e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  005a3	83 c4 04	 add	 esp, 4
  005a6	8b c8		 mov	 ecx, eax
  005a8	eb 13		 jmp	 SHORT $LN117@LoadItemSc
$LN118@LoadItemSc:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  005aa	85 c0		 test	 eax, eax
  005ac	74 0d		 je	 SHORT $LN119@LoadItemSc

; 87   :         return ::operator new(_Bytes);

  005ae	50		 push	 eax
  005af	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  005b4	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  005b7	8b c8		 mov	 ecx, eax
  005b9	eb 02		 jmp	 SHORT $LN117@LoadItemSc
$LN119@LoadItemSc:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  005bb	33 c9		 xor	 ecx, ecx
$LN117@LoadItemSc:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2657 :         _My_data._Mysize = _Count;

  005bd	8b 45 88	 mov	 eax, DWORD PTR _strPositionZ$29[ebp+16]
  005c0	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 2659 :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2660 :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 2661 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 2662 :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2663 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);
; 2664 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 2665 :         } else { // _Strat == _Construct_strategy::_From_string
; 2666 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);

  005c3	40		 inc	 eax

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  005c4	50		 push	 eax
  005c5	ff b5 78 fb ff
	ff		 push	 DWORD PTR __Result$2$[ebp]

; 2653 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  005cb	89 0f		 mov	 DWORD PTR [edi], ecx

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  005cd	51		 push	 ecx

; 2658 :         _My_data._Myres  = _New_capacity;

  005ce	89 77 14	 mov	 DWORD PTR [edi+20], esi

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  005d1	e8 00 00 00 00	 call	 _memcpy
  005d6	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN124@LoadItemSc:

; 2620 :         if (_Count > max_size()) {

  005d9	8b 4d a0	 mov	 ecx, DWORD PTR _strPositionY$30[ebp+16]

; 2235 :         const value_type* _Result = _Bx._Buf;

  005dc	8d 45 90	 lea	 eax, DWORD PTR _strPositionY$30[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 446  : 			pItemData->SetItemScale(strJob, strSex, strScaleX, strScaleY, strScaleZ, strPositionX, strPositionY, strPositionZ);

  005df	83 ec 18	 sub	 esp, 24			; 00000018H
  005e2	c6 45 fc 24	 mov	 BYTE PTR __$EHRec$[ebp+8], 36 ; 00000024H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  005e6	83 7d a4 10	 cmp	 DWORD PTR _strPositionY$30[ebp+20], 16 ; 00000010H
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 446  : 			pItemData->SetItemScale(strJob, strSex, strScaleX, strScaleY, strScaleZ, strPositionX, strPositionY, strPositionZ);

  005ea	8b fc		 mov	 edi, esp
  005ec	0f 57 c0	 xorps	 xmm0, xmm0
  005ef	89 a5 a8 fa ff
	ff		 mov	 DWORD PTR $T9[ebp], esp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  005f5	0f 43 85 50 fb
	ff ff		 cmovae	 eax, DWORD PTR __Ptr$1$[ebp]
  005fc	89 85 78 fb ff
	ff		 mov	 DWORD PTR __Result$2$[ebp], eax

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00602	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  00605	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  0060c	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2620 :         if (_Count > max_size()) {

  00613	81 f9 ff ff ff
	7f		 cmp	 ecx, 2147483647		; 7fffffffH
  00619	0f 87 d2 07 00
	00		 ja	 $LN1279@LoadItemSc

; 2621 :             _Xlen_string(); // result too long
; 2622 :         }
; 2623 : 
; 2624 :         auto& _Al       = _Getal();
; 2625 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 2626 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 2627 : 
; 2628 :         if (_Count < _BUF_SIZE) {

  0061f	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
  00626	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00629	73 0b		 jae	 SHORT $LN62@LoadItemSc

; 2629 :             _My_data._Mysize = _Count;

  0062b	89 4f 10	 mov	 DWORD PTR [edi+16], ecx

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0062e	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00631	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2647 :             return;

  00634	eb 75		 jmp	 SHORT $LN83@LoadItemSc
$LN62@LoadItemSc:

; 4714 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00636	8b f1		 mov	 esi, ecx
  00638	83 ce 0f	 or	 esi, 15			; 0000000fH
  0063b	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4715 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00641	76 17		 jbe	 SHORT $LN69@LoadItemSc

; 4716 :             return _Max;

  00643	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00648	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0064d	50		 push	 eax
  0064e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00653	83 c4 04	 add	 esp, 4
  00656	8b c8		 mov	 ecx, eax
  00658	eb 35		 jmp	 SHORT $LN76@LoadItemSc
$LN69@LoadItemSc:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4723 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0065a	83 fe 16	 cmp	 esi, 22			; 00000016H
  0065d	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00662	0f 42 f0	 cmovb	 esi, eax

; 2652 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00665	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00668	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0066d	72 0d		 jb	 SHORT $LN77@LoadItemSc

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0066f	50		 push	 eax
  00670	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00675	83 c4 04	 add	 esp, 4
  00678	8b c8		 mov	 ecx, eax
  0067a	eb 13		 jmp	 SHORT $LN76@LoadItemSc
$LN77@LoadItemSc:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  0067c	85 c0		 test	 eax, eax
  0067e	74 0d		 je	 SHORT $LN78@LoadItemSc

; 87   :         return ::operator new(_Bytes);

  00680	50		 push	 eax
  00681	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00686	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  00689	8b c8		 mov	 ecx, eax
  0068b	eb 02		 jmp	 SHORT $LN76@LoadItemSc
$LN78@LoadItemSc:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  0068d	33 c9		 xor	 ecx, ecx
$LN76@LoadItemSc:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2657 :         _My_data._Mysize = _Count;

  0068f	8b 45 a0	 mov	 eax, DWORD PTR _strPositionY$30[ebp+16]
  00692	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 2659 :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2660 :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 2661 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 2662 :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2663 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);
; 2664 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 2665 :         } else { // _Strat == _Construct_strategy::_From_string
; 2666 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);

  00695	40		 inc	 eax

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00696	50		 push	 eax
  00697	ff b5 78 fb ff
	ff		 push	 DWORD PTR __Result$2$[ebp]

; 2653 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0069d	89 0f		 mov	 DWORD PTR [edi], ecx

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0069f	51		 push	 ecx

; 2658 :         _My_data._Myres  = _New_capacity;

  006a0	89 77 14	 mov	 DWORD PTR [edi+20], esi

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  006a3	e8 00 00 00 00	 call	 _memcpy
  006a8	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN83@LoadItemSc:

; 2620 :         if (_Count > max_size()) {

  006ab	8b 4d b8	 mov	 ecx, DWORD PTR _strPositionX$31[ebp+16]

; 2235 :         const value_type* _Result = _Bx._Buf;

  006ae	8d 45 a8	 lea	 eax, DWORD PTR _strPositionX$31[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 446  : 			pItemData->SetItemScale(strJob, strSex, strScaleX, strScaleY, strScaleZ, strPositionX, strPositionY, strPositionZ);

  006b1	83 ec 18	 sub	 esp, 24			; 00000018H
  006b4	c6 45 fc 25	 mov	 BYTE PTR __$EHRec$[ebp+8], 37 ; 00000025H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  006b8	83 7d bc 10	 cmp	 DWORD PTR _strPositionX$31[ebp+20], 16 ; 00000010H
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 446  : 			pItemData->SetItemScale(strJob, strSex, strScaleX, strScaleY, strScaleZ, strPositionX, strPositionY, strPositionZ);

  006bc	8b fc		 mov	 edi, esp
  006be	0f 57 c0	 xorps	 xmm0, xmm0
  006c1	89 a5 94 fa ff
	ff		 mov	 DWORD PTR $T4[ebp], esp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  006c7	0f 43 85 60 fb
	ff ff		 cmovae	 eax, DWORD PTR __Ptr$1$[ebp]
  006ce	89 85 78 fb ff
	ff		 mov	 DWORD PTR __Result$2$[ebp], eax

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  006d4	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  006d7	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  006de	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2620 :         if (_Count > max_size()) {

  006e5	81 f9 ff ff ff
	7f		 cmp	 ecx, 2147483647		; 7fffffffH
  006eb	0f 87 00 07 00
	00		 ja	 $LN1279@LoadItemSc

; 2621 :             _Xlen_string(); // result too long
; 2622 :         }
; 2623 : 
; 2624 :         auto& _Al       = _Getal();
; 2625 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 2626 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 2627 : 
; 2628 :         if (_Count < _BUF_SIZE) {

  006f1	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
  006f8	83 f9 10	 cmp	 ecx, 16			; 00000010H
  006fb	73 0b		 jae	 SHORT $LN487@LoadItemSc

; 2629 :             _My_data._Mysize = _Count;

  006fd	89 4f 10	 mov	 DWORD PTR [edi+16], ecx

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00700	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00703	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2647 :             return;

  00706	eb 75		 jmp	 SHORT $LN508@LoadItemSc
$LN487@LoadItemSc:

; 4714 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00708	8b f1		 mov	 esi, ecx
  0070a	83 ce 0f	 or	 esi, 15			; 0000000fH
  0070d	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4715 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00713	76 17		 jbe	 SHORT $LN494@LoadItemSc

; 4716 :             return _Max;

  00715	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0071a	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0071f	50		 push	 eax
  00720	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00725	83 c4 04	 add	 esp, 4
  00728	8b c8		 mov	 ecx, eax
  0072a	eb 35		 jmp	 SHORT $LN501@LoadItemSc
$LN494@LoadItemSc:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4723 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0072c	83 fe 16	 cmp	 esi, 22			; 00000016H
  0072f	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00734	0f 42 f0	 cmovb	 esi, eax

; 2652 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00737	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0073a	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0073f	72 0d		 jb	 SHORT $LN502@LoadItemSc

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00741	50		 push	 eax
  00742	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00747	83 c4 04	 add	 esp, 4
  0074a	8b c8		 mov	 ecx, eax
  0074c	eb 13		 jmp	 SHORT $LN501@LoadItemSc
$LN502@LoadItemSc:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  0074e	85 c0		 test	 eax, eax
  00750	74 0d		 je	 SHORT $LN503@LoadItemSc

; 87   :         return ::operator new(_Bytes);

  00752	50		 push	 eax
  00753	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00758	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  0075b	8b c8		 mov	 ecx, eax
  0075d	eb 02		 jmp	 SHORT $LN501@LoadItemSc
$LN503@LoadItemSc:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  0075f	33 c9		 xor	 ecx, ecx
$LN501@LoadItemSc:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2657 :         _My_data._Mysize = _Count;

  00761	8b 45 b8	 mov	 eax, DWORD PTR _strPositionX$31[ebp+16]
  00764	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 2659 :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2660 :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 2661 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 2662 :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2663 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);
; 2664 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 2665 :         } else { // _Strat == _Construct_strategy::_From_string
; 2666 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);

  00767	40		 inc	 eax

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00768	50		 push	 eax
  00769	ff b5 78 fb ff
	ff		 push	 DWORD PTR __Result$2$[ebp]

; 2653 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0076f	89 0f		 mov	 DWORD PTR [edi], ecx

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00771	51		 push	 ecx

; 2658 :         _My_data._Myres  = _New_capacity;

  00772	89 77 14	 mov	 DWORD PTR [edi+20], esi

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00775	e8 00 00 00 00	 call	 _memcpy
  0077a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN508@LoadItemSc:

; 2235 :         const value_type* _Result = _Bx._Buf;

  0077d	8b 85 30 fb ff
	ff		 mov	 eax, DWORD PTR _strScaleZ$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 446  : 			pItemData->SetItemScale(strJob, strSex, strScaleX, strScaleY, strScaleZ, strPositionX, strPositionY, strPositionZ);

  00783	83 ec 18	 sub	 esp, 24			; 00000018H
  00786	8b fc		 mov	 edi, esp
  00788	c6 45 fc 26	 mov	 BYTE PTR __$EHRec$[ebp+8], 38 ; 00000026H
  0078c	0f 57 c0	 xorps	 xmm0, xmm0
  0078f	89 a5 98 fa ff
	ff		 mov	 DWORD PTR $T5[ebp], esp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2235 :         const value_type* _Result = _Bx._Buf;

  00795	8b c8		 mov	 ecx, eax
  00797	89 85 74 fb ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], eax

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0079d	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  007a0	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  007a7	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2236 :         if (_Large_string_engaged()) {

  007ae	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  007b2	72 08		 jb	 SHORT $LN441@LoadItemSc

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  007b4	8b 08		 mov	 ecx, DWORD PTR [eax]
  007b6	89 8d 74 fb ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], ecx
$LN441@LoadItemSc:

; 2492 :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  007bc	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  007bf	89 85 78 fb ff
	ff		 mov	 DWORD PTR __Count$1$[ebp], eax

; 2620 :         if (_Count > max_size()) {

  007c5	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  007ca	0f 87 21 06 00
	00		 ja	 $LN1279@LoadItemSc

; 2621 :             _Xlen_string(); // result too long
; 2622 :         }
; 2623 : 
; 2624 :         auto& _Al       = _Getal();
; 2625 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 2626 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 2627 : 
; 2628 :         if (_Count < _BUF_SIZE) {

  007d0	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
  007d7	83 f8 10	 cmp	 eax, 16			; 00000010H
  007da	73 0e		 jae	 SHORT $LN447@LoadItemSc

; 2629 :             _My_data._Mysize = _Count;

  007dc	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  007df	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  007e2	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2647 :             return;

  007e5	e9 85 00 00 00	 jmp	 $LN468@LoadItemSc
$LN447@LoadItemSc:

; 4714 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  007ea	8b f0		 mov	 esi, eax
  007ec	83 ce 0f	 or	 esi, 15			; 0000000fH
  007ef	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4715 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  007f5	76 1d		 jbe	 SHORT $LN454@LoadItemSc

; 4716 :             return _Max;

  007f7	b9 00 00 00 80	 mov	 ecx, -2147483648	; 80000000H
  007fc	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00801	51		 push	 ecx
  00802	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00807	8b c8		 mov	 ecx, eax
  00809	83 c4 04	 add	 esp, 4
  0080c	8b 85 78 fb ff
	ff		 mov	 eax, DWORD PTR __Count$1$[ebp]
  00812	eb 42		 jmp	 SHORT $LN461@LoadItemSc
$LN454@LoadItemSc:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4723 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00814	83 fe 16	 cmp	 esi, 22			; 00000016H
  00817	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  0081c	0f 42 f1	 cmovb	 esi, ecx

; 2652 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0081f	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00822	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00828	72 13		 jb	 SHORT $LN462@LoadItemSc

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0082a	51		 push	 ecx
  0082b	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00830	8b c8		 mov	 ecx, eax
  00832	83 c4 04	 add	 esp, 4
  00835	8b 85 78 fb ff
	ff		 mov	 eax, DWORD PTR __Count$1$[ebp]
  0083b	eb 19		 jmp	 SHORT $LN461@LoadItemSc
$LN462@LoadItemSc:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  0083d	85 c9		 test	 ecx, ecx
  0083f	74 13		 je	 SHORT $LN463@LoadItemSc

; 87   :         return ::operator new(_Bytes);

  00841	51		 push	 ecx
  00842	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 245  :         return _Traits::_Allocate(_Bytes);

  00847	8b c8		 mov	 ecx, eax

; 87   :         return ::operator new(_Bytes);

  00849	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  0084c	8b 85 78 fb ff
	ff		 mov	 eax, DWORD PTR __Count$1$[ebp]
  00852	eb 02		 jmp	 SHORT $LN461@LoadItemSc
$LN463@LoadItemSc:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  00854	33 c9		 xor	 ecx, ecx
$LN461@LoadItemSc:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2657 :         _My_data._Mysize = _Count;

  00856	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 2659 :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2660 :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 2661 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 2662 :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2663 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);
; 2664 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 2665 :         } else { // _Strat == _Construct_strategy::_From_string
; 2666 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);

  00859	40		 inc	 eax

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0085a	50		 push	 eax
  0085b	ff b5 74 fb ff
	ff		 push	 DWORD PTR __Result$1$[ebp]

; 2653 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00861	89 0f		 mov	 DWORD PTR [edi], ecx

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00863	51		 push	 ecx

; 2658 :         _My_data._Myres  = _New_capacity;

  00864	89 77 14	 mov	 DWORD PTR [edi+20], esi

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00867	e8 00 00 00 00	 call	 _memcpy
  0086c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN468@LoadItemSc:

; 2235 :         const value_type* _Result = _Bx._Buf;

  0086f	8b 85 24 fb ff
	ff		 mov	 eax, DWORD PTR _strScaleY$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 446  : 			pItemData->SetItemScale(strJob, strSex, strScaleX, strScaleY, strScaleZ, strPositionX, strPositionY, strPositionZ);

  00875	83 ec 18	 sub	 esp, 24			; 00000018H
  00878	8b fc		 mov	 edi, esp
  0087a	c6 45 fc 27	 mov	 BYTE PTR __$EHRec$[ebp+8], 39 ; 00000027H
  0087e	0f 57 c0	 xorps	 xmm0, xmm0
  00881	89 a5 9c fa ff
	ff		 mov	 DWORD PTR $T6[ebp], esp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2235 :         const value_type* _Result = _Bx._Buf;

  00887	8b c8		 mov	 ecx, eax
  00889	89 85 74 fb ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], eax

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0088f	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  00892	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  00899	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2236 :         if (_Large_string_engaged()) {

  008a0	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  008a4	72 08		 jb	 SHORT $LN401@LoadItemSc

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  008a6	8b 08		 mov	 ecx, DWORD PTR [eax]
  008a8	89 8d 74 fb ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], ecx
$LN401@LoadItemSc:

; 2492 :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  008ae	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  008b1	89 85 78 fb ff
	ff		 mov	 DWORD PTR __Count$1$[ebp], eax

; 2620 :         if (_Count > max_size()) {

  008b7	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  008bc	0f 87 2f 05 00
	00		 ja	 $LN1279@LoadItemSc

; 2621 :             _Xlen_string(); // result too long
; 2622 :         }
; 2623 : 
; 2624 :         auto& _Al       = _Getal();
; 2625 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 2626 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 2627 : 
; 2628 :         if (_Count < _BUF_SIZE) {

  008c2	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
  008c9	83 f8 10	 cmp	 eax, 16			; 00000010H
  008cc	73 0e		 jae	 SHORT $LN407@LoadItemSc

; 2629 :             _My_data._Mysize = _Count;

  008ce	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  008d1	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  008d4	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2647 :             return;

  008d7	e9 85 00 00 00	 jmp	 $LN428@LoadItemSc
$LN407@LoadItemSc:

; 4714 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  008dc	8b f0		 mov	 esi, eax
  008de	83 ce 0f	 or	 esi, 15			; 0000000fH
  008e1	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4715 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  008e7	76 1d		 jbe	 SHORT $LN414@LoadItemSc

; 4716 :             return _Max;

  008e9	b9 00 00 00 80	 mov	 ecx, -2147483648	; 80000000H
  008ee	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  008f3	51		 push	 ecx
  008f4	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  008f9	8b c8		 mov	 ecx, eax
  008fb	83 c4 04	 add	 esp, 4
  008fe	8b 85 78 fb ff
	ff		 mov	 eax, DWORD PTR __Count$1$[ebp]
  00904	eb 42		 jmp	 SHORT $LN421@LoadItemSc
$LN414@LoadItemSc:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4723 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00906	83 fe 16	 cmp	 esi, 22			; 00000016H
  00909	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  0090e	0f 42 f1	 cmovb	 esi, ecx

; 2652 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00911	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00914	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0091a	72 13		 jb	 SHORT $LN422@LoadItemSc

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0091c	51		 push	 ecx
  0091d	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00922	8b c8		 mov	 ecx, eax
  00924	83 c4 04	 add	 esp, 4
  00927	8b 85 78 fb ff
	ff		 mov	 eax, DWORD PTR __Count$1$[ebp]
  0092d	eb 19		 jmp	 SHORT $LN421@LoadItemSc
$LN422@LoadItemSc:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  0092f	85 c9		 test	 ecx, ecx
  00931	74 13		 je	 SHORT $LN423@LoadItemSc

; 87   :         return ::operator new(_Bytes);

  00933	51		 push	 ecx
  00934	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 245  :         return _Traits::_Allocate(_Bytes);

  00939	8b c8		 mov	 ecx, eax

; 87   :         return ::operator new(_Bytes);

  0093b	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  0093e	8b 85 78 fb ff
	ff		 mov	 eax, DWORD PTR __Count$1$[ebp]
  00944	eb 02		 jmp	 SHORT $LN421@LoadItemSc
$LN423@LoadItemSc:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  00946	33 c9		 xor	 ecx, ecx
$LN421@LoadItemSc:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2657 :         _My_data._Mysize = _Count;

  00948	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 2659 :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2660 :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 2661 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 2662 :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2663 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);
; 2664 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 2665 :         } else { // _Strat == _Construct_strategy::_From_string
; 2666 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);

  0094b	40		 inc	 eax

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0094c	50		 push	 eax
  0094d	ff b5 74 fb ff
	ff		 push	 DWORD PTR __Result$1$[ebp]

; 2653 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00953	89 0f		 mov	 DWORD PTR [edi], ecx

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00955	51		 push	 ecx

; 2658 :         _My_data._Myres  = _New_capacity;

  00956	89 77 14	 mov	 DWORD PTR [edi+20], esi

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00959	e8 00 00 00 00	 call	 _memcpy
  0095e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN428@LoadItemSc:

; 2235 :         const value_type* _Result = _Bx._Buf;

  00961	8b 85 44 fb ff
	ff		 mov	 eax, DWORD PTR _strScaleX$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 446  : 			pItemData->SetItemScale(strJob, strSex, strScaleX, strScaleY, strScaleZ, strPositionX, strPositionY, strPositionZ);

  00967	83 ec 18	 sub	 esp, 24			; 00000018H
  0096a	8b fc		 mov	 edi, esp
  0096c	c6 45 fc 28	 mov	 BYTE PTR __$EHRec$[ebp+8], 40 ; 00000028H
  00970	0f 57 c0	 xorps	 xmm0, xmm0
  00973	89 a5 a0 fa ff
	ff		 mov	 DWORD PTR $T7[ebp], esp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2235 :         const value_type* _Result = _Bx._Buf;

  00979	8b c8		 mov	 ecx, eax
  0097b	89 85 74 fb ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], eax

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00981	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  00984	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  0098b	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2236 :         if (_Large_string_engaged()) {

  00992	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00996	72 08		 jb	 SHORT $LN146@LoadItemSc

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  00998	8b 08		 mov	 ecx, DWORD PTR [eax]
  0099a	89 8d 74 fb ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], ecx
$LN146@LoadItemSc:

; 2492 :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  009a0	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  009a3	89 85 78 fb ff
	ff		 mov	 DWORD PTR __Count$1$[ebp], eax

; 2620 :         if (_Count > max_size()) {

  009a9	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  009ae	0f 87 3d 04 00
	00		 ja	 $LN1279@LoadItemSc

; 2621 :             _Xlen_string(); // result too long
; 2622 :         }
; 2623 : 
; 2624 :         auto& _Al       = _Getal();
; 2625 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 2626 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 2627 : 
; 2628 :         if (_Count < _BUF_SIZE) {

  009b4	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
  009bb	83 f8 10	 cmp	 eax, 16			; 00000010H
  009be	73 0e		 jae	 SHORT $LN152@LoadItemSc

; 2629 :             _My_data._Mysize = _Count;

  009c0	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  009c3	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  009c6	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2647 :             return;

  009c9	e9 85 00 00 00	 jmp	 $LN173@LoadItemSc
$LN152@LoadItemSc:

; 4714 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  009ce	8b f0		 mov	 esi, eax
  009d0	83 ce 0f	 or	 esi, 15			; 0000000fH
  009d3	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4715 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  009d9	76 1d		 jbe	 SHORT $LN159@LoadItemSc

; 4716 :             return _Max;

  009db	b9 00 00 00 80	 mov	 ecx, -2147483648	; 80000000H
  009e0	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  009e5	51		 push	 ecx
  009e6	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  009eb	8b c8		 mov	 ecx, eax
  009ed	83 c4 04	 add	 esp, 4
  009f0	8b 85 78 fb ff
	ff		 mov	 eax, DWORD PTR __Count$1$[ebp]
  009f6	eb 42		 jmp	 SHORT $LN166@LoadItemSc
$LN159@LoadItemSc:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4723 :         return (_STD max)(_Masked, _Old + _Old / 2);

  009f8	83 fe 16	 cmp	 esi, 22			; 00000016H
  009fb	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  00a00	0f 42 f1	 cmovb	 esi, ecx

; 2652 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00a03	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00a06	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00a0c	72 13		 jb	 SHORT $LN167@LoadItemSc

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00a0e	51		 push	 ecx
  00a0f	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00a14	8b c8		 mov	 ecx, eax
  00a16	83 c4 04	 add	 esp, 4
  00a19	8b 85 78 fb ff
	ff		 mov	 eax, DWORD PTR __Count$1$[ebp]
  00a1f	eb 19		 jmp	 SHORT $LN166@LoadItemSc
$LN167@LoadItemSc:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  00a21	85 c9		 test	 ecx, ecx
  00a23	74 13		 je	 SHORT $LN168@LoadItemSc

; 87   :         return ::operator new(_Bytes);

  00a25	51		 push	 ecx
  00a26	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 245  :         return _Traits::_Allocate(_Bytes);

  00a2b	8b c8		 mov	 ecx, eax

; 87   :         return ::operator new(_Bytes);

  00a2d	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  00a30	8b 85 78 fb ff
	ff		 mov	 eax, DWORD PTR __Count$1$[ebp]
  00a36	eb 02		 jmp	 SHORT $LN166@LoadItemSc
$LN168@LoadItemSc:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  00a38	33 c9		 xor	 ecx, ecx
$LN166@LoadItemSc:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2657 :         _My_data._Mysize = _Count;

  00a3a	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 2659 :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2660 :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 2661 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 2662 :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2663 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);
; 2664 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 2665 :         } else { // _Strat == _Construct_strategy::_From_string
; 2666 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);

  00a3d	40		 inc	 eax

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00a3e	50		 push	 eax
  00a3f	ff b5 74 fb ff
	ff		 push	 DWORD PTR __Result$1$[ebp]

; 2653 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00a45	89 0f		 mov	 DWORD PTR [edi], ecx

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00a47	51		 push	 ecx

; 2658 :         _My_data._Myres  = _New_capacity;

  00a48	89 77 14	 mov	 DWORD PTR [edi+20], esi

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00a4b	e8 00 00 00 00	 call	 _memcpy
  00a50	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN173@LoadItemSc:
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 446  : 			pItemData->SetItemScale(strJob, strSex, strScaleX, strScaleY, strScaleZ, strPositionX, strPositionY, strPositionZ);

  00a53	83 ec 18	 sub	 esp, 24			; 00000018H
  00a56	c6 45 fc 29	 mov	 BYTE PTR __$EHRec$[ebp+8], 41 ; 00000029H
  00a5a	8b fc		 mov	 edi, esp
  00a5c	89 a5 a4 fa ff
	ff		 mov	 DWORD PTR $T8[ebp], esp
  00a62	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2235 :         const value_type* _Result = _Bx._Buf;

  00a65	8d 4d d8	 lea	 ecx, DWORD PTR _strSex$33[ebp]

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00a68	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  00a6b	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  00a72	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2236 :         if (_Large_string_engaged()) {

  00a79	83 7d ec 10	 cmp	 DWORD PTR _strSex$33[ebp+20], 16 ; 00000010H

; 2492 :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00a7d	8b 45 e8	 mov	 eax, DWORD PTR _strSex$33[ebp+16]

; 2236 :         if (_Large_string_engaged()) {

  00a80	0f 43 4d d8	 cmovae	 ecx, DWORD PTR _strSex$33[ebp]
  00a84	89 8d 74 fb ff
	ff		 mov	 DWORD PTR __Result$2$[ebp], ecx

; 2492 :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00a8a	89 85 78 fb ff
	ff		 mov	 DWORD PTR __Count$1$[ebp], eax
  00a90	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH

; 2620 :         if (_Count > max_size()) {

  00a95	0f 87 56 03 00
	00		 ja	 $LN1279@LoadItemSc

; 2621 :             _Xlen_string(); // result too long
; 2622 :         }
; 2623 : 
; 2624 :         auto& _Al       = _Getal();
; 2625 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 2626 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 2627 : 
; 2628 :         if (_Count < _BUF_SIZE) {

  00a9b	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
  00aa2	83 f8 10	 cmp	 eax, 16			; 00000010H
  00aa5	73 0e		 jae	 SHORT $LN367@LoadItemSc

; 2629 :             _My_data._Mysize = _Count;

  00aa7	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00aaa	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00aad	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2647 :             return;

  00ab0	e9 85 00 00 00	 jmp	 $LN388@LoadItemSc
$LN367@LoadItemSc:

; 4714 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00ab5	8b f0		 mov	 esi, eax
  00ab7	83 ce 0f	 or	 esi, 15			; 0000000fH
  00aba	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4715 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00ac0	76 1d		 jbe	 SHORT $LN374@LoadItemSc

; 4716 :             return _Max;

  00ac2	b9 00 00 00 80	 mov	 ecx, -2147483648	; 80000000H
  00ac7	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00acc	51		 push	 ecx
  00acd	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00ad2	8b c8		 mov	 ecx, eax
  00ad4	83 c4 04	 add	 esp, 4
  00ad7	8b 85 78 fb ff
	ff		 mov	 eax, DWORD PTR __Count$1$[ebp]
  00add	eb 42		 jmp	 SHORT $LN381@LoadItemSc
$LN374@LoadItemSc:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4723 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00adf	83 fe 16	 cmp	 esi, 22			; 00000016H
  00ae2	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  00ae7	0f 42 f1	 cmovb	 esi, ecx

; 2652 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00aea	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00aed	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00af3	72 13		 jb	 SHORT $LN382@LoadItemSc

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00af5	51		 push	 ecx
  00af6	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00afb	8b c8		 mov	 ecx, eax
  00afd	83 c4 04	 add	 esp, 4
  00b00	8b 85 78 fb ff
	ff		 mov	 eax, DWORD PTR __Count$1$[ebp]
  00b06	eb 19		 jmp	 SHORT $LN381@LoadItemSc
$LN382@LoadItemSc:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  00b08	85 c9		 test	 ecx, ecx
  00b0a	74 13		 je	 SHORT $LN383@LoadItemSc

; 87   :         return ::operator new(_Bytes);

  00b0c	51		 push	 ecx
  00b0d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 245  :         return _Traits::_Allocate(_Bytes);

  00b12	8b c8		 mov	 ecx, eax

; 87   :         return ::operator new(_Bytes);

  00b14	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  00b17	8b 85 78 fb ff
	ff		 mov	 eax, DWORD PTR __Count$1$[ebp]
  00b1d	eb 02		 jmp	 SHORT $LN381@LoadItemSc
$LN383@LoadItemSc:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  00b1f	33 c9		 xor	 ecx, ecx
$LN381@LoadItemSc:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2657 :         _My_data._Mysize = _Count;

  00b21	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 2659 :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2660 :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 2661 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 2662 :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2663 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);
; 2664 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 2665 :         } else { // _Strat == _Construct_strategy::_From_string
; 2666 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);

  00b24	40		 inc	 eax

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00b25	50		 push	 eax
  00b26	ff b5 74 fb ff
	ff		 push	 DWORD PTR __Result$2$[ebp]

; 2653 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00b2c	89 0f		 mov	 DWORD PTR [edi], ecx

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00b2e	51		 push	 ecx

; 2658 :         _My_data._Myres  = _New_capacity;

  00b2f	89 77 14	 mov	 DWORD PTR [edi+20], esi

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00b32	e8 00 00 00 00	 call	 _memcpy
  00b37	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN388@LoadItemSc:
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 446  : 			pItemData->SetItemScale(strJob, strSex, strScaleX, strScaleY, strScaleZ, strPositionX, strPositionY, strPositionZ);

  00b3a	83 ec 18	 sub	 esp, 24			; 00000018H
  00b3d	c6 45 fc 2a	 mov	 BYTE PTR __$EHRec$[ebp+8], 42 ; 0000002aH
  00b41	8b fc		 mov	 edi, esp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2235 :         const value_type* _Result = _Bx._Buf;

  00b43	8d 4d c0	 lea	 ecx, DWORD PTR _strJob$32[ebp]
  00b46	0f 57 c0	 xorps	 xmm0, xmm0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00b49	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  00b4c	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  00b53	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2236 :         if (_Large_string_engaged()) {

  00b5a	83 7d d4 10	 cmp	 DWORD PTR _strJob$32[ebp+20], 16 ; 00000010H

; 2492 :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00b5e	8b 45 d0	 mov	 eax, DWORD PTR _strJob$32[ebp+16]

; 2236 :         if (_Large_string_engaged()) {

  00b61	0f 43 4d c0	 cmovae	 ecx, DWORD PTR _strJob$32[ebp]
  00b65	89 8d 74 fb ff
	ff		 mov	 DWORD PTR __Result$2$[ebp], ecx

; 2492 :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00b6b	89 85 78 fb ff
	ff		 mov	 DWORD PTR __Count$1$[ebp], eax
  00b71	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH

; 2620 :         if (_Count > max_size()) {

  00b76	0f 87 75 02 00
	00		 ja	 $LN1279@LoadItemSc

; 2621 :             _Xlen_string(); // result too long
; 2622 :         }
; 2623 : 
; 2624 :         auto& _Al       = _Getal();
; 2625 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 2626 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 2627 : 
; 2628 :         if (_Count < _BUF_SIZE) {

  00b7c	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
  00b83	83 f8 10	 cmp	 eax, 16			; 00000010H
  00b86	73 0e		 jae	 SHORT $LN327@LoadItemSc

; 2629 :             _My_data._Mysize = _Count;

  00b88	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00b8b	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00b8e	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2647 :             return;

  00b91	e9 85 00 00 00	 jmp	 $LN348@LoadItemSc
$LN327@LoadItemSc:

; 4714 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00b96	8b f0		 mov	 esi, eax
  00b98	83 ce 0f	 or	 esi, 15			; 0000000fH
  00b9b	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4715 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00ba1	76 1d		 jbe	 SHORT $LN334@LoadItemSc

; 4716 :             return _Max;

  00ba3	b9 00 00 00 80	 mov	 ecx, -2147483648	; 80000000H
  00ba8	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00bad	51		 push	 ecx
  00bae	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00bb3	8b c8		 mov	 ecx, eax
  00bb5	83 c4 04	 add	 esp, 4
  00bb8	8b 85 78 fb ff
	ff		 mov	 eax, DWORD PTR __Count$1$[ebp]
  00bbe	eb 42		 jmp	 SHORT $LN341@LoadItemSc
$LN334@LoadItemSc:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4723 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00bc0	83 fe 16	 cmp	 esi, 22			; 00000016H
  00bc3	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  00bc8	0f 42 f1	 cmovb	 esi, ecx

; 2652 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00bcb	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00bce	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00bd4	72 13		 jb	 SHORT $LN342@LoadItemSc

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00bd6	51		 push	 ecx
  00bd7	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00bdc	8b c8		 mov	 ecx, eax
  00bde	83 c4 04	 add	 esp, 4
  00be1	8b 85 78 fb ff
	ff		 mov	 eax, DWORD PTR __Count$1$[ebp]
  00be7	eb 19		 jmp	 SHORT $LN341@LoadItemSc
$LN342@LoadItemSc:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  00be9	85 c9		 test	 ecx, ecx
  00beb	74 13		 je	 SHORT $LN343@LoadItemSc

; 87   :         return ::operator new(_Bytes);

  00bed	51		 push	 ecx
  00bee	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 245  :         return _Traits::_Allocate(_Bytes);

  00bf3	8b c8		 mov	 ecx, eax

; 87   :         return ::operator new(_Bytes);

  00bf5	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  00bf8	8b 85 78 fb ff
	ff		 mov	 eax, DWORD PTR __Count$1$[ebp]
  00bfe	eb 02		 jmp	 SHORT $LN341@LoadItemSc
$LN343@LoadItemSc:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  00c00	33 c9		 xor	 ecx, ecx
$LN341@LoadItemSc:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2657 :         _My_data._Mysize = _Count;

  00c02	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 2659 :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2660 :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 2661 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 2662 :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2663 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);
; 2664 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 2665 :         } else { // _Strat == _Construct_strategy::_From_string
; 2666 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);

  00c05	40		 inc	 eax

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00c06	50		 push	 eax
  00c07	ff b5 74 fb ff
	ff		 push	 DWORD PTR __Result$2$[ebp]

; 2653 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00c0d	89 0f		 mov	 DWORD PTR [edi], ecx

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00c0f	51		 push	 ecx

; 2658 :         _My_data._Myres  = _New_capacity;

  00c10	89 77 14	 mov	 DWORD PTR [edi+20], esi

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00c13	e8 00 00 00 00	 call	 _memcpy
  00c18	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN348@LoadItemSc:
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 446  : 			pItemData->SetItemScale(strJob, strSex, strScaleX, strScaleY, strScaleZ, strPositionX, strPositionY, strPositionZ);

  00c1b	8b 8d 40 fb ff
	ff		 mov	 ecx, DWORD PTR _pItemData$1$[ebp]
  00c21	c6 45 fc 23	 mov	 BYTE PTR __$EHRec$[ebp+8], 35 ; 00000023H
  00c25	e8 00 00 00 00	 call	 ?SetItemScale@CItemData@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0000000@Z ; CItemData::SetItemScale
  00c2a	8b bd 54 fb ff
	ff		 mov	 edi, DWORD PTR _j$1$[ebp]
  00c30	47		 inc	 edi
  00c31	89 bd 54 fb ff
	ff		 mov	 DWORD PTR _j$1$[ebp], edi
  00c37	83 ff 05	 cmp	 edi, 5
  00c3a	7d 0b		 jge	 SHORT $LN1330@LoadItemSc

; 443  : 		for (int j = 0; j < 5; ++j)

  00c3c	8b b5 64 fb ff
	ff		 mov	 esi, DWORD PTR _kTokenVector$[ebp]
  00c42	e9 9c f8 ff ff	 jmp	 $LL8@LoadItemSc
$LN1330@LoadItemSc:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4832 :         if (_My_data._Large_string_engaged()) {

  00c47	8b 45 8c	 mov	 eax, DWORD PTR _strPositionZ$29[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 448  : 	}

  00c4a	c6 45 fc 1e	 mov	 BYTE PTR __$EHRec$[ebp+8], 30 ; 0000001eH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4832 :         if (_My_data._Large_string_engaged()) {

  00c4e	83 f8 10	 cmp	 eax, 16			; 00000010H
  00c51	72 31		 jb	 SHORT $LN295@LoadItemSc
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00c53	8b 95 48 fb ff
	ff		 mov	 edx, DWORD PTR __Ptr$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00c59	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00c5c	8b c2		 mov	 eax, edx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00c5e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00c64	72 14		 jb	 SHORT $LN305@LoadItemSc

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00c66	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00c69	83 c1 23	 add	 ecx, 35			; 00000023H
  00c6c	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00c6e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00c71	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00c74	0f 87 95 06 00
	00		 ja	 $LN194@LoadItemSc
$LN305@LoadItemSc:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00c7a	51		 push	 ecx
  00c7b	52		 push	 edx
  00c7c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00c81	83 c4 08	 add	 esp, 8
$LN295@LoadItemSc:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4832 :         if (_My_data._Large_string_engaged()) {

  00c84	8b 45 a4	 mov	 eax, DWORD PTR _strPositionY$30[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 448  : 	}

  00c87	c6 45 fc 1d	 mov	 BYTE PTR __$EHRec$[ebp+8], 29 ; 0000001dH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4832 :         if (_My_data._Large_string_engaged()) {

  00c8b	83 f8 10	 cmp	 eax, 16			; 00000010H
  00c8e	72 31		 jb	 SHORT $LN268@LoadItemSc
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00c90	8b 95 50 fb ff
	ff		 mov	 edx, DWORD PTR __Ptr$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00c96	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00c99	8b c2		 mov	 eax, edx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00c9b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00ca1	72 14		 jb	 SHORT $LN278@LoadItemSc

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00ca3	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00ca6	83 c1 23	 add	 ecx, 35			; 00000023H
  00ca9	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00cab	83 c0 fc	 add	 eax, -4			; fffffffcH
  00cae	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00cb1	0f 87 58 06 00
	00		 ja	 $LN194@LoadItemSc
$LN278@LoadItemSc:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00cb7	51		 push	 ecx
  00cb8	52		 push	 edx
  00cb9	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00cbe	83 c4 08	 add	 esp, 8
$LN268@LoadItemSc:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4832 :         if (_My_data._Large_string_engaged()) {

  00cc1	8b 45 bc	 mov	 eax, DWORD PTR _strPositionX$31[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 448  : 	}

  00cc4	c6 45 fc 1c	 mov	 BYTE PTR __$EHRec$[ebp+8], 28 ; 0000001cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4832 :         if (_My_data._Large_string_engaged()) {

  00cc8	83 f8 10	 cmp	 eax, 16			; 00000010H
  00ccb	72 31		 jb	 SHORT $LN241@LoadItemSc
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00ccd	8b 95 60 fb ff
	ff		 mov	 edx, DWORD PTR __Ptr$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00cd3	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00cd6	8b c2		 mov	 eax, edx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00cd8	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00cde	72 14		 jb	 SHORT $LN251@LoadItemSc

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00ce0	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00ce3	83 c1 23	 add	 ecx, 35			; 00000023H
  00ce6	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00ce8	83 c0 fc	 add	 eax, -4			; fffffffcH
  00ceb	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00cee	0f 87 1b 06 00
	00		 ja	 $LN194@LoadItemSc
$LN251@LoadItemSc:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00cf4	51		 push	 ecx
  00cf5	52		 push	 edx
  00cf6	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00cfb	83 c4 08	 add	 esp, 8
$LN241@LoadItemSc:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4832 :         if (_My_data._Large_string_engaged()) {

  00cfe	8b 4d ec	 mov	 ecx, DWORD PTR _strSex$33[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 448  : 	}

  00d01	c6 45 fc 1b	 mov	 BYTE PTR __$EHRec$[ebp+8], 27 ; 0000001bH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4832 :         if (_My_data._Large_string_engaged()) {

  00d05	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00d08	72 2c		 jb	 SHORT $LN214@LoadItemSc
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00d0a	8b 55 d8	 mov	 edx, DWORD PTR _strSex$33[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00d0d	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00d0e	8b c2		 mov	 eax, edx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00d10	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00d16	72 14		 jb	 SHORT $LN224@LoadItemSc

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00d18	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00d1b	83 c1 23	 add	 ecx, 35			; 00000023H
  00d1e	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00d20	83 c0 fc	 add	 eax, -4			; fffffffcH
  00d23	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00d26	0f 87 e3 05 00
	00		 ja	 $LN194@LoadItemSc
$LN224@LoadItemSc:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00d2c	51		 push	 ecx
  00d2d	52		 push	 edx
  00d2e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00d33	83 c4 08	 add	 esp, 8
$LN214@LoadItemSc:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00d36	8b 4d d4	 mov	 ecx, DWORD PTR _strJob$32[ebp+20]

; 4841 :         _My_data._Mysize = 0;

  00d39	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _strSex$33[ebp+16], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  00d40	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _strSex$33[ebp+20], 15 ; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00d47	c6 45 d8 00	 mov	 BYTE PTR _strSex$33[ebp], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 448  : 	}

  00d4b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00d4f	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  00d52	72 2c		 jb	 SHORT $LN1331@LoadItemSc
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00d54	8b 55 c0	 mov	 edx, DWORD PTR _strJob$32[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00d57	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00d58	8b c2		 mov	 eax, edx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00d5a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00d60	72 14		 jb	 SHORT $LN197@LoadItemSc

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00d62	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00d65	83 c1 23	 add	 ecx, 35			; 00000023H
  00d68	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00d6a	83 c0 fc	 add	 eax, -4			; fffffffcH
  00d6d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00d70	0f 87 99 05 00
	00		 ja	 $LN194@LoadItemSc
$LN197@LoadItemSc:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00d76	51		 push	 ecx
  00d77	52		 push	 edx
  00d78	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00d7d	83 c4 08	 add	 esp, 8
$LN1331@LoadItemSc:
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 398  : 	for (DWORD i = 0; i < kTextFileLoader.GetLineCount(); ++i)

  00d80	8b bd 4c fb ff
	ff		 mov	 edi, DWORD PTR _c_szFileName$GSCopy$1$[ebp]
  00d86	8b b5 5c fb ff
	ff		 mov	 esi, DWORD PTR _i$1$[ebp]
$LN2@LoadItemSc:
  00d8c	46		 inc	 esi
  00d8d	8d 8d c0 fa ff
	ff		 lea	 ecx, DWORD PTR _kTextFileLoader$[ebp]
  00d93	89 b5 5c fb ff
	ff		 mov	 DWORD PTR _i$1$[ebp], esi
  00d99	e8 00 00 00 00	 call	 ?GetLineCount@CMemoryTextFileLoader@@QAEKXZ ; CMemoryTextFileLoader::GetLineCount
  00d9e	3b f0		 cmp	 esi, eax
  00da0	0f 82 5a f3 ff
	ff		 jb	 $LL4@LoadItemSc
$LN1325@LoadItemSc:

; 449  : 
; 450  : 	return true;

  00da6	8d 8d 64 fb ff
	ff		 lea	 ecx, DWORD PTR _kTokenVector$[ebp]
  00dac	c6 85 73 fb ff
	ff 01		 mov	 BYTE PTR $T26[ebp], 1
  00db3	e8 00 00 00 00	 call	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00db8	8d 8d c0 fa ff
	ff		 lea	 ecx, DWORD PTR _kTextFileLoader$[ebp]
  00dbe	e8 00 00 00 00	 call	 ??1CMemoryTextFileLoader@@UAE@XZ ; CMemoryTextFileLoader::~CMemoryTextFileLoader
$LN44@LoadItemSc:
  00dc3	8d 8d 7c fb ff
	ff		 lea	 ecx, DWORD PTR _kFile$[ebp]
  00dc9	e8 00 00 00 00	 call	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
  00dce	8a 85 73 fb ff
	ff		 mov	 al, BYTE PTR $T26[ebp]

; 451  : }

  00dd4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00dd7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00dde	59		 pop	 ecx
  00ddf	5f		 pop	 edi
  00de0	5e		 pop	 esi
  00de1	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00de4	33 cd		 xor	 ecx, ebp
  00de6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00deb	8b e5		 mov	 esp, ebp
  00ded	5d		 pop	 ebp
  00dee	c2 04 00	 ret	 4
$LN1279@LoadItemSc:
  00df1	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN1338@LoadItemSc:

; 409  : 		static std::map<std::pair<std::string, std::string>, std::string> scaleMap = {

  00df6	68 00 00 00 00	 push	 OFFSET ?$TSS0@?5??LoadItemScale@CItemManager@@QAE_NPBD@Z@4HA
  00dfb	e8 00 00 00 00	 call	 __Init_thread_header
  00e00	83 c4 04	 add	 esp, 4
  00e03	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?5??LoadItemScale@CItemManager@@QAE_NPBD@Z@4HA, -1
  00e0a	0f 85 5a f3 ff
	ff		 jne	 $LN1326@LoadItemSc
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00e10	8d 85 10 fb ff
	ff		 lea	 eax, DWORD PTR $T20[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 409  : 		static std::map<std::pair<std::string, std::string>, std::string> scaleMap = {

  00e16	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00e1a	50		 push	 eax
  00e1b	8d 8d c0 fc ff
	ff		 lea	 ecx, DWORD PTR $T27[ebp]

; 231  :         : first(_Val1), second(_Val2) {}

  00e21	c7 85 10 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR $T20[ebp], OFFSET ??_C@_0M@BIDPEPDP@JOB_WOLFMAN@
  00e2b	c7 85 14 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR $T20[ebp+4], OFFSET ??_C@_01PLPBNMEI@M@

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00e35	e8 00 00 00 00	 call	 ??$?0PBDPBD$0A@@?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@$$QAU?$pair@PBDPBD@1@@Z ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><char const *,char const *,0>
  00e3a	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2629 :             _My_data._Mysize = _Count;

  00e3d	c7 85 00 fd ff
	ff 01 00 00 00	 mov	 DWORD PTR $T27[ebp+64], 1

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00e47	0f 11 85 f0 fc
	ff ff		 movups	 XMMWORD PTR $T27[ebp+48], xmm0

; 2630 :             _My_data._Myres  = _BUF_SIZE - 1;

  00e4e	c7 85 04 fd ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T27[ebp+68], 15 ; 0000000fH

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00e58	66 c7 85 f0 fc
	ff ff 30 00	 mov	 WORD PTR $T27[ebp+48], 48 ; 00000030H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00e61	8d 85 08 fb ff
	ff		 lea	 eax, DWORD PTR $T19[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 409  : 		static std::map<std::pair<std::string, std::string>, std::string> scaleMap = {

  00e67	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00e6b	50		 push	 eax
  00e6c	8d 8d 08 fd ff
	ff		 lea	 ecx, DWORD PTR $T27[ebp+72]

; 231  :         : first(_Val1), second(_Val2) {}

  00e72	c7 85 08 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR $T19[ebp], OFFSET ??_C@_0N@IAFGBDIL@JOB_ASSASSIN@
  00e7c	c7 85 0c fb ff
	ff 00 00 00 00	 mov	 DWORD PTR $T19[ebp+4], OFFSET ??_C@_01PLPBNMEI@M@

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00e86	e8 00 00 00 00	 call	 ??$?0PBDPBD$0A@@?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@$$QAU?$pair@PBDPBD@1@@Z ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><char const *,char const *,0>
  00e8b	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2629 :             _My_data._Mysize = _Count;

  00e8e	c7 85 48 fd ff
	ff 04 00 00 00	 mov	 DWORD PTR $T27[ebp+136], 4

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00e98	0f 11 85 38 fd
	ff ff		 movups	 XMMWORD PTR $T27[ebp+120], xmm0

; 2630 :             _My_data._Myres  = _BUF_SIZE - 1;

  00e9f	c7 85 4c fd ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T27[ebp+140], 15 ; 0000000fH

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00ea9	c7 85 38 fd ff
	ff 30 2e 32 36	 mov	 DWORD PTR $T27[ebp+120], 909258288 ; 36322e30H

; 2637 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00eb3	c6 85 3c fd ff
	ff 00		 mov	 BYTE PTR $T27[ebp+124], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00eba	8d 85 00 fb ff
	ff		 lea	 eax, DWORD PTR $T18[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 409  : 		static std::map<std::pair<std::string, std::string>, std::string> scaleMap = {

  00ec0	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00ec4	50		 push	 eax
  00ec5	8d 8d 50 fd ff
	ff		 lea	 ecx, DWORD PTR $T27[ebp+144]

; 231  :         : first(_Val1), second(_Val2) {}

  00ecb	c7 85 00 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR $T18[ebp], OFFSET ??_C@_0N@IAFGBDIL@JOB_ASSASSIN@
  00ed5	c7 85 04 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR $T18[ebp+4], OFFSET ??_C@_01BIAFAFID@F@

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00edf	e8 00 00 00 00	 call	 ??$?0PBDPBD$0A@@?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@$$QAU?$pair@PBDPBD@1@@Z ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><char const *,char const *,0>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00ee4	6a 04		 push	 4
  00ee6	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00ee9	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00eed	68 00 00 00 00	 push	 OFFSET ??_C@_04OJKDIPFL@0?438@
  00ef2	8d 8d 80 fd ff
	ff		 lea	 ecx, DWORD PTR $T27[ebp+192]

; 2293 :     size_type _Mysize = 0; // current length of string

  00ef8	c7 85 90 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T27[ebp+208], 0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00f02	0f 11 85 80 fd
	ff ff		 movups	 XMMWORD PTR $T27[ebp+192], xmm0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  00f09	c7 85 94 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T27[ebp+212], 0

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00f13	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00f18	8d 85 f8 fa ff
	ff		 lea	 eax, DWORD PTR $T17[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 409  : 		static std::map<std::pair<std::string, std::string>, std::string> scaleMap = {

  00f1e	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00f22	50		 push	 eax
  00f23	8d 8d 98 fd ff
	ff		 lea	 ecx, DWORD PTR $T27[ebp+216]

; 231  :         : first(_Val1), second(_Val2) {}

  00f29	c7 85 f8 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR $T17[ebp], OFFSET ??_C@_0L@FBDFJGPA@JOB_SHAMAN@
  00f33	c7 85 fc fa ff
	ff 00 00 00 00	 mov	 DWORD PTR $T17[ebp+4], OFFSET ??_C@_01PLPBNMEI@M@

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00f3d	e8 00 00 00 00	 call	 ??$?0PBDPBD$0A@@?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@$$QAU?$pair@PBDPBD@1@@Z ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><char const *,char const *,0>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00f42	6a 04		 push	 4
  00f44	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00f47	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00f4b	68 00 00 00 00	 push	 OFFSET ??_C@_04OKCHFLDF@0?418@
  00f50	8d 8d c8 fd ff
	ff		 lea	 ecx, DWORD PTR $T27[ebp+264]

; 2293 :     size_type _Mysize = 0; // current length of string

  00f56	c7 85 d8 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T27[ebp+280], 0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00f60	0f 11 85 c8 fd
	ff ff		 movups	 XMMWORD PTR $T27[ebp+264], xmm0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  00f67	c7 85 dc fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T27[ebp+284], 0

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00f71	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00f76	8d 85 f0 fa ff
	ff		 lea	 eax, DWORD PTR $T16[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 409  : 		static std::map<std::pair<std::string, std::string>, std::string> scaleMap = {

  00f7c	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00f80	50		 push	 eax
  00f81	8d 8d e0 fd ff
	ff		 lea	 ecx, DWORD PTR $T27[ebp+288]

; 231  :         : first(_Val1), second(_Val2) {}

  00f87	c7 85 f0 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR $T16[ebp], OFFSET ??_C@_0L@FBDFJGPA@JOB_SHAMAN@
  00f91	c7 85 f4 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR $T16[ebp+4], OFFSET ??_C@_01BIAFAFID@F@

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00f9b	e8 00 00 00 00	 call	 ??$?0PBDPBD$0A@@?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@$$QAU?$pair@PBDPBD@1@@Z ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><char const *,char const *,0>
  00fa0	0f 57 c0	 xorps	 xmm0, xmm0
  00fa3	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00fa7	6a 04		 push	 4

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00fa9	0f 11 85 10 fe
	ff ff		 movups	 XMMWORD PTR $T27[ebp+336], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  00fb0	c7 85 20 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T27[ebp+352], 0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  00fba	c7 85 24 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T27[ebp+356], 0

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00fc4	68 00 00 00 00	 push	 OFFSET ??_C@_04HGOCMIOC@0?426@
  00fc9	8d 8d 10 fe ff
	ff		 lea	 ecx, DWORD PTR $T27[ebp+336]
  00fcf	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00fd4	8d 85 b8 fa ff
	ff		 lea	 eax, DWORD PTR $T11[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 409  : 		static std::map<std::pair<std::string, std::string>, std::string> scaleMap = {

  00fda	c6 45 fc 0d	 mov	 BYTE PTR __$EHRec$[ebp+8], 13 ; 0000000dH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00fde	50		 push	 eax
  00fdf	8d 8d 28 fe ff
	ff		 lea	 ecx, DWORD PTR $T27[ebp+360]

; 231  :         : first(_Val1), second(_Val2) {}

  00fe5	c7 85 b8 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR $T11[ebp], OFFSET ??_C@_08IJIBKCOK@JOB_SURA@
  00fef	c7 85 bc fa ff
	ff 00 00 00 00	 mov	 DWORD PTR $T11[ebp+4], OFFSET ??_C@_01PLPBNMEI@M@

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00ff9	e8 00 00 00 00	 call	 ??$?0PBDPBD$0A@@?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@$$QAU?$pair@PBDPBD@1@@Z ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><char const *,char const *,0>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00ffe	6a 04		 push	 4
  01000	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  01003	c6 45 fc 0e	 mov	 BYTE PTR __$EHRec$[ebp+8], 14 ; 0000000eH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  01007	68 00 00 00 00	 push	 OFFSET ??_C@_04DJKDFOCF@0?421@
  0100c	8d 8d 58 fe ff
	ff		 lea	 ecx, DWORD PTR $T27[ebp+408]

; 2293 :     size_type _Mysize = 0; // current length of string

  01012	c7 85 68 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T27[ebp+424], 0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0101c	0f 11 85 58 fe
	ff ff		 movups	 XMMWORD PTR $T27[ebp+408], xmm0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  01023	c7 85 6c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T27[ebp+428], 0

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0102d	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  01032	8d 85 e8 fa ff
	ff		 lea	 eax, DWORD PTR $T15[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 409  : 		static std::map<std::pair<std::string, std::string>, std::string> scaleMap = {

  01038	c6 45 fc 0f	 mov	 BYTE PTR __$EHRec$[ebp+8], 15 ; 0000000fH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  0103c	50		 push	 eax
  0103d	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR $T27[ebp+432]

; 231  :         : first(_Val1), second(_Val2) {}

  01043	c7 85 e8 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR $T15[ebp], OFFSET ??_C@_08IJIBKCOK@JOB_SURA@
  0104d	c7 85 ec fa ff
	ff 00 00 00 00	 mov	 DWORD PTR $T15[ebp+4], OFFSET ??_C@_01BIAFAFID@F@

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  01057	e8 00 00 00 00	 call	 ??$?0PBDPBD$0A@@?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@$$QAU?$pair@PBDPBD@1@@Z ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><char const *,char const *,0>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0105c	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_03OICINGJI@0?43@
  01062	0f 57 c0	 xorps	 xmm0, xmm0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  01065	0f 11 85 a0 fe
	ff ff		 movups	 XMMWORD PTR $T27[ebp+480], xmm0

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0106c	66 89 85 a0 fe
	ff ff		 mov	 WORD PTR $T27[ebp+480], ax
  01073	a0 02 00 00 00	 mov	 al, BYTE PTR ??_C@_03OICINGJI@0?43@+2

; 2629 :             _My_data._Mysize = _Count;

  01078	c7 85 b0 fe ff
	ff 03 00 00 00	 mov	 DWORD PTR $T27[ebp+496], 3

; 2630 :             _My_data._Myres  = _BUF_SIZE - 1;

  01082	c7 85 b4 fe ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T27[ebp+500], 15 ; 0000000fH

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0108c	88 85 a2 fe ff
	ff		 mov	 BYTE PTR $T27[ebp+482], al

; 2637 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  01092	c6 85 a3 fe ff
	ff 00		 mov	 BYTE PTR $T27[ebp+483], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  01099	8d 85 e0 fa ff
	ff		 lea	 eax, DWORD PTR $T14[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 409  : 		static std::map<std::pair<std::string, std::string>, std::string> scaleMap = {

  0109f	c6 45 fc 11	 mov	 BYTE PTR __$EHRec$[ebp+8], 17 ; 00000011H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  010a3	50		 push	 eax
  010a4	8d 8d b8 fe ff
	ff		 lea	 ecx, DWORD PTR $T27[ebp+504]

; 231  :         : first(_Val1), second(_Val2) {}

  010aa	c7 85 e0 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR $T14[ebp], OFFSET ??_C@_0M@IHDHIBML@JOB_WARRIOR@
  010b4	c7 85 e4 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR $T14[ebp+4], OFFSET ??_C@_01PLPBNMEI@M@

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  010be	e8 00 00 00 00	 call	 ??$?0PBDPBD$0A@@?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@$$QAU?$pair@PBDPBD@1@@Z ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><char const *,char const *,0>
  010c3	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2629 :             _My_data._Mysize = _Count;

  010c6	c7 85 f8 fe ff
	ff 04 00 00 00	 mov	 DWORD PTR $T27[ebp+568], 4

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  010d0	0f 11 85 e8 fe
	ff ff		 movups	 XMMWORD PTR $T27[ebp+552], xmm0

; 2630 :             _My_data._Myres  = _BUF_SIZE - 1;

  010d7	c7 85 fc fe ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T27[ebp+572], 15 ; 0000000fH

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  010e1	c7 85 e8 fe ff
	ff 30 2e 31 35	 mov	 DWORD PTR $T27[ebp+552], 892415536 ; 35312e30H

; 2637 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  010eb	c6 85 ec fe ff
	ff 00		 mov	 BYTE PTR $T27[ebp+556], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  010f2	8d 85 d8 fa ff
	ff		 lea	 eax, DWORD PTR $T13[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 409  : 		static std::map<std::pair<std::string, std::string>, std::string> scaleMap = {

  010f8	c6 45 fc 13	 mov	 BYTE PTR __$EHRec$[ebp+8], 19 ; 00000013H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  010fc	50		 push	 eax
  010fd	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T27[ebp+576]

; 231  :         : first(_Val1), second(_Val2) {}

  01103	c7 85 d8 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR $T13[ebp], OFFSET ??_C@_0M@IHDHIBML@JOB_WARRIOR@
  0110d	c7 85 dc fa ff
	ff 00 00 00 00	 mov	 DWORD PTR $T13[ebp+4], OFFSET ??_C@_01BIAFAFID@F@

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  01117	e8 00 00 00 00	 call	 ??$?0PBDPBD$0A@@?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@$$QAU?$pair@PBDPBD@1@@Z ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><char const *,char const *,0>
  0111c	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2629 :             _My_data._Mysize = _Count;

  0111f	c7 85 40 ff ff
	ff 04 00 00 00	 mov	 DWORD PTR $T27[ebp+640], 4

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  01129	0f 11 85 30 ff
	ff ff		 movups	 XMMWORD PTR $T27[ebp+624], xmm0

; 2630 :             _My_data._Myres  = _BUF_SIZE - 1;

  01130	c7 85 44 ff ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T27[ebp+644], 15 ; 0000000fH

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0113a	c7 85 30 ff ff
	ff 30 2e 32 36	 mov	 DWORD PTR $T27[ebp+624], 909258288 ; 36322e30H

; 2637 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  01144	c6 85 34 ff ff
	ff 00		 mov	 BYTE PTR $T27[ebp+628], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\initializer_list

; 35   :         : _First(_First_arg), _Last(_Last_arg) {}

  0114b	8d b5 c0 fc ff
	ff		 lea	 esi, DWORD PTR $T27[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 409  : 		static std::map<std::pair<std::string, std::string>, std::string> scaleMap = {

  01151	c6 45 fc 15	 mov	 BYTE PTR __$EHRec$[ebp+8], 21 ; 00000015H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  01155	6a 58		 push	 88			; 00000058H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\initializer_list

; 35   :         : _First(_First_arg), _Last(_Last_arg) {}

  01157	89 b5 74 fb ff
	ff		 mov	 DWORD PTR __First$1$[ebp], esi
  0115d	8d bd 48 ff ff
	ff		 lea	 edi, DWORD PTR $T27[ebp+648]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 437  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  01163	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?scaleMap@?5??LoadItemScale@CItemManager@@QAE_NPBD@Z@4V?$map@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@@std@@A, 0
  0116d	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?scaleMap@?5??LoadItemScale@CItemManager@@QAE_NPBD@Z@4V?$map@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@@std@@A+4, 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  01177	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 245  :         return _Traits::_Allocate(_Bytes);

  0117c	8b c8		 mov	 ecx, eax

; 87   :         return ::operator new(_Bytes);

  0117e	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  01181	89 8d 60 fb ff
	ff		 mov	 DWORD PTR $T25[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 347  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  01187	89 09		 mov	 DWORD PTR [ecx], ecx

; 348  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  01189	89 49 04	 mov	 DWORD PTR [ecx+4], ecx

; 349  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  0118c	89 49 08	 mov	 DWORD PTR [ecx+8], ecx

; 350  :         _Pnode->_Color = _Black;

  0118f	66 c7 41 0c 01
	01		 mov	 WORD PTR [ecx+12], 257	; 00000101H

; 1943 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  01195	89 85 78 fb ff
	ff		 mov	 DWORD PTR __Myhead$1$[ebp], eax
  0119b	a3 00 00 00 00	 mov	 DWORD PTR ?scaleMap@?5??LoadItemScale@CItemManager@@QAE_NPBD@Z@4V?$map@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@@std@@A, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\map

; 323  :     map(initializer_list<value_type> _Ilist) : _Mybase(key_compare()) {

  011a0	c6 45 fc 16	 mov	 BYTE PTR __$EHRec$[ebp+8], 22 ; 00000016H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1260 :         for (; _First != _Last; ++_First) {

  011a4	3b f7		 cmp	 esi, edi
  011a6	0f 84 25 01 00
	00		 je	 $LN988@LoadItemSc
  011ac	eb 02		 jmp	 SHORT $LL989@LoadItemSc
  011ae	66 90		 npad	 2
$LL989@LoadItemSc:

; 1045 :             _Loc = _Find_hint(_Hint, _In_place_key_extractor::_Extract(_Vals...));

  011b0	56		 push	 esi
  011b1	51		 push	 ecx
  011b2	8d 85 84 fa ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  011b8	b9 00 00 00 00	 mov	 ecx, OFFSET ?scaleMap@?5??LoadItemScale@CItemManager@@QAE_NPBD@Z@4V?$map@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@@std@@A
  011bd	50		 push	 eax
  011be	e8 00 00 00 00	 call	 ??$_Find_hint@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@?$_Tree@V?$_Tmap_traits@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_hint_result@PAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@1@QAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@1@ABU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@@Z ; std::_Tree<std::_Tmap_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Find_hint<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  011c3	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  011c7	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  011ca	66 0f d6 85 18
	fb ff ff	 movq	 QWORD PTR __Loc$21[ebp], xmm0
  011d2	89 85 20 fb ff
	ff		 mov	 DWORD PTR __Loc$21[ebp+8], eax

; 1046 :             if (_Loc._Duplicate) {

  011d8	84 c0		 test	 al, al
  011da	0f 85 d8 00 00
	00		 jne	 $LN987@LoadItemSc

; 1631 :         if (max_size() == _Get_scary()->_Mysize) {

  011e0	81 3d 04 00 00
	00 2e ba e8 02	 cmp	 DWORD PTR ?scaleMap@?5??LoadItemScale@CItemManager@@QAE_NPBD@Z@4V?$map@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@@std@@A+4, 48806446 ; 02e8ba2eH
  011ea	0f 84 1a 01 00
	00		 je	 $LN1271@LoadItemSc
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1144 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  011f0	c7 85 28 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR $T22[ebp], OFFSET ?scaleMap@?5??LoadItemScale@CItemManager@@QAE_NPBD@Z@4V?$map@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@@std@@A

; 87   :         return ::operator new(_Bytes);

  011fa	6a 58		 push	 88			; 00000058H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  011fc	c6 45 fc 17	 mov	 BYTE PTR __$EHRec$[ebp+8], 23 ; 00000017H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1151 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  01200	c7 85 2c fb ff
	ff 00 00 00 00	 mov	 DWORD PTR $T22[ebp+4], 0

; 87   :         return ::operator new(_Bytes);

  0120a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 245  :         return _Traits::_Allocate(_Bytes);

  0120f	8b f8		 mov	 edi, eax

; 87   :         return ::operator new(_Bytes);

  01211	83 c4 04	 add	 esp, 4

; 1152 :         _Ptr = _Al.allocate(1);

  01214	89 bd 2c fb ff
	ff		 mov	 DWORD PTR $T22[ebp+4], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 245  :     pair(const pair&) = default;

  0121a	ff b5 74 fb ff
	ff		 push	 DWORD PTR __First$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 806  :         : _Tree_temp_node_alloc<_Alnode>(_Al_) {

  01220	8d 77 10	 lea	 esi, DWORD PTR [edi+16]
  01223	c6 45 fc 18	 mov	 BYTE PTR __$EHRec$[ebp+8], 24 ; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 245  :     pair(const pair&) = default;

  01227	8b ce		 mov	 ecx, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 719  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  01229	89 b5 40 fb ff
	ff		 mov	 DWORD PTR $T23[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 245  :     pair(const pair&) = default;

  0122f	89 b5 44 fb ff
	ff		 mov	 DWORD PTR _this$[ebp], esi
  01235	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0123a	8b 85 74 fb ff
	ff		 mov	 eax, DWORD PTR __First$1$[ebp]
  01240	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  01243	83 c0 18	 add	 eax, 24			; 00000018H
  01246	c6 45 fc 19	 mov	 BYTE PTR __$EHRec$[ebp+8], 25 ; 00000019H
  0124a	50		 push	 eax
  0124b	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  01250	8b 85 74 fb ff
	ff		 mov	 eax, DWORD PTR __First$1$[ebp]
  01256	8d 4e 30	 lea	 ecx, DWORD PTR [esi+48]
  01259	83 c0 30	 add	 eax, 48			; 00000030H
  0125c	c6 45 fc 1a	 mov	 BYTE PTR __$EHRec$[ebp+8], 26 ; 0000001aH
  01260	50		 push	 eax
  01261	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  01266	8b 85 78 fb ff
	ff		 mov	 eax, DWORD PTR __Myhead$1$[ebp]

; 1067 :         return _Scary->_Insert_node(_Loc._Location, _Inserted);

  0126c	b9 00 00 00 00	 mov	 ecx, OFFSET ?scaleMap@?5??LoadItemScale@CItemManager@@QAE_NPBD@Z@4V?$map@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@@std@@A
  01271	57		 push	 edi
  01272	ff b5 1c fb ff
	ff		 push	 DWORD PTR __Loc$21[ebp+4]

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  01278	89 07		 mov	 DWORD PTR [edi], eax

; 1067 :         return _Scary->_Insert_node(_Loc._Location, _Inserted);

  0127a	ff b5 18 fb ff
	ff		 push	 DWORD PTR __Loc$21[ebp]

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  01280	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  01283	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 811  :         this->_Ptr->_Color = _Red;

  01286	66 c7 47 0c 00
	00		 mov	 WORD PTR [edi+12], 0

; 812  :         this->_Ptr->_Isnil = false;
; 813  :     }

  0128c	c6 45 fc 16	 mov	 BYTE PTR __$EHRec$[ebp+8], 22 ; 00000016H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 755  :     _Val         = static_cast<_Other&&>(_New_val);

  01290	c7 85 2c fb ff
	ff 00 00 00 00	 mov	 DWORD PTR $T22[ebp+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1067 :         return _Scary->_Insert_node(_Loc._Location, _Inserted);

  0129a	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Insert_node
  0129f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?scaleMap@?5??LoadItemScale@CItemManager@@QAE_NPBD@Z@4V?$map@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@@std@@A
  012a4	8d bd 48 ff ff
	ff		 lea	 edi, DWORD PTR $T27[ebp+648]
  012aa	8b b5 74 fb ff
	ff		 mov	 esi, DWORD PTR __First$1$[ebp]
  012b0	89 85 78 fb ff
	ff		 mov	 DWORD PTR __Myhead$1$[ebp], eax
  012b6	eb 00		 jmp	 SHORT $LN987@LoadItemSc
$LN987@LoadItemSc:

; 1260 :         for (; _First != _Last; ++_First) {

  012b8	8b 8d 60 fb ff
	ff		 mov	 ecx, DWORD PTR $T25[ebp]
  012be	83 c6 48	 add	 esi, 72			; 00000048H
  012c1	89 b5 74 fb ff
	ff		 mov	 DWORD PTR __First$1$[ebp], esi
  012c7	3b f7		 cmp	 esi, edi
  012c9	0f 85 e1 fe ff
	ff		 jne	 $LL989@LoadItemSc
  012cf	eb 00		 jmp	 SHORT $LN988@LoadItemSc
$LN988@LoadItemSc:
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 409  : 		static std::map<std::pair<std::string, std::string>, std::string> scaleMap = {

  012d1	68 00 00 00 00	 push	 OFFSET ??1?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@QAE@XZ
  012d6	6a 09		 push	 9
  012d8	6a 48		 push	 72			; 00000048H
  012da	8d 85 c0 fc ff
	ff		 lea	 eax, DWORD PTR $T27[ebp]
  012e0	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  012e4	50		 push	 eax
  012e5	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  012ea	68 00 00 00 00	 push	 OFFSET ??__FscaleMap@?5??LoadItemScale@CItemManager@@QAE_NPBD@Z@YAXXZ ; `CItemManager::LoadItemScale'::`6'::`dynamic atexit destructor for 'scaleMap''
  012ef	e8 00 00 00 00	 call	 _atexit
  012f4	68 00 00 00 00	 push	 OFFSET ?$TSS0@?5??LoadItemScale@CItemManager@@QAE_NPBD@Z@4HA
  012f9	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  012fd	e8 00 00 00 00	 call	 __Init_thread_footer
  01302	83 c4 08	 add	 esp, 8
  01305	e9 60 ee ff ff	 jmp	 $LN1326@LoadItemSc
$LN1271@LoadItemSc:

; 451  : }

  0130a	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN194@LoadItemSc:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0130f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1333@LoadItemSc:
  01314	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$0:
  00000	8d 8d 7c fb ff
	ff		 lea	 ecx, DWORD PTR _kFile$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$1:
  0000b	8d 8d c0 fa ff
	ff		 lea	 ecx, DWORD PTR _kTextFileLoader$[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1CMemoryTextFileLoader@@UAE@XZ ; CMemoryTextFileLoader::~CMemoryTextFileLoader
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$2:
  00016	8d 8d 64 fb ff
	ff		 lea	 ecx, DWORD PTR _kTokenVector$[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$14:
  00021	8d 4d c0	 lea	 ecx, DWORD PTR _strJob$32[ebp]
  00024	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$15:
  00029	8d 4d d8	 lea	 ecx, DWORD PTR _strSex$33[ebp]
  0002c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$16:
  00031	8d 4d a8	 lea	 ecx, DWORD PTR _strPositionX$31[ebp]
  00034	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$17:
  00039	8d 4d 90	 lea	 ecx, DWORD PTR _strPositionY$30[ebp]
  0003c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$50:
  00041	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR $T28[ebp]
  00047	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$18:
  0004c	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR $T28[ebp]
  00052	e9 00 00 00 00	 jmp	 ??1?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@XZ
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$54:
  00057	8d 8d d0 fa ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  0005d	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$19:
  00062	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _strPositionZ$29[ebp]
  00068	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$20:
  0006d	8b 8d 90 fa ff
	ff		 mov	 ecx, DWORD PTR $T3[ebp]
  00073	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$21:
  00078	8b 8d a8 fa ff
	ff		 mov	 ecx, DWORD PTR $T9[ebp]
  0007e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$22:
  00083	8b 8d 94 fa ff
	ff		 mov	 ecx, DWORD PTR $T4[ebp]
  00089	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$23:
  0008e	8b 8d 98 fa ff
	ff		 mov	 ecx, DWORD PTR $T5[ebp]
  00094	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$24:
  00099	8b 8d 9c fa ff
	ff		 mov	 ecx, DWORD PTR $T6[ebp]
  0009f	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$25:
  000a4	8b 8d a0 fa ff
	ff		 mov	 ecx, DWORD PTR $T7[ebp]
  000aa	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$26:
  000af	8b 8d a4 fa ff
	ff		 mov	 ecx, DWORD PTR $T8[ebp]
  000b5	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$3:
  000ba	68 00 00 00 00	 push	 OFFSET ?$TSS0@?5??LoadItemScale@CItemManager@@QAE_NPBD@Z@4HA
  000bf	e8 00 00 00 00	 call	 __Init_thread_abort
  000c4	59		 pop	 ecx
  000c5	c3		 ret	 0
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$71:
  000c6	8d 8d c0 fc ff
	ff		 lea	 ecx, DWORD PTR $T27[ebp]
  000cc	e9 00 00 00 00	 jmp	 ??1?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@XZ
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$4:
  000d1	8d 8d c0 fc ff
	ff		 lea	 ecx, DWORD PTR $T27[ebp]
  000d7	e9 00 00 00 00	 jmp	 ??1?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@QAE@XZ
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$75:
  000dc	8d 8d 08 fd ff
	ff		 lea	 ecx, DWORD PTR $T27[ebp+72]
  000e2	e9 00 00 00 00	 jmp	 ??1?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@XZ
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$5:
  000e7	8d 8d 08 fd ff
	ff		 lea	 ecx, DWORD PTR $T27[ebp+72]
  000ed	e9 00 00 00 00	 jmp	 ??1?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@QAE@XZ
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$101:
  000f2	8d 8d 50 fd ff
	ff		 lea	 ecx, DWORD PTR $T27[ebp+144]
  000f8	e9 00 00 00 00	 jmp	 ??1?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@XZ
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$6:
  000fd	8d 8d 50 fd ff
	ff		 lea	 ecx, DWORD PTR $T27[ebp+144]
  00103	e9 00 00 00 00	 jmp	 ??1?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@QAE@XZ
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$113:
  00108	8d 8d 98 fd ff
	ff		 lea	 ecx, DWORD PTR $T27[ebp+216]
  0010e	e9 00 00 00 00	 jmp	 ??1?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@XZ
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$7:
  00113	8d 8d 98 fd ff
	ff		 lea	 ecx, DWORD PTR $T27[ebp+216]
  00119	e9 00 00 00 00	 jmp	 ??1?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@QAE@XZ
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$109:
  0011e	8d 8d e0 fd ff
	ff		 lea	 ecx, DWORD PTR $T27[ebp+288]
  00124	e9 00 00 00 00	 jmp	 ??1?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@XZ
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$8:
  00129	8d 8d e0 fd ff
	ff		 lea	 ecx, DWORD PTR $T27[ebp+288]
  0012f	e9 00 00 00 00	 jmp	 ??1?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@QAE@XZ
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$105:
  00134	8d 8d 28 fe ff
	ff		 lea	 ecx, DWORD PTR $T27[ebp+360]
  0013a	e9 00 00 00 00	 jmp	 ??1?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@XZ
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$9:
  0013f	8d 8d 28 fe ff
	ff		 lea	 ecx, DWORD PTR $T27[ebp+360]
  00145	e9 00 00 00 00	 jmp	 ??1?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@QAE@XZ
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$97:
  0014a	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR $T27[ebp+432]
  00150	e9 00 00 00 00	 jmp	 ??1?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@XZ
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$10:
  00155	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR $T27[ebp+432]
  0015b	e9 00 00 00 00	 jmp	 ??1?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@QAE@XZ
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$93:
  00160	8d 8d b8 fe ff
	ff		 lea	 ecx, DWORD PTR $T27[ebp+504]
  00166	e9 00 00 00 00	 jmp	 ??1?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@XZ
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$11:
  0016b	8d 8d b8 fe ff
	ff		 lea	 ecx, DWORD PTR $T27[ebp+504]
  00171	e9 00 00 00 00	 jmp	 ??1?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@QAE@XZ
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$89:
  00176	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T27[ebp+576]
  0017c	e9 00 00 00 00	 jmp	 ??1?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@XZ
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$13:
  00181	68 00 00 00 00	 push	 OFFSET ??1?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@QAE@XZ
  00186	6a 09		 push	 9
  00188	6a 48		 push	 72			; 00000048H
  0018a	8d 85 c0 fc ff
	ff		 lea	 eax, DWORD PTR $T27[ebp]
  00190	50		 push	 eax
  00191	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00196	c3		 ret	 0
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$79:
  00197	b9 00 00 00 00	 mov	 ecx, OFFSET ?scaleMap@?5??LoadItemScale@CItemManager@@QAE_NPBD@Z@4V?$map@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@@std@@A
  0019c	e9 00 00 00 00	 jmp	 ??1?$_Tree@V?$_Tmap_traits@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@U?$less@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::~_Tree<std::_Tmap_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$82:
  001a1	8d 8d 28 fb ff
	ff		 lea	 ecx, DWORD PTR $T22[ebp]
  001a7	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$81:
  001ac	8d 8d 28 fb ff
	ff		 lea	 ecx, DWORD PTR $T22[ebp]
  001b2	e9 00 00 00 00	 jmp	 ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@PAX@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$85:
  001b7	8b 8d 44 fb ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  001bd	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadItemScale@CItemManager@@QAE_NPBD@Z$83:
  001c2	8b 8d 40 fb ff
	ff		 mov	 ecx, DWORD PTR $T23[ebp]
  001c8	e9 00 00 00 00	 jmp	 ??1?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@XZ
  001cd	cc		 int	 3
  001ce	cc		 int	 3
  001cf	cc		 int	 3
  001d0	cc		 int	 3
  001d1	cc		 int	 3
__ehhandler$?LoadItemScale@CItemManager@@QAE_NPBD@Z:
  001d2	90		 npad	 1
  001d3	90		 npad	 1
  001d4	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  001d8	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  001db	8b 8a 84 fa ff
	ff		 mov	 ecx, DWORD PTR [edx-1404]
  001e1	33 c8		 xor	 ecx, eax
  001e3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e8	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  001eb	33 c8		 xor	 ecx, eax
  001ed	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f2	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadItemScale@CItemManager@@QAE_NPBD@Z
  001f7	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadItemScale@CItemManager@@QAE_NPBD@Z ENDP		; CItemManager::LoadItemScale
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
;	COMDAT ?LoadItemTable@CItemManager@@QAE_NPBD@Z
_TEXT	SEGMENT
$T2 = -744						; size = 12
$T3 = -732						; size = 8
__Loc$4 = -724						; size = 12
__Loc$5 = -712						; size = 12
__Loc$6 = -700						; size = 12
__Loc$7 = -688						; size = 12
_pvData$ = -676						; size = 4
_zObj$ = -672						; size = 20
$T8 = -652						; size = 8
$T9 = -644						; size = 8
$T10 = -636						; size = 8
_pbData$1$ = -628					; size = 4
$T11 = -624						; size = 4
_dwFourCC$ = -620					; size = 4
__Scary$1$ = -616					; size = 4
_dwElements$ = -612					; size = 4
tv3244 = -608						; size = 4
tv3243 = -604						; size = 4
_i$1$ = -600						; size = 4
_this$GSCopy$1$ = -596					; size = 4
_dwDataSize$ = -592					; size = 4
_dwVersion$ = -588					; size = 4
tv3241 = -584						; size = 4
_dwStride$ = -580					; size = 4
_itemNameMap$ = -576					; size = 8
_pItemData$12 = -568					; size = 4
$T13 = -568						; size = 4
_dwVnum$14 = -568					; size = 4
_file$ = -564						; size = 324
_t$15 = -240						; size = 156
_szName$ = -84						; size = 65
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szFileName$ = 8					; size = 4
?LoadItemTable@CItemManager@@QAE_NPBD@Z PROC		; CItemManager::LoadItemTable, COMDAT
; _this$ = ecx

; 256  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadItemTable@CItemManager@@QAE_NPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec dc 02 00
	00		 sub	 esp, 732		; 000002dcH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b d9		 mov	 ebx, ecx
  00030	89 9d ac fd ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], ebx
  00036	8b 75 08	 mov	 esi, DWORD PTR _c_szFileName$[ebp]

; 257  : 	CMappedFile file;

  00039	8d 8d cc fd ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  0003f	e8 00 00 00 00	 call	 ??0CMappedFile@@QAE@XZ	; CMappedFile::CMappedFile

; 258  : 	LPCVOID pvData;
; 259  : 
; 260  : 	if (!CEterPackManager::Instance().Get(file, c_szFileName, &pvData))

  00044	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A ; CSingleton<CEterPackManager>::ms_singleton
  0004a	8d 85 5c fd ff
	ff		 lea	 eax, DWORD PTR _pvData$[ebp]
  00050	50		 push	 eax
  00051	56		 push	 esi
  00052	8d 85 cc fd ff
	ff		 lea	 eax, DWORD PTR _file$[ebp]
  00058	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 ?Get@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z ; CEterPackManager::Get
  00065	84 c0		 test	 al, al
  00067	74 7b		 je	 SHORT $LN26@LoadItemTa

; 261  : 		return false;
; 262  : 
; 263  : 	DWORD dwFourCC, dwElements, dwDataSize;
; 264  : 	DWORD dwVersion=0;
; 265  : 	DWORD dwStride=0;
; 266  : 
; 267  : 	file.Read(&dwFourCC, sizeof(DWORD));

  00069	6a 04		 push	 4
  0006b	8d 85 94 fd ff
	ff		 lea	 eax, DWORD PTR _dwFourCC$[ebp]
  00071	c7 85 b4 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _dwVersion$[ebp], 0
  0007b	50		 push	 eax
  0007c	8d 8d cc fd ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  00082	c7 85 bc fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _dwStride$[ebp], 0
  0008c	e8 00 00 00 00	 call	 ?Read@CMappedFile@@QAEHPAXH@Z ; CMappedFile::Read

; 268  : 
; 269  : 	if (dwFourCC == MAKEFOURCC('M', 'I', 'P', 'X'))

  00091	8b 85 94 fd ff
	ff		 mov	 eax, DWORD PTR _dwFourCC$[ebp]
  00097	3d 4d 49 50 58	 cmp	 eax, 1481656653		; 5850494dH
  0009c	0f 85 9e 00 00
	00		 jne	 $LN6@LoadItemTa

; 270  : 	{
; 271  : 		file.Read(&dwVersion, sizeof(DWORD));

  000a2	6a 04		 push	 4
  000a4	8d 85 b4 fd ff
	ff		 lea	 eax, DWORD PTR _dwVersion$[ebp]
  000aa	50		 push	 eax
  000ab	8d 8d cc fd ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  000b1	e8 00 00 00 00	 call	 ?Read@CMappedFile@@QAEHPAXH@Z ; CMappedFile::Read

; 272  : 		file.Read(&dwStride, sizeof(DWORD));

  000b6	6a 04		 push	 4
  000b8	8d 85 bc fd ff
	ff		 lea	 eax, DWORD PTR _dwStride$[ebp]
  000be	50		 push	 eax
  000bf	8d 8d cc fd ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  000c5	e8 00 00 00 00	 call	 ?Read@CMappedFile@@QAEHPAXH@Z ; CMappedFile::Read

; 273  : 
; 274  : 		if (dwVersion != 1)

  000ca	8b 85 b4 fd ff
	ff		 mov	 eax, DWORD PTR _dwVersion$[ebp]
  000d0	83 f8 01	 cmp	 eax, 1
  000d3	74 3c		 je	 SHORT $LN8@LoadItemTa

; 275  : 		{
; 276  : 			TraceError("CPythonItem::LoadItemTable: invalid item_proto[%s] VERSION[%d]", c_szFileName, dwVersion);

  000d5	50		 push	 eax
  000d6	56		 push	 esi
  000d7	68 00 00 00 00	 push	 OFFSET ??_C@_0DP@NBGHGGP@CPythonItem?3?3LoadItemTable?3?5inv@
  000dc	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  000e1	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN26@LoadItemTa:
  000e4	32 db		 xor	 bl, bl
$LN27@LoadItemTa:

; 374  : 	return true;

  000e6	8d 8d cc fd ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  000ec	e8 00 00 00 00	 call	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
  000f1	8a c3		 mov	 al, bl

; 375  : }

  000f3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000fd	59		 pop	 ecx
  000fe	5f		 pop	 edi
  000ff	5e		 pop	 esi
  00100	5b		 pop	 ebx
  00101	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00104	33 cd		 xor	 ecx, ebp
  00106	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010b	8b e5		 mov	 esp, ebp
  0010d	5d		 pop	 ebp
  0010e	c2 04 00	 ret	 4
$LN8@LoadItemTa:
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.h

; 633  : 				switch (structSize)

  00111	8b 8d bc fd ff
	ff		 mov	 ecx, DWORD PTR _dwStride$[ebp]
  00117	8b c1		 mov	 eax, ecx
  00119	2d 98 00 00 00	 sub	 eax, 152		; 00000098H
  0011e	74 37		 je	 SHORT $LN10@LoadItemTa
  00120	83 e8 04	 sub	 eax, 4
  00123	74 32		 je	 SHORT $LN10@LoadItemTa
  00125	83 e8 02	 sub	 eax, 2
  00128	74 2d		 je	 SHORT $LN10@LoadItemTa
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 286  : 			TraceError("CPythonItem::LoadItemTable: invalid item_proto[%s] STRIDE[%d] != sizeof(SItemTable)",

  0012a	68 9c 00 00 00	 push	 156			; 0000009cH
  0012f	51		 push	 ecx
  00130	56		 push	 esi
  00131	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@FEBCGCHP@CPythonItem?3?3LoadItemTable?3?5inv@
  00136	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  0013b	83 c4 10	 add	 esp, 16			; 00000010H
  0013e	eb a4		 jmp	 SHORT $LN26@LoadItemTa
$LN6@LoadItemTa:

; 287  : 				c_szFileName, dwStride, sizeof(CItemData::TItemTable));
; 288  : 			return false;
; 289  : 		}
; 290  : 	}
; 291  : 	else if (dwFourCC != MAKEFOURCC('M', 'I', 'P', 'T'))

  00140	3d 4d 49 50 54	 cmp	 eax, 1414547789		; 5450494dH
  00145	74 10		 je	 SHORT $LN10@LoadItemTa

; 292  : 	{
; 293  : 		TraceError("CPythonItem::LoadItemTable: invalid item proto type %s", c_szFileName);

  00147	56		 push	 esi
  00148	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@PMBKMONN@CPythonItem?3?3LoadItemTable?3?5inv@
  0014d	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00152	83 c4 08	 add	 esp, 8
  00155	eb 8d		 jmp	 SHORT $LN26@LoadItemTa
$LN10@LoadItemTa:

; 294  : 		return false;
; 295  : 	}
; 296  : 
; 297  : 	file.Read(&dwElements, sizeof(DWORD));

  00157	6a 04		 push	 4
  00159	8d 85 9c fd ff
	ff		 lea	 eax, DWORD PTR _dwElements$[ebp]
  0015f	50		 push	 eax
  00160	8d 8d cc fd ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  00166	e8 00 00 00 00	 call	 ?Read@CMappedFile@@QAEHPAXH@Z ; CMappedFile::Read

; 298  : 	file.Read(&dwDataSize, sizeof(DWORD));

  0016b	6a 04		 push	 4
  0016d	8d 85 b0 fd ff
	ff		 lea	 eax, DWORD PTR _dwDataSize$[ebp]
  00173	50		 push	 eax
  00174	8d 8d cc fd ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  0017a	e8 00 00 00 00	 call	 ?Read@CMappedFile@@QAEHPAXH@Z ; CMappedFile::Read

; 299  : 
; 300  : 	BYTE * pbData = new BYTE[dwDataSize];

  0017f	ff b5 b0 fd ff
	ff		 push	 DWORD PTR _dwDataSize$[ebp]
  00185	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0018a	83 c4 04	 add	 esp, 4

; 301  : 	file.Read(pbData, dwDataSize);

  0018d	8d 8d cc fd ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  00193	8b f0		 mov	 esi, eax
  00195	89 b5 8c fd ff
	ff		 mov	 DWORD PTR _pbData$1$[ebp], esi
  0019b	ff b5 b0 fd ff
	ff		 push	 DWORD PTR _dwDataSize$[ebp]
  001a1	56		 push	 esi
  001a2	e8 00 00 00 00	 call	 ?Read@CMappedFile@@QAEHPAXH@Z ; CMappedFile::Read

; 302  : 
; 303  : 	/////
; 304  : 
; 305  : 	CLZObject zObj;

  001a7	8d 8d 60 fd ff
	ff		 lea	 ecx, DWORD PTR _zObj$[ebp]
  001ad	e8 00 00 00 00	 call	 ??0CLZObject@@QAE@XZ	; CLZObject::CLZObject

; 306  : 
; 307  : 	if (!CLZO::Instance().Decompress(zObj, pbData, s_adwItemProtoKey))

  001b2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCLZO@@@@0PAVCLZO@@A ; CSingleton<CLZO>::ms_singleton
  001b8	8d 85 60 fd ff
	ff		 lea	 eax, DWORD PTR _zObj$[ebp]
  001be	68 00 00 00 00	 push	 OFFSET ?s_adwItemProtoKey@@3PAKA
  001c3	56		 push	 esi
  001c4	50		 push	 eax
  001c5	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  001c9	e8 00 00 00 00	 call	 ?Decompress@CLZO@@QAE_NAAVCLZObject@@PBEPAK@Z ; CLZO::Decompress
  001ce	84 c0		 test	 al, al
  001d0	75 1b		 jne	 SHORT $LN11@LoadItemTa

; 308  : 	{
; 309  : 		delete [] pbData;

  001d2	56		 push	 esi
  001d3	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  001d8	83 c4 04	 add	 esp, 4

; 374  : 	return true;

  001db	8d 8d 60 fd ff
	ff		 lea	 ecx, DWORD PTR _zObj$[ebp]
  001e1	32 db		 xor	 bl, bl
  001e3	e8 00 00 00 00	 call	 ??1CLZObject@@QAE@XZ	; CLZObject::~CLZObject
  001e8	e9 f9 fe ff ff	 jmp	 $LN27@LoadItemTa
$LN11@LoadItemTa:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  001ed	6a 18		 push	 24			; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 437  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  001ef	c7 85 c0 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _itemNameMap$[ebp], 0
  001f9	c7 85 c4 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _itemNameMap$[ebp+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  00203	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00208	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 347  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  0020b	89 00		 mov	 DWORD PTR [eax], eax

; 348  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  0020d	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 349  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  00210	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 350  :         _Pnode->_Color = _Black;

  00213	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1943 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  00219	89 85 c0 fd ff
	ff		 mov	 DWORD PTR _itemNameMap$[ebp], eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 318  : 	for (DWORD i = 0; i < dwElements; ++i)

  0021f	83 bd 9c fd ff
	ff 00		 cmp	 DWORD PTR _dwElements$[ebp], 0
  00226	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0022a	c7 85 a8 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$1$[ebp], 0
  00234	0f 86 47 06 00
	00		 jbe	 $LN411@LoadItemTa
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 437  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  0023a	33 f6		 xor	 esi, esi
  0023c	83 c3 04	 add	 ebx, 4
  0023f	33 ff		 xor	 edi, edi
  00241	89 9d 98 fd ff
	ff		 mov	 DWORD PTR __Scary$1$[ebp], ebx
  00247	89 b5 a0 fd ff
	ff		 mov	 DWORD PTR tv3244[ebp], esi
  0024d	89 bd a4 fd ff
	ff		 mov	 DWORD PTR tv3243[ebp], edi
  00253	89 b5 b8 fd ff
	ff		 mov	 DWORD PTR tv3241[ebp], esi
  00259	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@LoadItemTa:
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 321  : 		CItemData::TItemTable t = {0};

  00260	68 9c 00 00 00	 push	 156			; 0000009cH
  00265	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR _t$15[ebp]
  0026b	6a 00		 push	 0
  0026d	50		 push	 eax
  0026e	e8 00 00 00 00	 call	 _memset
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.h

; 690  : 				switch (structSize)

  00273	8b 85 bc fd ff
	ff		 mov	 eax, DWORD PTR _dwStride$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 321  : 		CItemData::TItemTable t = {0};

  00279	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.h

; 690  : 				switch (structSize)

  0027c	2d 98 00 00 00	 sub	 eax, 152		; 00000098H
  00281	0f 84 8d 01 00
	00		 je	 $LN68@LoadItemTa
  00287	83 e8 04	 sub	 eax, 4
  0028a	74 17		 je	 SHORT $LN69@LoadItemTa
  0028c	83 e8 02	 sub	 eax, 2
  0028f	0f 85 e7 02 00
	00		 jne	 $LN30@LoadItemTa

; 701  : 							ITABLE_COPY_INT(dwVnumRange);
; 702  : 						}
; 703  : 						break;
; 704  : 					case sizeof(TItemTable_r158):
; 705  : 						{
; 706  : 							ITABLE_PROCESS(158);

  00295	8b b5 b8 fd ff
	ff		 mov	 esi, DWORD PTR tv3241[ebp]
  0029b	03 b5 60 fd ff
	ff		 add	 esi, DWORD PTR _zObj$[ebp]

; 707  : 							ITABLE_COPY_INT(dwVnumRange);

  002a1	eb 08		 jmp	 SHORT $LN415@LoadItemTa
$LN69@LoadItemTa:

; 696  : 						}
; 697  : 						break;
; 698  : 					case sizeof(TItemTable_r156):
; 699  : 						{
; 700  : 							ITABLE_PROCESS(156);

  002a3	8b b5 60 fd ff
	ff		 mov	 esi, DWORD PTR _zObj$[ebp]
  002a9	03 f7		 add	 esi, edi
$LN415@LoadItemTa:
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 329  : 		DWORD dwVnum = table->dwVnum;

  002ab	8b 06		 mov	 eax, DWORD PTR [esi]
  002ad	89 85 10 ff ff
	ff		 mov	 DWORD PTR _t$15[ebp], eax
  002b3	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  002b6	6a ff		 push	 -1
  002b8	50		 push	 eax
  002b9	8d 85 18 ff ff
	ff		 lea	 eax, DWORD PTR _t$15[ebp+8]
  002bf	6a 19		 push	 25			; 00000019H
  002c1	50		 push	 eax
  002c2	e8 00 00 00 00	 call	 _strncpy_s
  002c7	6a ff		 push	 -1
  002c9	8d 46 21	 lea	 eax, DWORD PTR [esi+33]
  002cc	50		 push	 eax
  002cd	8d 85 31 ff ff
	ff		 lea	 eax, DWORD PTR _t$15[ebp+33]
  002d3	6a 19		 push	 25			; 00000019H
  002d5	50		 push	 eax
  002d6	e8 00 00 00 00	 call	 _strncpy_s
  002db	8a 46 3a	 mov	 al, BYTE PTR [esi+58]
  002de	83 c4 20	 add	 esp, 32			; 00000020H
  002e1	88 85 4a ff ff
	ff		 mov	 BYTE PTR _t$15[ebp+58], al
  002e7	8a 46 3b	 mov	 al, BYTE PTR [esi+59]
  002ea	88 85 4b ff ff
	ff		 mov	 BYTE PTR _t$15[ebp+59], al
  002f0	8a 46 3c	 mov	 al, BYTE PTR [esi+60]
  002f3	88 85 4c ff ff
	ff		 mov	 BYTE PTR _t$15[ebp+60], al
  002f9	8a 46 3d	 mov	 al, BYTE PTR [esi+61]
  002fc	88 85 4d ff ff
	ff		 mov	 BYTE PTR _t$15[ebp+61], al
  00302	8b 46 3e	 mov	 eax, DWORD PTR [esi+62]
  00305	89 85 4e ff ff
	ff		 mov	 DWORD PTR _t$15[ebp+62], eax
  0030b	8b 46 42	 mov	 eax, DWORD PTR [esi+66]
  0030e	89 85 52 ff ff
	ff		 mov	 DWORD PTR _t$15[ebp+66], eax
  00314	8b 46 46	 mov	 eax, DWORD PTR [esi+70]
  00317	89 85 56 ff ff
	ff		 mov	 DWORD PTR _t$15[ebp+70], eax
  0031d	8b 46 4a	 mov	 eax, DWORD PTR [esi+74]
  00320	89 85 5a ff ff
	ff		 mov	 DWORD PTR _t$15[ebp+74], eax
  00326	8b 46 4e	 mov	 eax, DWORD PTR [esi+78]
  00329	89 85 5e ff ff
	ff		 mov	 DWORD PTR _t$15[ebp+78], eax
  0032f	8b 46 52	 mov	 eax, DWORD PTR [esi+82]
  00332	89 85 62 ff ff
	ff		 mov	 DWORD PTR _t$15[ebp+82], eax
  00338	8a 46 56	 mov	 al, BYTE PTR [esi+86]
  0033b	88 85 66 ff ff
	ff		 mov	 BYTE PTR _t$15[ebp+86], al
  00341	8b 46 57	 mov	 eax, DWORD PTR [esi+87]
  00344	89 85 67 ff ff
	ff		 mov	 DWORD PTR _t$15[ebp+87], eax
  0034a	8a 46 5b	 mov	 al, BYTE PTR [esi+91]
  0034d	88 85 6b ff ff
	ff		 mov	 BYTE PTR _t$15[ebp+91], al
  00353	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00356	89 85 6c ff ff
	ff		 mov	 DWORD PTR _t$15[ebp+92], eax
  0035c	8a 46 60	 mov	 al, BYTE PTR [esi+96]
  0035f	88 85 70 ff ff
	ff		 mov	 BYTE PTR _t$15[ebp+96], al
  00365	8b 46 61	 mov	 eax, DWORD PTR [esi+97]
  00368	89 85 71 ff ff
	ff		 mov	 DWORD PTR _t$15[ebp+97], eax
  0036e	8a 46 65	 mov	 al, BYTE PTR [esi+101]
  00371	88 85 75 ff ff
	ff		 mov	 BYTE PTR _t$15[ebp+101], al
  00377	8b 46 66	 mov	 eax, DWORD PTR [esi+102]
  0037a	89 85 76 ff ff
	ff		 mov	 DWORD PTR _t$15[ebp+102], eax
  00380	8a 46 6a	 mov	 al, BYTE PTR [esi+106]
  00383	88 85 7a ff ff
	ff		 mov	 BYTE PTR _t$15[ebp+106], al
  00389	8b 46 6b	 mov	 eax, DWORD PTR [esi+107]
  0038c	89 85 7b ff ff
	ff		 mov	 DWORD PTR _t$15[ebp+107], eax
  00392	8b 46 6f	 mov	 eax, DWORD PTR [esi+111]
  00395	89 85 7f ff ff
	ff		 mov	 DWORD PTR _t$15[ebp+111], eax
  0039b	8b 46 73	 mov	 eax, DWORD PTR [esi+115]
  0039e	89 45 83	 mov	 DWORD PTR _t$15[ebp+115], eax
  003a1	8b 46 77	 mov	 eax, DWORD PTR [esi+119]
  003a4	89 45 87	 mov	 DWORD PTR _t$15[ebp+119], eax
  003a7	8b 46 7b	 mov	 eax, DWORD PTR [esi+123]
  003aa	89 45 8b	 mov	 DWORD PTR _t$15[ebp+123], eax
  003ad	8b 46 7f	 mov	 eax, DWORD PTR [esi+127]
  003b0	89 45 8f	 mov	 DWORD PTR _t$15[ebp+127], eax
  003b3	8b 86 83 00 00
	00		 mov	 eax, DWORD PTR [esi+131]
  003b9	89 45 93	 mov	 DWORD PTR _t$15[ebp+131], eax
  003bc	8b 86 87 00 00
	00		 mov	 eax, DWORD PTR [esi+135]
  003c2	89 45 97	 mov	 DWORD PTR _t$15[ebp+135], eax
  003c5	8b 86 8b 00 00
	00		 mov	 eax, DWORD PTR [esi+139]
  003cb	89 45 9b	 mov	 DWORD PTR _t$15[ebp+139], eax
  003ce	8b 86 8f 00 00
	00		 mov	 eax, DWORD PTR [esi+143]
  003d4	89 45 9f	 mov	 DWORD PTR _t$15[ebp+143], eax
  003d7	8b 86 93 00 00
	00		 mov	 eax, DWORD PTR [esi+147]
  003dd	89 45 a3	 mov	 DWORD PTR _t$15[ebp+147], eax
  003e0	66 8b 86 97 00
	00 00		 mov	 ax, WORD PTR [esi+151]
  003e7	66 89 45 a7	 mov	 WORD PTR _t$15[ebp+151], ax
  003eb	8a 86 99 00 00
	00		 mov	 al, BYTE PTR [esi+153]
  003f1	88 45 a9	 mov	 BYTE PTR _t$15[ebp+153], al
  003f4	8a 86 9a 00 00
	00		 mov	 al, BYTE PTR [esi+154]
  003fa	88 45 aa	 mov	 BYTE PTR _t$15[ebp+154], al
  003fd	8a 86 9b 00 00
	00		 mov	 al, BYTE PTR [esi+155]
  00403	88 45 ab	 mov	 BYTE PTR _t$15[ebp+155], al
  00406	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00409	89 85 14 ff ff
	ff		 mov	 DWORD PTR _t$15[ebp+4], eax
  0040f	e9 68 01 00 00	 jmp	 $LN30@LoadItemTa
$LN68@LoadItemTa:
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemData.h

; 694  : 							ITABLE_PROCESS(152);

  00414	03 b5 60 fd ff
	ff		 add	 esi, DWORD PTR _zObj$[ebp]
  0041a	6a ff		 push	 -1
  0041c	8b 06		 mov	 eax, DWORD PTR [esi]
  0041e	89 85 10 ff ff
	ff		 mov	 DWORD PTR _t$15[ebp], eax
  00424	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00427	50		 push	 eax
  00428	8d 85 18 ff ff
	ff		 lea	 eax, DWORD PTR _t$15[ebp+8]
  0042e	6a 19		 push	 25			; 00000019H
  00430	50		 push	 eax
  00431	e8 00 00 00 00	 call	 _strncpy_s
  00436	6a ff		 push	 -1
  00438	8d 46 1d	 lea	 eax, DWORD PTR [esi+29]
  0043b	50		 push	 eax
  0043c	8d 85 31 ff ff
	ff		 lea	 eax, DWORD PTR _t$15[ebp+33]
  00442	6a 19		 push	 25			; 00000019H
  00444	50		 push	 eax
  00445	e8 00 00 00 00	 call	 _strncpy_s
  0044a	8a 46 36	 mov	 al, BYTE PTR [esi+54]
  0044d	83 c4 20	 add	 esp, 32			; 00000020H
  00450	88 85 4a ff ff
	ff		 mov	 BYTE PTR _t$15[ebp+58], al
  00456	8a 46 37	 mov	 al, BYTE PTR [esi+55]
  00459	88 85 4b ff ff
	ff		 mov	 BYTE PTR _t$15[ebp+59], al
  0045f	8a 46 38	 mov	 al, BYTE PTR [esi+56]
  00462	88 85 4c ff ff
	ff		 mov	 BYTE PTR _t$15[ebp+60], al
  00468	8a 46 39	 mov	 al, BYTE PTR [esi+57]
  0046b	88 85 4d ff ff
	ff		 mov	 BYTE PTR _t$15[ebp+61], al
  00471	8b 46 3a	 mov	 eax, DWORD PTR [esi+58]
  00474	89 85 4e ff ff
	ff		 mov	 DWORD PTR _t$15[ebp+62], eax
  0047a	8b 46 3e	 mov	 eax, DWORD PTR [esi+62]
  0047d	89 85 52 ff ff
	ff		 mov	 DWORD PTR _t$15[ebp+66], eax
  00483	8b 46 42	 mov	 eax, DWORD PTR [esi+66]
  00486	89 85 56 ff ff
	ff		 mov	 DWORD PTR _t$15[ebp+70], eax
  0048c	8b 46 46	 mov	 eax, DWORD PTR [esi+70]
  0048f	89 85 5a ff ff
	ff		 mov	 DWORD PTR _t$15[ebp+74], eax
  00495	8b 46 4a	 mov	 eax, DWORD PTR [esi+74]
  00498	89 85 5e ff ff
	ff		 mov	 DWORD PTR _t$15[ebp+78], eax
  0049e	8b 46 4e	 mov	 eax, DWORD PTR [esi+78]
  004a1	89 85 62 ff ff
	ff		 mov	 DWORD PTR _t$15[ebp+82], eax
  004a7	8a 46 52	 mov	 al, BYTE PTR [esi+82]
  004aa	88 85 66 ff ff
	ff		 mov	 BYTE PTR _t$15[ebp+86], al
  004b0	8b 46 53	 mov	 eax, DWORD PTR [esi+83]
  004b3	89 85 67 ff ff
	ff		 mov	 DWORD PTR _t$15[ebp+87], eax
  004b9	8a 46 57	 mov	 al, BYTE PTR [esi+87]
  004bc	88 85 6b ff ff
	ff		 mov	 BYTE PTR _t$15[ebp+91], al
  004c2	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  004c5	89 85 6c ff ff
	ff		 mov	 DWORD PTR _t$15[ebp+92], eax
  004cb	8a 46 5c	 mov	 al, BYTE PTR [esi+92]
  004ce	88 85 70 ff ff
	ff		 mov	 BYTE PTR _t$15[ebp+96], al
  004d4	8b 46 5d	 mov	 eax, DWORD PTR [esi+93]
  004d7	89 85 71 ff ff
	ff		 mov	 DWORD PTR _t$15[ebp+97], eax
  004dd	8a 46 61	 mov	 al, BYTE PTR [esi+97]
  004e0	88 85 75 ff ff
	ff		 mov	 BYTE PTR _t$15[ebp+101], al
  004e6	8b 46 62	 mov	 eax, DWORD PTR [esi+98]
  004e9	89 85 76 ff ff
	ff		 mov	 DWORD PTR _t$15[ebp+102], eax
  004ef	8a 46 66	 mov	 al, BYTE PTR [esi+102]
  004f2	88 85 7a ff ff
	ff		 mov	 BYTE PTR _t$15[ebp+106], al
  004f8	8b 46 67	 mov	 eax, DWORD PTR [esi+103]
  004fb	89 85 7b ff ff
	ff		 mov	 DWORD PTR _t$15[ebp+107], eax
  00501	8b 46 6b	 mov	 eax, DWORD PTR [esi+107]
  00504	89 85 7f ff ff
	ff		 mov	 DWORD PTR _t$15[ebp+111], eax
  0050a	8b 46 6f	 mov	 eax, DWORD PTR [esi+111]
  0050d	89 45 83	 mov	 DWORD PTR _t$15[ebp+115], eax
  00510	8b 46 73	 mov	 eax, DWORD PTR [esi+115]
  00513	89 45 87	 mov	 DWORD PTR _t$15[ebp+119], eax
  00516	8b 46 77	 mov	 eax, DWORD PTR [esi+119]
  00519	89 45 8b	 mov	 DWORD PTR _t$15[ebp+123], eax
  0051c	8b 46 7b	 mov	 eax, DWORD PTR [esi+123]
  0051f	89 45 8f	 mov	 DWORD PTR _t$15[ebp+127], eax
  00522	8b 46 7f	 mov	 eax, DWORD PTR [esi+127]
  00525	89 45 93	 mov	 DWORD PTR _t$15[ebp+131], eax
  00528	8b 86 83 00 00
	00		 mov	 eax, DWORD PTR [esi+131]
  0052e	89 45 97	 mov	 DWORD PTR _t$15[ebp+135], eax
  00531	8b 86 87 00 00
	00		 mov	 eax, DWORD PTR [esi+135]
  00537	89 45 9b	 mov	 DWORD PTR _t$15[ebp+139], eax
  0053a	8b 86 8b 00 00
	00		 mov	 eax, DWORD PTR [esi+139]
  00540	89 45 9f	 mov	 DWORD PTR _t$15[ebp+143], eax
  00543	8b 86 8f 00 00
	00		 mov	 eax, DWORD PTR [esi+143]
  00549	89 45 a3	 mov	 DWORD PTR _t$15[ebp+147], eax
  0054c	66 8b 86 93 00
	00 00		 mov	 ax, WORD PTR [esi+147]
  00553	66 89 45 a7	 mov	 WORD PTR _t$15[ebp+151], ax
  00557	8a 86 95 00 00
	00		 mov	 al, BYTE PTR [esi+149]
  0055d	88 45 a9	 mov	 BYTE PTR _t$15[ebp+153], al
  00560	8a 86 96 00 00
	00		 mov	 al, BYTE PTR [esi+150]
  00566	88 45 aa	 mov	 BYTE PTR _t$15[ebp+154], al
  00569	8a 86 97 00 00
	00		 mov	 al, BYTE PTR [esi+151]
  0056f	88 45 ab	 mov	 BYTE PTR _t$15[ebp+155], al

; 695  : 							ITABLE_ZERO_INT(dwVnumRange);

  00572	c7 85 14 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _t$15[ebp+4], 0
$LN30@LoadItemTa:
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 329  : 		DWORD dwVnum = table->dwVnum;

  0057c	8b bd 10 ff ff
	ff		 mov	 edi, DWORD PTR _t$15[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00582	8d 85 c8 fd ff
	ff		 lea	 eax, DWORD PTR _dwVnum$14[ebp]
  00588	50		 push	 eax
  00589	8d 85 44 fd ff
	ff		 lea	 eax, DWORD PTR __Loc$6[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 329  : 		DWORD dwVnum = table->dwVnum;

  0058f	89 bd c8 fd ff
	ff		 mov	 DWORD PTR _dwVnum$14[ebp], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00595	50		 push	 eax
  00596	8b cb		 mov	 ecx, ebx
  00598	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CItemData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CItemData *> >,0> >::_Find_lower_bound<unsigned long>

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0059d	8b 9d 4c fd ff
	ff		 mov	 ebx, DWORD PTR __Loc$6[ebp+8]
  005a3	80 7b 0d 00	 cmp	 BYTE PTR [ebx+13], 0
  005a7	75 1e		 jne	 SHORT $LN409@LoadItemTa
  005a9	3b 7b 10	 cmp	 edi, DWORD PTR [ebx+16]
  005ac	72 19		 jb	 SHORT $LN409@LoadItemTa
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 332  : 		if (m_ItemMap.end() == f)

  005ae	8b 85 ac fd ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  005b4	39 58 04	 cmp	 DWORD PTR [eax+4], ebx
  005b7	74 0e		 je	 SHORT $LN409@LoadItemTa

; 359  : 		}
; 360  : 		else
; 361  : 		{
; 362  : 			pItemData = f->second;

  005b9	8b 5b 14	 mov	 ebx, DWORD PTR [ebx+20]
  005bc	89 9d c8 fd ff
	ff		 mov	 DWORD PTR _pItemData$12[ebp], ebx
  005c2	e9 0c 01 00 00	 jmp	 $LN13@LoadItemTa
$LN409@LoadItemTa:

; 333  : 		{
; 334  : 			_snprintf(szName, sizeof(szName), "icon/item/%05d.tga", dwVnum);

  005c7	57		 push	 edi
  005c8	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@KPPKEKHD@icon?1item?1?$CF05d?4tga@
  005cd	8d 45 ac	 lea	 eax, DWORD PTR _szName$[ebp]
  005d0	6a 41		 push	 65			; 00000041H
  005d2	50		 push	 eax
  005d3	e8 00 00 00 00	 call	 __snprintf

; 335  : 
; 336  : 			if (CResourceManager::Instance().IsFileExist(szName) == false)

  005d8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
  005de	8d 45 ac	 lea	 eax, DWORD PTR _szName$[ebp]
  005e1	83 c4 10	 add	 esp, 16			; 00000010H
  005e4	50		 push	 eax
  005e5	e8 00 00 00 00	 call	 ?IsFileExist@CResourceManager@@QAE_NPBD@Z ; CResourceManager::IsFileExist
  005ea	84 c0		 test	 al, al
  005ec	0f 85 9c 00 00
	00		 jne	 $LN17@LoadItemTa

; 338  : 				std::map<DWORD, DWORD>::iterator itVnum = itemNameMap.find(GetHashCode(table->szName));

  005f2	8d 85 18 ff ff
	ff		 lea	 eax, DWORD PTR _t$15[ebp+8]
  005f8	50		 push	 eax
  005f9	e8 00 00 00 00	 call	 ?GetHashCode@@YAKPBD@Z	; GetHashCode
  005fe	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00601	8d 8d c0 fd ff
	ff		 lea	 ecx, DWORD PTR _itemNameMap$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 338  : 				std::map<DWORD, DWORD>::iterator itVnum = itemNameMap.find(GetHashCode(table->szName));

  00607	8b f0		 mov	 esi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00609	8d 85 c8 fd ff
	ff		 lea	 eax, DWORD PTR $T13[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 338  : 				std::map<DWORD, DWORD>::iterator itVnum = itemNameMap.find(GetHashCode(table->szName));

  0060f	89 b5 c8 fd ff
	ff		 mov	 DWORD PTR $T13[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00615	50		 push	 eax
  00616	8d 85 38 fd ff
	ff		 lea	 eax, DWORD PTR __Loc$5[ebp]
  0061c	50		 push	 eax
  0061d	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Find_lower_bound<unsigned long>

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00622	8b 8d 40 fd ff
	ff		 mov	 ecx, DWORD PTR __Loc$5[ebp+8]
  00628	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0062c	75 12		 jne	 SHORT $LN15@LoadItemTa
  0062e	3b 71 10	 cmp	 esi, DWORD PTR [ecx+16]
  00631	72 0d		 jb	 SHORT $LN15@LoadItemTa
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 340  : 				if (itVnum != itemNameMap.end())

  00633	3b 8d c0 fd ff
	ff		 cmp	 ecx, DWORD PTR _itemNameMap$[ebp]
  00639	74 05		 je	 SHORT $LN15@LoadItemTa

; 341  : 					_snprintf(szName, sizeof(szName), "icon/item/%05d.tga", itVnum->second);

  0063b	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0063e	eb 0f		 jmp	 SHORT $LN16@LoadItemTa
$LN15@LoadItemTa:

; 342  : 				else
; 343  : 					_snprintf(szName, sizeof(szName), "icon/item/%05d.tga", dwVnum-dwVnum % 10);

  00640	b8 cd cc cc cc	 mov	 eax, -858993459		; cccccccdH
  00645	f7 e7		 mul	 edi
  00647	c1 ea 03	 shr	 edx, 3
  0064a	8d 04 92	 lea	 eax, DWORD PTR [edx+edx*4]
  0064d	03 c0		 add	 eax, eax
$LN16@LoadItemTa:

; 344  : 
; 345  : 				if (CResourceManager::Instance().IsFileExist(szName) == false)

  0064f	50		 push	 eax
  00650	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@KPPKEKHD@icon?1item?1?$CF05d?4tga@
  00655	8d 45 ac	 lea	 eax, DWORD PTR _szName$[ebp]
  00658	6a 41		 push	 65			; 00000041H
  0065a	50		 push	 eax
  0065b	e8 00 00 00 00	 call	 __snprintf
  00660	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
  00666	8d 45 ac	 lea	 eax, DWORD PTR _szName$[ebp]
  00669	83 c4 10	 add	 esp, 16			; 00000010H
  0066c	50		 push	 eax
  0066d	e8 00 00 00 00	 call	 ?IsFileExist@CResourceManager@@QAE_NPBD@Z ; CResourceManager::IsFileExist
  00672	84 c0		 test	 al, al
  00674	75 18		 jne	 SHORT $LN17@LoadItemTa

; 346  : 				{
; 347  : 					#ifdef _DEBUG
; 348  : 					TraceError("%16s(#%-5d) cannot find icon file. setting to default.", table->szName, dwVnum);
; 349  : 					#endif
; 350  : 					const DWORD EmptyBowl = 27995;
; 351  : 					_snprintf(szName, sizeof(szName), "icon/item/%05d.tga", EmptyBowl);

  00676	68 5b 6d 00 00	 push	 27995			; 00006d5bH
  0067b	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@KPPKEKHD@icon?1item?1?$CF05d?4tga@
  00680	8d 45 ac	 lea	 eax, DWORD PTR _szName$[ebp]
  00683	6a 41		 push	 65			; 00000041H
  00685	50		 push	 eax
  00686	e8 00 00 00 00	 call	 __snprintf
  0068b	83 c4 10	 add	 esp, 16			; 00000010H
$LN17@LoadItemTa:

; 352  : 				}
; 353  : 			}
; 354  : 
; 355  : 			pItemData = CItemData::New();

  0068e	e8 00 00 00 00	 call	 ?New@CItemData@@SAPAV1@XZ ; CItemData::New
  00693	8b d8		 mov	 ebx, eax

; 356  : 
; 357  : 			pItemData->SetDefaultItemData(szName);

  00695	8d 45 ac	 lea	 eax, DWORD PTR _szName$[ebp]
  00698	6a 00		 push	 0
  0069a	50		 push	 eax
  0069b	8b cb		 mov	 ecx, ebx
  0069d	89 9d c8 fd ff
	ff		 mov	 DWORD PTR _pItemData$12[ebp], ebx
  006a3	e8 00 00 00 00	 call	 ?SetDefaultItemData@CItemData@@QAEXPBD0@Z ; CItemData::SetDefaultItemData

; 358  : 			m_ItemMap.insert(TItemMap::value_type(dwVnum, pItemData));

  006a8	8b 8d 98 fd ff
	ff		 mov	 ecx, DWORD PTR __Scary$1$[ebp]
  006ae	8d 85 7c fd ff
	ff		 lea	 eax, DWORD PTR $T9[ebp]
  006b4	50		 push	 eax
  006b5	8d 85 24 fd ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  006bb	89 bd 7c fd ff
	ff		 mov	 DWORD PTR $T9[ebp], edi
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 358  : 			m_ItemMap.insert(TItemMap::value_type(dwVnum, pItemData));

  006c1	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  006c2	89 9d 80 fd ff
	ff		 mov	 DWORD PTR $T9[ebp+4], ebx
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 358  : 			m_ItemMap.insert(TItemMap::value_type(dwVnum, pItemData));

  006c8	e8 00 00 00 00	 call	 ??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCItemData@@@1@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CItemData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CItemData *> >,0> >::insert<0,0>
  006cd	8b bd 10 ff ff
	ff		 mov	 edi, DWORD PTR _t$15[ebp]
$LN13@LoadItemTa:

; 364  : 		if (itemNameMap.find(GetHashCode(table->szName)) == itemNameMap.end())

  006d3	8d 85 18 ff ff
	ff		 lea	 eax, DWORD PTR _t$15[ebp+8]
  006d9	50		 push	 eax
  006da	e8 00 00 00 00	 call	 ?GetHashCode@@YAKPBD@Z	; GetHashCode
  006df	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  006e2	8d 8d c0 fd ff
	ff		 lea	 ecx, DWORD PTR _itemNameMap$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 364  : 		if (itemNameMap.find(GetHashCode(table->szName)) == itemNameMap.end())

  006e8	8b f0		 mov	 esi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  006ea	8d 85 90 fd ff
	ff		 lea	 eax, DWORD PTR $T11[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 364  : 		if (itemNameMap.find(GetHashCode(table->szName)) == itemNameMap.end())

  006f0	89 b5 90 fd ff
	ff		 mov	 DWORD PTR $T11[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  006f6	50		 push	 eax
  006f7	8d 85 2c fd ff
	ff		 lea	 eax, DWORD PTR __Loc$4[ebp]
  006fd	50		 push	 eax
  006fe	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Find_lower_bound<unsigned long>

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00703	8b 8d 34 fd ff
	ff		 mov	 ecx, DWORD PTR __Loc$4[ebp+8]
  00709	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0070d	75 05		 jne	 SHORT $LN110@LoadItemTa
  0070f	3b 71 10	 cmp	 esi, DWORD PTR [ecx+16]
  00712	73 06		 jae	 SHORT $LN109@LoadItemTa
$LN110@LoadItemTa:

; 1373 :         return _Get_scary()->_Myhead;

  00714	8b 8d c0 fd ff
	ff		 mov	 ecx, DWORD PTR _itemNameMap$[ebp]
$LN109@LoadItemTa:
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 364  : 		if (itemNameMap.find(GetHashCode(table->szName)) == itemNameMap.end())

  0071a	3b 8d c0 fd ff
	ff		 cmp	 ecx, DWORD PTR _itemNameMap$[ebp]
  00720	0f 85 ca 00 00
	00		 jne	 $LN217@LoadItemTa

; 365  : 			itemNameMap.insert(std::map<DWORD,DWORD>::value_type(GetHashCode(table->szName),table->dwVnum));

  00726	8d 85 18 ff ff
	ff		 lea	 eax, DWORD PTR _t$15[ebp+8]
  0072c	50		 push	 eax
  0072d	e8 00 00 00 00	 call	 ?GetHashCode@@YAKPBD@Z	; GetHashCode
  00732	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00735	89 bd 88 fd ff
	ff		 mov	 DWORD PTR $T10[ebp+4], edi
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 365  : 			itemNameMap.insert(std::map<DWORD,DWORD>::value_type(GetHashCode(table->szName),table->dwVnum));

  0073b	8b f0		 mov	 esi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1002 :             _Loc                = _Find_lower_bound(_Keyval);

  0073d	8d 8d c0 fd ff
	ff		 lea	 ecx, DWORD PTR _itemNameMap$[ebp]
  00743	8d 85 84 fd ff
	ff		 lea	 eax, DWORD PTR $T10[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00749	89 b5 84 fd ff
	ff		 mov	 DWORD PTR $T10[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1002 :             _Loc                = _Find_lower_bound(_Keyval);

  0074f	50		 push	 eax
  00750	8d 85 18 fd ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  00756	50		 push	 eax
  00757	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Find_lower_bound<unsigned long>
  0075c	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00760	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00763	66 0f d6 85 50
	fd ff ff	 movq	 QWORD PTR __Loc$7[ebp], xmm0

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0076b	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0076f	75 05		 jne	 SHORT $LN406@LoadItemTa
  00771	3b 70 10	 cmp	 esi, DWORD PTR [eax+16]
  00774	73 7a		 jae	 SHORT $LN217@LoadItemTa
$LN406@LoadItemTa:

; 1631 :         if (max_size() == _Get_scary()->_Mysize) {

  00776	81 bd c4 fd ff
	ff aa aa aa 0a	 cmp	 DWORD PTR _itemNameMap$[ebp+4], 178956970 ; 0aaaaaaaH
  00780	0f 84 21 01 00
	00		 je	 $LN321@LoadItemTa

; 1008 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  00786	8b b5 c0 fd ff
	ff		 mov	 esi, DWORD PTR _itemNameMap$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1144 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  0078c	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _itemNameMap$[ebp]
  00792	89 85 74 fd ff
	ff		 mov	 DWORD PTR $T8[ebp], eax

; 87   :         return ::operator new(_Bytes);

  00798	6a 18		 push	 24			; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  0079a	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1151 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0079e	c7 85 78 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T8[ebp+4], 0

; 87   :         return ::operator new(_Bytes);

  007a8	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  007ad	8b 8d 84 fd ff
	ff		 mov	 ecx, DWORD PTR $T10[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  007b3	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 787  :     }

  007b6	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 755  :     _Val         = static_cast<_Other&&>(_New_val);

  007ba	c7 85 78 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T8[ebp+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  007c4	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  007c7	8d 8d c0 fd ff
	ff		 lea	 ecx, DWORD PTR _itemNameMap$[ebp]
  007cd	50		 push	 eax
  007ce	ff b5 54 fd ff
	ff		 push	 DWORD PTR __Loc$7[ebp+4]

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  007d4	89 78 14	 mov	 DWORD PTR [eax+20], edi

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  007d7	ff b5 50 fd ff
	ff		 push	 DWORD PTR __Loc$7[ebp]

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  007dd	89 30		 mov	 DWORD PTR [eax], esi

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  007df	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  007e2	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 811  :         this->_Ptr->_Color = _Red;

  007e5	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  007eb	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKK@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,unsigned long> > >::_Insert_node
$LN217@LoadItemTa:
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 366  : 		pItemData->SetItemTableData(table);

  007f0	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR _t$15[ebp]
  007f6	8b cb		 mov	 ecx, ebx
  007f8	50		 push	 eax
  007f9	e8 00 00 00 00	 call	 ?SetItemTableData@CItemData@@QAEXPAUSItemTable_r156@1@@Z ; CItemData::SetItemTableData

; 367  : 		if (0 != table->dwVnumRange)

  007fe	83 bd 14 ff ff
	ff 00		 cmp	 DWORD PTR _t$15[ebp+4], 0
  00805	74 26		 je	 SHORT $LN2@LoadItemTa

; 368  : 		{
; 369  : 			m_vec_ItemRange.push_back(pItemData);

  00807	8b 8d ac fd ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  0080d	83 c1 0c	 add	 ecx, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  00810	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00813	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00816	74 08		 je	 SHORT $LN231@LoadItemTa

; 797  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00818	89 18		 mov	 DWORD PTR [eax], ebx

; 798  :         } else {
; 799  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 800  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 801  :             _ASAN_VECTOR_RELEASE_GUARD;
; 802  :         }
; 803  : 
; 804  :         _Orphan_range(_Mylast, _Mylast);
; 805  :         _Ty& _Result = *_Mylast;
; 806  :         ++_Mylast;

  0081a	83 41 04 04	 add	 DWORD PTR [ecx+4], 4

; 782  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  0081e	eb 0d		 jmp	 SHORT $LN2@LoadItemTa
$LN231@LoadItemTa:

; 783  :         }
; 784  : 
; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00820	8d 95 c8 fd ff
	ff		 lea	 edx, DWORD PTR _pItemData$12[ebp]
  00826	52		 push	 edx
  00827	50		 push	 eax
  00828	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCItemData@@@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@AAEPAPAVCItemData@@QAPAV2@ABQAV2@@Z ; std::vector<CItemData *,std::allocator<CItemData *> >::_Emplace_reallocate<CItemData * const &>
$LN2@LoadItemTa:
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 318  : 	for (DWORD i = 0; i < dwElements; ++i)

  0082d	8b 9d a8 fd ff
	ff		 mov	 ebx, DWORD PTR _i$1$[ebp]
  00833	8b bd a4 fd ff
	ff		 mov	 edi, DWORD PTR tv3243[ebp]
  00839	43		 inc	 ebx
  0083a	8b b5 a0 fd ff
	ff		 mov	 esi, DWORD PTR tv3244[ebp]
  00840	81 c7 9c 00 00
	00		 add	 edi, 156		; 0000009cH
  00846	81 85 b8 fd ff
	ff 9e 00 00 00	 add	 DWORD PTR tv3241[ebp], 158 ; 0000009eH
  00850	81 c6 98 00 00
	00		 add	 esi, 152		; 00000098H
  00856	89 9d a8 fd ff
	ff		 mov	 DWORD PTR _i$1$[ebp], ebx
  0085c	89 bd a4 fd ff
	ff		 mov	 DWORD PTR tv3243[ebp], edi
  00862	89 b5 a0 fd ff
	ff		 mov	 DWORD PTR tv3244[ebp], esi
  00868	3b 9d 9c fd ff
	ff		 cmp	 ebx, DWORD PTR _dwElements$[ebp]
  0086e	73 0b		 jae	 SHORT $LN412@LoadItemTa
  00870	8b 9d 98 fd ff
	ff		 mov	 ebx, DWORD PTR __Scary$1$[ebp]
  00876	e9 e5 f9 ff ff	 jmp	 $LL4@LoadItemTa
$LN412@LoadItemTa:
  0087b	8b b5 8c fd ff
	ff		 mov	 esi, DWORD PTR _pbData$1$[ebp]
$LN411@LoadItemTa:

; 370  : 		}
; 371  : 	}
; 372  : 
; 373  : 	delete [] pbData;

  00881	56		 push	 esi
  00882	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00887	83 c4 04	 add	 esp, 4
  0088a	8d 8d c0 fd ff
	ff		 lea	 ecx, DWORD PTR _itemNameMap$[ebp]

; 374  : 	return true;

  00890	b3 01		 mov	 bl, 1
  00892	e8 00 00 00 00	 call	 ??1?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >
  00897	8d 8d 60 fd ff
	ff		 lea	 ecx, DWORD PTR _zObj$[ebp]
  0089d	e8 00 00 00 00	 call	 ??1CLZObject@@QAE@XZ	; CLZObject::~CLZObject
  008a2	e9 3f f8 ff ff	 jmp	 $LN27@LoadItemTa
$LN321@LoadItemTa:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1632 :             _Throw_tree_length_error();

  008a7	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN414@LoadItemTa:
  008ac	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadItemTable@CItemManager@@QAE_NPBD@Z$0:
  00000	8d 8d cc fd ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
__unwindfunclet$?LoadItemTable@CItemManager@@QAE_NPBD@Z$1:
  0000b	8d 8d 60 fd ff
	ff		 lea	 ecx, DWORD PTR _zObj$[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1CLZObject@@QAE@XZ	; CLZObject::~CLZObject
__unwindfunclet$?LoadItemTable@CItemManager@@QAE_NPBD@Z$2:
  00016	8d 8d c0 fd ff
	ff		 lea	 ecx, DWORD PTR _itemNameMap$[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$map@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@@std@@QAE@XZ
__unwindfunclet$?LoadItemTable@CItemManager@@QAE_NPBD@Z$6:
  00021	8d 8d 74 fd ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  00027	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,unsigned long>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,unsigned long>,void *> > >
  0002c	cc		 int	 3
  0002d	cc		 int	 3
  0002e	cc		 int	 3
  0002f	cc		 int	 3
  00030	cc		 int	 3
__ehhandler$?LoadItemTable@CItemManager@@QAE_NPBD@Z:
  00031	90		 npad	 1
  00032	90		 npad	 1
  00033	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00037	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003a	8b 8a 14 fd ff
	ff		 mov	 ecx, DWORD PTR [edx-748]
  00040	33 c8		 xor	 ecx, eax
  00042	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00047	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0004a	33 c8		 xor	 ecx, eax
  0004c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00051	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadItemTable@CItemManager@@QAE_NPBD@Z
  00056	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadItemTable@CItemManager@@QAE_NPBD@Z ENDP		; CItemManager::LoadItemTable
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
;	COMDAT ?LoadItemList@CItemManager@@QAE_NPBD@Z
_TEXT	SEGMENT
_textFileLoader$ = -904					; size = 16
_pData$ = -888						; size = 4
_dwItemVNum$1$ = -884					; size = 4
_TokenVector$ = -880					; size = 12
_this$GSCopy$1$ = -868					; size = 4
_c_szFileName$GSCopy$1$ = -864				; size = 4
_File$ = -860						; size = 324
_szMildModelPath$2 = -536				; size = 260
_szMildIconPath$3 = -276				; size = 260
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szFileName$ = 8					; size = 4
?LoadItemList@CItemManager@@QAE_NPBD@Z PROC		; CItemManager::LoadItemList, COMDAT
; _this$ = ecx

; 97   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadItemList@CItemManager@@QAE_NPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 7c 03 00
	00		 sub	 esp, 892		; 0000037cH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b f9		 mov	 edi, ecx
  00030	89 bd 9c fc ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], edi
  00036	8b 75 08	 mov	 esi, DWORD PTR _c_szFileName$[ebp]

; 98   : 	CMappedFile File;

  00039	8d 8d a4 fc ff
	ff		 lea	 ecx, DWORD PTR _File$[ebp]
  0003f	89 b5 a0 fc ff
	ff		 mov	 DWORD PTR _c_szFileName$GSCopy$1$[ebp], esi
  00045	e8 00 00 00 00	 call	 ??0CMappedFile@@QAE@XZ	; CMappedFile::CMappedFile

; 99   : 	LPCVOID pData;
; 100  : 
; 101  : 	if (!CEterPackManager::Instance().Get(File, c_szFileName, &pData))

  0004a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A ; CSingleton<CEterPackManager>::ms_singleton
  00050	8d 85 88 fc ff
	ff		 lea	 eax, DWORD PTR _pData$[ebp]
  00056	50		 push	 eax
  00057	56		 push	 esi
  00058	8d 85 a4 fc ff
	ff		 lea	 eax, DWORD PTR _File$[ebp]
  0005e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ?Get@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z ; CEterPackManager::Get
  0006b	84 c0		 test	 al, al
  0006d	75 07		 jne	 SHORT $LN5@LoadItemLi
  0006f	32 db		 xor	 bl, bl
  00071	e9 22 02 00 00	 jmp	 $LN22@LoadItemLi
$LN5@LoadItemLi:

; 102  : 		return false;
; 103  : 
; 104  : 	CMemoryTextFileLoader textFileLoader;

  00076	8d 8d 78 fc ff
	ff		 lea	 ecx, DWORD PTR _textFileLoader$[ebp]
  0007c	e8 00 00 00 00	 call	 ??0CMemoryTextFileLoader@@QAE@XZ ; CMemoryTextFileLoader::CMemoryTextFileLoader

; 105  : 	textFileLoader.Bind(File.Size(), pData);

  00081	ff b5 88 fc ff
	ff		 push	 DWORD PTR _pData$[ebp]
  00087	8d 8d a4 fc ff
	ff		 lea	 ecx, DWORD PTR _File$[ebp]
  0008d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00091	e8 00 00 00 00	 call	 ?Size@CMappedFile@@QAEKXZ ; CMappedFile::Size
  00096	50		 push	 eax
  00097	8d 8d 78 fc ff
	ff		 lea	 ecx, DWORD PTR _textFileLoader$[ebp]
  0009d	e8 00 00 00 00	 call	 ?Bind@CMemoryTextFileLoader@@QAEXHPBX@Z ; CMemoryTextFileLoader::Bind
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 398  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  000a2	c7 85 90 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR _TokenVector$[ebp], 0
  000ac	c7 85 94 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR _TokenVector$[ebp+4], 0
  000b6	c7 85 98 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR _TokenVector$[ebp+8], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 108  :     for (DWORD i = 0; i < textFileLoader.GetLineCount(); ++i)

  000c0	8d 8d 78 fc ff
	ff		 lea	 ecx, DWORD PTR _textFileLoader$[ebp]
  000c6	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000ca	33 db		 xor	 ebx, ebx
  000cc	e8 00 00 00 00	 call	 ?GetLineCount@CMemoryTextFileLoader@@QAEKXZ ; CMemoryTextFileLoader::GetLineCount
  000d1	85 c0		 test	 eax, eax
  000d3	0f 84 a7 01 00
	00		 je	 $LN3@LoadItemLi
  000d9	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@LoadItemLi:

; 109  : 	{
; 110  : 		if (!textFileLoader.SplitLine(i, &TokenVector, "\t"))

  000e0	68 00 00 00 00	 push	 OFFSET ??_C@_01GPOEFGEJ@?7@
  000e5	8d 85 90 fc ff
	ff		 lea	 eax, DWORD PTR _TokenVector$[ebp]
  000eb	50		 push	 eax
  000ec	53		 push	 ebx
  000ed	8d 8d 78 fc ff
	ff		 lea	 ecx, DWORD PTR _textFileLoader$[ebp]
  000f3	e8 00 00 00 00	 call	 ?SplitLine@CMemoryTextFileLoader@@QAE_NKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PBD@Z ; CMemoryTextFileLoader::SplitLine
  000f8	84 c0		 test	 al, al
  000fa	0f 84 6c 01 00
	00		 je	 $LN2@LoadItemLi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00100	8b 95 94 fc ff
	ff		 mov	 edx, DWORD PTR _TokenVector$[ebp+4]
  00106	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _TokenVector$[ebp]
  0010c	2b d1		 sub	 edx, ecx
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 113  : 		if (!(TokenVector.size() == 3 || TokenVector.size() == 4))

  0010e	8d 42 b8	 lea	 eax, DWORD PTR [edx-72]
  00111	83 f8 18	 cmp	 eax, 24			; 00000018H
  00114	72 1c		 jb	 SHORT $LN7@LoadItemLi
  00116	8d 42 a0	 lea	 eax, DWORD PTR [edx-96]
  00119	83 f8 18	 cmp	 eax, 24			; 00000018H
  0011c	72 14		 jb	 SHORT $LN7@LoadItemLi

; 114  : 		{
; 115  : 			TraceError(" CItemManager::LoadItemList(%s) - StrangeLine in %d\n", c_szFileName, i);

  0011e	53		 push	 ebx
  0011f	56		 push	 esi
  00120	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@BBNNBFGM@?5CItemManager?3?3LoadItemList?$CI?$CFs?$CJ@
  00125	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  0012a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 116  : 			continue;

  0012d	e9 3a 01 00 00	 jmp	 $LN2@LoadItemLi
$LN7@LoadItemLi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00132	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1889 :         return _My_data._Myfirst[_Pos];

  00136	8d 71 30	 lea	 esi, DWORD PTR [ecx+48]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  00139	72 02		 jb	 SHORT $LN32@LoadItemLi

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  0013b	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN32@LoadItemLi:
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 123  : 		DWORD dwItemVNum=atoi(c_rstrID.c_str());

  0013d	51		 push	 ecx
  0013e	e8 00 00 00 00	 call	 __atoi64
  00143	83 c4 04	 add	 esp, 4
  00146	89 85 8c fc ff
	ff		 mov	 DWORD PTR _dwItemVNum$1$[ebp], eax

; 124  : 
; 125  : 		CItemData * pItemData = MakeItemData(dwItemVNum);

  0014c	8b cf		 mov	 ecx, edi
  0014e	50		 push	 eax
  0014f	e8 00 00 00 00	 call	 ?MakeItemData@CItemManager@@QAEPAVCItemData@@K@Z ; CItemManager::MakeItemData

; 126  : 
; 127  : 		extern BOOL USE_VIETNAM_CONVERT_WEAPON_VNUM;
; 128  : 		if (USE_VIETNAM_CONVERT_WEAPON_VNUM)

  00154	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?USE_VIETNAM_CONVERT_WEAPON_VNUM@@3HA, 0 ; USE_VIETNAM_CONVERT_WEAPON_VNUM
  0015b	8b f8		 mov	 edi, eax
  0015d	0f 84 bf 00 00
	00		 je	 $LN8@LoadItemLi

; 129  : 		{
; 130  : 			extern DWORD Vietnam_ConvertWeaponVnum(DWORD vnum);
; 131  : 			DWORD dwMildItemVnum = Vietnam_ConvertWeaponVnum(dwItemVNum);

  00163	ff b5 8c fc ff
	ff		 push	 DWORD PTR _dwItemVNum$1$[ebp]
  00169	e8 00 00 00 00	 call	 ?Vietnam_ConvertWeaponVnum@@YAKK@Z ; Vietnam_ConvertWeaponVnum
  0016e	8b c8		 mov	 ecx, eax
  00170	83 c4 04	 add	 esp, 4

; 132  : 			if (dwMildItemVnum == dwItemVNum)

  00173	3b 8d 8c fc ff
	ff		 cmp	 ecx, DWORD PTR _dwItemVNum$1$[ebp]
  00179	75 3f		 jne	 SHORT $LN10@LoadItemLi

; 133  : 			{
; 134  : 				if (4 == TokenVector.size())

  0017b	8b 85 94 fc ff
	ff		 mov	 eax, DWORD PTR _TokenVector$[ebp+4]
  00181	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _TokenVector$[ebp]
  00187	2b c1		 sub	 eax, ecx
  00189	83 e8 60	 sub	 eax, 96			; 00000060H
  0018c	83 f8 18	 cmp	 eax, 24			; 00000018H
  0018f	73 19		 jae	 SHORT $LN12@LoadItemLi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00191	83 79 5c 10	 cmp	 DWORD PTR [ecx+92], 16	; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1889 :         return _My_data._Myfirst[_Pos];

  00195	8d 41 48	 lea	 eax, DWORD PTR [ecx+72]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  00198	72 02		 jb	 SHORT $LN78@LoadItemLi

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  0019a	8b 00		 mov	 eax, DWORD PTR [eax]
$LN78@LoadItemLi:

; 2244 :         return _BUF_SIZE <= _Myres;

  0019c	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2236 :         if (_Large_string_engaged()) {

  001a0	72 12		 jb	 SHORT $LN13@LoadItemLi

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  001a2	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 143  : 			}

  001a4	50		 push	 eax
  001a5	e9 ae 00 00 00	 jmp	 $LN101@LoadItemLi
$LN12@LoadItemLi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  001aa	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2236 :         if (_Large_string_engaged()) {

  001ae	72 02		 jb	 SHORT $LN92@LoadItemLi

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  001b0	8b 36		 mov	 esi, DWORD PTR [esi]
$LN92@LoadItemLi:
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 141  : 					pItemData->SetDefaultItemData(c_rstrIcon.c_str());

  001b2	33 c0		 xor	 eax, eax
$LN13@LoadItemLi:

; 143  : 			}

  001b4	50		 push	 eax
  001b5	e9 9e 00 00 00	 jmp	 $LN101@LoadItemLi
$LN10@LoadItemLi:

; 144  : 			else
; 145  : 			{
; 146  : 				DWORD dwMildBaseVnum = dwMildItemVnum / 10 * 10;

  001ba	b8 cd cc cc cc	 mov	 eax, -858993459		; cccccccdH
  001bf	f7 e1		 mul	 ecx

; 147  : 				char szMildIconPath[MAX_PATH];
; 148  : 				sprintf(szMildIconPath, "icon/item/%.5d.tga", dwMildBaseVnum);

  001c1	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _szMildIconPath$3[ebp]
  001c7	c1 ea 03	 shr	 edx, 3
  001ca	8d 34 92	 lea	 esi, DWORD PTR [edx+edx*4]
  001cd	03 f6		 add	 esi, esi
  001cf	56		 push	 esi
  001d0	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@MGMLGJGK@icon?1item?1?$CF?45d?4tga@
  001d5	50		 push	 eax
  001d6	e8 00 00 00 00	 call	 _sprintf

; 149  : 				if (4 == TokenVector.size())

  001db	8b 85 94 fc ff
	ff		 mov	 eax, DWORD PTR _TokenVector$[ebp+4]
  001e1	83 c4 0c	 add	 esp, 12			; 0000000cH
  001e4	2b 85 90 fc ff
	ff		 sub	 eax, DWORD PTR _TokenVector$[ebp]
  001ea	83 e8 60	 sub	 eax, 96			; 00000060H
  001ed	83 f8 18	 cmp	 eax, 24			; 00000018H
  001f0	73 25		 jae	 SHORT $LN14@LoadItemLi

; 150  : 				{
; 151  : 					char szMildModelPath[MAX_PATH];
; 152  : 					sprintf(szMildModelPath, "d:/ymir work/item/weapon/%.5d.gr2", dwMildBaseVnum);

  001f2	56		 push	 esi
  001f3	8d 85 e8 fd ff
	ff		 lea	 eax, DWORD PTR _szMildModelPath$2[ebp]
  001f9	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@GKBFKKKF@d?3?1ymir?5work?1item?1weapon?1?$CF?45d?4g@
  001fe	50		 push	 eax
  001ff	e8 00 00 00 00	 call	 _sprintf
  00204	83 c4 0c	 add	 esp, 12			; 0000000cH

; 153  : 					pItemData->SetDefaultItemData(szMildIconPath, szMildModelPath);

  00207	8d 85 e8 fd ff
	ff		 lea	 eax, DWORD PTR _szMildModelPath$2[ebp]
  0020d	50		 push	 eax
  0020e	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _szMildIconPath$3[ebp]
  00214	50		 push	 eax

; 154  : 				}

  00215	eb 42		 jmp	 SHORT $LN102@LoadItemLi
$LN14@LoadItemLi:

; 155  : 				else
; 156  : 				{
; 157  : 					pItemData->SetDefaultItemData(szMildIconPath);

  00217	6a 00		 push	 0
  00219	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _szMildIconPath$3[ebp]
  0021f	50		 push	 eax

; 158  : 				}
; 159  : 			}
; 160  : 		}

  00220	eb 37		 jmp	 SHORT $LN102@LoadItemLi
$LN8@LoadItemLi:

; 161  : 		else
; 162  : 		{
; 163  : 			if (4 == TokenVector.size())

  00222	8b 85 94 fc ff
	ff		 mov	 eax, DWORD PTR _TokenVector$[ebp+4]
  00228	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR _TokenVector$[ebp]
  0022e	2b c1		 sub	 eax, ecx
  00230	83 e8 60	 sub	 eax, 96			; 00000060H
  00233	83 f8 18	 cmp	 eax, 24			; 00000018H
  00236	73 16		 jae	 SHORT $LN16@LoadItemLi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00238	83 79 5c 10	 cmp	 DWORD PTR [ecx+92], 16	; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1889 :         return _My_data._Myfirst[_Pos];

  0023c	8d 41 48	 lea	 eax, DWORD PTR [ecx+72]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  0023f	72 02		 jb	 SHORT $LN55@LoadItemLi

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  00241	8b 00		 mov	 eax, DWORD PTR [eax]
$LN55@LoadItemLi:

; 2244 :         return _BUF_SIZE <= _Myres;

  00243	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2236 :         if (_Large_string_engaged()) {

  00247	72 02		 jb	 SHORT $LN62@LoadItemLi

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  00249	8b 36		 mov	 esi, DWORD PTR [esi]
$LN62@LoadItemLi:
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 166  : 				pItemData->SetDefaultItemData(c_rstrIcon.c_str(), c_rstrModelFileName.c_str());

  0024b	50		 push	 eax

; 167  : 			}

  0024c	eb 0a		 jmp	 SHORT $LN101@LoadItemLi
$LN16@LoadItemLi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  0024e	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2236 :         if (_Large_string_engaged()) {

  00252	72 02		 jb	 SHORT $LN69@LoadItemLi

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  00254	8b 36		 mov	 esi, DWORD PTR [esi]
$LN69@LoadItemLi:
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 170  : 				pItemData->SetDefaultItemData(c_rstrIcon.c_str());

  00256	6a 00		 push	 0
$LN101@LoadItemLi:

; 108  :     for (DWORD i = 0; i < textFileLoader.GetLineCount(); ++i)

  00258	56		 push	 esi
$LN102@LoadItemLi:
  00259	8b cf		 mov	 ecx, edi
  0025b	e8 00 00 00 00	 call	 ?SetDefaultItemData@CItemData@@QAEXPBD0@Z ; CItemData::SetDefaultItemData
  00260	8b b5 a0 fc ff
	ff		 mov	 esi, DWORD PTR _c_szFileName$GSCopy$1$[ebp]
  00266	8b bd 9c fc ff
	ff		 mov	 edi, DWORD PTR _this$GSCopy$1$[ebp]
$LN2@LoadItemLi:
  0026c	8d 8d 78 fc ff
	ff		 lea	 ecx, DWORD PTR _textFileLoader$[ebp]
  00272	43		 inc	 ebx
  00273	e8 00 00 00 00	 call	 ?GetLineCount@CMemoryTextFileLoader@@QAEKXZ ; CMemoryTextFileLoader::GetLineCount
  00278	3b d8		 cmp	 ebx, eax
  0027a	0f 82 60 fe ff
	ff		 jb	 $LL4@LoadItemLi
$LN3@LoadItemLi:

; 171  : 			}
; 172  : 		}
; 173  : 	}
; 174  : 
; 175  : 	return true;

  00280	8d 8d 90 fc ff
	ff		 lea	 ecx, DWORD PTR _TokenVector$[ebp]
  00286	b3 01		 mov	 bl, 1
  00288	e8 00 00 00 00	 call	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  0028d	8d 8d 78 fc ff
	ff		 lea	 ecx, DWORD PTR _textFileLoader$[ebp]
  00293	e8 00 00 00 00	 call	 ??1CMemoryTextFileLoader@@UAE@XZ ; CMemoryTextFileLoader::~CMemoryTextFileLoader
$LN22@LoadItemLi:
  00298	8d 8d a4 fc ff
	ff		 lea	 ecx, DWORD PTR _File$[ebp]
  0029e	e8 00 00 00 00	 call	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
  002a3	8a c3		 mov	 al, bl

; 176  : }

  002a5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002a8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002af	59		 pop	 ecx
  002b0	5f		 pop	 edi
  002b1	5e		 pop	 esi
  002b2	5b		 pop	 ebx
  002b3	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002b6	33 cd		 xor	 ecx, ebp
  002b8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002bd	8b e5		 mov	 esp, ebp
  002bf	5d		 pop	 ebp
  002c0	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadItemList@CItemManager@@QAE_NPBD@Z$0:
  00000	8d 8d a4 fc ff
	ff		 lea	 ecx, DWORD PTR _File$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
__unwindfunclet$?LoadItemList@CItemManager@@QAE_NPBD@Z$1:
  0000b	8d 8d 78 fc ff
	ff		 lea	 ecx, DWORD PTR _textFileLoader$[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1CMemoryTextFileLoader@@UAE@XZ ; CMemoryTextFileLoader::~CMemoryTextFileLoader
__unwindfunclet$?LoadItemList@CItemManager@@QAE_NPBD@Z$2:
  00016	8d 8d 90 fc ff
	ff		 lea	 ecx, DWORD PTR _TokenVector$[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
  00024	cc		 int	 3
  00025	cc		 int	 3
__ehhandler$?LoadItemList@CItemManager@@QAE_NPBD@Z:
  00026	90		 npad	 1
  00027	90		 npad	 1
  00028	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002f	8b 8a 74 fc ff
	ff		 mov	 ecx, DWORD PTR [edx-908]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0003f	33 c8		 xor	 ecx, eax
  00041	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00046	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadItemList@CItemManager@@QAE_NPBD@Z
  0004b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadItemList@CItemManager@@QAE_NPBD@Z ENDP		; CItemManager::LoadItemList
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
;	COMDAT ?LoadItemDesc@CItemManager@@QAE_NPBD@Z
_TEXT	SEGMENT
__Loc$2 = -452						; size = 12
_kTextFileLoader$ = -440				; size = 16
_c_rstSumm$1$ = -424					; size = 4
_c_rstDesc$1$ = -420					; size = 4
_pvData$ = -416						; size = 4
_this$1$ = -412						; size = 4
_dwVnum$3 = -408					; size = 4
_kTokenVector$ = -404					; size = 12
$T4 = -389						; size = 1
_kFile$ = -388						; size = 324
$T5 = -64						; size = 24
_stTemp$ = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szFileName$ = 8					; size = 4
?LoadItemDesc@CItemManager@@QAE_NPBD@Z PROC		; CItemManager::LoadItemDesc, COMDAT
; _this$ = ecx

; 198  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadItemDesc@CItemManager@@QAE_NPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec b8 01 00
	00		 sub	 esp, 440		; 000001b8H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	89 8d 64 fe ff
	ff		 mov	 DWORD PTR _this$1$[ebp], ecx
  00033	8b 75 08	 mov	 esi, DWORD PTR _c_szFileName$[ebp]

; 199  : 	const VOID* pvData;
; 200  : 	CMappedFile kFile;

  00036	8d 8d 7c fe ff
	ff		 lea	 ecx, DWORD PTR _kFile$[ebp]
  0003c	e8 00 00 00 00	 call	 ??0CMappedFile@@QAE@XZ	; CMappedFile::CMappedFile

; 201  : 	if (!CEterPackManager::Instance().Get(kFile, c_szFileName, &pvData))

  00041	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A ; CSingleton<CEterPackManager>::ms_singleton
  00047	8d 85 60 fe ff
	ff		 lea	 eax, DWORD PTR _pvData$[ebp]
  0004d	50		 push	 eax
  0004e	56		 push	 esi
  0004f	8d 85 7c fe ff
	ff		 lea	 eax, DWORD PTR _kFile$[ebp]
  00055	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?Get@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z ; CEterPackManager::Get
  00062	84 c0		 test	 al, al
  00064	75 1a		 jne	 SHORT $LN7@LoadItemDe

; 202  : 	{
; 203  : 		Tracenf("CItemManager::LoadItemDesc(c_szFileName=%s) - Load Error", c_szFileName);

  00066	56		 push	 esi
  00067	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@OBCJLLMB@CItemManager?3?3LoadItemDesc?$CIc_sz@
  0006c	e8 00 00 00 00	 call	 ?Tracenf@@YAXPBDZZ	; Tracenf
  00071	83 c4 08	 add	 esp, 8
  00074	c6 85 7b fe ff
	ff 00		 mov	 BYTE PTR $T4[ebp], 0
  0007b	e9 b1 02 00 00	 jmp	 $LN16@LoadItemDe
$LN7@LoadItemDe:

; 204  : 		return false;
; 205  : 	}
; 206  : 
; 207  : 	CMemoryTextFileLoader kTextFileLoader;

  00080	8d 8d 48 fe ff
	ff		 lea	 ecx, DWORD PTR _kTextFileLoader$[ebp]
  00086	e8 00 00 00 00	 call	 ??0CMemoryTextFileLoader@@QAE@XZ ; CMemoryTextFileLoader::CMemoryTextFileLoader

; 208  : 	kTextFileLoader.Bind(kFile.Size(), pvData);

  0008b	ff b5 60 fe ff
	ff		 push	 DWORD PTR _pvData$[ebp]
  00091	8d 8d 7c fe ff
	ff		 lea	 ecx, DWORD PTR _kFile$[ebp]
  00097	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0009b	e8 00 00 00 00	 call	 ?Size@CMappedFile@@QAEKXZ ; CMappedFile::Size
  000a0	50		 push	 eax
  000a1	8d 8d 48 fe ff
	ff		 lea	 ecx, DWORD PTR _kTextFileLoader$[ebp]
  000a7	e8 00 00 00 00	 call	 ?Bind@CMemoryTextFileLoader@@QAEXHPBX@Z ; CMemoryTextFileLoader::Bind
  000ac	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4821 :         _My_data._Mysize = 0;

  000af	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _stTemp$[ebp+16], 0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000b6	0f 11 45 d8	 movups	 XMMWORD PTR _stTemp$[ebp], xmm0

; 4822 :         _My_data._Myres  = _BUF_SIZE - 1;

  000ba	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _stTemp$[ebp+20], 15 ; 0000000fH

; 4823 :         _My_data._Activate_SSO_buffer();
; 4824 : 
; 4825 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4826 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000c1	c6 45 d8 00	 mov	 BYTE PTR _stTemp$[ebp], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 398  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  000c5	c7 85 6c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _kTokenVector$[ebp], 0
  000cf	c7 85 70 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _kTokenVector$[ebp+4], 0
  000d9	c7 85 74 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _kTokenVector$[ebp+8], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 213  : 	for (DWORD i = 0; i < kTextFileLoader.GetLineCount(); ++i)

  000e3	8d 8d 48 fe ff
	ff		 lea	 ecx, DWORD PTR _kTextFileLoader$[ebp]
  000e9	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  000ed	33 ff		 xor	 edi, edi
  000ef	e8 00 00 00 00	 call	 ?GetLineCount@CMemoryTextFileLoader@@QAEKXZ ; CMemoryTextFileLoader::GetLineCount
  000f4	85 c0		 test	 eax, eax
  000f6	0f 84 d6 01 00
	00		 je	 $LN3@LoadItemDe
  000fc	0f 1f 40 00	 npad	 4
$LL4@LoadItemDe:

; 214  : 	{
; 215  : 		if (!kTextFileLoader.SplitLineByTab(i, &kTokenVector))

  00100	8d 85 6c fe ff
	ff		 lea	 eax, DWORD PTR _kTokenVector$[ebp]
  00106	50		 push	 eax
  00107	57		 push	 edi
  00108	8d 8d 48 fe ff
	ff		 lea	 ecx, DWORD PTR _kTextFileLoader$[ebp]
  0010e	e8 00 00 00 00	 call	 ?SplitLineByTab@CMemoryTextFileLoader@@QAE_NKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z ; CMemoryTextFileLoader::SplitLineByTab
  00113	84 c0		 test	 al, al
  00115	0f 84 a3 01 00
	00		 je	 $LN2@LoadItemDe
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0011b	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR _kTokenVector$[ebp+4]
  00121	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00126	8b b5 6c fe ff
	ff		 mov	 esi, DWORD PTR _kTokenVector$[ebp]
  0012c	8b d1		 mov	 edx, ecx
  0012e	2b d6		 sub	 edx, esi
  00130	f7 ea		 imul	 edx
  00132	c1 fa 02	 sar	 edx, 2
  00135	8b c2		 mov	 eax, edx
  00137	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0013a	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 218  : 		while (kTokenVector.size()<ITEMDESC_COL_NUM)

  0013c	83 f8 04	 cmp	 eax, 4
  0013f	0f 83 d5 00 00
	00		 jae	 $LN6@LoadItemDe
  00145	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL5@LoadItemDe:
  00150	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2629 :             _My_data._Mysize = _Count;

  00153	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T5[ebp+16], 0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0015a	0f 11 45 c0	 movups	 XMMWORD PTR $T5[ebp], xmm0

; 2630 :             _My_data._Myres  = _BUF_SIZE - 1;

  0015e	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR $T5[ebp+20], 15 ; 0000000fH

; 2631 : 
; 2632 :             if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2633 :                 _Traits::assign(_My_data._Bx._Buf, _Count, _Arg);
; 2634 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());
; 2635 :             } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2636 :                 _Traits::copy(_My_data._Bx._Buf, _Arg, _Count);
; 2637 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00165	c6 45 c0 00	 mov	 BYTE PTR $T5[ebp], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 219  : 			kTokenVector.push_back("");

  00169	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  0016d	3b 8d 74 fe ff
	ff		 cmp	 ecx, DWORD PTR _kTokenVector$[ebp+8]
  00173	74 2b		 je	 SHORT $LN60@LoadItemDe
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2999 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00175	0f 10 45 c0	 movups	 xmm0, XMMWORD PTR $T5[ebp]

; 4822 :         _My_data._Myres  = _BUF_SIZE - 1;

  00179	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH

; 4823 :         _My_data._Activate_SSO_buffer();
; 4824 : 
; 4825 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4826 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0017e	c6 45 c0 00	 mov	 BYTE PTR $T5[ebp], 0

; 2999 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00182	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00185	f3 0f 7e 45 d0	 movq	 xmm0, QWORD PTR $T5[ebp+16]
  0018a	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 806  :         ++_Mylast;

  0018f	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR _kTokenVector$[ebp+4]
  00195	83 c1 18	 add	 ecx, 24			; 00000018H
  00198	89 8d 70 fe ff
	ff		 mov	 DWORD PTR _kTokenVector$[ebp+4], ecx

; 782  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  0019e	eb 19		 jmp	 SHORT $LN59@LoadItemDe
$LN60@LoadItemDe:

; 783  :         }
; 784  : 
; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  001a0	8d 45 c0	 lea	 eax, DWORD PTR $T5[ebp]
  001a3	50		 push	 eax
  001a4	51		 push	 ecx
  001a5	8d 8d 6c fe ff
	ff		 lea	 ecx, DWORD PTR _kTokenVector$[ebp]
  001ab	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  001b0	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR _kTokenVector$[ebp+4]
  001b6	8b 45 d4	 mov	 eax, DWORD PTR $T5[ebp+20]
$LN59@LoadItemDe:
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 219  : 			kTokenVector.push_back("");

  001b9	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  001bd	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  001c0	72 34		 jb	 SHORT $LN103@LoadItemDe
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001c2	8b 55 c0	 mov	 edx, DWORD PTR $T5[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  001c5	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001c8	8b c2		 mov	 eax, edx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  001ca	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001d0	72 14		 jb	 SHORT $LN113@LoadItemDe

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001d2	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  001d5	83 c1 23	 add	 ecx, 35			; 00000023H
  001d8	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001da	83 c0 fc	 add	 eax, -4			; fffffffcH
  001dd	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001e0	0f 87 79 01 00
	00		 ja	 $LN137@LoadItemDe
$LN113@LoadItemDe:

; 265  :         ::operator delete(_Ptr, _Bytes);

  001e6	51		 push	 ecx
  001e7	52		 push	 edx
  001e8	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001ed	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR _kTokenVector$[ebp+4]
  001f3	83 c4 08	 add	 esp, 8
$LN103@LoadItemDe:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  001f6	8b b5 6c fe ff
	ff		 mov	 esi, DWORD PTR _kTokenVector$[ebp]
  001fc	8b d1		 mov	 edx, ecx
  001fe	2b d6		 sub	 edx, esi
  00200	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00205	f7 ea		 imul	 edx
  00207	c1 fa 02	 sar	 edx, 2
  0020a	8b c2		 mov	 eax, edx
  0020c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0020f	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 218  : 		while (kTokenVector.size()<ITEMDESC_COL_NUM)

  00211	83 f8 04	 cmp	 eax, 4
  00214	0f 82 36 ff ff
	ff		 jb	 $LL5@LoadItemDe
$LN6@LoadItemDe:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  0021a	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2236 :         if (_Large_string_engaged()) {

  0021e	72 02		 jb	 SHORT $LN150@LoadItemDe

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  00220	8b 36		 mov	 esi, DWORD PTR [esi]
$LN150@LoadItemDe:
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 223  : 		DWORD dwVnum=atoi(kTokenVector[ITEMDESC_COL_VNUM].c_str());

  00222	56		 push	 esi
  00223	e8 00 00 00 00	 call	 __atoi64
  00228	89 85 68 fe ff
	ff		 mov	 DWORD PTR _dwVnum$3[ebp], eax
  0022e	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1889 :         return _My_data._Myfirst[_Pos];

  00231	8b 85 6c fe ff
	ff		 mov	 eax, DWORD PTR _kTokenVector$[ebp]
  00237	8d 48 30	 lea	 ecx, DWORD PTR [eax+48]
  0023a	83 c0 48	 add	 eax, 72			; 00000048H
  0023d	89 8d 5c fe ff
	ff		 mov	 DWORD PTR _c_rstDesc$1$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00243	8d 8d 68 fe ff
	ff		 lea	 ecx, DWORD PTR _dwVnum$3[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1889 :         return _My_data._Myfirst[_Pos];

  00249	89 85 58 fe ff
	ff		 mov	 DWORD PTR _c_rstSumm$1$[ebp], eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 226  : 		TItemMap::iterator f = m_ItemMap.find(dwVnum);

  0024f	8b 85 64 fe ff
	ff		 mov	 eax, DWORD PTR _this$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00255	51		 push	 ecx
  00256	8d 8d 3c fe ff
	ff		 lea	 ecx, DWORD PTR __Loc$2[ebp]
  0025c	51		 push	 ecx
  0025d	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00260	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CItemData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CItemData *> >,0> >::_Find_lower_bound<unsigned long>

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00265	8b b5 44 fe ff
	ff		 mov	 esi, DWORD PTR __Loc$2[ebp+8]
  0026b	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0026f	75 4d		 jne	 SHORT $LN2@LoadItemDe
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  00271	8b 85 68 fe ff
	ff		 mov	 eax, DWORD PTR _dwVnum$3[ebp]
  00277	3b 46 10	 cmp	 eax, DWORD PTR [esi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0027a	72 42		 jb	 SHORT $LN2@LoadItemDe

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0027c	8b 85 64 fe ff
	ff		 mov	 eax, DWORD PTR _this$1$[ebp]
  00282	39 70 04	 cmp	 DWORD PTR [eax+4], esi
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 227  : 		if (m_ItemMap.end() == f)

  00285	74 37		 je	 SHORT $LN2@LoadItemDe

; 228  : 			continue;
; 229  : 
; 230  : 		CItemData* pkItemDataFind = f->second;

  00287	8b 76 14	 mov	 esi, DWORD PTR [esi+20]

; 231  : 
; 232  : 		pkItemDataFind->SetDescription(__SnapString(c_rstDesc, stTemp));

  0028a	8d 45 d8	 lea	 eax, DWORD PTR _stTemp$[ebp]
  0028d	50		 push	 eax
  0028e	ff b5 5c fe ff
	ff		 push	 DWORD PTR _c_rstDesc$1$[ebp]
  00294	e8 00 00 00 00	 call	 ?__SnapString@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@AAV12@@Z ; __SnapString
  00299	83 c4 08	 add	 esp, 8
  0029c	8b ce		 mov	 ecx, esi
  0029e	50		 push	 eax
  0029f	e8 00 00 00 00	 call	 ?SetDescription@CItemData@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CItemData::SetDescription

; 233  : 		pkItemDataFind->SetSummary(__SnapString(c_rstSumm, stTemp));

  002a4	8d 45 d8	 lea	 eax, DWORD PTR _stTemp$[ebp]
  002a7	50		 push	 eax
  002a8	ff b5 58 fe ff
	ff		 push	 DWORD PTR _c_rstSumm$1$[ebp]
  002ae	e8 00 00 00 00	 call	 ?__SnapString@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@AAV12@@Z ; __SnapString
  002b3	83 c4 08	 add	 esp, 8
  002b6	8b ce		 mov	 ecx, esi
  002b8	50		 push	 eax
  002b9	e8 00 00 00 00	 call	 ?SetSummary@CItemData@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CItemData::SetSummary
$LN2@LoadItemDe:

; 213  : 	for (DWORD i = 0; i < kTextFileLoader.GetLineCount(); ++i)

  002be	8d 8d 48 fe ff
	ff		 lea	 ecx, DWORD PTR _kTextFileLoader$[ebp]
  002c4	47		 inc	 edi
  002c5	e8 00 00 00 00	 call	 ?GetLineCount@CMemoryTextFileLoader@@QAEKXZ ; CMemoryTextFileLoader::GetLineCount
  002ca	3b f8		 cmp	 edi, eax
  002cc	0f 82 2e fe ff
	ff		 jb	 $LL4@LoadItemDe
$LN3@LoadItemDe:

; 235  : 	return true;

  002d2	8d 8d 6c fe ff
	ff		 lea	 ecx, DWORD PTR _kTokenVector$[ebp]
  002d8	c6 85 7b fe ff
	ff 01		 mov	 BYTE PTR $T4[ebp], 1
  002df	e8 00 00 00 00	 call	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  002e4	8b 4d ec	 mov	 ecx, DWORD PTR _stTemp$[ebp+20]
  002e7	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  002ea	72 28		 jb	 SHORT $LN130@LoadItemDe
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002ec	8b 55 d8	 mov	 edx, DWORD PTR _stTemp$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  002ef	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002f0	8b c2		 mov	 eax, edx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  002f2	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  002f8	72 10		 jb	 SHORT $LN140@LoadItemDe

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  002fa	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  002fd	83 c1 23	 add	 ecx, 35			; 00000023H
  00300	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00302	83 c0 fc	 add	 eax, -4			; fffffffcH
  00305	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00308	77 55		 ja	 SHORT $LN137@LoadItemDe
$LN140@LoadItemDe:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0030a	51		 push	 ecx
  0030b	52		 push	 edx
  0030c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00311	83 c4 08	 add	 esp, 8
$LN130@LoadItemDe:
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 235  : 	return true;

  00314	8d 8d 48 fe ff
	ff		 lea	 ecx, DWORD PTR _kTextFileLoader$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  0031a	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _stTemp$[ebp+16], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  00321	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _stTemp$[ebp+20], 15 ; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00328	c6 45 d8 00	 mov	 BYTE PTR _stTemp$[ebp], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 235  : 	return true;

  0032c	e8 00 00 00 00	 call	 ??1CMemoryTextFileLoader@@UAE@XZ ; CMemoryTextFileLoader::~CMemoryTextFileLoader
$LN16@LoadItemDe:
  00331	8d 8d 7c fe ff
	ff		 lea	 ecx, DWORD PTR _kFile$[ebp]
  00337	e8 00 00 00 00	 call	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
  0033c	8a 85 7b fe ff
	ff		 mov	 al, BYTE PTR $T4[ebp]

; 236  : }

  00342	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00345	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0034c	59		 pop	 ecx
  0034d	5f		 pop	 edi
  0034e	5e		 pop	 esi
  0034f	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00352	33 cd		 xor	 ecx, ebp
  00354	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00359	8b e5		 mov	 esp, ebp
  0035b	5d		 pop	 ebp
  0035c	c2 04 00	 ret	 4
$LN137@LoadItemDe:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0035f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN222@LoadItemDe:
  00364	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadItemDesc@CItemManager@@QAE_NPBD@Z$0:
  00000	8d 8d 7c fe ff
	ff		 lea	 ecx, DWORD PTR _kFile$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
__unwindfunclet$?LoadItemDesc@CItemManager@@QAE_NPBD@Z$1:
  0000b	8d 8d 48 fe ff
	ff		 lea	 ecx, DWORD PTR _kTextFileLoader$[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1CMemoryTextFileLoader@@UAE@XZ ; CMemoryTextFileLoader::~CMemoryTextFileLoader
__unwindfunclet$?LoadItemDesc@CItemManager@@QAE_NPBD@Z$2:
  00016	8d 4d d8	 lea	 ecx, DWORD PTR _stTemp$[ebp]
  00019	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadItemDesc@CItemManager@@QAE_NPBD@Z$3:
  0001e	8d 8d 6c fe ff
	ff		 lea	 ecx, DWORD PTR _kTokenVector$[ebp]
  00024	e9 00 00 00 00	 jmp	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__unwindfunclet$?LoadItemDesc@CItemManager@@QAE_NPBD@Z$4:
  00029	8d 4d c0	 lea	 ecx, DWORD PTR $T5[ebp]
  0002c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00031	cc		 int	 3
  00032	cc		 int	 3
  00033	cc		 int	 3
  00034	cc		 int	 3
  00035	cc		 int	 3
__ehhandler$?LoadItemDesc@CItemManager@@QAE_NPBD@Z:
  00036	90		 npad	 1
  00037	90		 npad	 1
  00038	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0003c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003f	8b 8a 3c fe ff
	ff		 mov	 ecx, DWORD PTR [edx-452]
  00045	33 c8		 xor	 ecx, eax
  00047	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0004f	33 c8		 xor	 ecx, eax
  00051	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00056	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadItemDesc@CItemManager@@QAE_NPBD@Z
  0005b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadItemDesc@CItemManager@@QAE_NPBD@Z ENDP		; CItemManager::LoadItemDesc
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
;	COMDAT ?GetItemDataPointer@CItemManager@@QAEHKPAPAVCItemData@@@Z
_TEXT	SEGMENT
__Loc$1 = -16						; size = 12
_this$1$ = -4						; size = 4
_p$1$ = 8						; size = 4
_dwItemID$ = 8						; size = 4
_ppItemData$ = 12					; size = 4
?GetItemDataPointer@CItemManager@@QAEHKPAPAVCItemData@@@Z PROC ; CItemManager::GetItemDataPointer, COMDAT
; _this$ = ecx

; 48   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	57		 push	 edi

; 49   : 	if (0 == dwItemID)

  00007	8b 7d 08	 mov	 edi, DWORD PTR _dwItemID$[ebp]
  0000a	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000d	85 ff		 test	 edi, edi
  0000f	75 09		 jne	 SHORT $LN5@GetItemDat

; 50   : 		return FALSE;

  00011	33 c0		 xor	 eax, eax
  00013	5f		 pop	 edi

; 75   : }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
$LN5@GetItemDat:
  0001a	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0001b	8d 45 08	 lea	 eax, DWORD PTR _dwItemID$[ebp]
  0001e	50		 push	 eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 52   : 	TItemMap::iterator f = m_ItemMap.find(dwItemID);

  0001f	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00022	8d 45 f0	 lea	 eax, DWORD PTR __Loc$1[ebp]
  00025	8b ce		 mov	 ecx, esi
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CItemData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CItemData *> >,0> >::_Find_lower_bound<unsigned long>

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0002d	8b 4d f8	 mov	 ecx, DWORD PTR __Loc$1[ebp+8]
  00030	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00034	75 1e		 jne	 SHORT $LN51@GetItemDat
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  00036	3b 79 10	 cmp	 edi, DWORD PTR [ecx+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00039	72 19		 jb	 SHORT $LN51@GetItemDat

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0003b	39 0e		 cmp	 DWORD PTR [esi], ecx
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 54   : 	if (m_ItemMap.end() == f)

  0003d	74 15		 je	 SHORT $LN51@GetItemDat

; 70   : 	}
; 71   : 
; 72   : 	*ppItemData = f->second;

  0003f	8b 45 0c	 mov	 eax, DWORD PTR _ppItemData$[ebp]
  00042	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00045	5e		 pop	 esi
  00046	5f		 pop	 edi
  00047	89 08		 mov	 DWORD PTR [eax], ecx

; 73   : 
; 74   : 	return TRUE;

  00049	b8 01 00 00 00	 mov	 eax, 1

; 75   : }

  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 08 00	 ret	 8
$LN51@GetItemDat:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00054	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 57   : 		for (int i = 0; i < n; i++)

  00057	33 f6		 xor	 esi, esi
  00059	53		 push	 ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0005a	8b 58 10	 mov	 ebx, DWORD PTR [eax+16]
  0005d	2b 58 0c	 sub	 ebx, DWORD PTR [eax+12]
  00060	c1 fb 02	 sar	 ebx, 2
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 57   : 		for (int i = 0; i < n; i++)

  00063	85 db		 test	 ebx, ebx
  00065	7e 3f		 jle	 SHORT $LN53@GetItemDat
$LL4@GetItemDat:

; 58   : 		{
; 59   : 			CItemData * p = m_vec_ItemRange[i];

  00067	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0006a	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]

; 60   : 			const CItemData::TItemTable * pTable = p->GetTable();

  0006d	8b c8		 mov	 ecx, eax
  0006f	89 45 08	 mov	 DWORD PTR _p$1$[ebp], eax
  00072	e8 00 00 00 00	 call	 ?GetTable@CItemData@@QBEPBUSItemTable_r156@1@XZ ; CItemData::GetTable

; 61   : 			if ((pTable->dwVnum < dwItemID) &&

  00077	8b 08		 mov	 ecx, DWORD PTR [eax]
  00079	3b cf		 cmp	 ecx, edi
  0007b	73 09		 jae	 SHORT $LN2@GetItemDat
  0007d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00080	03 c1		 add	 eax, ecx
  00082	3b f8		 cmp	 edi, eax
  00084	72 0a		 jb	 SHORT $LN47@GetItemDat
$LN2@GetItemDat:

; 57   : 		for (int i = 0; i < n; i++)

  00086	46		 inc	 esi
  00087	3b f3		 cmp	 esi, ebx
  00089	7d 1b		 jge	 SHORT $LN53@GetItemDat
  0008b	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  0008e	eb d7		 jmp	 SHORT $LL4@GetItemDat
$LN47@GetItemDat:

; 62   : 				dwItemID < (pTable->dwVnum + pTable->dwVnumRange))
; 63   : 			{
; 64   : 				*ppItemData = p;

  00090	8b 45 0c	 mov	 eax, DWORD PTR _ppItemData$[ebp]
  00093	8b 4d 08	 mov	 ecx, DWORD PTR _p$1$[ebp]
  00096	5b		 pop	 ebx
  00097	5e		 pop	 esi
  00098	89 08		 mov	 DWORD PTR [eax], ecx

; 65   : 				return TRUE;

  0009a	b8 01 00 00 00	 mov	 eax, 1
  0009f	5f		 pop	 edi

; 75   : }

  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c2 08 00	 ret	 8
$LN53@GetItemDat:

; 66   : 			}
; 67   : 		}
; 68   : 		Tracef(" CItemManager::GetItemDataPointer - FIND ERROR [%d]\n", dwItemID);

  000a6	57		 push	 edi
  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@GPLOHCFJ@?5CItemManager?3?3GetItemDataPoint@
  000ac	e8 00 00 00 00	 call	 ?Tracef@@YAXPBDZZ	; Tracef
  000b1	83 c4 08	 add	 esp, 8

; 69   : 		return FALSE;

  000b4	33 c0		 xor	 eax, eax
  000b6	5b		 pop	 ebx
  000b7	5e		 pop	 esi
  000b8	5f		 pop	 edi

; 75   : }

  000b9	8b e5		 mov	 esp, ebp
  000bb	5d		 pop	 ebp
  000bc	c2 08 00	 ret	 8
?GetItemDataPointer@CItemManager@@QAEHKPAPAVCItemData@@@Z ENDP ; CItemManager::GetItemDataPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
;	COMDAT ?GetSelectedItemDataPointer@CItemManager@@QAEPAVCItemData@@XZ
_TEXT	SEGMENT
?GetSelectedItemDataPointer@CItemManager@@QAEPAVCItemData@@XZ PROC ; CItemManager::GetSelectedItemDataPointer, COMDAT
; _this$ = ecx

; 44   : 	return m_pSelectedItemData;

  00000	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]

; 45   : }

  00003	c3		 ret	 0
?GetSelectedItemDataPointer@CItemManager@@QAEPAVCItemData@@XZ ENDP ; CItemManager::GetSelectedItemDataPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
;	COMDAT ?SelectItemData@CItemManager@@QAEHK@Z
_TEXT	SEGMENT
__Loc$1 = -16						; size = 12
_this$1$ = -4						; size = 4
_p$1$ = 8						; size = 4
_dwIndex$ = 8						; size = 4
?SelectItemData@CItemManager@@QAEHK@Z PROC		; CItemManager::SelectItemData, COMDAT
; _this$ = ecx

; 16   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0000b	8d 45 08	 lea	 eax, DWORD PTR _dwIndex$[ebp]
  0000e	50		 push	 eax
  0000f	8d 45 f0	 lea	 eax, DWORD PTR __Loc$1[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 16   : {

  00012	89 75 fc	 mov	 DWORD PTR _this$1$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00015	50		 push	 eax
  00016	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00019	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCItemData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCItemData@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CItemData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CItemData *> >,0> >::_Find_lower_bound<unsigned long>

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0001e	8b 45 f8	 mov	 eax, DWORD PTR __Loc$1[ebp+8]
  00021	8b 5d 08	 mov	 ebx, DWORD PTR _dwIndex$[ebp]
  00024	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00028	75 1e		 jne	 SHORT $LN50@SelectItem
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  0002a	3b 58 10	 cmp	 ebx, DWORD PTR [eax+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0002d	72 19		 jb	 SHORT $LN50@SelectItem

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0002f	39 46 04	 cmp	 DWORD PTR [esi+4], eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 19   : 	if (m_ItemMap.end() == f)

  00032	74 14		 je	 SHORT $LN50@SelectItem

; 35   : 	}
; 36   : 
; 37   : 	m_pSelectedItemData = f->second;

  00034	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00037	5f		 pop	 edi
  00038	89 46 18	 mov	 DWORD PTR [esi+24], eax

; 38   : 
; 39   : 	return TRUE;

  0003b	b8 01 00 00 00	 mov	 eax, 1

; 40   : }

  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
$LN50@SelectItem:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00048	8b c6		 mov	 eax, esi
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 22   : 		for (int i = 0; i < n; i++)

  0004a	33 f6		 xor	 esi, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0004c	8b 78 10	 mov	 edi, DWORD PTR [eax+16]
  0004f	2b 78 0c	 sub	 edi, DWORD PTR [eax+12]
  00052	c1 ff 02	 sar	 edi, 2
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 22   : 		for (int i = 0; i < n; i++)

  00055	85 ff		 test	 edi, edi
  00057	7e 47		 jle	 SHORT $LN52@SelectItem
  00059	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@SelectItem:

; 23   : 		{
; 24   : 			CItemData * p = m_vec_ItemRange[i];

  00060	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00063	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]

; 25   : 			const CItemData::TItemTable * pTable = p->GetTable();

  00066	8b c8		 mov	 ecx, eax
  00068	89 45 08	 mov	 DWORD PTR _p$1$[ebp], eax
  0006b	e8 00 00 00 00	 call	 ?GetTable@CItemData@@QBEPBUSItemTable_r156@1@XZ ; CItemData::GetTable

; 26   : 			if ((pTable->dwVnum < dwIndex) &&

  00070	8b 08		 mov	 ecx, DWORD PTR [eax]
  00072	3b cb		 cmp	 ecx, ebx
  00074	73 09		 jae	 SHORT $LN2@SelectItem
  00076	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00079	03 c1		 add	 eax, ecx
  0007b	3b d8		 cmp	 ebx, eax
  0007d	72 0a		 jb	 SHORT $LN46@SelectItem
$LN2@SelectItem:

; 22   : 		for (int i = 0; i < n; i++)

  0007f	46		 inc	 esi
  00080	3b f7		 cmp	 esi, edi
  00082	7d 1c		 jge	 SHORT $LN52@SelectItem
  00084	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00087	eb d7		 jmp	 SHORT $LL4@SelectItem
$LN46@SelectItem:

; 27   : 				dwIndex < (pTable->dwVnum + pTable->dwVnumRange))
; 28   : 			{
; 29   : 				m_pSelectedItemData = p;

  00089	8b 75 fc	 mov	 esi, DWORD PTR _this$1$[ebp]
  0008c	8b 45 08	 mov	 eax, DWORD PTR _p$1$[ebp]
  0008f	5f		 pop	 edi
  00090	89 46 18	 mov	 DWORD PTR [esi+24], eax

; 30   : 				return TRUE;

  00093	b8 01 00 00 00	 mov	 eax, 1

; 40   : }

  00098	5e		 pop	 esi
  00099	5b		 pop	 ebx
  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c2 04 00	 ret	 4
$LN52@SelectItem:

; 31   : 			}
; 32   : 		}
; 33   : 		Tracef(" CItemManager::SelectItemData - FIND ERROR [%d]\n", dwIndex);

  000a0	53		 push	 ebx
  000a1	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@OJKGMCEF@?5CItemManager?3?3SelectItemData?5?9@
  000a6	e8 00 00 00 00	 call	 ?Tracef@@YAXPBDZZ	; Tracef
  000ab	83 c4 08	 add	 esp, 8

; 34   : 		return FALSE;

  000ae	33 c0		 xor	 eax, eax
  000b0	5f		 pop	 edi

; 40   : }

  000b1	5e		 pop	 esi
  000b2	5b		 pop	 ebx
  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c2 04 00	 ret	 4
?SelectItemData@CItemManager@@QAEHK@Z ENDP		; CItemManager::SelectItemData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
;	COMDAT ?Destroy@CItemManager@@QAEXXZ
_TEXT	SEGMENT
?Destroy@CItemManager@@QAEXXZ PROC			; CItemManager::Destroy, COMDAT
; _this$ = ecx

; 378  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1127 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00002	8d 59 04	 lea	 ebx, DWORD PTR [ecx+4]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 378  : {

  00005	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1127 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00006	8b 3b		 mov	 edi, DWORD PTR [ebx]

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00008	8b 37		 mov	 esi, DWORD PTR [edi]
  0000a	3b f7		 cmp	 esi, edi
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 380  : 	for (i=m_ItemMap.begin(); i!=m_ItemMap.end(); ++i)

  0000c	74 54		 je	 SHORT $LN3@Destroy
  0000e	66 90		 npad	 2
$LL28@Destroy:

; 381  : 		CItemData::Delete(i->second);

  00010	ff 76 14	 push	 DWORD PTR [esi+20]
  00013	e8 00 00 00 00	 call	 ?Delete@CItemData@@SAXPAV1@@Z ; CItemData::Delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 51   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  00018	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 381  : 		CItemData::Delete(i->second);

  0001b	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 51   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  0001e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00022	74 20		 je	 SHORT $LN27@Destroy

; 52   :             _Nodeptr _Pnode;
; 53   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  00024	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00027	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0002b	75 13		 jne	 SHORT $LN102@Destroy
  0002d	0f 1f 00	 npad	 3
$LL25@Destroy:
  00030	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  00033	75 0b		 jne	 SHORT $LN102@Destroy

; 54   :                 _Ptr = _Pnode; // ==> parent while right subtree

  00035	8b f0		 mov	 esi, eax
  00037	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0003a	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0003e	74 f0		 je	 SHORT $LL25@Destroy
$LN102@Destroy:

; 55   :             }
; 56   : 
; 57   :             _Ptr = _Pnode; // ==> parent (head if end())

  00040	8b f0		 mov	 esi, eax

; 58   :         } else {

  00042	eb 18		 jmp	 SHORT $LN32@Destroy
$LN27@Destroy:

; 59   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree

  00044	8b f0		 mov	 esi, eax

; 453  :         while (!_Pnode->_Left->_Isnil) {

  00046	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00048	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0004c	75 0e		 jne	 SHORT $LN32@Destroy
  0004e	66 90		 npad	 2
$LL31@Destroy:
  00050	8b 01		 mov	 eax, DWORD PTR [ecx]

; 454  :             _Pnode = _Pnode->_Left;

  00052	8b f1		 mov	 esi, ecx
  00054	8b c8		 mov	 ecx, eax
  00056	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0005a	74 f4		 je	 SHORT $LL31@Destroy
$LN32@Destroy:

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0005c	8b 3b		 mov	 edi, DWORD PTR [ebx]

; 233  :         return this->_Ptr == _Right._Ptr;

  0005e	3b f7		 cmp	 esi, edi
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 380  : 	for (i=m_ItemMap.begin(); i!=m_ItemMap.end(); ++i)

  00060	75 ae		 jne	 SHORT $LL28@Destroy
$LN3@Destroy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1358 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  00062	8b 77 04	 mov	 esi, DWORD PTR [edi+4]

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00065	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00069	75 25		 jne	 SHORT $LN56@Destroy
  0006b	0f 1f 44 00 00	 npad	 5
$LL55@Destroy:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00070	ff 76 08	 push	 DWORD PTR [esi+8]
  00073	8b cb		 mov	 ecx, ebx
  00075	53		 push	 ebx
  00076	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CItemData *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CItemData *>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 754  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0007b	8b c6		 mov	 eax, esi

; 755  :     _Val         = static_cast<_Other&&>(_New_val);

  0007d	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  0007f	6a 18		 push	 24			; 00000018H
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00087	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0008a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0008e	74 e0		 je	 SHORT $LL55@Destroy
$LN56@Destroy:

; 1359 :         _Head->_Parent  = _Head;

  00090	89 7f 04	 mov	 DWORD PTR [edi+4], edi

; 1360 :         _Head->_Left    = _Head;

  00093	89 3f		 mov	 DWORD PTR [edi], edi

; 1361 :         _Head->_Right   = _Head;

  00095	89 7f 08	 mov	 DWORD PTR [edi+8], edi

; 1362 :         _Scary->_Mysize = 0;

  00098	5f		 pop	 edi
  00099	5e		 pop	 esi
  0009a	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0
  000a1	5b		 pop	 ebx
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 384  : }

  000a2	c3		 ret	 0
?Destroy@CItemManager@@QAEXXZ ENDP			; CItemManager::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
;	COMDAT ??1CItemManager@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CItemManager@@UAE@XZ PROC				; CItemManager::~CItemManager, COMDAT
; _this$ = ecx

; 458  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CItemManager@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CItemManager@@6B@

; 459  : 	Destroy();

  0002b	e8 00 00 00 00	 call	 ?Destroy@CItemManager@@QAEXXZ ; CItemManager::Destroy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00030	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00033	85 c0		 test	 eax, eax
  00035	74 41		 je	 SHORT $LN6@CItemManag

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00037	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0003a	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0003c	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0003f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00045	72 12		 jb	 SHORT $LN22@CItemManag

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00047	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0004a	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0004d	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00052	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00055	77 4a		 ja	 SHORT $LN19@CItemManag

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00057	8b c2		 mov	 eax, edx
$LN22@CItemManag:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00059	51		 push	 ecx
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00060	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00067	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  0006a	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 2051 :             _Myend   = nullptr;

  00071	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
$LN6@CItemManag:
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 460  : }

  00078	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1082 :         _Scary->_Erase_head(_Getal());

  0007b	51		 push	 ecx
  0007c	e8 00 00 00 00	 call	 ??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCItemData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCItemData@@@std@@PAX@std@@@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CItemData *> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CItemData *>,void *> > >
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h

; 19   : 	{

  00081	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CSingleton@VCItemManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00087	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCItemManager@@@@0PAVCItemManager@@A, 0 ; CSingleton<CItemManager>::ms_singleton
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 460  : }

  00091	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00094	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009b	59		 pop	 ecx
  0009c	5e		 pop	 esi
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c3		 ret	 0
$LN19@CItemManag:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a1	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN36@CItemManag:
  000a6	cc		 int	 3
  000a7	cc		 int	 3
  000a8	cc		 int	 3
  000a9	cc		 int	 3
  000aa	cc		 int	 3
  000ab	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CItemManager@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CItemManager@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CItemManager@@UAE@XZ ENDP				; CItemManager::~CItemManager
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp
;	COMDAT ??0CItemManager@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CItemManager@@QAE@XZ PROC				; CItemManager::CItemManager, COMDAT
; _this$ = ecx

; 455  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CItemManager@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f9		 mov	 edi, ecx
  00029	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h

; 15   : 		ms_singleton = (T*) ((int) this + offset);

  0002c	89 3d 00 00 00
	00		 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCItemManager@@@@0PAVCItemManager@@A, edi ; CSingleton<CItemManager>::ms_singleton
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 455  : {

  00032	8d 77 04	 lea	 esi, DWORD PTR [edi+4]
  00035	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CItemManager@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  0003b	6a 18		 push	 24			; 00000018H
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 455  : {

  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00044	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 437  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  00047	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0004d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  00054	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00059	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 347  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  0005c	89 00		 mov	 DWORD PTR [eax], eax

; 348  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  0005e	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 349  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  00061	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 350  :         _Pnode->_Color = _Black;

  00064	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1943 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  0006a	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 456  : }

  0006c	8b c7		 mov	 eax, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 398  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0006e	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
  00075	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  0007c	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\ItemManager.cpp

; 454  : CItemManager::CItemManager() : m_pSelectedItemData(NULL)

  00083	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0

; 456  : }

  0008a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00094	59		 pop	 ecx
  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CItemManager@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$CSingleton@VCItemManager@@@@UAE@XZ ; CSingleton<CItemManager>::~CSingleton<CItemManager>
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0CItemManager@@QAE@XZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CItemManager@@QAE@XZ
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CItemManager@@QAE@XZ ENDP				; CItemManager::CItemManager
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
;	COMDAT ??_G?$CSingleton@VCItemManager@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CSingleton@VCItemManager@@@@UAEPAXI@Z PROC	; CSingleton<CItemManager>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1

; 19   : 	{

  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CSingleton@VCItemManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00010	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCItemManager@@@@0PAVCItemManager@@A, 0 ; CSingleton<CItemManager>::ms_singleton
  0001a	74 0b		 je	 SHORT $LN6@scalar
  0001c	6a 04		 push	 4
  0001e	56		 push	 esi
  0001f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00024	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_G?$CSingleton@VCItemManager@@@@UAEPAXI@Z ENDP	; CSingleton<CItemManager>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
;	COMDAT ??1?$CSingleton@VCItemManager@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CSingleton@VCItemManager@@@@UAE@XZ PROC		; CSingleton<CItemManager>::~CSingleton<CItemManager>, COMDAT
; _this$ = ecx

; 19   : 	{

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CSingleton@VCItemManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00006	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCItemManager@@@@0PAVCItemManager@@A, 0 ; CSingleton<CItemManager>::ms_singleton

; 22   : 	}

  00010	c3		 ret	 0
??1?$CSingleton@VCItemManager@@@@UAE@XZ ENDP		; CSingleton<CItemManager>::~CSingleton<CItemManager>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 137  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 138  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 139  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 140  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 87   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 141  :         _Throw_bad_array_new_length(); // add overflow
; 142  :     }
; 143  : 
; 144  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 87   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 145  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 146  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 147  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 148  : 
; 149  : #ifdef _DEBUG
; 150  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 151  : #endif // _DEBUG
; 152  :     return _Ptr;
; 153  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 145  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
;	COMDAT ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
$T1 = 12						; size = 4
__Count$ = 12						; size = 4
??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>, COMDAT
; _this$ = ecx

; 2610 :     _CONSTEXPR20 void _Construct(const _Char_or_ptr _Arg, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	57		 push	 edi

; 2611 :         auto& _My_data = _Mypair._Myval2;
; 2612 :         _STL_INTERNAL_CHECK(!_My_data._Large_string_engaged());
; 2613 : 
; 2614 :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2615 :             _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Char_or_ptr, _Elem>);
; 2616 :         } else {
; 2617 :             _STL_INTERNAL_STATIC_ASSERT(_Is_elem_cptr<_Char_or_ptr>::value);
; 2618 :         }
; 2619 : 
; 2620 :         if (_Count > max_size()) {

  00005	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  00010	0f 87 9f 00 00
	00		 ja	 $LN33@Construct

; 2622 :         }
; 2623 : 
; 2624 :         auto& _Al       = _Getal();
; 2625 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 2626 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 2627 : 
; 2628 :         if (_Count < _BUF_SIZE) {

  00016	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH
  0001d	83 ff 10	 cmp	 edi, 16			; 00000010H
  00020	73 1a		 jae	 SHORT $LN3@Construct

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00022	57		 push	 edi
  00023	ff 75 08	 push	 DWORD PTR __Arg$[ebp]

; 2629 :             _My_data._Mysize = _Count;

  00026	89 7b 10	 mov	 DWORD PTR [ebx+16], edi

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00029	53		 push	 ebx
  0002a	e8 00 00 00 00	 call	 _memcpy
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2630 :             _My_data._Myres  = _BUF_SIZE - 1;
; 2631 : 
; 2632 :             if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2633 :                 _Traits::assign(_My_data._Bx._Buf, _Count, _Arg);
; 2634 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());
; 2635 :             } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2636 :                 _Traits::copy(_My_data._Bx._Buf, _Arg, _Count);
; 2637 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00032	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0
  00036	5f		 pop	 edi

; 2665 :         } else { // _Strat == _Construct_strategy::_From_string
; 2666 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);
; 2667 :         }
; 2668 : 
; 2669 :         _ASAN_STRING_CREATE(*this);
; 2670 :         _Proxy._Release();
; 2671 :     }

  00037	5b		 pop	 ebx
  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
$LN3@Construct:
  0003c	56		 push	 esi

; 4714 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0003d	8b f7		 mov	 esi, edi
  0003f	83 ce 0f	 or	 esi, 15			; 0000000fH
  00042	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4715 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00048	76 15		 jbe	 SHORT $LN10@Construct

; 4716 :             return _Max;

  0004a	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0004f	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0005a	83 c4 04	 add	 esp, 4
  0005d	eb 30		 jmp	 SHORT $LN31@Construct
$LN10@Construct:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 47   :     return _Left < _Right ? _Right : _Left;

  0005f	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00064	3b f0		 cmp	 esi, eax
  00066	0f 42 f0	 cmovb	 esi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2652 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00069	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0006c	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00071	72 0b		 jb	 SHORT $LN18@Construct

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00079	83 c4 04	 add	 esp, 4
  0007c	eb 11		 jmp	 SHORT $LN31@Construct
$LN18@Construct:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  0007e	85 c0		 test	 eax, eax
  00080	74 0b		 je	 SHORT $LN19@Construct

; 87   :         return ::operator new(_Bytes);

  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00088	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  0008b	eb 02		 jmp	 SHORT $LN31@Construct
$LN19@Construct:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  0008d	33 c0		 xor	 eax, eax
$LN31@Construct:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0008f	57		 push	 edi
  00090	ff 75 08	 push	 DWORD PTR __Arg$[ebp]

; 2653 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00093	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00096	50		 push	 eax

; 2653 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00097	89 03		 mov	 DWORD PTR [ebx], eax

; 2654 : 
; 2655 :         _Start_element_lifetimes(_Unfancy(_New_ptr), _New_capacity + 1);
; 2656 : 
; 2657 :         _My_data._Mysize = _Count;

  00099	89 7b 10	 mov	 DWORD PTR [ebx+16], edi

; 2658 :         _My_data._Myres  = _New_capacity;

  0009c	89 73 14	 mov	 DWORD PTR [ebx+20], esi

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0009f	e8 00 00 00 00	 call	 _memcpy

; 2659 :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2660 :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 2661 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 2662 :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2663 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);
; 2664 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000a4	8b 45 0c	 mov	 eax, DWORD PTR $T1[ebp]

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000a7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2659 :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2660 :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 2661 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 2662 :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2663 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);
; 2664 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000aa	5e		 pop	 esi
  000ab	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
  000af	5f		 pop	 edi

; 2665 :         } else { // _Strat == _Construct_strategy::_From_string
; 2666 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);
; 2667 :         }
; 2668 : 
; 2669 :         _ASAN_STRING_CREATE(*this);
; 2670 :         _Proxy._Release();
; 2671 :     }

  000b0	5b		 pop	 ebx
  000b1	5d		 pop	 ebp
  000b2	c2 08 00	 ret	 8
$LN33@Construct:

; 2621 :             _Xlen_string(); // result too long

  000b5	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN30@Construct:
  000ba	cc		 int	 3
??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength, COMDAT

; 2138 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 766  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 65		 je	 SHORT $LN4@vector
  00009	57		 push	 edi

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);

  0000a	56		 push	 esi
  0000b	ff 76 04	 push	 DWORD PTR [esi+4]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00014	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00017	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0001c	8b 3e		 mov	 edi, DWORD PTR [esi]
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00021	2b cf		 sub	 ecx, edi
  00023	f7 e9		 imul	 ecx
  00025	c1 fa 02	 sar	 edx, 2
  00028	8b c2		 mov	 eax, edx
  0002a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0002d	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002f	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00032	c1 e1 03	 shl	 ecx, 3

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00035	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0003b	72 12		 jb	 SHORT $LN20@vector

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0003d	8b 57 fc	 mov	 edx, DWORD PTR [edi-4]
  00040	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00043	2b fa		 sub	 edi, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  00048	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0004b	77 23		 ja	 SHORT $LN17@vector

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0004d	8b fa		 mov	 edi, edx
$LN20@vector:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0004f	51		 push	 ecx
  00050	57		 push	 edi
  00051	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00056	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00059	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 2050 :             _Mylast  = nullptr;

  0005f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2051 :             _Myend   = nullptr;

  00066	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0006d	5f		 pop	 edi
$LN4@vector:
  0006e	5e		 pop	 esi

; 772  :     }

  0006f	c3		 ret	 0
$LN17@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00070	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN28@vector:
  00075	cc		 int	 3
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ?_Throw_tree_length_error@std@@YAXXZ
_TEXT	SEGMENT
?_Throw_tree_length_error@std@@YAXXZ PROC		; std::_Throw_tree_length_error, COMDAT

; 418  :     _Xlength_error("map/set too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Throw_tree:
  0000a	cc		 int	 3
?_Throw_tree_length_error@std@@YAXXZ ENDP		; std::_Throw_tree_length_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate, COMDAT
; _this$ = ecx

; 4829 :     _CONSTEXPR20 void _Tidy_deallocate() noexcept { // initialize buffer, deallocating any storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2244 :         return _BUF_SIZE <= _Myres;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4830 :         auto& _My_data = _Mypair._Myval2;
; 4831 :         _My_data._Orphan_all();
; 4832 :         if (_My_data._Large_string_engaged()) {

  00009	72 27		 jb	 SHORT $LN10@Tidy_deall
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0000d	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN20@Tidy_deall

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN17@Tidy_deall

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN20@Tidy_deall:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN10@Tidy_deall:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 4845 :     }

  00044	c3		 ret	 0
$LN17@Tidy_deall:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN27@Tidy_deall:
  0004a	cc		 int	 3
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Old$1$ = -8						; size = 4
__Result$1$ = -4					; size = 4
$T1 = 8							; size = 4
__Right$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 3155 :     _CONSTEXPR20 basic_string& operator=(const basic_string& _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 3156 :         if (this == _STD addressof(_Right)) {

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Right$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	3b f3		 cmp	 esi, ebx
  0000f	0f 84 14 01 00
	00		 je	 $LN22@operator

; 2244 :         return _BUF_SIZE <= _Myres;

  00015	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H

; 2235 :         const value_type* _Result = _Bx._Buf;

  00019	8b c3		 mov	 eax, ebx
  0001b	89 5d fc	 mov	 DWORD PTR __Result$1$[ebp], ebx

; 2236 :         if (_Large_string_engaged()) {

  0001e	72 05		 jb	 SHORT $LN5@operator

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  00020	8b 03		 mov	 eax, DWORD PTR [ebx]
  00022	89 45 fc	 mov	 DWORD PTR __Result$1$[ebp], eax
$LN5@operator:

; 3376 :         if (_Count <= _Mypair._Myval2._Myres) {

  00025	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 3157 :             return *this;
; 3158 :         }
; 3159 : 
; 3160 :         auto& _Al             = _Getal();
; 3161 :         const auto& _Right_al = _Right._Getal();
; 3162 :         if constexpr (_Choose_pocca_v<_Alty>) {
; 3163 :             if (_Al != _Right_al) {
; 3164 :                 auto&& _Alproxy       = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 3165 :                 auto&& _Right_alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Right_al);
; 3166 :                 _Container_proxy_ptr<_Alty> _New_proxy(_Right_alproxy, _Leave_proxy_unbound{}); // throws
; 3167 : 
; 3168 :                 if (_Right._Mypair._Myval2._Large_string_engaged()) {
; 3169 :                     const auto _New_size     = _Right._Mypair._Myval2._Mysize;
; 3170 :                     const auto _New_capacity = _Calculate_growth(_New_size, 0, _Right.max_size());
; 3171 :                     auto _Right_al_non_const = _Right_al;
; 3172 :                     const auto _New_ptr      = _Right_al_non_const.allocate(_New_capacity + 1); // throws
; 3173 : 
; 3174 :                     _Start_element_lifetimes(_Unfancy(_New_ptr), _New_size + 1);
; 3175 : 
; 3176 :                     _Traits::copy(_Unfancy(_New_ptr), _Unfancy(_Right._Mypair._Myval2._Bx._Ptr), _New_size + 1);
; 3177 :                     _Tidy_deallocate();
; 3178 :                     _Mypair._Myval2._Bx._Ptr = _New_ptr;
; 3179 :                     _Mypair._Myval2._Mysize  = _New_size;
; 3180 :                     _Mypair._Myval2._Myres   = _New_capacity;
; 3181 :                 } else {
; 3182 :                     _Copy_assign_val_from_small(_Right);
; 3183 :                 }
; 3184 : 
; 3185 :                 _Pocca(_Al, _Right_al);
; 3186 :                 _New_proxy._Bind(_Alproxy, _STD addressof(_Mypair._Myval2));
; 3187 :                 return *this;
; 3188 :             }
; 3189 :         }
; 3190 : 
; 3191 :         _Pocca(_Al, _Right_al);
; 3192 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00028	8b 5b 10	 mov	 ebx, DWORD PTR [ebx+16]

; 3376 :         if (_Count <= _Mypair._Myval2._Myres) {

  0002b	89 4d f8	 mov	 DWORD PTR __Old$1$[ebp], ecx
  0002e	57		 push	 edi
  0002f	3b d9		 cmp	 ebx, ecx
  00031	77 26		 ja	 SHORT $LN10@operator

; 2226 :         value_type* _Result = _Bx._Buf;

  00033	8b fe		 mov	 edi, esi

; 2244 :         return _BUF_SIZE <= _Myres;

  00035	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2227 :         if (_Large_string_engaged()) {

  00038	72 02		 jb	 SHORT $LN13@operator

; 2228 :             _Result = _Unfancy(_Bx._Ptr);

  0003a	8b 3e		 mov	 edi, DWORD PTR [esi]
$LN13@operator:

; 119  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0003c	53		 push	 ebx
  0003d	50		 push	 eax
  0003e	57		 push	 edi

; 3379 :             _Mypair._Myval2._Mysize = _Count;

  0003f	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 119  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00042	e8 00 00 00 00	 call	 _memmove
  00047	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3381 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0004a	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 3193 :         return *this;

  0004e	8b c6		 mov	 eax, esi
  00050	5f		 pop	 edi

; 3194 :     }

  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
$LN10@operator:

; 4734 :         if (_New_size > max_size()) {

  00059	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  0005f	0f 87 d3 00 00
	00		 ja	 $LN81@operator

; 4714 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00065	8b fb		 mov	 edi, ebx
  00067	83 cf 0f	 or	 edi, 15			; 0000000fH
  0006a	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 4715 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00070	76 15		 jbe	 SHORT $LN27@operator

; 4716 :             return _Max;

  00072	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00077	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00082	83 c4 04	 add	 esp, 4
  00085	eb 52		 jmp	 SHORT $LN79@operator
$LN27@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4719 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00087	8b d1		 mov	 edx, ecx
  00089	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  0008e	d1 ea		 shr	 edx, 1
  00090	2b c2		 sub	 eax, edx
  00092	3b c8		 cmp	 ecx, eax
  00094	76 15		 jbe	 SHORT $LN28@operator

; 4720 :             return _Max;

  00096	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0009b	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a0	50		 push	 eax
  000a1	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a6	83 c4 04	 add	 esp, 4
  000a9	eb 2e		 jmp	 SHORT $LN79@operator
$LN28@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4723 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000ab	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 47   :     return _Left < _Right ? _Right : _Left;

  000ae	3b f8		 cmp	 edi, eax
  000b0	0f 42 f8	 cmovb	 edi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4741 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  000b3	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000b6	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000bb	72 0b		 jb	 SHORT $LN35@operator

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000bd	50		 push	 eax
  000be	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000c3	83 c4 04	 add	 esp, 4
  000c6	eb 11		 jmp	 SHORT $LN79@operator
$LN35@operator:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  000c8	85 c0		 test	 eax, eax
  000ca	74 0b		 je	 SHORT $LN36@operator

; 87   :         return ::operator new(_Bytes);

  000cc	50		 push	 eax
  000cd	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000d2	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  000d5	eb 02		 jmp	 SHORT $LN79@operator
$LN36@operator:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  000d7	33 c0		 xor	 eax, eax
$LN79@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d9	53		 push	 ebx
  000da	ff 75 fc	 push	 DWORD PTR __Result$1$[ebp]

; 4747 :         _Mypair._Myval2._Myres  = _New_capacity;

  000dd	89 7e 14	 mov	 DWORD PTR [esi+20], edi

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000e0	8b f8		 mov	 edi, eax
  000e2	57		 push	 edi

; 4746 :         _Mypair._Myval2._Mysize = _New_size;

  000e3	89 45 08	 mov	 DWORD PTR $T1[ebp], eax
  000e6	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000e9	e8 00 00 00 00	 call	 _memcpy

; 4749 :         if (_BUF_SIZE <= _Old_capacity) {

  000ee	8b 45 f8	 mov	 eax, DWORD PTR __Old$1$[ebp]

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000f1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3389 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000f4	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 4749 :         if (_BUF_SIZE <= _Old_capacity) {

  000f8	83 f8 10	 cmp	 eax, 16			; 00000010H
  000fb	72 29		 jb	 SHORT $LN21@operator

; 4750 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  000fd	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00100	8b 06		 mov	 eax, DWORD PTR [esi]

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00102	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00108	72 12		 jb	 SHORT $LN58@operator

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0010a	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0010d	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00110	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00112	83 c0 fc	 add	 eax, -4			; fffffffcH
  00115	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00118	77 19		 ja	 SHORT $LN55@operator

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0011a	8b c2		 mov	 eax, edx
$LN58@operator:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0011c	51		 push	 ecx
  0011d	50		 push	 eax
  0011e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00123	83 c4 08	 add	 esp, 8
$LN21@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4753 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  00126	89 3e		 mov	 DWORD PTR [esi], edi
  00128	5f		 pop	 edi
$LN22@operator:

; 3193 :         return *this;

  00129	8b c6		 mov	 eax, esi

; 3194 :     }

  0012b	5e		 pop	 esi
  0012c	5b		 pop	 ebx
  0012d	8b e5		 mov	 esp, ebp
  0012f	5d		 pop	 ebp
  00130	c2 04 00	 ret	 4
$LN55@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00133	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN81@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4735 :             _Xlen_string(); // result too long

  00138	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN78@operator:
  0013d	cc		 int	 3
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 3118 :     _CONSTEXPR20 ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2244 :         return _BUF_SIZE <= _Myres;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  00009	72 27		 jb	 SHORT $LN12@basic_stri
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0000d	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN22@basic_stri

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN19@basic_stri

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN22@basic_stri:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN12@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 3126 :     }

  00044	c3		 ret	 0
$LN19@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN30@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Result$1$ = 8						; size = 4
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2491 :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 2235 :         const value_type* _Result = _Bx._Buf;

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Right$[ebp]
  00007	0f 57 c0	 xorps	 xmm0, xmm0

; 2491 :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx

; 2235 :         const value_type* _Result = _Bx._Buf;

  0000d	89 5d 08	 mov	 DWORD PTR __Result$1$[ebp], ebx
  00010	8b c3		 mov	 eax, ebx

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00012	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  00015	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  0001c	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2244 :         return _BUF_SIZE <= _Myres;

  00023	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H

; 2236 :         if (_Large_string_engaged()) {

  00027	72 05		 jb	 SHORT $LN12@basic_stri

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  00029	8b 03		 mov	 eax, DWORD PTR [ebx]
  0002b	89 45 08	 mov	 DWORD PTR __Result$1$[ebp], eax
$LN12@basic_stri:

; 2492 :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0002e	8b 5b 10	 mov	 ebx, DWORD PTR [ebx+16]

; 2620 :         if (_Count > max_size()) {

  00031	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  00037	0f 87 97 00 00
	00		 ja	 $LN49@basic_stri

; 2622 :         }
; 2623 : 
; 2624 :         auto& _Al       = _Getal();
; 2625 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 2626 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 2627 : 
; 2628 :         if (_Count < _BUF_SIZE) {

  0003d	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
  00044	83 fb 10	 cmp	 ebx, 16			; 00000010H
  00047	73 11		 jae	 SHORT $LN18@basic_stri

; 2629 :             _My_data._Mysize = _Count;

  00049	89 5f 10	 mov	 DWORD PTR [edi+16], ebx

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0004c	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]

; 2493 :     }

  0004f	8b c7		 mov	 eax, edi

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00051	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2493 :     }

  00054	5f		 pop	 edi
  00055	5b		 pop	 ebx
  00056	5d		 pop	 ebp
  00057	c2 04 00	 ret	 4
$LN18@basic_stri:
  0005a	56		 push	 esi

; 4714 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0005b	8b f3		 mov	 esi, ebx
  0005d	83 ce 0f	 or	 esi, 15			; 0000000fH
  00060	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4715 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00066	76 17		 jbe	 SHORT $LN25@basic_stri

; 4716 :             return _Max;

  00068	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0006d	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00078	83 c4 04	 add	 esp, 4
  0007b	8b c8		 mov	 ecx, eax
  0007d	eb 34		 jmp	 SHORT $LN32@basic_stri
$LN25@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 47   :     return _Left < _Right ? _Right : _Left;

  0007f	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00084	3b f0		 cmp	 esi, eax
  00086	0f 42 f0	 cmovb	 esi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2652 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00089	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0008c	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00091	72 0d		 jb	 SHORT $LN33@basic_stri

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00099	83 c4 04	 add	 esp, 4
  0009c	8b c8		 mov	 ecx, eax
  0009e	eb 13		 jmp	 SHORT $LN32@basic_stri
$LN33@basic_stri:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  000a0	85 c0		 test	 eax, eax
  000a2	74 0d		 je	 SHORT $LN34@basic_stri

; 87   :         return ::operator new(_Bytes);

  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000aa	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  000ad	8b c8		 mov	 ecx, eax
  000af	eb 02		 jmp	 SHORT $LN32@basic_stri
$LN34@basic_stri:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  000b1	33 c9		 xor	 ecx, ecx
$LN32@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2666 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);

  000b3	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  000b6	89 0f		 mov	 DWORD PTR [edi], ecx

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000b8	50		 push	 eax
  000b9	ff 75 08	 push	 DWORD PTR __Result$1$[ebp]

; 2657 :         _My_data._Mysize = _Count;

  000bc	89 5f 10	 mov	 DWORD PTR [edi+16], ebx

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000bf	51		 push	 ecx

; 2658 :         _My_data._Myres  = _New_capacity;

  000c0	89 77 14	 mov	 DWORD PTR [edi+20], esi

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c3	e8 00 00 00 00	 call	 _memcpy
  000c8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2493 :     }

  000cb	8b c7		 mov	 eax, edi

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000cd	5e		 pop	 esi

; 2493 :     }

  000ce	5f		 pop	 edi
  000cf	5b		 pop	 ebx
  000d0	5d		 pop	 ebp
  000d1	c2 04 00	 ret	 4
$LN49@basic_stri:

; 2621 :             _Xlen_string(); // result too long

  000d4	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN47@basic_stri:
  000d9	cc		 int	 3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2312 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 331  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 332  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
;	COMDAT __snprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__snprintf PROC						; COMDAT

; 1947 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1392 :         int const _Result = __stdio_common_vsprintf(

  00003	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 01	 or	 ecx, 1
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1393 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1394 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1395 : 
; 1396 :         return _Result < 0 ? -1 : _Result;

  00025	83 c9 ff	 or	 ecx, -1
  00028	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 48 c1	 cmovs	 eax, ecx

; 1948 :         int _Result;
; 1949 :         va_list _ArgList;
; 1950 :         __crt_va_start(_ArgList, _Format);
; 1951 :         _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
; 1952 :         __crt_va_end(_ArgList);
; 1953 :         return _Result;
; 1954 :     }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
__snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1771 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1392 :         int const _Result = __stdio_common_vsprintf(

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1393 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1394 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1395 : 
; 1396 :         return _Result < 0 ? -1 : _Result;

  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1772 :         int _Result;
; 1773 :         va_list _ArgList;
; 1774 :         __crt_va_start(_ArgList, _Format);
; 1775 : 
; 1776 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);
; 1777 : 
; 1778 :         __crt_va_end(_ArgList);
; 1779 :         return _Result;
; 1780 :     }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
