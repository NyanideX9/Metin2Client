; Listing generated by Microsoft (R) Optimizing Compiler Version 19.37.32822.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\GameLib\Distribute\RaceManager.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`scalar deleting destructor'
PUBLIC	??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDe'
	DB	'corator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDec'
	DB	'orator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpd'
	DB	'ateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@N'
	DB	'EffectUpdateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEff'
	DB	'ectUpdateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffe'
	DB	'ctUpdateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecora'
	DB	'tor@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDeco'
	DB	'rator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	___local_stdio_printf_options
PUBLIC	___local_stdio_scanf_options
PUBLIC	__snprintf
PUBLIC	_sscanf
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?_Throw_tree_length_error@std@@YAXXZ		; std::_Throw_tree_length_error
PUBLIC	?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate
PUBLIC	??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array
PUBLIC	?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
PUBLIC	??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Insert_node
PUBLIC	??1?$CSingleton@VCRaceManager@@@@UAE@XZ		; CSingleton<CRaceManager>::~CSingleton<CRaceManager>
PUBLIC	??_G?$CSingleton@VCRaceManager@@@@UAEPAXI@Z	; CSingleton<CRaceManager>::`scalar deleting destructor'
PUBLIC	??1?$_Tree@V?$_Tmap_traits@KPAVCRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCRaceData@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CRaceData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CRaceData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData *> >,0> >
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCRaceData@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CRaceData *> > >::_Insert_node
PUBLIC	??1?$map@KPAVCRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCRaceData@@@std@@@3@@std@@QAE@XZ ; std::map<unsigned long,CRaceData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData *> > >::~map<unsigned long,CRaceData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData *> > >
PUBLIC	??0CRaceManager@@QAE@XZ				; CRaceManager::CRaceManager
PUBLIC	??1CRaceManager@@UAE@XZ				; CRaceManager::~CRaceManager
PUBLIC	?Create@CRaceManager@@QAEXXZ			; CRaceManager::Create
PUBLIC	?Destroy@CRaceManager@@QAEXXZ			; CRaceManager::Destroy
PUBLIC	?RegisterRaceName@CRaceManager@@QAEXKPBD@Z	; CRaceManager::RegisterRaceName
PUBLIC	?RegisterRaceSrcName@CRaceManager@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; CRaceManager::RegisterRaceSrcName
PUBLIC	?SetPathName@CRaceManager@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CRaceManager::SetPathName
PUBLIC	?GetFullPathFileName@CRaceManager@@QAEPBDPBD@Z	; CRaceManager::GetFullPathFileName
PUBLIC	?CreateRace@CRaceManager@@QAEXK@Z		; CRaceManager::CreateRace
PUBLIC	?SelectRace@CRaceManager@@QAEXK@Z		; CRaceManager::SelectRace
PUBLIC	?GetSelectedRaceDataPointer@CRaceManager@@QAEPAVCRaceData@@XZ ; CRaceManager::GetSelectedRaceDataPointer
PUBLIC	?GetRaceDataPointer@CRaceManager@@QAEHKPAPAVCRaceData@@@Z ; CRaceManager::GetRaceDataPointer
PUBLIC	?__LoadRaceData@CRaceManager@@IAEPAVCRaceData@@K@Z ; CRaceManager::__LoadRaceData
PUBLIC	?__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z ; CRaceManager::__LoadRaceMotionList
PUBLIC	?__Initialize@CRaceManager@@IAEXXZ		; CRaceManager::__Initialize
PUBLIC	?__DestroyRaceDataMap@CRaceManager@@IAEXXZ	; CRaceManager::__DestroyRaceDataMap
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Insert_node
PUBLIC	??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAE@XZ ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
PUBLIC	??_GCRaceManager@@UAEPAXI@Z			; CRaceManager::`scalar deleting destructor'
PUBLIC	?__IsGuildRace@@YA_NI@Z				; __IsGuildRace
PUBLIC	?__IsNPCRace@@YA_NI@Z				; __IsNPCRace
PUBLIC	?__GetRaceResourcePathes@@YAXIAAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z ; __GetRaceResourcePathes
PUBLIC	??$emplace_back@AAY0BE@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?A_TAAY0BE@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<char const (&)[20]>
PUBLIC	??$emplace_back@AAY0BC@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?A_TAAY0BC@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<char const (&)[18]>
PUBLIC	??$emplace_back@AAY0BD@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?A_TAAY0BD@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<char const (&)[19]>
PUBLIC	??$emplace_back@AAY0BG@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?A_TAAY0BG@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<char const (&)[22]>
PUBLIC	??$emplace_back@AAY0BH@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?A_TAAY0BH@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<char const (&)[23]>
PUBLIC	??$emplace_back@AAY0BI@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?A_TAAY0BI@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<char const (&)[24]>
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> > >::_Insert_node
PUBLIC	??$emplace@AAY05$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY05$$CBD$$QAW4EName@CRaceMotionData@@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[6],enum CRaceMotionData::EName>
PUBLIC	??$emplace@AAY04$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY04$$CBD$$QAW4EName@CRaceMotionData@@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[5],enum CRaceMotionData::EName>
PUBLIC	??$emplace@AAY0N@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0N@$$CBD$$QAW4EName@CRaceMotionData@@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[13],enum CRaceMotionData::EName>
PUBLIC	??$emplace@AAY0O@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0O@$$CBD$$QAW4EName@CRaceMotionData@@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[14],enum CRaceMotionData::EName>
PUBLIC	??$emplace@AAY0P@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0P@$$CBD$$QAW4EName@CRaceMotionData@@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[15],enum CRaceMotionData::EName>
PUBLIC	??$emplace@AAY0L@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0L@$$CBD$$QAW4EName@CRaceMotionData@@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[11],enum CRaceMotionData::EName>
PUBLIC	??$emplace@AAY0M@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0M@$$CBD$$QAW4EName@CRaceMotionData@@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[12],enum CRaceMotionData::EName>
PUBLIC	??$emplace@AAY0BA@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0BA@$$CBD$$QAW4EName@CRaceMotionData@@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[16],enum CRaceMotionData::EName>
PUBLIC	??$emplace@AAY08$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY08$$CBD$$QAW4EName@CRaceMotionData@@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[9],enum CRaceMotionData::EName>
PUBLIC	??$emplace@AAY06$$CBDH@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY06$$CBD$$QAH@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[7],int>
PUBLIC	??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$emplace@AAKAAPAVCRaceData@@@?$_Tree@V?$_Tmap_traits@KPAVCRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCRaceData@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCRaceData@@@std@@@std@@@std@@@std@@_N@1@AAKAAPAVCRaceData@@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CRaceData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData *> >,0> >::emplace<unsigned long &,CRaceData * &>
PUBLIC	??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@KAXPAVCRotationDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@KAXPAVCGravityDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@KAXPAVCAirResistanceDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@KAXPAVCNullDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@KAXPAVCHeaderDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::Delete
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCRaceData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CRaceData *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData *>,void *> > >
PUBLIC	??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$_Emplace_reallocate@AAY0BE@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BE@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<char const (&)[20]>
PUBLIC	??$_Emplace_reallocate@AAY0BC@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BC@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<char const (&)[18]>
PUBLIC	??$_Emplace_reallocate@AAY0BD@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BD@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<char const (&)[19]>
PUBLIC	??$_Emplace_reallocate@AAY0BG@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BG@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<char const (&)[22]>
PUBLIC	??$_Emplace_reallocate@AAY0BH@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BH@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<char const (&)[23]>
PUBLIC	??$_Emplace_reallocate@AAY0BI@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BI@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<char const (&)[24]>
PUBLIC	??$_Emplace_reallocate@AAY0O@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0O@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<char const (&)[14]>
PUBLIC	??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >
PUBLIC	??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
PUBLIC	??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCRaceData@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CRaceData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData *> >,0> >::_Find_lower_bound<unsigned long>
PUBLIC	??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Find_lower_bound<unsigned long>
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
PUBLIC	??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >
PUBLIC	??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >
PUBLIC	??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
PUBLIC	??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
PUBLIC	??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData *>,void *> > >
PUBLIC	??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::destroy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >::destroy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_0BB@GCADKGJO@map?1set?5too?5long@		; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position@	; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?ms_singleton@?$CSingleton@VCRaceManager@@@@0PAVCRaceManager@@A ; CSingleton<CRaceManager>::ms_singleton
PUBLIC	??_7?$CSingleton@VCRaceManager@@@@6B@		; CSingleton<CRaceManager>::`vftable'
PUBLIC	??_7CRaceManager@@6B@				; CRaceManager::`vftable'
PUBLIC	?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool
PUBLIC	?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A ; CSingleton<CEterPackManager>::ms_singleton
PUBLIC	??_C@_0BE@PJNPAGEJ@d?3?1ymir?5work?1guild?1@	; `string'
PUBLIC	??_C@_0BC@HJMPPIOH@d?3?1ymir?5work?1npc?1@	; `string'
PUBLIC	??_C@_0BD@DIPFLAGN@d?3?1ymir?5work?1npc2?1@	; `string'
PUBLIC	??_C@_0BG@CKCIELCO@d?3?1ymir?5work?1npc_pet?1@	; `string'
PUBLIC	??_C@_0BG@FGIKCKJD@d?3?1ymir?5work?1monster?1@	; `string'
PUBLIC	??_C@_0BH@GPLCEAJK@d?3?1ymir?5work?1monster2?1@	; `string'
PUBLIC	??_C@_0BI@BCLHILHN@d?3?1ymir?5work?1npc_mount?1@ ; `string'
PUBLIC	??_C@_0O@PEPGGFH@?$CDseason1?1npc?1@		; `string'
PUBLIC	??_C@_0O@DOKHHMMK@?$CDseason2?1npc?1@		; `string'
PUBLIC	??_C@_0BC@DOJALNLB@?$CDseason1?1monster?1@	; `string'
PUBLIC	??_C@_0BC@KHHCNLLA@?$CDseason2?1monster?1@	; `string'
PUBLIC	??_C@_0M@PECPBC@?$CFsshape?4msm@		; `string'
PUBLIC	??_C@_0O@FJBDMFMI@?$CFsmotlist?4txt@		; `string'
PUBLIC	??_C@_0DJ@FBAOJDFF@CRaceManager?3?3RegisterRacePath?$CI@ ; `string'
PUBLIC	??_C@_01KMDKNFGN@?1@				; `string'
PUBLIC	??_C@_09HPPJBJBB@shape?4msm@			; `string'
PUBLIC	??_C@_04IIEHFLK@?4msm@				; `string'
PUBLIC	??_C@_0FK@NGFDIHNH@CRaceManager?3?3RegisterRacePath?5@ ; `string'
PUBLIC	??_C@_0EB@IDBEOJF@CRaceManager?3?3RegisterRacePath?5@ ; `string'
PUBLIC	??_C@_0DN@CNIFOKKO@CRaceManager?3?3RegisterRacePath?5@ ; `string'
PUBLIC	??_C@_05NIJFIOCI@SPAWN@				; `string'
PUBLIC	??_C@_04DBNKAKHO@WAIT@				; `string'
PUBLIC	??_C@_05HBNBIBID@WAIT1@				; `string'
PUBLIC	??_C@_05FKPMNCEA@WAIT2@				; `string'
PUBLIC	??_C@_04PKELMGAL@WALK@				; `string'
PUBLIC	??_C@_05FBHFJFPM@WALK1@				; `string'
PUBLIC	??_C@_05HKFIMGDP@WALK2@				; `string'
PUBLIC	??_C@_03LLDCGJBK@RUN@				; `string'
PUBLIC	??_C@_04DLIEMMKB@RUN1@				; `string'
PUBLIC	??_C@_04BAKJJPGC@RUN2@				; `string'
PUBLIC	??_C@_04MDHMLCKF@STOP@				; `string'
PUBLIC	??_C@_04NNCJDDJC@DEAD@				; `string'
PUBLIC	??_C@_0N@ECIMAFHI@COMBO_ATTACK@			; `string'
PUBLIC	??_C@_0O@JIMBHCLJ@COMBO_ATTACK1@		; `string'
PUBLIC	??_C@_0O@LDOMCBHK@COMBO_ATTACK2@		; `string'
PUBLIC	??_C@_0O@MMNGEKGD@NORMAL_ATTACK@		; `string'
PUBLIC	??_C@_0P@BCCKOBBK@NORMAL_ATTACK1@		; `string'
PUBLIC	??_C@_0P@DJAHLCNJ@NORMAL_ATTACK2@		; `string'
PUBLIC	??_C@_0N@FEIIBDLE@FRONT_DAMAGE@			; `string'
PUBLIC	??_C@_0O@KAFPIDE@FRONT_DAMAGE1@			; `string'
PUBLIC	??_C@_0O@CBCIKLPH@FRONT_DAMAGE2@		; `string'
PUBLIC	??_C@_0O@DIDDJKLG@FRONT_DAMAGE3@		; `string'
PUBLIC	??_C@_0L@OEOOJLDF@FRONT_DEAD@			; `string'
PUBLIC	??_C@_0M@JAAKCNAK@FRONT_DEAD1@			; `string'
PUBLIC	??_C@_0M@LLCHHOMJ@FRONT_DEAD2@			; `string'
PUBLIC	??_C@_0BA@DFAPGFAO@FRONT_KNOCKDOWN@		; `string'
PUBLIC	??_C@_0BB@CBNACFNA@FRONT_KNOCKDOWN1@		; `string'
PUBLIC	??_C@_0O@MOHKHCLN@FRONT_STANDUP@		; `string'
PUBLIC	??_C@_0P@HDEDLCPB@FRONT_STANDUP1@		; `string'
PUBLIC	??_C@_0M@OFKIBNMF@BACK_DAMAGE@			; `string'
PUBLIC	??_C@_0N@CNLGJJJA@BACK_DAMAGE1@			; `string'
PUBLIC	??_C@_09LHOBDCIP@BACK_DEAD@			; `string'
PUBLIC	??_C@_0L@LLONHIDB@BACK_DEAD1@			; `string'
PUBLIC	??_C@_0L@JAMACLPC@BACK_DEAD2@			; `string'
PUBLIC	??_C@_0P@MFNBGKJO@BACK_KNOCKDOWN@		; `string'
PUBLIC	??_C@_0BA@NBCPGIJL@BACK_KNOCKDOWN1@		; `string'
PUBLIC	??_C@_0N@OJMJBDBJ@BACK_STANDUP@			; `string'
PUBLIC	??_C@_0O@KCNPGGGB@BACK_STANDUP1@		; `string'
PUBLIC	??_C@_07OJOPHEAL@SPECIAL@			; `string'
PUBLIC	??_C@_08FBGGDBEO@SPECIAL1@			; `string'
PUBLIC	??_C@_08HKELGCIN@SPECIAL2@			; `string'
PUBLIC	??_C@_08GDFAFDMM@SPECIAL3@			; `string'
PUBLIC	??_C@_08CMBBMFAL@SPECIAL4@			; `string'
PUBLIC	??_C@_08DFAKPEEK@SPECIAL5@			; `string'
PUBLIC	??_C@_06COMNIHKP@SKILL1@			; `string'
PUBLIC	??_C@_06FOANEGM@SKILL2@				; `string'
PUBLIC	??_C@_06BMPLOFCN@SKILL3@			; `string'
PUBLIC	??_C@_06FDLKHDOK@SKILL4@			; `string'
PUBLIC	??_C@_06EKKBECKL@SKILL5@			; `string'
PUBLIC	??_C@_0M@HPBHEBFF@?$CFs?5?$CFs?5?$CFs?5?$CFd@	; `string'
PUBLIC	??_C@_0DC@LBGILCOK@RaceManager?3?3CreateRace?5?3?5Race?5@ ; `string'
PUBLIC	??_C@_0CJ@LEJBEJHD@CRaceManager?3?3CreateRace?$CIdwRace@ ; `string'
PUBLIC	??_C@_0EG@LLEJKJIA@CRaceManager?3?3GetRaceDataPointe@ ; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CRaceManager@@6B@				; CRaceManager::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCRaceManager@@@8			; CRaceManager `RTTI Type Descriptor'
PUBLIC	??_R3CRaceManager@@8				; CRaceManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CRaceManager@@8				; CRaceManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CRaceManager@@8			; CRaceManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$CSingleton@VCRaceManager@@@@8	; CSingleton<CRaceManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$CSingleton@VCRaceManager@@@@@8	; CSingleton<CRaceManager> `RTTI Type Descriptor'
PUBLIC	??_R3?$CSingleton@VCRaceManager@@@@8		; CSingleton<CRaceManager>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CSingleton@VCRaceManager@@@@8		; CSingleton<CRaceManager>::`RTTI Base Class Array'
PUBLIC	??_R4?$CSingleton@VCRaceManager@@@@6B@		; CSingleton<CRaceManager>::`RTTI Complete Object Locator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_abort:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	___stdio_common_vsscanf:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?Tracenf@@YAXPBDZZ:PROC				; Tracenf
EXTRN	?TraceError@@YAXPBDZZ:PROC			; TraceError
EXTRN	??0CMemoryTextFileLoader@@QAE@XZ:PROC		; CMemoryTextFileLoader::CMemoryTextFileLoader
EXTRN	??1CMemoryTextFileLoader@@UAE@XZ:PROC		; CMemoryTextFileLoader::~CMemoryTextFileLoader
EXTRN	?Bind@CMemoryTextFileLoader@@QAEXHPBX@Z:PROC	; CMemoryTextFileLoader::Bind
EXTRN	?GetLineCount@CMemoryTextFileLoader@@QAEKXZ:PROC ; CMemoryTextFileLoader::GetLineCount
EXTRN	?GetLineString@CMemoryTextFileLoader@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@Z:PROC ; CMemoryTextFileLoader::GetLineString
EXTRN	??0CMappedFile@@QAE@XZ:PROC			; CMappedFile::CMappedFile
EXTRN	??1CMappedFile@@UAE@XZ:PROC			; CMappedFile::~CMappedFile
EXTRN	?Size@CMappedFile@@QAEKXZ:PROC			; CMappedFile::Size
EXTRN	?New@CRaceData@@SAPAV1@XZ:PROC			; CRaceData::New
EXTRN	?Delete@CRaceData@@SAXPAV1@@Z:PROC		; CRaceData::Delete
EXTRN	?CreateSystem@CRaceData@@SAXII@Z:PROC		; CRaceData::CreateSystem
EXTRN	?GetMotionListFileName@CRaceData@@QBEPBDXZ:PROC	; CRaceData::GetMotionListFileName
EXTRN	?LoadRaceData@CRaceData@@QAEHPBD@Z:PROC		; CRaceData::LoadRaceData
EXTRN	?RegisterMotionData@CRaceData@@QAEPAVCGraphicThing@@GGPBDE@Z:PROC ; CRaceData::RegisterMotionData
EXTRN	?SetRace@CRaceData@@QAEXK@Z:PROC		; CRaceData::SetRace
EXTRN	?RegisterMotionMode@CRaceData@@QAEXG@Z:PROC	; CRaceData::RegisterMotionMode
EXTRN	?RegisterNormalAttack@CRaceData@@QAEXGG@Z:PROC	; CRaceData::RegisterNormalAttack
EXTRN	??_E?$CSingleton@VCRaceManager@@@@UAEPAXI@Z:PROC ; CSingleton<CRaceManager>::`vector deleting destructor'
EXTRN	??_ECRaceManager@@UAEPAXI@Z:PROC		; CRaceManager::`vector deleting destructor'
EXTRN	?CreateSystem@CRaceMotionData@@SAXI@Z:PROC	; CRaceMotionData::CreateSystem
EXTRN	?Get@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z:PROC ; CEterPackManager::Get
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	___security_cookie:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCRaceManager@@@@0PAVCRaceManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCRaceManager@@@@0PAVCRaceManager@@A DD 01H DUP (?) ; CSingleton<CRaceManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A DD 01H DUP (?) ; CSingleton<CEterPackManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
_BSS	SEGMENT
?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A DQ 01H DUP (?) ; `CRaceManager::__LoadRaceMotionList'::`2'::s_kMap_stType_dwIndex
_BSS	ENDS
;	COMDAT ?$TSS0@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4HA
_BSS	SEGMENT
?$TSS0@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4HA DD 01H DUP (?) ; `CRaceManager::__LoadRaceMotionList'::`2'::$TSS0
_BSS	ENDS
;	COMDAT ?s_isInit@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4_NA
_BSS	SEGMENT
?s_isInit@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4_NA DB 01H DUP (?) ; `CRaceManager::__LoadRaceMotionList'::`2'::s_isInit
_BSS	ENDS
;	COMDAT ?$TSS1@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4HA
_BSS	SEGMENT
?$TSS1@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4HA DD 01H DUP (?) ; `CRaceManager::__LoadRaceMotionList'::`2'::$TSS1
_BSS	ENDS
;	COMDAT ?$TSS2@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4HA
_BSS	SEGMENT
?$TSS2@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4HA DD 01H DUP (?) ; `CRaceManager::__LoadRaceMotionList'::`2'::$TSS2
_BSS	ENDS
;	COMDAT ?$TSS0@?1??GetFullPathFileName@CRaceManager@@QAEPBDPBD@Z@4HA
_BSS	SEGMENT
?$TSS0@?1??GetFullPathFileName@CRaceManager@@QAEPBDPBD@Z@4HA DD 01H DUP (?) ; `CRaceManager::GetFullPathFileName'::`2'::$TSS0
_BSS	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT ??_R4?$CSingleton@VCRaceManager@@@@6B@
rdata$r	SEGMENT
??_R4?$CSingleton@VCRaceManager@@@@6B@ DD 00H		; CSingleton<CRaceManager>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CSingleton@VCRaceManager@@@@@8
	DD	FLAT:??_R3?$CSingleton@VCRaceManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CSingleton@VCRaceManager@@@@8
rdata$r	SEGMENT
??_R2?$CSingleton@VCRaceManager@@@@8 DD FLAT:??_R1A@?0A@EA@?$CSingleton@VCRaceManager@@@@8 ; CSingleton<CRaceManager>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CSingleton@VCRaceManager@@@@8
rdata$r	SEGMENT
??_R3?$CSingleton@VCRaceManager@@@@8 DD 00H		; CSingleton<CRaceManager>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CSingleton@VCRaceManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CSingleton@VCRaceManager@@@@@8
data$rs	SEGMENT
??_R0?AV?$CSingleton@VCRaceManager@@@@@8 DD FLAT:??_7type_info@@6B@ ; CSingleton<CRaceManager> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CSingleton@VCRaceManager@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CSingleton@VCRaceManager@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CSingleton@VCRaceManager@@@@8 DD FLAT:??_R0?AV?$CSingleton@VCRaceManager@@@@@8 ; CSingleton<CRaceManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CSingleton@VCRaceManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CRaceManager@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CRaceManager@@8 DD FLAT:??_R0?AVCRaceManager@@@8 ; CRaceManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CRaceManager@@8
rdata$r	ENDS
;	COMDAT ??_R2CRaceManager@@8
rdata$r	SEGMENT
??_R2CRaceManager@@8 DD FLAT:??_R1A@?0A@EA@CRaceManager@@8 ; CRaceManager::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$CSingleton@VCRaceManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R3CRaceManager@@8
rdata$r	SEGMENT
??_R3CRaceManager@@8 DD 00H				; CRaceManager::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CRaceManager@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCRaceManager@@@8
data$rs	SEGMENT
??_R0?AVCRaceManager@@@8 DD FLAT:??_7type_info@@6B@	; CRaceManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCRaceManager@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CRaceManager@@6B@
rdata$r	SEGMENT
??_R4CRaceManager@@6B@ DD 00H				; CRaceManager::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCRaceManager@@@8
	DD	FLAT:??_R3CRaceManager@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ?s_stFileName@?1??GetFullPathFileName@CRaceManager@@QAEPBDPBD@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
_DATA	SEGMENT
?s_stFileName@?1??GetFullPathFileName@CRaceManager@@QAEPBDPBD@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A DB 00H ; `CRaceManager::GetFullPathFileName'::`2'::s_stFileName
	DB	19 DUP(00H)
	DD	0fH
_DATA	ENDS
;	COMDAT ??_C@_0EG@LLEJKJIA@CRaceManager?3?3GetRaceDataPointe@
CONST	SEGMENT
??_C@_0EG@LLEJKJIA@CRaceManager?3?3GetRaceDataPointe@ DB 'CRaceManager::G'
	DB	'etRaceDataPointer: cannot load data by dwRaceIndex %lu', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@LEJBEJHD@CRaceManager?3?3CreateRace?$CIdwRace@
CONST	SEGMENT
??_C@_0CJ@LEJBEJHD@CRaceManager?3?3CreateRace?$CIdwRace@ DB 'CRaceManager'
	DB	'::CreateRace(dwRaceIndex=%d)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@LBGILCOK@RaceManager?3?3CreateRace?5?3?5Race?5@
CONST	SEGMENT
??_C@_0DC@LBGILCOK@RaceManager?3?3CreateRace?5?3?5Race?5@ DB 'RaceManager'
	DB	'::CreateRace : Race %u already created', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HPBHEBFF@?$CFs?5?$CFs?5?$CFs?5?$CFd@
CONST	SEGMENT
??_C@_0M@HPBHEBFF@?$CFs?5?$CFs?5?$CFs?5?$CFd@ DB '%s %s %s %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06EKKBECKL@SKILL5@
CONST	SEGMENT
??_C@_06EKKBECKL@SKILL5@ DB 'SKILL5', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FDLKHDOK@SKILL4@
CONST	SEGMENT
??_C@_06FDLKHDOK@SKILL4@ DB 'SKILL4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BMPLOFCN@SKILL3@
CONST	SEGMENT
??_C@_06BMPLOFCN@SKILL3@ DB 'SKILL3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FOANEGM@SKILL2@
CONST	SEGMENT
??_C@_06FOANEGM@SKILL2@ DB 'SKILL2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06COMNIHKP@SKILL1@
CONST	SEGMENT
??_C@_06COMNIHKP@SKILL1@ DB 'SKILL1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08DFAKPEEK@SPECIAL5@
CONST	SEGMENT
??_C@_08DFAKPEEK@SPECIAL5@ DB 'SPECIAL5', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08CMBBMFAL@SPECIAL4@
CONST	SEGMENT
??_C@_08CMBBMFAL@SPECIAL4@ DB 'SPECIAL4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08GDFAFDMM@SPECIAL3@
CONST	SEGMENT
??_C@_08GDFAFDMM@SPECIAL3@ DB 'SPECIAL3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08HKELGCIN@SPECIAL2@
CONST	SEGMENT
??_C@_08HKELGCIN@SPECIAL2@ DB 'SPECIAL2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08FBGGDBEO@SPECIAL1@
CONST	SEGMENT
??_C@_08FBGGDBEO@SPECIAL1@ DB 'SPECIAL1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07OJOPHEAL@SPECIAL@
CONST	SEGMENT
??_C@_07OJOPHEAL@SPECIAL@ DB 'SPECIAL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KCNPGGGB@BACK_STANDUP1@
CONST	SEGMENT
??_C@_0O@KCNPGGGB@BACK_STANDUP1@ DB 'BACK_STANDUP1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OJMJBDBJ@BACK_STANDUP@
CONST	SEGMENT
??_C@_0N@OJMJBDBJ@BACK_STANDUP@ DB 'BACK_STANDUP', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NBCPGIJL@BACK_KNOCKDOWN1@
CONST	SEGMENT
??_C@_0BA@NBCPGIJL@BACK_KNOCKDOWN1@ DB 'BACK_KNOCKDOWN1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MFNBGKJO@BACK_KNOCKDOWN@
CONST	SEGMENT
??_C@_0P@MFNBGKJO@BACK_KNOCKDOWN@ DB 'BACK_KNOCKDOWN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JAMACLPC@BACK_DEAD2@
CONST	SEGMENT
??_C@_0L@JAMACLPC@BACK_DEAD2@ DB 'BACK_DEAD2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LLONHIDB@BACK_DEAD1@
CONST	SEGMENT
??_C@_0L@LLONHIDB@BACK_DEAD1@ DB 'BACK_DEAD1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09LHOBDCIP@BACK_DEAD@
CONST	SEGMENT
??_C@_09LHOBDCIP@BACK_DEAD@ DB 'BACK_DEAD', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CNLGJJJA@BACK_DAMAGE1@
CONST	SEGMENT
??_C@_0N@CNLGJJJA@BACK_DAMAGE1@ DB 'BACK_DAMAGE1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OFKIBNMF@BACK_DAMAGE@
CONST	SEGMENT
??_C@_0M@OFKIBNMF@BACK_DAMAGE@ DB 'BACK_DAMAGE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HDEDLCPB@FRONT_STANDUP1@
CONST	SEGMENT
??_C@_0P@HDEDLCPB@FRONT_STANDUP1@ DB 'FRONT_STANDUP1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MOHKHCLN@FRONT_STANDUP@
CONST	SEGMENT
??_C@_0O@MOHKHCLN@FRONT_STANDUP@ DB 'FRONT_STANDUP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CBNACFNA@FRONT_KNOCKDOWN1@
CONST	SEGMENT
??_C@_0BB@CBNACFNA@FRONT_KNOCKDOWN1@ DB 'FRONT_KNOCKDOWN1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DFAPGFAO@FRONT_KNOCKDOWN@
CONST	SEGMENT
??_C@_0BA@DFAPGFAO@FRONT_KNOCKDOWN@ DB 'FRONT_KNOCKDOWN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LLCHHOMJ@FRONT_DEAD2@
CONST	SEGMENT
??_C@_0M@LLCHHOMJ@FRONT_DEAD2@ DB 'FRONT_DEAD2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JAAKCNAK@FRONT_DEAD1@
CONST	SEGMENT
??_C@_0M@JAAKCNAK@FRONT_DEAD1@ DB 'FRONT_DEAD1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OEOOJLDF@FRONT_DEAD@
CONST	SEGMENT
??_C@_0L@OEOOJLDF@FRONT_DEAD@ DB 'FRONT_DEAD', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DIDDJKLG@FRONT_DAMAGE3@
CONST	SEGMENT
??_C@_0O@DIDDJKLG@FRONT_DAMAGE3@ DB 'FRONT_DAMAGE3', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CBCIKLPH@FRONT_DAMAGE2@
CONST	SEGMENT
??_C@_0O@CBCIKLPH@FRONT_DAMAGE2@ DB 'FRONT_DAMAGE2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KAFPIDE@FRONT_DAMAGE1@
CONST	SEGMENT
??_C@_0O@KAFPIDE@FRONT_DAMAGE1@ DB 'FRONT_DAMAGE1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FEIIBDLE@FRONT_DAMAGE@
CONST	SEGMENT
??_C@_0N@FEIIBDLE@FRONT_DAMAGE@ DB 'FRONT_DAMAGE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DJAHLCNJ@NORMAL_ATTACK2@
CONST	SEGMENT
??_C@_0P@DJAHLCNJ@NORMAL_ATTACK2@ DB 'NORMAL_ATTACK2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BCCKOBBK@NORMAL_ATTACK1@
CONST	SEGMENT
??_C@_0P@BCCKOBBK@NORMAL_ATTACK1@ DB 'NORMAL_ATTACK1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MMNGEKGD@NORMAL_ATTACK@
CONST	SEGMENT
??_C@_0O@MMNGEKGD@NORMAL_ATTACK@ DB 'NORMAL_ATTACK', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LDOMCBHK@COMBO_ATTACK2@
CONST	SEGMENT
??_C@_0O@LDOMCBHK@COMBO_ATTACK2@ DB 'COMBO_ATTACK2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JIMBHCLJ@COMBO_ATTACK1@
CONST	SEGMENT
??_C@_0O@JIMBHCLJ@COMBO_ATTACK1@ DB 'COMBO_ATTACK1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@ECIMAFHI@COMBO_ATTACK@
CONST	SEGMENT
??_C@_0N@ECIMAFHI@COMBO_ATTACK@ DB 'COMBO_ATTACK', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04NNCJDDJC@DEAD@
CONST	SEGMENT
??_C@_04NNCJDDJC@DEAD@ DB 'DEAD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04MDHMLCKF@STOP@
CONST	SEGMENT
??_C@_04MDHMLCKF@STOP@ DB 'STOP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04BAKJJPGC@RUN2@
CONST	SEGMENT
??_C@_04BAKJJPGC@RUN2@ DB 'RUN2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04DLIEMMKB@RUN1@
CONST	SEGMENT
??_C@_04DLIEMMKB@RUN1@ DB 'RUN1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03LLDCGJBK@RUN@
CONST	SEGMENT
??_C@_03LLDCGJBK@RUN@ DB 'RUN', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05HKFIMGDP@WALK2@
CONST	SEGMENT
??_C@_05HKFIMGDP@WALK2@ DB 'WALK2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05FBHFJFPM@WALK1@
CONST	SEGMENT
??_C@_05FBHFJFPM@WALK1@ DB 'WALK1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04PKELMGAL@WALK@
CONST	SEGMENT
??_C@_04PKELMGAL@WALK@ DB 'WALK', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05FKPMNCEA@WAIT2@
CONST	SEGMENT
??_C@_05FKPMNCEA@WAIT2@ DB 'WAIT2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05HBNBIBID@WAIT1@
CONST	SEGMENT
??_C@_05HBNBIBID@WAIT1@ DB 'WAIT1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04DBNKAKHO@WAIT@
CONST	SEGMENT
??_C@_04DBNKAKHO@WAIT@ DB 'WAIT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05NIJFIOCI@SPAWN@
CONST	SEGMENT
??_C@_05NIJFIOCI@SPAWN@ DB 'SPAWN', 00H			; `string'
CONST	ENDS
;	COMDAT ?stMotionFileName@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
_DATA	SEGMENT
?stMotionFileName@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A DB 00H ; `CRaceManager::__LoadRaceMotionList'::`2'::stMotionFileName
	DB	19 DUP(00H)
	DD	0fH
_DATA	ENDS
;	COMDAT ?stSpawnMotionFileName@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
_DATA	SEGMENT
?stSpawnMotionFileName@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A DB 00H ; `CRaceManager::__LoadRaceMotionList'::`2'::stSpawnMotionFileName
	DB	19 DUP(00H)
	DD	0fH
_DATA	ENDS
;	COMDAT ??_C@_0DN@CNIFOKKO@CRaceManager?3?3RegisterRacePath?5@
CONST	SEGMENT
??_C@_0DN@CNIFOKKO@CRaceManager?3?3RegisterRacePath?5@ DB 'CRaceManager::'
	DB	'RegisterRacePath : RACE[%u] HAVE NO PATH ERROR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@IDBEOJF@CRaceManager?3?3RegisterRacePath?5@
CONST	SEGMENT
??_C@_0EB@IDBEOJF@CRaceManager?3?3RegisterRacePath?5@ DB 'CRaceManager::R'
	DB	'egisterRacePath : RACE[%u] LOAD MSMFILE[%s] ERROR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FK@NGFDIHNH@CRaceManager?3?3RegisterRacePath?5@
CONST	SEGMENT
??_C@_0FK@NGFDIHNH@CRaceManager?3?3RegisterRacePath?5@ DB 'CRaceManager::'
	DB	'RegisterRacePath : RACE[%u] LOAD MSMFILE[%s] ERROR. Will Find'
	DB	' Another Path.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04IIEHFLK@?4msm@
CONST	SEGMENT
??_C@_04IIEHFLK@?4msm@ DB '.msm', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09HPPJBJBB@shape?4msm@
CONST	SEGMENT
??_C@_09HPPJBJBB@shape?4msm@ DB 'shape.msm', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01KMDKNFGN@?1@
CONST	SEGMENT
??_C@_01KMDKNFGN@?1@ DB '/', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@FBAOJDFF@CRaceManager?3?3RegisterRacePath?$CI@
CONST	SEGMENT
??_C@_0DJ@FBAOJDFF@CRaceManager?3?3RegisterRacePath?$CI@ DB 'CRaceManager'
	DB	'::RegisterRacePath(race=%u).LoadRaceData(%s)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FJBDMFMI@?$CFsmotlist?4txt@
CONST	SEGMENT
??_C@_0O@FJBDMFMI@?$CFsmotlist?4txt@ DB '%smotlist.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PECPBC@?$CFsshape?4msm@
CONST	SEGMENT
??_C@_0M@PECPBC@?$CFsshape?4msm@ DB '%sshape.msm', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KHHCNLLA@?$CDseason2?1monster?1@
CONST	SEGMENT
??_C@_0BC@KHHCNLLA@?$CDseason2?1monster?1@ DB '#season2/monster/', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DOJALNLB@?$CDseason1?1monster?1@
CONST	SEGMENT
??_C@_0BC@DOJALNLB@?$CDseason1?1monster?1@ DB '#season1/monster/', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DOKHHMMK@?$CDseason2?1npc?1@
CONST	SEGMENT
??_C@_0O@DOKHHMMK@?$CDseason2?1npc?1@ DB '#season2/npc/', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PEPGGFH@?$CDseason1?1npc?1@
CONST	SEGMENT
??_C@_0O@PEPGGFH@?$CDseason1?1npc?1@ DB '#season1/npc/', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@BCLHILHN@d?3?1ymir?5work?1npc_mount?1@
CONST	SEGMENT
??_C@_0BI@BCLHILHN@d?3?1ymir?5work?1npc_mount?1@ DB 'd:/ymir work/npc_mou'
	DB	'nt/', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@GPLCEAJK@d?3?1ymir?5work?1monster2?1@
CONST	SEGMENT
??_C@_0BH@GPLCEAJK@d?3?1ymir?5work?1monster2?1@ DB 'd:/ymir work/monster2'
	DB	'/', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FGIKCKJD@d?3?1ymir?5work?1monster?1@
CONST	SEGMENT
??_C@_0BG@FGIKCKJD@d?3?1ymir?5work?1monster?1@ DB 'd:/ymir work/monster/', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@CKCIELCO@d?3?1ymir?5work?1npc_pet?1@
CONST	SEGMENT
??_C@_0BG@CKCIELCO@d?3?1ymir?5work?1npc_pet?1@ DB 'd:/ymir work/npc_pet/', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DIPFLAGN@d?3?1ymir?5work?1npc2?1@
CONST	SEGMENT
??_C@_0BD@DIPFLAGN@d?3?1ymir?5work?1npc2?1@ DB 'd:/ymir work/npc2/', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HJMPPIOH@d?3?1ymir?5work?1npc?1@
CONST	SEGMENT
??_C@_0BC@HJMPPIOH@d?3?1ymir?5work?1npc?1@ DB 'd:/ymir work/npc/', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@PJNPAGEJ@d?3?1ymir?5work?1guild?1@
CONST	SEGMENT
??_C@_0BE@PJNPAGEJ@d?3?1ymir?5work?1guild?1@ DB 'd:/ymir work/guild/', 00H ; `string'
CONST	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ??_7CRaceManager@@6B@
CONST	SEGMENT
??_7CRaceManager@@6B@ DD FLAT:??_R4CRaceManager@@6B@	; CRaceManager::`vftable'
	DD	FLAT:??_ECRaceManager@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CSingleton@VCRaceManager@@@@6B@
CONST	SEGMENT
??_7?$CSingleton@VCRaceManager@@@@6B@ DD FLAT:??_R4?$CSingleton@VCRaceManager@@@@6B@ ; CSingleton<CRaceManager>::`vftable'
	DD	FLAT:??_E?$CSingleton@VCRaceManager@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position@ DB 'invalid string position'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
CONST	SEGMENT
??_C@_0BB@GCADKGJO@map?1set?5too?5long@ DB 'map/set too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V01@$0A@@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V01@$0A@@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z$0
__ehfuncinfo$??$?0$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V01@$0A@@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V01@$0A@@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@2@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@2@Z$0
__ehfuncinfo$??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@2@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@2@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0AAKAAPAVCRaceData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@1@AAKAAPAVCRaceData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0AAKAAPAVCRaceData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@1@AAKAAPAVCRaceData@@@Z$1
__ehfuncinfo$??$?0AAKAAPAVCRaceData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@1@AAKAAPAVCRaceData@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0AAKAAPAVCRaceData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@1@AAKAAPAVCRaceData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0AAKAAPBD@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@AAKAAPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0AAKAAPBD@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@AAKAAPBD@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0AAKAAPBD@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@AAKAAPBD@Z$0
__ehfuncinfo$??$?0AAKAAPBD@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@AAKAAPBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$?0AAKAAPBD@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@AAKAAPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV01@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@2@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV01@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@2@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV01@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@2@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV01@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@2@Z$2
__ehfuncinfo$??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV01@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@2@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV01@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@2@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0AAY06$$CBDH@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY06$$CBD$$QAH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0AAY06$$CBDH@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY06$$CBD$$QAH@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0AAY06$$CBDH@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY06$$CBD$$QAH@Z$0
__ehfuncinfo$??$?0AAY06$$CBDH@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY06$$CBD$$QAH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$?0AAY06$$CBDH@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY06$$CBD$$QAH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0AAY08$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY08$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0AAY08$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY08$$CBD$$QAW4EName@CRaceMotionData@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0AAY08$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY08$$CBD$$QAW4EName@CRaceMotionData@@@Z$0
__ehfuncinfo$??$?0AAY08$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY08$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$?0AAY08$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY08$$CBD$$QAW4EName@CRaceMotionData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0AAY07$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY07$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0AAY07$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY07$$CBD$$QAW4EName@CRaceMotionData@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0AAY07$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY07$$CBD$$QAW4EName@CRaceMotionData@@@Z$0
__ehfuncinfo$??$?0AAY07$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY07$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$?0AAY07$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY07$$CBD$$QAW4EName@CRaceMotionData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0AAY09$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY09$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0AAY09$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY09$$CBD$$QAW4EName@CRaceMotionData@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0AAY09$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY09$$CBD$$QAW4EName@CRaceMotionData@@@Z$0
__ehfuncinfo$??$?0AAY09$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY09$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$?0AAY09$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY09$$CBD$$QAW4EName@CRaceMotionData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0AAY0BB@$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY0BB@$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0AAY0BB@$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY0BB@$$CBD$$QAW4EName@CRaceMotionData@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0AAY0BB@$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY0BB@$$CBD$$QAW4EName@CRaceMotionData@@@Z$0
__ehfuncinfo$??$?0AAY0BB@$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY0BB@$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$?0AAY0BB@$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY0BB@$$CBD$$QAW4EName@CRaceMotionData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0AAY0BA@$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY0BA@$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0AAY0BA@$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY0BA@$$CBD$$QAW4EName@CRaceMotionData@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0AAY0BA@$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY0BA@$$CBD$$QAW4EName@CRaceMotionData@@@Z$0
__ehfuncinfo$??$?0AAY0BA@$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY0BA@$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$?0AAY0BA@$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY0BA@$$CBD$$QAW4EName@CRaceMotionData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0AAY0M@$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY0M@$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0AAY0M@$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY0M@$$CBD$$QAW4EName@CRaceMotionData@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0AAY0M@$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY0M@$$CBD$$QAW4EName@CRaceMotionData@@@Z$0
__ehfuncinfo$??$?0AAY0M@$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY0M@$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$?0AAY0M@$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY0M@$$CBD$$QAW4EName@CRaceMotionData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0AAY0L@$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY0L@$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0AAY0L@$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY0L@$$CBD$$QAW4EName@CRaceMotionData@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0AAY0L@$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY0L@$$CBD$$QAW4EName@CRaceMotionData@@@Z$0
__ehfuncinfo$??$?0AAY0L@$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY0L@$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$?0AAY0L@$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY0L@$$CBD$$QAW4EName@CRaceMotionData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0AAY0P@$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY0P@$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0AAY0P@$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY0P@$$CBD$$QAW4EName@CRaceMotionData@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0AAY0P@$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY0P@$$CBD$$QAW4EName@CRaceMotionData@@@Z$0
__ehfuncinfo$??$?0AAY0P@$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY0P@$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$?0AAY0P@$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY0P@$$CBD$$QAW4EName@CRaceMotionData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0AAY0O@$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY0O@$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0AAY0O@$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY0O@$$CBD$$QAW4EName@CRaceMotionData@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0AAY0O@$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY0O@$$CBD$$QAW4EName@CRaceMotionData@@@Z$0
__ehfuncinfo$??$?0AAY0O@$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY0O@$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$?0AAY0O@$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY0O@$$CBD$$QAW4EName@CRaceMotionData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0AAY0N@$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY0N@$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0AAY0N@$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY0N@$$CBD$$QAW4EName@CRaceMotionData@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0AAY0N@$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY0N@$$CBD$$QAW4EName@CRaceMotionData@@@Z$0
__ehfuncinfo$??$?0AAY0N@$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY0N@$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$?0AAY0N@$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY0N@$$CBD$$QAW4EName@CRaceMotionData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0AAY03$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY03$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0AAY03$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY03$$CBD$$QAW4EName@CRaceMotionData@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0AAY03$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY03$$CBD$$QAW4EName@CRaceMotionData@@@Z$0
__ehfuncinfo$??$?0AAY03$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY03$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$?0AAY03$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY03$$CBD$$QAW4EName@CRaceMotionData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0AAY04$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY04$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0AAY04$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY04$$CBD$$QAW4EName@CRaceMotionData@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0AAY04$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY04$$CBD$$QAW4EName@CRaceMotionData@@@Z$0
__ehfuncinfo$??$?0AAY04$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY04$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$?0AAY04$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY04$$CBD$$QAW4EName@CRaceMotionData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0AAY05$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY05$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0AAY05$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY05$$CBD$$QAW4EName@CRaceMotionData@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0AAY05$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY05$$CBD$$QAW4EName@CRaceMotionData@@@Z$0
__ehfuncinfo$??$?0AAY05$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY05$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$?0AAY05$$CBDW4EName@CRaceMotionData@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@AAY05$$CBD$$QAW4EName@CRaceMotionData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@AAKAAPAVCRaceData@@@?$_Tree@V?$_Tmap_traits@KPAVCRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCRaceData@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@_N@1@AAKAAPAVCRaceData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@AAKAAPAVCRaceData@@@?$_Tree@V?$_Tmap_traits@KPAVCRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCRaceData@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@_N@1@AAKAAPAVCRaceData@@@Z$2
__ehfuncinfo$??$_Emplace@AAKAAPAVCRaceData@@@?$_Tree@V?$_Tmap_traits@KPAVCRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCRaceData@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@_N@1@AAKAAPAVCRaceData@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@AAKAAPAVCRaceData@@@?$_Tree@V?$_Tmap_traits@KPAVCRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCRaceData@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@_N@1@AAKAAPAVCRaceData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@AAKAAPBD@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@_N@1@AAKAAPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@AAKAAPBD@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@_N@1@AAKAAPBD@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@AAKAAPBD@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@_N@1@AAKAAPBD@Z$1
__ehfuncinfo$??$_Emplace@AAKAAPBD@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@_N@1@AAKAAPBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace@AAKAAPBD@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@_N@1@AAKAAPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z$3
__ehfuncinfo$??$_Emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@AAY06$$CBDH@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY06$$CBD$$QAH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@AAY06$$CBDH@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY06$$CBD$$QAH@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@AAY06$$CBDH@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY06$$CBD$$QAH@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@AAY06$$CBDH@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY06$$CBD$$QAH@Z$0
__ehfuncinfo$??$_Emplace@AAY06$$CBDH@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY06$$CBD$$QAH@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Emplace@AAY06$$CBDH@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY06$$CBD$$QAH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@AAY08$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY08$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@AAY08$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY08$$CBD$$QAW4EName@CRaceMotionData@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@AAY08$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY08$$CBD$$QAW4EName@CRaceMotionData@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@AAY08$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY08$$CBD$$QAW4EName@CRaceMotionData@@@Z$0
__ehfuncinfo$??$_Emplace@AAY08$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY08$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Emplace@AAY08$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY08$$CBD$$QAW4EName@CRaceMotionData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@AAY07$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY07$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@AAY07$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY07$$CBD$$QAW4EName@CRaceMotionData@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@AAY07$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY07$$CBD$$QAW4EName@CRaceMotionData@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@AAY07$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY07$$CBD$$QAW4EName@CRaceMotionData@@@Z$0
__ehfuncinfo$??$_Emplace@AAY07$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY07$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Emplace@AAY07$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY07$$CBD$$QAW4EName@CRaceMotionData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@AAY09$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY09$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@AAY09$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY09$$CBD$$QAW4EName@CRaceMotionData@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@AAY09$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY09$$CBD$$QAW4EName@CRaceMotionData@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@AAY09$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY09$$CBD$$QAW4EName@CRaceMotionData@@@Z$0
__ehfuncinfo$??$_Emplace@AAY09$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY09$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Emplace@AAY09$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY09$$CBD$$QAW4EName@CRaceMotionData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@AAY0BB@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY0BB@$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@AAY0BB@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY0BB@$$CBD$$QAW4EName@CRaceMotionData@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@AAY0BB@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY0BB@$$CBD$$QAW4EName@CRaceMotionData@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@AAY0BB@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY0BB@$$CBD$$QAW4EName@CRaceMotionData@@@Z$0
__ehfuncinfo$??$_Emplace@AAY0BB@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY0BB@$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Emplace@AAY0BB@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY0BB@$$CBD$$QAW4EName@CRaceMotionData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@AAY0BA@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY0BA@$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@AAY0BA@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY0BA@$$CBD$$QAW4EName@CRaceMotionData@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@AAY0BA@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY0BA@$$CBD$$QAW4EName@CRaceMotionData@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@AAY0BA@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY0BA@$$CBD$$QAW4EName@CRaceMotionData@@@Z$0
__ehfuncinfo$??$_Emplace@AAY0BA@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY0BA@$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Emplace@AAY0BA@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY0BA@$$CBD$$QAW4EName@CRaceMotionData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@AAY0M@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY0M@$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@AAY0M@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY0M@$$CBD$$QAW4EName@CRaceMotionData@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@AAY0M@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY0M@$$CBD$$QAW4EName@CRaceMotionData@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@AAY0M@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY0M@$$CBD$$QAW4EName@CRaceMotionData@@@Z$0
__ehfuncinfo$??$_Emplace@AAY0M@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY0M@$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Emplace@AAY0M@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY0M@$$CBD$$QAW4EName@CRaceMotionData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@AAY0L@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY0L@$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@AAY0L@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY0L@$$CBD$$QAW4EName@CRaceMotionData@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@AAY0L@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY0L@$$CBD$$QAW4EName@CRaceMotionData@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@AAY0L@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY0L@$$CBD$$QAW4EName@CRaceMotionData@@@Z$0
__ehfuncinfo$??$_Emplace@AAY0L@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY0L@$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Emplace@AAY0L@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY0L@$$CBD$$QAW4EName@CRaceMotionData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@AAY0P@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY0P@$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@AAY0P@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY0P@$$CBD$$QAW4EName@CRaceMotionData@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@AAY0P@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY0P@$$CBD$$QAW4EName@CRaceMotionData@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@AAY0P@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY0P@$$CBD$$QAW4EName@CRaceMotionData@@@Z$0
__ehfuncinfo$??$_Emplace@AAY0P@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY0P@$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Emplace@AAY0P@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY0P@$$CBD$$QAW4EName@CRaceMotionData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@AAY0O@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY0O@$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@AAY0O@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY0O@$$CBD$$QAW4EName@CRaceMotionData@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@AAY0O@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY0O@$$CBD$$QAW4EName@CRaceMotionData@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@AAY0O@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY0O@$$CBD$$QAW4EName@CRaceMotionData@@@Z$0
__ehfuncinfo$??$_Emplace@AAY0O@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY0O@$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Emplace@AAY0O@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY0O@$$CBD$$QAW4EName@CRaceMotionData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@AAY0N@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY0N@$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@AAY0N@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY0N@$$CBD$$QAW4EName@CRaceMotionData@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@AAY0N@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY0N@$$CBD$$QAW4EName@CRaceMotionData@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@AAY0N@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY0N@$$CBD$$QAW4EName@CRaceMotionData@@@Z$0
__ehfuncinfo$??$_Emplace@AAY0N@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY0N@$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Emplace@AAY0N@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY0N@$$CBD$$QAW4EName@CRaceMotionData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@AAY03$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY03$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@AAY03$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY03$$CBD$$QAW4EName@CRaceMotionData@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@AAY03$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY03$$CBD$$QAW4EName@CRaceMotionData@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@AAY03$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY03$$CBD$$QAW4EName@CRaceMotionData@@@Z$0
__ehfuncinfo$??$_Emplace@AAY03$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY03$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Emplace@AAY03$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY03$$CBD$$QAW4EName@CRaceMotionData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@AAY04$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY04$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@AAY04$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY04$$CBD$$QAW4EName@CRaceMotionData@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@AAY04$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY04$$CBD$$QAW4EName@CRaceMotionData@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@AAY04$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY04$$CBD$$QAW4EName@CRaceMotionData@@@Z$0
__ehfuncinfo$??$_Emplace@AAY04$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY04$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Emplace@AAY04$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY04$$CBD$$QAW4EName@CRaceMotionData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@AAY05$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY05$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@AAY05$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY05$$CBD$$QAW4EName@CRaceMotionData@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@AAY05$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY05$$CBD$$QAW4EName@CRaceMotionData@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@AAY05$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY05$$CBD$$QAW4EName@CRaceMotionData@@@Z$0
__ehfuncinfo$??$_Emplace@AAY05$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY05$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Emplace@AAY05$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@_N@1@AAY05$$CBD$$QAW4EName@CRaceMotionData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@AAY0O@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0O@$$CBD@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@AAY0O@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0O@$$CBD@Z$0
__unwindtable$??$_Emplace_reallocate@AAY0O@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0O@$$CBD@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@AAY0O@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0O@$$CBD@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@AAY0O@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0O@$$CBD@Z$4
__ehfuncinfo$??$_Emplace_reallocate@AAY0O@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0O@$$CBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@AAY0O@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0O@$$CBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@AAY0O@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0O@$$CBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@AAY0BI@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BI@$$CBD@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@AAY0BI@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BI@$$CBD@Z$0
__unwindtable$??$_Emplace_reallocate@AAY0BI@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BI@$$CBD@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@AAY0BI@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BI@$$CBD@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@AAY0BI@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BI@$$CBD@Z$4
__ehfuncinfo$??$_Emplace_reallocate@AAY0BI@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BI@$$CBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@AAY0BI@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BI@$$CBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@AAY0BI@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BI@$$CBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@AAY0BH@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BH@$$CBD@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@AAY0BH@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BH@$$CBD@Z$0
__unwindtable$??$_Emplace_reallocate@AAY0BH@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BH@$$CBD@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@AAY0BH@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BH@$$CBD@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@AAY0BH@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BH@$$CBD@Z$4
__ehfuncinfo$??$_Emplace_reallocate@AAY0BH@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BH@$$CBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@AAY0BH@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BH@$$CBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@AAY0BH@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BH@$$CBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@AAY0BG@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BG@$$CBD@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@AAY0BG@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BG@$$CBD@Z$0
__unwindtable$??$_Emplace_reallocate@AAY0BG@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BG@$$CBD@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@AAY0BG@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BG@$$CBD@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@AAY0BG@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BG@$$CBD@Z$4
__ehfuncinfo$??$_Emplace_reallocate@AAY0BG@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BG@$$CBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@AAY0BG@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BG@$$CBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@AAY0BG@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BG@$$CBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@AAY0BD@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BD@$$CBD@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@AAY0BD@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BD@$$CBD@Z$0
__unwindtable$??$_Emplace_reallocate@AAY0BD@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BD@$$CBD@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@AAY0BD@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BD@$$CBD@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@AAY0BD@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BD@$$CBD@Z$4
__ehfuncinfo$??$_Emplace_reallocate@AAY0BD@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BD@$$CBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@AAY0BD@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BD@$$CBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@AAY0BD@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BD@$$CBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@AAY0BC@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BC@$$CBD@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@AAY0BC@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BC@$$CBD@Z$0
__unwindtable$??$_Emplace_reallocate@AAY0BC@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BC@$$CBD@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@AAY0BC@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BC@$$CBD@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@AAY0BC@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BC@$$CBD@Z$4
__ehfuncinfo$??$_Emplace_reallocate@AAY0BC@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BC@$$CBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@AAY0BC@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BC@$$CBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@AAY0BC@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BC@$$CBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@AAY0BE@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BE@$$CBD@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@AAY0BE@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BE@$$CBD@Z$0
__unwindtable$??$_Emplace_reallocate@AAY0BE@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BE@$$CBD@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@AAY0BE@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BE@$$CBD@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@AAY0BE@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BE@$$CBD@Z$4
__ehfuncinfo$??$_Emplace_reallocate@AAY0BE@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BE@$$CBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@AAY0BE@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BE@$$CBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@AAY0BE@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BE@$$CBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$emplace@AAKAAPAVCRaceData@@@?$_Tree@V?$_Tmap_traits@KPAVCRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCRaceData@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCRaceData@@@std@@@std@@@std@@@std@@_N@1@AAKAAPAVCRaceData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@AAKAAPAVCRaceData@@@?$_Tree@V?$_Tmap_traits@KPAVCRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCRaceData@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCRaceData@@@std@@@std@@@std@@@std@@_N@1@AAKAAPAVCRaceData@@@Z$2
__ehfuncinfo$??$emplace@AAKAAPAVCRaceData@@@?$_Tree@V?$_Tmap_traits@KPAVCRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCRaceData@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCRaceData@@@std@@@std@@@std@@@std@@_N@1@AAKAAPAVCRaceData@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$emplace@AAKAAPAVCRaceData@@@?$_Tree@V?$_Tmap_traits@KPAVCRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCRaceData@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCRaceData@@@std@@@std@@@std@@@std@@_N@1@AAKAAPAVCRaceData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$emplace@AAKAAPBD@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@@std@@_N@1@AAKAAPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@AAKAAPBD@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@@std@@_N@1@AAKAAPBD@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@AAKAAPBD@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@@std@@_N@1@AAKAAPBD@Z$1
__ehfuncinfo$??$emplace@AAKAAPBD@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@@std@@_N@1@AAKAAPBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$emplace@AAKAAPBD@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@@std@@_N@1@AAKAAPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z$3
__ehfuncinfo$??$emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$emplace@AAY06$$CBDH@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY06$$CBD$$QAH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@AAY06$$CBDH@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY06$$CBD$$QAH@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@AAY06$$CBDH@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY06$$CBD$$QAH@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@AAY06$$CBDH@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY06$$CBD$$QAH@Z$0
__ehfuncinfo$??$emplace@AAY06$$CBDH@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY06$$CBD$$QAH@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$emplace@AAY06$$CBDH@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY06$$CBD$$QAH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$emplace@AAY08$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY08$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@AAY08$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY08$$CBD$$QAW4EName@CRaceMotionData@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@AAY08$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY08$$CBD$$QAW4EName@CRaceMotionData@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@AAY08$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY08$$CBD$$QAW4EName@CRaceMotionData@@@Z$0
__ehfuncinfo$??$emplace@AAY08$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY08$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$emplace@AAY08$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY08$$CBD$$QAW4EName@CRaceMotionData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$emplace@AAY07$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY07$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@AAY07$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY07$$CBD$$QAW4EName@CRaceMotionData@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@AAY07$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY07$$CBD$$QAW4EName@CRaceMotionData@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@AAY07$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY07$$CBD$$QAW4EName@CRaceMotionData@@@Z$0
__ehfuncinfo$??$emplace@AAY07$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY07$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$emplace@AAY07$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY07$$CBD$$QAW4EName@CRaceMotionData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$emplace@AAY09$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY09$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@AAY09$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY09$$CBD$$QAW4EName@CRaceMotionData@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@AAY09$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY09$$CBD$$QAW4EName@CRaceMotionData@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@AAY09$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY09$$CBD$$QAW4EName@CRaceMotionData@@@Z$0
__ehfuncinfo$??$emplace@AAY09$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY09$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$emplace@AAY09$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY09$$CBD$$QAW4EName@CRaceMotionData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$emplace@AAY0BB@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0BB@$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@AAY0BB@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0BB@$$CBD$$QAW4EName@CRaceMotionData@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@AAY0BB@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0BB@$$CBD$$QAW4EName@CRaceMotionData@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@AAY0BB@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0BB@$$CBD$$QAW4EName@CRaceMotionData@@@Z$0
__ehfuncinfo$??$emplace@AAY0BB@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0BB@$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$emplace@AAY0BB@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0BB@$$CBD$$QAW4EName@CRaceMotionData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$emplace@AAY0BA@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0BA@$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@AAY0BA@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0BA@$$CBD$$QAW4EName@CRaceMotionData@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@AAY0BA@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0BA@$$CBD$$QAW4EName@CRaceMotionData@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@AAY0BA@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0BA@$$CBD$$QAW4EName@CRaceMotionData@@@Z$0
__ehfuncinfo$??$emplace@AAY0BA@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0BA@$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$emplace@AAY0BA@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0BA@$$CBD$$QAW4EName@CRaceMotionData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$emplace@AAY0M@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0M@$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@AAY0M@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0M@$$CBD$$QAW4EName@CRaceMotionData@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@AAY0M@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0M@$$CBD$$QAW4EName@CRaceMotionData@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@AAY0M@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0M@$$CBD$$QAW4EName@CRaceMotionData@@@Z$0
__ehfuncinfo$??$emplace@AAY0M@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0M@$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$emplace@AAY0M@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0M@$$CBD$$QAW4EName@CRaceMotionData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$emplace@AAY0L@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0L@$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@AAY0L@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0L@$$CBD$$QAW4EName@CRaceMotionData@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@AAY0L@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0L@$$CBD$$QAW4EName@CRaceMotionData@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@AAY0L@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0L@$$CBD$$QAW4EName@CRaceMotionData@@@Z$0
__ehfuncinfo$??$emplace@AAY0L@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0L@$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$emplace@AAY0L@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0L@$$CBD$$QAW4EName@CRaceMotionData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$emplace@AAY0P@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0P@$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@AAY0P@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0P@$$CBD$$QAW4EName@CRaceMotionData@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@AAY0P@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0P@$$CBD$$QAW4EName@CRaceMotionData@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@AAY0P@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0P@$$CBD$$QAW4EName@CRaceMotionData@@@Z$0
__ehfuncinfo$??$emplace@AAY0P@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0P@$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$emplace@AAY0P@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0P@$$CBD$$QAW4EName@CRaceMotionData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$emplace@AAY0O@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0O@$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@AAY0O@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0O@$$CBD$$QAW4EName@CRaceMotionData@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@AAY0O@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0O@$$CBD$$QAW4EName@CRaceMotionData@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@AAY0O@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0O@$$CBD$$QAW4EName@CRaceMotionData@@@Z$0
__ehfuncinfo$??$emplace@AAY0O@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0O@$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$emplace@AAY0O@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0O@$$CBD$$QAW4EName@CRaceMotionData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$emplace@AAY0N@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0N@$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@AAY0N@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0N@$$CBD$$QAW4EName@CRaceMotionData@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@AAY0N@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0N@$$CBD$$QAW4EName@CRaceMotionData@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@AAY0N@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0N@$$CBD$$QAW4EName@CRaceMotionData@@@Z$0
__ehfuncinfo$??$emplace@AAY0N@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0N@$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$emplace@AAY0N@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0N@$$CBD$$QAW4EName@CRaceMotionData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$emplace@AAY03$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY03$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@AAY03$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY03$$CBD$$QAW4EName@CRaceMotionData@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@AAY03$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY03$$CBD$$QAW4EName@CRaceMotionData@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@AAY03$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY03$$CBD$$QAW4EName@CRaceMotionData@@@Z$0
__ehfuncinfo$??$emplace@AAY03$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY03$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$emplace@AAY03$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY03$$CBD$$QAW4EName@CRaceMotionData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$emplace@AAY04$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY04$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@AAY04$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY04$$CBD$$QAW4EName@CRaceMotionData@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@AAY04$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY04$$CBD$$QAW4EName@CRaceMotionData@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@AAY04$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY04$$CBD$$QAW4EName@CRaceMotionData@@@Z$0
__ehfuncinfo$??$emplace@AAY04$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY04$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$emplace@AAY04$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY04$$CBD$$QAW4EName@CRaceMotionData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$emplace@AAY05$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY05$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@AAY05$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY05$$CBD$$QAW4EName@CRaceMotionData@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@AAY05$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY05$$CBD$$QAW4EName@CRaceMotionData@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@AAY05$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY05$$CBD$$QAW4EName@CRaceMotionData@@@Z$0
__ehfuncinfo$??$emplace@AAY05$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY05$$CBD$$QAW4EName@CRaceMotionData@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$emplace@AAY05$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY05$$CBD$$QAW4EName@CRaceMotionData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z DD 019930522H
	DD	010H
	DD	FLAT:__unwindtable$?__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z$57
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z$56
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z$55
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z$19
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z$18
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z$17
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z$33
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z$32
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z$31
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z$47
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z$46
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z$45
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z$1
	DD	0dH
	DD	FLAT:__unwindfunclet$?__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z$2
	DD	0eH
	DD	FLAT:__unwindfunclet$?__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z$4
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?__LoadRaceData@CRaceManager@@IAEPAVCRaceData@@K@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?__LoadRaceData@CRaceManager@@IAEPAVCRaceData@@K@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?__LoadRaceData@CRaceManager@@IAEPAVCRaceData@@K@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?__LoadRaceData@CRaceManager@@IAEPAVCRaceData@@K@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?__LoadRaceData@CRaceManager@@IAEPAVCRaceData@@K@Z$3
__ehfuncinfo$?__LoadRaceData@CRaceManager@@IAEPAVCRaceData@@K@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?__LoadRaceData@CRaceManager@@IAEPAVCRaceData@@K@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetPathName@CRaceManager@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetPathName@CRaceManager@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
__ehfuncinfo$?SetPathName@CRaceManager@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetPathName@CRaceManager@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterRaceSrcName@CRaceManager@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterRaceSrcName@CRaceManager@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterRaceSrcName@CRaceManager@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?RegisterRaceSrcName@CRaceManager@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$3
__ehfuncinfo$?RegisterRaceSrcName@CRaceManager@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?RegisterRaceSrcName@CRaceManager@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterRaceName@CRaceManager@@QAEXKPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterRaceName@CRaceManager@@QAEXKPBD@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterRaceName@CRaceManager@@QAEXKPBD@Z$1
__ehfuncinfo$?RegisterRaceName@CRaceManager@@QAEXKPBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RegisterRaceName@CRaceManager@@QAEXKPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CRaceManager@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CRaceManager@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CRaceManager@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CRaceManager@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CRaceManager@@QAE@XZ$2
__ehfuncinfo$??0CRaceManager@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CRaceManager@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >::destroy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >, COMDAT

; 724  :     static _CONSTEXPR20 void destroy(_Alloc&, _Uty* const _Ptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Ptr$[ebp]
  00007	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000a	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  0000d	72 27		 jb	 SHORT $LN21@destroy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00011	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00012	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00018	72 12		 jb	 SHORT $LN31@destroy

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001a	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001d	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00020	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00022	83 c0 fc	 add	 eax, -4			; fffffffcH
  00025	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00028	77 20		 ja	 SHORT $LN28@destroy

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002a	8b c2		 mov	 eax, edx
$LN31@destroy:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0002c	51		 push	 ecx
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00033	83 c4 08	 add	 esp, 8
$LN21@destroy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  00036	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  0003d	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00044	c6 06 00	 mov	 BYTE PTR [esi], 0
  00047	5e		 pop	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 730  :     }

  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
$LN28@destroy:

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN42@destroy:
  0004f	cc		 int	 3
??$destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >::destroy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::destroy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 724  :     static _CONSTEXPR20 void destroy(_Alloc&, _Uty* const _Ptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 0c	 mov	 esi, DWORD PTR __Ptr$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00007	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  0000a	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  0000d	72 28		 jb	 SHORT $LN21@destroy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000f	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00012	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00013	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00019	72 12		 jb	 SHORT $LN31@destroy

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001b	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001e	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00021	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00023	83 c0 fc	 add	 eax, -4			; fffffffcH
  00026	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00029	77 61		 ja	 SHORT $LN56@destroy

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002b	8b c2		 mov	 eax, edx
$LN31@destroy:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0002d	51		 push	 ecx
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00034	83 c4 08	 add	 esp, 8
$LN21@destroy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  00037	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  0003e	c7 46 2c 0f 00
	00 00		 mov	 DWORD PTR [esi+44], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00045	c6 46 18 00	 mov	 BYTE PTR [esi+24], 0

; 2244 :         return _BUF_SIZE <= _Myres;

  00049	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0004c	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  0004f	72 27		 jb	 SHORT $LN49@destroy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00051	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00053	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00054	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0005a	72 12		 jb	 SHORT $LN59@destroy

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0005c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0005f	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00062	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00064	83 c0 fc	 add	 eax, -4			; fffffffcH
  00067	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0006a	77 20		 ja	 SHORT $LN56@destroy

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0006c	8b c2		 mov	 eax, edx
$LN59@destroy:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0006e	51		 push	 ecx
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00075	83 c4 08	 add	 esp, 8
$LN49@destroy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  00078	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  0007f	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00086	c6 06 00	 mov	 BYTE PTR [esi], 0
  00089	5e		 pop	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 730  :     }

  0008a	5d		 pop	 ebp
  0008b	c3		 ret	 0
$LN56@destroy:

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0008c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN72@destroy:
  00091	cc		 int	 3
??$destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::destroy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
;	COMDAT ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z PROC ; std::operator<<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 5056 :     const basic_string<_Elem, _Traits, _Alloc>& _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2235 :         const value_type* _Result = _Bx._Buf;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b c8		 mov	 ecx, eax

; 2244 :         return _BUF_SIZE <= _Myres;

  00008	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2236 :         if (_Large_string_engaged()) {

  0000c	72 02		 jb	 SHORT $LN6@operator

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  0000e	8b 08		 mov	 ecx, DWORD PTR [eax]
$LN6@operator:
  00010	53		 push	 ebx
  00011	56		 push	 esi

; 2235 :         const value_type* _Result = _Bx._Buf;

  00012	8b 75 08	 mov	 esi, DWORD PTR __Left$[ebp]
  00015	8b d6		 mov	 edx, esi
  00017	57		 push	 edi

; 2244 :         return _BUF_SIZE <= _Myres;

  00018	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2236 :         if (_Large_string_engaged()) {

  0001c	72 02		 jb	 SHORT $LN11@operator

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  0001e	8b 16		 mov	 edx, DWORD PTR [esi]
$LN11@operator:

; 4626 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  00020	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 70   :     return _Right < _Left ? _Right : _Left;

  00023	8b f3		 mov	 esi, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4626 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  00025	8b 78 10	 mov	 edi, DWORD PTR [eax+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 70   :     return _Right < _Left ? _Right : _Left;

  00028	3b fb		 cmp	 edi, ebx
  0002a	0f 42 f7	 cmovb	 esi, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 383  :         return _CSTD memcmp(_First1, _First2, _Count);

  0002d	83 ee 04	 sub	 esi, 4
  00030	72 11		 jb	 SHORT $LN26@operator
$LL27@operator:
  00032	8b 02		 mov	 eax, DWORD PTR [edx]
  00034	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00036	75 10		 jne	 SHORT $LN25@operator
  00038	83 c2 04	 add	 edx, 4
  0003b	83 c1 04	 add	 ecx, 4
  0003e	83 ee 04	 sub	 esi, 4
  00041	73 ef		 jae	 SHORT $LL27@operator
$LN26@operator:
  00043	83 fe fc	 cmp	 esi, -4			; fffffffcH
  00046	74 34		 je	 SHORT $LN24@operator
$LN25@operator:
  00048	8a 02		 mov	 al, BYTE PTR [edx]
  0004a	3a 01		 cmp	 al, BYTE PTR [ecx]
  0004c	75 27		 jne	 SHORT $LN28@operator
  0004e	83 fe fd	 cmp	 esi, -3			; fffffffdH
  00051	74 29		 je	 SHORT $LN24@operator
  00053	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  00056	3a 41 01	 cmp	 al, BYTE PTR [ecx+1]
  00059	75 1a		 jne	 SHORT $LN28@operator
  0005b	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0005e	74 1c		 je	 SHORT $LN24@operator
  00060	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  00063	3a 41 02	 cmp	 al, BYTE PTR [ecx+2]
  00066	75 0d		 jne	 SHORT $LN28@operator
  00068	83 fe ff	 cmp	 esi, -1
  0006b	74 0f		 je	 SHORT $LN24@operator
  0006d	8a 42 03	 mov	 al, BYTE PTR [edx+3]
  00070	3a 41 03	 cmp	 al, BYTE PTR [ecx+3]
  00073	74 07		 je	 SHORT $LN24@operator
$LN28@operator:
  00075	1b c0		 sbb	 eax, eax
  00077	83 c8 01	 or	 eax, 1
  0007a	eb 02		 jmp	 SHORT $LN29@operator
$LN24@operator:
  0007c	33 c0		 xor	 eax, eax
$LN29@operator:

; 557  :     if (_Ans != 0) {

  0007e	85 c0		 test	 eax, eax
  00080	75 13		 jne	 SHORT $LN18@operator

; 558  :         return _Ans;
; 559  :     }
; 560  : 
; 561  :     if (_Left_size < _Right_size) {

  00082	3b fb		 cmp	 edi, ebx
  00084	76 0b		 jbe	 SHORT $LN42@operator

; 5057 :     return _Left.compare(_Right) < 0;

  00086	5f		 pop	 edi

; 562  :         return -1;

  00087	83 c8 ff	 or	 eax, -1

; 5057 :     return _Left.compare(_Right) < 0;

  0008a	5e		 pop	 esi
  0008b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0008e	5b		 pop	 ebx

; 5058 : }

  0008f	5d		 pop	 ebp
  00090	c3		 ret	 0
$LN42@operator:

; 565  :     if (_Left_size > _Right_size) {

  00091	1b c0		 sbb	 eax, eax
  00093	f7 d8		 neg	 eax
$LN18@operator:

; 5057 :     return _Left.compare(_Right) < 0;

  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0009a	5b		 pop	 ebx

; 5058 : }

  0009b	5d		 pop	 ebp
  0009c	c3		 ret	 0
??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ENDP ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData *>,void *> > >, COMDAT
; _this$ = ecx

; 1156 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 265  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 18		 push	 24			; 00000018H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 1157 :             _Al.deallocate(_Ptr, 1);
; 1158 :         }
; 1159 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >, COMDAT
; _this$ = ecx

; 1156 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN10@Tree_temp_

; 265  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 2c		 push	 44			; 0000002cH
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN10@Tree_temp_:
  00012	c3		 ret	 0
??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >, COMDAT
; _this$ = ecx

; 1156 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 265  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 2c		 push	 44			; 0000002cH
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 1157 :             _Al.deallocate(_Ptr, 1);
; 1158 :         }
; 1159 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >, COMDAT
; _this$ = ecx

; 1156 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN10@Tree_temp_

; 265  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 40		 push	 64			; 00000040H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN10@Tree_temp_:
  00012	c3		 ret	 0
??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >, COMDAT
; _this$ = ecx

; 1156 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 265  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 40		 push	 64			; 00000040H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 1157 :             _Al.deallocate(_Ptr, 1);
; 1158 :         }
; 1159 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >, COMDAT
; _this$ = ecx

; 818  :     ~_Tree_temp_node() {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 819  :         if (this->_Ptr) {

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 0e		 je	 SHORT $LN2@Tree_temp_

; 820  :             _Destroy_in_place(this->_Ptr->_Left);
; 821  :             _Destroy_in_place(this->_Ptr->_Parent);
; 822  :             _Destroy_in_place(this->_Ptr->_Right);
; 823  :             _Alnode_traits::destroy(this->_Al, _STD addressof(this->_Ptr->_Myval));

  0000a	83 c0 10	 add	 eax, 16			; 00000010H
  0000d	50		 push	 eax
  0000e	ff 36		 push	 DWORD PTR [esi]
  00010	e8 00 00 00 00	 call	 ??$destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >::destroy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >
  00015	83 c4 08	 add	 esp, 8
$LN2@Tree_temp_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1156 :         if (_Ptr) {

  00018	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001b	5e		 pop	 esi
  0001c	85 c0		 test	 eax, eax
  0001e	74 0b		 je	 SHORT $LN14@Tree_temp_

; 265  :         ::operator delete(_Ptr, _Bytes);

  00020	6a 2c		 push	 44			; 0000002cH
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00028	83 c4 08	 add	 esp, 8
$LN14@Tree_temp_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 825  :     }

  0002b	c3		 ret	 0
??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >, COMDAT
; _this$ = ecx

; 1156 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN10@Tree_temp_

; 265  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 2c		 push	 44			; 0000002cH
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN10@Tree_temp_:
  00012	c3		 ret	 0
??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >, COMDAT
; _this$ = ecx

; 1156 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 265  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 2c		 push	 44			; 0000002cH
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 1157 :             _Al.deallocate(_Ptr, 1);
; 1158 :         }
; 1159 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 1927 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1928 :     // move [_First, _Last) to raw _Dest, using _Al
; 1929 :     // note: only called internally from elsewhere in the STL
; 1930 :     using _Ptrval     = typename _Alloc::value_type*;
; 1931 :     auto _UFirst      = _Get_unwrapped(_First);
; 1932 :     const auto _ULast = _Get_unwrapped(_Last);
; 1933 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1934 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1935 : #if _HAS_CXX20
; 1936 :         if (!_STD is_constant_evaluated())
; 1937 : #endif // _HAS_CXX20
; 1938 :         {
; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1940 :             return _Dest + (_ULast - _UFirst);
; 1941 :         }
; 1942 :     }
; 1943 : 
; 1944 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1945 :     for (; _UFirst != _ULast; ++_UFirst) {

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	56		 push	 esi

; 1791 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  0000a	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]

; 1928 :     // move [_First, _Last) to raw _Dest, using _Al
; 1929 :     // note: only called internally from elsewhere in the STL
; 1930 :     using _Ptrval     = typename _Alloc::value_type*;
; 1931 :     auto _UFirst      = _Get_unwrapped(_First);
; 1932 :     const auto _ULast = _Get_unwrapped(_Last);
; 1933 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1934 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1935 : #if _HAS_CXX20
; 1936 :         if (!_STD is_constant_evaluated())
; 1937 : #endif // _HAS_CXX20
; 1938 :         {
; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1940 :             return _Dest + (_ULast - _UFirst);
; 1941 :         }
; 1942 :     }
; 1943 : 
; 1944 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1945 :     for (; _UFirst != _ULast; ++_UFirst) {

  0000d	3b c2		 cmp	 eax, edx
  0000f	74 4f		 je	 SHORT $LN3@Uninitiali

; 1791 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00011	8b ce		 mov	 ecx, esi
  00013	2b c8		 sub	 ecx, eax
  00015	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL4@Uninitiali:
  00020	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00023	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  00026	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  0002d	c7 44 01 14 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+20], 0

; 2999 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00035	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00038	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  0003b	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  00040	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1803 :         ++_Last;

  00045	83 c6 18	 add	 esi, 24			; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4821 :         _My_data._Mysize = 0;

  00048	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 4822 :         _My_data._Myres  = _BUF_SIZE - 1;

  0004f	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 4823 :         _My_data._Activate_SSO_buffer();
; 4824 : 
; 4825 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4826 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00056	c6 00 00	 mov	 BYTE PTR [eax], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1803 :         ++_Last;

  00059	83 c0 18	 add	 eax, 24			; 00000018H

; 1928 :     // move [_First, _Last) to raw _Dest, using _Al
; 1929 :     // note: only called internally from elsewhere in the STL
; 1930 :     using _Ptrval     = typename _Alloc::value_type*;
; 1931 :     auto _UFirst      = _Get_unwrapped(_First);
; 1932 :     const auto _ULast = _Get_unwrapped(_Last);
; 1933 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1934 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1935 : #if _HAS_CXX20
; 1936 :         if (!_STD is_constant_evaluated())
; 1937 : #endif // _HAS_CXX20
; 1938 :         {
; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1940 :             return _Dest + (_ULast - _UFirst);
; 1941 :         }
; 1942 :     }
; 1943 : 
; 1944 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1945 :     for (; _UFirst != _ULast; ++_UFirst) {

  0005c	3b c2		 cmp	 eax, edx
  0005e	75 c0		 jne	 SHORT $LL4@Uninitiali
$LN3@Uninitiali:

; 1797 :         _Destroy_range(_First, _Last, _Al);

  00060	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00063	56		 push	 esi
  00064	56		 push	 esi
  00065	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  0006a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1946 :         _Backout._Emplace_back(_STD move(*_UFirst));
; 1947 :     }
; 1948 : 
; 1949 :     return _Backout._Release();

  0006d	8b c6		 mov	 eax, esi
  0006f	5e		 pop	 esi

; 1950 : }

  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >, COMDAT
; _this$ = ecx

; 744  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	57		 push	 edi

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 7d 0c	 mov	 edi, DWORD PTR __Rootnode$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000d	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00011	75 6e		 jne	 SHORT $LN73@Erase_tree
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR __Al$[ebp]
  00017	56		 push	 esi
$LL2@Erase_tree:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00018	ff 77 08	 push	 DWORD PTR [edi+8]
  0001b	8b c8		 mov	 ecx, eax
  0001d	53		 push	 ebx
  0001e	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 754  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00023	8b f7		 mov	 esi, edi

; 755  :     _Val         = static_cast<_Other&&>(_New_val);

  00025	8b 3f		 mov	 edi, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00027	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  0002a	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  0002d	72 28		 jb	 SHORT $LN29@Erase_tree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002f	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00032	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00033	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00039	72 12		 jb	 SHORT $LN39@Erase_tree

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0003b	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0003e	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00041	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00043	83 c0 fc	 add	 eax, -4			; fffffffcH
  00046	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00049	77 3d		 ja	 SHORT $LN36@Erase_tree

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0004b	8b c2		 mov	 eax, edx
$LN39@Erase_tree:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0004d	51		 push	 ecx
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00054	83 c4 08	 add	 esp, 8
$LN29@Erase_tree:
  00057	6a 2c		 push	 44			; 0000002cH
  00059	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  0005a	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  00061	c7 46 28 0f 00
	00 00		 mov	 DWORD PTR [esi+40], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00068	c6 46 14 00	 mov	 BYTE PTR [esi+20], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  0006c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00071	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00074	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00078	75 05		 jne	 SHORT $LN80@Erase_tree
  0007a	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  0007d	eb 99		 jmp	 SHORT $LL2@Erase_tree
$LN80@Erase_tree:
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx
$LN73@Erase_tree:
  00081	5f		 pop	 edi

; 749  :     }

  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
$LN36@Erase_tree:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00088	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN81@Erase_tree:
  0008d	cc		 int	 3
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@ABK@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@ABK@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Find_lower_bound<unsigned long>, COMDAT
; _this$ = ecx

; 1611 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1612 :         const auto _Scary = _Get_scary();
; 1613 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000b	89 02		 mov	 DWORD PTR [edx], eax
  0000d	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00014	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1614 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1615 :         while (!_Trynode->_Isnil) {

  00017	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001b	75 28		 jne	 SHORT $LN12@Find_lower
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00020	56		 push	 esi
  00021	8b 31		 mov	 esi, DWORD PTR [ecx]
$LL2@Find_lower:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1616 :             _Result._Location._Parent = _Trynode;

  00023	89 02		 mov	 DWORD PTR [edx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  00025	39 70 10	 cmp	 DWORD PTR [eax+16], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1617 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00028	73 07		 jae	 SHORT $LN4@Find_lower

; 1618 :                 _Result._Location._Child = _Tree_child::_Right;
; 1619 :                 _Trynode                 = _Trynode->_Right;

  0002a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002d	33 c9		 xor	 ecx, ecx

; 1620 :             } else {

  0002f	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1621 :                 _Result._Location._Child = _Tree_child::_Left;
; 1622 :                 _Result._Bound           = _Trynode;

  00031	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1623 :                 _Trynode                 = _Trynode->_Left;

  00034	b9 01 00 00 00	 mov	 ecx, 1
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Find_lower:

; 1614 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1615 :         while (!_Trynode->_Isnil) {

  0003b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00042	74 df		 je	 SHORT $LL2@Find_lower
  00044	5e		 pop	 esi
$LN12@Find_lower:

; 1624 :             }
; 1625 :         }
; 1626 : 
; 1627 :         return _Result;
; 1628 :     }

  00045	8b c2		 mov	 eax, edx
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@ABK@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Find_lower_bound<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCRaceData@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@@1@ABK@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCRaceData@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@@1@ABK@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CRaceData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData *> >,0> >::_Find_lower_bound<unsigned long>, COMDAT
; _this$ = ecx

; 1611 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1612 :         const auto _Scary = _Get_scary();
; 1613 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000b	89 02		 mov	 DWORD PTR [edx], eax
  0000d	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00014	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1614 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1615 :         while (!_Trynode->_Isnil) {

  00017	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001b	75 28		 jne	 SHORT $LN12@Find_lower
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00020	56		 push	 esi
  00021	8b 31		 mov	 esi, DWORD PTR [ecx]
$LL2@Find_lower:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1616 :             _Result._Location._Parent = _Trynode;

  00023	89 02		 mov	 DWORD PTR [edx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  00025	39 70 10	 cmp	 DWORD PTR [eax+16], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1617 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00028	73 07		 jae	 SHORT $LN4@Find_lower

; 1618 :                 _Result._Location._Child = _Tree_child::_Right;
; 1619 :                 _Trynode                 = _Trynode->_Right;

  0002a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002d	33 c9		 xor	 ecx, ecx

; 1620 :             } else {

  0002f	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1621 :                 _Result._Location._Child = _Tree_child::_Left;
; 1622 :                 _Result._Bound           = _Trynode;

  00031	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1623 :                 _Trynode                 = _Trynode->_Left;

  00034	b9 01 00 00 00	 mov	 ecx, 1
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Find_lower:

; 1614 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1615 :         while (!_Trynode->_Isnil) {

  0003b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00042	74 df		 je	 SHORT $LL2@Find_lower
  00044	5e		 pop	 esi
$LN12@Find_lower:

; 1624 :             }
; 1625 :         }
; 1626 : 
; 1627 :         return _Result;
; 1628 :     }

  00045	8b c2		 mov	 eax, edx
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCRaceData@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@@1@ABK@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CRaceData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData *> >,0> >::_Find_lower_bound<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >, COMDAT
; _this$ = ecx

; 744  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000d	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00011	75 34		 jne	 SHORT $LN3@Erase_tree
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR __Al$[ebp]
  00017	57		 push	 edi
$LL2@Erase_tree:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00018	ff 76 08	 push	 DWORD PTR [esi+8]
  0001b	8b c8		 mov	 ecx, eax
  0001d	53		 push	 ebx
  0001e	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 754  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00023	8b fe		 mov	 edi, esi

; 755  :     _Val         = static_cast<_Other&&>(_New_val);

  00025	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 382  :         allocator_traits<_Alloc>::destroy(_Al, _STD addressof(_Ptr->_Myval));

  00027	8d 47 10	 lea	 eax, DWORD PTR [edi+16]
  0002a	50		 push	 eax
  0002b	53		 push	 ebx
  0002c	e8 00 00 00 00	 call	 ??$destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::destroy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00031	6a 40		 push	 64			; 00000040H
  00033	57		 push	 edi
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00039	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  0003c	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0003f	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00043	74 d3		 je	 SHORT $LL2@Erase_tree
  00045	5f		 pop	 edi
  00046	5b		 pop	 ebx
$LN3@Erase_tree:
  00047	5e		 pop	 esi

; 747  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 748  :         }
; 749  :     }

  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 1611 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1612 :         const auto _Scary = _Get_scary();
; 1613 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  0000d	89 37		 mov	 DWORD PTR [edi], esi

; 1614 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1615 :         while (!_Trynode->_Isnil) {

  0000f	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00013	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  0001a	89 47 08	 mov	 DWORD PTR [edi+8], eax
  0001d	75 32		 jne	 SHORT $LN12@Find_lower
  0001f	53		 push	 ebx
  00020	8b 5d 0c	 mov	 ebx, DWORD PTR __Keyval$[ebp]
$LL2@Find_lower:

; 1617 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00023	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  00026	89 37		 mov	 DWORD PTR [edi], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  00028	53		 push	 ebx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  0002f	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1617 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00032	84 c0		 test	 al, al
  00034	74 07		 je	 SHORT $LN4@Find_lower

; 1618 :                 _Result._Location._Child = _Tree_child::_Right;
; 1619 :                 _Trynode                 = _Trynode->_Right;

  00036	8b 76 08	 mov	 esi, DWORD PTR [esi+8]
  00039	33 c0		 xor	 eax, eax

; 1620 :             } else {

  0003b	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1621 :                 _Result._Location._Child = _Tree_child::_Left;
; 1622 :                 _Result._Bound           = _Trynode;

  0003d	89 77 08	 mov	 DWORD PTR [edi+8], esi

; 1623 :                 _Trynode                 = _Trynode->_Left;

  00040	b8 01 00 00 00	 mov	 eax, 1
  00045	8b 36		 mov	 esi, DWORD PTR [esi]
$LN5@Find_lower:

; 1614 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1615 :         while (!_Trynode->_Isnil) {

  00047	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0004a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0004e	74 d3		 je	 SHORT $LL2@Find_lower
  00050	5b		 pop	 ebx
$LN12@Find_lower:

; 1624 :             }
; 1625 :         }
; 1626 : 
; 1627 :         return _Result;
; 1628 :     }

  00051	8b c7		 mov	 eax, edi
  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5d		 pop	 ebp
  00056	c2 08 00	 ret	 8
??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >, COMDAT
; _this$ = ecx

; 744  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	57		 push	 edi

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 7d 0c	 mov	 edi, DWORD PTR __Rootnode$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000d	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00011	75 6e		 jne	 SHORT $LN73@Erase_tree
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR __Al$[ebp]
  00017	56		 push	 esi
$LL2@Erase_tree:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00018	ff 77 08	 push	 DWORD PTR [edi+8]
  0001b	8b c8		 mov	 ecx, eax
  0001d	53		 push	 ebx
  0001e	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 754  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00023	8b f7		 mov	 esi, edi

; 755  :     _Val         = static_cast<_Other&&>(_New_val);

  00025	8b 3f		 mov	 edi, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00027	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  0002a	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  0002d	72 28		 jb	 SHORT $LN29@Erase_tree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00032	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00033	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00039	72 12		 jb	 SHORT $LN39@Erase_tree

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0003b	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0003e	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00041	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00043	83 c0 fc	 add	 eax, -4			; fffffffcH
  00046	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00049	77 3d		 ja	 SHORT $LN36@Erase_tree

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0004b	8b c2		 mov	 eax, edx
$LN39@Erase_tree:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0004d	51		 push	 ecx
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00054	83 c4 08	 add	 esp, 8
$LN29@Erase_tree:
  00057	6a 2c		 push	 44			; 0000002cH
  00059	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  0005a	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  00061	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00068	c6 46 10 00	 mov	 BYTE PTR [esi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  0006c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00071	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00074	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00078	75 05		 jne	 SHORT $LN80@Erase_tree
  0007a	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  0007d	eb 99		 jmp	 SHORT $LL2@Erase_tree
$LN80@Erase_tree:
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx
$LN73@Erase_tree:
  00081	5f		 pop	 edi

; 749  :     }

  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
$LN36@Erase_tree:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00088	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN81@Erase_tree:
  0008d	cc		 int	 3
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 1611 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1612 :         const auto _Scary = _Get_scary();
; 1613 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  0000d	89 37		 mov	 DWORD PTR [edi], esi

; 1614 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1615 :         while (!_Trynode->_Isnil) {

  0000f	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00013	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  0001a	89 47 08	 mov	 DWORD PTR [edi+8], eax
  0001d	75 32		 jne	 SHORT $LN12@Find_lower
  0001f	53		 push	 ebx
  00020	8b 5d 0c	 mov	 ebx, DWORD PTR __Keyval$[ebp]
$LL2@Find_lower:

; 1617 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00023	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  00026	89 37		 mov	 DWORD PTR [edi], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  00028	53		 push	 ebx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  0002f	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1617 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00032	84 c0		 test	 al, al
  00034	74 07		 je	 SHORT $LN4@Find_lower

; 1618 :                 _Result._Location._Child = _Tree_child::_Right;
; 1619 :                 _Trynode                 = _Trynode->_Right;

  00036	8b 76 08	 mov	 esi, DWORD PTR [esi+8]
  00039	33 c0		 xor	 eax, eax

; 1620 :             } else {

  0003b	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1621 :                 _Result._Location._Child = _Tree_child::_Left;
; 1622 :                 _Result._Bound           = _Trynode;

  0003d	89 77 08	 mov	 DWORD PTR [edi+8], esi

; 1623 :                 _Trynode                 = _Trynode->_Left;

  00040	b8 01 00 00 00	 mov	 eax, 1
  00045	8b 36		 mov	 esi, DWORD PTR [esi]
$LN5@Find_lower:

; 1614 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1615 :         while (!_Trynode->_Isnil) {

  00047	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0004a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0004e	74 d3		 je	 SHORT $LL2@Find_lower
  00050	5b		 pop	 ebx
$LN12@Find_lower:

; 1624 :             }
; 1625 :         }
; 1626 : 
; 1627 :         return _Result;
; 1628 :     }

  00051	8b c7		 mov	 eax, edi
  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5d		 pop	 ebp
  00056	c2 08 00	 ret	 8
??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??$_Emplace_reallocate@AAY0O@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0O@$$CBD@Z
_TEXT	SEGMENT
__Constructed_last$ = -48				; size = 4
_this$1$ = -44						; size = 4
__Newsize$1$ = -40					; size = 4
tv366 = -36						; size = 4
$T2 = -32						; size = 4
__Whereoff$1$ = -32					; size = 4
$T3 = -28						; size = 4
__Newcapacity$ = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@AAY0O@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0O@$$CBD@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<char const (&)[14]>, COMDAT
; _this$ = ecx

; 812  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Emplace_reallocate@AAY0O@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0O@$$CBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 813  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 814  :         _Alty& _Al        = _Getal();
; 815  :         auto& _My_data    = _Mypair._Myval2;
; 816  :         pointer& _Myfirst = _My_data._Myfirst;
; 817  :         pointer& _Mylast  = _My_data._Mylast;
; 818  : 
; 819  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 820  : 
; 821  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00030	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  00033	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00038	2b 16		 sub	 edx, DWORD PTR [esi]

; 822  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  0003a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0003d	2b 0e		 sub	 ecx, DWORD PTR [esi]
  0003f	f7 ea		 imul	 edx
  00041	c1 fa 02	 sar	 edx, 2
  00044	8b c2		 mov	 eax, edx
  00046	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00049	03 c2		 add	 eax, edx
  0004b	89 45 e0	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  0004e	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00053	f7 e9		 imul	 ecx
  00055	c1 fa 02	 sar	 edx, 2
  00058	8b c2		 mov	 eax, edx
  0005a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0005d	03 c2		 add	 eax, edx

; 823  : 
; 824  :         if (_Oldsize == max_size()) {

  0005f	3d aa aa aa 0a	 cmp	 eax, 178956970		; 0aaaaaaaH
  00064	0f 84 61 01 00
	00		 je	 $LN52@Emplace_re

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0006a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 826  :         }
; 827  : 
; 828  :         const size_type _Newsize     = _Oldsize + 1;

  0006d	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00070	2b 0e		 sub	 ecx, DWORD PTR [esi]
  00072	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00077	f7 e9		 imul	 ecx

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00079	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 826  :         }
; 827  : 
; 828  :         const size_type _Newsize     = _Oldsize + 1;

  0007e	89 7d d8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00081	c1 fa 02	 sar	 edx, 2
  00084	8b ca		 mov	 ecx, edx
  00086	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00089	03 ca		 add	 ecx, edx

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0008b	8b d1		 mov	 edx, ecx
  0008d	d1 ea		 shr	 edx, 1
  0008f	2b c2		 sub	 eax, edx
  00091	3b c8		 cmp	 ecx, eax
  00093	76 1a		 jbe	 SHORT $LN12@Emplace_re

; 1967 :             return _Max; // geometric growth would overflow

  00095	b8 f0 ff ff ff	 mov	 eax, -16		; fffffff0H
  0009a	be aa aa aa 0a	 mov	 esi, 178956970		; 0aaaaaaaH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0009f	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1967 :             return _Max; // geometric growth would overflow

  000a0	89 75 e8	 mov	 DWORD PTR __Newcapacity$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a3	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a8	83 c4 04	 add	 esp, 4
  000ab	8b f8		 mov	 edi, eax
  000ad	eb 49		 jmp	 SHORT $LN49@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1970 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  000af	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 70   :         if (_Count > _Max_possible) {

  000b2	8b f7		 mov	 esi, edi
  000b4	3b c7		 cmp	 eax, edi
  000b6	0f 43 f0	 cmovae	 esi, eax
  000b9	81 fe aa aa aa
	0a		 cmp	 esi, 178956970		; 0aaaaaaaH
  000bf	0f 87 0b 01 00
	00		 ja	 $LN53@Emplace_re

; 72   :         }
; 73   :     }
; 74   : 
; 75   :     return _Count * _Ty_size;

  000c5	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  000c8	89 75 e8	 mov	 DWORD PTR __Newcapacity$[ebp], esi
  000cb	c1 e0 03	 shl	 eax, 3

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000ce	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000d3	72 0d		 jb	 SHORT $LN24@Emplace_re

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000d5	50		 push	 eax
  000d6	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000db	83 c4 04	 add	 esp, 4
  000de	8b f8		 mov	 edi, eax
  000e0	eb 16		 jmp	 SHORT $LN49@Emplace_re
$LN24@Emplace_re:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  000e2	85 c0		 test	 eax, eax
  000e4	74 0d		 je	 SHORT $LN25@Emplace_re

; 87   :         return ::operator new(_Bytes);

  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000ec	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  000ef	8b f8		 mov	 edi, eax
  000f1	eb 02		 jmp	 SHORT $LN50@Emplace_re
$LN25@Emplace_re:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  000f3	33 ff		 xor	 edi, edi
$LN50@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 832  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  000f5	89 75 e8	 mov	 DWORD PTR __Newcapacity$[ebp], esi
$LN49@Emplace_re:
  000f8	8b 45 e0	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
  000fb	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  000fe	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Val_0>$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 832  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  00101	89 7d e4	 mov	 DWORD PTR $T3[ebp], edi

; 833  :         pointer _Constructed_first      = _Constructed_last;
; 834  : 
; 835  :         _TRY_BEGIN

  00104	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0010b	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0010e	8d 14 c7	 lea	 edx, DWORD PTR [edi+eax*8]
  00111	8d 42 18	 lea	 eax, DWORD PTR [edx+24]
  00114	89 55 d4	 mov	 DWORD PTR _this$1$[ebp], edx
  00117	89 45 e0	 mov	 DWORD PTR $T2[ebp], eax
  0011a	89 45 d0	 mov	 DWORD PTR __Constructed_last$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0011d	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00120	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  00123	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  0012a	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], 0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00131	89 45 dc	 mov	 DWORD PTR tv366[ebp], eax
$LL46@Emplace_re:
  00134	8a 01		 mov	 al, BYTE PTR [ecx]
  00136	41		 inc	 ecx
  00137	84 c0		 test	 al, al
  00139	75 f9		 jne	 SHORT $LL46@Emplace_re
  0013b	2b 4d dc	 sub	 ecx, DWORD PTR tv366[ebp]

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0013e	51		 push	 ecx
  0013f	ff 75 0c	 push	 DWORD PTR _<_Val_0>$[ebp]
  00142	8b ca		 mov	 ecx, edx
  00144	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 839  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00149	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0014c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0014f	8b 10		 mov	 edx, DWORD PTR [eax]
  00151	39 4d 08	 cmp	 DWORD PTR __Whereptr$[ebp], ecx
  00154	75 05		 jne	 SHORT $LN4@Emplace_re

; 840  :             if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 841  :                 _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);

  00156	89 7d e0	 mov	 DWORD PTR $T2[ebp], edi

; 842  :             } else {
; 843  :                 _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);
; 844  :             }
; 845  :         } else { // provide basic guarantee

  00159	eb 17		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 846  :             _Uninitialized_move(_Myfirst, _Whereptr, _Newvec, _Al);

  0015b	50		 push	 eax
  0015c	57		 push	 edi
  0015d	ff 75 08	 push	 DWORD PTR __Whereptr$[ebp]
  00160	52		 push	 edx
  00161	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 847  :             _Constructed_first = _Newvec;
; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  00166	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00169	83 c4 10	 add	 esp, 16			; 00000010H
  0016c	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  0016f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
$LN5@Emplace_re:
  00172	50		 push	 eax
  00173	ff 75 e0	 push	 DWORD PTR $T2[ebp]
  00176	51		 push	 ecx
  00177	52		 push	 edx
  00178	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 854  :         _CATCH_END
; 855  : 
; 856  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  0017d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00180	83 c4 10	 add	 esp, 16			; 00000010H
  00183	56		 push	 esi
  00184	ff 75 d8	 push	 DWORD PTR __Newsize$1$[ebp]
  00187	57		 push	 edi
  00188	e8 00 00 00 00	 call	 ?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array

; 857  :         return _Newvec + _Whereoff;

  0018d	8b 45 d4	 mov	 eax, DWORD PTR _this$1$[ebp]

; 858  :     }

  00190	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00193	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0019a	59		 pop	 ecx
  0019b	5f		 pop	 edi
  0019c	5e		 pop	 esi
  0019d	5b		 pop	 ebx
  0019e	8b e5		 mov	 esp, ebp
  001a0	5d		 pop	 ebp
  001a1	c2 08 00	 ret	 8
__catch$??$_Emplace_reallocate@AAY0O@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0O@$$CBD@Z$0:

; 849  :         }
; 850  :         _CATCH_ALL
; 851  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);

  001a4	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  001a7	8b 45 d0	 mov	 eax, DWORD PTR __Constructed_last$[ebp]
  001aa	56		 push	 esi
  001ab	50		 push	 eax
  001ac	50		 push	 eax
  001ad	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  001b2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 852  :         _Al.deallocate(_Newvec, _Newcapacity);

  001b5	8b ce		 mov	 ecx, esi
  001b7	ff 75 e8	 push	 DWORD PTR __Newcapacity$[ebp]
  001ba	ff 75 e4	 push	 DWORD PTR $T3[ebp]
  001bd	e8 00 00 00 00	 call	 ?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate

; 853  :         _RERAISE;

  001c2	6a 00		 push	 0
  001c4	6a 00		 push	 0
  001c6	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN52@Emplace_re:

; 825  :             _Xlength();

  001cb	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
$LN53@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 71   :             _Throw_bad_array_new_length(); // multiply overflow

  001d0	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN48@Emplace_re:
  001d5	cc		 int	 3
  001d6	cc		 int	 3
  001d7	cc		 int	 3
  001d8	cc		 int	 3
  001d9	cc		 int	 3
  001da	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@AAY0O@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0O@$$CBD@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@AAY0O@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0O@$$CBD@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@AAY0O@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0O@$$CBD@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<char const (&)[14]>
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??$_Emplace_reallocate@AAY0BI@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BI@$$CBD@Z
_TEXT	SEGMENT
__Constructed_last$ = -48				; size = 4
_this$1$ = -44						; size = 4
__Newsize$1$ = -40					; size = 4
tv366 = -36						; size = 4
$T2 = -32						; size = 4
__Whereoff$1$ = -32					; size = 4
$T3 = -28						; size = 4
__Newcapacity$ = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@AAY0BI@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BI@$$CBD@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<char const (&)[24]>, COMDAT
; _this$ = ecx

; 812  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Emplace_reallocate@AAY0BI@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BI@$$CBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 813  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 814  :         _Alty& _Al        = _Getal();
; 815  :         auto& _My_data    = _Mypair._Myval2;
; 816  :         pointer& _Myfirst = _My_data._Myfirst;
; 817  :         pointer& _Mylast  = _My_data._Mylast;
; 818  : 
; 819  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 820  : 
; 821  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00030	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  00033	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00038	2b 16		 sub	 edx, DWORD PTR [esi]

; 822  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  0003a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0003d	2b 0e		 sub	 ecx, DWORD PTR [esi]
  0003f	f7 ea		 imul	 edx
  00041	c1 fa 02	 sar	 edx, 2
  00044	8b c2		 mov	 eax, edx
  00046	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00049	03 c2		 add	 eax, edx
  0004b	89 45 e0	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  0004e	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00053	f7 e9		 imul	 ecx
  00055	c1 fa 02	 sar	 edx, 2
  00058	8b c2		 mov	 eax, edx
  0005a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0005d	03 c2		 add	 eax, edx

; 823  : 
; 824  :         if (_Oldsize == max_size()) {

  0005f	3d aa aa aa 0a	 cmp	 eax, 178956970		; 0aaaaaaaH
  00064	0f 84 61 01 00
	00		 je	 $LN52@Emplace_re

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0006a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 826  :         }
; 827  : 
; 828  :         const size_type _Newsize     = _Oldsize + 1;

  0006d	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00070	2b 0e		 sub	 ecx, DWORD PTR [esi]
  00072	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00077	f7 e9		 imul	 ecx

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00079	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 826  :         }
; 827  : 
; 828  :         const size_type _Newsize     = _Oldsize + 1;

  0007e	89 7d d8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00081	c1 fa 02	 sar	 edx, 2
  00084	8b ca		 mov	 ecx, edx
  00086	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00089	03 ca		 add	 ecx, edx

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0008b	8b d1		 mov	 edx, ecx
  0008d	d1 ea		 shr	 edx, 1
  0008f	2b c2		 sub	 eax, edx
  00091	3b c8		 cmp	 ecx, eax
  00093	76 1a		 jbe	 SHORT $LN12@Emplace_re

; 1967 :             return _Max; // geometric growth would overflow

  00095	b8 f0 ff ff ff	 mov	 eax, -16		; fffffff0H
  0009a	be aa aa aa 0a	 mov	 esi, 178956970		; 0aaaaaaaH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0009f	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1967 :             return _Max; // geometric growth would overflow

  000a0	89 75 e8	 mov	 DWORD PTR __Newcapacity$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a3	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a8	83 c4 04	 add	 esp, 4
  000ab	8b f8		 mov	 edi, eax
  000ad	eb 49		 jmp	 SHORT $LN49@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1970 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  000af	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 70   :         if (_Count > _Max_possible) {

  000b2	8b f7		 mov	 esi, edi
  000b4	3b c7		 cmp	 eax, edi
  000b6	0f 43 f0	 cmovae	 esi, eax
  000b9	81 fe aa aa aa
	0a		 cmp	 esi, 178956970		; 0aaaaaaaH
  000bf	0f 87 0b 01 00
	00		 ja	 $LN53@Emplace_re

; 72   :         }
; 73   :     }
; 74   : 
; 75   :     return _Count * _Ty_size;

  000c5	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  000c8	89 75 e8	 mov	 DWORD PTR __Newcapacity$[ebp], esi
  000cb	c1 e0 03	 shl	 eax, 3

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000ce	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000d3	72 0d		 jb	 SHORT $LN24@Emplace_re

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000d5	50		 push	 eax
  000d6	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000db	83 c4 04	 add	 esp, 4
  000de	8b f8		 mov	 edi, eax
  000e0	eb 16		 jmp	 SHORT $LN49@Emplace_re
$LN24@Emplace_re:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  000e2	85 c0		 test	 eax, eax
  000e4	74 0d		 je	 SHORT $LN25@Emplace_re

; 87   :         return ::operator new(_Bytes);

  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000ec	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  000ef	8b f8		 mov	 edi, eax
  000f1	eb 02		 jmp	 SHORT $LN50@Emplace_re
$LN25@Emplace_re:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  000f3	33 ff		 xor	 edi, edi
$LN50@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 832  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  000f5	89 75 e8	 mov	 DWORD PTR __Newcapacity$[ebp], esi
$LN49@Emplace_re:
  000f8	8b 45 e0	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
  000fb	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  000fe	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Val_0>$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 832  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  00101	89 7d e4	 mov	 DWORD PTR $T3[ebp], edi

; 833  :         pointer _Constructed_first      = _Constructed_last;
; 834  : 
; 835  :         _TRY_BEGIN

  00104	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0010b	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0010e	8d 14 c7	 lea	 edx, DWORD PTR [edi+eax*8]
  00111	8d 42 18	 lea	 eax, DWORD PTR [edx+24]
  00114	89 55 d4	 mov	 DWORD PTR _this$1$[ebp], edx
  00117	89 45 e0	 mov	 DWORD PTR $T2[ebp], eax
  0011a	89 45 d0	 mov	 DWORD PTR __Constructed_last$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0011d	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00120	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  00123	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  0012a	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], 0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00131	89 45 dc	 mov	 DWORD PTR tv366[ebp], eax
$LL46@Emplace_re:
  00134	8a 01		 mov	 al, BYTE PTR [ecx]
  00136	41		 inc	 ecx
  00137	84 c0		 test	 al, al
  00139	75 f9		 jne	 SHORT $LL46@Emplace_re
  0013b	2b 4d dc	 sub	 ecx, DWORD PTR tv366[ebp]

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0013e	51		 push	 ecx
  0013f	ff 75 0c	 push	 DWORD PTR _<_Val_0>$[ebp]
  00142	8b ca		 mov	 ecx, edx
  00144	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 839  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00149	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0014c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0014f	8b 10		 mov	 edx, DWORD PTR [eax]
  00151	39 4d 08	 cmp	 DWORD PTR __Whereptr$[ebp], ecx
  00154	75 05		 jne	 SHORT $LN4@Emplace_re

; 840  :             if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 841  :                 _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);

  00156	89 7d e0	 mov	 DWORD PTR $T2[ebp], edi

; 842  :             } else {
; 843  :                 _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);
; 844  :             }
; 845  :         } else { // provide basic guarantee

  00159	eb 17		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 846  :             _Uninitialized_move(_Myfirst, _Whereptr, _Newvec, _Al);

  0015b	50		 push	 eax
  0015c	57		 push	 edi
  0015d	ff 75 08	 push	 DWORD PTR __Whereptr$[ebp]
  00160	52		 push	 edx
  00161	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 847  :             _Constructed_first = _Newvec;
; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  00166	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00169	83 c4 10	 add	 esp, 16			; 00000010H
  0016c	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  0016f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
$LN5@Emplace_re:
  00172	50		 push	 eax
  00173	ff 75 e0	 push	 DWORD PTR $T2[ebp]
  00176	51		 push	 ecx
  00177	52		 push	 edx
  00178	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 854  :         _CATCH_END
; 855  : 
; 856  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  0017d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00180	83 c4 10	 add	 esp, 16			; 00000010H
  00183	56		 push	 esi
  00184	ff 75 d8	 push	 DWORD PTR __Newsize$1$[ebp]
  00187	57		 push	 edi
  00188	e8 00 00 00 00	 call	 ?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array

; 857  :         return _Newvec + _Whereoff;

  0018d	8b 45 d4	 mov	 eax, DWORD PTR _this$1$[ebp]

; 858  :     }

  00190	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00193	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0019a	59		 pop	 ecx
  0019b	5f		 pop	 edi
  0019c	5e		 pop	 esi
  0019d	5b		 pop	 ebx
  0019e	8b e5		 mov	 esp, ebp
  001a0	5d		 pop	 ebp
  001a1	c2 08 00	 ret	 8
__catch$??$_Emplace_reallocate@AAY0BI@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BI@$$CBD@Z$0:

; 849  :         }
; 850  :         _CATCH_ALL
; 851  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);

  001a4	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  001a7	8b 45 d0	 mov	 eax, DWORD PTR __Constructed_last$[ebp]
  001aa	56		 push	 esi
  001ab	50		 push	 eax
  001ac	50		 push	 eax
  001ad	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  001b2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 852  :         _Al.deallocate(_Newvec, _Newcapacity);

  001b5	8b ce		 mov	 ecx, esi
  001b7	ff 75 e8	 push	 DWORD PTR __Newcapacity$[ebp]
  001ba	ff 75 e4	 push	 DWORD PTR $T3[ebp]
  001bd	e8 00 00 00 00	 call	 ?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate

; 853  :         _RERAISE;

  001c2	6a 00		 push	 0
  001c4	6a 00		 push	 0
  001c6	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN52@Emplace_re:

; 825  :             _Xlength();

  001cb	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
$LN53@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 71   :             _Throw_bad_array_new_length(); // multiply overflow

  001d0	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN48@Emplace_re:
  001d5	cc		 int	 3
  001d6	cc		 int	 3
  001d7	cc		 int	 3
  001d8	cc		 int	 3
  001d9	cc		 int	 3
  001da	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@AAY0BI@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BI@$$CBD@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@AAY0BI@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BI@$$CBD@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@AAY0BI@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BI@$$CBD@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<char const (&)[24]>
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??$_Emplace_reallocate@AAY0BH@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BH@$$CBD@Z
_TEXT	SEGMENT
__Constructed_last$ = -48				; size = 4
_this$1$ = -44						; size = 4
__Newsize$1$ = -40					; size = 4
tv366 = -36						; size = 4
$T2 = -32						; size = 4
__Whereoff$1$ = -32					; size = 4
$T3 = -28						; size = 4
__Newcapacity$ = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@AAY0BH@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BH@$$CBD@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<char const (&)[23]>, COMDAT
; _this$ = ecx

; 812  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Emplace_reallocate@AAY0BH@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BH@$$CBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 813  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 814  :         _Alty& _Al        = _Getal();
; 815  :         auto& _My_data    = _Mypair._Myval2;
; 816  :         pointer& _Myfirst = _My_data._Myfirst;
; 817  :         pointer& _Mylast  = _My_data._Mylast;
; 818  : 
; 819  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 820  : 
; 821  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00030	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  00033	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00038	2b 16		 sub	 edx, DWORD PTR [esi]

; 822  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  0003a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0003d	2b 0e		 sub	 ecx, DWORD PTR [esi]
  0003f	f7 ea		 imul	 edx
  00041	c1 fa 02	 sar	 edx, 2
  00044	8b c2		 mov	 eax, edx
  00046	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00049	03 c2		 add	 eax, edx
  0004b	89 45 e0	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  0004e	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00053	f7 e9		 imul	 ecx
  00055	c1 fa 02	 sar	 edx, 2
  00058	8b c2		 mov	 eax, edx
  0005a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0005d	03 c2		 add	 eax, edx

; 823  : 
; 824  :         if (_Oldsize == max_size()) {

  0005f	3d aa aa aa 0a	 cmp	 eax, 178956970		; 0aaaaaaaH
  00064	0f 84 61 01 00
	00		 je	 $LN52@Emplace_re

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0006a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 826  :         }
; 827  : 
; 828  :         const size_type _Newsize     = _Oldsize + 1;

  0006d	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00070	2b 0e		 sub	 ecx, DWORD PTR [esi]
  00072	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00077	f7 e9		 imul	 ecx

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00079	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 826  :         }
; 827  : 
; 828  :         const size_type _Newsize     = _Oldsize + 1;

  0007e	89 7d d8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00081	c1 fa 02	 sar	 edx, 2
  00084	8b ca		 mov	 ecx, edx
  00086	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00089	03 ca		 add	 ecx, edx

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0008b	8b d1		 mov	 edx, ecx
  0008d	d1 ea		 shr	 edx, 1
  0008f	2b c2		 sub	 eax, edx
  00091	3b c8		 cmp	 ecx, eax
  00093	76 1a		 jbe	 SHORT $LN12@Emplace_re

; 1967 :             return _Max; // geometric growth would overflow

  00095	b8 f0 ff ff ff	 mov	 eax, -16		; fffffff0H
  0009a	be aa aa aa 0a	 mov	 esi, 178956970		; 0aaaaaaaH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0009f	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1967 :             return _Max; // geometric growth would overflow

  000a0	89 75 e8	 mov	 DWORD PTR __Newcapacity$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a3	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a8	83 c4 04	 add	 esp, 4
  000ab	8b f8		 mov	 edi, eax
  000ad	eb 49		 jmp	 SHORT $LN49@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1970 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  000af	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 70   :         if (_Count > _Max_possible) {

  000b2	8b f7		 mov	 esi, edi
  000b4	3b c7		 cmp	 eax, edi
  000b6	0f 43 f0	 cmovae	 esi, eax
  000b9	81 fe aa aa aa
	0a		 cmp	 esi, 178956970		; 0aaaaaaaH
  000bf	0f 87 0b 01 00
	00		 ja	 $LN53@Emplace_re

; 72   :         }
; 73   :     }
; 74   : 
; 75   :     return _Count * _Ty_size;

  000c5	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  000c8	89 75 e8	 mov	 DWORD PTR __Newcapacity$[ebp], esi
  000cb	c1 e0 03	 shl	 eax, 3

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000ce	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000d3	72 0d		 jb	 SHORT $LN24@Emplace_re

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000d5	50		 push	 eax
  000d6	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000db	83 c4 04	 add	 esp, 4
  000de	8b f8		 mov	 edi, eax
  000e0	eb 16		 jmp	 SHORT $LN49@Emplace_re
$LN24@Emplace_re:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  000e2	85 c0		 test	 eax, eax
  000e4	74 0d		 je	 SHORT $LN25@Emplace_re

; 87   :         return ::operator new(_Bytes);

  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000ec	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  000ef	8b f8		 mov	 edi, eax
  000f1	eb 02		 jmp	 SHORT $LN50@Emplace_re
$LN25@Emplace_re:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  000f3	33 ff		 xor	 edi, edi
$LN50@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 832  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  000f5	89 75 e8	 mov	 DWORD PTR __Newcapacity$[ebp], esi
$LN49@Emplace_re:
  000f8	8b 45 e0	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
  000fb	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  000fe	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Val_0>$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 832  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  00101	89 7d e4	 mov	 DWORD PTR $T3[ebp], edi

; 833  :         pointer _Constructed_first      = _Constructed_last;
; 834  : 
; 835  :         _TRY_BEGIN

  00104	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0010b	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0010e	8d 14 c7	 lea	 edx, DWORD PTR [edi+eax*8]
  00111	8d 42 18	 lea	 eax, DWORD PTR [edx+24]
  00114	89 55 d4	 mov	 DWORD PTR _this$1$[ebp], edx
  00117	89 45 e0	 mov	 DWORD PTR $T2[ebp], eax
  0011a	89 45 d0	 mov	 DWORD PTR __Constructed_last$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0011d	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00120	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  00123	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  0012a	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], 0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00131	89 45 dc	 mov	 DWORD PTR tv366[ebp], eax
$LL46@Emplace_re:
  00134	8a 01		 mov	 al, BYTE PTR [ecx]
  00136	41		 inc	 ecx
  00137	84 c0		 test	 al, al
  00139	75 f9		 jne	 SHORT $LL46@Emplace_re
  0013b	2b 4d dc	 sub	 ecx, DWORD PTR tv366[ebp]

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0013e	51		 push	 ecx
  0013f	ff 75 0c	 push	 DWORD PTR _<_Val_0>$[ebp]
  00142	8b ca		 mov	 ecx, edx
  00144	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 839  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00149	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0014c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0014f	8b 10		 mov	 edx, DWORD PTR [eax]
  00151	39 4d 08	 cmp	 DWORD PTR __Whereptr$[ebp], ecx
  00154	75 05		 jne	 SHORT $LN4@Emplace_re

; 840  :             if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 841  :                 _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);

  00156	89 7d e0	 mov	 DWORD PTR $T2[ebp], edi

; 842  :             } else {
; 843  :                 _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);
; 844  :             }
; 845  :         } else { // provide basic guarantee

  00159	eb 17		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 846  :             _Uninitialized_move(_Myfirst, _Whereptr, _Newvec, _Al);

  0015b	50		 push	 eax
  0015c	57		 push	 edi
  0015d	ff 75 08	 push	 DWORD PTR __Whereptr$[ebp]
  00160	52		 push	 edx
  00161	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 847  :             _Constructed_first = _Newvec;
; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  00166	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00169	83 c4 10	 add	 esp, 16			; 00000010H
  0016c	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  0016f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
$LN5@Emplace_re:
  00172	50		 push	 eax
  00173	ff 75 e0	 push	 DWORD PTR $T2[ebp]
  00176	51		 push	 ecx
  00177	52		 push	 edx
  00178	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 854  :         _CATCH_END
; 855  : 
; 856  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  0017d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00180	83 c4 10	 add	 esp, 16			; 00000010H
  00183	56		 push	 esi
  00184	ff 75 d8	 push	 DWORD PTR __Newsize$1$[ebp]
  00187	57		 push	 edi
  00188	e8 00 00 00 00	 call	 ?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array

; 857  :         return _Newvec + _Whereoff;

  0018d	8b 45 d4	 mov	 eax, DWORD PTR _this$1$[ebp]

; 858  :     }

  00190	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00193	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0019a	59		 pop	 ecx
  0019b	5f		 pop	 edi
  0019c	5e		 pop	 esi
  0019d	5b		 pop	 ebx
  0019e	8b e5		 mov	 esp, ebp
  001a0	5d		 pop	 ebp
  001a1	c2 08 00	 ret	 8
__catch$??$_Emplace_reallocate@AAY0BH@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BH@$$CBD@Z$0:

; 849  :         }
; 850  :         _CATCH_ALL
; 851  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);

  001a4	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  001a7	8b 45 d0	 mov	 eax, DWORD PTR __Constructed_last$[ebp]
  001aa	56		 push	 esi
  001ab	50		 push	 eax
  001ac	50		 push	 eax
  001ad	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  001b2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 852  :         _Al.deallocate(_Newvec, _Newcapacity);

  001b5	8b ce		 mov	 ecx, esi
  001b7	ff 75 e8	 push	 DWORD PTR __Newcapacity$[ebp]
  001ba	ff 75 e4	 push	 DWORD PTR $T3[ebp]
  001bd	e8 00 00 00 00	 call	 ?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate

; 853  :         _RERAISE;

  001c2	6a 00		 push	 0
  001c4	6a 00		 push	 0
  001c6	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN52@Emplace_re:

; 825  :             _Xlength();

  001cb	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
$LN53@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 71   :             _Throw_bad_array_new_length(); // multiply overflow

  001d0	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN48@Emplace_re:
  001d5	cc		 int	 3
  001d6	cc		 int	 3
  001d7	cc		 int	 3
  001d8	cc		 int	 3
  001d9	cc		 int	 3
  001da	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@AAY0BH@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BH@$$CBD@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@AAY0BH@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BH@$$CBD@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@AAY0BH@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BH@$$CBD@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<char const (&)[23]>
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??$_Emplace_reallocate@AAY0BG@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BG@$$CBD@Z
_TEXT	SEGMENT
__Constructed_last$ = -48				; size = 4
_this$1$ = -44						; size = 4
__Newsize$1$ = -40					; size = 4
tv366 = -36						; size = 4
$T2 = -32						; size = 4
__Whereoff$1$ = -32					; size = 4
$T3 = -28						; size = 4
__Newcapacity$ = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@AAY0BG@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BG@$$CBD@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<char const (&)[22]>, COMDAT
; _this$ = ecx

; 812  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Emplace_reallocate@AAY0BG@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BG@$$CBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 813  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 814  :         _Alty& _Al        = _Getal();
; 815  :         auto& _My_data    = _Mypair._Myval2;
; 816  :         pointer& _Myfirst = _My_data._Myfirst;
; 817  :         pointer& _Mylast  = _My_data._Mylast;
; 818  : 
; 819  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 820  : 
; 821  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00030	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  00033	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00038	2b 16		 sub	 edx, DWORD PTR [esi]

; 822  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  0003a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0003d	2b 0e		 sub	 ecx, DWORD PTR [esi]
  0003f	f7 ea		 imul	 edx
  00041	c1 fa 02	 sar	 edx, 2
  00044	8b c2		 mov	 eax, edx
  00046	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00049	03 c2		 add	 eax, edx
  0004b	89 45 e0	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  0004e	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00053	f7 e9		 imul	 ecx
  00055	c1 fa 02	 sar	 edx, 2
  00058	8b c2		 mov	 eax, edx
  0005a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0005d	03 c2		 add	 eax, edx

; 823  : 
; 824  :         if (_Oldsize == max_size()) {

  0005f	3d aa aa aa 0a	 cmp	 eax, 178956970		; 0aaaaaaaH
  00064	0f 84 61 01 00
	00		 je	 $LN52@Emplace_re

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0006a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 826  :         }
; 827  : 
; 828  :         const size_type _Newsize     = _Oldsize + 1;

  0006d	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00070	2b 0e		 sub	 ecx, DWORD PTR [esi]
  00072	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00077	f7 e9		 imul	 ecx

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00079	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 826  :         }
; 827  : 
; 828  :         const size_type _Newsize     = _Oldsize + 1;

  0007e	89 7d d8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00081	c1 fa 02	 sar	 edx, 2
  00084	8b ca		 mov	 ecx, edx
  00086	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00089	03 ca		 add	 ecx, edx

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0008b	8b d1		 mov	 edx, ecx
  0008d	d1 ea		 shr	 edx, 1
  0008f	2b c2		 sub	 eax, edx
  00091	3b c8		 cmp	 ecx, eax
  00093	76 1a		 jbe	 SHORT $LN12@Emplace_re

; 1967 :             return _Max; // geometric growth would overflow

  00095	b8 f0 ff ff ff	 mov	 eax, -16		; fffffff0H
  0009a	be aa aa aa 0a	 mov	 esi, 178956970		; 0aaaaaaaH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0009f	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1967 :             return _Max; // geometric growth would overflow

  000a0	89 75 e8	 mov	 DWORD PTR __Newcapacity$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a3	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a8	83 c4 04	 add	 esp, 4
  000ab	8b f8		 mov	 edi, eax
  000ad	eb 49		 jmp	 SHORT $LN49@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1970 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  000af	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 70   :         if (_Count > _Max_possible) {

  000b2	8b f7		 mov	 esi, edi
  000b4	3b c7		 cmp	 eax, edi
  000b6	0f 43 f0	 cmovae	 esi, eax
  000b9	81 fe aa aa aa
	0a		 cmp	 esi, 178956970		; 0aaaaaaaH
  000bf	0f 87 0b 01 00
	00		 ja	 $LN53@Emplace_re

; 72   :         }
; 73   :     }
; 74   : 
; 75   :     return _Count * _Ty_size;

  000c5	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  000c8	89 75 e8	 mov	 DWORD PTR __Newcapacity$[ebp], esi
  000cb	c1 e0 03	 shl	 eax, 3

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000ce	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000d3	72 0d		 jb	 SHORT $LN24@Emplace_re

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000d5	50		 push	 eax
  000d6	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000db	83 c4 04	 add	 esp, 4
  000de	8b f8		 mov	 edi, eax
  000e0	eb 16		 jmp	 SHORT $LN49@Emplace_re
$LN24@Emplace_re:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  000e2	85 c0		 test	 eax, eax
  000e4	74 0d		 je	 SHORT $LN25@Emplace_re

; 87   :         return ::operator new(_Bytes);

  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000ec	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  000ef	8b f8		 mov	 edi, eax
  000f1	eb 02		 jmp	 SHORT $LN50@Emplace_re
$LN25@Emplace_re:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  000f3	33 ff		 xor	 edi, edi
$LN50@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 832  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  000f5	89 75 e8	 mov	 DWORD PTR __Newcapacity$[ebp], esi
$LN49@Emplace_re:
  000f8	8b 45 e0	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
  000fb	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  000fe	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Val_0>$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 832  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  00101	89 7d e4	 mov	 DWORD PTR $T3[ebp], edi

; 833  :         pointer _Constructed_first      = _Constructed_last;
; 834  : 
; 835  :         _TRY_BEGIN

  00104	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0010b	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0010e	8d 14 c7	 lea	 edx, DWORD PTR [edi+eax*8]
  00111	8d 42 18	 lea	 eax, DWORD PTR [edx+24]
  00114	89 55 d4	 mov	 DWORD PTR _this$1$[ebp], edx
  00117	89 45 e0	 mov	 DWORD PTR $T2[ebp], eax
  0011a	89 45 d0	 mov	 DWORD PTR __Constructed_last$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0011d	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00120	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  00123	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  0012a	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], 0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00131	89 45 dc	 mov	 DWORD PTR tv366[ebp], eax
$LL46@Emplace_re:
  00134	8a 01		 mov	 al, BYTE PTR [ecx]
  00136	41		 inc	 ecx
  00137	84 c0		 test	 al, al
  00139	75 f9		 jne	 SHORT $LL46@Emplace_re
  0013b	2b 4d dc	 sub	 ecx, DWORD PTR tv366[ebp]

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0013e	51		 push	 ecx
  0013f	ff 75 0c	 push	 DWORD PTR _<_Val_0>$[ebp]
  00142	8b ca		 mov	 ecx, edx
  00144	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 839  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00149	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0014c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0014f	8b 10		 mov	 edx, DWORD PTR [eax]
  00151	39 4d 08	 cmp	 DWORD PTR __Whereptr$[ebp], ecx
  00154	75 05		 jne	 SHORT $LN4@Emplace_re

; 840  :             if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 841  :                 _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);

  00156	89 7d e0	 mov	 DWORD PTR $T2[ebp], edi

; 842  :             } else {
; 843  :                 _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);
; 844  :             }
; 845  :         } else { // provide basic guarantee

  00159	eb 17		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 846  :             _Uninitialized_move(_Myfirst, _Whereptr, _Newvec, _Al);

  0015b	50		 push	 eax
  0015c	57		 push	 edi
  0015d	ff 75 08	 push	 DWORD PTR __Whereptr$[ebp]
  00160	52		 push	 edx
  00161	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 847  :             _Constructed_first = _Newvec;
; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  00166	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00169	83 c4 10	 add	 esp, 16			; 00000010H
  0016c	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  0016f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
$LN5@Emplace_re:
  00172	50		 push	 eax
  00173	ff 75 e0	 push	 DWORD PTR $T2[ebp]
  00176	51		 push	 ecx
  00177	52		 push	 edx
  00178	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 854  :         _CATCH_END
; 855  : 
; 856  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  0017d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00180	83 c4 10	 add	 esp, 16			; 00000010H
  00183	56		 push	 esi
  00184	ff 75 d8	 push	 DWORD PTR __Newsize$1$[ebp]
  00187	57		 push	 edi
  00188	e8 00 00 00 00	 call	 ?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array

; 857  :         return _Newvec + _Whereoff;

  0018d	8b 45 d4	 mov	 eax, DWORD PTR _this$1$[ebp]

; 858  :     }

  00190	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00193	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0019a	59		 pop	 ecx
  0019b	5f		 pop	 edi
  0019c	5e		 pop	 esi
  0019d	5b		 pop	 ebx
  0019e	8b e5		 mov	 esp, ebp
  001a0	5d		 pop	 ebp
  001a1	c2 08 00	 ret	 8
__catch$??$_Emplace_reallocate@AAY0BG@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BG@$$CBD@Z$0:

; 849  :         }
; 850  :         _CATCH_ALL
; 851  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);

  001a4	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  001a7	8b 45 d0	 mov	 eax, DWORD PTR __Constructed_last$[ebp]
  001aa	56		 push	 esi
  001ab	50		 push	 eax
  001ac	50		 push	 eax
  001ad	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  001b2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 852  :         _Al.deallocate(_Newvec, _Newcapacity);

  001b5	8b ce		 mov	 ecx, esi
  001b7	ff 75 e8	 push	 DWORD PTR __Newcapacity$[ebp]
  001ba	ff 75 e4	 push	 DWORD PTR $T3[ebp]
  001bd	e8 00 00 00 00	 call	 ?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate

; 853  :         _RERAISE;

  001c2	6a 00		 push	 0
  001c4	6a 00		 push	 0
  001c6	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN52@Emplace_re:

; 825  :             _Xlength();

  001cb	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
$LN53@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 71   :             _Throw_bad_array_new_length(); // multiply overflow

  001d0	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN48@Emplace_re:
  001d5	cc		 int	 3
  001d6	cc		 int	 3
  001d7	cc		 int	 3
  001d8	cc		 int	 3
  001d9	cc		 int	 3
  001da	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@AAY0BG@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BG@$$CBD@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@AAY0BG@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BG@$$CBD@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@AAY0BG@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BG@$$CBD@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<char const (&)[22]>
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??$_Emplace_reallocate@AAY0BD@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BD@$$CBD@Z
_TEXT	SEGMENT
__Constructed_last$ = -48				; size = 4
_this$1$ = -44						; size = 4
__Newsize$1$ = -40					; size = 4
tv366 = -36						; size = 4
$T2 = -32						; size = 4
__Whereoff$1$ = -32					; size = 4
$T3 = -28						; size = 4
__Newcapacity$ = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@AAY0BD@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BD@$$CBD@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<char const (&)[19]>, COMDAT
; _this$ = ecx

; 812  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Emplace_reallocate@AAY0BD@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BD@$$CBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 813  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 814  :         _Alty& _Al        = _Getal();
; 815  :         auto& _My_data    = _Mypair._Myval2;
; 816  :         pointer& _Myfirst = _My_data._Myfirst;
; 817  :         pointer& _Mylast  = _My_data._Mylast;
; 818  : 
; 819  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 820  : 
; 821  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00030	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  00033	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00038	2b 16		 sub	 edx, DWORD PTR [esi]

; 822  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  0003a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0003d	2b 0e		 sub	 ecx, DWORD PTR [esi]
  0003f	f7 ea		 imul	 edx
  00041	c1 fa 02	 sar	 edx, 2
  00044	8b c2		 mov	 eax, edx
  00046	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00049	03 c2		 add	 eax, edx
  0004b	89 45 e0	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  0004e	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00053	f7 e9		 imul	 ecx
  00055	c1 fa 02	 sar	 edx, 2
  00058	8b c2		 mov	 eax, edx
  0005a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0005d	03 c2		 add	 eax, edx

; 823  : 
; 824  :         if (_Oldsize == max_size()) {

  0005f	3d aa aa aa 0a	 cmp	 eax, 178956970		; 0aaaaaaaH
  00064	0f 84 61 01 00
	00		 je	 $LN52@Emplace_re

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0006a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 826  :         }
; 827  : 
; 828  :         const size_type _Newsize     = _Oldsize + 1;

  0006d	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00070	2b 0e		 sub	 ecx, DWORD PTR [esi]
  00072	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00077	f7 e9		 imul	 ecx

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00079	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 826  :         }
; 827  : 
; 828  :         const size_type _Newsize     = _Oldsize + 1;

  0007e	89 7d d8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00081	c1 fa 02	 sar	 edx, 2
  00084	8b ca		 mov	 ecx, edx
  00086	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00089	03 ca		 add	 ecx, edx

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0008b	8b d1		 mov	 edx, ecx
  0008d	d1 ea		 shr	 edx, 1
  0008f	2b c2		 sub	 eax, edx
  00091	3b c8		 cmp	 ecx, eax
  00093	76 1a		 jbe	 SHORT $LN12@Emplace_re

; 1967 :             return _Max; // geometric growth would overflow

  00095	b8 f0 ff ff ff	 mov	 eax, -16		; fffffff0H
  0009a	be aa aa aa 0a	 mov	 esi, 178956970		; 0aaaaaaaH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0009f	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1967 :             return _Max; // geometric growth would overflow

  000a0	89 75 e8	 mov	 DWORD PTR __Newcapacity$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a3	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a8	83 c4 04	 add	 esp, 4
  000ab	8b f8		 mov	 edi, eax
  000ad	eb 49		 jmp	 SHORT $LN49@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1970 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  000af	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 70   :         if (_Count > _Max_possible) {

  000b2	8b f7		 mov	 esi, edi
  000b4	3b c7		 cmp	 eax, edi
  000b6	0f 43 f0	 cmovae	 esi, eax
  000b9	81 fe aa aa aa
	0a		 cmp	 esi, 178956970		; 0aaaaaaaH
  000bf	0f 87 0b 01 00
	00		 ja	 $LN53@Emplace_re

; 72   :         }
; 73   :     }
; 74   : 
; 75   :     return _Count * _Ty_size;

  000c5	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  000c8	89 75 e8	 mov	 DWORD PTR __Newcapacity$[ebp], esi
  000cb	c1 e0 03	 shl	 eax, 3

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000ce	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000d3	72 0d		 jb	 SHORT $LN24@Emplace_re

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000d5	50		 push	 eax
  000d6	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000db	83 c4 04	 add	 esp, 4
  000de	8b f8		 mov	 edi, eax
  000e0	eb 16		 jmp	 SHORT $LN49@Emplace_re
$LN24@Emplace_re:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  000e2	85 c0		 test	 eax, eax
  000e4	74 0d		 je	 SHORT $LN25@Emplace_re

; 87   :         return ::operator new(_Bytes);

  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000ec	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  000ef	8b f8		 mov	 edi, eax
  000f1	eb 02		 jmp	 SHORT $LN50@Emplace_re
$LN25@Emplace_re:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  000f3	33 ff		 xor	 edi, edi
$LN50@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 832  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  000f5	89 75 e8	 mov	 DWORD PTR __Newcapacity$[ebp], esi
$LN49@Emplace_re:
  000f8	8b 45 e0	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
  000fb	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  000fe	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Val_0>$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 832  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  00101	89 7d e4	 mov	 DWORD PTR $T3[ebp], edi

; 833  :         pointer _Constructed_first      = _Constructed_last;
; 834  : 
; 835  :         _TRY_BEGIN

  00104	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0010b	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0010e	8d 14 c7	 lea	 edx, DWORD PTR [edi+eax*8]
  00111	8d 42 18	 lea	 eax, DWORD PTR [edx+24]
  00114	89 55 d4	 mov	 DWORD PTR _this$1$[ebp], edx
  00117	89 45 e0	 mov	 DWORD PTR $T2[ebp], eax
  0011a	89 45 d0	 mov	 DWORD PTR __Constructed_last$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0011d	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00120	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  00123	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  0012a	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], 0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00131	89 45 dc	 mov	 DWORD PTR tv366[ebp], eax
$LL46@Emplace_re:
  00134	8a 01		 mov	 al, BYTE PTR [ecx]
  00136	41		 inc	 ecx
  00137	84 c0		 test	 al, al
  00139	75 f9		 jne	 SHORT $LL46@Emplace_re
  0013b	2b 4d dc	 sub	 ecx, DWORD PTR tv366[ebp]

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0013e	51		 push	 ecx
  0013f	ff 75 0c	 push	 DWORD PTR _<_Val_0>$[ebp]
  00142	8b ca		 mov	 ecx, edx
  00144	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 839  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00149	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0014c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0014f	8b 10		 mov	 edx, DWORD PTR [eax]
  00151	39 4d 08	 cmp	 DWORD PTR __Whereptr$[ebp], ecx
  00154	75 05		 jne	 SHORT $LN4@Emplace_re

; 840  :             if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 841  :                 _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);

  00156	89 7d e0	 mov	 DWORD PTR $T2[ebp], edi

; 842  :             } else {
; 843  :                 _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);
; 844  :             }
; 845  :         } else { // provide basic guarantee

  00159	eb 17		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 846  :             _Uninitialized_move(_Myfirst, _Whereptr, _Newvec, _Al);

  0015b	50		 push	 eax
  0015c	57		 push	 edi
  0015d	ff 75 08	 push	 DWORD PTR __Whereptr$[ebp]
  00160	52		 push	 edx
  00161	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 847  :             _Constructed_first = _Newvec;
; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  00166	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00169	83 c4 10	 add	 esp, 16			; 00000010H
  0016c	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  0016f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
$LN5@Emplace_re:
  00172	50		 push	 eax
  00173	ff 75 e0	 push	 DWORD PTR $T2[ebp]
  00176	51		 push	 ecx
  00177	52		 push	 edx
  00178	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 854  :         _CATCH_END
; 855  : 
; 856  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  0017d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00180	83 c4 10	 add	 esp, 16			; 00000010H
  00183	56		 push	 esi
  00184	ff 75 d8	 push	 DWORD PTR __Newsize$1$[ebp]
  00187	57		 push	 edi
  00188	e8 00 00 00 00	 call	 ?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array

; 857  :         return _Newvec + _Whereoff;

  0018d	8b 45 d4	 mov	 eax, DWORD PTR _this$1$[ebp]

; 858  :     }

  00190	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00193	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0019a	59		 pop	 ecx
  0019b	5f		 pop	 edi
  0019c	5e		 pop	 esi
  0019d	5b		 pop	 ebx
  0019e	8b e5		 mov	 esp, ebp
  001a0	5d		 pop	 ebp
  001a1	c2 08 00	 ret	 8
__catch$??$_Emplace_reallocate@AAY0BD@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BD@$$CBD@Z$0:

; 849  :         }
; 850  :         _CATCH_ALL
; 851  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);

  001a4	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  001a7	8b 45 d0	 mov	 eax, DWORD PTR __Constructed_last$[ebp]
  001aa	56		 push	 esi
  001ab	50		 push	 eax
  001ac	50		 push	 eax
  001ad	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  001b2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 852  :         _Al.deallocate(_Newvec, _Newcapacity);

  001b5	8b ce		 mov	 ecx, esi
  001b7	ff 75 e8	 push	 DWORD PTR __Newcapacity$[ebp]
  001ba	ff 75 e4	 push	 DWORD PTR $T3[ebp]
  001bd	e8 00 00 00 00	 call	 ?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate

; 853  :         _RERAISE;

  001c2	6a 00		 push	 0
  001c4	6a 00		 push	 0
  001c6	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN52@Emplace_re:

; 825  :             _Xlength();

  001cb	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
$LN53@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 71   :             _Throw_bad_array_new_length(); // multiply overflow

  001d0	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN48@Emplace_re:
  001d5	cc		 int	 3
  001d6	cc		 int	 3
  001d7	cc		 int	 3
  001d8	cc		 int	 3
  001d9	cc		 int	 3
  001da	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@AAY0BD@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BD@$$CBD@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@AAY0BD@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BD@$$CBD@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@AAY0BD@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BD@$$CBD@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<char const (&)[19]>
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??$_Emplace_reallocate@AAY0BC@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BC@$$CBD@Z
_TEXT	SEGMENT
__Constructed_last$ = -48				; size = 4
_this$1$ = -44						; size = 4
__Newsize$1$ = -40					; size = 4
tv366 = -36						; size = 4
$T2 = -32						; size = 4
__Whereoff$1$ = -32					; size = 4
$T3 = -28						; size = 4
__Newcapacity$ = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@AAY0BC@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BC@$$CBD@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<char const (&)[18]>, COMDAT
; _this$ = ecx

; 812  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Emplace_reallocate@AAY0BC@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BC@$$CBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 813  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 814  :         _Alty& _Al        = _Getal();
; 815  :         auto& _My_data    = _Mypair._Myval2;
; 816  :         pointer& _Myfirst = _My_data._Myfirst;
; 817  :         pointer& _Mylast  = _My_data._Mylast;
; 818  : 
; 819  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 820  : 
; 821  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00030	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  00033	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00038	2b 16		 sub	 edx, DWORD PTR [esi]

; 822  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  0003a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0003d	2b 0e		 sub	 ecx, DWORD PTR [esi]
  0003f	f7 ea		 imul	 edx
  00041	c1 fa 02	 sar	 edx, 2
  00044	8b c2		 mov	 eax, edx
  00046	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00049	03 c2		 add	 eax, edx
  0004b	89 45 e0	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  0004e	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00053	f7 e9		 imul	 ecx
  00055	c1 fa 02	 sar	 edx, 2
  00058	8b c2		 mov	 eax, edx
  0005a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0005d	03 c2		 add	 eax, edx

; 823  : 
; 824  :         if (_Oldsize == max_size()) {

  0005f	3d aa aa aa 0a	 cmp	 eax, 178956970		; 0aaaaaaaH
  00064	0f 84 61 01 00
	00		 je	 $LN52@Emplace_re

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0006a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 826  :         }
; 827  : 
; 828  :         const size_type _Newsize     = _Oldsize + 1;

  0006d	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00070	2b 0e		 sub	 ecx, DWORD PTR [esi]
  00072	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00077	f7 e9		 imul	 ecx

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00079	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 826  :         }
; 827  : 
; 828  :         const size_type _Newsize     = _Oldsize + 1;

  0007e	89 7d d8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00081	c1 fa 02	 sar	 edx, 2
  00084	8b ca		 mov	 ecx, edx
  00086	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00089	03 ca		 add	 ecx, edx

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0008b	8b d1		 mov	 edx, ecx
  0008d	d1 ea		 shr	 edx, 1
  0008f	2b c2		 sub	 eax, edx
  00091	3b c8		 cmp	 ecx, eax
  00093	76 1a		 jbe	 SHORT $LN12@Emplace_re

; 1967 :             return _Max; // geometric growth would overflow

  00095	b8 f0 ff ff ff	 mov	 eax, -16		; fffffff0H
  0009a	be aa aa aa 0a	 mov	 esi, 178956970		; 0aaaaaaaH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0009f	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1967 :             return _Max; // geometric growth would overflow

  000a0	89 75 e8	 mov	 DWORD PTR __Newcapacity$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a3	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a8	83 c4 04	 add	 esp, 4
  000ab	8b f8		 mov	 edi, eax
  000ad	eb 49		 jmp	 SHORT $LN49@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1970 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  000af	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 70   :         if (_Count > _Max_possible) {

  000b2	8b f7		 mov	 esi, edi
  000b4	3b c7		 cmp	 eax, edi
  000b6	0f 43 f0	 cmovae	 esi, eax
  000b9	81 fe aa aa aa
	0a		 cmp	 esi, 178956970		; 0aaaaaaaH
  000bf	0f 87 0b 01 00
	00		 ja	 $LN53@Emplace_re

; 72   :         }
; 73   :     }
; 74   : 
; 75   :     return _Count * _Ty_size;

  000c5	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  000c8	89 75 e8	 mov	 DWORD PTR __Newcapacity$[ebp], esi
  000cb	c1 e0 03	 shl	 eax, 3

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000ce	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000d3	72 0d		 jb	 SHORT $LN24@Emplace_re

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000d5	50		 push	 eax
  000d6	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000db	83 c4 04	 add	 esp, 4
  000de	8b f8		 mov	 edi, eax
  000e0	eb 16		 jmp	 SHORT $LN49@Emplace_re
$LN24@Emplace_re:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  000e2	85 c0		 test	 eax, eax
  000e4	74 0d		 je	 SHORT $LN25@Emplace_re

; 87   :         return ::operator new(_Bytes);

  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000ec	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  000ef	8b f8		 mov	 edi, eax
  000f1	eb 02		 jmp	 SHORT $LN50@Emplace_re
$LN25@Emplace_re:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  000f3	33 ff		 xor	 edi, edi
$LN50@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 832  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  000f5	89 75 e8	 mov	 DWORD PTR __Newcapacity$[ebp], esi
$LN49@Emplace_re:
  000f8	8b 45 e0	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
  000fb	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  000fe	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Val_0>$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 832  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  00101	89 7d e4	 mov	 DWORD PTR $T3[ebp], edi

; 833  :         pointer _Constructed_first      = _Constructed_last;
; 834  : 
; 835  :         _TRY_BEGIN

  00104	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0010b	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0010e	8d 14 c7	 lea	 edx, DWORD PTR [edi+eax*8]
  00111	8d 42 18	 lea	 eax, DWORD PTR [edx+24]
  00114	89 55 d4	 mov	 DWORD PTR _this$1$[ebp], edx
  00117	89 45 e0	 mov	 DWORD PTR $T2[ebp], eax
  0011a	89 45 d0	 mov	 DWORD PTR __Constructed_last$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0011d	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00120	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  00123	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  0012a	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], 0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00131	89 45 dc	 mov	 DWORD PTR tv366[ebp], eax
$LL46@Emplace_re:
  00134	8a 01		 mov	 al, BYTE PTR [ecx]
  00136	41		 inc	 ecx
  00137	84 c0		 test	 al, al
  00139	75 f9		 jne	 SHORT $LL46@Emplace_re
  0013b	2b 4d dc	 sub	 ecx, DWORD PTR tv366[ebp]

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0013e	51		 push	 ecx
  0013f	ff 75 0c	 push	 DWORD PTR _<_Val_0>$[ebp]
  00142	8b ca		 mov	 ecx, edx
  00144	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 839  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00149	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0014c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0014f	8b 10		 mov	 edx, DWORD PTR [eax]
  00151	39 4d 08	 cmp	 DWORD PTR __Whereptr$[ebp], ecx
  00154	75 05		 jne	 SHORT $LN4@Emplace_re

; 840  :             if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 841  :                 _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);

  00156	89 7d e0	 mov	 DWORD PTR $T2[ebp], edi

; 842  :             } else {
; 843  :                 _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);
; 844  :             }
; 845  :         } else { // provide basic guarantee

  00159	eb 17		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 846  :             _Uninitialized_move(_Myfirst, _Whereptr, _Newvec, _Al);

  0015b	50		 push	 eax
  0015c	57		 push	 edi
  0015d	ff 75 08	 push	 DWORD PTR __Whereptr$[ebp]
  00160	52		 push	 edx
  00161	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 847  :             _Constructed_first = _Newvec;
; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  00166	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00169	83 c4 10	 add	 esp, 16			; 00000010H
  0016c	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  0016f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
$LN5@Emplace_re:
  00172	50		 push	 eax
  00173	ff 75 e0	 push	 DWORD PTR $T2[ebp]
  00176	51		 push	 ecx
  00177	52		 push	 edx
  00178	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 854  :         _CATCH_END
; 855  : 
; 856  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  0017d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00180	83 c4 10	 add	 esp, 16			; 00000010H
  00183	56		 push	 esi
  00184	ff 75 d8	 push	 DWORD PTR __Newsize$1$[ebp]
  00187	57		 push	 edi
  00188	e8 00 00 00 00	 call	 ?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array

; 857  :         return _Newvec + _Whereoff;

  0018d	8b 45 d4	 mov	 eax, DWORD PTR _this$1$[ebp]

; 858  :     }

  00190	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00193	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0019a	59		 pop	 ecx
  0019b	5f		 pop	 edi
  0019c	5e		 pop	 esi
  0019d	5b		 pop	 ebx
  0019e	8b e5		 mov	 esp, ebp
  001a0	5d		 pop	 ebp
  001a1	c2 08 00	 ret	 8
__catch$??$_Emplace_reallocate@AAY0BC@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BC@$$CBD@Z$0:

; 849  :         }
; 850  :         _CATCH_ALL
; 851  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);

  001a4	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  001a7	8b 45 d0	 mov	 eax, DWORD PTR __Constructed_last$[ebp]
  001aa	56		 push	 esi
  001ab	50		 push	 eax
  001ac	50		 push	 eax
  001ad	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  001b2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 852  :         _Al.deallocate(_Newvec, _Newcapacity);

  001b5	8b ce		 mov	 ecx, esi
  001b7	ff 75 e8	 push	 DWORD PTR __Newcapacity$[ebp]
  001ba	ff 75 e4	 push	 DWORD PTR $T3[ebp]
  001bd	e8 00 00 00 00	 call	 ?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate

; 853  :         _RERAISE;

  001c2	6a 00		 push	 0
  001c4	6a 00		 push	 0
  001c6	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN52@Emplace_re:

; 825  :             _Xlength();

  001cb	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
$LN53@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 71   :             _Throw_bad_array_new_length(); // multiply overflow

  001d0	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN48@Emplace_re:
  001d5	cc		 int	 3
  001d6	cc		 int	 3
  001d7	cc		 int	 3
  001d8	cc		 int	 3
  001d9	cc		 int	 3
  001da	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@AAY0BC@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BC@$$CBD@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@AAY0BC@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BC@$$CBD@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@AAY0BC@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BC@$$CBD@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<char const (&)[18]>
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??$_Emplace_reallocate@AAY0BE@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BE@$$CBD@Z
_TEXT	SEGMENT
__Constructed_last$ = -48				; size = 4
_this$1$ = -44						; size = 4
__Newsize$1$ = -40					; size = 4
tv366 = -36						; size = 4
$T2 = -32						; size = 4
__Whereoff$1$ = -32					; size = 4
$T3 = -28						; size = 4
__Newcapacity$ = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@AAY0BE@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BE@$$CBD@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<char const (&)[20]>, COMDAT
; _this$ = ecx

; 812  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Emplace_reallocate@AAY0BE@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BE@$$CBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 813  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 814  :         _Alty& _Al        = _Getal();
; 815  :         auto& _My_data    = _Mypair._Myval2;
; 816  :         pointer& _Myfirst = _My_data._Myfirst;
; 817  :         pointer& _Mylast  = _My_data._Mylast;
; 818  : 
; 819  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 820  : 
; 821  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00030	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  00033	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00038	2b 16		 sub	 edx, DWORD PTR [esi]

; 822  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  0003a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0003d	2b 0e		 sub	 ecx, DWORD PTR [esi]
  0003f	f7 ea		 imul	 edx
  00041	c1 fa 02	 sar	 edx, 2
  00044	8b c2		 mov	 eax, edx
  00046	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00049	03 c2		 add	 eax, edx
  0004b	89 45 e0	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  0004e	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00053	f7 e9		 imul	 ecx
  00055	c1 fa 02	 sar	 edx, 2
  00058	8b c2		 mov	 eax, edx
  0005a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0005d	03 c2		 add	 eax, edx

; 823  : 
; 824  :         if (_Oldsize == max_size()) {

  0005f	3d aa aa aa 0a	 cmp	 eax, 178956970		; 0aaaaaaaH
  00064	0f 84 61 01 00
	00		 je	 $LN52@Emplace_re

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0006a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 826  :         }
; 827  : 
; 828  :         const size_type _Newsize     = _Oldsize + 1;

  0006d	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00070	2b 0e		 sub	 ecx, DWORD PTR [esi]
  00072	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00077	f7 e9		 imul	 ecx

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00079	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 826  :         }
; 827  : 
; 828  :         const size_type _Newsize     = _Oldsize + 1;

  0007e	89 7d d8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00081	c1 fa 02	 sar	 edx, 2
  00084	8b ca		 mov	 ecx, edx
  00086	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00089	03 ca		 add	 ecx, edx

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0008b	8b d1		 mov	 edx, ecx
  0008d	d1 ea		 shr	 edx, 1
  0008f	2b c2		 sub	 eax, edx
  00091	3b c8		 cmp	 ecx, eax
  00093	76 1a		 jbe	 SHORT $LN12@Emplace_re

; 1967 :             return _Max; // geometric growth would overflow

  00095	b8 f0 ff ff ff	 mov	 eax, -16		; fffffff0H
  0009a	be aa aa aa 0a	 mov	 esi, 178956970		; 0aaaaaaaH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0009f	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1967 :             return _Max; // geometric growth would overflow

  000a0	89 75 e8	 mov	 DWORD PTR __Newcapacity$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a3	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a8	83 c4 04	 add	 esp, 4
  000ab	8b f8		 mov	 edi, eax
  000ad	eb 49		 jmp	 SHORT $LN49@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1970 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  000af	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 70   :         if (_Count > _Max_possible) {

  000b2	8b f7		 mov	 esi, edi
  000b4	3b c7		 cmp	 eax, edi
  000b6	0f 43 f0	 cmovae	 esi, eax
  000b9	81 fe aa aa aa
	0a		 cmp	 esi, 178956970		; 0aaaaaaaH
  000bf	0f 87 0b 01 00
	00		 ja	 $LN53@Emplace_re

; 72   :         }
; 73   :     }
; 74   : 
; 75   :     return _Count * _Ty_size;

  000c5	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  000c8	89 75 e8	 mov	 DWORD PTR __Newcapacity$[ebp], esi
  000cb	c1 e0 03	 shl	 eax, 3

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000ce	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000d3	72 0d		 jb	 SHORT $LN24@Emplace_re

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000d5	50		 push	 eax
  000d6	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000db	83 c4 04	 add	 esp, 4
  000de	8b f8		 mov	 edi, eax
  000e0	eb 16		 jmp	 SHORT $LN49@Emplace_re
$LN24@Emplace_re:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  000e2	85 c0		 test	 eax, eax
  000e4	74 0d		 je	 SHORT $LN25@Emplace_re

; 87   :         return ::operator new(_Bytes);

  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000ec	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  000ef	8b f8		 mov	 edi, eax
  000f1	eb 02		 jmp	 SHORT $LN50@Emplace_re
$LN25@Emplace_re:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  000f3	33 ff		 xor	 edi, edi
$LN50@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 832  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  000f5	89 75 e8	 mov	 DWORD PTR __Newcapacity$[ebp], esi
$LN49@Emplace_re:
  000f8	8b 45 e0	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
  000fb	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  000fe	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Val_0>$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 832  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  00101	89 7d e4	 mov	 DWORD PTR $T3[ebp], edi

; 833  :         pointer _Constructed_first      = _Constructed_last;
; 834  : 
; 835  :         _TRY_BEGIN

  00104	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0010b	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0010e	8d 14 c7	 lea	 edx, DWORD PTR [edi+eax*8]
  00111	8d 42 18	 lea	 eax, DWORD PTR [edx+24]
  00114	89 55 d4	 mov	 DWORD PTR _this$1$[ebp], edx
  00117	89 45 e0	 mov	 DWORD PTR $T2[ebp], eax
  0011a	89 45 d0	 mov	 DWORD PTR __Constructed_last$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0011d	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00120	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  00123	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  0012a	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], 0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00131	89 45 dc	 mov	 DWORD PTR tv366[ebp], eax
$LL46@Emplace_re:
  00134	8a 01		 mov	 al, BYTE PTR [ecx]
  00136	41		 inc	 ecx
  00137	84 c0		 test	 al, al
  00139	75 f9		 jne	 SHORT $LL46@Emplace_re
  0013b	2b 4d dc	 sub	 ecx, DWORD PTR tv366[ebp]

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0013e	51		 push	 ecx
  0013f	ff 75 0c	 push	 DWORD PTR _<_Val_0>$[ebp]
  00142	8b ca		 mov	 ecx, edx
  00144	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 839  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00149	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0014c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0014f	8b 10		 mov	 edx, DWORD PTR [eax]
  00151	39 4d 08	 cmp	 DWORD PTR __Whereptr$[ebp], ecx
  00154	75 05		 jne	 SHORT $LN4@Emplace_re

; 840  :             if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 841  :                 _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);

  00156	89 7d e0	 mov	 DWORD PTR $T2[ebp], edi

; 842  :             } else {
; 843  :                 _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);
; 844  :             }
; 845  :         } else { // provide basic guarantee

  00159	eb 17		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 846  :             _Uninitialized_move(_Myfirst, _Whereptr, _Newvec, _Al);

  0015b	50		 push	 eax
  0015c	57		 push	 edi
  0015d	ff 75 08	 push	 DWORD PTR __Whereptr$[ebp]
  00160	52		 push	 edx
  00161	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 847  :             _Constructed_first = _Newvec;
; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  00166	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00169	83 c4 10	 add	 esp, 16			; 00000010H
  0016c	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  0016f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
$LN5@Emplace_re:
  00172	50		 push	 eax
  00173	ff 75 e0	 push	 DWORD PTR $T2[ebp]
  00176	51		 push	 ecx
  00177	52		 push	 edx
  00178	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 854  :         _CATCH_END
; 855  : 
; 856  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  0017d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00180	83 c4 10	 add	 esp, 16			; 00000010H
  00183	56		 push	 esi
  00184	ff 75 d8	 push	 DWORD PTR __Newsize$1$[ebp]
  00187	57		 push	 edi
  00188	e8 00 00 00 00	 call	 ?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array

; 857  :         return _Newvec + _Whereoff;

  0018d	8b 45 d4	 mov	 eax, DWORD PTR _this$1$[ebp]

; 858  :     }

  00190	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00193	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0019a	59		 pop	 ecx
  0019b	5f		 pop	 edi
  0019c	5e		 pop	 esi
  0019d	5b		 pop	 ebx
  0019e	8b e5		 mov	 esp, ebp
  001a0	5d		 pop	 ebp
  001a1	c2 08 00	 ret	 8
__catch$??$_Emplace_reallocate@AAY0BE@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BE@$$CBD@Z$0:

; 849  :         }
; 850  :         _CATCH_ALL
; 851  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);

  001a4	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  001a7	8b 45 d0	 mov	 eax, DWORD PTR __Constructed_last$[ebp]
  001aa	56		 push	 esi
  001ab	50		 push	 eax
  001ac	50		 push	 eax
  001ad	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  001b2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 852  :         _Al.deallocate(_Newvec, _Newcapacity);

  001b5	8b ce		 mov	 ecx, esi
  001b7	ff 75 e8	 push	 DWORD PTR __Newcapacity$[ebp]
  001ba	ff 75 e4	 push	 DWORD PTR $T3[ebp]
  001bd	e8 00 00 00 00	 call	 ?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate

; 853  :         _RERAISE;

  001c2	6a 00		 push	 0
  001c4	6a 00		 push	 0
  001c6	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN52@Emplace_re:

; 825  :             _Xlength();

  001cb	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
$LN53@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 71   :             _Throw_bad_array_new_length(); // multiply overflow

  001d0	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN48@Emplace_re:
  001d5	cc		 int	 3
  001d6	cc		 int	 3
  001d7	cc		 int	 3
  001d8	cc		 int	 3
  001d9	cc		 int	 3
  001da	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@AAY0BE@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BE@$$CBD@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@AAY0BE@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BE@$$CBD@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@AAY0BE@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BE@$$CBD@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<char const (&)[20]>
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 1082 : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1086 :         for (; _First != _Last; ++_First) {

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 48		 je	 SHORT $LN45@Destroy_ra
  0000f	90		 npad	 1
$LL4@Destroy_ra:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00010	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00013	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  00016	72 27		 jb	 SHORT $LN23@Destroy_ra
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00018	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0001a	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0001b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00021	72 12		 jb	 SHORT $LN33@Destroy_ra

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00023	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00026	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00029	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0002b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00031	77 28		 ja	 SHORT $LN30@Destroy_ra

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00033	8b c2		 mov	 eax, edx
$LN33@Destroy_ra:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00035	51		 push	 ecx
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003c	83 c4 08	 add	 esp, 8
$LN23@Destroy_ra:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  0003f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  00046	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0004d	c6 06 00	 mov	 BYTE PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1086 :         for (; _First != _Last; ++_First) {

  00050	83 c6 18	 add	 esi, 24			; 00000018H
  00053	3b f7		 cmp	 esi, edi
  00055	75 b9		 jne	 SHORT $LL4@Destroy_ra
$LN45@Destroy_ra:
  00057	5f		 pop	 edi

; 1087 :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 1088 :         }
; 1089 :     }
; 1090 : }

  00058	5e		 pop	 esi
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
$LN30@Destroy_ra:

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0005b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN50@Destroy_ra:
  00060	cc		 int	 3
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCRaceData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCRaceData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CRaceData *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData *>,void *> > >, COMDAT
; _this$ = ecx

; 744  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000e	75 25		 jne	 SHORT $LN3@Erase_tree
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR __Al$[ebp]
$LL2@Erase_tree:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00014	ff 76 08	 push	 DWORD PTR [esi+8]
  00017	8b cb		 mov	 ecx, ebx
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCRaceData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CRaceData *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData *>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 754  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001f	8b c6		 mov	 eax, esi

; 755  :     _Val         = static_cast<_Other&&>(_New_val);

  00021	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00023	6a 18		 push	 24			; 00000018H
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00032	74 e0		 je	 SHORT $LL2@Erase_tree
  00034	5f		 pop	 edi
$LN3@Erase_tree:
  00035	5e		 pop	 esi

; 747  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 748  :         }
; 749  :     }

  00036	5b		 pop	 ebx
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCRaceData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CRaceData *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@KAXPAVCHeaderDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@KAXPAVCHeaderDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@KAXPAVCHeaderDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN24@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN24@CDynamicPo:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN27@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN27@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN33@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN49@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN49@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2051 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN33@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN58@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN74@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN74@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2051 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN58@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 142  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN71@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN92@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@KAXPAVCNullDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@KAXPAVCNullDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@KAXPAVCNullDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN24@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN24@CDynamicPo:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN27@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN27@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN33@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN49@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN49@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2051 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN33@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN58@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN74@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN74@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2051 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN58@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 142  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN71@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN92@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN24@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN24@CDynamicPo:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN27@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN27@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN33@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN49@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN49@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2051 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN33@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN58@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN74@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN74@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2051 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN58@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 142  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN71@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN92@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN24@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN24@CDynamicPo:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN27@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN27@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN33@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN49@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN49@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2051 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN33@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN58@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN74@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN74@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2051 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN58@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 142  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN71@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN92@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN24@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN24@CDynamicPo:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN27@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN27@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN33@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN49@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN49@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2051 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN33@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN58@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN74@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN74@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2051 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN58@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 142  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN71@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN92@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@KAXPAVCAirResistanceDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@KAXPAVCAirResistanceDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@KAXPAVCAirResistanceDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN24@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN24@CDynamicPo:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN27@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN27@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN33@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN49@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN49@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2051 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN33@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN58@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN74@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN74@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2051 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN58@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 142  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN71@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN92@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@KAXPAVCGravityDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@KAXPAVCGravityDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@KAXPAVCGravityDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN24@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN24@CDynamicPo:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN27@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN27@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN33@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN49@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN49@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2051 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN33@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN58@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN74@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN74@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2051 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN58@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 142  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN71@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN92@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@KAXPAVCRotationDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@KAXPAVCRotationDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@KAXPAVCRotationDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN24@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN24@CDynamicPo:

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN27@CDynamicPo

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN27@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN33@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN49@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN49@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2051 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN33@CDynamicPo:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN58@CDynamicPo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN74@CDynamicPo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN71@CDynamicPo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN74@CDynamicPo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2051 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN58@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 142  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN71@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN92@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
;	COMDAT ??__Fs_stFileName@?1??GetFullPathFileName@CRaceManager@@QAEPBDPBD@Z@YAXXZ
text$yd	SEGMENT
??__Fs_stFileName@?1??GetFullPathFileName@CRaceManager@@QAEPBDPBD@Z@YAXXZ PROC ; `CRaceManager::GetFullPathFileName'::`2'::`dynamic atexit destructor for 's_stFileName'', COMDAT

; 2244 :         return _BUF_SIZE <= _Myres;

  00000	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?s_stFileName@?1??GetFullPathFileName@CRaceManager@@QAEPBDPBD@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  00009	72 2f		 jb	 SHORT $LN15@dynamic
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?s_stFileName@?1??GetFullPathFileName@CRaceManager@@QAEPBDPBD@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00011	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00012	8b c2		 mov	 eax, edx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00014	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001a	72 14		 jb	 SHORT $LN25@dynamic

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001f	83 c1 23	 add	 ecx, 35			; 00000023H
  00022	2b c2		 sub	 eax, edx

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00024	83 c0 fc	 add	 eax, -4			; fffffffcH
  00027	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002a	0f 87 00 00 00
	00		 ja	 __invalid_parameter_noinfo_noreturn
$LN25@dynamic:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00030	51		 push	 ecx
  00031	52		 push	 edx
  00032	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00037	83 c4 08	 add	 esp, 8
$LN15@dynamic:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  0003a	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?s_stFileName@?1??GetFullPathFileName@CRaceManager@@QAEPBDPBD@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+16, 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  00044	c7 05 14 00 00
	00 0f 00 00 00	 mov	 DWORD PTR ?s_stFileName@?1??GetFullPathFileName@CRaceManager@@QAEPBDPBD@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 15 ; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0004e	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?s_stFileName@?1??GetFullPathFileName@CRaceManager@@QAEPBDPBD@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A, 0
  00055	c3		 ret	 0
??__Fs_stFileName@?1??GetFullPathFileName@CRaceManager@@QAEPBDPBD@Z@YAXXZ ENDP ; `CRaceManager::GetFullPathFileName'::`2'::`dynamic atexit destructor for 's_stFileName''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??$emplace@AAKAAPAVCRaceData@@@?$_Tree@V?$_Tmap_traits@KPAVCRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCRaceData@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCRaceData@@@std@@@std@@@std@@@std@@_N@1@AAKAAPAVCRaceData@@@Z
_TEXT	SEGMENT
__Loc$2 = -36						; size = 12
$T3 = -24						; size = 12
$T4 = -20						; size = 8
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_<_Vals_0>$ = 12					; size = 4
_<_Vals_1>$ = 16					; size = 4
??$emplace@AAKAAPAVCRaceData@@@?$_Tree@V?$_Tmap_traits@KPAVCRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCRaceData@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCRaceData@@@std@@@std@@@std@@@std@@_N@1@AAKAAPAVCRaceData@@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CRaceData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData *> >,0> >::emplace<unsigned long &,CRaceData * &>, COMDAT
; _this$ = ecx

; 1032 :     pair<iterator, bool> emplace(_Valtys&&... _Vals) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$emplace@AAKAAPAVCRaceData@@@?$_Tree@V?$_Tmap_traits@KPAVCRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCRaceData@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCRaceData@@@std@@@std@@@std@@@std@@_N@1@AAKAAPAVCRaceData@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx

; 1002 :             _Loc                = _Find_lower_bound(_Keyval);

  0002a	8b 5d 0c	 mov	 ebx, DWORD PTR _<_Vals_0>$[ebp]
  0002d	8d 45 e8	 lea	 eax, DWORD PTR $T3[ebp]
  00030	53		 push	 ebx
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCRaceData@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CRaceData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData *> >,0> >::_Find_lower_bound<unsigned long>
  00037	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0003a	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0003e	66 0f d6 45 dc	 movq	 QWORD PTR __Loc$2[ebp], xmm0

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00043	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00047	75 0b		 jne	 SHORT $LN4@emplace
  00049	8b 03		 mov	 eax, DWORD PTR [ebx]
  0004b	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  0004e	72 04		 jb	 SHORT $LN4@emplace
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00050	32 d2		 xor	 dl, dl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1004 :                 return {_Loc._Bound, false};

  00052	eb 53		 jmp	 SHORT $LN83@emplace
$LN4@emplace:

; 1631 :         if (max_size() == _Get_scary()->_Mysize) {

  00054	81 7f 04 aa aa
	aa 0a		 cmp	 DWORD PTR [edi+4], 178956970 ; 0aaaaaaaH
  0005b	74 66		 je	 SHORT $LN100@emplace

; 1008 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  0005d	8b 37		 mov	 esi, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1144 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  0005f	89 7d ec	 mov	 DWORD PTR $T4[ebp], edi

; 87   :         return ::operator new(_Bytes);

  00062	6a 18		 push	 24			; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00064	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1151 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0006b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+4], 0

; 87   :         return ::operator new(_Bytes);

  00072	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00077	8b 0b		 mov	 ecx, DWORD PTR [ebx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  00079	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  0007c	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  0007f	8b 4d 10	 mov	 ecx, DWORD PTR _<_Vals_1>$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00082	50		 push	 eax
  00083	ff 75 e0	 push	 DWORD PTR __Loc$2[ebp+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00086	8b 09		 mov	 ecx, DWORD PTR [ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00088	ff 75 dc	 push	 DWORD PTR __Loc$2[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  0008b	89 48 14	 mov	 DWORD PTR [eax+20], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0008e	8b cf		 mov	 ecx, edi

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  00090	89 30		 mov	 DWORD PTR [eax], esi

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  00092	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  00095	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 811  :         this->_Ptr->_Color = _Red;

  00098	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0009e	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCRaceData@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CRaceData *> > >::_Insert_node
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  000a3	8b c8		 mov	 ecx, eax
  000a5	b2 01		 mov	 dl, 1
$LN83@emplace:
  000a7	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000aa	89 08		 mov	 DWORD PTR [eax], ecx
  000ac	88 50 04	 mov	 BYTE PTR [eax+4], dl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1035 :     }

  000af	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b9	59		 pop	 ecx
  000ba	5f		 pop	 edi
  000bb	5e		 pop	 esi
  000bc	5b		 pop	 ebx
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c2 0c 00	 ret	 12			; 0000000cH
$LN100@emplace:

; 1632 :             _Throw_tree_length_error();

  000c3	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN98@emplace:
  000c8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$emplace@AAKAAPAVCRaceData@@@?$_Tree@V?$_Tmap_traits@KPAVCRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCRaceData@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCRaceData@@@std@@@std@@@std@@@std@@_N@1@AAKAAPAVCRaceData@@@Z$2:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR $T4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData *>,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$emplace@AAKAAPAVCRaceData@@@?$_Tree@V?$_Tmap_traits@KPAVCRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCRaceData@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCRaceData@@@std@@@std@@@std@@@std@@_N@1@AAKAAPAVCRaceData@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$emplace@AAKAAPAVCRaceData@@@?$_Tree@V?$_Tmap_traits@KPAVCRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCRaceData@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCRaceData@@@std@@@std@@@std@@@std@@_N@1@AAKAAPAVCRaceData@@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$emplace@AAKAAPAVCRaceData@@@?$_Tree@V?$_Tmap_traits@KPAVCRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCRaceData@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCRaceData@@@std@@@std@@@std@@@std@@_N@1@AAKAAPAVCRaceData@@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CRaceData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData *> >,0> >::emplace<unsigned long &,CRaceData * &>
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
;	COMDAT ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z PROC ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 5050 : _NODISCARD bool operator!=(const basic_string<_Elem, _Traits, _Alloc>& _Left, _In_z_ const _Elem* const _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Right$[ebp]

; 5050 : _NODISCARD bool operator!=(const basic_string<_Elem, _Traits, _Alloc>& _Left, _In_z_ const _Elem* const _Right) {

  00007	57		 push	 edi

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00008	8b fe		 mov	 edi, esi
  0000a	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
  0000d	0f 1f 00	 npad	 3
$LL20@operator:
  00010	8a 07		 mov	 al, BYTE PTR [edi]
  00012	47		 inc	 edi
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL20@operator

; 2235 :         const value_type* _Result = _Bx._Buf;

  00017	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0001a	2b f9		 sub	 edi, ecx

; 2235 :         const value_type* _Result = _Bx._Buf;

  0001c	8b ca		 mov	 ecx, edx

; 2244 :         return _BUF_SIZE <= _Myres;

  0001e	83 7a 14 10	 cmp	 DWORD PTR [edx+20], 16	; 00000010H

; 2236 :         if (_Large_string_engaged()) {

  00022	72 02		 jb	 SHORT $LN10@operator

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  00024	8b 0a		 mov	 ecx, DWORD PTR [edx]
$LN10@operator:

; 4590 :         return _Traits_equal<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize, _Ptr, _Traits::length(_Ptr));

  00026	8b 52 10	 mov	 edx, DWORD PTR [edx+16]

; 548  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  00029	3b d7		 cmp	 edx, edi
  0002b	75 5b		 jne	 SHORT $LN16@operator

; 383  :         return _CSTD memcmp(_First1, _First2, _Count);

  0002d	83 ea 04	 sub	 edx, 4
  00030	72 11		 jb	 SHORT $LN23@operator
$LL24@operator:
  00032	8b 01		 mov	 eax, DWORD PTR [ecx]
  00034	3b 06		 cmp	 eax, DWORD PTR [esi]
  00036	75 10		 jne	 SHORT $LN22@operator
  00038	83 c1 04	 add	 ecx, 4
  0003b	83 c6 04	 add	 esi, 4
  0003e	83 ea 04	 sub	 edx, 4
  00041	73 ef		 jae	 SHORT $LL24@operator
$LN23@operator:
  00043	83 fa fc	 cmp	 edx, -4			; fffffffcH
  00046	74 34		 je	 SHORT $LN21@operator
$LN22@operator:
  00048	8a 01		 mov	 al, BYTE PTR [ecx]
  0004a	3a 06		 cmp	 al, BYTE PTR [esi]
  0004c	75 27		 jne	 SHORT $LN25@operator
  0004e	83 fa fd	 cmp	 edx, -3			; fffffffdH
  00051	74 29		 je	 SHORT $LN21@operator
  00053	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  00056	3a 46 01	 cmp	 al, BYTE PTR [esi+1]
  00059	75 1a		 jne	 SHORT $LN25@operator
  0005b	83 fa fe	 cmp	 edx, -2			; fffffffeH
  0005e	74 1c		 je	 SHORT $LN21@operator
  00060	8a 41 02	 mov	 al, BYTE PTR [ecx+2]
  00063	3a 46 02	 cmp	 al, BYTE PTR [esi+2]
  00066	75 0d		 jne	 SHORT $LN25@operator
  00068	83 fa ff	 cmp	 edx, -1
  0006b	74 0f		 je	 SHORT $LN21@operator
  0006d	8a 41 03	 mov	 al, BYTE PTR [ecx+3]
  00070	3a 46 03	 cmp	 al, BYTE PTR [esi+3]
  00073	74 07		 je	 SHORT $LN21@operator
$LN25@operator:
  00075	1b c0		 sbb	 eax, eax
  00077	83 c8 01	 or	 eax, 1
  0007a	eb 02		 jmp	 SHORT $LN26@operator
$LN21@operator:
  0007c	33 c0		 xor	 eax, eax
$LN26@operator:

; 548  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  0007e	85 c0		 test	 eax, eax
  00080	75 06		 jne	 SHORT $LN16@operator
  00082	5f		 pop	 edi
  00083	32 c0		 xor	 al, al

; 5051 :     return !(_Left == _Right);
; 5052 : }

  00085	5e		 pop	 esi
  00086	5d		 pop	 ebp
  00087	c3		 ret	 0
$LN16@operator:
  00088	5f		 pop	 edi

; 548  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  00089	b0 01		 mov	 al, 1

; 5051 :     return !(_Left == _Right);
; 5052 : }

  0008b	5e		 pop	 esi
  0008c	5d		 pop	 ebp
  0008d	c3		 ret	 0
??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ENDP ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
;	COMDAT ??__FstMotionFileName@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@YAXXZ
text$yd	SEGMENT
??__FstMotionFileName@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@YAXXZ PROC ; `CRaceManager::__LoadRaceMotionList'::`2'::`dynamic atexit destructor for 'stMotionFileName'', COMDAT

; 2244 :         return _BUF_SIZE <= _Myres;

  00000	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?stMotionFileName@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  00009	72 2f		 jb	 SHORT $LN15@dynamic
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?stMotionFileName@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00011	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00012	8b c2		 mov	 eax, edx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00014	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001a	72 14		 jb	 SHORT $LN25@dynamic

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001f	83 c1 23	 add	 ecx, 35			; 00000023H
  00022	2b c2		 sub	 eax, edx

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00024	83 c0 fc	 add	 eax, -4			; fffffffcH
  00027	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002a	0f 87 00 00 00
	00		 ja	 __invalid_parameter_noinfo_noreturn
$LN25@dynamic:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00030	51		 push	 ecx
  00031	52		 push	 edx
  00032	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00037	83 c4 08	 add	 esp, 8
$LN15@dynamic:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  0003a	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?stMotionFileName@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+16, 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  00044	c7 05 14 00 00
	00 0f 00 00 00	 mov	 DWORD PTR ?stMotionFileName@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 15 ; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0004e	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?stMotionFileName@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A, 0
  00055	c3		 ret	 0
??__FstMotionFileName@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@YAXXZ ENDP ; `CRaceManager::__LoadRaceMotionList'::`2'::`dynamic atexit destructor for 'stMotionFileName''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
;	COMDAT ??__FstSpawnMotionFileName@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@YAXXZ
text$yd	SEGMENT
??__FstSpawnMotionFileName@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@YAXXZ PROC ; `CRaceManager::__LoadRaceMotionList'::`2'::`dynamic atexit destructor for 'stSpawnMotionFileName'', COMDAT

; 2244 :         return _BUF_SIZE <= _Myres;

  00000	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?stSpawnMotionFileName@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  00009	72 2f		 jb	 SHORT $LN15@dynamic
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?stSpawnMotionFileName@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00011	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00012	8b c2		 mov	 eax, edx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00014	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001a	72 14		 jb	 SHORT $LN25@dynamic

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001f	83 c1 23	 add	 ecx, 35			; 00000023H
  00022	2b c2		 sub	 eax, edx

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00024	83 c0 fc	 add	 eax, -4			; fffffffcH
  00027	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002a	0f 87 00 00 00
	00		 ja	 __invalid_parameter_noinfo_noreturn
$LN25@dynamic:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00030	51		 push	 ecx
  00031	52		 push	 edx
  00032	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00037	83 c4 08	 add	 esp, 8
$LN15@dynamic:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  0003a	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?stSpawnMotionFileName@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+16, 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  00044	c7 05 14 00 00
	00 0f 00 00 00	 mov	 DWORD PTR ?stSpawnMotionFileName@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 15 ; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0004e	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?stSpawnMotionFileName@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A, 0
  00055	c3		 ret	 0
??__FstSpawnMotionFileName@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@YAXXZ ENDP ; `CRaceManager::__LoadRaceMotionList'::`2'::`dynamic atexit destructor for 'stSpawnMotionFileName''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??$emplace@AAY06$$CBDH@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY06$$CBD$$QAH@Z
_TEXT	SEGMENT
$T2 = -52						; size = 12
__Loc$3 = -40						; size = 12
__Newnode$4 = -28					; size = 8
__Myhead$1$ = -20					; size = 4
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
tv941 = 12						; size = 4
_<_Vals_0>$ = 12					; size = 4
__Result$$sroa$588$1$ = 15				; size = 1
__Result$$sroa$589$1$ = 16				; size = 4
_<_Vals_1>$ = 16					; size = 4
??$emplace@AAY06$$CBDH@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY06$$CBD$$QAH@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[7],int>, COMDAT
; _this$ = ecx

; 1032 :     pair<iterator, bool> emplace(_Valtys&&... _Vals) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$emplace@AAY06$$CBDH@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY06$$CBD$$QAH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b c1		 mov	 eax, ecx
  00029	89 45 f0	 mov	 DWORD PTR _this$1$[ebp], eax

; 1011 :             _Tree_temp_node<_Alnode> _Newnode(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...);

  0002c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002e	89 4d ec	 mov	 DWORD PTR __Myhead$1$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1144 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00031	89 45 e4	 mov	 DWORD PTR __Newnode$4[ebp], eax

; 87   :         return ::operator new(_Bytes);

  00034	6a 2c		 push	 44			; 0000002cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1151 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0003d	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR __Newnode$4[ebp+4], 0

; 87   :         return ::operator new(_Bytes);

  00044	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 245  :         return _Traits::_Allocate(_Bytes);

  00049	8b f8		 mov	 edi, eax

; 87   :         return ::operator new(_Bytes);

  0004b	83 c4 04	 add	 esp, 4

; 1152 :         _Ptr = _Al.allocate(1);

  0004e	89 7d e8	 mov	 DWORD PTR __Newnode$4[ebp+4], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00051	8b 55 0c	 mov	 edx, DWORD PTR _<_Vals_0>$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00054	8d 77 10	 lea	 esi, DWORD PTR [edi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00057	8b ca		 mov	 ecx, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 806  :         : _Tree_temp_node_alloc<_Alnode>(_Al_) {

  00059	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00060	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00063	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  00066	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0006d	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  00070	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00077	89 45 0c	 mov	 DWORD PTR tv941[ebp], eax
  0007a	66 0f 1f 44 00
	00		 npad	 6
$LL214@emplace:
  00080	8a 01		 mov	 al, BYTE PTR [ecx]
  00082	41		 inc	 ecx
  00083	84 c0		 test	 al, al
  00085	75 f9		 jne	 SHORT $LL214@emplace
  00087	2b 4d 0c	 sub	 ecx, DWORD PTR tv941[ebp]

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0008a	51		 push	 ecx
  0008b	52		 push	 edx
  0008c	8b ce		 mov	 ecx, esi
  0008e	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00093	8b 45 10	 mov	 eax, DWORD PTR _<_Vals_1>$[ebp]
  00096	8b 00		 mov	 eax, DWORD PTR [eax]
  00098	89 46 18	 mov	 DWORD PTR [esi+24], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  0009b	8b 45 ec	 mov	 eax, DWORD PTR __Myhead$1$[ebp]
  0009e	89 07		 mov	 DWORD PTR [edi], eax

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  000a0	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  000a3	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 811  :         this->_Ptr->_Color = _Red;

  000a6	66 c7 47 0c 00
	00		 mov	 WORD PTR [edi+12], 0

; 1016 :                 _Loc = _Find_lower_bound(_Keyval);

  000ac	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000af	8d 45 cc	 lea	 eax, DWORD PTR $T2[ebp]
  000b2	56		 push	 esi
  000b3	50		 push	 eax
  000b4	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  000bb	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  000c0	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  000c4	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000c7	66 0f d6 45 d8	 movq	 QWORD PTR __Loc$3[ebp], xmm0
  000cc	89 45 10	 mov	 DWORD PTR __Result$$sroa$589$1$[ebp], eax

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000cf	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000d3	75 64		 jne	 SHORT $LN4@emplace
  000d5	83 c0 10	 add	 eax, 16			; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  000d8	50		 push	 eax
  000d9	56		 push	 esi
  000da	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  000df	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000e2	84 c0		 test	 al, al
  000e4	75 53		 jne	 SHORT $LN4@emplace
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  000e6	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  000e9	88 45 0f	 mov	 BYTE PTR __Result$$sroa$588$1$[ebp], al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  000ec	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  000ef	72 27		 jb	 SHORT $LN82@emplace
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000f1	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  000f3	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000f4	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000fa	72 12		 jb	 SHORT $LN92@emplace

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000fc	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000ff	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00102	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00104	83 c0 fc	 add	 eax, -4			; fffffffcH
  00107	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0010a	77 6b		 ja	 SHORT $LN89@emplace

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0010c	8b c2		 mov	 eax, edx
$LN92@emplace:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0010e	51		 push	 ecx
  0010f	50		 push	 eax
  00110	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00115	83 c4 08	 add	 esp, 8
$LN82@emplace:
  00118	6a 2c		 push	 44			; 0000002cH
  0011a	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  0011b	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  00122	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00129	c6 06 00	 mov	 BYTE PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  0012c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1018 :                     return {_Loc._Bound, false};

  00131	8b 4d 10	 mov	 ecx, DWORD PTR __Result$$sroa$589$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00134	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1018 :                     return {_Loc._Bound, false};

  00137	eb 20		 jmp	 SHORT $LN202@emplace
$LN4@emplace:

; 1631 :         if (max_size() == _Get_scary()->_Mysize) {

  00139	8b 45 f0	 mov	 eax, DWORD PTR _this$1$[ebp]
  0013c	81 78 04 5d 74
	d1 05		 cmp	 DWORD PTR [eax+4], 97612893 ; 05d1745dH
  00143	74 37		 je	 SHORT $LN218@emplace

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00145	57		 push	 edi
  00146	ff 75 dc	 push	 DWORD PTR __Loc$3[ebp+4]
  00149	8b c8		 mov	 ecx, eax
  0014b	ff 75 d8	 push	 DWORD PTR __Loc$3[ebp]
  0014e	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> > >::_Insert_node
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00153	8b c8		 mov	 ecx, eax
  00155	c6 45 0f 01	 mov	 BYTE PTR __Result$$sroa$588$1$[ebp], 1
$LN202@emplace:
  00159	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0015c	89 08		 mov	 DWORD PTR [eax], ecx
  0015e	8a 4d 0f	 mov	 cl, BYTE PTR __Result$$sroa$588$1$[ebp]
  00161	88 48 04	 mov	 BYTE PTR [eax+4], cl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1035 :     }

  00164	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00167	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0016e	59		 pop	 ecx
  0016f	5f		 pop	 edi
  00170	5e		 pop	 esi
  00171	8b e5		 mov	 esp, ebp
  00173	5d		 pop	 ebp
  00174	c2 0c 00	 ret	 12			; 0000000cH
$LN89@emplace:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00177	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN218@emplace:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1632 :             _Throw_tree_length_error();

  0017c	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN216@emplace:
  00181	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$emplace@AAY06$$CBDH@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY06$$CBD$$QAH@Z$2:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Newnode$4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >
__unwindfunclet$??$emplace@AAY06$$CBDH@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY06$$CBD$$QAH@Z$1:
  00008	8d 4d e4	 lea	 ecx, DWORD PTR __Newnode$4[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$emplace@AAY06$$CBDH@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY06$$CBD$$QAH@Z$0:
  00010	8d 4d e4	 lea	 ecx, DWORD PTR __Newnode$4[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
__ehhandler$??$emplace@AAY06$$CBDH@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY06$$CBD$$QAH@Z:
  0001d	90		 npad	 1
  0001e	90		 npad	 1
  0001f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00023	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00026	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$emplace@AAY06$$CBDH@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY06$$CBD$$QAH@Z
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$emplace@AAY06$$CBDH@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY06$$CBD$$QAH@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[7],int>
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??$emplace@AAY08$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY08$$CBD$$QAW4EName@CRaceMotionData@@@Z
_TEXT	SEGMENT
$T2 = -52						; size = 12
__Loc$3 = -40						; size = 12
__Newnode$4 = -28					; size = 8
__Myhead$1$ = -20					; size = 4
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
tv941 = 12						; size = 4
_<_Vals_0>$ = 12					; size = 4
__Result$$sroa$588$1$ = 15				; size = 1
__Result$$sroa$589$1$ = 16				; size = 4
_<_Vals_1>$ = 16					; size = 4
??$emplace@AAY08$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY08$$CBD$$QAW4EName@CRaceMotionData@@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[9],enum CRaceMotionData::EName>, COMDAT
; _this$ = ecx

; 1032 :     pair<iterator, bool> emplace(_Valtys&&... _Vals) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$emplace@AAY08$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY08$$CBD$$QAW4EName@CRaceMotionData@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b c1		 mov	 eax, ecx
  00029	89 45 f0	 mov	 DWORD PTR _this$1$[ebp], eax

; 1011 :             _Tree_temp_node<_Alnode> _Newnode(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...);

  0002c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002e	89 4d ec	 mov	 DWORD PTR __Myhead$1$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1144 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00031	89 45 e4	 mov	 DWORD PTR __Newnode$4[ebp], eax

; 87   :         return ::operator new(_Bytes);

  00034	6a 2c		 push	 44			; 0000002cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1151 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0003d	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR __Newnode$4[ebp+4], 0

; 87   :         return ::operator new(_Bytes);

  00044	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 245  :         return _Traits::_Allocate(_Bytes);

  00049	8b f8		 mov	 edi, eax

; 87   :         return ::operator new(_Bytes);

  0004b	83 c4 04	 add	 esp, 4

; 1152 :         _Ptr = _Al.allocate(1);

  0004e	89 7d e8	 mov	 DWORD PTR __Newnode$4[ebp+4], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00051	8b 55 0c	 mov	 edx, DWORD PTR _<_Vals_0>$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00054	8d 77 10	 lea	 esi, DWORD PTR [edi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00057	8b ca		 mov	 ecx, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 806  :         : _Tree_temp_node_alloc<_Alnode>(_Al_) {

  00059	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00060	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00063	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  00066	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0006d	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  00070	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00077	89 45 0c	 mov	 DWORD PTR tv941[ebp], eax
  0007a	66 0f 1f 44 00
	00		 npad	 6
$LL214@emplace:
  00080	8a 01		 mov	 al, BYTE PTR [ecx]
  00082	41		 inc	 ecx
  00083	84 c0		 test	 al, al
  00085	75 f9		 jne	 SHORT $LL214@emplace
  00087	2b 4d 0c	 sub	 ecx, DWORD PTR tv941[ebp]

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0008a	51		 push	 ecx
  0008b	52		 push	 edx
  0008c	8b ce		 mov	 ecx, esi
  0008e	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00093	8b 45 10	 mov	 eax, DWORD PTR _<_Vals_1>$[ebp]
  00096	8b 00		 mov	 eax, DWORD PTR [eax]
  00098	89 46 18	 mov	 DWORD PTR [esi+24], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  0009b	8b 45 ec	 mov	 eax, DWORD PTR __Myhead$1$[ebp]
  0009e	89 07		 mov	 DWORD PTR [edi], eax

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  000a0	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  000a3	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 811  :         this->_Ptr->_Color = _Red;

  000a6	66 c7 47 0c 00
	00		 mov	 WORD PTR [edi+12], 0

; 1016 :                 _Loc = _Find_lower_bound(_Keyval);

  000ac	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000af	8d 45 cc	 lea	 eax, DWORD PTR $T2[ebp]
  000b2	56		 push	 esi
  000b3	50		 push	 eax
  000b4	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  000bb	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  000c0	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  000c4	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000c7	66 0f d6 45 d8	 movq	 QWORD PTR __Loc$3[ebp], xmm0
  000cc	89 45 10	 mov	 DWORD PTR __Result$$sroa$589$1$[ebp], eax

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000cf	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000d3	75 64		 jne	 SHORT $LN4@emplace
  000d5	83 c0 10	 add	 eax, 16			; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  000d8	50		 push	 eax
  000d9	56		 push	 esi
  000da	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  000df	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000e2	84 c0		 test	 al, al
  000e4	75 53		 jne	 SHORT $LN4@emplace
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  000e6	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  000e9	88 45 0f	 mov	 BYTE PTR __Result$$sroa$588$1$[ebp], al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  000ec	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  000ef	72 27		 jb	 SHORT $LN82@emplace
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000f1	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  000f3	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000f4	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000fa	72 12		 jb	 SHORT $LN92@emplace

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000fc	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000ff	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00102	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00104	83 c0 fc	 add	 eax, -4			; fffffffcH
  00107	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0010a	77 6b		 ja	 SHORT $LN89@emplace

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0010c	8b c2		 mov	 eax, edx
$LN92@emplace:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0010e	51		 push	 ecx
  0010f	50		 push	 eax
  00110	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00115	83 c4 08	 add	 esp, 8
$LN82@emplace:
  00118	6a 2c		 push	 44			; 0000002cH
  0011a	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  0011b	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  00122	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00129	c6 06 00	 mov	 BYTE PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  0012c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1018 :                     return {_Loc._Bound, false};

  00131	8b 4d 10	 mov	 ecx, DWORD PTR __Result$$sroa$589$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00134	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1018 :                     return {_Loc._Bound, false};

  00137	eb 20		 jmp	 SHORT $LN202@emplace
$LN4@emplace:

; 1631 :         if (max_size() == _Get_scary()->_Mysize) {

  00139	8b 45 f0	 mov	 eax, DWORD PTR _this$1$[ebp]
  0013c	81 78 04 5d 74
	d1 05		 cmp	 DWORD PTR [eax+4], 97612893 ; 05d1745dH
  00143	74 37		 je	 SHORT $LN218@emplace

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00145	57		 push	 edi
  00146	ff 75 dc	 push	 DWORD PTR __Loc$3[ebp+4]
  00149	8b c8		 mov	 ecx, eax
  0014b	ff 75 d8	 push	 DWORD PTR __Loc$3[ebp]
  0014e	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> > >::_Insert_node
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00153	8b c8		 mov	 ecx, eax
  00155	c6 45 0f 01	 mov	 BYTE PTR __Result$$sroa$588$1$[ebp], 1
$LN202@emplace:
  00159	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0015c	89 08		 mov	 DWORD PTR [eax], ecx
  0015e	8a 4d 0f	 mov	 cl, BYTE PTR __Result$$sroa$588$1$[ebp]
  00161	88 48 04	 mov	 BYTE PTR [eax+4], cl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1035 :     }

  00164	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00167	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0016e	59		 pop	 ecx
  0016f	5f		 pop	 edi
  00170	5e		 pop	 esi
  00171	8b e5		 mov	 esp, ebp
  00173	5d		 pop	 ebp
  00174	c2 0c 00	 ret	 12			; 0000000cH
$LN89@emplace:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00177	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN218@emplace:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1632 :             _Throw_tree_length_error();

  0017c	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN216@emplace:
  00181	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$emplace@AAY08$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY08$$CBD$$QAW4EName@CRaceMotionData@@@Z$2:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Newnode$4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >
__unwindfunclet$??$emplace@AAY08$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY08$$CBD$$QAW4EName@CRaceMotionData@@@Z$1:
  00008	8d 4d e4	 lea	 ecx, DWORD PTR __Newnode$4[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$emplace@AAY08$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY08$$CBD$$QAW4EName@CRaceMotionData@@@Z$0:
  00010	8d 4d e4	 lea	 ecx, DWORD PTR __Newnode$4[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
__ehhandler$??$emplace@AAY08$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY08$$CBD$$QAW4EName@CRaceMotionData@@@Z:
  0001d	90		 npad	 1
  0001e	90		 npad	 1
  0001f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00023	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00026	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$emplace@AAY08$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY08$$CBD$$QAW4EName@CRaceMotionData@@@Z
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$emplace@AAY08$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY08$$CBD$$QAW4EName@CRaceMotionData@@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[9],enum CRaceMotionData::EName>
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??$emplace@AAY0BA@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0BA@$$CBD$$QAW4EName@CRaceMotionData@@@Z
_TEXT	SEGMENT
$T2 = -52						; size = 12
__Loc$3 = -40						; size = 12
__Newnode$4 = -28					; size = 8
__Myhead$1$ = -20					; size = 4
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
tv941 = 12						; size = 4
_<_Vals_0>$ = 12					; size = 4
__Result$$sroa$588$1$ = 15				; size = 1
__Result$$sroa$589$1$ = 16				; size = 4
_<_Vals_1>$ = 16					; size = 4
??$emplace@AAY0BA@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0BA@$$CBD$$QAW4EName@CRaceMotionData@@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[16],enum CRaceMotionData::EName>, COMDAT
; _this$ = ecx

; 1032 :     pair<iterator, bool> emplace(_Valtys&&... _Vals) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$emplace@AAY0BA@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0BA@$$CBD$$QAW4EName@CRaceMotionData@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b c1		 mov	 eax, ecx
  00029	89 45 f0	 mov	 DWORD PTR _this$1$[ebp], eax

; 1011 :             _Tree_temp_node<_Alnode> _Newnode(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...);

  0002c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002e	89 4d ec	 mov	 DWORD PTR __Myhead$1$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1144 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00031	89 45 e4	 mov	 DWORD PTR __Newnode$4[ebp], eax

; 87   :         return ::operator new(_Bytes);

  00034	6a 2c		 push	 44			; 0000002cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1151 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0003d	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR __Newnode$4[ebp+4], 0

; 87   :         return ::operator new(_Bytes);

  00044	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 245  :         return _Traits::_Allocate(_Bytes);

  00049	8b f8		 mov	 edi, eax

; 87   :         return ::operator new(_Bytes);

  0004b	83 c4 04	 add	 esp, 4

; 1152 :         _Ptr = _Al.allocate(1);

  0004e	89 7d e8	 mov	 DWORD PTR __Newnode$4[ebp+4], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00051	8b 55 0c	 mov	 edx, DWORD PTR _<_Vals_0>$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00054	8d 77 10	 lea	 esi, DWORD PTR [edi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00057	8b ca		 mov	 ecx, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 806  :         : _Tree_temp_node_alloc<_Alnode>(_Al_) {

  00059	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00060	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00063	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  00066	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0006d	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  00070	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00077	89 45 0c	 mov	 DWORD PTR tv941[ebp], eax
  0007a	66 0f 1f 44 00
	00		 npad	 6
$LL214@emplace:
  00080	8a 01		 mov	 al, BYTE PTR [ecx]
  00082	41		 inc	 ecx
  00083	84 c0		 test	 al, al
  00085	75 f9		 jne	 SHORT $LL214@emplace
  00087	2b 4d 0c	 sub	 ecx, DWORD PTR tv941[ebp]

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0008a	51		 push	 ecx
  0008b	52		 push	 edx
  0008c	8b ce		 mov	 ecx, esi
  0008e	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00093	8b 45 10	 mov	 eax, DWORD PTR _<_Vals_1>$[ebp]
  00096	8b 00		 mov	 eax, DWORD PTR [eax]
  00098	89 46 18	 mov	 DWORD PTR [esi+24], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  0009b	8b 45 ec	 mov	 eax, DWORD PTR __Myhead$1$[ebp]
  0009e	89 07		 mov	 DWORD PTR [edi], eax

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  000a0	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  000a3	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 811  :         this->_Ptr->_Color = _Red;

  000a6	66 c7 47 0c 00
	00		 mov	 WORD PTR [edi+12], 0

; 1016 :                 _Loc = _Find_lower_bound(_Keyval);

  000ac	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000af	8d 45 cc	 lea	 eax, DWORD PTR $T2[ebp]
  000b2	56		 push	 esi
  000b3	50		 push	 eax
  000b4	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  000bb	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  000c0	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  000c4	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000c7	66 0f d6 45 d8	 movq	 QWORD PTR __Loc$3[ebp], xmm0
  000cc	89 45 10	 mov	 DWORD PTR __Result$$sroa$589$1$[ebp], eax

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000cf	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000d3	75 64		 jne	 SHORT $LN4@emplace
  000d5	83 c0 10	 add	 eax, 16			; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  000d8	50		 push	 eax
  000d9	56		 push	 esi
  000da	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  000df	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000e2	84 c0		 test	 al, al
  000e4	75 53		 jne	 SHORT $LN4@emplace
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  000e6	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  000e9	88 45 0f	 mov	 BYTE PTR __Result$$sroa$588$1$[ebp], al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  000ec	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  000ef	72 27		 jb	 SHORT $LN82@emplace
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000f1	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  000f3	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000f4	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000fa	72 12		 jb	 SHORT $LN92@emplace

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000fc	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000ff	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00102	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00104	83 c0 fc	 add	 eax, -4			; fffffffcH
  00107	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0010a	77 6b		 ja	 SHORT $LN89@emplace

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0010c	8b c2		 mov	 eax, edx
$LN92@emplace:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0010e	51		 push	 ecx
  0010f	50		 push	 eax
  00110	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00115	83 c4 08	 add	 esp, 8
$LN82@emplace:
  00118	6a 2c		 push	 44			; 0000002cH
  0011a	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  0011b	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  00122	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00129	c6 06 00	 mov	 BYTE PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  0012c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1018 :                     return {_Loc._Bound, false};

  00131	8b 4d 10	 mov	 ecx, DWORD PTR __Result$$sroa$589$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00134	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1018 :                     return {_Loc._Bound, false};

  00137	eb 20		 jmp	 SHORT $LN202@emplace
$LN4@emplace:

; 1631 :         if (max_size() == _Get_scary()->_Mysize) {

  00139	8b 45 f0	 mov	 eax, DWORD PTR _this$1$[ebp]
  0013c	81 78 04 5d 74
	d1 05		 cmp	 DWORD PTR [eax+4], 97612893 ; 05d1745dH
  00143	74 37		 je	 SHORT $LN218@emplace

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00145	57		 push	 edi
  00146	ff 75 dc	 push	 DWORD PTR __Loc$3[ebp+4]
  00149	8b c8		 mov	 ecx, eax
  0014b	ff 75 d8	 push	 DWORD PTR __Loc$3[ebp]
  0014e	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> > >::_Insert_node
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00153	8b c8		 mov	 ecx, eax
  00155	c6 45 0f 01	 mov	 BYTE PTR __Result$$sroa$588$1$[ebp], 1
$LN202@emplace:
  00159	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0015c	89 08		 mov	 DWORD PTR [eax], ecx
  0015e	8a 4d 0f	 mov	 cl, BYTE PTR __Result$$sroa$588$1$[ebp]
  00161	88 48 04	 mov	 BYTE PTR [eax+4], cl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1035 :     }

  00164	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00167	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0016e	59		 pop	 ecx
  0016f	5f		 pop	 edi
  00170	5e		 pop	 esi
  00171	8b e5		 mov	 esp, ebp
  00173	5d		 pop	 ebp
  00174	c2 0c 00	 ret	 12			; 0000000cH
$LN89@emplace:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00177	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN218@emplace:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1632 :             _Throw_tree_length_error();

  0017c	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN216@emplace:
  00181	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$emplace@AAY0BA@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0BA@$$CBD$$QAW4EName@CRaceMotionData@@@Z$2:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Newnode$4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >
__unwindfunclet$??$emplace@AAY0BA@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0BA@$$CBD$$QAW4EName@CRaceMotionData@@@Z$1:
  00008	8d 4d e4	 lea	 ecx, DWORD PTR __Newnode$4[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$emplace@AAY0BA@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0BA@$$CBD$$QAW4EName@CRaceMotionData@@@Z$0:
  00010	8d 4d e4	 lea	 ecx, DWORD PTR __Newnode$4[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
__ehhandler$??$emplace@AAY0BA@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0BA@$$CBD$$QAW4EName@CRaceMotionData@@@Z:
  0001d	90		 npad	 1
  0001e	90		 npad	 1
  0001f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00023	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00026	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$emplace@AAY0BA@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0BA@$$CBD$$QAW4EName@CRaceMotionData@@@Z
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$emplace@AAY0BA@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0BA@$$CBD$$QAW4EName@CRaceMotionData@@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[16],enum CRaceMotionData::EName>
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??$emplace@AAY0M@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0M@$$CBD$$QAW4EName@CRaceMotionData@@@Z
_TEXT	SEGMENT
$T2 = -52						; size = 12
__Loc$3 = -40						; size = 12
__Newnode$4 = -28					; size = 8
__Myhead$1$ = -20					; size = 4
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
tv941 = 12						; size = 4
_<_Vals_0>$ = 12					; size = 4
__Result$$sroa$588$1$ = 15				; size = 1
__Result$$sroa$589$1$ = 16				; size = 4
_<_Vals_1>$ = 16					; size = 4
??$emplace@AAY0M@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0M@$$CBD$$QAW4EName@CRaceMotionData@@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[12],enum CRaceMotionData::EName>, COMDAT
; _this$ = ecx

; 1032 :     pair<iterator, bool> emplace(_Valtys&&... _Vals) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$emplace@AAY0M@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0M@$$CBD$$QAW4EName@CRaceMotionData@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b c1		 mov	 eax, ecx
  00029	89 45 f0	 mov	 DWORD PTR _this$1$[ebp], eax

; 1011 :             _Tree_temp_node<_Alnode> _Newnode(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...);

  0002c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002e	89 4d ec	 mov	 DWORD PTR __Myhead$1$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1144 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00031	89 45 e4	 mov	 DWORD PTR __Newnode$4[ebp], eax

; 87   :         return ::operator new(_Bytes);

  00034	6a 2c		 push	 44			; 0000002cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1151 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0003d	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR __Newnode$4[ebp+4], 0

; 87   :         return ::operator new(_Bytes);

  00044	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 245  :         return _Traits::_Allocate(_Bytes);

  00049	8b f8		 mov	 edi, eax

; 87   :         return ::operator new(_Bytes);

  0004b	83 c4 04	 add	 esp, 4

; 1152 :         _Ptr = _Al.allocate(1);

  0004e	89 7d e8	 mov	 DWORD PTR __Newnode$4[ebp+4], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00051	8b 55 0c	 mov	 edx, DWORD PTR _<_Vals_0>$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00054	8d 77 10	 lea	 esi, DWORD PTR [edi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00057	8b ca		 mov	 ecx, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 806  :         : _Tree_temp_node_alloc<_Alnode>(_Al_) {

  00059	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00060	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00063	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  00066	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0006d	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  00070	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00077	89 45 0c	 mov	 DWORD PTR tv941[ebp], eax
  0007a	66 0f 1f 44 00
	00		 npad	 6
$LL214@emplace:
  00080	8a 01		 mov	 al, BYTE PTR [ecx]
  00082	41		 inc	 ecx
  00083	84 c0		 test	 al, al
  00085	75 f9		 jne	 SHORT $LL214@emplace
  00087	2b 4d 0c	 sub	 ecx, DWORD PTR tv941[ebp]

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0008a	51		 push	 ecx
  0008b	52		 push	 edx
  0008c	8b ce		 mov	 ecx, esi
  0008e	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00093	8b 45 10	 mov	 eax, DWORD PTR _<_Vals_1>$[ebp]
  00096	8b 00		 mov	 eax, DWORD PTR [eax]
  00098	89 46 18	 mov	 DWORD PTR [esi+24], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  0009b	8b 45 ec	 mov	 eax, DWORD PTR __Myhead$1$[ebp]
  0009e	89 07		 mov	 DWORD PTR [edi], eax

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  000a0	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  000a3	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 811  :         this->_Ptr->_Color = _Red;

  000a6	66 c7 47 0c 00
	00		 mov	 WORD PTR [edi+12], 0

; 1016 :                 _Loc = _Find_lower_bound(_Keyval);

  000ac	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000af	8d 45 cc	 lea	 eax, DWORD PTR $T2[ebp]
  000b2	56		 push	 esi
  000b3	50		 push	 eax
  000b4	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  000bb	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  000c0	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  000c4	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000c7	66 0f d6 45 d8	 movq	 QWORD PTR __Loc$3[ebp], xmm0
  000cc	89 45 10	 mov	 DWORD PTR __Result$$sroa$589$1$[ebp], eax

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000cf	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000d3	75 64		 jne	 SHORT $LN4@emplace
  000d5	83 c0 10	 add	 eax, 16			; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  000d8	50		 push	 eax
  000d9	56		 push	 esi
  000da	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  000df	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000e2	84 c0		 test	 al, al
  000e4	75 53		 jne	 SHORT $LN4@emplace
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  000e6	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  000e9	88 45 0f	 mov	 BYTE PTR __Result$$sroa$588$1$[ebp], al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  000ec	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  000ef	72 27		 jb	 SHORT $LN82@emplace
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000f1	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  000f3	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000f4	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000fa	72 12		 jb	 SHORT $LN92@emplace

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000fc	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000ff	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00102	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00104	83 c0 fc	 add	 eax, -4			; fffffffcH
  00107	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0010a	77 6b		 ja	 SHORT $LN89@emplace

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0010c	8b c2		 mov	 eax, edx
$LN92@emplace:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0010e	51		 push	 ecx
  0010f	50		 push	 eax
  00110	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00115	83 c4 08	 add	 esp, 8
$LN82@emplace:
  00118	6a 2c		 push	 44			; 0000002cH
  0011a	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  0011b	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  00122	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00129	c6 06 00	 mov	 BYTE PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  0012c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1018 :                     return {_Loc._Bound, false};

  00131	8b 4d 10	 mov	 ecx, DWORD PTR __Result$$sroa$589$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00134	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1018 :                     return {_Loc._Bound, false};

  00137	eb 20		 jmp	 SHORT $LN202@emplace
$LN4@emplace:

; 1631 :         if (max_size() == _Get_scary()->_Mysize) {

  00139	8b 45 f0	 mov	 eax, DWORD PTR _this$1$[ebp]
  0013c	81 78 04 5d 74
	d1 05		 cmp	 DWORD PTR [eax+4], 97612893 ; 05d1745dH
  00143	74 37		 je	 SHORT $LN218@emplace

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00145	57		 push	 edi
  00146	ff 75 dc	 push	 DWORD PTR __Loc$3[ebp+4]
  00149	8b c8		 mov	 ecx, eax
  0014b	ff 75 d8	 push	 DWORD PTR __Loc$3[ebp]
  0014e	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> > >::_Insert_node
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00153	8b c8		 mov	 ecx, eax
  00155	c6 45 0f 01	 mov	 BYTE PTR __Result$$sroa$588$1$[ebp], 1
$LN202@emplace:
  00159	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0015c	89 08		 mov	 DWORD PTR [eax], ecx
  0015e	8a 4d 0f	 mov	 cl, BYTE PTR __Result$$sroa$588$1$[ebp]
  00161	88 48 04	 mov	 BYTE PTR [eax+4], cl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1035 :     }

  00164	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00167	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0016e	59		 pop	 ecx
  0016f	5f		 pop	 edi
  00170	5e		 pop	 esi
  00171	8b e5		 mov	 esp, ebp
  00173	5d		 pop	 ebp
  00174	c2 0c 00	 ret	 12			; 0000000cH
$LN89@emplace:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00177	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN218@emplace:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1632 :             _Throw_tree_length_error();

  0017c	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN216@emplace:
  00181	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$emplace@AAY0M@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0M@$$CBD$$QAW4EName@CRaceMotionData@@@Z$2:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Newnode$4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >
__unwindfunclet$??$emplace@AAY0M@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0M@$$CBD$$QAW4EName@CRaceMotionData@@@Z$1:
  00008	8d 4d e4	 lea	 ecx, DWORD PTR __Newnode$4[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$emplace@AAY0M@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0M@$$CBD$$QAW4EName@CRaceMotionData@@@Z$0:
  00010	8d 4d e4	 lea	 ecx, DWORD PTR __Newnode$4[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
__ehhandler$??$emplace@AAY0M@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0M@$$CBD$$QAW4EName@CRaceMotionData@@@Z:
  0001d	90		 npad	 1
  0001e	90		 npad	 1
  0001f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00023	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00026	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$emplace@AAY0M@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0M@$$CBD$$QAW4EName@CRaceMotionData@@@Z
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$emplace@AAY0M@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0M@$$CBD$$QAW4EName@CRaceMotionData@@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[12],enum CRaceMotionData::EName>
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??$emplace@AAY0L@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0L@$$CBD$$QAW4EName@CRaceMotionData@@@Z
_TEXT	SEGMENT
$T2 = -52						; size = 12
__Loc$3 = -40						; size = 12
__Newnode$4 = -28					; size = 8
__Myhead$1$ = -20					; size = 4
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
tv941 = 12						; size = 4
_<_Vals_0>$ = 12					; size = 4
__Result$$sroa$588$1$ = 15				; size = 1
__Result$$sroa$589$1$ = 16				; size = 4
_<_Vals_1>$ = 16					; size = 4
??$emplace@AAY0L@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0L@$$CBD$$QAW4EName@CRaceMotionData@@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[11],enum CRaceMotionData::EName>, COMDAT
; _this$ = ecx

; 1032 :     pair<iterator, bool> emplace(_Valtys&&... _Vals) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$emplace@AAY0L@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0L@$$CBD$$QAW4EName@CRaceMotionData@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b c1		 mov	 eax, ecx
  00029	89 45 f0	 mov	 DWORD PTR _this$1$[ebp], eax

; 1011 :             _Tree_temp_node<_Alnode> _Newnode(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...);

  0002c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002e	89 4d ec	 mov	 DWORD PTR __Myhead$1$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1144 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00031	89 45 e4	 mov	 DWORD PTR __Newnode$4[ebp], eax

; 87   :         return ::operator new(_Bytes);

  00034	6a 2c		 push	 44			; 0000002cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1151 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0003d	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR __Newnode$4[ebp+4], 0

; 87   :         return ::operator new(_Bytes);

  00044	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 245  :         return _Traits::_Allocate(_Bytes);

  00049	8b f8		 mov	 edi, eax

; 87   :         return ::operator new(_Bytes);

  0004b	83 c4 04	 add	 esp, 4

; 1152 :         _Ptr = _Al.allocate(1);

  0004e	89 7d e8	 mov	 DWORD PTR __Newnode$4[ebp+4], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00051	8b 55 0c	 mov	 edx, DWORD PTR _<_Vals_0>$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00054	8d 77 10	 lea	 esi, DWORD PTR [edi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00057	8b ca		 mov	 ecx, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 806  :         : _Tree_temp_node_alloc<_Alnode>(_Al_) {

  00059	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00060	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00063	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  00066	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0006d	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  00070	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00077	89 45 0c	 mov	 DWORD PTR tv941[ebp], eax
  0007a	66 0f 1f 44 00
	00		 npad	 6
$LL214@emplace:
  00080	8a 01		 mov	 al, BYTE PTR [ecx]
  00082	41		 inc	 ecx
  00083	84 c0		 test	 al, al
  00085	75 f9		 jne	 SHORT $LL214@emplace
  00087	2b 4d 0c	 sub	 ecx, DWORD PTR tv941[ebp]

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0008a	51		 push	 ecx
  0008b	52		 push	 edx
  0008c	8b ce		 mov	 ecx, esi
  0008e	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00093	8b 45 10	 mov	 eax, DWORD PTR _<_Vals_1>$[ebp]
  00096	8b 00		 mov	 eax, DWORD PTR [eax]
  00098	89 46 18	 mov	 DWORD PTR [esi+24], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  0009b	8b 45 ec	 mov	 eax, DWORD PTR __Myhead$1$[ebp]
  0009e	89 07		 mov	 DWORD PTR [edi], eax

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  000a0	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  000a3	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 811  :         this->_Ptr->_Color = _Red;

  000a6	66 c7 47 0c 00
	00		 mov	 WORD PTR [edi+12], 0

; 1016 :                 _Loc = _Find_lower_bound(_Keyval);

  000ac	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000af	8d 45 cc	 lea	 eax, DWORD PTR $T2[ebp]
  000b2	56		 push	 esi
  000b3	50		 push	 eax
  000b4	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  000bb	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  000c0	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  000c4	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000c7	66 0f d6 45 d8	 movq	 QWORD PTR __Loc$3[ebp], xmm0
  000cc	89 45 10	 mov	 DWORD PTR __Result$$sroa$589$1$[ebp], eax

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000cf	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000d3	75 64		 jne	 SHORT $LN4@emplace
  000d5	83 c0 10	 add	 eax, 16			; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  000d8	50		 push	 eax
  000d9	56		 push	 esi
  000da	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  000df	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000e2	84 c0		 test	 al, al
  000e4	75 53		 jne	 SHORT $LN4@emplace
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  000e6	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  000e9	88 45 0f	 mov	 BYTE PTR __Result$$sroa$588$1$[ebp], al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  000ec	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  000ef	72 27		 jb	 SHORT $LN82@emplace
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000f1	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  000f3	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000f4	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000fa	72 12		 jb	 SHORT $LN92@emplace

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000fc	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000ff	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00102	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00104	83 c0 fc	 add	 eax, -4			; fffffffcH
  00107	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0010a	77 6b		 ja	 SHORT $LN89@emplace

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0010c	8b c2		 mov	 eax, edx
$LN92@emplace:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0010e	51		 push	 ecx
  0010f	50		 push	 eax
  00110	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00115	83 c4 08	 add	 esp, 8
$LN82@emplace:
  00118	6a 2c		 push	 44			; 0000002cH
  0011a	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  0011b	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  00122	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00129	c6 06 00	 mov	 BYTE PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  0012c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1018 :                     return {_Loc._Bound, false};

  00131	8b 4d 10	 mov	 ecx, DWORD PTR __Result$$sroa$589$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00134	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1018 :                     return {_Loc._Bound, false};

  00137	eb 20		 jmp	 SHORT $LN202@emplace
$LN4@emplace:

; 1631 :         if (max_size() == _Get_scary()->_Mysize) {

  00139	8b 45 f0	 mov	 eax, DWORD PTR _this$1$[ebp]
  0013c	81 78 04 5d 74
	d1 05		 cmp	 DWORD PTR [eax+4], 97612893 ; 05d1745dH
  00143	74 37		 je	 SHORT $LN218@emplace

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00145	57		 push	 edi
  00146	ff 75 dc	 push	 DWORD PTR __Loc$3[ebp+4]
  00149	8b c8		 mov	 ecx, eax
  0014b	ff 75 d8	 push	 DWORD PTR __Loc$3[ebp]
  0014e	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> > >::_Insert_node
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00153	8b c8		 mov	 ecx, eax
  00155	c6 45 0f 01	 mov	 BYTE PTR __Result$$sroa$588$1$[ebp], 1
$LN202@emplace:
  00159	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0015c	89 08		 mov	 DWORD PTR [eax], ecx
  0015e	8a 4d 0f	 mov	 cl, BYTE PTR __Result$$sroa$588$1$[ebp]
  00161	88 48 04	 mov	 BYTE PTR [eax+4], cl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1035 :     }

  00164	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00167	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0016e	59		 pop	 ecx
  0016f	5f		 pop	 edi
  00170	5e		 pop	 esi
  00171	8b e5		 mov	 esp, ebp
  00173	5d		 pop	 ebp
  00174	c2 0c 00	 ret	 12			; 0000000cH
$LN89@emplace:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00177	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN218@emplace:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1632 :             _Throw_tree_length_error();

  0017c	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN216@emplace:
  00181	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$emplace@AAY0L@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0L@$$CBD$$QAW4EName@CRaceMotionData@@@Z$2:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Newnode$4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >
__unwindfunclet$??$emplace@AAY0L@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0L@$$CBD$$QAW4EName@CRaceMotionData@@@Z$1:
  00008	8d 4d e4	 lea	 ecx, DWORD PTR __Newnode$4[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$emplace@AAY0L@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0L@$$CBD$$QAW4EName@CRaceMotionData@@@Z$0:
  00010	8d 4d e4	 lea	 ecx, DWORD PTR __Newnode$4[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
__ehhandler$??$emplace@AAY0L@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0L@$$CBD$$QAW4EName@CRaceMotionData@@@Z:
  0001d	90		 npad	 1
  0001e	90		 npad	 1
  0001f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00023	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00026	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$emplace@AAY0L@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0L@$$CBD$$QAW4EName@CRaceMotionData@@@Z
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$emplace@AAY0L@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0L@$$CBD$$QAW4EName@CRaceMotionData@@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[11],enum CRaceMotionData::EName>
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??$emplace@AAY0P@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0P@$$CBD$$QAW4EName@CRaceMotionData@@@Z
_TEXT	SEGMENT
$T2 = -52						; size = 12
__Loc$3 = -40						; size = 12
__Newnode$4 = -28					; size = 8
__Myhead$1$ = -20					; size = 4
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
tv941 = 12						; size = 4
_<_Vals_0>$ = 12					; size = 4
__Result$$sroa$588$1$ = 15				; size = 1
__Result$$sroa$589$1$ = 16				; size = 4
_<_Vals_1>$ = 16					; size = 4
??$emplace@AAY0P@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0P@$$CBD$$QAW4EName@CRaceMotionData@@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[15],enum CRaceMotionData::EName>, COMDAT
; _this$ = ecx

; 1032 :     pair<iterator, bool> emplace(_Valtys&&... _Vals) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$emplace@AAY0P@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0P@$$CBD$$QAW4EName@CRaceMotionData@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b c1		 mov	 eax, ecx
  00029	89 45 f0	 mov	 DWORD PTR _this$1$[ebp], eax

; 1011 :             _Tree_temp_node<_Alnode> _Newnode(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...);

  0002c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002e	89 4d ec	 mov	 DWORD PTR __Myhead$1$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1144 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00031	89 45 e4	 mov	 DWORD PTR __Newnode$4[ebp], eax

; 87   :         return ::operator new(_Bytes);

  00034	6a 2c		 push	 44			; 0000002cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1151 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0003d	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR __Newnode$4[ebp+4], 0

; 87   :         return ::operator new(_Bytes);

  00044	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 245  :         return _Traits::_Allocate(_Bytes);

  00049	8b f8		 mov	 edi, eax

; 87   :         return ::operator new(_Bytes);

  0004b	83 c4 04	 add	 esp, 4

; 1152 :         _Ptr = _Al.allocate(1);

  0004e	89 7d e8	 mov	 DWORD PTR __Newnode$4[ebp+4], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00051	8b 55 0c	 mov	 edx, DWORD PTR _<_Vals_0>$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00054	8d 77 10	 lea	 esi, DWORD PTR [edi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00057	8b ca		 mov	 ecx, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 806  :         : _Tree_temp_node_alloc<_Alnode>(_Al_) {

  00059	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00060	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00063	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  00066	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0006d	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  00070	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00077	89 45 0c	 mov	 DWORD PTR tv941[ebp], eax
  0007a	66 0f 1f 44 00
	00		 npad	 6
$LL214@emplace:
  00080	8a 01		 mov	 al, BYTE PTR [ecx]
  00082	41		 inc	 ecx
  00083	84 c0		 test	 al, al
  00085	75 f9		 jne	 SHORT $LL214@emplace
  00087	2b 4d 0c	 sub	 ecx, DWORD PTR tv941[ebp]

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0008a	51		 push	 ecx
  0008b	52		 push	 edx
  0008c	8b ce		 mov	 ecx, esi
  0008e	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00093	8b 45 10	 mov	 eax, DWORD PTR _<_Vals_1>$[ebp]
  00096	8b 00		 mov	 eax, DWORD PTR [eax]
  00098	89 46 18	 mov	 DWORD PTR [esi+24], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  0009b	8b 45 ec	 mov	 eax, DWORD PTR __Myhead$1$[ebp]
  0009e	89 07		 mov	 DWORD PTR [edi], eax

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  000a0	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  000a3	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 811  :         this->_Ptr->_Color = _Red;

  000a6	66 c7 47 0c 00
	00		 mov	 WORD PTR [edi+12], 0

; 1016 :                 _Loc = _Find_lower_bound(_Keyval);

  000ac	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000af	8d 45 cc	 lea	 eax, DWORD PTR $T2[ebp]
  000b2	56		 push	 esi
  000b3	50		 push	 eax
  000b4	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  000bb	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  000c0	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  000c4	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000c7	66 0f d6 45 d8	 movq	 QWORD PTR __Loc$3[ebp], xmm0
  000cc	89 45 10	 mov	 DWORD PTR __Result$$sroa$589$1$[ebp], eax

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000cf	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000d3	75 64		 jne	 SHORT $LN4@emplace
  000d5	83 c0 10	 add	 eax, 16			; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  000d8	50		 push	 eax
  000d9	56		 push	 esi
  000da	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  000df	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000e2	84 c0		 test	 al, al
  000e4	75 53		 jne	 SHORT $LN4@emplace
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  000e6	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  000e9	88 45 0f	 mov	 BYTE PTR __Result$$sroa$588$1$[ebp], al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  000ec	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  000ef	72 27		 jb	 SHORT $LN82@emplace
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000f1	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  000f3	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000f4	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000fa	72 12		 jb	 SHORT $LN92@emplace

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000fc	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000ff	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00102	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00104	83 c0 fc	 add	 eax, -4			; fffffffcH
  00107	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0010a	77 6b		 ja	 SHORT $LN89@emplace

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0010c	8b c2		 mov	 eax, edx
$LN92@emplace:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0010e	51		 push	 ecx
  0010f	50		 push	 eax
  00110	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00115	83 c4 08	 add	 esp, 8
$LN82@emplace:
  00118	6a 2c		 push	 44			; 0000002cH
  0011a	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  0011b	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  00122	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00129	c6 06 00	 mov	 BYTE PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  0012c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1018 :                     return {_Loc._Bound, false};

  00131	8b 4d 10	 mov	 ecx, DWORD PTR __Result$$sroa$589$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00134	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1018 :                     return {_Loc._Bound, false};

  00137	eb 20		 jmp	 SHORT $LN202@emplace
$LN4@emplace:

; 1631 :         if (max_size() == _Get_scary()->_Mysize) {

  00139	8b 45 f0	 mov	 eax, DWORD PTR _this$1$[ebp]
  0013c	81 78 04 5d 74
	d1 05		 cmp	 DWORD PTR [eax+4], 97612893 ; 05d1745dH
  00143	74 37		 je	 SHORT $LN218@emplace

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00145	57		 push	 edi
  00146	ff 75 dc	 push	 DWORD PTR __Loc$3[ebp+4]
  00149	8b c8		 mov	 ecx, eax
  0014b	ff 75 d8	 push	 DWORD PTR __Loc$3[ebp]
  0014e	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> > >::_Insert_node
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00153	8b c8		 mov	 ecx, eax
  00155	c6 45 0f 01	 mov	 BYTE PTR __Result$$sroa$588$1$[ebp], 1
$LN202@emplace:
  00159	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0015c	89 08		 mov	 DWORD PTR [eax], ecx
  0015e	8a 4d 0f	 mov	 cl, BYTE PTR __Result$$sroa$588$1$[ebp]
  00161	88 48 04	 mov	 BYTE PTR [eax+4], cl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1035 :     }

  00164	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00167	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0016e	59		 pop	 ecx
  0016f	5f		 pop	 edi
  00170	5e		 pop	 esi
  00171	8b e5		 mov	 esp, ebp
  00173	5d		 pop	 ebp
  00174	c2 0c 00	 ret	 12			; 0000000cH
$LN89@emplace:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00177	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN218@emplace:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1632 :             _Throw_tree_length_error();

  0017c	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN216@emplace:
  00181	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$emplace@AAY0P@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0P@$$CBD$$QAW4EName@CRaceMotionData@@@Z$2:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Newnode$4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >
__unwindfunclet$??$emplace@AAY0P@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0P@$$CBD$$QAW4EName@CRaceMotionData@@@Z$1:
  00008	8d 4d e4	 lea	 ecx, DWORD PTR __Newnode$4[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$emplace@AAY0P@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0P@$$CBD$$QAW4EName@CRaceMotionData@@@Z$0:
  00010	8d 4d e4	 lea	 ecx, DWORD PTR __Newnode$4[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
__ehhandler$??$emplace@AAY0P@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0P@$$CBD$$QAW4EName@CRaceMotionData@@@Z:
  0001d	90		 npad	 1
  0001e	90		 npad	 1
  0001f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00023	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00026	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$emplace@AAY0P@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0P@$$CBD$$QAW4EName@CRaceMotionData@@@Z
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$emplace@AAY0P@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0P@$$CBD$$QAW4EName@CRaceMotionData@@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[15],enum CRaceMotionData::EName>
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??$emplace@AAY0O@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0O@$$CBD$$QAW4EName@CRaceMotionData@@@Z
_TEXT	SEGMENT
$T2 = -52						; size = 12
__Loc$3 = -40						; size = 12
__Newnode$4 = -28					; size = 8
__Myhead$1$ = -20					; size = 4
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
tv941 = 12						; size = 4
_<_Vals_0>$ = 12					; size = 4
__Result$$sroa$588$1$ = 15				; size = 1
__Result$$sroa$589$1$ = 16				; size = 4
_<_Vals_1>$ = 16					; size = 4
??$emplace@AAY0O@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0O@$$CBD$$QAW4EName@CRaceMotionData@@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[14],enum CRaceMotionData::EName>, COMDAT
; _this$ = ecx

; 1032 :     pair<iterator, bool> emplace(_Valtys&&... _Vals) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$emplace@AAY0O@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0O@$$CBD$$QAW4EName@CRaceMotionData@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b c1		 mov	 eax, ecx
  00029	89 45 f0	 mov	 DWORD PTR _this$1$[ebp], eax

; 1011 :             _Tree_temp_node<_Alnode> _Newnode(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...);

  0002c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002e	89 4d ec	 mov	 DWORD PTR __Myhead$1$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1144 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00031	89 45 e4	 mov	 DWORD PTR __Newnode$4[ebp], eax

; 87   :         return ::operator new(_Bytes);

  00034	6a 2c		 push	 44			; 0000002cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1151 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0003d	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR __Newnode$4[ebp+4], 0

; 87   :         return ::operator new(_Bytes);

  00044	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 245  :         return _Traits::_Allocate(_Bytes);

  00049	8b f8		 mov	 edi, eax

; 87   :         return ::operator new(_Bytes);

  0004b	83 c4 04	 add	 esp, 4

; 1152 :         _Ptr = _Al.allocate(1);

  0004e	89 7d e8	 mov	 DWORD PTR __Newnode$4[ebp+4], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00051	8b 55 0c	 mov	 edx, DWORD PTR _<_Vals_0>$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00054	8d 77 10	 lea	 esi, DWORD PTR [edi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00057	8b ca		 mov	 ecx, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 806  :         : _Tree_temp_node_alloc<_Alnode>(_Al_) {

  00059	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00060	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00063	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  00066	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0006d	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  00070	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00077	89 45 0c	 mov	 DWORD PTR tv941[ebp], eax
  0007a	66 0f 1f 44 00
	00		 npad	 6
$LL214@emplace:
  00080	8a 01		 mov	 al, BYTE PTR [ecx]
  00082	41		 inc	 ecx
  00083	84 c0		 test	 al, al
  00085	75 f9		 jne	 SHORT $LL214@emplace
  00087	2b 4d 0c	 sub	 ecx, DWORD PTR tv941[ebp]

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0008a	51		 push	 ecx
  0008b	52		 push	 edx
  0008c	8b ce		 mov	 ecx, esi
  0008e	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00093	8b 45 10	 mov	 eax, DWORD PTR _<_Vals_1>$[ebp]
  00096	8b 00		 mov	 eax, DWORD PTR [eax]
  00098	89 46 18	 mov	 DWORD PTR [esi+24], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  0009b	8b 45 ec	 mov	 eax, DWORD PTR __Myhead$1$[ebp]
  0009e	89 07		 mov	 DWORD PTR [edi], eax

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  000a0	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  000a3	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 811  :         this->_Ptr->_Color = _Red;

  000a6	66 c7 47 0c 00
	00		 mov	 WORD PTR [edi+12], 0

; 1016 :                 _Loc = _Find_lower_bound(_Keyval);

  000ac	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000af	8d 45 cc	 lea	 eax, DWORD PTR $T2[ebp]
  000b2	56		 push	 esi
  000b3	50		 push	 eax
  000b4	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  000bb	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  000c0	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  000c4	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000c7	66 0f d6 45 d8	 movq	 QWORD PTR __Loc$3[ebp], xmm0
  000cc	89 45 10	 mov	 DWORD PTR __Result$$sroa$589$1$[ebp], eax

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000cf	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000d3	75 64		 jne	 SHORT $LN4@emplace
  000d5	83 c0 10	 add	 eax, 16			; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  000d8	50		 push	 eax
  000d9	56		 push	 esi
  000da	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  000df	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000e2	84 c0		 test	 al, al
  000e4	75 53		 jne	 SHORT $LN4@emplace
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  000e6	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  000e9	88 45 0f	 mov	 BYTE PTR __Result$$sroa$588$1$[ebp], al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  000ec	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  000ef	72 27		 jb	 SHORT $LN82@emplace
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000f1	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  000f3	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000f4	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000fa	72 12		 jb	 SHORT $LN92@emplace

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000fc	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000ff	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00102	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00104	83 c0 fc	 add	 eax, -4			; fffffffcH
  00107	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0010a	77 6b		 ja	 SHORT $LN89@emplace

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0010c	8b c2		 mov	 eax, edx
$LN92@emplace:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0010e	51		 push	 ecx
  0010f	50		 push	 eax
  00110	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00115	83 c4 08	 add	 esp, 8
$LN82@emplace:
  00118	6a 2c		 push	 44			; 0000002cH
  0011a	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  0011b	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  00122	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00129	c6 06 00	 mov	 BYTE PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  0012c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1018 :                     return {_Loc._Bound, false};

  00131	8b 4d 10	 mov	 ecx, DWORD PTR __Result$$sroa$589$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00134	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1018 :                     return {_Loc._Bound, false};

  00137	eb 20		 jmp	 SHORT $LN202@emplace
$LN4@emplace:

; 1631 :         if (max_size() == _Get_scary()->_Mysize) {

  00139	8b 45 f0	 mov	 eax, DWORD PTR _this$1$[ebp]
  0013c	81 78 04 5d 74
	d1 05		 cmp	 DWORD PTR [eax+4], 97612893 ; 05d1745dH
  00143	74 37		 je	 SHORT $LN218@emplace

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00145	57		 push	 edi
  00146	ff 75 dc	 push	 DWORD PTR __Loc$3[ebp+4]
  00149	8b c8		 mov	 ecx, eax
  0014b	ff 75 d8	 push	 DWORD PTR __Loc$3[ebp]
  0014e	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> > >::_Insert_node
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00153	8b c8		 mov	 ecx, eax
  00155	c6 45 0f 01	 mov	 BYTE PTR __Result$$sroa$588$1$[ebp], 1
$LN202@emplace:
  00159	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0015c	89 08		 mov	 DWORD PTR [eax], ecx
  0015e	8a 4d 0f	 mov	 cl, BYTE PTR __Result$$sroa$588$1$[ebp]
  00161	88 48 04	 mov	 BYTE PTR [eax+4], cl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1035 :     }

  00164	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00167	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0016e	59		 pop	 ecx
  0016f	5f		 pop	 edi
  00170	5e		 pop	 esi
  00171	8b e5		 mov	 esp, ebp
  00173	5d		 pop	 ebp
  00174	c2 0c 00	 ret	 12			; 0000000cH
$LN89@emplace:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00177	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN218@emplace:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1632 :             _Throw_tree_length_error();

  0017c	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN216@emplace:
  00181	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$emplace@AAY0O@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0O@$$CBD$$QAW4EName@CRaceMotionData@@@Z$2:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Newnode$4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >
__unwindfunclet$??$emplace@AAY0O@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0O@$$CBD$$QAW4EName@CRaceMotionData@@@Z$1:
  00008	8d 4d e4	 lea	 ecx, DWORD PTR __Newnode$4[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$emplace@AAY0O@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0O@$$CBD$$QAW4EName@CRaceMotionData@@@Z$0:
  00010	8d 4d e4	 lea	 ecx, DWORD PTR __Newnode$4[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
__ehhandler$??$emplace@AAY0O@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0O@$$CBD$$QAW4EName@CRaceMotionData@@@Z:
  0001d	90		 npad	 1
  0001e	90		 npad	 1
  0001f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00023	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00026	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$emplace@AAY0O@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0O@$$CBD$$QAW4EName@CRaceMotionData@@@Z
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$emplace@AAY0O@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0O@$$CBD$$QAW4EName@CRaceMotionData@@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[14],enum CRaceMotionData::EName>
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??$emplace@AAY0N@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0N@$$CBD$$QAW4EName@CRaceMotionData@@@Z
_TEXT	SEGMENT
$T2 = -52						; size = 12
__Loc$3 = -40						; size = 12
__Newnode$4 = -28					; size = 8
__Myhead$1$ = -20					; size = 4
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
tv941 = 12						; size = 4
_<_Vals_0>$ = 12					; size = 4
__Result$$sroa$588$1$ = 15				; size = 1
__Result$$sroa$589$1$ = 16				; size = 4
_<_Vals_1>$ = 16					; size = 4
??$emplace@AAY0N@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0N@$$CBD$$QAW4EName@CRaceMotionData@@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[13],enum CRaceMotionData::EName>, COMDAT
; _this$ = ecx

; 1032 :     pair<iterator, bool> emplace(_Valtys&&... _Vals) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$emplace@AAY0N@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0N@$$CBD$$QAW4EName@CRaceMotionData@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b c1		 mov	 eax, ecx
  00029	89 45 f0	 mov	 DWORD PTR _this$1$[ebp], eax

; 1011 :             _Tree_temp_node<_Alnode> _Newnode(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...);

  0002c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002e	89 4d ec	 mov	 DWORD PTR __Myhead$1$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1144 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00031	89 45 e4	 mov	 DWORD PTR __Newnode$4[ebp], eax

; 87   :         return ::operator new(_Bytes);

  00034	6a 2c		 push	 44			; 0000002cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1151 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0003d	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR __Newnode$4[ebp+4], 0

; 87   :         return ::operator new(_Bytes);

  00044	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 245  :         return _Traits::_Allocate(_Bytes);

  00049	8b f8		 mov	 edi, eax

; 87   :         return ::operator new(_Bytes);

  0004b	83 c4 04	 add	 esp, 4

; 1152 :         _Ptr = _Al.allocate(1);

  0004e	89 7d e8	 mov	 DWORD PTR __Newnode$4[ebp+4], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00051	8b 55 0c	 mov	 edx, DWORD PTR _<_Vals_0>$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00054	8d 77 10	 lea	 esi, DWORD PTR [edi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00057	8b ca		 mov	 ecx, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 806  :         : _Tree_temp_node_alloc<_Alnode>(_Al_) {

  00059	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00060	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00063	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  00066	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0006d	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  00070	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00077	89 45 0c	 mov	 DWORD PTR tv941[ebp], eax
  0007a	66 0f 1f 44 00
	00		 npad	 6
$LL214@emplace:
  00080	8a 01		 mov	 al, BYTE PTR [ecx]
  00082	41		 inc	 ecx
  00083	84 c0		 test	 al, al
  00085	75 f9		 jne	 SHORT $LL214@emplace
  00087	2b 4d 0c	 sub	 ecx, DWORD PTR tv941[ebp]

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0008a	51		 push	 ecx
  0008b	52		 push	 edx
  0008c	8b ce		 mov	 ecx, esi
  0008e	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00093	8b 45 10	 mov	 eax, DWORD PTR _<_Vals_1>$[ebp]
  00096	8b 00		 mov	 eax, DWORD PTR [eax]
  00098	89 46 18	 mov	 DWORD PTR [esi+24], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  0009b	8b 45 ec	 mov	 eax, DWORD PTR __Myhead$1$[ebp]
  0009e	89 07		 mov	 DWORD PTR [edi], eax

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  000a0	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  000a3	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 811  :         this->_Ptr->_Color = _Red;

  000a6	66 c7 47 0c 00
	00		 mov	 WORD PTR [edi+12], 0

; 1016 :                 _Loc = _Find_lower_bound(_Keyval);

  000ac	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000af	8d 45 cc	 lea	 eax, DWORD PTR $T2[ebp]
  000b2	56		 push	 esi
  000b3	50		 push	 eax
  000b4	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  000bb	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  000c0	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  000c4	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000c7	66 0f d6 45 d8	 movq	 QWORD PTR __Loc$3[ebp], xmm0
  000cc	89 45 10	 mov	 DWORD PTR __Result$$sroa$589$1$[ebp], eax

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000cf	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000d3	75 64		 jne	 SHORT $LN4@emplace
  000d5	83 c0 10	 add	 eax, 16			; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  000d8	50		 push	 eax
  000d9	56		 push	 esi
  000da	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  000df	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000e2	84 c0		 test	 al, al
  000e4	75 53		 jne	 SHORT $LN4@emplace
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  000e6	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  000e9	88 45 0f	 mov	 BYTE PTR __Result$$sroa$588$1$[ebp], al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  000ec	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  000ef	72 27		 jb	 SHORT $LN82@emplace
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000f1	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  000f3	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000f4	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000fa	72 12		 jb	 SHORT $LN92@emplace

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000fc	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000ff	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00102	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00104	83 c0 fc	 add	 eax, -4			; fffffffcH
  00107	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0010a	77 6b		 ja	 SHORT $LN89@emplace

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0010c	8b c2		 mov	 eax, edx
$LN92@emplace:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0010e	51		 push	 ecx
  0010f	50		 push	 eax
  00110	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00115	83 c4 08	 add	 esp, 8
$LN82@emplace:
  00118	6a 2c		 push	 44			; 0000002cH
  0011a	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  0011b	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  00122	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00129	c6 06 00	 mov	 BYTE PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  0012c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1018 :                     return {_Loc._Bound, false};

  00131	8b 4d 10	 mov	 ecx, DWORD PTR __Result$$sroa$589$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00134	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1018 :                     return {_Loc._Bound, false};

  00137	eb 20		 jmp	 SHORT $LN202@emplace
$LN4@emplace:

; 1631 :         if (max_size() == _Get_scary()->_Mysize) {

  00139	8b 45 f0	 mov	 eax, DWORD PTR _this$1$[ebp]
  0013c	81 78 04 5d 74
	d1 05		 cmp	 DWORD PTR [eax+4], 97612893 ; 05d1745dH
  00143	74 37		 je	 SHORT $LN218@emplace

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00145	57		 push	 edi
  00146	ff 75 dc	 push	 DWORD PTR __Loc$3[ebp+4]
  00149	8b c8		 mov	 ecx, eax
  0014b	ff 75 d8	 push	 DWORD PTR __Loc$3[ebp]
  0014e	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> > >::_Insert_node
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00153	8b c8		 mov	 ecx, eax
  00155	c6 45 0f 01	 mov	 BYTE PTR __Result$$sroa$588$1$[ebp], 1
$LN202@emplace:
  00159	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0015c	89 08		 mov	 DWORD PTR [eax], ecx
  0015e	8a 4d 0f	 mov	 cl, BYTE PTR __Result$$sroa$588$1$[ebp]
  00161	88 48 04	 mov	 BYTE PTR [eax+4], cl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1035 :     }

  00164	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00167	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0016e	59		 pop	 ecx
  0016f	5f		 pop	 edi
  00170	5e		 pop	 esi
  00171	8b e5		 mov	 esp, ebp
  00173	5d		 pop	 ebp
  00174	c2 0c 00	 ret	 12			; 0000000cH
$LN89@emplace:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00177	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN218@emplace:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1632 :             _Throw_tree_length_error();

  0017c	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN216@emplace:
  00181	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$emplace@AAY0N@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0N@$$CBD$$QAW4EName@CRaceMotionData@@@Z$2:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Newnode$4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >
__unwindfunclet$??$emplace@AAY0N@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0N@$$CBD$$QAW4EName@CRaceMotionData@@@Z$1:
  00008	8d 4d e4	 lea	 ecx, DWORD PTR __Newnode$4[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$emplace@AAY0N@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0N@$$CBD$$QAW4EName@CRaceMotionData@@@Z$0:
  00010	8d 4d e4	 lea	 ecx, DWORD PTR __Newnode$4[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
__ehhandler$??$emplace@AAY0N@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0N@$$CBD$$QAW4EName@CRaceMotionData@@@Z:
  0001d	90		 npad	 1
  0001e	90		 npad	 1
  0001f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00023	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00026	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$emplace@AAY0N@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0N@$$CBD$$QAW4EName@CRaceMotionData@@@Z
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$emplace@AAY0N@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0N@$$CBD$$QAW4EName@CRaceMotionData@@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[13],enum CRaceMotionData::EName>
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??$emplace@AAY04$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY04$$CBD$$QAW4EName@CRaceMotionData@@@Z
_TEXT	SEGMENT
$T2 = -52						; size = 12
__Loc$3 = -40						; size = 12
__Newnode$4 = -28					; size = 8
__Myhead$1$ = -20					; size = 4
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
tv941 = 12						; size = 4
_<_Vals_0>$ = 12					; size = 4
__Result$$sroa$588$1$ = 15				; size = 1
__Result$$sroa$589$1$ = 16				; size = 4
_<_Vals_1>$ = 16					; size = 4
??$emplace@AAY04$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY04$$CBD$$QAW4EName@CRaceMotionData@@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[5],enum CRaceMotionData::EName>, COMDAT
; _this$ = ecx

; 1032 :     pair<iterator, bool> emplace(_Valtys&&... _Vals) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$emplace@AAY04$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY04$$CBD$$QAW4EName@CRaceMotionData@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b c1		 mov	 eax, ecx
  00029	89 45 f0	 mov	 DWORD PTR _this$1$[ebp], eax

; 1011 :             _Tree_temp_node<_Alnode> _Newnode(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...);

  0002c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002e	89 4d ec	 mov	 DWORD PTR __Myhead$1$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1144 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00031	89 45 e4	 mov	 DWORD PTR __Newnode$4[ebp], eax

; 87   :         return ::operator new(_Bytes);

  00034	6a 2c		 push	 44			; 0000002cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1151 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0003d	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR __Newnode$4[ebp+4], 0

; 87   :         return ::operator new(_Bytes);

  00044	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 245  :         return _Traits::_Allocate(_Bytes);

  00049	8b f8		 mov	 edi, eax

; 87   :         return ::operator new(_Bytes);

  0004b	83 c4 04	 add	 esp, 4

; 1152 :         _Ptr = _Al.allocate(1);

  0004e	89 7d e8	 mov	 DWORD PTR __Newnode$4[ebp+4], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00051	8b 55 0c	 mov	 edx, DWORD PTR _<_Vals_0>$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00054	8d 77 10	 lea	 esi, DWORD PTR [edi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00057	8b ca		 mov	 ecx, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 806  :         : _Tree_temp_node_alloc<_Alnode>(_Al_) {

  00059	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00060	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00063	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  00066	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0006d	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  00070	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00077	89 45 0c	 mov	 DWORD PTR tv941[ebp], eax
  0007a	66 0f 1f 44 00
	00		 npad	 6
$LL214@emplace:
  00080	8a 01		 mov	 al, BYTE PTR [ecx]
  00082	41		 inc	 ecx
  00083	84 c0		 test	 al, al
  00085	75 f9		 jne	 SHORT $LL214@emplace
  00087	2b 4d 0c	 sub	 ecx, DWORD PTR tv941[ebp]

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0008a	51		 push	 ecx
  0008b	52		 push	 edx
  0008c	8b ce		 mov	 ecx, esi
  0008e	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00093	8b 45 10	 mov	 eax, DWORD PTR _<_Vals_1>$[ebp]
  00096	8b 00		 mov	 eax, DWORD PTR [eax]
  00098	89 46 18	 mov	 DWORD PTR [esi+24], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  0009b	8b 45 ec	 mov	 eax, DWORD PTR __Myhead$1$[ebp]
  0009e	89 07		 mov	 DWORD PTR [edi], eax

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  000a0	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  000a3	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 811  :         this->_Ptr->_Color = _Red;

  000a6	66 c7 47 0c 00
	00		 mov	 WORD PTR [edi+12], 0

; 1016 :                 _Loc = _Find_lower_bound(_Keyval);

  000ac	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000af	8d 45 cc	 lea	 eax, DWORD PTR $T2[ebp]
  000b2	56		 push	 esi
  000b3	50		 push	 eax
  000b4	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  000bb	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  000c0	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  000c4	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000c7	66 0f d6 45 d8	 movq	 QWORD PTR __Loc$3[ebp], xmm0
  000cc	89 45 10	 mov	 DWORD PTR __Result$$sroa$589$1$[ebp], eax

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000cf	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000d3	75 64		 jne	 SHORT $LN4@emplace
  000d5	83 c0 10	 add	 eax, 16			; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  000d8	50		 push	 eax
  000d9	56		 push	 esi
  000da	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  000df	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000e2	84 c0		 test	 al, al
  000e4	75 53		 jne	 SHORT $LN4@emplace
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  000e6	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  000e9	88 45 0f	 mov	 BYTE PTR __Result$$sroa$588$1$[ebp], al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  000ec	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  000ef	72 27		 jb	 SHORT $LN82@emplace
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000f1	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  000f3	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000f4	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000fa	72 12		 jb	 SHORT $LN92@emplace

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000fc	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000ff	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00102	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00104	83 c0 fc	 add	 eax, -4			; fffffffcH
  00107	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0010a	77 6b		 ja	 SHORT $LN89@emplace

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0010c	8b c2		 mov	 eax, edx
$LN92@emplace:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0010e	51		 push	 ecx
  0010f	50		 push	 eax
  00110	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00115	83 c4 08	 add	 esp, 8
$LN82@emplace:
  00118	6a 2c		 push	 44			; 0000002cH
  0011a	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  0011b	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  00122	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00129	c6 06 00	 mov	 BYTE PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  0012c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1018 :                     return {_Loc._Bound, false};

  00131	8b 4d 10	 mov	 ecx, DWORD PTR __Result$$sroa$589$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00134	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1018 :                     return {_Loc._Bound, false};

  00137	eb 20		 jmp	 SHORT $LN202@emplace
$LN4@emplace:

; 1631 :         if (max_size() == _Get_scary()->_Mysize) {

  00139	8b 45 f0	 mov	 eax, DWORD PTR _this$1$[ebp]
  0013c	81 78 04 5d 74
	d1 05		 cmp	 DWORD PTR [eax+4], 97612893 ; 05d1745dH
  00143	74 37		 je	 SHORT $LN218@emplace

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00145	57		 push	 edi
  00146	ff 75 dc	 push	 DWORD PTR __Loc$3[ebp+4]
  00149	8b c8		 mov	 ecx, eax
  0014b	ff 75 d8	 push	 DWORD PTR __Loc$3[ebp]
  0014e	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> > >::_Insert_node
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00153	8b c8		 mov	 ecx, eax
  00155	c6 45 0f 01	 mov	 BYTE PTR __Result$$sroa$588$1$[ebp], 1
$LN202@emplace:
  00159	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0015c	89 08		 mov	 DWORD PTR [eax], ecx
  0015e	8a 4d 0f	 mov	 cl, BYTE PTR __Result$$sroa$588$1$[ebp]
  00161	88 48 04	 mov	 BYTE PTR [eax+4], cl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1035 :     }

  00164	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00167	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0016e	59		 pop	 ecx
  0016f	5f		 pop	 edi
  00170	5e		 pop	 esi
  00171	8b e5		 mov	 esp, ebp
  00173	5d		 pop	 ebp
  00174	c2 0c 00	 ret	 12			; 0000000cH
$LN89@emplace:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00177	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN218@emplace:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1632 :             _Throw_tree_length_error();

  0017c	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN216@emplace:
  00181	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$emplace@AAY04$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY04$$CBD$$QAW4EName@CRaceMotionData@@@Z$2:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Newnode$4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >
__unwindfunclet$??$emplace@AAY04$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY04$$CBD$$QAW4EName@CRaceMotionData@@@Z$1:
  00008	8d 4d e4	 lea	 ecx, DWORD PTR __Newnode$4[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$emplace@AAY04$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY04$$CBD$$QAW4EName@CRaceMotionData@@@Z$0:
  00010	8d 4d e4	 lea	 ecx, DWORD PTR __Newnode$4[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
__ehhandler$??$emplace@AAY04$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY04$$CBD$$QAW4EName@CRaceMotionData@@@Z:
  0001d	90		 npad	 1
  0001e	90		 npad	 1
  0001f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00023	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00026	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$emplace@AAY04$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY04$$CBD$$QAW4EName@CRaceMotionData@@@Z
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$emplace@AAY04$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY04$$CBD$$QAW4EName@CRaceMotionData@@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[5],enum CRaceMotionData::EName>
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??$emplace@AAY05$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY05$$CBD$$QAW4EName@CRaceMotionData@@@Z
_TEXT	SEGMENT
$T2 = -52						; size = 12
__Loc$3 = -40						; size = 12
__Newnode$4 = -28					; size = 8
__Myhead$1$ = -20					; size = 4
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
tv941 = 12						; size = 4
_<_Vals_0>$ = 12					; size = 4
__Result$$sroa$588$1$ = 15				; size = 1
__Result$$sroa$589$1$ = 16				; size = 4
_<_Vals_1>$ = 16					; size = 4
??$emplace@AAY05$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY05$$CBD$$QAW4EName@CRaceMotionData@@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[6],enum CRaceMotionData::EName>, COMDAT
; _this$ = ecx

; 1032 :     pair<iterator, bool> emplace(_Valtys&&... _Vals) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$emplace@AAY05$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY05$$CBD$$QAW4EName@CRaceMotionData@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b c1		 mov	 eax, ecx
  00029	89 45 f0	 mov	 DWORD PTR _this$1$[ebp], eax

; 1011 :             _Tree_temp_node<_Alnode> _Newnode(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...);

  0002c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002e	89 4d ec	 mov	 DWORD PTR __Myhead$1$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1144 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00031	89 45 e4	 mov	 DWORD PTR __Newnode$4[ebp], eax

; 87   :         return ::operator new(_Bytes);

  00034	6a 2c		 push	 44			; 0000002cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1151 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0003d	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR __Newnode$4[ebp+4], 0

; 87   :         return ::operator new(_Bytes);

  00044	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 245  :         return _Traits::_Allocate(_Bytes);

  00049	8b f8		 mov	 edi, eax

; 87   :         return ::operator new(_Bytes);

  0004b	83 c4 04	 add	 esp, 4

; 1152 :         _Ptr = _Al.allocate(1);

  0004e	89 7d e8	 mov	 DWORD PTR __Newnode$4[ebp+4], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00051	8b 55 0c	 mov	 edx, DWORD PTR _<_Vals_0>$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00054	8d 77 10	 lea	 esi, DWORD PTR [edi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00057	8b ca		 mov	 ecx, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 806  :         : _Tree_temp_node_alloc<_Alnode>(_Al_) {

  00059	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00060	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00063	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  00066	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0006d	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  00070	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00077	89 45 0c	 mov	 DWORD PTR tv941[ebp], eax
  0007a	66 0f 1f 44 00
	00		 npad	 6
$LL214@emplace:
  00080	8a 01		 mov	 al, BYTE PTR [ecx]
  00082	41		 inc	 ecx
  00083	84 c0		 test	 al, al
  00085	75 f9		 jne	 SHORT $LL214@emplace
  00087	2b 4d 0c	 sub	 ecx, DWORD PTR tv941[ebp]

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0008a	51		 push	 ecx
  0008b	52		 push	 edx
  0008c	8b ce		 mov	 ecx, esi
  0008e	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00093	8b 45 10	 mov	 eax, DWORD PTR _<_Vals_1>$[ebp]
  00096	8b 00		 mov	 eax, DWORD PTR [eax]
  00098	89 46 18	 mov	 DWORD PTR [esi+24], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  0009b	8b 45 ec	 mov	 eax, DWORD PTR __Myhead$1$[ebp]
  0009e	89 07		 mov	 DWORD PTR [edi], eax

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  000a0	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  000a3	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 811  :         this->_Ptr->_Color = _Red;

  000a6	66 c7 47 0c 00
	00		 mov	 WORD PTR [edi+12], 0

; 1016 :                 _Loc = _Find_lower_bound(_Keyval);

  000ac	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000af	8d 45 cc	 lea	 eax, DWORD PTR $T2[ebp]
  000b2	56		 push	 esi
  000b3	50		 push	 eax
  000b4	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  000bb	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  000c0	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  000c4	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000c7	66 0f d6 45 d8	 movq	 QWORD PTR __Loc$3[ebp], xmm0
  000cc	89 45 10	 mov	 DWORD PTR __Result$$sroa$589$1$[ebp], eax

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000cf	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000d3	75 64		 jne	 SHORT $LN4@emplace
  000d5	83 c0 10	 add	 eax, 16			; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  000d8	50		 push	 eax
  000d9	56		 push	 esi
  000da	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  000df	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000e2	84 c0		 test	 al, al
  000e4	75 53		 jne	 SHORT $LN4@emplace
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  000e6	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  000e9	88 45 0f	 mov	 BYTE PTR __Result$$sroa$588$1$[ebp], al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  000ec	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  000ef	72 27		 jb	 SHORT $LN82@emplace
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000f1	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  000f3	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000f4	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000fa	72 12		 jb	 SHORT $LN92@emplace

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000fc	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000ff	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00102	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00104	83 c0 fc	 add	 eax, -4			; fffffffcH
  00107	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0010a	77 6b		 ja	 SHORT $LN89@emplace

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0010c	8b c2		 mov	 eax, edx
$LN92@emplace:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0010e	51		 push	 ecx
  0010f	50		 push	 eax
  00110	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00115	83 c4 08	 add	 esp, 8
$LN82@emplace:
  00118	6a 2c		 push	 44			; 0000002cH
  0011a	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  0011b	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  00122	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00129	c6 06 00	 mov	 BYTE PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  0012c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1018 :                     return {_Loc._Bound, false};

  00131	8b 4d 10	 mov	 ecx, DWORD PTR __Result$$sroa$589$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00134	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1018 :                     return {_Loc._Bound, false};

  00137	eb 20		 jmp	 SHORT $LN202@emplace
$LN4@emplace:

; 1631 :         if (max_size() == _Get_scary()->_Mysize) {

  00139	8b 45 f0	 mov	 eax, DWORD PTR _this$1$[ebp]
  0013c	81 78 04 5d 74
	d1 05		 cmp	 DWORD PTR [eax+4], 97612893 ; 05d1745dH
  00143	74 37		 je	 SHORT $LN218@emplace

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00145	57		 push	 edi
  00146	ff 75 dc	 push	 DWORD PTR __Loc$3[ebp+4]
  00149	8b c8		 mov	 ecx, eax
  0014b	ff 75 d8	 push	 DWORD PTR __Loc$3[ebp]
  0014e	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> > >::_Insert_node
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00153	8b c8		 mov	 ecx, eax
  00155	c6 45 0f 01	 mov	 BYTE PTR __Result$$sroa$588$1$[ebp], 1
$LN202@emplace:
  00159	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0015c	89 08		 mov	 DWORD PTR [eax], ecx
  0015e	8a 4d 0f	 mov	 cl, BYTE PTR __Result$$sroa$588$1$[ebp]
  00161	88 48 04	 mov	 BYTE PTR [eax+4], cl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1035 :     }

  00164	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00167	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0016e	59		 pop	 ecx
  0016f	5f		 pop	 edi
  00170	5e		 pop	 esi
  00171	8b e5		 mov	 esp, ebp
  00173	5d		 pop	 ebp
  00174	c2 0c 00	 ret	 12			; 0000000cH
$LN89@emplace:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00177	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN218@emplace:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1632 :             _Throw_tree_length_error();

  0017c	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN216@emplace:
  00181	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$emplace@AAY05$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY05$$CBD$$QAW4EName@CRaceMotionData@@@Z$2:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Newnode$4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >
__unwindfunclet$??$emplace@AAY05$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY05$$CBD$$QAW4EName@CRaceMotionData@@@Z$1:
  00008	8d 4d e4	 lea	 ecx, DWORD PTR __Newnode$4[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$emplace@AAY05$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY05$$CBD$$QAW4EName@CRaceMotionData@@@Z$0:
  00010	8d 4d e4	 lea	 ecx, DWORD PTR __Newnode$4[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
__ehhandler$??$emplace@AAY05$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY05$$CBD$$QAW4EName@CRaceMotionData@@@Z:
  0001d	90		 npad	 1
  0001e	90		 npad	 1
  0001f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00023	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00026	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$emplace@AAY05$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY05$$CBD$$QAW4EName@CRaceMotionData@@@Z
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$emplace@AAY05$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY05$$CBD$$QAW4EName@CRaceMotionData@@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[6],enum CRaceMotionData::EName>
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??__Fs_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@YAXXZ
text$yd	SEGMENT
??__Fs_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@YAXXZ PROC ; `CRaceManager::__LoadRaceMotionList'::`2'::`dynamic atexit destructor for 's_kMap_stType_dwIndex'', COMDAT
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  00005	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  0000a	ff 70 04	 push	 DWORD PTR [eax+4]
  0000d	68 00 00 00 00	 push	 OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  00012	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00017	6a 2c		 push	 44			; 0000002cH
  00019	ff 35 00 00 00
	00		 push	 DWORD PTR ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  0001f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00024	83 c4 08	 add	 esp, 8
  00027	c3		 ret	 0
??__Fs_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@YAXXZ ENDP ; `CRaceManager::__LoadRaceMotionList'::`2'::`dynamic atexit destructor for 's_kMap_stType_dwIndex''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> > >::_Insert_node, COMDAT
; _this$ = ecx

; 646  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 647  :         ++_Mysize;
; 648  :         const auto _Head  = _Myhead;
; 649  :         _Newnode->_Parent = _Loc._Parent;

  00004	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0000e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00010	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00013	89 45 fc	 mov	 DWORD PTR __Head$1$[ebp], eax
  00016	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 650  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  00019	3b d0		 cmp	 edx, eax
  0001b	75 16		 jne	 SHORT $LN5@Insert_nod

; 651  :             _Head->_Left     = _Newnode;

  0001d	89 38		 mov	 DWORD PTR [eax], edi

; 652  :             _Head->_Parent   = _Newnode;

  0001f	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 653  :             _Head->_Right    = _Newnode;

  00022	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 712  :         return _Newnode;
; 713  :     }

  00025	8b c7		 mov	 eax, edi
  00027	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
  0002b	5f		 pop	 edi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 654  :             _Newnode->_Color = _Black; // the root is black
; 655  :             return _Newnode;
; 656  :         }
; 657  : 
; 658  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 659  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00033	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00037	75 0d		 jne	 SHORT $LN6@Insert_nod

; 660  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 661  :             _Loc._Parent->_Right = _Newnode;

  00039	89 7a 08	 mov	 DWORD PTR [edx+8], edi

; 662  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003c	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003f	75 0d		 jne	 SHORT $LN9@Insert_nod

; 663  :                 _Head->_Right = _Newnode;

  00041	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 664  :             }
; 665  :         } else { // add to left of _Loc._Parent

  00044	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 666  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 667  :             _Loc._Parent->_Left = _Newnode;

  00046	89 3a		 mov	 DWORD PTR [edx], edi

; 668  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00048	3b 10		 cmp	 edx, DWORD PTR [eax]
  0004a	75 02		 jne	 SHORT $LN9@Insert_nod

; 669  :                 _Head->_Left = _Newnode;

  0004c	89 38		 mov	 DWORD PTR [eax], edi
$LN9@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00051	8b c7		 mov	 eax, edi
  00053	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00057	0f 85 7d 01 00
	00		 jne	 $LN3@Insert_nod
  0005d	56		 push	 esi
  0005e	66 90		 npad	 2
$LL2@Insert_nod:

; 674  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00063	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	3b d1		 cmp	 edx, ecx
  0006a	0f 85 aa 00 00
	00		 jne	 $LN10@Insert_nod

; 675  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00070	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 676  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00073	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00077	0f 84 a3 00 00
	00		 je	 $LN76@Insert_nod

; 677  :                     _Pnode->_Parent->_Color          = _Black;
; 678  :                     _Parent_sibling->_Color          = _Black;
; 679  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 680  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 681  :                 } else { // parent's sibling has red and black children
; 682  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  0007d	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00080	3b c6		 cmp	 eax, esi
  00082	75 37		 jne	 SHORT $LN51@Insert_nod

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00084	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 683  :                         _Pnode = _Pnode->_Parent;

  00086	8b c2		 mov	 eax, edx

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00088	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0008b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00091	75 03		 jne	 SHORT $LN20@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  00093	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN20@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  00096	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00099	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  0009c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0009e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000a1	75 05		 jne	 SHORT $LN21@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  000a3	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  000a6	eb 0e		 jmp	 SHORT $LN24@Insert_nod
$LN21@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000a8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ab	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000ad	75 04		 jne	 SHORT $LN23@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  000af	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  000b1	eb 03		 jmp	 SHORT $LN24@Insert_nod
$LN23@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  000b3	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN24@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 479  :         _Wherenode->_Parent = _Pnode;

  000b8	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN51@Insert_nod:

; 684  :                         _Lrotate(_Pnode);
; 685  :                     }
; 686  : 
; 687  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 688  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c8	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 689  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 483  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000d2	8b 32		 mov	 esi, DWORD PTR [edx]

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  000d4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000d7	89 0a		 mov	 DWORD PTR [edx], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  000d9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000dc	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000e0	75 03		 jne	 SHORT $LN27@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  000e2	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN27@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  000e5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000e8	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  000eb	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000ed	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000f0	75 0b		 jne	 SHORT $LN28@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  000f2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  000f5	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  000f8	e9 cc 00 00 00	 jmp	 $LN75@Insert_nod
$LN28@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  000fd	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00100	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00103	75 0b		 jne	 SHORT $LN30@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00105	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00108	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  0010b	e9 b9 00 00 00	 jmp	 $LN75@Insert_nod
$LN30@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00110	89 31		 mov	 DWORD PTR [ecx], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00112	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  00115	e9 af 00 00 00	 jmp	 $LN75@Insert_nod
$LN10@Insert_nod:

; 692  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 693  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  0011a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0011e	75 1d		 jne	 SHORT $LN15@Insert_nod
$LN76@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00120	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1
  00124	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  00128	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0012e	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00132	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00135	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00138	e9 8f 00 00 00	 jmp	 $LN46@Insert_nod
$LN15@Insert_nod:

; 694  :                     _Pnode->_Parent->_Color          = _Black;
; 695  :                     _Parent_sibling->_Color          = _Black;
; 696  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 697  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 698  :                 } else { // parent's sibling has red and black children
; 699  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  0013d	8b 32		 mov	 esi, DWORD PTR [edx]
  0013f	3b c6		 cmp	 eax, esi
  00141	75 3a		 jne	 SHORT $LN39@Insert_nod

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00143	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 700  :                         _Pnode = _Pnode->_Parent;

  00146	8b c2		 mov	 eax, edx

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00148	89 08		 mov	 DWORD PTR [eax], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  0014a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0014d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00151	75 03		 jne	 SHORT $LN34@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  00153	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN34@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  00156	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00159	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  0015c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0015e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00161	75 05		 jne	 SHORT $LN35@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  00163	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00166	eb 0f		 jmp	 SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00168	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0016b	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0016e	75 05		 jne	 SHORT $LN37@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00170	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 496  :         } else {

  00173	eb 02		 jmp	 SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00175	89 31		 mov	 DWORD PTR [ecx], esi
$LN38@Insert_nod:

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00177	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 501  :         _Wherenode->_Parent = _Pnode;

  0017a	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN39@Insert_nod:

; 701  :                         _Rrotate(_Pnode);
; 702  :                     }
; 703  : 
; 704  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  0017d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 705  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00184	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00187	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0018a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 706  :                     _Lrotate(_Pnode->_Parent->_Parent);

  0018e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00191	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 461  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00194	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00197	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00199	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0019c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0019e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a2	75 03		 jne	 SHORT $LN41@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  001a4	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN41@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  001a7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001aa	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  001ad	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001af	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  001b2	75 05		 jne	 SHORT $LN42@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  001b4	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  001b7	eb 0e		 jmp	 SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001b9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001bc	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001be	75 04		 jne	 SHORT $LN44@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  001c2	eb 03		 jmp	 SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  001c4	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN45@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  001c7	89 16		 mov	 DWORD PTR [esi], edx
$LN75@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001c9	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN46@Insert_nod:
  001cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001cf	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001d3	0f 84 87 fe ff
	ff		 je	 $LL2@Insert_nod
  001d9	5e		 pop	 esi
$LN3@Insert_nod:

; 707  :                 }
; 708  :             }
; 709  :         }
; 710  : 
; 711  :         _Head->_Parent->_Color = _Black; // root is always black

  001da	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]
  001dd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e0	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 712  :         return _Newnode;
; 713  :     }

  001e4	8b c7		 mov	 eax, edi
  001e6	5f		 pop	 edi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??$emplace_back@AAY0BI@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?A_TAAY0BI@$$CBD@Z
_TEXT	SEGMENT
_<_Val_0>$ = 8						; size = 4
??$emplace_back@AAY0BI@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?A_TAAY0BI@$$CBD@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<char const (&)[24]>, COMDAT
; _this$ = ecx

; 862  :     _CONSTEXPR20 decltype(auto) emplace_back(_Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 781  :         if (_Mylast != _My_data._Myend) {

  00006	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00009	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0000c	74 3e		 je	 SHORT $LN4@emplace_ba
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0000e	8b 55 08	 mov	 edx, DWORD PTR _<_Val_0>$[ebp]
  00011	0f 57 c0	 xorps	 xmm0, xmm0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00014	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00017	53		 push	 ebx

; 2293 :     size_type _Mysize = 0; // current length of string

  00018	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  0001f	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00026	8d 5a 01	 lea	 ebx, DWORD PTR [edx+1]
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL22@emplace_ba:
  00030	8a 02		 mov	 al, BYTE PTR [edx]
  00032	42		 inc	 edx
  00033	84 c0		 test	 al, al
  00035	75 f9		 jne	 SHORT $LL22@emplace_ba
  00037	2b d3		 sub	 edx, ebx

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00039	52		 push	 edx
  0003a	ff 75 08	 push	 DWORD PTR _<_Val_0>$[ebp]
  0003d	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 806  :         ++_Mylast;

  00042	83 46 04 18	 add	 DWORD PTR [esi+4], 24	; 00000018H
  00046	5b		 pop	 ebx
  00047	5e		 pop	 esi

; 863  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 864  :         _Ty& _Result = _Emplace_one_at_back(_STD forward<_Valty>(_Val)...);
; 865  : #if _HAS_CXX17
; 866  :         return _Result;
; 867  : #else // ^^^ _HAS_CXX17 / !_HAS_CXX17 vvv
; 868  :         (void) _Result;
; 869  : #endif // _HAS_CXX17
; 870  :     }

  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
$LN4@emplace_ba:

; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0004c	ff 75 08	 push	 DWORD PTR _<_Val_0>$[ebp]
  0004f	51		 push	 ecx
  00050	8b ce		 mov	 ecx, esi
  00052	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@AAY0BI@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BI@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<char const (&)[24]>
  00057	5e		 pop	 esi

; 863  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 864  :         _Ty& _Result = _Emplace_one_at_back(_STD forward<_Valty>(_Val)...);
; 865  : #if _HAS_CXX17
; 866  :         return _Result;
; 867  : #else // ^^^ _HAS_CXX17 / !_HAS_CXX17 vvv
; 868  :         (void) _Result;
; 869  : #endif // _HAS_CXX17
; 870  :     }

  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
??$emplace_back@AAY0BI@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?A_TAAY0BI@$$CBD@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<char const (&)[24]>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??$emplace_back@AAY0BH@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?A_TAAY0BH@$$CBD@Z
_TEXT	SEGMENT
_<_Val_0>$ = 8						; size = 4
??$emplace_back@AAY0BH@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?A_TAAY0BH@$$CBD@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<char const (&)[23]>, COMDAT
; _this$ = ecx

; 862  :     _CONSTEXPR20 decltype(auto) emplace_back(_Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 781  :         if (_Mylast != _My_data._Myend) {

  00006	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00009	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0000c	74 3e		 je	 SHORT $LN4@emplace_ba
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0000e	8b 55 08	 mov	 edx, DWORD PTR _<_Val_0>$[ebp]
  00011	0f 57 c0	 xorps	 xmm0, xmm0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00014	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00017	53		 push	 ebx

; 2293 :     size_type _Mysize = 0; // current length of string

  00018	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  0001f	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00026	8d 5a 01	 lea	 ebx, DWORD PTR [edx+1]
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL22@emplace_ba:
  00030	8a 02		 mov	 al, BYTE PTR [edx]
  00032	42		 inc	 edx
  00033	84 c0		 test	 al, al
  00035	75 f9		 jne	 SHORT $LL22@emplace_ba
  00037	2b d3		 sub	 edx, ebx

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00039	52		 push	 edx
  0003a	ff 75 08	 push	 DWORD PTR _<_Val_0>$[ebp]
  0003d	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 806  :         ++_Mylast;

  00042	83 46 04 18	 add	 DWORD PTR [esi+4], 24	; 00000018H
  00046	5b		 pop	 ebx
  00047	5e		 pop	 esi

; 863  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 864  :         _Ty& _Result = _Emplace_one_at_back(_STD forward<_Valty>(_Val)...);
; 865  : #if _HAS_CXX17
; 866  :         return _Result;
; 867  : #else // ^^^ _HAS_CXX17 / !_HAS_CXX17 vvv
; 868  :         (void) _Result;
; 869  : #endif // _HAS_CXX17
; 870  :     }

  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
$LN4@emplace_ba:

; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0004c	ff 75 08	 push	 DWORD PTR _<_Val_0>$[ebp]
  0004f	51		 push	 ecx
  00050	8b ce		 mov	 ecx, esi
  00052	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@AAY0BH@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BH@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<char const (&)[23]>
  00057	5e		 pop	 esi

; 863  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 864  :         _Ty& _Result = _Emplace_one_at_back(_STD forward<_Valty>(_Val)...);
; 865  : #if _HAS_CXX17
; 866  :         return _Result;
; 867  : #else // ^^^ _HAS_CXX17 / !_HAS_CXX17 vvv
; 868  :         (void) _Result;
; 869  : #endif // _HAS_CXX17
; 870  :     }

  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
??$emplace_back@AAY0BH@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?A_TAAY0BH@$$CBD@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<char const (&)[23]>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??$emplace_back@AAY0BG@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?A_TAAY0BG@$$CBD@Z
_TEXT	SEGMENT
_<_Val_0>$ = 8						; size = 4
??$emplace_back@AAY0BG@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?A_TAAY0BG@$$CBD@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<char const (&)[22]>, COMDAT
; _this$ = ecx

; 862  :     _CONSTEXPR20 decltype(auto) emplace_back(_Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 781  :         if (_Mylast != _My_data._Myend) {

  00006	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00009	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0000c	74 3e		 je	 SHORT $LN4@emplace_ba
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0000e	8b 55 08	 mov	 edx, DWORD PTR _<_Val_0>$[ebp]
  00011	0f 57 c0	 xorps	 xmm0, xmm0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00014	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00017	53		 push	 ebx

; 2293 :     size_type _Mysize = 0; // current length of string

  00018	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  0001f	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00026	8d 5a 01	 lea	 ebx, DWORD PTR [edx+1]
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL22@emplace_ba:
  00030	8a 02		 mov	 al, BYTE PTR [edx]
  00032	42		 inc	 edx
  00033	84 c0		 test	 al, al
  00035	75 f9		 jne	 SHORT $LL22@emplace_ba
  00037	2b d3		 sub	 edx, ebx

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00039	52		 push	 edx
  0003a	ff 75 08	 push	 DWORD PTR _<_Val_0>$[ebp]
  0003d	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 806  :         ++_Mylast;

  00042	83 46 04 18	 add	 DWORD PTR [esi+4], 24	; 00000018H
  00046	5b		 pop	 ebx
  00047	5e		 pop	 esi

; 863  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 864  :         _Ty& _Result = _Emplace_one_at_back(_STD forward<_Valty>(_Val)...);
; 865  : #if _HAS_CXX17
; 866  :         return _Result;
; 867  : #else // ^^^ _HAS_CXX17 / !_HAS_CXX17 vvv
; 868  :         (void) _Result;
; 869  : #endif // _HAS_CXX17
; 870  :     }

  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
$LN4@emplace_ba:

; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0004c	ff 75 08	 push	 DWORD PTR _<_Val_0>$[ebp]
  0004f	51		 push	 ecx
  00050	8b ce		 mov	 ecx, esi
  00052	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@AAY0BG@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BG@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<char const (&)[22]>
  00057	5e		 pop	 esi

; 863  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 864  :         _Ty& _Result = _Emplace_one_at_back(_STD forward<_Valty>(_Val)...);
; 865  : #if _HAS_CXX17
; 866  :         return _Result;
; 867  : #else // ^^^ _HAS_CXX17 / !_HAS_CXX17 vvv
; 868  :         (void) _Result;
; 869  : #endif // _HAS_CXX17
; 870  :     }

  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
??$emplace_back@AAY0BG@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?A_TAAY0BG@$$CBD@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<char const (&)[22]>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??$emplace_back@AAY0BD@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?A_TAAY0BD@$$CBD@Z
_TEXT	SEGMENT
_<_Val_0>$ = 8						; size = 4
??$emplace_back@AAY0BD@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?A_TAAY0BD@$$CBD@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<char const (&)[19]>, COMDAT
; _this$ = ecx

; 862  :     _CONSTEXPR20 decltype(auto) emplace_back(_Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 781  :         if (_Mylast != _My_data._Myend) {

  00006	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00009	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0000c	74 3e		 je	 SHORT $LN4@emplace_ba
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0000e	8b 55 08	 mov	 edx, DWORD PTR _<_Val_0>$[ebp]
  00011	0f 57 c0	 xorps	 xmm0, xmm0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00014	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00017	53		 push	 ebx

; 2293 :     size_type _Mysize = 0; // current length of string

  00018	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  0001f	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00026	8d 5a 01	 lea	 ebx, DWORD PTR [edx+1]
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL22@emplace_ba:
  00030	8a 02		 mov	 al, BYTE PTR [edx]
  00032	42		 inc	 edx
  00033	84 c0		 test	 al, al
  00035	75 f9		 jne	 SHORT $LL22@emplace_ba
  00037	2b d3		 sub	 edx, ebx

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00039	52		 push	 edx
  0003a	ff 75 08	 push	 DWORD PTR _<_Val_0>$[ebp]
  0003d	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 806  :         ++_Mylast;

  00042	83 46 04 18	 add	 DWORD PTR [esi+4], 24	; 00000018H
  00046	5b		 pop	 ebx
  00047	5e		 pop	 esi

; 863  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 864  :         _Ty& _Result = _Emplace_one_at_back(_STD forward<_Valty>(_Val)...);
; 865  : #if _HAS_CXX17
; 866  :         return _Result;
; 867  : #else // ^^^ _HAS_CXX17 / !_HAS_CXX17 vvv
; 868  :         (void) _Result;
; 869  : #endif // _HAS_CXX17
; 870  :     }

  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
$LN4@emplace_ba:

; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0004c	ff 75 08	 push	 DWORD PTR _<_Val_0>$[ebp]
  0004f	51		 push	 ecx
  00050	8b ce		 mov	 ecx, esi
  00052	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@AAY0BD@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BD@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<char const (&)[19]>
  00057	5e		 pop	 esi

; 863  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 864  :         _Ty& _Result = _Emplace_one_at_back(_STD forward<_Valty>(_Val)...);
; 865  : #if _HAS_CXX17
; 866  :         return _Result;
; 867  : #else // ^^^ _HAS_CXX17 / !_HAS_CXX17 vvv
; 868  :         (void) _Result;
; 869  : #endif // _HAS_CXX17
; 870  :     }

  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
??$emplace_back@AAY0BD@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?A_TAAY0BD@$$CBD@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<char const (&)[19]>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??$emplace_back@AAY0BC@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?A_TAAY0BC@$$CBD@Z
_TEXT	SEGMENT
_<_Val_0>$ = 8						; size = 4
??$emplace_back@AAY0BC@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?A_TAAY0BC@$$CBD@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<char const (&)[18]>, COMDAT
; _this$ = ecx

; 862  :     _CONSTEXPR20 decltype(auto) emplace_back(_Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 781  :         if (_Mylast != _My_data._Myend) {

  00006	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00009	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0000c	74 3e		 je	 SHORT $LN4@emplace_ba
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0000e	8b 55 08	 mov	 edx, DWORD PTR _<_Val_0>$[ebp]
  00011	0f 57 c0	 xorps	 xmm0, xmm0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00014	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00017	53		 push	 ebx

; 2293 :     size_type _Mysize = 0; // current length of string

  00018	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  0001f	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00026	8d 5a 01	 lea	 ebx, DWORD PTR [edx+1]
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL22@emplace_ba:
  00030	8a 02		 mov	 al, BYTE PTR [edx]
  00032	42		 inc	 edx
  00033	84 c0		 test	 al, al
  00035	75 f9		 jne	 SHORT $LL22@emplace_ba
  00037	2b d3		 sub	 edx, ebx

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00039	52		 push	 edx
  0003a	ff 75 08	 push	 DWORD PTR _<_Val_0>$[ebp]
  0003d	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 806  :         ++_Mylast;

  00042	83 46 04 18	 add	 DWORD PTR [esi+4], 24	; 00000018H
  00046	5b		 pop	 ebx
  00047	5e		 pop	 esi

; 863  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 864  :         _Ty& _Result = _Emplace_one_at_back(_STD forward<_Valty>(_Val)...);
; 865  : #if _HAS_CXX17
; 866  :         return _Result;
; 867  : #else // ^^^ _HAS_CXX17 / !_HAS_CXX17 vvv
; 868  :         (void) _Result;
; 869  : #endif // _HAS_CXX17
; 870  :     }

  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
$LN4@emplace_ba:

; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0004c	ff 75 08	 push	 DWORD PTR _<_Val_0>$[ebp]
  0004f	51		 push	 ecx
  00050	8b ce		 mov	 ecx, esi
  00052	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@AAY0BC@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BC@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<char const (&)[18]>
  00057	5e		 pop	 esi

; 863  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 864  :         _Ty& _Result = _Emplace_one_at_back(_STD forward<_Valty>(_Val)...);
; 865  : #if _HAS_CXX17
; 866  :         return _Result;
; 867  : #else // ^^^ _HAS_CXX17 / !_HAS_CXX17 vvv
; 868  :         (void) _Result;
; 869  : #endif // _HAS_CXX17
; 870  :     }

  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
??$emplace_back@AAY0BC@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?A_TAAY0BC@$$CBD@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<char const (&)[18]>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??$emplace_back@AAY0BE@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?A_TAAY0BE@$$CBD@Z
_TEXT	SEGMENT
_<_Val_0>$ = 8						; size = 4
??$emplace_back@AAY0BE@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?A_TAAY0BE@$$CBD@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<char const (&)[20]>, COMDAT
; _this$ = ecx

; 862  :     _CONSTEXPR20 decltype(auto) emplace_back(_Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 781  :         if (_Mylast != _My_data._Myend) {

  00006	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00009	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0000c	74 3e		 je	 SHORT $LN4@emplace_ba
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0000e	8b 55 08	 mov	 edx, DWORD PTR _<_Val_0>$[ebp]
  00011	0f 57 c0	 xorps	 xmm0, xmm0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00014	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00017	53		 push	 ebx

; 2293 :     size_type _Mysize = 0; // current length of string

  00018	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  0001f	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00026	8d 5a 01	 lea	 ebx, DWORD PTR [edx+1]
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL22@emplace_ba:
  00030	8a 02		 mov	 al, BYTE PTR [edx]
  00032	42		 inc	 edx
  00033	84 c0		 test	 al, al
  00035	75 f9		 jne	 SHORT $LL22@emplace_ba
  00037	2b d3		 sub	 edx, ebx

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00039	52		 push	 edx
  0003a	ff 75 08	 push	 DWORD PTR _<_Val_0>$[ebp]
  0003d	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 806  :         ++_Mylast;

  00042	83 46 04 18	 add	 DWORD PTR [esi+4], 24	; 00000018H
  00046	5b		 pop	 ebx
  00047	5e		 pop	 esi

; 863  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 864  :         _Ty& _Result = _Emplace_one_at_back(_STD forward<_Valty>(_Val)...);
; 865  : #if _HAS_CXX17
; 866  :         return _Result;
; 867  : #else // ^^^ _HAS_CXX17 / !_HAS_CXX17 vvv
; 868  :         (void) _Result;
; 869  : #endif // _HAS_CXX17
; 870  :     }

  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
$LN4@emplace_ba:

; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0004c	ff 75 08	 push	 DWORD PTR _<_Val_0>$[ebp]
  0004f	51		 push	 ecx
  00050	8b ce		 mov	 ecx, esi
  00052	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@AAY0BE@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BE@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<char const (&)[20]>
  00057	5e		 pop	 esi

; 863  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 864  :         _Ty& _Result = _Emplace_one_at_back(_STD forward<_Valty>(_Val)...);
; 865  : #if _HAS_CXX17
; 866  :         return _Result;
; 867  : #else // ^^^ _HAS_CXX17 / !_HAS_CXX17 vvv
; 868  :         (void) _Result;
; 869  : #endif // _HAS_CXX17
; 870  :     }

  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
??$emplace_back@AAY0BE@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?A_TAAY0BE@$$CBD@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<char const (&)[20]>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
;	COMDAT ?__GetRaceResourcePathes@@YAXIAAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z
_TEXT	SEGMENT
_race$ = 8						; size = 4
_vec_stPathes$ = 12					; size = 4
?__GetRaceResourcePathes@@YAXIAAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z PROC ; __GetRaceResourcePathes, COMDAT

; 26   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 27   : 	if (__IsGuildRace(race))

  00004	8b 75 08	 mov	 esi, DWORD PTR _race$[ebp]
  00007	57		 push	 edi
  00008	56		 push	 esi
  00009	e8 00 00 00 00	 call	 ?__IsGuildRace@@YA_NI@Z	; __IsGuildRace
  0000e	83 c4 04	 add	 esp, 4
  00011	84 c0		 test	 al, al
  00013	0f 84 75 02 00
	00		 je	 $LN2@GetRaceRes
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  00019	8b 75 0c	 mov	 esi, DWORD PTR _vec_stPathes$[ebp]
  0001c	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  0001f	3b 7e 08	 cmp	 edi, DWORD PTR [esi+8]
  00022	74 56		 je	 SHORT $LN226@GetRaceRes
  00024	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00027	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  0002a	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  00031	6a 20		 push	 32			; 00000020H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2650 :         _My_data._Myres               = _BUF_SIZE - 1;

  00033	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  0003a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2653 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0003f	89 07		 mov	 DWORD PTR [edi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  00041	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2657 :         _My_data._Mysize = _Count;

  00044	c7 47 10 13 00
	00 00		 mov	 DWORD PTR [edi+16], 19	; 00000013H

; 2658 :         _My_data._Myres  = _New_capacity;

  0004b	c7 47 14 1f 00
	00 00		 mov	 DWORD PTR [edi+20], 31	; 0000001fH

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00052	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_0BE@PJNPAGEJ@d?3?1ymir?5work?1guild?1@
  00059	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  0005c	66 8b 0d 10 00
	00 00		 mov	 cx, WORD PTR ??_C@_0BE@PJNPAGEJ@d?3?1ymir?5work?1guild?1@+16
  00063	66 89 48 10	 mov	 WORD PTR [eax+16], cx
  00067	8a 0d 12 00 00
	00		 mov	 cl, BYTE PTR ??_C@_0BE@PJNPAGEJ@d?3?1ymir?5work?1guild?1@+18
  0006d	88 48 12	 mov	 BYTE PTR [eax+18], cl

; 2664 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  00070	c6 40 13 00	 mov	 BYTE PTR [eax+19], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 806  :         ++_Mylast;

  00074	83 46 04 18	 add	 DWORD PTR [esi+4], 24	; 00000018H

; 782  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00078	eb 0d		 jmp	 SHORT $LN225@GetRaceRes
$LN226@GetRaceRes:

; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0007a	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@PJNPAGEJ@d?3?1ymir?5work?1guild?1@
  0007f	57		 push	 edi
  00080	8b ce		 mov	 ecx, esi
  00082	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@AAY0BE@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BE@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<char const (&)[20]>
$LN225@GetRaceRes:

; 781  :         if (_Mylast != _My_data._Myend) {

  00087	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  0008a	3b 7e 08	 cmp	 edi, DWORD PTR [esi+8]
  0008d	74 4b		 je	 SHORT $LN276@GetRaceRes
  0008f	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00092	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  00095	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  0009c	6a 20		 push	 32			; 00000020H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2650 :         _My_data._Myres               = _BUF_SIZE - 1;

  0009e	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  000a5	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2653 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000aa	89 07		 mov	 DWORD PTR [edi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  000ac	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2657 :         _My_data._Mysize = _Count;

  000af	c7 47 10 11 00
	00 00		 mov	 DWORD PTR [edi+16], 17	; 00000011H

; 2658 :         _My_data._Myres  = _New_capacity;

  000b6	c7 47 14 1f 00
	00 00		 mov	 DWORD PTR [edi+20], 31	; 0000001fH

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000bd	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_0BC@HJMPPIOH@d?3?1ymir?5work?1npc?1@
  000c4	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  000c7	8a 0d 10 00 00
	00		 mov	 cl, BYTE PTR ??_C@_0BC@HJMPPIOH@d?3?1ymir?5work?1npc?1@+16
  000cd	88 48 10	 mov	 BYTE PTR [eax+16], cl

; 2664 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000d0	c6 40 11 00	 mov	 BYTE PTR [eax+17], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 806  :         ++_Mylast;

  000d4	83 46 04 18	 add	 DWORD PTR [esi+4], 24	; 00000018H

; 782  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  000d8	eb 0d		 jmp	 SHORT $LN275@GetRaceRes
$LN276@GetRaceRes:

; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  000da	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@HJMPPIOH@d?3?1ymir?5work?1npc?1@
  000df	57		 push	 edi
  000e0	8b ce		 mov	 ecx, esi
  000e2	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@AAY0BC@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BC@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<char const (&)[18]>
$LN275@GetRaceRes:

; 781  :         if (_Mylast != _My_data._Myend) {

  000e7	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  000ea	3b 7e 08	 cmp	 edi, DWORD PTR [esi+8]
  000ed	74 4d		 je	 SHORT $LN326@GetRaceRes
  000ef	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000f2	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  000f5	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  000fc	6a 20		 push	 32			; 00000020H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2650 :         _My_data._Myres               = _BUF_SIZE - 1;

  000fe	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  00105	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2653 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0010a	89 07		 mov	 DWORD PTR [edi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  0010c	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2657 :         _My_data._Mysize = _Count;

  0010f	c7 47 10 12 00
	00 00		 mov	 DWORD PTR [edi+16], 18	; 00000012H

; 2658 :         _My_data._Myres  = _New_capacity;

  00116	c7 47 14 1f 00
	00 00		 mov	 DWORD PTR [edi+20], 31	; 0000001fH

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0011d	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_0BD@DIPFLAGN@d?3?1ymir?5work?1npc2?1@
  00124	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  00127	66 8b 0d 10 00
	00 00		 mov	 cx, WORD PTR ??_C@_0BD@DIPFLAGN@d?3?1ymir?5work?1npc2?1@+16
  0012e	66 89 48 10	 mov	 WORD PTR [eax+16], cx

; 2664 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  00132	c6 40 12 00	 mov	 BYTE PTR [eax+18], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 806  :         ++_Mylast;

  00136	83 46 04 18	 add	 DWORD PTR [esi+4], 24	; 00000018H

; 782  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  0013a	eb 0d		 jmp	 SHORT $LN325@GetRaceRes
$LN326@GetRaceRes:

; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0013c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@DIPFLAGN@d?3?1ymir?5work?1npc2?1@
  00141	57		 push	 edi
  00142	8b ce		 mov	 ecx, esi
  00144	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@AAY0BD@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BD@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<char const (&)[19]>
$LN325@GetRaceRes:

; 781  :         if (_Mylast != _My_data._Myend) {

  00149	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  0014c	3b 7e 08	 cmp	 edi, DWORD PTR [esi+8]
  0014f	74 54		 je	 SHORT $LN376@GetRaceRes
  00151	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00154	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  00157	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  0015e	6a 20		 push	 32			; 00000020H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2650 :         _My_data._Myres               = _BUF_SIZE - 1;

  00160	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  00167	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2653 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0016c	89 07		 mov	 DWORD PTR [edi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  0016e	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2657 :         _My_data._Mysize = _Count;

  00171	c7 47 10 15 00
	00 00		 mov	 DWORD PTR [edi+16], 21	; 00000015H

; 2658 :         _My_data._Myres  = _New_capacity;

  00178	c7 47 14 1f 00
	00 00		 mov	 DWORD PTR [edi+20], 31	; 0000001fH

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0017f	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_0BG@CKCIELCO@d?3?1ymir?5work?1npc_pet?1@
  00186	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  00189	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0BG@CKCIELCO@d?3?1ymir?5work?1npc_pet?1@+16
  0018f	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00192	8a 0d 14 00 00
	00		 mov	 cl, BYTE PTR ??_C@_0BG@CKCIELCO@d?3?1ymir?5work?1npc_pet?1@+20
  00198	88 48 14	 mov	 BYTE PTR [eax+20], cl

; 2664 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  0019b	c6 40 15 00	 mov	 BYTE PTR [eax+21], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 806  :         ++_Mylast;

  0019f	83 46 04 18	 add	 DWORD PTR [esi+4], 24	; 00000018H

; 782  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  001a3	eb 0d		 jmp	 SHORT $LN375@GetRaceRes
$LN376@GetRaceRes:

; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  001a5	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@CKCIELCO@d?3?1ymir?5work?1npc_pet?1@
  001aa	57		 push	 edi
  001ab	8b ce		 mov	 ecx, esi
  001ad	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@AAY0BG@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BG@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<char const (&)[22]>
$LN375@GetRaceRes:

; 781  :         if (_Mylast != _My_data._Myend) {

  001b2	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  001b5	3b 7e 08	 cmp	 edi, DWORD PTR [esi+8]
  001b8	74 54		 je	 SHORT $LN426@GetRaceRes
  001ba	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  001bd	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  001c0	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  001c7	6a 20		 push	 32			; 00000020H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2650 :         _My_data._Myres               = _BUF_SIZE - 1;

  001c9	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  001d0	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2653 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  001d5	89 07		 mov	 DWORD PTR [edi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  001d7	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2657 :         _My_data._Mysize = _Count;

  001da	c7 47 10 15 00
	00 00		 mov	 DWORD PTR [edi+16], 21	; 00000015H

; 2658 :         _My_data._Myres  = _New_capacity;

  001e1	c7 47 14 1f 00
	00 00		 mov	 DWORD PTR [edi+20], 31	; 0000001fH

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  001e8	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_0BG@FGIKCKJD@d?3?1ymir?5work?1monster?1@
  001ef	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  001f2	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0BG@FGIKCKJD@d?3?1ymir?5work?1monster?1@+16
  001f8	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  001fb	8a 0d 14 00 00
	00		 mov	 cl, BYTE PTR ??_C@_0BG@FGIKCKJD@d?3?1ymir?5work?1monster?1@+20
  00201	88 48 14	 mov	 BYTE PTR [eax+20], cl

; 2664 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  00204	c6 40 15 00	 mov	 BYTE PTR [eax+21], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 806  :         ++_Mylast;

  00208	83 46 04 18	 add	 DWORD PTR [esi+4], 24	; 00000018H

; 782  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  0020c	eb 0d		 jmp	 SHORT $LN425@GetRaceRes
$LN426@GetRaceRes:

; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0020e	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FGIKCKJD@d?3?1ymir?5work?1monster?1@
  00213	57		 push	 edi
  00214	8b ce		 mov	 ecx, esi
  00216	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@AAY0BG@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BG@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<char const (&)[22]>
$LN425@GetRaceRes:

; 781  :         if (_Mylast != _My_data._Myend) {

  0021b	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  0021e	3b 7e 08	 cmp	 edi, DWORD PTR [esi+8]
  00221	74 59		 je	 SHORT $LN476@GetRaceRes
  00223	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00226	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  00229	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  00230	6a 20		 push	 32			; 00000020H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2650 :         _My_data._Myres               = _BUF_SIZE - 1;

  00232	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  00239	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2653 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0023e	89 07		 mov	 DWORD PTR [edi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  00240	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2657 :         _My_data._Mysize = _Count;

  00243	c7 47 10 16 00
	00 00		 mov	 DWORD PTR [edi+16], 22	; 00000016H

; 2658 :         _My_data._Myres  = _New_capacity;

  0024a	c7 47 14 1f 00
	00 00		 mov	 DWORD PTR [edi+20], 31	; 0000001fH

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00251	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_0BH@GPLCEAJK@d?3?1ymir?5work?1monster2?1@
  00258	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  0025b	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0BH@GPLCEAJK@d?3?1ymir?5work?1monster2?1@+16
  00261	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00264	66 8b 0d 14 00
	00 00		 mov	 cx, WORD PTR ??_C@_0BH@GPLCEAJK@d?3?1ymir?5work?1monster2?1@+20
  0026b	66 89 48 14	 mov	 WORD PTR [eax+20], cx

; 2664 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  0026f	c6 40 16 00	 mov	 BYTE PTR [eax+22], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 806  :         ++_Mylast;

  00273	83 46 04 18	 add	 DWORD PTR [esi+4], 24	; 00000018H

; 782  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00277	e9 b4 01 00 00	 jmp	 $LN20@GetRaceRes
$LN476@GetRaceRes:

; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0027c	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@GPLCEAJK@d?3?1ymir?5work?1monster2?1@
  00281	57		 push	 edi
  00282	8b ce		 mov	 ecx, esi
  00284	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@AAY0BH@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BH@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<char const (&)[23]>
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 35   : 	}

  00289	e9 a2 01 00 00	 jmp	 $LN20@GetRaceRes
$LN2@GetRaceRes:

; 36   : 	else if (__IsNPCRace(race))

  0028e	56		 push	 esi
  0028f	e8 00 00 00 00	 call	 ?__IsNPCRace@@YA_NI@Z	; __IsNPCRace
  00294	83 c4 04	 add	 esp, 4
  00297	84 c0		 test	 al, al
  00299	0f 84 d3 00 00
	00		 je	 $LN4@GetRaceRes

; 37   : 	{
; 38   : 		if (race >= 30000)

  0029f	81 fe 30 75 00
	00		 cmp	 esi, 30000		; 00007530H
  002a5	72 58		 jb	 SHORT $LN6@GetRaceRes

; 39   : 		{
; 40   : 			if (race>=34028 && race<=34099) // last known 34072

  002a7	8d 86 14 7b ff
	ff		 lea	 eax, DWORD PTR [esi-34028]
  002ad	8b 75 0c	 mov	 esi, DWORD PTR _vec_stPathes$[ebp]
  002b0	8b ce		 mov	 ecx, esi
  002b2	83 f8 47	 cmp	 eax, 71			; 00000047H
  002b5	77 18		 ja	 SHORT $LN8@GetRaceRes

; 41   : 			{
; 42   : 				vec_stPathes.emplace_back("d:/ymir work/npc_pet/");

  002b7	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@CKCIELCO@d?3?1ymir?5work?1npc_pet?1@
  002bc	e8 00 00 00 00	 call	 ??$emplace_back@AAY0BG@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?A_TAAY0BG@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<char const (&)[22]>

; 43   : 				vec_stPathes.emplace_back("d:/ymir work/npc2/");

  002c1	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@DIPFLAGN@d?3?1ymir?5work?1npc2?1@
  002c6	8b ce		 mov	 ecx, esi
  002c8	e8 00 00 00 00	 call	 ??$emplace_back@AAY0BD@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?A_TAAY0BD@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<char const (&)[19]>

; 44   : 			}

  002cd	eb 16		 jmp	 SHORT $LN9@GetRaceRes
$LN8@GetRaceRes:

; 45   : 			else
; 46   : 			{
; 47   : 				vec_stPathes.emplace_back("d:/ymir work/npc2/");

  002cf	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@DIPFLAGN@d?3?1ymir?5work?1npc2?1@
  002d4	e8 00 00 00 00	 call	 ??$emplace_back@AAY0BD@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?A_TAAY0BD@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<char const (&)[19]>

; 48   : 				vec_stPathes.emplace_back("d:/ymir work/npc_pet/");

  002d9	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@CKCIELCO@d?3?1ymir?5work?1npc_pet?1@
  002de	8b ce		 mov	 ecx, esi
  002e0	e8 00 00 00 00	 call	 ??$emplace_back@AAY0BG@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?A_TAAY0BG@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<char const (&)[22]>
$LN9@GetRaceRes:

; 49   : 			}
; 50   : 			vec_stPathes.emplace_back("d:/ymir work/npc/");

  002e5	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@HJMPPIOH@d?3?1ymir?5work?1npc?1@
  002ea	8b ce		 mov	 ecx, esi
  002ec	e8 00 00 00 00	 call	 ??$emplace_back@AAY0BC@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?A_TAAY0BC@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<char const (&)[18]>

; 51   : 			vec_stPathes.emplace_back("d:/ymir work/npc_mount/");

  002f1	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@BCLHILHN@d?3?1ymir?5work?1npc_mount?1@
  002f6	8b ce		 mov	 ecx, esi
  002f8	e8 00 00 00 00	 call	 ??$emplace_back@AAY0BI@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?A_TAAY0BI@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<char const (&)[24]>

; 52   : 			vec_stPathes.emplace_back("d:/ymir work/monster/");
; 53   : 			vec_stPathes.emplace_back("d:/ymir work/monster2/");
; 54   : 			vec_stPathes.emplace_back("d:/ymir work/guild/");
; 55   : 		}

  002fd	eb 56		 jmp	 SHORT $LN7@GetRaceRes
$LN6@GetRaceRes:

; 56   : 		else
; 57   : 		{
; 58   : 			if (race>=20233 && race<=20299) // last known 20247

  002ff	8d 86 f7 b0 ff
	ff		 lea	 eax, DWORD PTR [esi-20233]
  00305	8b 75 0c	 mov	 esi, DWORD PTR _vec_stPathes$[ebp]
  00308	8b ce		 mov	 ecx, esi
  0030a	83 f8 42	 cmp	 eax, 66			; 00000042H
  0030d	77 18		 ja	 SHORT $LN10@GetRaceRes

; 59   : 			{
; 60   : 				vec_stPathes.emplace_back("d:/ymir work/npc_mount/");

  0030f	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@BCLHILHN@d?3?1ymir?5work?1npc_mount?1@
  00314	e8 00 00 00 00	 call	 ??$emplace_back@AAY0BI@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?A_TAAY0BI@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<char const (&)[24]>

; 61   : 				vec_stPathes.emplace_back("d:/ymir work/npc/");

  00319	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@HJMPPIOH@d?3?1ymir?5work?1npc?1@
  0031e	8b ce		 mov	 ecx, esi
  00320	e8 00 00 00 00	 call	 ??$emplace_back@AAY0BC@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?A_TAAY0BC@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<char const (&)[18]>

; 62   : 			}

  00325	eb 16		 jmp	 SHORT $LN11@GetRaceRes
$LN10@GetRaceRes:

; 63   : 			else
; 64   : 			{
; 65   : 				vec_stPathes.emplace_back("d:/ymir work/npc/");

  00327	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@HJMPPIOH@d?3?1ymir?5work?1npc?1@
  0032c	e8 00 00 00 00	 call	 ??$emplace_back@AAY0BC@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?A_TAAY0BC@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<char const (&)[18]>

; 66   : 				vec_stPathes.emplace_back("d:/ymir work/npc_mount/");

  00331	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@BCLHILHN@d?3?1ymir?5work?1npc_mount?1@
  00336	8b ce		 mov	 ecx, esi
  00338	e8 00 00 00 00	 call	 ??$emplace_back@AAY0BI@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?A_TAAY0BI@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<char const (&)[24]>
$LN11@GetRaceRes:

; 67   : 			}
; 68   : 			vec_stPathes.emplace_back("d:/ymir work/npc2/");

  0033d	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@DIPFLAGN@d?3?1ymir?5work?1npc2?1@
  00342	8b ce		 mov	 ecx, esi
  00344	e8 00 00 00 00	 call	 ??$emplace_back@AAY0BD@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?A_TAAY0BD@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<char const (&)[19]>

; 69   : 			vec_stPathes.emplace_back("d:/ymir work/npc_pet/");

  00349	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@CKCIELCO@d?3?1ymir?5work?1npc_pet?1@
  0034e	8b ce		 mov	 ecx, esi
  00350	e8 00 00 00 00	 call	 ??$emplace_back@AAY0BG@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?A_TAAY0BG@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<char const (&)[22]>
$LN7@GetRaceRes:

; 70   : 			vec_stPathes.emplace_back("d:/ymir work/monster/");
; 71   : 			vec_stPathes.emplace_back("d:/ymir work/monster2/");
; 72   : 			vec_stPathes.emplace_back("d:/ymir work/guild/");
; 73   : 		}
; 74   : 	}

  00355	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FGIKCKJD@d?3?1ymir?5work?1monster?1@
  0035a	8b ce		 mov	 ecx, esi
  0035c	e8 00 00 00 00	 call	 ??$emplace_back@AAY0BG@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?A_TAAY0BG@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<char const (&)[22]>
  00361	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@GPLCEAJK@d?3?1ymir?5work?1monster2?1@
  00366	8b ce		 mov	 ecx, esi
  00368	e8 00 00 00 00	 call	 ??$emplace_back@AAY0BH@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?A_TAAY0BH@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<char const (&)[23]>
  0036d	e9 b2 00 00 00	 jmp	 $LN547@GetRaceRes
$LN4@GetRaceRes:

; 75   : 	else if (8507 == race || 8510 == race)

  00372	81 fe 3b 21 00
	00		 cmp	 esi, 8507		; 0000213bH
  00378	74 5f		 je	 SHORT $LN14@GetRaceRes
  0037a	81 fe 3e 21 00
	00		 cmp	 esi, 8510		; 0000213eH
  00380	74 57		 je	 SHORT $LN14@GetRaceRes

; 79   : 		vec_stPathes.emplace_back("d:/ymir work/npc/");
; 80   : 		vec_stPathes.emplace_back("d:/ymir work/npc2/");
; 81   : 		vec_stPathes.emplace_back("d:/ymir work/npc_pet/");
; 82   : 		vec_stPathes.emplace_back("d:/ymir work/npc_mount/");
; 83   : 		vec_stPathes.emplace_back("d:/ymir work/guild/");
; 84   : 	}
; 85   : 	else if (race > 8000)

  00382	81 fe 40 1f 00
	00		 cmp	 esi, 8000		; 00001f40H
  00388	76 1d		 jbe	 SHORT $LN15@GetRaceRes

; 86   : 	{
; 87   : 		vec_stPathes.emplace_back("d:/ymir work/monster/");

  0038a	8b 75 0c	 mov	 esi, DWORD PTR _vec_stPathes$[ebp]
  0038d	8b ce		 mov	 ecx, esi
  0038f	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FGIKCKJD@d?3?1ymir?5work?1monster?1@
  00394	e8 00 00 00 00	 call	 ??$emplace_back@AAY0BG@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?A_TAAY0BG@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<char const (&)[22]>

; 88   : 		vec_stPathes.emplace_back("d:/ymir work/monster2/");

  00399	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@GPLCEAJK@d?3?1ymir?5work?1monster2?1@
  0039e	8b ce		 mov	 ecx, esi
  003a0	e8 00 00 00 00	 call	 ??$emplace_back@AAY0BH@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?A_TAAY0BH@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<char const (&)[23]>

; 89   : 		vec_stPathes.emplace_back("d:/ymir work/npc/");
; 90   : 		vec_stPathes.emplace_back("d:/ymir work/npc2/");
; 91   : 		vec_stPathes.emplace_back("d:/ymir work/npc_pet/");
; 92   : 		vec_stPathes.emplace_back("d:/ymir work/npc_mount/");
; 93   : 		vec_stPathes.emplace_back("d:/ymir work/guild/");
; 94   : 	}

  003a5	eb 4d		 jmp	 SHORT $LN548@GetRaceRes
$LN15@GetRaceRes:

; 95   : 	else if (race > 2000)

  003a7	81 fe d0 07 00
	00		 cmp	 esi, 2000		; 000007d0H
  003ad	77 2a		 ja	 SHORT $LN14@GetRaceRes

; 96   : 	{
; 97   : 		vec_stPathes.emplace_back("d:/ymir work/monster2/");
; 98   : 		vec_stPathes.emplace_back("d:/ymir work/monster/");
; 99   : 		vec_stPathes.emplace_back("d:/ymir work/npc/");
; 100  : 		vec_stPathes.emplace_back("d:/ymir work/npc2/");
; 101  : 		vec_stPathes.emplace_back("d:/ymir work/npc_pet/");
; 102  : 		vec_stPathes.emplace_back("d:/ymir work/npc_mount/");
; 103  : 		vec_stPathes.emplace_back("d:/ymir work/guild/");
; 104  : 	}
; 105  : 	else if (race>=1400 && race<=1700)

  003af	8d 86 88 fa ff
	ff		 lea	 eax, DWORD PTR [esi-1400]
  003b5	3d 2c 01 00 00	 cmp	 eax, 300		; 0000012cH
  003ba	76 1d		 jbe	 SHORT $LN14@GetRaceRes

; 106  : 	{
; 107  : 		vec_stPathes.emplace_back("d:/ymir work/monster2/");
; 108  : 		vec_stPathes.emplace_back("d:/ymir work/monster/");
; 109  : 		vec_stPathes.emplace_back("d:/ymir work/npc/");
; 110  : 		vec_stPathes.emplace_back("d:/ymir work/npc2/");
; 111  : 		vec_stPathes.emplace_back("d:/ymir work/npc_pet/");
; 112  : 		vec_stPathes.emplace_back("d:/ymir work/npc_mount/");
; 113  : 		vec_stPathes.emplace_back("d:/ymir work/guild/");
; 114  : 	}
; 115  : 	else
; 116  : 	{
; 117  : 		vec_stPathes.emplace_back("d:/ymir work/monster/");

  003bc	8b 75 0c	 mov	 esi, DWORD PTR _vec_stPathes$[ebp]
  003bf	8b ce		 mov	 ecx, esi
  003c1	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FGIKCKJD@d?3?1ymir?5work?1monster?1@
  003c6	e8 00 00 00 00	 call	 ??$emplace_back@AAY0BG@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?A_TAAY0BG@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<char const (&)[22]>

; 118  : 		vec_stPathes.emplace_back("d:/ymir work/monster2/");

  003cb	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@GPLCEAJK@d?3?1ymir?5work?1monster2?1@
  003d0	8b ce		 mov	 ecx, esi
  003d2	e8 00 00 00 00	 call	 ??$emplace_back@AAY0BH@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?A_TAAY0BH@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<char const (&)[23]>

; 119  : 		vec_stPathes.emplace_back("d:/ymir work/npc/");
; 120  : 		vec_stPathes.emplace_back("d:/ymir work/npc2/");
; 121  : 		vec_stPathes.emplace_back("d:/ymir work/npc_pet/");
; 122  : 		vec_stPathes.emplace_back("d:/ymir work/npc_mount/");
; 123  : 		vec_stPathes.emplace_back("d:/ymir work/guild/");

  003d7	eb 1b		 jmp	 SHORT $LN548@GetRaceRes
$LN14@GetRaceRes:

; 76   : 	{
; 77   : 		vec_stPathes.emplace_back("d:/ymir work/monster2/");

  003d9	8b 75 0c	 mov	 esi, DWORD PTR _vec_stPathes$[ebp]
  003dc	8b ce		 mov	 ecx, esi
  003de	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@GPLCEAJK@d?3?1ymir?5work?1monster2?1@
  003e3	e8 00 00 00 00	 call	 ??$emplace_back@AAY0BH@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?A_TAAY0BH@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<char const (&)[23]>

; 78   : 		vec_stPathes.emplace_back("d:/ymir work/monster/");

  003e8	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FGIKCKJD@d?3?1ymir?5work?1monster?1@
  003ed	8b ce		 mov	 ecx, esi
  003ef	e8 00 00 00 00	 call	 ??$emplace_back@AAY0BG@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?A_TAAY0BG@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<char const (&)[22]>
$LN548@GetRaceRes:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  003f4	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@HJMPPIOH@d?3?1ymir?5work?1npc?1@
  003f9	8b ce		 mov	 ecx, esi
  003fb	e8 00 00 00 00	 call	 ??$emplace_back@AAY0BC@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?A_TAAY0BC@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<char const (&)[18]>
  00400	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@DIPFLAGN@d?3?1ymir?5work?1npc2?1@
  00405	8b ce		 mov	 ecx, esi
  00407	e8 00 00 00 00	 call	 ??$emplace_back@AAY0BD@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?A_TAAY0BD@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<char const (&)[19]>
  0040c	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@CKCIELCO@d?3?1ymir?5work?1npc_pet?1@
  00411	8b ce		 mov	 ecx, esi
  00413	e8 00 00 00 00	 call	 ??$emplace_back@AAY0BG@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?A_TAAY0BG@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<char const (&)[22]>
  00418	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@BCLHILHN@d?3?1ymir?5work?1npc_mount?1@
  0041d	8b ce		 mov	 ecx, esi
  0041f	e8 00 00 00 00	 call	 ??$emplace_back@AAY0BI@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?A_TAAY0BI@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<char const (&)[24]>
$LN547@GetRaceRes:
  00424	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@PJNPAGEJ@d?3?1ymir?5work?1guild?1@
  00429	8b ce		 mov	 ecx, esi
  0042b	e8 00 00 00 00	 call	 ??$emplace_back@AAY0BE@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?A_TAAY0BE@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<char const (&)[20]>
$LN20@GetRaceRes:
  00430	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00433	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00436	74 3a		 je	 SHORT $LN76@GetRaceRes
  00438	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0043b	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 2629 :             _My_data._Mysize = _Count;

  0043e	c7 41 10 0d 00
	00 00		 mov	 DWORD PTR [ecx+16], 13	; 0000000dH

; 2630 :             _My_data._Myres  = _BUF_SIZE - 1;

  00445	c7 41 14 0f 00
	00 00		 mov	 DWORD PTR [ecx+20], 15	; 0000000fH

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0044c	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0O@PEPGGFH@?$CDseason1?1npc?1@
  00454	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00458	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_0O@PEPGGFH@?$CDseason1?1npc?1@+8
  0045d	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00460	a0 0c 00 00 00	 mov	 al, BYTE PTR ??_C@_0O@PEPGGFH@?$CDseason1?1npc?1@+12
  00465	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 2637 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00468	c6 41 0d 00	 mov	 BYTE PTR [ecx+13], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 806  :         ++_Mylast;

  0046c	83 46 04 18	 add	 DWORD PTR [esi+4], 24	; 00000018H

; 782  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00470	eb 0d		 jmp	 SHORT $LN75@GetRaceRes
$LN76@GetRaceRes:

; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00472	68 00 00 00 00	 push	 OFFSET ??_C@_0O@PEPGGFH@?$CDseason1?1npc?1@
  00477	51		 push	 ecx
  00478	8b ce		 mov	 ecx, esi
  0047a	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@AAY0O@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0O@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<char const (&)[14]>
$LN75@GetRaceRes:

; 781  :         if (_Mylast != _My_data._Myend) {

  0047f	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00482	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00485	74 3a		 je	 SHORT $LN126@GetRaceRes
  00487	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0048a	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 2629 :             _My_data._Mysize = _Count;

  0048d	c7 41 10 0d 00
	00 00		 mov	 DWORD PTR [ecx+16], 13	; 0000000dH

; 2630 :             _My_data._Myres  = _BUF_SIZE - 1;

  00494	c7 41 14 0f 00
	00 00		 mov	 DWORD PTR [ecx+20], 15	; 0000000fH

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0049b	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0O@DOKHHMMK@?$CDseason2?1npc?1@
  004a3	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  004a7	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_0O@DOKHHMMK@?$CDseason2?1npc?1@+8
  004ac	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  004af	a0 0c 00 00 00	 mov	 al, BYTE PTR ??_C@_0O@DOKHHMMK@?$CDseason2?1npc?1@+12
  004b4	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 2637 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  004b7	c6 41 0d 00	 mov	 BYTE PTR [ecx+13], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 806  :         ++_Mylast;

  004bb	83 46 04 18	 add	 DWORD PTR [esi+4], 24	; 00000018H

; 782  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  004bf	eb 0d		 jmp	 SHORT $LN125@GetRaceRes
$LN126@GetRaceRes:

; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  004c1	68 00 00 00 00	 push	 OFFSET ??_C@_0O@DOKHHMMK@?$CDseason2?1npc?1@
  004c6	51		 push	 ecx
  004c7	8b ce		 mov	 ecx, esi
  004c9	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@AAY0O@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0O@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<char const (&)[14]>
$LN125@GetRaceRes:

; 781  :         if (_Mylast != _My_data._Myend) {

  004ce	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  004d1	3b 7e 08	 cmp	 edi, DWORD PTR [esi+8]
  004d4	74 4b		 je	 SHORT $LN176@GetRaceRes
  004d6	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  004d9	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  004dc	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  004e3	6a 20		 push	 32			; 00000020H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2650 :         _My_data._Myres               = _BUF_SIZE - 1;

  004e5	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  004ec	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2653 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  004f1	89 07		 mov	 DWORD PTR [edi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  004f3	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2657 :         _My_data._Mysize = _Count;

  004f6	c7 47 10 11 00
	00 00		 mov	 DWORD PTR [edi+16], 17	; 00000011H

; 2658 :         _My_data._Myres  = _New_capacity;

  004fd	c7 47 14 1f 00
	00 00		 mov	 DWORD PTR [edi+20], 31	; 0000001fH

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00504	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_0BC@DOJALNLB@?$CDseason1?1monster?1@
  0050b	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  0050e	8a 0d 10 00 00
	00		 mov	 cl, BYTE PTR ??_C@_0BC@DOJALNLB@?$CDseason1?1monster?1@+16
  00514	88 48 10	 mov	 BYTE PTR [eax+16], cl

; 2664 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  00517	c6 40 11 00	 mov	 BYTE PTR [eax+17], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 806  :         ++_Mylast;

  0051b	83 46 04 18	 add	 DWORD PTR [esi+4], 24	; 00000018H

; 782  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  0051f	eb 0d		 jmp	 SHORT $LN175@GetRaceRes
$LN176@GetRaceRes:

; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00521	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@DOJALNLB@?$CDseason1?1monster?1@
  00526	57		 push	 edi
  00527	8b ce		 mov	 ecx, esi
  00529	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@AAY0BC@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BC@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<char const (&)[18]>
$LN175@GetRaceRes:

; 781  :         if (_Mylast != _My_data._Myend) {

  0052e	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  00531	3b 7e 08	 cmp	 edi, DWORD PTR [esi+8]
  00534	74 4d		 je	 SHORT $LN25@GetRaceRes
  00536	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00539	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  0053c	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  00543	6a 20		 push	 32			; 00000020H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2650 :         _My_data._Myres               = _BUF_SIZE - 1;

  00545	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  0054c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2653 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00551	89 07		 mov	 DWORD PTR [edi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  00553	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2657 :         _My_data._Mysize = _Count;

  00556	c7 47 10 11 00
	00 00		 mov	 DWORD PTR [edi+16], 17	; 00000011H

; 2658 :         _My_data._Myres  = _New_capacity;

  0055d	c7 47 14 1f 00
	00 00		 mov	 DWORD PTR [edi+20], 31	; 0000001fH

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00564	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_0BC@KHHCNLLA@?$CDseason2?1monster?1@
  0056b	5f		 pop	 edi
  0056c	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  0056f	8a 0d 10 00 00
	00		 mov	 cl, BYTE PTR ??_C@_0BC@KHHCNLLA@?$CDseason2?1monster?1@+16
  00575	88 48 10	 mov	 BYTE PTR [eax+16], cl

; 2664 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  00578	c6 40 11 00	 mov	 BYTE PTR [eax+17], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 806  :         ++_Mylast;

  0057c	83 46 04 18	 add	 DWORD PTR [esi+4], 24	; 00000018H
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 130  : }

  00580	5e		 pop	 esi
  00581	5d		 pop	 ebp
  00582	c3		 ret	 0
$LN25@GetRaceRes:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00583	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KHHCNLLA@?$CDseason2?1monster?1@
  00588	57		 push	 edi
  00589	8b ce		 mov	 ecx, esi
  0058b	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@AAY0BC@$$CBD@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@AAY0BC@$$CBD@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<char const (&)[18]>
  00590	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 130  : }

  00591	5e		 pop	 esi
  00592	5d		 pop	 ebp
  00593	c3		 ret	 0
?__GetRaceResourcePathes@@YAXIAAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z ENDP ; __GetRaceResourcePathes
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
;	COMDAT ?__IsNPCRace@@YA_NI@Z
_TEXT	SEGMENT
_race$ = 8						; size = 4
?__IsNPCRace@@YA_NI@Z PROC				; __IsNPCRace, COMDAT

; 18   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 19   : 	if (race > 9000)

  00003	81 7d 08 28 23
	00 00		 cmp	 DWORD PTR _race$[ebp], 9000 ; 00002328H
  0000a	0f 97 c0	 seta	 al

; 20   : 		return true;
; 21   : 
; 22   : 	return false;
; 23   : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?__IsNPCRace@@YA_NI@Z ENDP				; __IsNPCRace
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
;	COMDAT ?__IsGuildRace@@YA_NI@Z
_TEXT	SEGMENT
_race$ = 8						; size = 4
?__IsGuildRace@@YA_NI@Z PROC				; __IsGuildRace, COMDAT

; 7    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 8    : 	if (race >= 14000 && race < 15000)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _race$[ebp]
  00006	8d 81 50 c9 ff
	ff		 lea	 eax, DWORD PTR [ecx-14000]
  0000c	3d e7 03 00 00	 cmp	 eax, 999		; 000003e7H
  00011	76 0b		 jbe	 SHORT $LN5@IsGuildRac

; 9    : 		return true;
; 10   : 
; 11   : 	if (20043 == race)

  00013	81 f9 4b 4e 00
	00		 cmp	 ecx, 20043		; 00004e4bH
  00019	0f 94 c0	 sete	 al

; 13   : 
; 14   : 	return false;
; 15   : }

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
$LN5@IsGuildRac:

; 12   : 		return true;

  0001e	b0 01		 mov	 al, 1

; 13   : 
; 14   : 	return false;
; 15   : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
?__IsGuildRace@@YA_NI@Z ENDP				; __IsGuildRace
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCRaceManager@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCRaceManager@@UAEPAXI@Z PROC			; CRaceManager::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CRaceManager@@UAE@XZ	; CRaceManager::~CRaceManager
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 38		 push	 56			; 00000038H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCRaceManager@@UAEPAXI@Z ENDP			; CRaceManager::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAE@XZ PROC ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	ff 70 04	 push	 DWORD PTR [eax+4]
  00008	56		 push	 esi
  00009	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  0000e	6a 40		 push	 64			; 00000040H
  00010	ff 36		 push	 DWORD PTR [esi]
  00012	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00017	83 c4 08	 add	 esp, 8
  0001a	5e		 pop	 esi
  0001b	c3		 ret	 0
??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAE@XZ ENDP ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Insert_node, COMDAT
; _this$ = ecx

; 646  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 647  :         ++_Mysize;
; 648  :         const auto _Head  = _Myhead;
; 649  :         _Newnode->_Parent = _Loc._Parent;

  00004	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0000e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00010	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00013	89 45 fc	 mov	 DWORD PTR __Head$1$[ebp], eax
  00016	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 650  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  00019	3b d0		 cmp	 edx, eax
  0001b	75 16		 jne	 SHORT $LN5@Insert_nod

; 651  :             _Head->_Left     = _Newnode;

  0001d	89 38		 mov	 DWORD PTR [eax], edi

; 652  :             _Head->_Parent   = _Newnode;

  0001f	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 653  :             _Head->_Right    = _Newnode;

  00022	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 712  :         return _Newnode;
; 713  :     }

  00025	8b c7		 mov	 eax, edi
  00027	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
  0002b	5f		 pop	 edi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 654  :             _Newnode->_Color = _Black; // the root is black
; 655  :             return _Newnode;
; 656  :         }
; 657  : 
; 658  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 659  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00033	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00037	75 0d		 jne	 SHORT $LN6@Insert_nod

; 660  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 661  :             _Loc._Parent->_Right = _Newnode;

  00039	89 7a 08	 mov	 DWORD PTR [edx+8], edi

; 662  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003c	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003f	75 0d		 jne	 SHORT $LN9@Insert_nod

; 663  :                 _Head->_Right = _Newnode;

  00041	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 664  :             }
; 665  :         } else { // add to left of _Loc._Parent

  00044	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 666  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 667  :             _Loc._Parent->_Left = _Newnode;

  00046	89 3a		 mov	 DWORD PTR [edx], edi

; 668  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00048	3b 10		 cmp	 edx, DWORD PTR [eax]
  0004a	75 02		 jne	 SHORT $LN9@Insert_nod

; 669  :                 _Head->_Left = _Newnode;

  0004c	89 38		 mov	 DWORD PTR [eax], edi
$LN9@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00051	8b c7		 mov	 eax, edi
  00053	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00057	0f 85 7d 01 00
	00		 jne	 $LN3@Insert_nod
  0005d	56		 push	 esi
  0005e	66 90		 npad	 2
$LL2@Insert_nod:

; 674  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00063	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	3b d1		 cmp	 edx, ecx
  0006a	0f 85 aa 00 00
	00		 jne	 $LN10@Insert_nod

; 675  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00070	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 676  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00073	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00077	0f 84 a3 00 00
	00		 je	 $LN76@Insert_nod

; 677  :                     _Pnode->_Parent->_Color          = _Black;
; 678  :                     _Parent_sibling->_Color          = _Black;
; 679  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 680  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 681  :                 } else { // parent's sibling has red and black children
; 682  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  0007d	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00080	3b c6		 cmp	 eax, esi
  00082	75 37		 jne	 SHORT $LN51@Insert_nod

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00084	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 683  :                         _Pnode = _Pnode->_Parent;

  00086	8b c2		 mov	 eax, edx

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00088	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0008b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00091	75 03		 jne	 SHORT $LN20@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  00093	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN20@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  00096	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00099	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  0009c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0009e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000a1	75 05		 jne	 SHORT $LN21@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  000a3	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  000a6	eb 0e		 jmp	 SHORT $LN24@Insert_nod
$LN21@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000a8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ab	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000ad	75 04		 jne	 SHORT $LN23@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  000af	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  000b1	eb 03		 jmp	 SHORT $LN24@Insert_nod
$LN23@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  000b3	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN24@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 479  :         _Wherenode->_Parent = _Pnode;

  000b8	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN51@Insert_nod:

; 684  :                         _Lrotate(_Pnode);
; 685  :                     }
; 686  : 
; 687  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 688  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c8	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 689  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 483  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000d2	8b 32		 mov	 esi, DWORD PTR [edx]

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  000d4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000d7	89 0a		 mov	 DWORD PTR [edx], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  000d9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000dc	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000e0	75 03		 jne	 SHORT $LN27@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  000e2	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN27@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  000e5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000e8	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  000eb	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000ed	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000f0	75 0b		 jne	 SHORT $LN28@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  000f2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  000f5	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  000f8	e9 cc 00 00 00	 jmp	 $LN75@Insert_nod
$LN28@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  000fd	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00100	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00103	75 0b		 jne	 SHORT $LN30@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00105	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00108	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  0010b	e9 b9 00 00 00	 jmp	 $LN75@Insert_nod
$LN30@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00110	89 31		 mov	 DWORD PTR [ecx], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00112	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  00115	e9 af 00 00 00	 jmp	 $LN75@Insert_nod
$LN10@Insert_nod:

; 692  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 693  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  0011a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0011e	75 1d		 jne	 SHORT $LN15@Insert_nod
$LN76@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00120	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1
  00124	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  00128	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0012e	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00132	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00135	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00138	e9 8f 00 00 00	 jmp	 $LN46@Insert_nod
$LN15@Insert_nod:

; 694  :                     _Pnode->_Parent->_Color          = _Black;
; 695  :                     _Parent_sibling->_Color          = _Black;
; 696  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 697  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 698  :                 } else { // parent's sibling has red and black children
; 699  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  0013d	8b 32		 mov	 esi, DWORD PTR [edx]
  0013f	3b c6		 cmp	 eax, esi
  00141	75 3a		 jne	 SHORT $LN39@Insert_nod

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00143	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 700  :                         _Pnode = _Pnode->_Parent;

  00146	8b c2		 mov	 eax, edx

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00148	89 08		 mov	 DWORD PTR [eax], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  0014a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0014d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00151	75 03		 jne	 SHORT $LN34@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  00153	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN34@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  00156	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00159	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  0015c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0015e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00161	75 05		 jne	 SHORT $LN35@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  00163	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00166	eb 0f		 jmp	 SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00168	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0016b	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0016e	75 05		 jne	 SHORT $LN37@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00170	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 496  :         } else {

  00173	eb 02		 jmp	 SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00175	89 31		 mov	 DWORD PTR [ecx], esi
$LN38@Insert_nod:

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00177	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 501  :         _Wherenode->_Parent = _Pnode;

  0017a	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN39@Insert_nod:

; 701  :                         _Rrotate(_Pnode);
; 702  :                     }
; 703  : 
; 704  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  0017d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 705  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00184	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00187	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0018a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 706  :                     _Lrotate(_Pnode->_Parent->_Parent);

  0018e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00191	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 461  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00194	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00197	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00199	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0019c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0019e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a2	75 03		 jne	 SHORT $LN41@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  001a4	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN41@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  001a7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001aa	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  001ad	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001af	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  001b2	75 05		 jne	 SHORT $LN42@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  001b4	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  001b7	eb 0e		 jmp	 SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001b9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001bc	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001be	75 04		 jne	 SHORT $LN44@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  001c2	eb 03		 jmp	 SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  001c4	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN45@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  001c7	89 16		 mov	 DWORD PTR [esi], edx
$LN75@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001c9	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN46@Insert_nod:
  001cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001cf	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001d3	0f 84 87 fe ff
	ff		 je	 $LL2@Insert_nod
  001d9	5e		 pop	 esi
$LN3@Insert_nod:

; 707  :                 }
; 708  :             }
; 709  :         }
; 710  : 
; 711  :         _Head->_Parent->_Color = _Black; // root is always black

  001da	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]
  001dd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e0	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 712  :         return _Newnode;
; 713  :     }

  001e4	8b c7		 mov	 eax, edi
  001e6	5f		 pop	 edi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
;	COMDAT ?__DestroyRaceDataMap@CRaceManager@@IAEXXZ
_TEXT	SEGMENT
?__DestroyRaceDataMap@CRaceManager@@IAEXXZ PROC		; CRaceManager::__DestroyRaceDataMap, COMDAT
; _this$ = ecx

; 473  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1127 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00002	8d 59 04	 lea	 ebx, DWORD PTR [ecx+4]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 473  : {

  00005	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1127 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00006	8b 3b		 mov	 edi, DWORD PTR [ebx]

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00008	8b 37		 mov	 esi, DWORD PTR [edi]
  0000a	3b f7		 cmp	 esi, edi
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 475  : 	for (i=m_RaceDataMap.begin(); i!=m_RaceDataMap.end(); ++i)

  0000c	74 54		 je	 SHORT $LN3@DestroyRac
  0000e	66 90		 npad	 2
$LL28@DestroyRac:

; 476  : 		CRaceData::Delete(i->second);

  00010	ff 76 14	 push	 DWORD PTR [esi+20]
  00013	e8 00 00 00 00	 call	 ?Delete@CRaceData@@SAXPAV1@@Z ; CRaceData::Delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 51   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  00018	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 476  : 		CRaceData::Delete(i->second);

  0001b	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 51   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  0001e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00022	74 20		 je	 SHORT $LN27@DestroyRac

; 52   :             _Nodeptr _Pnode;
; 53   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  00024	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00027	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0002b	75 13		 jne	 SHORT $LN102@DestroyRac
  0002d	0f 1f 00	 npad	 3
$LL25@DestroyRac:
  00030	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  00033	75 0b		 jne	 SHORT $LN102@DestroyRac

; 54   :                 _Ptr = _Pnode; // ==> parent while right subtree

  00035	8b f0		 mov	 esi, eax
  00037	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0003a	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0003e	74 f0		 je	 SHORT $LL25@DestroyRac
$LN102@DestroyRac:

; 55   :             }
; 56   : 
; 57   :             _Ptr = _Pnode; // ==> parent (head if end())

  00040	8b f0		 mov	 esi, eax

; 58   :         } else {

  00042	eb 18		 jmp	 SHORT $LN32@DestroyRac
$LN27@DestroyRac:

; 59   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree

  00044	8b f0		 mov	 esi, eax

; 453  :         while (!_Pnode->_Left->_Isnil) {

  00046	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00048	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0004c	75 0e		 jne	 SHORT $LN32@DestroyRac
  0004e	66 90		 npad	 2
$LL31@DestroyRac:
  00050	8b 01		 mov	 eax, DWORD PTR [ecx]

; 454  :             _Pnode = _Pnode->_Left;

  00052	8b f1		 mov	 esi, ecx
  00054	8b c8		 mov	 ecx, eax
  00056	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0005a	74 f4		 je	 SHORT $LL31@DestroyRac
$LN32@DestroyRac:

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0005c	8b 3b		 mov	 edi, DWORD PTR [ebx]

; 233  :         return this->_Ptr == _Right._Ptr;

  0005e	3b f7		 cmp	 esi, edi
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 475  : 	for (i=m_RaceDataMap.begin(); i!=m_RaceDataMap.end(); ++i)

  00060	75 ae		 jne	 SHORT $LL28@DestroyRac
$LN3@DestroyRac:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1358 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  00062	8b 77 04	 mov	 esi, DWORD PTR [edi+4]

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00065	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00069	75 25		 jne	 SHORT $LN56@DestroyRac
  0006b	0f 1f 44 00 00	 npad	 5
$LL55@DestroyRac:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00070	ff 76 08	 push	 DWORD PTR [esi+8]
  00073	8b cb		 mov	 ecx, ebx
  00075	53		 push	 ebx
  00076	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCRaceData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CRaceData *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData *>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 754  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0007b	8b c6		 mov	 eax, esi

; 755  :     _Val         = static_cast<_Other&&>(_New_val);

  0007d	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  0007f	6a 18		 push	 24			; 00000018H
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00087	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0008a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0008e	74 e0		 je	 SHORT $LL55@DestroyRac
$LN56@DestroyRac:

; 1359 :         _Head->_Parent  = _Head;

  00090	89 7f 04	 mov	 DWORD PTR [edi+4], edi

; 1360 :         _Head->_Left    = _Head;

  00093	89 3f		 mov	 DWORD PTR [edi], edi

; 1361 :         _Head->_Right   = _Head;

  00095	89 7f 08	 mov	 DWORD PTR [edi+8], edi

; 1362 :         _Scary->_Mysize = 0;

  00098	5f		 pop	 edi
  00099	5e		 pop	 esi
  0009a	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0
  000a1	5b		 pop	 ebx
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 479  : }

  000a2	c3		 ret	 0
?__DestroyRaceDataMap@CRaceManager@@IAEXXZ ENDP		; CRaceManager::__DestroyRaceDataMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
;	COMDAT ?__Initialize@CRaceManager@@IAEXXZ
_TEXT	SEGMENT
?__Initialize@CRaceManager@@IAEXXZ PROC			; CRaceManager::__Initialize, COMDAT
; _this$ = ecx

; 469  : 	m_pSelectedRaceData = NULL;

  00000	c7 41 34 00 00
	00 00		 mov	 DWORD PTR [ecx+52], 0

; 470  : }

  00007	c3		 ret	 0
?__Initialize@CRaceManager@@IAEXXZ ENDP			; CRaceManager::__Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
;	COMDAT ?__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z
_TEXT	SEGMENT
_kTextFileLoader$ = -1236				; size = 16
$T2 = -1220						; size = 12
$T3 = -1220						; size = 12
$T4 = -1220						; size = 12
$T5 = -1220						; size = 12
__Loc$6 = -1220						; size = 12
_pathName$GSCopy$1$ = -1208				; size = 4
_pvData$ = -1204					; size = 4
tv5456 = -1200						; size = 4
$T7 = -1196						; size = 4
_motionListFileName$GSCopy$1$ = -1192			; size = 4
_uLineCount$1$ = -1192					; size = 4
_nPercent$ = -1188					; size = 4
_rkRaceData$GSCopy$1$ = -1184				; size = 4
__Loc$8 = -1180						; size = 12
__Loc$9 = -1180						; size = 12
__Loc$10 = -1180					; size = 12
__Loc$11 = -1180					; size = 12
__Loc$12 = -1180					; size = 12
$T13 = -1176						; size = 8
$T14 = -1176						; size = 8
$T15 = -1176						; size = 8
$T16 = -1176						; size = 8
$T17 = -1176						; size = 8
$T18 = -1176						; size = 8
$T19 = -1176						; size = 8
$T20 = -1176						; size = 8
$T21 = -1176						; size = 8
$T22 = -1176						; size = 8
$T23 = -1176						; size = 8
$T24 = -1176						; size = 8
$T25 = -1176						; size = 8
$T26 = -1176						; size = 8
$T27 = -1176						; size = 8
$T28 = -1176						; size = 8
$T29 = -1176						; size = 8
$T30 = -1176						; size = 8
$T31 = -1176						; size = 8
$T32 = -1176						; size = 8
$T33 = -1176						; size = 8
$T34 = -1176						; size = 8
$T35 = -1176						; size = 8
$T36 = -1176						; size = 8
$T37 = -1176						; size = 8
$T38 = -1176						; size = 8
$T39 = -1176						; size = 8
$T40 = -1176						; size = 8
$T41 = -1176						; size = 8
$T42 = -1176						; size = 8
$T43 = -1176						; size = 8
$T44 = -1176						; size = 8
$T45 = -1176						; size = 8
$T46 = -1176						; size = 8
$T47 = -1176						; size = 8
$T48 = -1176						; size = 8
$T49 = -1176						; size = 8
$T50 = -1176						; size = 8
$T51 = -1176						; size = 8
$T52 = -1176						; size = 8
$T53 = -1176						; size = 8
$T54 = -1176						; size = 8
$T55 = -1176						; size = 8
$T56 = -1176						; size = 8
$T57 = -1176						; size = 8
$T58 = -1165						; size = 1
_isSpawn$1$ = -1165					; size = 1
__Newnode$59 = -1164					; size = 8
__Newnode$60 = -1164					; size = 8
__Newnode$61 = -1164					; size = 8
__Newnode$62 = -1164					; size = 8
_uLineIndex$1$ = -1160					; size = 4
$T63 = -1160						; size = 4
$T64 = -1160						; size = 4
$T65 = -1160						; size = 4
$T66 = -1160						; size = 4
$T67 = -1160						; size = 4
$T68 = -1160						; size = 4
$T69 = -1160						; size = 4
$T70 = -1160						; size = 4
$T71 = -1160						; size = 4
$T72 = -1160						; size = 4
$T73 = -1160						; size = 4
$T74 = -1160						; size = 4
$T75 = -1160						; size = 4
$T76 = -1160						; size = 4
$T77 = -1160						; size = 4
$T78 = -1160						; size = 4
$T79 = -1160						; size = 4
$T80 = -1160						; size = 4
$T81 = -1160						; size = 4
$T82 = -1160						; size = 4
$T83 = -1160						; size = 4
$T84 = -1160						; size = 4
$T85 = -1160						; size = 4
$T86 = -1160						; size = 4
$T87 = -1160						; size = 4
$T88 = -1160						; size = 4
$T89 = -1160						; size = 4
$T90 = -1160						; size = 4
$T91 = -1160						; size = 4
$T92 = -1160						; size = 4
$T93 = -1160						; size = 4
$T94 = -1160						; size = 4
$T95 = -1160						; size = 4
$T96 = -1160						; size = 4
$T97 = -1160						; size = 4
$T98 = -1160						; size = 4
$T99 = -1160						; size = 4
$T100 = -1160						; size = 4
$T101 = -1160						; size = 4
$T102 = -1160						; size = 4
$T103 = -1160						; size = 4
$T104 = -1160						; size = 4
$T105 = -1160						; size = 4
$T106 = -1160						; size = 4
$T107 = -1160						; size = 4
_kMappedFile$ = -1156					; size = 324
$T108 = -832						; size = 24
_typeName$109 = -808					; size = 24
$T110 = -808						; size = 24
_szMode$ = -784						; size = 256
_szFile$ = -528						; size = 256
_szType$ = -272						; size = 256
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rkRaceData$ = 8					; size = 4
_pathName$ = 12						; size = 4
_motionListFileName$ = 16				; size = 4
?__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z PROC ; CRaceManager::__LoadRaceMotionList, COMDAT
; _this$ = ecx

; 224  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec c8 04 00
	00		 sub	 esp, 1224		; 000004c8H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b 45 0c	 mov	 eax, DWORD PTR _pathName$[ebp]

; 225  : 	static std::map<std::string, DWORD> s_kMap_stType_dwIndex;

  00030	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __tls_index
  00036	8b 7d 08	 mov	 edi, DWORD PTR _rkRaceData$[ebp]
  00039	89 85 48 fb ff
	ff		 mov	 DWORD PTR _pathName$GSCopy$1$[ebp], eax
  0003f	8b 45 10	 mov	 eax, DWORD PTR _motionListFileName$[ebp]
  00042	89 85 58 fb ff
	ff		 mov	 DWORD PTR _motionListFileName$GSCopy$1$[ebp], eax
  00048	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  0004e	89 bd 60 fb ff
	ff		 mov	 DWORD PTR _rkRaceData$GSCopy$1$[ebp], edi
  00054	c7 85 54 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR $T7[ebp], 0
  0005e	8b 34 88	 mov	 esi, DWORD PTR [eax+ecx*4]
  00061	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4HA
  00066	89 b5 50 fb ff
	ff		 mov	 DWORD PTR tv5456[ebp], esi
  0006c	3b 86 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[esi]
  00072	0f 8f e9 10 00
	00		 jg	 $LN1184@LoadRaceMo
$LN2@LoadRaceMo:

; 226  : 	static bool s_isInit=false;
; 227  : 
; 228  : 	if (!s_isInit)

  00078	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?s_isInit@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4_NA, 0
  0007f	0f 85 b0 0b 00
	00		 jne	 $LN13@LoadRaceMo

; 229  : 	{
; 230  : 		s_isInit=true;
; 231  : 
; 232  : 		s_kMap_stType_dwIndex.emplace("SPAWN", CRaceMotionData::NAME_SPAWN);

  00085	8d 85 78 fb ff
	ff		 lea	 eax, DWORD PTR $T107[ebp]
  0008b	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?s_isInit@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4_NA, 1
  00092	50		 push	 eax
  00093	68 00 00 00 00	 push	 OFFSET ??_C@_05NIJFIOCI@SPAWN@
  00098	8d 85 68 fb ff
	ff		 lea	 eax, DWORD PTR $T57[ebp]
  0009e	c7 85 78 fb ff
	ff 19 00 00 00	 mov	 DWORD PTR $T107[ebp], 25 ; 00000019H
  000a8	50		 push	 eax
  000a9	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  000ae	e8 00 00 00 00	 call	 ??$emplace@AAY05$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY05$$CBD$$QAW4EName@CRaceMotionData@@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[6],enum CRaceMotionData::EName>

; 233  : 		s_kMap_stType_dwIndex.emplace("WAIT", CRaceMotionData::NAME_WAIT);

  000b3	8d 85 78 fb ff
	ff		 lea	 eax, DWORD PTR $T106[ebp]
  000b9	c7 85 78 fb ff
	ff 01 00 00 00	 mov	 DWORD PTR $T106[ebp], 1
  000c3	50		 push	 eax
  000c4	68 00 00 00 00	 push	 OFFSET ??_C@_04DBNKAKHO@WAIT@
  000c9	8d 85 68 fb ff
	ff		 lea	 eax, DWORD PTR $T56[ebp]
  000cf	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  000d4	50		 push	 eax
  000d5	e8 00 00 00 00	 call	 ??$emplace@AAY04$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY04$$CBD$$QAW4EName@CRaceMotionData@@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[5],enum CRaceMotionData::EName>

; 234  : 		s_kMap_stType_dwIndex.emplace("WAIT1", CRaceMotionData::NAME_WAIT);

  000da	8d 85 78 fb ff
	ff		 lea	 eax, DWORD PTR $T105[ebp]
  000e0	c7 85 78 fb ff
	ff 01 00 00 00	 mov	 DWORD PTR $T105[ebp], 1
  000ea	50		 push	 eax
  000eb	68 00 00 00 00	 push	 OFFSET ??_C@_05HBNBIBID@WAIT1@
  000f0	8d 85 68 fb ff
	ff		 lea	 eax, DWORD PTR $T55[ebp]
  000f6	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  000fb	50		 push	 eax
  000fc	e8 00 00 00 00	 call	 ??$emplace@AAY05$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY05$$CBD$$QAW4EName@CRaceMotionData@@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[6],enum CRaceMotionData::EName>

; 235  : 		s_kMap_stType_dwIndex.emplace("WAIT2", CRaceMotionData::NAME_WAIT);

  00101	8d 85 78 fb ff
	ff		 lea	 eax, DWORD PTR $T104[ebp]
  00107	c7 85 78 fb ff
	ff 01 00 00 00	 mov	 DWORD PTR $T104[ebp], 1
  00111	50		 push	 eax
  00112	68 00 00 00 00	 push	 OFFSET ??_C@_05FKPMNCEA@WAIT2@
  00117	8d 85 68 fb ff
	ff		 lea	 eax, DWORD PTR $T54[ebp]
  0011d	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  00122	50		 push	 eax
  00123	e8 00 00 00 00	 call	 ??$emplace@AAY05$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY05$$CBD$$QAW4EName@CRaceMotionData@@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[6],enum CRaceMotionData::EName>

; 236  : 		s_kMap_stType_dwIndex.emplace("WALK", CRaceMotionData::NAME_WALK);

  00128	8d 85 78 fb ff
	ff		 lea	 eax, DWORD PTR $T103[ebp]
  0012e	c7 85 78 fb ff
	ff 02 00 00 00	 mov	 DWORD PTR $T103[ebp], 2
  00138	50		 push	 eax
  00139	68 00 00 00 00	 push	 OFFSET ??_C@_04PKELMGAL@WALK@
  0013e	8d 85 68 fb ff
	ff		 lea	 eax, DWORD PTR $T53[ebp]
  00144	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  00149	50		 push	 eax
  0014a	e8 00 00 00 00	 call	 ??$emplace@AAY04$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY04$$CBD$$QAW4EName@CRaceMotionData@@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[5],enum CRaceMotionData::EName>

; 237  : 		s_kMap_stType_dwIndex.emplace("WALK1", CRaceMotionData::NAME_WALK);

  0014f	8d 85 78 fb ff
	ff		 lea	 eax, DWORD PTR $T102[ebp]
  00155	c7 85 78 fb ff
	ff 02 00 00 00	 mov	 DWORD PTR $T102[ebp], 2
  0015f	50		 push	 eax
  00160	68 00 00 00 00	 push	 OFFSET ??_C@_05FBHFJFPM@WALK1@
  00165	8d 85 68 fb ff
	ff		 lea	 eax, DWORD PTR $T52[ebp]
  0016b	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  00170	50		 push	 eax
  00171	e8 00 00 00 00	 call	 ??$emplace@AAY05$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY05$$CBD$$QAW4EName@CRaceMotionData@@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[6],enum CRaceMotionData::EName>

; 238  : 		s_kMap_stType_dwIndex.emplace("WALK2", CRaceMotionData::NAME_WALK);

  00176	8d 85 78 fb ff
	ff		 lea	 eax, DWORD PTR $T101[ebp]
  0017c	c7 85 78 fb ff
	ff 02 00 00 00	 mov	 DWORD PTR $T101[ebp], 2
  00186	50		 push	 eax
  00187	68 00 00 00 00	 push	 OFFSET ??_C@_05HKFIMGDP@WALK2@
  0018c	8d 85 68 fb ff
	ff		 lea	 eax, DWORD PTR $T51[ebp]
  00192	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  00197	50		 push	 eax
  00198	e8 00 00 00 00	 call	 ??$emplace@AAY05$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY05$$CBD$$QAW4EName@CRaceMotionData@@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[6],enum CRaceMotionData::EName>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1011 :             _Tree_temp_node<_Alnode> _Newnode(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...);

  0019d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1144 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  001a3	c7 85 74 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR __Newnode$59[ebp], OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A

; 87   :         return ::operator new(_Bytes);

  001ad	6a 2c		 push	 44			; 0000002cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  001af	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1151 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  001b6	c7 85 78 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR __Newnode$59[ebp+4], 0

; 87   :         return ::operator new(_Bytes);

  001c0	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 245  :         return _Traits::_Allocate(_Bytes);

  001c5	8b c8		 mov	 ecx, eax

; 87   :         return ::operator new(_Bytes);

  001c7	83 c4 04	 add	 esp, 4

; 1152 :         _Ptr = _Al.allocate(1);

  001ca	89 8d 78 fb ff
	ff		 mov	 DWORD PTR __Newnode$59[ebp+4], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  001d0	8d 79 10	 lea	 edi, DWORD PTR [ecx+16]
  001d3	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  001d6	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2629 :             _My_data._Mysize = _Count;

  001d9	c7 47 10 03 00
	00 00		 mov	 DWORD PTR [edi+16], 3

; 2630 :             _My_data._Myres  = _BUF_SIZE - 1;

  001e0	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  001e7	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_03LLDCGJBK@RUN@
  001ed	66 89 07	 mov	 WORD PTR [edi], ax
  001f0	a0 02 00 00 00	 mov	 al, BYTE PTR ??_C@_03LLDCGJBK@RUN@+2
  001f5	88 47 02	 mov	 BYTE PTR [edi+2], al

; 2637 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  001f8	c6 47 03 00	 mov	 BYTE PTR [edi+3], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  001fc	c7 47 18 03 00
	00 00		 mov	 DWORD PTR [edi+24], 3
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  00203	89 31		 mov	 DWORD PTR [ecx], esi

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  00205	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  00208	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 811  :         this->_Ptr->_Color = _Red;

  0020b	66 c7 41 0c 00
	00		 mov	 WORD PTR [ecx+12], 0

; 1016 :                 _Loc = _Find_lower_bound(_Keyval);

  00211	57		 push	 edi
  00212	8d 85 3c fb ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  00218	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
  0021f	50		 push	 eax
  00220	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  00225	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  0022a	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0022e	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00231	66 0f d6 85 64
	fb ff ff	 movq	 QWORD PTR __Loc$8[ebp], xmm0

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00239	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0023d	75 35		 jne	 SHORT $LN939@LoadRaceMo
  0023f	83 c0 10	 add	 eax, 16			; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  00242	50		 push	 eax
  00243	57		 push	 edi
  00244	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  00249	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0024c	84 c0		 test	 al, al
  0024e	75 24		 jne	 SHORT $LN939@LoadRaceMo

; 823  :             _Alnode_traits::destroy(this->_Al, _STD addressof(this->_Ptr->_Myval));

  00250	57		 push	 edi
  00251	68 00 00 00 00	 push	 OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A

; 1018 :                     return {_Loc._Bound, false};

  00256	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 823  :             _Alnode_traits::destroy(this->_Al, _STD addressof(this->_Ptr->_Myval));

  0025d	e8 00 00 00 00	 call	 ??$destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >::destroy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00262	6a 2c		 push	 44			; 0000002cH
  00264	ff b5 78 fb ff
	ff		 push	 DWORD PTR __Newnode$59[ebp+4]
  0026a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0026f	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1018 :                     return {_Loc._Bound, false};

  00272	eb 33		 jmp	 SHORT $LN1080@LoadRaceMo
$LN939@LoadRaceMo:

; 1631 :         if (max_size() == _Get_scary()->_Mysize) {

  00274	81 3d 04 00 00
	00 5d 74 d1 05	 cmp	 DWORD PTR ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A+4, 97612893 ; 05d1745dH
  0027e	0f 84 3b 0f 00
	00		 je	 $LN1185@LoadRaceMo

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00284	ff b5 78 fb ff
	ff		 push	 DWORD PTR __Newnode$59[ebp+4]
  0028a	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  0028f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00296	ff b5 68 fb ff
	ff		 push	 DWORD PTR __Loc$8[ebp+4]
  0029c	ff b5 64 fb ff
	ff		 push	 DWORD PTR __Loc$8[ebp]
  002a2	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> > >::_Insert_node
$LN1080@LoadRaceMo:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 240  : 		s_kMap_stType_dwIndex.emplace("RUN1", CRaceMotionData::NAME_RUN);

  002a7	8d 85 78 fb ff
	ff		 lea	 eax, DWORD PTR $T100[ebp]
  002ad	c7 85 78 fb ff
	ff 03 00 00 00	 mov	 DWORD PTR $T100[ebp], 3
  002b7	50		 push	 eax
  002b8	68 00 00 00 00	 push	 OFFSET ??_C@_04DLIEMMKB@RUN1@
  002bd	8d 85 68 fb ff
	ff		 lea	 eax, DWORD PTR $T50[ebp]
  002c3	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  002c8	50		 push	 eax
  002c9	e8 00 00 00 00	 call	 ??$emplace@AAY04$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY04$$CBD$$QAW4EName@CRaceMotionData@@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[5],enum CRaceMotionData::EName>

; 241  : 		s_kMap_stType_dwIndex.emplace("RUN2", CRaceMotionData::NAME_RUN);

  002ce	8d 85 78 fb ff
	ff		 lea	 eax, DWORD PTR $T99[ebp]
  002d4	c7 85 78 fb ff
	ff 03 00 00 00	 mov	 DWORD PTR $T99[ebp], 3
  002de	50		 push	 eax
  002df	68 00 00 00 00	 push	 OFFSET ??_C@_04BAKJJPGC@RUN2@
  002e4	8d 85 68 fb ff
	ff		 lea	 eax, DWORD PTR $T49[ebp]
  002ea	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  002ef	50		 push	 eax
  002f0	e8 00 00 00 00	 call	 ??$emplace@AAY04$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY04$$CBD$$QAW4EName@CRaceMotionData@@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[5],enum CRaceMotionData::EName>

; 242  : 		s_kMap_stType_dwIndex.emplace("STOP", CRaceMotionData::NAME_STOP);

  002f5	8d 85 78 fb ff
	ff		 lea	 eax, DWORD PTR $T98[ebp]
  002fb	c7 85 78 fb ff
	ff 20 00 00 00	 mov	 DWORD PTR $T98[ebp], 32	; 00000020H
  00305	50		 push	 eax
  00306	68 00 00 00 00	 push	 OFFSET ??_C@_04MDHMLCKF@STOP@
  0030b	8d 85 68 fb ff
	ff		 lea	 eax, DWORD PTR $T48[ebp]
  00311	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  00316	50		 push	 eax
  00317	e8 00 00 00 00	 call	 ??$emplace@AAY04$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY04$$CBD$$QAW4EName@CRaceMotionData@@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[5],enum CRaceMotionData::EName>

; 243  : 		s_kMap_stType_dwIndex.emplace("DEAD", CRaceMotionData::NAME_DEAD);

  0031c	8d 85 78 fb ff
	ff		 lea	 eax, DWORD PTR $T97[ebp]
  00322	c7 85 78 fb ff
	ff 0b 00 00 00	 mov	 DWORD PTR $T97[ebp], 11	; 0000000bH
  0032c	50		 push	 eax
  0032d	68 00 00 00 00	 push	 OFFSET ??_C@_04NNCJDDJC@DEAD@
  00332	8d 85 68 fb ff
	ff		 lea	 eax, DWORD PTR $T47[ebp]
  00338	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  0033d	50		 push	 eax
  0033e	e8 00 00 00 00	 call	 ??$emplace@AAY04$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY04$$CBD$$QAW4EName@CRaceMotionData@@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[5],enum CRaceMotionData::EName>

; 244  : 		s_kMap_stType_dwIndex.emplace("COMBO_ATTACK", CRaceMotionData::NAME_COMBO_ATTACK_1);

  00343	8d 85 78 fb ff
	ff		 lea	 eax, DWORD PTR $T96[ebp]
  00349	c7 85 78 fb ff
	ff 0e 00 00 00	 mov	 DWORD PTR $T96[ebp], 14	; 0000000eH
  00353	50		 push	 eax
  00354	68 00 00 00 00	 push	 OFFSET ??_C@_0N@ECIMAFHI@COMBO_ATTACK@
  00359	8d 85 68 fb ff
	ff		 lea	 eax, DWORD PTR $T46[ebp]
  0035f	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  00364	50		 push	 eax
  00365	e8 00 00 00 00	 call	 ??$emplace@AAY0N@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0N@$$CBD$$QAW4EName@CRaceMotionData@@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[13],enum CRaceMotionData::EName>

; 245  : 		s_kMap_stType_dwIndex.emplace("COMBO_ATTACK1", CRaceMotionData::NAME_COMBO_ATTACK_2);

  0036a	8d 85 78 fb ff
	ff		 lea	 eax, DWORD PTR $T95[ebp]
  00370	c7 85 78 fb ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T95[ebp], 15	; 0000000fH
  0037a	50		 push	 eax
  0037b	68 00 00 00 00	 push	 OFFSET ??_C@_0O@JIMBHCLJ@COMBO_ATTACK1@
  00380	8d 85 68 fb ff
	ff		 lea	 eax, DWORD PTR $T45[ebp]
  00386	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  0038b	50		 push	 eax
  0038c	e8 00 00 00 00	 call	 ??$emplace@AAY0O@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0O@$$CBD$$QAW4EName@CRaceMotionData@@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[14],enum CRaceMotionData::EName>

; 246  : 		s_kMap_stType_dwIndex.emplace("COMBO_ATTACK2", CRaceMotionData::NAME_COMBO_ATTACK_3);

  00391	8d 85 78 fb ff
	ff		 lea	 eax, DWORD PTR $T94[ebp]
  00397	c7 85 78 fb ff
	ff 10 00 00 00	 mov	 DWORD PTR $T94[ebp], 16	; 00000010H
  003a1	50		 push	 eax
  003a2	68 00 00 00 00	 push	 OFFSET ??_C@_0O@LDOMCBHK@COMBO_ATTACK2@
  003a7	8d 85 68 fb ff
	ff		 lea	 eax, DWORD PTR $T44[ebp]
  003ad	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  003b2	50		 push	 eax
  003b3	e8 00 00 00 00	 call	 ??$emplace@AAY0O@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0O@$$CBD$$QAW4EName@CRaceMotionData@@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[14],enum CRaceMotionData::EName>

; 247  : 		s_kMap_stType_dwIndex.emplace("NORMAL_ATTACK", CRaceMotionData::NAME_NORMAL_ATTACK);

  003b8	8d 85 78 fb ff
	ff		 lea	 eax, DWORD PTR $T93[ebp]
  003be	c7 85 78 fb ff
	ff 0d 00 00 00	 mov	 DWORD PTR $T93[ebp], 13	; 0000000dH
  003c8	50		 push	 eax
  003c9	68 00 00 00 00	 push	 OFFSET ??_C@_0O@MMNGEKGD@NORMAL_ATTACK@
  003ce	8d 85 68 fb ff
	ff		 lea	 eax, DWORD PTR $T43[ebp]
  003d4	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  003d9	50		 push	 eax
  003da	e8 00 00 00 00	 call	 ??$emplace@AAY0O@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0O@$$CBD$$QAW4EName@CRaceMotionData@@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[14],enum CRaceMotionData::EName>

; 248  : 		s_kMap_stType_dwIndex.emplace("NORMAL_ATTACK1", CRaceMotionData::NAME_NORMAL_ATTACK);

  003df	8d 85 78 fb ff
	ff		 lea	 eax, DWORD PTR $T92[ebp]
  003e5	c7 85 78 fb ff
	ff 0d 00 00 00	 mov	 DWORD PTR $T92[ebp], 13	; 0000000dH
  003ef	50		 push	 eax
  003f0	68 00 00 00 00	 push	 OFFSET ??_C@_0P@BCCKOBBK@NORMAL_ATTACK1@
  003f5	8d 85 68 fb ff
	ff		 lea	 eax, DWORD PTR $T42[ebp]
  003fb	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  00400	50		 push	 eax
  00401	e8 00 00 00 00	 call	 ??$emplace@AAY0P@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0P@$$CBD$$QAW4EName@CRaceMotionData@@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[15],enum CRaceMotionData::EName>

; 249  : 		s_kMap_stType_dwIndex.emplace("NORMAL_ATTACK2", CRaceMotionData::NAME_NORMAL_ATTACK);

  00406	8d 85 78 fb ff
	ff		 lea	 eax, DWORD PTR $T91[ebp]
  0040c	c7 85 78 fb ff
	ff 0d 00 00 00	 mov	 DWORD PTR $T91[ebp], 13	; 0000000dH
  00416	50		 push	 eax
  00417	68 00 00 00 00	 push	 OFFSET ??_C@_0P@DJAHLCNJ@NORMAL_ATTACK2@
  0041c	8d 85 68 fb ff
	ff		 lea	 eax, DWORD PTR $T41[ebp]
  00422	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  00427	50		 push	 eax
  00428	e8 00 00 00 00	 call	 ??$emplace@AAY0P@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0P@$$CBD$$QAW4EName@CRaceMotionData@@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[15],enum CRaceMotionData::EName>

; 250  : 		s_kMap_stType_dwIndex.emplace("FRONT_DAMAGE", CRaceMotionData::NAME_DAMAGE);

  0042d	c7 85 78 fb ff
	ff 05 00 00 00	 mov	 DWORD PTR $T90[ebp], 5
  00437	8d 85 78 fb ff
	ff		 lea	 eax, DWORD PTR $T90[ebp]
  0043d	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  00442	50		 push	 eax
  00443	68 00 00 00 00	 push	 OFFSET ??_C@_0N@FEIIBDLE@FRONT_DAMAGE@
  00448	8d 85 68 fb ff
	ff		 lea	 eax, DWORD PTR $T40[ebp]
  0044e	50		 push	 eax
  0044f	e8 00 00 00 00	 call	 ??$emplace@AAY0N@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0N@$$CBD$$QAW4EName@CRaceMotionData@@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[13],enum CRaceMotionData::EName>

; 251  : 		s_kMap_stType_dwIndex.emplace("FRONT_DAMAGE1", CRaceMotionData::NAME_DAMAGE);

  00454	8d 85 78 fb ff
	ff		 lea	 eax, DWORD PTR $T89[ebp]
  0045a	c7 85 78 fb ff
	ff 05 00 00 00	 mov	 DWORD PTR $T89[ebp], 5
  00464	50		 push	 eax
  00465	68 00 00 00 00	 push	 OFFSET ??_C@_0O@KAFPIDE@FRONT_DAMAGE1@
  0046a	8d 85 68 fb ff
	ff		 lea	 eax, DWORD PTR $T39[ebp]
  00470	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  00475	50		 push	 eax
  00476	e8 00 00 00 00	 call	 ??$emplace@AAY0O@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0O@$$CBD$$QAW4EName@CRaceMotionData@@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[14],enum CRaceMotionData::EName>

; 252  : 		s_kMap_stType_dwIndex.emplace("FRONT_DAMAGE2", CRaceMotionData::NAME_DAMAGE);

  0047b	8d 85 78 fb ff
	ff		 lea	 eax, DWORD PTR $T88[ebp]
  00481	c7 85 78 fb ff
	ff 05 00 00 00	 mov	 DWORD PTR $T88[ebp], 5
  0048b	50		 push	 eax
  0048c	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CBCIKLPH@FRONT_DAMAGE2@
  00491	8d 85 68 fb ff
	ff		 lea	 eax, DWORD PTR $T38[ebp]
  00497	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  0049c	50		 push	 eax
  0049d	e8 00 00 00 00	 call	 ??$emplace@AAY0O@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0O@$$CBD$$QAW4EName@CRaceMotionData@@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[14],enum CRaceMotionData::EName>

; 253  : 		s_kMap_stType_dwIndex.emplace("FRONT_DAMAGE3", CRaceMotionData::NAME_DAMAGE);

  004a2	8d 85 78 fb ff
	ff		 lea	 eax, DWORD PTR $T87[ebp]
  004a8	c7 85 78 fb ff
	ff 05 00 00 00	 mov	 DWORD PTR $T87[ebp], 5
  004b2	50		 push	 eax
  004b3	68 00 00 00 00	 push	 OFFSET ??_C@_0O@DIDDJKLG@FRONT_DAMAGE3@
  004b8	8d 85 68 fb ff
	ff		 lea	 eax, DWORD PTR $T37[ebp]
  004be	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  004c3	50		 push	 eax
  004c4	e8 00 00 00 00	 call	 ??$emplace@AAY0O@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0O@$$CBD$$QAW4EName@CRaceMotionData@@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[14],enum CRaceMotionData::EName>

; 254  : 		s_kMap_stType_dwIndex.emplace("FRONT_DEAD", CRaceMotionData::NAME_DEAD);

  004c9	8d 85 78 fb ff
	ff		 lea	 eax, DWORD PTR $T86[ebp]
  004cf	c7 85 78 fb ff
	ff 0b 00 00 00	 mov	 DWORD PTR $T86[ebp], 11	; 0000000bH
  004d9	50		 push	 eax
  004da	68 00 00 00 00	 push	 OFFSET ??_C@_0L@OEOOJLDF@FRONT_DEAD@
  004df	8d 85 68 fb ff
	ff		 lea	 eax, DWORD PTR $T36[ebp]
  004e5	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  004ea	50		 push	 eax
  004eb	e8 00 00 00 00	 call	 ??$emplace@AAY0L@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0L@$$CBD$$QAW4EName@CRaceMotionData@@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[11],enum CRaceMotionData::EName>

; 255  : 		s_kMap_stType_dwIndex.emplace("FRONT_DEAD1", CRaceMotionData::NAME_DEAD);

  004f0	8d 85 78 fb ff
	ff		 lea	 eax, DWORD PTR $T85[ebp]
  004f6	c7 85 78 fb ff
	ff 0b 00 00 00	 mov	 DWORD PTR $T85[ebp], 11	; 0000000bH
  00500	50		 push	 eax
  00501	68 00 00 00 00	 push	 OFFSET ??_C@_0M@JAAKCNAK@FRONT_DEAD1@
  00506	8d 85 68 fb ff
	ff		 lea	 eax, DWORD PTR $T35[ebp]
  0050c	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  00511	50		 push	 eax
  00512	e8 00 00 00 00	 call	 ??$emplace@AAY0M@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0M@$$CBD$$QAW4EName@CRaceMotionData@@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[12],enum CRaceMotionData::EName>

; 256  : 		s_kMap_stType_dwIndex.emplace("FRONT_DEAD2", CRaceMotionData::NAME_DEAD);

  00517	8d 85 78 fb ff
	ff		 lea	 eax, DWORD PTR $T84[ebp]
  0051d	c7 85 78 fb ff
	ff 0b 00 00 00	 mov	 DWORD PTR $T84[ebp], 11	; 0000000bH
  00527	50		 push	 eax
  00528	68 00 00 00 00	 push	 OFFSET ??_C@_0M@LLCHHOMJ@FRONT_DEAD2@
  0052d	8d 85 68 fb ff
	ff		 lea	 eax, DWORD PTR $T34[ebp]
  00533	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  00538	50		 push	 eax
  00539	e8 00 00 00 00	 call	 ??$emplace@AAY0M@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0M@$$CBD$$QAW4EName@CRaceMotionData@@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[12],enum CRaceMotionData::EName>

; 257  : 		s_kMap_stType_dwIndex.emplace("FRONT_KNOCKDOWN", CRaceMotionData::NAME_DAMAGE_FLYING);

  0053e	8d 85 78 fb ff
	ff		 lea	 eax, DWORD PTR $T83[ebp]
  00544	c7 85 78 fb ff
	ff 06 00 00 00	 mov	 DWORD PTR $T83[ebp], 6
  0054e	50		 push	 eax
  0054f	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@DFAPGFAO@FRONT_KNOCKDOWN@
  00554	8d 85 68 fb ff
	ff		 lea	 eax, DWORD PTR $T33[ebp]
  0055a	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  0055f	50		 push	 eax
  00560	e8 00 00 00 00	 call	 ??$emplace@AAY0BA@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0BA@$$CBD$$QAW4EName@CRaceMotionData@@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[16],enum CRaceMotionData::EName>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1011 :             _Tree_temp_node<_Alnode> _Newnode(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...);

  00565	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1144 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  0056b	c7 85 74 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR __Newnode$62[ebp], OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A

; 87   :         return ::operator new(_Bytes);

  00575	6a 2c		 push	 44			; 0000002cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00577	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1151 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0057e	c7 85 78 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR __Newnode$62[ebp+4], 0

; 87   :         return ::operator new(_Bytes);

  00588	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 1152 :         _Ptr = _Al.allocate(1);

  0058d	89 85 78 fb ff
	ff		 mov	 DWORD PTR __Newnode$62[ebp+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00593	8d 78 10	 lea	 edi, DWORD PTR [eax+16]
  00596	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 5
  0059d	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  005a0	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  005a3	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  005aa	6a 20		 push	 32			; 00000020H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2650 :         _My_data._Myres               = _BUF_SIZE - 1;

  005ac	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  005b3	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  005b8	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2657 :         _My_data._Mysize = _Count;

  005bb	89 07		 mov	 DWORD PTR [edi], eax
  005bd	c7 47 10 10 00
	00 00		 mov	 DWORD PTR [edi+16], 16	; 00000010H

; 2658 :         _My_data._Myres  = _New_capacity;

  005c4	c7 47 14 1f 00
	00 00		 mov	 DWORD PTR [edi+20], 31	; 0000001fH

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  005cb	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_0BB@CBNACFNA@FRONT_KNOCKDOWN1@
  005d2	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 2664 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  005d5	c6 40 10 00	 mov	 BYTE PTR [eax+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  005d9	8b 85 78 fb ff
	ff		 mov	 eax, DWORD PTR __Newnode$62[ebp+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  005df	c7 47 18 06 00
	00 00		 mov	 DWORD PTR [edi+24], 6
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  005e6	89 30		 mov	 DWORD PTR [eax], esi

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  005e8	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  005eb	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 811  :         this->_Ptr->_Color = _Red;

  005ee	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0

; 1016 :                 _Loc = _Find_lower_bound(_Keyval);

  005f4	57		 push	 edi
  005f5	8d 85 3c fb ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  005fb	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 6
  00602	50		 push	 eax
  00603	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  00608	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  0060d	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00611	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00614	66 0f d6 85 64
	fb ff ff	 movq	 QWORD PTR __Loc$11[ebp], xmm0

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0061c	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00620	75 6f		 jne	 SHORT $LN297@LoadRaceMo
  00622	83 c0 10	 add	 eax, 16			; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  00625	50		 push	 eax
  00626	57		 push	 edi
  00627	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  0062c	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0062f	84 c0		 test	 al, al
  00631	75 5e		 jne	 SHORT $LN297@LoadRaceMo
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00633	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1018 :                     return {_Loc._Bound, false};

  00636	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4832 :         if (_My_data._Large_string_engaged()) {

  0063d	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00640	72 2b		 jb	 SHORT $LN402@LoadRaceMo

; 4833 :             _ASAN_STRING_REMOVE(*this);
; 4834 :             const pointer _Ptr = _My_data._Bx._Ptr;

  00642	8b 07		 mov	 eax, DWORD PTR [edi]

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00644	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00645	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0064b	72 16		 jb	 SHORT $LN412@LoadRaceMo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0064d	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00650	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00653	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00655	83 c0 fc	 add	 eax, -4			; fffffffcH
  00658	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0065b	0f 87 fb 0a 00
	00		 ja	 $LN279@LoadRaceMo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00661	8b c2		 mov	 eax, edx
$LN412@LoadRaceMo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00663	51		 push	 ecx
  00664	50		 push	 eax
  00665	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0066a	83 c4 08	 add	 esp, 8
$LN402@LoadRaceMo:
  0066d	8b 85 78 fb ff
	ff		 mov	 eax, DWORD PTR __Newnode$62[ebp+4]
  00673	6a 2c		 push	 44			; 0000002cH
  00675	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  00676	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  0067d	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00684	c6 07 00	 mov	 BYTE PTR [edi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00687	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0068c	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1018 :                     return {_Loc._Bound, false};

  0068f	eb 34		 jmp	 SHORT $LN522@LoadRaceMo
$LN297@LoadRaceMo:

; 1631 :         if (max_size() == _Get_scary()->_Mysize) {

  00691	81 3d 04 00 00
	00 5d 74 d1 05	 cmp	 DWORD PTR ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A+4, 97612893 ; 05d1745dH
  0069b	0f 84 23 0b 00
	00		 je	 $LN1186@LoadRaceMo

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  006a1	8b 85 78 fb ff
	ff		 mov	 eax, DWORD PTR __Newnode$62[ebp+4]
  006a7	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  006ac	50		 push	 eax
  006ad	ff b5 68 fb ff
	ff		 push	 DWORD PTR __Loc$11[ebp+4]
  006b3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  006ba	ff b5 64 fb ff
	ff		 push	 DWORD PTR __Loc$11[ebp]
  006c0	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> > >::_Insert_node
$LN522@LoadRaceMo:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 259  : 		s_kMap_stType_dwIndex.emplace("FRONT_STANDUP", CRaceMotionData::NAME_STAND_UP);

  006c5	8d 85 78 fb ff
	ff		 lea	 eax, DWORD PTR $T82[ebp]
  006cb	c7 85 78 fb ff
	ff 07 00 00 00	 mov	 DWORD PTR $T82[ebp], 7
  006d5	50		 push	 eax
  006d6	68 00 00 00 00	 push	 OFFSET ??_C@_0O@MOHKHCLN@FRONT_STANDUP@
  006db	8d 85 68 fb ff
	ff		 lea	 eax, DWORD PTR $T32[ebp]
  006e1	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  006e6	50		 push	 eax
  006e7	e8 00 00 00 00	 call	 ??$emplace@AAY0O@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0O@$$CBD$$QAW4EName@CRaceMotionData@@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[14],enum CRaceMotionData::EName>

; 260  : 		s_kMap_stType_dwIndex.emplace("FRONT_STANDUP1", CRaceMotionData::NAME_STAND_UP);

  006ec	8d 85 78 fb ff
	ff		 lea	 eax, DWORD PTR $T81[ebp]
  006f2	c7 85 78 fb ff
	ff 07 00 00 00	 mov	 DWORD PTR $T81[ebp], 7
  006fc	50		 push	 eax
  006fd	68 00 00 00 00	 push	 OFFSET ??_C@_0P@HDEDLCPB@FRONT_STANDUP1@
  00702	8d 85 68 fb ff
	ff		 lea	 eax, DWORD PTR $T31[ebp]
  00708	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  0070d	50		 push	 eax
  0070e	e8 00 00 00 00	 call	 ??$emplace@AAY0P@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0P@$$CBD$$QAW4EName@CRaceMotionData@@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[15],enum CRaceMotionData::EName>

; 261  : 		s_kMap_stType_dwIndex.emplace("BACK_DAMAGE", CRaceMotionData::NAME_DAMAGE_BACK);

  00713	8d 85 78 fb ff
	ff		 lea	 eax, DWORD PTR $T80[ebp]
  00719	c7 85 78 fb ff
	ff 08 00 00 00	 mov	 DWORD PTR $T80[ebp], 8
  00723	50		 push	 eax
  00724	68 00 00 00 00	 push	 OFFSET ??_C@_0M@OFKIBNMF@BACK_DAMAGE@
  00729	8d 85 68 fb ff
	ff		 lea	 eax, DWORD PTR $T30[ebp]
  0072f	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  00734	50		 push	 eax
  00735	e8 00 00 00 00	 call	 ??$emplace@AAY0M@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0M@$$CBD$$QAW4EName@CRaceMotionData@@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[12],enum CRaceMotionData::EName>

; 262  : 		s_kMap_stType_dwIndex.emplace("BACK_DAMAGE1", CRaceMotionData::NAME_DAMAGE_BACK);

  0073a	8d 85 78 fb ff
	ff		 lea	 eax, DWORD PTR $T79[ebp]
  00740	c7 85 78 fb ff
	ff 08 00 00 00	 mov	 DWORD PTR $T79[ebp], 8
  0074a	50		 push	 eax
  0074b	68 00 00 00 00	 push	 OFFSET ??_C@_0N@CNLGJJJA@BACK_DAMAGE1@
  00750	8d 85 68 fb ff
	ff		 lea	 eax, DWORD PTR $T29[ebp]
  00756	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  0075b	50		 push	 eax
  0075c	e8 00 00 00 00	 call	 ??$emplace@AAY0N@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0N@$$CBD$$QAW4EName@CRaceMotionData@@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[13],enum CRaceMotionData::EName>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1011 :             _Tree_temp_node<_Alnode> _Newnode(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...);

  00761	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1144 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00767	c7 85 74 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR __Newnode$61[ebp], OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A

; 87   :         return ::operator new(_Bytes);

  00771	6a 2c		 push	 44			; 0000002cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00773	c7 45 fc 07 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 7
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1151 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0077a	c7 85 78 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR __Newnode$61[ebp+4], 0

; 87   :         return ::operator new(_Bytes);

  00784	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 245  :         return _Traits::_Allocate(_Bytes);

  00789	8b c8		 mov	 ecx, eax

; 87   :         return ::operator new(_Bytes);

  0078b	83 c4 04	 add	 esp, 4

; 1152 :         _Ptr = _Al.allocate(1);

  0078e	89 8d 78 fb ff
	ff		 mov	 DWORD PTR __Newnode$61[ebp+4], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00794	8d 79 10	 lea	 edi, DWORD PTR [ecx+16]
  00797	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0079a	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2629 :             _My_data._Mysize = _Count;

  0079d	c7 47 10 09 00
	00 00		 mov	 DWORD PTR [edi+16], 9

; 2630 :             _My_data._Myres  = _BUF_SIZE - 1;

  007a4	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  007ab	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_09LHOBDCIP@BACK_DEAD@
  007b3	66 0f d6 07	 movq	 QWORD PTR [edi], xmm0
  007b7	a0 08 00 00 00	 mov	 al, BYTE PTR ??_C@_09LHOBDCIP@BACK_DEAD@+8
  007bc	88 47 08	 mov	 BYTE PTR [edi+8], al

; 2637 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  007bf	c6 47 09 00	 mov	 BYTE PTR [edi+9], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  007c3	c7 47 18 0c 00
	00 00		 mov	 DWORD PTR [edi+24], 12	; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  007ca	89 31		 mov	 DWORD PTR [ecx], esi

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  007cc	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  007cf	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 811  :         this->_Ptr->_Color = _Red;

  007d2	66 c7 41 0c 00
	00		 mov	 WORD PTR [ecx+12], 0

; 1016 :                 _Loc = _Find_lower_bound(_Keyval);

  007d8	57		 push	 edi
  007d9	8d 85 3c fb ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  007df	c7 45 fc 09 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 9
  007e6	50		 push	 eax
  007e7	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  007ec	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  007f1	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  007f5	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  007f8	66 0f d6 85 64
	fb ff ff	 movq	 QWORD PTR __Loc$10[ebp], xmm0

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00800	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00804	75 6e		 jne	 SHORT $LN535@LoadRaceMo
  00806	83 c0 10	 add	 eax, 16			; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  00809	50		 push	 eax
  0080a	57		 push	 edi
  0080b	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  00810	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00813	84 c0		 test	 al, al
  00815	75 5d		 jne	 SHORT $LN535@LoadRaceMo
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00817	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1018 :                     return {_Loc._Bound, false};

  0081a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4832 :         if (_My_data._Large_string_engaged()) {

  00821	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00824	72 2b		 jb	 SHORT $LN640@LoadRaceMo

; 4833 :             _ASAN_STRING_REMOVE(*this);
; 4834 :             const pointer _Ptr = _My_data._Bx._Ptr;

  00826	8b 07		 mov	 eax, DWORD PTR [edi]

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00828	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00829	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0082f	72 16		 jb	 SHORT $LN650@LoadRaceMo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00831	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00834	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00837	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00839	83 c0 fc	 add	 eax, -4			; fffffffcH
  0083c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0083f	0f 87 17 09 00
	00		 ja	 $LN279@LoadRaceMo

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00845	8b c2		 mov	 eax, edx
$LN650@LoadRaceMo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00847	51		 push	 ecx
  00848	50		 push	 eax
  00849	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0084e	83 c4 08	 add	 esp, 8
$LN640@LoadRaceMo:
  00851	6a 2c		 push	 44			; 0000002cH
  00853	ff b5 78 fb ff
	ff		 push	 DWORD PTR __Newnode$61[ebp+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  00859	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  00860	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00867	c6 07 00	 mov	 BYTE PTR [edi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  0086a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0086f	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1018 :                     return {_Loc._Bound, false};

  00872	eb 33		 jmp	 SHORT $LN760@LoadRaceMo
$LN535@LoadRaceMo:

; 1631 :         if (max_size() == _Get_scary()->_Mysize) {

  00874	81 3d 04 00 00
	00 5d 74 d1 05	 cmp	 DWORD PTR ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A+4, 97612893 ; 05d1745dH
  0087e	0f 84 45 09 00
	00		 je	 $LN1187@LoadRaceMo

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00884	ff b5 78 fb ff
	ff		 push	 DWORD PTR __Newnode$61[ebp+4]
  0088a	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  0088f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00896	ff b5 68 fb ff
	ff		 push	 DWORD PTR __Loc$10[ebp+4]
  0089c	ff b5 64 fb ff
	ff		 push	 DWORD PTR __Loc$10[ebp]
  008a2	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> > >::_Insert_node
$LN760@LoadRaceMo:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 264  : 		s_kMap_stType_dwIndex.emplace("BACK_DEAD1", CRaceMotionData::NAME_DEAD_BACK);

  008a7	8d 85 78 fb ff
	ff		 lea	 eax, DWORD PTR $T78[ebp]
  008ad	c7 85 78 fb ff
	ff 0c 00 00 00	 mov	 DWORD PTR $T78[ebp], 12	; 0000000cH
  008b7	50		 push	 eax
  008b8	68 00 00 00 00	 push	 OFFSET ??_C@_0L@LLONHIDB@BACK_DEAD1@
  008bd	8d 85 68 fb ff
	ff		 lea	 eax, DWORD PTR $T28[ebp]
  008c3	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  008c8	50		 push	 eax
  008c9	e8 00 00 00 00	 call	 ??$emplace@AAY0L@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0L@$$CBD$$QAW4EName@CRaceMotionData@@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[11],enum CRaceMotionData::EName>

; 265  : 		s_kMap_stType_dwIndex.emplace("BACK_DEAD2", CRaceMotionData::NAME_DEAD_BACK);

  008ce	8d 85 78 fb ff
	ff		 lea	 eax, DWORD PTR $T77[ebp]
  008d4	c7 85 78 fb ff
	ff 0c 00 00 00	 mov	 DWORD PTR $T77[ebp], 12	; 0000000cH
  008de	50		 push	 eax
  008df	68 00 00 00 00	 push	 OFFSET ??_C@_0L@JAMACLPC@BACK_DEAD2@
  008e4	8d 85 68 fb ff
	ff		 lea	 eax, DWORD PTR $T27[ebp]
  008ea	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  008ef	50		 push	 eax
  008f0	e8 00 00 00 00	 call	 ??$emplace@AAY0L@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0L@$$CBD$$QAW4EName@CRaceMotionData@@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[11],enum CRaceMotionData::EName>

; 266  : 		s_kMap_stType_dwIndex.emplace("BACK_KNOCKDOWN", CRaceMotionData::NAME_DAMAGE_FLYING_BACK);

  008f5	8d 85 78 fb ff
	ff		 lea	 eax, DWORD PTR $T76[ebp]
  008fb	c7 85 78 fb ff
	ff 09 00 00 00	 mov	 DWORD PTR $T76[ebp], 9
  00905	50		 push	 eax
  00906	68 00 00 00 00	 push	 OFFSET ??_C@_0P@MFNBGKJO@BACK_KNOCKDOWN@
  0090b	8d 85 68 fb ff
	ff		 lea	 eax, DWORD PTR $T26[ebp]
  00911	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  00916	50		 push	 eax
  00917	e8 00 00 00 00	 call	 ??$emplace@AAY0P@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0P@$$CBD$$QAW4EName@CRaceMotionData@@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[15],enum CRaceMotionData::EName>

; 267  : 		s_kMap_stType_dwIndex.emplace("BACK_KNOCKDOWN1", CRaceMotionData::NAME_DAMAGE_FLYING_BACK);

  0091c	8d 85 78 fb ff
	ff		 lea	 eax, DWORD PTR $T75[ebp]
  00922	c7 85 78 fb ff
	ff 09 00 00 00	 mov	 DWORD PTR $T75[ebp], 9
  0092c	50		 push	 eax
  0092d	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@NBCPGIJL@BACK_KNOCKDOWN1@
  00932	8d 85 68 fb ff
	ff		 lea	 eax, DWORD PTR $T25[ebp]
  00938	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  0093d	50		 push	 eax
  0093e	e8 00 00 00 00	 call	 ??$emplace@AAY0BA@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0BA@$$CBD$$QAW4EName@CRaceMotionData@@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[16],enum CRaceMotionData::EName>

; 268  : 		s_kMap_stType_dwIndex.emplace("BACK_STANDUP", CRaceMotionData::NAME_STAND_UP_BACK);

  00943	8d 85 78 fb ff
	ff		 lea	 eax, DWORD PTR $T74[ebp]
  00949	c7 85 78 fb ff
	ff 0a 00 00 00	 mov	 DWORD PTR $T74[ebp], 10	; 0000000aH
  00953	50		 push	 eax
  00954	68 00 00 00 00	 push	 OFFSET ??_C@_0N@OJMJBDBJ@BACK_STANDUP@
  00959	8d 85 68 fb ff
	ff		 lea	 eax, DWORD PTR $T24[ebp]
  0095f	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  00964	50		 push	 eax
  00965	e8 00 00 00 00	 call	 ??$emplace@AAY0N@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0N@$$CBD$$QAW4EName@CRaceMotionData@@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[13],enum CRaceMotionData::EName>

; 269  : 		s_kMap_stType_dwIndex.emplace("BACK_STANDUP1", CRaceMotionData::NAME_STAND_UP_BACK);

  0096a	8d 85 78 fb ff
	ff		 lea	 eax, DWORD PTR $T73[ebp]
  00970	c7 85 78 fb ff
	ff 0a 00 00 00	 mov	 DWORD PTR $T73[ebp], 10	; 0000000aH
  0097a	50		 push	 eax
  0097b	68 00 00 00 00	 push	 OFFSET ??_C@_0O@KCNPGGGB@BACK_STANDUP1@
  00980	8d 85 68 fb ff
	ff		 lea	 eax, DWORD PTR $T23[ebp]
  00986	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  0098b	50		 push	 eax
  0098c	e8 00 00 00 00	 call	 ??$emplace@AAY0O@$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY0O@$$CBD$$QAW4EName@CRaceMotionData@@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[14],enum CRaceMotionData::EName>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1011 :             _Tree_temp_node<_Alnode> _Newnode(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...);

  00991	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1144 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00997	c7 85 74 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR __Newnode$60[ebp], OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A

; 87   :         return ::operator new(_Bytes);

  009a1	6a 2c		 push	 44			; 0000002cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  009a3	c7 45 fc 0a 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 10 ; 0000000aH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1151 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  009aa	c7 85 78 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR __Newnode$60[ebp+4], 0

; 87   :         return ::operator new(_Bytes);

  009b4	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 245  :         return _Traits::_Allocate(_Bytes);

  009b9	8b c8		 mov	 ecx, eax

; 87   :         return ::operator new(_Bytes);

  009bb	83 c4 04	 add	 esp, 4

; 1152 :         _Ptr = _Al.allocate(1);

  009be	89 8d 78 fb ff
	ff		 mov	 DWORD PTR __Newnode$60[ebp+4], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  009c4	8d 79 10	 lea	 edi, DWORD PTR [ecx+16]
  009c7	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  009ca	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2629 :             _My_data._Mysize = _Count;

  009cd	c7 47 10 07 00
	00 00		 mov	 DWORD PTR [edi+16], 7

; 2630 :             _My_data._Myres  = _BUF_SIZE - 1;

  009d4	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  009db	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_07OJOPHEAL@SPECIAL@
  009e0	89 07		 mov	 DWORD PTR [edi], eax
  009e2	66 a1 04 00 00
	00		 mov	 ax, WORD PTR ??_C@_07OJOPHEAL@SPECIAL@+4
  009e8	66 89 47 04	 mov	 WORD PTR [edi+4], ax
  009ec	a0 06 00 00 00	 mov	 al, BYTE PTR ??_C@_07OJOPHEAL@SPECIAL@+6
  009f1	88 47 06	 mov	 BYTE PTR [edi+6], al

; 2637 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  009f4	c6 47 07 00	 mov	 BYTE PTR [edi+7], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  009f8	c7 47 18 21 00
	00 00		 mov	 DWORD PTR [edi+24], 33	; 00000021H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  009ff	89 31		 mov	 DWORD PTR [ecx], esi

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  00a01	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  00a04	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 811  :         this->_Ptr->_Color = _Red;

  00a07	66 c7 41 0c 00
	00		 mov	 WORD PTR [ecx+12], 0

; 1016 :                 _Loc = _Find_lower_bound(_Keyval);

  00a0d	57		 push	 edi
  00a0e	8d 85 3c fb ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  00a14	c7 45 fc 0c 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 12 ; 0000000cH
  00a1b	50		 push	 eax
  00a1c	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  00a21	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  00a26	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00a2a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00a2d	66 0f d6 85 64
	fb ff ff	 movq	 QWORD PTR __Loc$9[ebp], xmm0

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00a35	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00a39	75 35		 jne	 SHORT $LN773@LoadRaceMo
  00a3b	83 c0 10	 add	 eax, 16			; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  00a3e	50		 push	 eax
  00a3f	57		 push	 edi
  00a40	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  00a45	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00a48	84 c0		 test	 al, al
  00a4a	75 24		 jne	 SHORT $LN773@LoadRaceMo

; 823  :             _Alnode_traits::destroy(this->_Al, _STD addressof(this->_Ptr->_Myval));

  00a4c	57		 push	 edi
  00a4d	68 00 00 00 00	 push	 OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A

; 1018 :                     return {_Loc._Bound, false};

  00a52	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 823  :             _Alnode_traits::destroy(this->_Al, _STD addressof(this->_Ptr->_Myval));

  00a59	e8 00 00 00 00	 call	 ??$destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >::destroy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00a5e	6a 2c		 push	 44			; 0000002cH
  00a60	ff b5 78 fb ff
	ff		 push	 DWORD PTR __Newnode$60[ebp+4]
  00a66	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00a6b	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1018 :                     return {_Loc._Bound, false};

  00a6e	eb 33		 jmp	 SHORT $LN914@LoadRaceMo
$LN773@LoadRaceMo:

; 1631 :         if (max_size() == _Get_scary()->_Mysize) {

  00a70	81 3d 04 00 00
	00 5d 74 d1 05	 cmp	 DWORD PTR ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A+4, 97612893 ; 05d1745dH
  00a7a	0f 84 4e 07 00
	00		 je	 $LN1188@LoadRaceMo

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00a80	ff b5 78 fb ff
	ff		 push	 DWORD PTR __Newnode$60[ebp+4]
  00a86	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  00a8b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00a92	ff b5 68 fb ff
	ff		 push	 DWORD PTR __Loc$9[ebp+4]
  00a98	ff b5 64 fb ff
	ff		 push	 DWORD PTR __Loc$9[ebp]
  00a9e	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> > >::_Insert_node
$LN914@LoadRaceMo:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 271  : 		s_kMap_stType_dwIndex.emplace("SPECIAL1", CRaceMotionData::NAME_SPECIAL_2);

  00aa3	8d 85 78 fb ff
	ff		 lea	 eax, DWORD PTR $T72[ebp]
  00aa9	c7 85 78 fb ff
	ff 22 00 00 00	 mov	 DWORD PTR $T72[ebp], 34	; 00000022H
  00ab3	50		 push	 eax
  00ab4	68 00 00 00 00	 push	 OFFSET ??_C@_08FBGGDBEO@SPECIAL1@
  00ab9	8d 85 68 fb ff
	ff		 lea	 eax, DWORD PTR $T22[ebp]
  00abf	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  00ac4	50		 push	 eax
  00ac5	e8 00 00 00 00	 call	 ??$emplace@AAY08$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY08$$CBD$$QAW4EName@CRaceMotionData@@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[9],enum CRaceMotionData::EName>

; 272  : 		s_kMap_stType_dwIndex.emplace("SPECIAL2", CRaceMotionData::NAME_SPECIAL_3);

  00aca	8d 85 78 fb ff
	ff		 lea	 eax, DWORD PTR $T71[ebp]
  00ad0	c7 85 78 fb ff
	ff 23 00 00 00	 mov	 DWORD PTR $T71[ebp], 35	; 00000023H
  00ada	50		 push	 eax
  00adb	68 00 00 00 00	 push	 OFFSET ??_C@_08HKELGCIN@SPECIAL2@
  00ae0	8d 85 68 fb ff
	ff		 lea	 eax, DWORD PTR $T21[ebp]
  00ae6	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  00aeb	50		 push	 eax
  00aec	e8 00 00 00 00	 call	 ??$emplace@AAY08$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY08$$CBD$$QAW4EName@CRaceMotionData@@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[9],enum CRaceMotionData::EName>

; 273  : 		s_kMap_stType_dwIndex.emplace("SPECIAL3", CRaceMotionData::NAME_SPECIAL_4);

  00af1	8d 85 78 fb ff
	ff		 lea	 eax, DWORD PTR $T70[ebp]
  00af7	c7 85 78 fb ff
	ff 24 00 00 00	 mov	 DWORD PTR $T70[ebp], 36	; 00000024H
  00b01	50		 push	 eax
  00b02	68 00 00 00 00	 push	 OFFSET ??_C@_08GDFAFDMM@SPECIAL3@
  00b07	8d 85 68 fb ff
	ff		 lea	 eax, DWORD PTR $T20[ebp]
  00b0d	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  00b12	50		 push	 eax
  00b13	e8 00 00 00 00	 call	 ??$emplace@AAY08$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY08$$CBD$$QAW4EName@CRaceMotionData@@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[9],enum CRaceMotionData::EName>

; 274  : 		s_kMap_stType_dwIndex.emplace("SPECIAL4", CRaceMotionData::NAME_SPECIAL_5);

  00b18	8d 85 78 fb ff
	ff		 lea	 eax, DWORD PTR $T69[ebp]
  00b1e	c7 85 78 fb ff
	ff 25 00 00 00	 mov	 DWORD PTR $T69[ebp], 37	; 00000025H
  00b28	50		 push	 eax
  00b29	68 00 00 00 00	 push	 OFFSET ??_C@_08CMBBMFAL@SPECIAL4@
  00b2e	8d 85 68 fb ff
	ff		 lea	 eax, DWORD PTR $T19[ebp]
  00b34	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  00b39	50		 push	 eax
  00b3a	e8 00 00 00 00	 call	 ??$emplace@AAY08$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY08$$CBD$$QAW4EName@CRaceMotionData@@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[9],enum CRaceMotionData::EName>

; 275  : 		s_kMap_stType_dwIndex.emplace("SPECIAL5", CRaceMotionData::NAME_SPECIAL_6);

  00b3f	8d 85 78 fb ff
	ff		 lea	 eax, DWORD PTR $T68[ebp]
  00b45	c7 85 78 fb ff
	ff 26 00 00 00	 mov	 DWORD PTR $T68[ebp], 38	; 00000026H
  00b4f	50		 push	 eax
  00b50	68 00 00 00 00	 push	 OFFSET ??_C@_08DFAKPEEK@SPECIAL5@
  00b55	8d 85 68 fb ff
	ff		 lea	 eax, DWORD PTR $T18[ebp]
  00b5b	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  00b60	50		 push	 eax
  00b61	e8 00 00 00 00	 call	 ??$emplace@AAY08$$CBDW4EName@CRaceMotionData@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY08$$CBD$$QAW4EName@CRaceMotionData@@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[9],enum CRaceMotionData::EName>

; 276  : 		s_kMap_stType_dwIndex.emplace("SKILL1", CRaceMotionData::NAME_SKILL+121);

  00b66	8d 85 78 fb ff
	ff		 lea	 eax, DWORD PTR $T67[ebp]
  00b6c	c7 85 78 fb ff
	ff ab 00 00 00	 mov	 DWORD PTR $T67[ebp], 171 ; 000000abH
  00b76	50		 push	 eax
  00b77	68 00 00 00 00	 push	 OFFSET ??_C@_06COMNIHKP@SKILL1@
  00b7c	8d 85 68 fb ff
	ff		 lea	 eax, DWORD PTR $T17[ebp]
  00b82	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  00b87	50		 push	 eax
  00b88	e8 00 00 00 00	 call	 ??$emplace@AAY06$$CBDH@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY06$$CBD$$QAH@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[7],int>

; 277  : 		s_kMap_stType_dwIndex.emplace("SKILL2", CRaceMotionData::NAME_SKILL+122);

  00b8d	8d 85 78 fb ff
	ff		 lea	 eax, DWORD PTR $T66[ebp]
  00b93	c7 85 78 fb ff
	ff ac 00 00 00	 mov	 DWORD PTR $T66[ebp], 172 ; 000000acH
  00b9d	50		 push	 eax
  00b9e	68 00 00 00 00	 push	 OFFSET ??_C@_06FOANEGM@SKILL2@
  00ba3	8d 85 68 fb ff
	ff		 lea	 eax, DWORD PTR $T16[ebp]
  00ba9	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  00bae	50		 push	 eax
  00baf	e8 00 00 00 00	 call	 ??$emplace@AAY06$$CBDH@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY06$$CBD$$QAH@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[7],int>

; 278  : 		s_kMap_stType_dwIndex.emplace("SKILL3", CRaceMotionData::NAME_SKILL+123);

  00bb4	8d 85 78 fb ff
	ff		 lea	 eax, DWORD PTR $T65[ebp]
  00bba	c7 85 78 fb ff
	ff ad 00 00 00	 mov	 DWORD PTR $T65[ebp], 173 ; 000000adH
  00bc4	50		 push	 eax
  00bc5	68 00 00 00 00	 push	 OFFSET ??_C@_06BMPLOFCN@SKILL3@
  00bca	8d 85 68 fb ff
	ff		 lea	 eax, DWORD PTR $T15[ebp]
  00bd0	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  00bd5	50		 push	 eax
  00bd6	e8 00 00 00 00	 call	 ??$emplace@AAY06$$CBDH@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY06$$CBD$$QAH@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[7],int>

; 279  : 		s_kMap_stType_dwIndex.emplace("SKILL4", CRaceMotionData::NAME_SKILL+124);

  00bdb	8d 85 78 fb ff
	ff		 lea	 eax, DWORD PTR $T64[ebp]
  00be1	c7 85 78 fb ff
	ff ae 00 00 00	 mov	 DWORD PTR $T64[ebp], 174 ; 000000aeH
  00beb	50		 push	 eax
  00bec	68 00 00 00 00	 push	 OFFSET ??_C@_06FDLKHDOK@SKILL4@
  00bf1	8d 85 68 fb ff
	ff		 lea	 eax, DWORD PTR $T14[ebp]
  00bf7	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  00bfc	50		 push	 eax
  00bfd	e8 00 00 00 00	 call	 ??$emplace@AAY06$$CBDH@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY06$$CBD$$QAH@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[7],int>

; 280  : 		s_kMap_stType_dwIndex.emplace("SKILL5", CRaceMotionData::NAME_SKILL+125);

  00c02	8d 85 78 fb ff
	ff		 lea	 eax, DWORD PTR $T63[ebp]
  00c08	c7 85 78 fb ff
	ff af 00 00 00	 mov	 DWORD PTR $T63[ebp], 175 ; 000000afH
  00c12	50		 push	 eax
  00c13	68 00 00 00 00	 push	 OFFSET ??_C@_06EKKBECKL@SKILL5@
  00c18	8d 85 68 fb ff
	ff		 lea	 eax, DWORD PTR $T13[ebp]
  00c1e	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  00c23	50		 push	 eax
  00c24	e8 00 00 00 00	 call	 ??$emplace@AAY06$$CBDH@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@std@@@std@@@std@@_N@1@AAY06$$CBD$$QAH@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::emplace<char const (&)[7],int>
  00c29	8b b5 50 fb ff
	ff		 mov	 esi, DWORD PTR tv5456[ebp]
  00c2f	8b bd 60 fb ff
	ff		 mov	 edi, DWORD PTR _rkRaceData$GSCopy$1$[ebp]
$LN13@LoadRaceMo:

; 281  : 	}
; 282  : 
; 283  : 	const void * pvData;
; 284  : 	CMappedFile kMappedFile;

  00c35	8d 8d 7c fb ff
	ff		 lea	 ecx, DWORD PTR _kMappedFile$[ebp]
  00c3b	e8 00 00 00 00	 call	 ??0CMappedFile@@QAE@XZ	; CMappedFile::CMappedFile

; 285  : 	if (!CEterPackManager::Instance().Get(kMappedFile, motionListFileName, &pvData))

  00c40	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A ; CSingleton<CEterPackManager>::ms_singleton
  00c46	8d 85 4c fb ff
	ff		 lea	 eax, DWORD PTR _pvData$[ebp]
  00c4c	50		 push	 eax
  00c4d	ff b5 58 fb ff
	ff		 push	 DWORD PTR _motionListFileName$GSCopy$1$[ebp]
  00c53	8d 85 7c fb ff
	ff		 lea	 eax, DWORD PTR _kMappedFile$[ebp]
  00c59	c7 45 fc 0d 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 13 ; 0000000dH
  00c60	50		 push	 eax
  00c61	e8 00 00 00 00	 call	 ?Get@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z ; CEterPackManager::Get
  00c66	84 c0		 test	 al, al
  00c68	75 0b		 jne	 SHORT $LN14@LoadRaceMo
  00c6a	88 85 73 fb ff
	ff		 mov	 BYTE PTR $T58[ebp], al
  00c70	e9 d0 03 00 00	 jmp	 $LN29@LoadRaceMo
$LN14@LoadRaceMo:

; 286  : 		return false;
; 287  : 
; 288  : 
; 289  : 	CMemoryTextFileLoader kTextFileLoader;

  00c75	8d 8d 2c fb ff
	ff		 lea	 ecx, DWORD PTR _kTextFileLoader$[ebp]
  00c7b	e8 00 00 00 00	 call	 ??0CMemoryTextFileLoader@@QAE@XZ ; CMemoryTextFileLoader::CMemoryTextFileLoader

; 290  : 	kTextFileLoader.Bind(kMappedFile.Size(), pvData);

  00c80	ff b5 4c fb ff
	ff		 push	 DWORD PTR _pvData$[ebp]
  00c86	8d 8d 7c fb ff
	ff		 lea	 ecx, DWORD PTR _kMappedFile$[ebp]
  00c8c	c6 45 fc 0e	 mov	 BYTE PTR __$EHRec$[ebp+8], 14 ; 0000000eH
  00c90	e8 00 00 00 00	 call	 ?Size@CMappedFile@@QAEKXZ ; CMappedFile::Size
  00c95	50		 push	 eax
  00c96	8d 8d 2c fb ff
	ff		 lea	 ecx, DWORD PTR _kTextFileLoader$[ebp]
  00c9c	e8 00 00 00 00	 call	 ?Bind@CMemoryTextFileLoader@@QAEXHPBX@Z ; CMemoryTextFileLoader::Bind

; 291  : 
; 292  : 	rkRaceData.RegisterMotionMode(CRaceMotionData::MODE_GENERAL);

  00ca1	6a 01		 push	 1
  00ca3	8b cf		 mov	 ecx, edi
  00ca5	e8 00 00 00 00	 call	 ?RegisterMotionMode@CRaceData@@QAEXG@Z ; CRaceData::RegisterMotionMode

; 301  : 	static std::string stSpawnMotionFileName;

  00caa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS1@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4HA
  00caf	c7 85 5c fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _nPercent$[ebp], 0
  00cb9	c6 85 73 fb ff
	ff 00		 mov	 BYTE PTR _isSpawn$1$[ebp], 0
  00cc0	3b 86 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[esi]
  00cc6	0f 8f 07 05 00
	00		 jg	 $LN1189@LoadRaceMo
$LN3@LoadRaceMo:

; 302  : 	static std::string stMotionFileName;

  00ccc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS2@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4HA
  00cd1	3b 86 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[esi]
  00cd7	0f 8f 2c 05 00
	00		 jg	 $LN1190@LoadRaceMo
$LN4@LoadRaceMo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 3395 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00cdd	6a 00		 push	 0
  00cdf	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00ce4	b9 00 00 00 00	 mov	 ecx, OFFSET ?stSpawnMotionFileName@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  00ce9	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00cee	6a 00		 push	 0
  00cf0	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00cf5	b9 00 00 00 00	 mov	 ecx, OFFSET ?stMotionFileName@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  00cfa	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 307  : 	UINT uLineCount=kTextFileLoader.GetLineCount();

  00cff	8d 8d 2c fb ff
	ff		 lea	 ecx, DWORD PTR _kTextFileLoader$[ebp]
  00d05	e8 00 00 00 00	 call	 ?GetLineCount@CMemoryTextFileLoader@@QAEKXZ ; CMemoryTextFileLoader::GetLineCount
  00d0a	8b c8		 mov	 ecx, eax

; 308  : 	for (UINT uLineIndex=0; uLineIndex<uLineCount; ++uLineIndex)

  00d0c	33 c0		 xor	 eax, eax
  00d0e	89 8d 58 fb ff
	ff		 mov	 DWORD PTR _uLineCount$1$[ebp], ecx
  00d14	89 85 78 fb ff
	ff		 mov	 DWORD PTR _uLineIndex$1$[ebp], eax
  00d1a	85 c9		 test	 ecx, ecx
  00d1c	0f 84 cb 02 00
	00		 je	 $LN1163@LoadRaceMo
$LL7@LoadRaceMo:

; 309  : 	{
; 310  : 		DWORD motionType = CRaceMotionData::NAME_NONE;
; 311  : 
; 312  : 		const std::string & c_rstLine=kTextFileLoader.GetLineString(uLineIndex);

  00d22	50		 push	 eax
  00d23	8d 8d 2c fb ff
	ff		 lea	 ecx, DWORD PTR _kTextFileLoader$[ebp]
  00d29	e8 00 00 00 00	 call	 ?GetLineString@CMemoryTextFileLoader@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@Z ; CMemoryTextFileLoader::GetLineString
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  00d2e	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00d32	72 02		 jb	 SHORT $LN167@LoadRaceMo

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  00d34	8b 00		 mov	 eax, DWORD PTR [eax]
$LN167@LoadRaceMo:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 313  : 		sscanf(c_rstLine.c_str(), "%s %s %s %d", szMode, szType, szFile, &nPercent);

  00d36	8d 8d 5c fb ff
	ff		 lea	 ecx, DWORD PTR _nPercent$[ebp]
  00d3c	51		 push	 ecx
  00d3d	8d 8d f0 fd ff
	ff		 lea	 ecx, DWORD PTR _szFile$[ebp]
  00d43	51		 push	 ecx
  00d44	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _szType$[ebp]
  00d4a	51		 push	 ecx
  00d4b	8d 8d f0 fc ff
	ff		 lea	 ecx, DWORD PTR _szMode$[ebp]
  00d51	51		 push	 ecx
  00d52	68 00 00 00 00	 push	 OFFSET ??_C@_0M@HPBHEBFF@?$CFs?5?$CFs?5?$CFs?5?$CFd@
  00d57	50		 push	 eax
  00d58	e8 00 00 00 00	 call	 _sscanf
  00d5d	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2293 :     size_type _Mysize = 0; // current length of string

  00d60	c7 85 e8 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR $T110[ebp+16], 0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00d6a	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _szType$[ebp]

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  00d70	c7 85 ec fc ff
	ff 00 00 00 00	 mov	 DWORD PTR $T110[ebp+20], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 313  : 		sscanf(c_rstLine.c_str(), "%s %s %s %d", szMode, szType, szFile, &nPercent);

  00d7a	83 c4 18	 add	 esp, 24			; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00d7d	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00d80	0f 11 85 d8 fc
	ff ff		 movups	 XMMWORD PTR $T110[ebp], xmm0
$LL1173@LoadRaceMo:

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00d87	8a 01		 mov	 al, BYTE PTR [ecx]
  00d89	41		 inc	 ecx
  00d8a	84 c0		 test	 al, al
  00d8c	75 f9		 jne	 SHORT $LL1173@LoadRaceMo
  00d8e	2b ca		 sub	 ecx, edx

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00d90	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _szType$[ebp]
  00d96	51		 push	 ecx
  00d97	50		 push	 eax
  00d98	8d 8d d8 fc ff
	ff		 lea	 ecx, DWORD PTR $T110[ebp]
  00d9e	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00da3	8d 85 d8 fc ff
	ff		 lea	 eax, DWORD PTR $T110[ebp]
  00da9	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  00dae	50		 push	 eax
  00daf	8d 85 64 fb ff
	ff		 lea	 eax, DWORD PTR __Loc$12[ebp]
  00db5	50		 push	 eax
  00db6	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00dbb	8b b5 6c fb ff
	ff		 mov	 esi, DWORD PTR __Loc$12[ebp+8]
  00dc1	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  00dc7	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00dcb	75 17		 jne	 SHORT $LN174@LoadRaceMo
  00dcd	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  00dd0	50		 push	 eax
  00dd1	8d 85 d8 fc ff
	ff		 lea	 eax, DWORD PTR $T110[ebp]
  00dd7	50		 push	 eax
  00dd8	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  00ddd	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00de0	84 c0		 test	 al, al
  00de2	74 02		 je	 SHORT $LN173@LoadRaceMo
$LN174@LoadRaceMo:

; 1373 :         return _Get_scary()->_Myhead;

  00de4	8b f7		 mov	 esi, edi
$LN173@LoadRaceMo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4832 :         if (_My_data._Large_string_engaged()) {

  00de6	8b 8d ec fc ff
	ff		 mov	 ecx, DWORD PTR $T110[ebp+20]
  00dec	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00def	72 35		 jb	 SHORT $LN200@LoadRaceMo
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00df1	8b 95 d8 fc ff
	ff		 mov	 edx, DWORD PTR $T110[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00df7	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00df8	8b c2		 mov	 eax, edx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00dfa	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00e00	72 14		 jb	 SHORT $LN210@LoadRaceMo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00e02	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00e05	83 c1 23	 add	 ecx, 35			; 00000023H
  00e08	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00e0a	83 c0 fc	 add	 eax, -4			; fffffffcH
  00e0d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00e10	0f 87 46 03 00
	00		 ja	 $LN279@LoadRaceMo
$LN210@LoadRaceMo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00e16	51		 push	 ecx
  00e17	52		 push	 edx
  00e18	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00e1d	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  00e23	83 c4 08	 add	 esp, 8
$LN200@LoadRaceMo:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 317  : 		if (s_kMap_stType_dwIndex.end() == fTypeIndex)

  00e26	3b fe		 cmp	 edi, esi
  00e28	0f 85 79 02 00
	00		 jne	 $LN18@LoadRaceMo

; 322  : 			if (c_cutLengthLimit < strlen(szType) + 1)

  00e2e	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _szType$[ebp]
  00e34	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL1174@LoadRaceMo:
  00e37	8a 01		 mov	 al, BYTE PTR [ecx]
  00e39	41		 inc	 ecx
  00e3a	84 c0		 test	 al, al
  00e3c	75 f9		 jne	 SHORT $LL1174@LoadRaceMo
  00e3e	2b ca		 sub	 ecx, edx
  00e40	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  00e43	83 f8 02	 cmp	 eax, 2
  00e46	0f 86 78 01 00
	00		 jbe	 $LN1179@LoadRaceMo

; 324  : 				for (size_t i = 1; i <= c_cutLengthLimit; ++i)

  00e4c	bf 01 00 00 00	 mov	 edi, 1
$LL10@LoadRaceMo:

; 326  : 					std::string typeName = std::string(szType).substr(0, strlen(szType) - i);

  00e51	8d b5 f0 fe ff
	ff		 lea	 esi, DWORD PTR _szType$[ebp]
  00e57	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  00e5a	66 0f 1f 44 00
	00		 npad	 6
$LL1175@LoadRaceMo:
  00e60	8a 06		 mov	 al, BYTE PTR [esi]
  00e62	46		 inc	 esi
  00e63	84 c0		 test	 al, al
  00e65	75 f9		 jne	 SHORT $LL1175@LoadRaceMo
  00e67	2b f1		 sub	 esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2293 :     size_type _Mysize = 0; // current length of string

  00e69	c7 85 d0 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR $T108[ebp+16], 0

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00e73	56		 push	 esi
  00e74	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _szType$[ebp]

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  00e7a	c7 85 d4 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR $T108[ebp+20], 0
  00e84	0f 57 c0	 xorps	 xmm0, xmm0

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00e87	8d 8d c0 fc ff
	ff		 lea	 ecx, DWORD PTR $T108[ebp]
  00e8d	50		 push	 eax

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00e8e	0f 11 85 c0 fc
	ff ff		 movups	 XMMWORD PTR $T108[ebp], xmm0

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00e95	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 326  : 					std::string typeName = std::string(szType).substr(0, strlen(szType) - i);

  00e9a	2b f7		 sub	 esi, edi
  00e9c	c6 45 fc 0f	 mov	 BYTE PTR __$EHRec$[ebp+8], 15 ; 0000000fH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2278 :         return (_STD min)(_Size, _Mysize - _Off);

  00ea0	39 b5 d0 fc ff
	ff		 cmp	 DWORD PTR $T108[ebp+16], esi

; 2235 :         const value_type* _Result = _Bx._Buf;

  00ea6	8d 85 c0 fc ff
	ff		 lea	 eax, DWORD PTR $T108[ebp]
  00eac	0f 57 c0	 xorps	 xmm0, xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  00eaf	c7 85 e8 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR _typeName$109[ebp+16], 0

; 2278 :         return (_STD min)(_Size, _Mysize - _Off);

  00eb9	0f 42 b5 d0 fc
	ff ff		 cmovb	 esi, DWORD PTR $T108[ebp+16]

; 2511 :         _Construct<_Construct_strategy::_From_ptr>(

  00ec0	8d 8d d8 fc ff
	ff		 lea	 ecx, DWORD PTR _typeName$109[ebp]

; 2236 :         if (_Large_string_engaged()) {

  00ec6	83 bd d4 fc ff
	ff 10		 cmp	 DWORD PTR $T108[ebp+20], 16 ; 00000010H

; 2511 :         _Construct<_Construct_strategy::_From_ptr>(

  00ecd	56		 push	 esi

; 2236 :         if (_Large_string_engaged()) {

  00ece	0f 43 85 c0 fc
	ff ff		 cmovae	 eax, DWORD PTR $T108[ebp]

; 2511 :         _Construct<_Construct_strategy::_From_ptr>(

  00ed5	50		 push	 eax

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00ed6	0f 11 85 d8 fc
	ff ff		 movups	 XMMWORD PTR _typeName$109[ebp], xmm0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  00edd	c7 85 ec fc ff
	ff 00 00 00 00	 mov	 DWORD PTR _typeName$109[ebp+20], 0

; 2511 :         _Construct<_Construct_strategy::_From_ptr>(

  00ee7	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>

; 4572 :         return basic_string{*this, _Off, _Count};

  00eec	83 8d 54 fb ff
	ff 01		 or	 DWORD PTR $T7[ebp], 1

; 2244 :         return _BUF_SIZE <= _Myres;

  00ef3	8b 8d d4 fc ff
	ff		 mov	 ecx, DWORD PTR $T108[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 326  : 					std::string typeName = std::string(szType).substr(0, strlen(szType) - i);

  00ef9	c6 45 fc 0e	 mov	 BYTE PTR __$EHRec$[ebp+8], 14 ; 0000000eH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00efd	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  00f00	72 2f		 jb	 SHORT $LN116@LoadRaceMo
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00f02	8b 95 c0 fc ff
	ff		 mov	 edx, DWORD PTR $T108[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00f08	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00f09	8b c2		 mov	 eax, edx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00f0b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00f11	72 14		 jb	 SHORT $LN126@LoadRaceMo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00f13	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00f16	83 c1 23	 add	 ecx, 35			; 00000023H
  00f19	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00f1b	83 c0 fc	 add	 eax, -4			; fffffffcH
  00f1e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00f21	0f 87 35 02 00
	00		 ja	 $LN279@LoadRaceMo
$LN126@LoadRaceMo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00f27	51		 push	 ecx
  00f28	52		 push	 edx
  00f29	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00f2e	83 c4 08	 add	 esp, 8
$LN116@LoadRaceMo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00f31	8d 85 d8 fc ff
	ff		 lea	 eax, DWORD PTR _typeName$109[ebp]
  00f37	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  00f3c	50		 push	 eax
  00f3d	8d 85 3c fb ff
	ff		 lea	 eax, DWORD PTR __Loc$6[ebp]
  00f43	50		 push	 eax
  00f44	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00f49	8b b5 44 fb ff
	ff		 mov	 esi, DWORD PTR __Loc$6[ebp+8]
  00f4f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  00f54	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00f58	75 1c		 jne	 SHORT $LN134@LoadRaceMo
  00f5a	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  00f5d	50		 push	 eax
  00f5e	8d 85 d8 fc ff
	ff		 lea	 eax, DWORD PTR _typeName$109[ebp]
  00f64	50		 push	 eax
  00f65	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  00f6a	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00f6d	84 c0		 test	 al, al
  00f6f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A
  00f74	74 02		 je	 SHORT $LN133@LoadRaceMo
$LN134@LoadRaceMo:

; 1373 :         return _Get_scary()->_Myhead;

  00f76	8b f0		 mov	 esi, eax
$LN133@LoadRaceMo:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 329  : 					if (s_kMap_stType_dwIndex.end() != fTypeIndex)

  00f78	8b 8d ec fc ff
	ff		 mov	 ecx, DWORD PTR _typeName$109[ebp+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00f7e	3b c6		 cmp	 eax, esi
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 329  : 					if (s_kMap_stType_dwIndex.end() != fTypeIndex)

  00f80	0f 85 ed 00 00
	00		 jne	 $LN1150@LoadRaceMo
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00f86	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  00f89	72 2f		 jb	 SHORT $LN272@LoadRaceMo
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00f8b	8b 95 d8 fc ff
	ff		 mov	 edx, DWORD PTR _typeName$109[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00f91	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00f92	8b c2		 mov	 eax, edx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00f94	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00f9a	72 14		 jb	 SHORT $LN282@LoadRaceMo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00f9c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00f9f	83 c1 23	 add	 ecx, 35			; 00000023H
  00fa2	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00fa4	83 c0 fc	 add	 eax, -4			; fffffffcH
  00fa7	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00faa	0f 87 ac 01 00
	00		 ja	 $LN279@LoadRaceMo
$LN282@LoadRaceMo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00fb0	51		 push	 ecx
  00fb1	52		 push	 edx
  00fb2	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00fb7	83 c4 08	 add	 esp, 8
$LN272@LoadRaceMo:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 324  : 				for (size_t i = 1; i <= c_cutLengthLimit; ++i)

  00fba	47		 inc	 edi
  00fbb	83 ff 02	 cmp	 edi, 2
  00fbe	0f 86 8d fe ff
	ff		 jbe	 $LL10@LoadRaceMo
$LN1179@LoadRaceMo:

; 308  : 	for (UINT uLineIndex=0; uLineIndex<uLineCount; ++uLineIndex)

  00fc4	8b bd 60 fb ff
	ff		 mov	 edi, DWORD PTR _rkRaceData$GSCopy$1$[ebp]
$LN1180@LoadRaceMo:
  00fca	8a 8d 73 fb ff
	ff		 mov	 cl, BYTE PTR _isSpawn$1$[ebp]
$LN5@LoadRaceMo:
  00fd0	8b 85 78 fb ff
	ff		 mov	 eax, DWORD PTR _uLineIndex$1$[ebp]
  00fd6	40		 inc	 eax
  00fd7	89 85 78 fb ff
	ff		 mov	 DWORD PTR _uLineIndex$1$[ebp], eax
  00fdd	3b 85 58 fb ff
	ff		 cmp	 eax, DWORD PTR _uLineCount$1$[ebp]
  00fe3	0f 82 39 fd ff
	ff		 jb	 $LL7@LoadRaceMo

; 353  : 			case CRaceMotionData::NAME_DAMAGE:
; 354  : 				stSpawnMotionFileName=stMotionFileName;
; 355  : 				break;
; 356  : 		}
; 357  : 	}
; 358  : 
; 359  : 	if (!isSpawn && stSpawnMotionFileName!="")

  00fe9	84 c9		 test	 cl, cl
  00feb	75 3b		 jne	 SHORT $LN21@LoadRaceMo
$LN1163@LoadRaceMo:
  00fed	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00ff2	68 00 00 00 00	 push	 OFFSET ?stSpawnMotionFileName@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  00ff7	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00ffc	83 c4 08	 add	 esp, 8
  00fff	84 c0		 test	 al, al
  01001	74 25		 je	 SHORT $LN21@LoadRaceMo
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  01003	83 3d 14 00 00
	00 10		 cmp	 DWORD PTR ?stSpawnMotionFileName@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 16 ; 00000010H

; 2235 :         const value_type* _Result = _Bx._Buf;

  0100a	b8 00 00 00 00	 mov	 eax, OFFSET ?stSpawnMotionFileName@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 360  : 		rkRaceData.RegisterMotionData(CRaceMotionData::MODE_GENERAL, CRaceMotionData::NAME_SPAWN, stSpawnMotionFileName.c_str(), nPercent);

  0100f	ff b5 5c fb ff
	ff		 push	 DWORD PTR _nPercent$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  01015	0f 43 05 00 00
	00 00		 cmovae	 eax, DWORD PTR ?stSpawnMotionFileName@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 360  : 		rkRaceData.RegisterMotionData(CRaceMotionData::MODE_GENERAL, CRaceMotionData::NAME_SPAWN, stSpawnMotionFileName.c_str(), nPercent);

  0101c	8b cf		 mov	 ecx, edi
  0101e	50		 push	 eax
  0101f	6a 19		 push	 25			; 00000019H
  01021	6a 01		 push	 1
  01023	e8 00 00 00 00	 call	 ?RegisterMotionData@CRaceData@@QAEPAVCGraphicThing@@GGPBDE@Z ; CRaceData::RegisterMotionData
$LN21@LoadRaceMo:

; 361  : 
; 362  : 	rkRaceData.RegisterNormalAttack(CRaceMotionData::MODE_GENERAL, CRaceMotionData::NAME_NORMAL_ATTACK);

  01028	6a 0d		 push	 13			; 0000000dH
  0102a	6a 01		 push	 1
  0102c	8b cf		 mov	 ecx, edi
  0102e	e8 00 00 00 00	 call	 ?RegisterNormalAttack@CRaceData@@QAEXGG@Z ; CRaceData::RegisterNormalAttack

; 363  : 
; 364  : 	return true;

  01033	8d 8d 2c fb ff
	ff		 lea	 ecx, DWORD PTR _kTextFileLoader$[ebp]
  01039	c6 85 73 fb ff
	ff 01		 mov	 BYTE PTR $T58[ebp], 1
  01040	e8 00 00 00 00	 call	 ??1CMemoryTextFileLoader@@UAE@XZ ; CMemoryTextFileLoader::~CMemoryTextFileLoader
$LN29@LoadRaceMo:
  01045	8d 8d 7c fb ff
	ff		 lea	 ecx, DWORD PTR _kMappedFile$[ebp]
  0104b	e8 00 00 00 00	 call	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
  01050	8a 85 73 fb ff
	ff		 mov	 al, BYTE PTR $T58[ebp]

; 365  : }

  01056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  01059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  01060	59		 pop	 ecx
  01061	5f		 pop	 edi
  01062	5e		 pop	 esi
  01063	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  01066	33 cd		 xor	 ecx, ebp
  01068	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0106d	8b e5		 mov	 esp, ebp
  0106f	5d		 pop	 ebp
  01070	c2 0c 00	 ret	 12			; 0000000cH
$LN1150@LoadRaceMo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  01073	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  01076	72 2f		 jb	 SHORT $LN18@LoadRaceMo
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  01078	8b 95 d8 fc ff
	ff		 mov	 edx, DWORD PTR _typeName$109[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0107e	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0107f	8b c2		 mov	 eax, edx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  01081	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  01087	72 14		 jb	 SHORT $LN255@LoadRaceMo

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  01089	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0108c	83 c1 23	 add	 ecx, 35			; 00000023H
  0108f	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  01091	83 c0 fc	 add	 eax, -4			; fffffffcH
  01094	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  01097	0f 87 bf 00 00
	00		 ja	 $LN279@LoadRaceMo
$LN255@LoadRaceMo:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0109d	51		 push	 ecx
  0109e	52		 push	 edx
  0109f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  010a4	83 c4 08	 add	 esp, 8
$LN18@LoadRaceMo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  010a7	8b bd 48 fb ff
	ff		 mov	 edi, DWORD PTR _pathName$GSCopy$1$[ebp]
  010ad	8b cf		 mov	 ecx, edi
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 341  : 		motionType = fTypeIndex->second;

  010af	8b 76 28	 mov	 esi, DWORD PTR [esi+40]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  010b2	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL1176@LoadRaceMo:
  010b5	8a 01		 mov	 al, BYTE PTR [ecx]
  010b7	41		 inc	 ecx
  010b8	84 c0		 test	 al, al
  010ba	75 f9		 jne	 SHORT $LL1176@LoadRaceMo
  010bc	2b ca		 sub	 ecx, edx

; 3395 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  010be	51		 push	 ecx
  010bf	57		 push	 edi
  010c0	b9 00 00 00 00	 mov	 ecx, OFFSET ?stMotionFileName@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  010c5	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  010ca	8d 8d f0 fd ff
	ff		 lea	 ecx, DWORD PTR _szFile$[ebp]
  010d0	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL1177@LoadRaceMo:
  010d3	8a 01		 mov	 al, BYTE PTR [ecx]
  010d5	41		 inc	 ecx
  010d6	84 c0		 test	 al, al
  010d8	75 f9		 jne	 SHORT $LL1177@LoadRaceMo
  010da	2b ca		 sub	 ecx, edx

; 3292 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  010dc	8d 85 f0 fd ff
	ff		 lea	 eax, DWORD PTR _szFile$[ebp]
  010e2	51		 push	 ecx
  010e3	50		 push	 eax
  010e4	b9 00 00 00 00	 mov	 ecx, OFFSET ?stMotionFileName@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  010e9	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2244 :         return _BUF_SIZE <= _Myres;

  010ee	83 3d 14 00 00
	00 10		 cmp	 DWORD PTR ?stMotionFileName@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 16 ; 00000010H

; 2235 :         const value_type* _Result = _Bx._Buf;

  010f5	b8 00 00 00 00	 mov	 eax, OFFSET ?stMotionFileName@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 346  : 		rkRaceData.RegisterMotionData(CRaceMotionData::MODE_GENERAL, motionType, stMotionFileName.c_str(), nPercent);

  010fa	ff b5 5c fb ff
	ff		 push	 DWORD PTR _nPercent$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  01100	0f 43 05 00 00
	00 00		 cmovae	 eax, DWORD PTR ?stMotionFileName@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 346  : 		rkRaceData.RegisterMotionData(CRaceMotionData::MODE_GENERAL, motionType, stMotionFileName.c_str(), nPercent);

  01107	8b bd 60 fb ff
	ff		 mov	 edi, DWORD PTR _rkRaceData$GSCopy$1$[ebp]
  0110d	8b cf		 mov	 ecx, edi
  0110f	50		 push	 eax
  01110	56		 push	 esi
  01111	6a 01		 push	 1
  01113	e8 00 00 00 00	 call	 ?RegisterMotionData@CRaceData@@QAEPAVCGraphicThing@@GGPBDE@Z ; CRaceData::RegisterMotionData

; 347  : 
; 348  : 		switch (motionType)

  01118	83 fe 05	 cmp	 esi, 5
  0111b	74 16		 je	 SHORT $LN1165@LoadRaceMo
  0111d	83 fe 19	 cmp	 esi, 25			; 00000019H
  01120	0f 85 a4 fe ff
	ff		 jne	 $LN1180@LoadRaceMo

; 349  : 		{
; 350  : 			case CRaceMotionData::NAME_SPAWN:
; 351  : 				isSpawn=true;

  01126	b1 01		 mov	 cl, 1
  01128	88 8d 73 fb ff
	ff		 mov	 BYTE PTR _isSpawn$1$[ebp], cl

; 352  : 				break;

  0112e	e9 9d fe ff ff	 jmp	 $LN5@LoadRaceMo
$LN1165@LoadRaceMo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  01133	83 3d 14 00 00
	00 10		 cmp	 DWORD PTR ?stMotionFileName@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 16 ; 00000010H

; 2235 :         const value_type* _Result = _Bx._Buf;

  0113a	b8 00 00 00 00	 mov	 eax, OFFSET ?stMotionFileName@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A

; 3192 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0113f	ff 35 10 00 00
	00		 push	 DWORD PTR ?stMotionFileName@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+16

; 2236 :         if (_Large_string_engaged()) {

  01145	0f 43 05 00 00
	00 00		 cmovae	 eax, DWORD PTR ?stMotionFileName@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A

; 3192 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0114c	b9 00 00 00 00	 mov	 ecx, OFFSET ?stSpawnMotionFileName@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  01151	50		 push	 eax
  01152	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 322  : 			if (c_cutLengthLimit < strlen(szType) + 1)

  01157	e9 6e fe ff ff	 jmp	 $LN1180@LoadRaceMo
$LN279@LoadRaceMo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0115c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1184@LoadRaceMo:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 225  : 	static std::map<std::string, DWORD> s_kMap_stType_dwIndex;

  01161	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4HA
  01166	e8 00 00 00 00	 call	 __Init_thread_header
  0116b	83 c4 04	 add	 esp, 4
  0116e	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4HA, -1
  01175	0f 85 fd ee ff
	ff		 jne	 $LN2@LoadRaceMo
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  0117b	6a 2c		 push	 44			; 0000002cH
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 225  : 	static std::map<std::string, DWORD> s_kMap_stType_dwIndex;

  0117d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  01184	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 225  : 	static std::map<std::string, DWORD> s_kMap_stType_dwIndex;

  01189	68 00 00 00 00	 push	 OFFSET ??__Fs_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@YAXXZ ; `CRaceManager::__LoadRaceMotionList'::`2'::`dynamic atexit destructor for 's_kMap_stType_dwIndex''
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 347  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  0118e	89 00		 mov	 DWORD PTR [eax], eax

; 348  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  01190	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 349  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  01193	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 350  :         _Pnode->_Color = _Black;

  01196	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1943 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  0119c	a3 00 00 00 00	 mov	 DWORD PTR ?s_kMap_stType_dwIndex@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@KU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@@2@@std@@A, eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 225  : 	static std::map<std::string, DWORD> s_kMap_stType_dwIndex;

  011a1	e8 00 00 00 00	 call	 _atexit
  011a6	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4HA
  011ab	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  011b2	e8 00 00 00 00	 call	 __Init_thread_footer
  011b7	83 c4 0c	 add	 esp, 12			; 0000000cH
  011ba	e9 b9 ee ff ff	 jmp	 $LN2@LoadRaceMo
$LN1185@LoadRaceMo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1632 :             _Throw_tree_length_error();

  011bf	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN1186@LoadRaceMo:
  011c4	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN1187@LoadRaceMo:
  011c9	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN1188@LoadRaceMo:
  011ce	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN1189@LoadRaceMo:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 301  : 	static std::string stSpawnMotionFileName;

  011d3	68 00 00 00 00	 push	 OFFSET ?$TSS1@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4HA
  011d8	e8 00 00 00 00	 call	 __Init_thread_header
  011dd	83 c4 04	 add	 esp, 4
  011e0	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS1@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4HA, -1
  011e7	0f 85 df fa ff
	ff		 jne	 $LN3@LoadRaceMo
  011ed	68 00 00 00 00	 push	 OFFSET ??__FstSpawnMotionFileName@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@YAXXZ ; `CRaceManager::__LoadRaceMotionList'::`2'::`dynamic atexit destructor for 'stSpawnMotionFileName''
  011f2	e8 00 00 00 00	 call	 _atexit
  011f7	68 00 00 00 00	 push	 OFFSET ?$TSS1@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4HA
  011fc	e8 00 00 00 00	 call	 __Init_thread_footer
  01201	83 c4 08	 add	 esp, 8
  01204	e9 c3 fa ff ff	 jmp	 $LN3@LoadRaceMo
$LN1190@LoadRaceMo:

; 302  : 	static std::string stMotionFileName;

  01209	68 00 00 00 00	 push	 OFFSET ?$TSS2@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4HA
  0120e	e8 00 00 00 00	 call	 __Init_thread_header
  01213	83 c4 04	 add	 esp, 4
  01216	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS2@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4HA, -1
  0121d	0f 85 ba fa ff
	ff		 jne	 $LN4@LoadRaceMo
  01223	68 00 00 00 00	 push	 OFFSET ??__FstMotionFileName@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@YAXXZ ; `CRaceManager::__LoadRaceMotionList'::`2'::`dynamic atexit destructor for 'stMotionFileName''
  01228	e8 00 00 00 00	 call	 _atexit
  0122d	68 00 00 00 00	 push	 OFFSET ?$TSS2@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4HA
  01232	e8 00 00 00 00	 call	 __Init_thread_footer
  01237	83 c4 08	 add	 esp, 8
  0123a	e9 9e fa ff ff	 jmp	 $LN4@LoadRaceMo
$LN1182@LoadRaceMo:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z$57:
  00000	8d 8d 74 fb ff
	ff		 lea	 ecx, DWORD PTR __Newnode$59[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >
__unwindfunclet$?__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z$56:
  0000b	8d 8d 74 fb ff
	ff		 lea	 ecx, DWORD PTR __Newnode$59[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z$55:
  00016	8d 8d 74 fb ff
	ff		 lea	 ecx, DWORD PTR __Newnode$59[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >
__unwindfunclet$?__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z$19:
  00021	8d 8d 74 fb ff
	ff		 lea	 ecx, DWORD PTR __Newnode$62[ebp]
  00027	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >
__unwindfunclet$?__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z$18:
  0002c	8d 8d 74 fb ff
	ff		 lea	 ecx, DWORD PTR __Newnode$62[ebp]
  00032	e9 00 00 00 00	 jmp	 ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z$17:
  00037	8d 8d 74 fb ff
	ff		 lea	 ecx, DWORD PTR __Newnode$62[ebp]
  0003d	e9 00 00 00 00	 jmp	 ??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >
__unwindfunclet$?__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z$33:
  00042	8d 8d 74 fb ff
	ff		 lea	 ecx, DWORD PTR __Newnode$61[ebp]
  00048	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >
__unwindfunclet$?__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z$32:
  0004d	8d 8d 74 fb ff
	ff		 lea	 ecx, DWORD PTR __Newnode$61[ebp]
  00053	e9 00 00 00 00	 jmp	 ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z$31:
  00058	8d 8d 74 fb ff
	ff		 lea	 ecx, DWORD PTR __Newnode$61[ebp]
  0005e	e9 00 00 00 00	 jmp	 ??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >
__unwindfunclet$?__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z$47:
  00063	8d 8d 74 fb ff
	ff		 lea	 ecx, DWORD PTR __Newnode$60[ebp]
  00069	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >
__unwindfunclet$?__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z$46:
  0006e	8d 8d 74 fb ff
	ff		 lea	 ecx, DWORD PTR __Newnode$60[ebp]
  00074	e9 00 00 00 00	 jmp	 ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z$45:
  00079	8d 8d 74 fb ff
	ff		 lea	 ecx, DWORD PTR __Newnode$60[ebp]
  0007f	e9 00 00 00 00	 jmp	 ??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,void *> > >
__unwindfunclet$?__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z$1:
  00084	8d 8d 7c fb ff
	ff		 lea	 ecx, DWORD PTR _kMappedFile$[ebp]
  0008a	e9 00 00 00 00	 jmp	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
__unwindfunclet$?__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z$2:
  0008f	8d 8d 2c fb ff
	ff		 lea	 ecx, DWORD PTR _kTextFileLoader$[ebp]
  00095	e9 00 00 00 00	 jmp	 ??1CMemoryTextFileLoader@@UAE@XZ ; CMemoryTextFileLoader::~CMemoryTextFileLoader
__unwindfunclet$?__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z$4:
  0009a	8d 8d c0 fc ff
	ff		 lea	 ecx, DWORD PTR $T108[ebp]
  000a0	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z$0:
  000a5	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z@4HA
  000aa	e8 00 00 00 00	 call	 __Init_thread_abort
  000af	59		 pop	 ecx
  000b0	c3		 ret	 0
  000b1	cc		 int	 3
  000b2	cc		 int	 3
  000b3	cc		 int	 3
  000b4	cc		 int	 3
  000b5	cc		 int	 3
__ehhandler$?__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z:
  000b6	90		 npad	 1
  000b7	90		 npad	 1
  000b8	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  000bc	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  000bf	8b 8a 2c fb ff
	ff		 mov	 ecx, DWORD PTR [edx-1236]
  000c5	33 c8		 xor	 ecx, eax
  000c7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000cc	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  000cf	33 c8		 xor	 ecx, eax
  000d1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d6	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z
  000db	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z ENDP ; CRaceManager::__LoadRaceMotionList
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
;	COMDAT ?__LoadRaceData@CRaceManager@@IAEPAVCRaceData@@K@Z
_TEXT	SEGMENT
__Loc$2 = -652						; size = 12
tv2252 = -640						; size = 4
__Loc$3 = -636						; size = 12
_vec_stFullPathName$ = -636				; size = 12
_this$GSCopy$1$ = -624					; size = 4
_stFullPathName$2$ = -620				; size = 4
$T4 = -616						; size = 4
__Result$2$ = -616					; size = 4
tv2259 = -616						; size = 4
$T5 = -612						; size = 4
_i$1$ = -612						; size = 4
$T6 = -608						; size = 4
tv2265 = -601						; size = 1
_stFullPathName$7 = -600				; size = 24
_stMotionListFileName$8 = -576				; size = 24
_stMSMFileName$9 = -552					; size = 24
_motionListFileName$10 = -528				; size = 256
_shapeFileName$11 = -272				; size = 256
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_dwRaceIndex$ = 8					; size = 4
?__LoadRaceData@CRaceManager@@IAEPAVCRaceData@@K@Z PROC	; CRaceManager::__LoadRaceData, COMDAT
; _this$ = ecx

; 133  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?__LoadRaceData@CRaceManager@@IAEPAVCRaceData@@K@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 80 02 00
	00		 sub	 esp, 640		; 00000280H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b c1		 mov	 eax, ecx
  0002f	89 85 90 fd ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], eax

; 134  : 	auto fRaceName=m_kMap_dwRaceKey_stRaceName.find(dwRaceIndex);

  00035	8d 70 14	 lea	 esi, DWORD PTR [eax+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00038	8d 45 08	 lea	 eax, DWORD PTR _dwRaceIndex$[ebp]
  0003b	8b ce		 mov	 ecx, esi
  0003d	50		 push	 eax
  0003e	8d 85 84 fd ff
	ff		 lea	 eax, DWORD PTR __Loc$3[ebp]
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Find_lower_bound<unsigned long>

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0004a	8b bd 8c fd ff
	ff		 mov	 edi, DWORD PTR __Loc$3[ebp+8]
  00050	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00054	0f 85 af 00 00
	00		 jne	 $LN508@LoadRaceDa
  0005a	8b 55 08	 mov	 edx, DWORD PTR _dwRaceIndex$[ebp]
  0005d	3b 57 10	 cmp	 edx, DWORD PTR [edi+16]
  00060	0f 82 a3 00 00
	00		 jb	 $LN508@LoadRaceDa
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 135  : 	if (m_kMap_dwRaceKey_stRaceName.end()==fRaceName)

  00066	39 3e		 cmp	 DWORD PTR [esi], edi
  00068	0f 84 9b 00 00
	00		 je	 $LN508@LoadRaceDa

; 136  : 		return NULL;
; 137  : 
; 138  : 	const std::string & c_rstRaceName=fRaceName->second;

  0006e	83 c7 14	 add	 edi, 20			; 00000014H

; 139  : 
; 140  : 	if (c_rstRaceName.empty())

  00071	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  00075	0f 84 8e 00 00
	00		 je	 $LN508@LoadRaceDa
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  0007b	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]

; 2235 :         const value_type* _Result = _Bx._Buf;

  0007e	8b c7		 mov	 eax, edi

; 2236 :         if (_Large_string_engaged()) {

  00080	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00083	72 02		 jb	 SHORT $LN501@LoadRaceDa

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  00085	8b 07		 mov	 eax, DWORD PTR [edi]
$LN501@LoadRaceDa:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 144  : 	if (c_rstRaceName[0] == '#')

  00087	80 38 23	 cmp	 BYTE PTR [eax], 35	; 00000023H
  0008a	0f 85 b0 00 00
	00		 jne	 $LN7@LoadRaceDa
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00090	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2236 :         if (_Large_string_engaged()) {

  00093	72 02		 jb	 SHORT $LN443@LoadRaceDa

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  00095	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN443@LoadRaceDa:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 146  : 		const char * pathName = c_rstRaceName.c_str() + 1;

  00097	47		 inc	 edi

; 147  : 		char shapeFileName[256];
; 148  : 		char motionListFileName[256];
; 149  : 		_snprintf(shapeFileName, sizeof(shapeFileName), "%sshape.msm", pathName);

  00098	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _shapeFileName$11[ebp]
  0009e	57		 push	 edi
  0009f	68 00 00 00 00	 push	 OFFSET ??_C@_0M@PECPBC@?$CFsshape?4msm@
  000a4	68 00 01 00 00	 push	 256			; 00000100H
  000a9	50		 push	 eax
  000aa	e8 00 00 00 00	 call	 __snprintf

; 150  : 		_snprintf(motionListFileName, sizeof(motionListFileName), "%smotlist.txt", pathName);

  000af	57		 push	 edi
  000b0	68 00 00 00 00	 push	 OFFSET ??_C@_0O@FJBDMFMI@?$CFsmotlist?4txt@
  000b5	8d 85 f0 fd ff
	ff		 lea	 eax, DWORD PTR _motionListFileName$10[ebp]
  000bb	68 00 01 00 00	 push	 256			; 00000100H
  000c0	50		 push	 eax
  000c1	e8 00 00 00 00	 call	 __snprintf
  000c6	83 c4 20	 add	 esp, 32			; 00000020H

; 151  : 
; 152  : 		CRaceData * pRaceData = CRaceData::New();

  000c9	e8 00 00 00 00	 call	 ?New@CRaceData@@SAPAV1@XZ ; CRaceData::New

; 153  : 		pRaceData->SetRace(dwRaceIndex);

  000ce	ff 75 08	 push	 DWORD PTR _dwRaceIndex$[ebp]
  000d1	8b f0		 mov	 esi, eax
  000d3	8b ce		 mov	 ecx, esi
  000d5	e8 00 00 00 00	 call	 ?SetRace@CRaceData@@QAEXK@Z ; CRaceData::SetRace

; 154  : 		if (!pRaceData->LoadRaceData(shapeFileName))

  000da	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _shapeFileName$11[ebp]
  000e0	8b ce		 mov	 ecx, esi
  000e2	50		 push	 eax
  000e3	e8 00 00 00 00	 call	 ?LoadRaceData@CRaceData@@QAEHPBD@Z ; CRaceData::LoadRaceData
  000e8	85 c0		 test	 eax, eax
  000ea	75 3c		 jne	 SHORT $LN8@LoadRaceDa

; 155  : 		{
; 156  : 			TraceError("CRaceManager::RegisterRacePath(race=%u).LoadRaceData(%s)", dwRaceIndex, shapeFileName);

  000ec	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _shapeFileName$11[ebp]
  000f2	50		 push	 eax
  000f3	ff 75 08	 push	 DWORD PTR _dwRaceIndex$[ebp]
  000f6	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@FBAOJDFF@CRaceManager?3?3RegisterRacePath?$CI@
  000fb	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError

; 157  : 			CRaceData::Delete(pRaceData);

  00100	56		 push	 esi
  00101	e8 00 00 00 00	 call	 ?Delete@CRaceData@@SAXPAV1@@Z ; CRaceData::Delete
  00106	83 c4 10	 add	 esp, 16			; 00000010H
$LN508@LoadRaceDa:

; 221  : }

  00109	33 c0		 xor	 eax, eax
$LN1@LoadRaceDa:
  0010b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0010e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00115	59		 pop	 ecx
  00116	5f		 pop	 edi
  00117	5e		 pop	 esi
  00118	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0011b	33 cd		 xor	 ecx, ebp
  0011d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00122	8b e5		 mov	 esp, ebp
  00124	5d		 pop	 ebp
  00125	c2 04 00	 ret	 4
$LN8@LoadRaceDa:

; 158  : 			return NULL;
; 159  : 		}
; 160  : 
; 161  : 		__LoadRaceMotionList(*pRaceData, pathName, motionListFileName);

  00128	8b 8d 90 fd ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  0012e	8d 85 f0 fd ff
	ff		 lea	 eax, DWORD PTR _motionListFileName$10[ebp]
  00134	50		 push	 eax
  00135	57		 push	 edi
  00136	56		 push	 esi
  00137	e8 00 00 00 00	 call	 ?__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z ; CRaceManager::__LoadRaceMotionList

; 162  : 
; 163  : 		return pRaceData;

  0013c	8b c6		 mov	 eax, esi
  0013e	eb cb		 jmp	 SHORT $LN1@LoadRaceDa
$LN7@LoadRaceDa:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 398  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00140	c7 85 84 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _vec_stFullPathName$[ebp], 0
  0014a	c7 85 88 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _vec_stFullPathName$[ebp+4], 0
  00154	c7 85 8c fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _vec_stFullPathName$[ebp+8], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 167  : 	__GetRaceResourcePathes(dwRaceIndex, vec_stFullPathName);

  0015e	8d 85 84 fd ff
	ff		 lea	 eax, DWORD PTR _vec_stFullPathName$[ebp]
  00164	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0016b	50		 push	 eax
  0016c	52		 push	 edx
  0016d	e8 00 00 00 00	 call	 ?__GetRaceResourcePathes@@YAXIAAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z ; __GetRaceResourcePathes
  00172	83 c4 08	 add	 esp, 8

; 168  : 
; 169  : 	CRaceData * pRaceData = CRaceData::New();

  00175	e8 00 00 00 00	 call	 ?New@CRaceData@@SAPAV1@XZ ; CRaceData::New

; 170  : 	pRaceData->SetRace(dwRaceIndex);

  0017a	ff 75 08	 push	 DWORD PTR _dwRaceIndex$[ebp]
  0017d	8b c8		 mov	 ecx, eax
  0017f	89 85 a0 fd ff
	ff		 mov	 DWORD PTR $T6[ebp], eax
  00185	e8 00 00 00 00	 call	 ?SetRace@CRaceData@@QAEXK@Z ; CRaceData::SetRace
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0018a	8b 8d 88 fd ff
	ff		 mov	 ecx, DWORD PTR _vec_stFullPathName$[ebp+4]
  00190	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00195	8b b5 84 fd ff
	ff		 mov	 esi, DWORD PTR _vec_stFullPathName$[ebp]
  0019b	2b ce		 sub	 ecx, esi
  0019d	f7 e9		 imul	 ecx
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 172  : 	for (int i = 0; i < vec_stFullPathName.size(); i++)

  0019f	c7 85 9c fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$1$[ebp], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  001a9	c1 fa 02	 sar	 edx, 2
  001ac	8b c2		 mov	 eax, edx
  001ae	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001b1	03 c2		 add	 eax, edx
  001b3	89 85 98 fd ff
	ff		 mov	 DWORD PTR $T4[ebp], eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 172  : 	for (int i = 0; i < vec_stFullPathName.size(); i++)

  001b9	0f 84 c1 02 00
	00		 je	 $LN3@LoadRaceDa
  001bf	8b ce		 mov	 ecx, esi
  001c1	89 b5 80 fd ff
	ff		 mov	 DWORD PTR tv2252[ebp], esi
  001c7	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL4@LoadRaceDa:

; 174  : 		std::string stFullPathName = vec_stFullPathName[i];

  001d0	51		 push	 ecx
  001d1	8d 8d a8 fd ff
	ff		 lea	 ecx, DWORD PTR _stFullPathName$7[ebp]
  001d7	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  001dc	8b 8d 90 fd ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  001e2	8d 85 74 fd ff
	ff		 lea	 eax, DWORD PTR __Loc$2[ebp]
  001e8	57		 push	 edi
  001e9	50		 push	 eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 174  : 		std::string stFullPathName = vec_stFullPathName[i];

  001ea	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  001ee	8d 49 0c	 lea	 ecx, DWORD PTR [ecx+12]
  001f1	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  001f6	8b b5 7c fd ff
	ff		 mov	 esi, DWORD PTR __Loc$2[ebp+8]
  001fc	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00200	75 2d		 jne	 SHORT $LN504@LoadRaceDa
  00202	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  00205	50		 push	 eax
  00206	57		 push	 edi
  00207	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  0020c	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0020f	84 c0		 test	 al, al
  00211	75 1c		 jne	 SHORT $LN504@LoadRaceDa
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 177  : 			if (m_kMap_stRaceName_stSrcName.end()==fRaceSrcName)

  00213	8b 8d 90 fd ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00219	39 71 0c	 cmp	 DWORD PTR [ecx+12], esi
  0021c	74 11		 je	 SHORT $LN504@LoadRaceDa
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  0021e	83 7e 3c 10	 cmp	 DWORD PTR [esi+60], 16	; 00000010H
  00222	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  00225	72 03		 jb	 SHORT $LN205@LoadRaceDa

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  00227	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
$LN205@LoadRaceDa:

; 3241 :         return append(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0022a	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  0022d	eb 0d		 jmp	 SHORT $LN10@LoadRaceDa
$LN504@LoadRaceDa:

; 2236 :         if (_Large_string_engaged()) {

  0022f	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H
  00233	8b cf		 mov	 ecx, edi
  00235	72 02		 jb	 SHORT $LN502@LoadRaceDa

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  00237	8b 0f		 mov	 ecx, DWORD PTR [edi]
$LN502@LoadRaceDa:

; 3241 :         return append(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00239	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
$LN10@LoadRaceDa:

; 3292 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0023c	50		 push	 eax
  0023d	51		 push	 ecx
  0023e	8d 8d a8 fd ff
	ff		 lea	 ecx, DWORD PTR _stFullPathName$7[ebp]
  00244	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00249	6a 01		 push	 1
  0024b	68 00 00 00 00	 push	 OFFSET ??_C@_01KMDKNFGN@?1@
  00250	8d 8d a8 fd ff
	ff		 lea	 ecx, DWORD PTR _stFullPathName$7[ebp]
  00256	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 185  : 		string stMSMFileName=stFullPathName;

  0025b	8d 85 a8 fd ff
	ff		 lea	 eax, DWORD PTR _stFullPathName$7[ebp]
  00261	50		 push	 eax
  00262	8d 8d d8 fd ff
	ff		 lea	 ecx, DWORD PTR _stMSMFileName$9[ebp]
  00268	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  0026d	83 bd bc fd ff
	ff 10		 cmp	 DWORD PTR _stFullPathName$7[ebp+20], 16 ; 00000010H

; 2226 :         value_type* _Result = _Bx._Buf;

  00274	8d 85 a8 fd ff
	ff		 lea	 eax, DWORD PTR _stFullPathName$7[ebp]

; 2227 :         if (_Large_string_engaged()) {

  0027a	8b b5 a8 fd ff
	ff		 mov	 esi, DWORD PTR _stFullPathName$7[ebp]
  00280	0f 43 c6	 cmovae	 eax, esi
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 185  : 		string stMSMFileName=stFullPathName;

  00283	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00287	0f 93 85 a7 fd
	ff ff		 setae	 BYTE PTR tv2265[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 186  : 		if (stFullPathName[0] == '#') // @fixme021 #season reads shape.msm only

  0028e	80 38 23	 cmp	 BYTE PTR [eax], 35	; 00000023H
  00291	0f 85 97 00 00
	00		 jne	 $LN11@LoadRaceDa
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 3292 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00297	6a 09		 push	 9
  00299	68 00 00 00 00	 push	 OFFSET ??_C@_09HPPJBJBB@shape?4msm@
  0029e	8d 8d d8 fd ff
	ff		 lea	 ecx, DWORD PTR _stMSMFileName$9[ebp]
  002a4	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2278 :         return (_STD min)(_Size, _Mysize - _Off);

  002a9	8b 85 b8 fd ff
	ff		 mov	 eax, DWORD PTR _stFullPathName$7[ebp+16]

; 2226 :         value_type* _Result = _Bx._Buf;

  002af	8d 8d a8 fd ff
	ff		 lea	 ecx, DWORD PTR _stFullPathName$7[ebp]

; 2278 :         return (_STD min)(_Size, _Mysize - _Off);

  002b5	ba 01 00 00 00	 mov	 edx, 1
  002ba	3b c2		 cmp	 eax, edx
  002bc	0f 42 d0	 cmovb	 edx, eax

; 2227 :         if (_Large_string_engaged()) {

  002bf	80 bd a7 fd ff
	ff 00		 cmp	 BYTE PTR tv2265[ebp], 0
  002c6	0f 45 ce	 cmovne	 ecx, esi

; 3638 :         const size_type _New_size = _Old_size - _Count;

  002c9	2b c2		 sub	 eax, edx
  002cb	89 85 94 fd ff
	ff		 mov	 DWORD PTR _stFullPathName$2$[ebp], eax

; 3639 :         _Traits::move(_Erase_at, _Erase_at + _Count, _New_size - _Off + 1); // move suffix + null up

  002d1	40		 inc	 eax

; 119  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  002d2	50		 push	 eax

; 3639 :         _Traits::move(_Erase_at, _Erase_at + _Count, _New_size - _Off + 1); // move suffix + null up

  002d3	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]

; 119  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  002d6	50		 push	 eax
  002d7	51		 push	 ecx
  002d8	e8 00 00 00 00	 call	 _memmove

; 2278 :         return (_STD min)(_Size, _Mysize - _Off);

  002dd	8b b5 e8 fd ff
	ff		 mov	 esi, DWORD PTR _stMSMFileName$9[ebp+16]
  002e3	ba 01 00 00 00	 mov	 edx, 1

; 3641 :         _Mypair._Myval2._Mysize = _New_size;

  002e8	8b 8d 94 fd ff
	ff		 mov	 ecx, DWORD PTR _stFullPathName$2$[ebp]

; 2278 :         return (_STD min)(_Size, _Mysize - _Off);

  002ee	3b f2		 cmp	 esi, edx

; 3641 :         _Mypair._Myval2._Mysize = _New_size;

  002f0	89 8d b8 fd ff
	ff		 mov	 DWORD PTR _stFullPathName$7[ebp+16], ecx

; 2226 :         value_type* _Result = _Bx._Buf;

  002f6	8d 8d d8 fd ff
	ff		 lea	 ecx, DWORD PTR _stMSMFileName$9[ebp]

; 2278 :         return (_STD min)(_Size, _Mysize - _Off);

  002fc	0f 42 d6	 cmovb	 edx, esi

; 2227 :         if (_Large_string_engaged()) {

  002ff	83 bd ec fd ff
	ff 10		 cmp	 DWORD PTR _stMSMFileName$9[ebp+20], 16 ; 00000010H
  00306	0f 43 8d d8 fd
	ff ff		 cmovae	 ecx, DWORD PTR _stMSMFileName$9[ebp]

; 3638 :         const size_type _New_size = _Old_size - _Count;

  0030d	2b f2		 sub	 esi, edx

; 3639 :         _Traits::move(_Erase_at, _Erase_at + _Count, _New_size - _Off + 1); // move suffix + null up

  0030f	8d 46 01	 lea	 eax, DWORD PTR [esi+1]

; 119  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00312	50		 push	 eax

; 3639 :         _Traits::move(_Erase_at, _Erase_at + _Count, _New_size - _Off + 1); // move suffix + null up

  00313	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]

; 119  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00316	50		 push	 eax
  00317	51		 push	 ecx
  00318	e8 00 00 00 00	 call	 _memmove

; 3641 :         _Mypair._Myval2._Mysize = _New_size;

  0031d	89 b5 e8 fd ff
	ff		 mov	 DWORD PTR _stMSMFileName$9[ebp+16], esi

; 119  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00323	83 c4 18	 add	 esp, 24			; 00000018H
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 191  : 		}

  00326	8b b5 a8 fd ff
	ff		 mov	 esi, DWORD PTR _stFullPathName$7[ebp]
  0032c	eb 37		 jmp	 SHORT $LN12@LoadRaceDa
$LN11@LoadRaceDa:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  0032e	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H
  00332	8b c7		 mov	 eax, edi
  00334	72 02		 jb	 SHORT $LN258@LoadRaceDa

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  00336	8b 07		 mov	 eax, DWORD PTR [edi]
$LN258@LoadRaceDa:

; 3241 :         return append(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00338	ff 77 10	 push	 DWORD PTR [edi+16]
  0033b	8d 8d d8 fd ff
	ff		 lea	 ecx, DWORD PTR _stMSMFileName$9[ebp]
  00341	50		 push	 eax
  00342	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 3292 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00347	6a 04		 push	 4
  00349	68 00 00 00 00	 push	 OFFSET ??_C@_04IIEHFLK@?4msm@
  0034e	8d 8d d8 fd ff
	ff		 lea	 ecx, DWORD PTR _stMSMFileName$9[ebp]
  00354	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00359	8b 85 b8 fd ff
	ff		 mov	 eax, DWORD PTR _stFullPathName$7[ebp+16]
  0035f	89 85 94 fd ff
	ff		 mov	 DWORD PTR _stFullPathName$2$[ebp], eax
$LN12@LoadRaceDa:

; 2236 :         if (_Large_string_engaged()) {

  00365	83 bd ec fd ff
	ff 10		 cmp	 DWORD PTR _stMSMFileName$9[ebp+20], 16 ; 00000010H
  0036c	8d 85 d8 fd ff
	ff		 lea	 eax, DWORD PTR _stMSMFileName$9[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 198  : 		if (!pRaceData->LoadRaceData(stMSMFileName.c_str()))

  00372	8b 8d a0 fd ff
	ff		 mov	 ecx, DWORD PTR $T6[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  00378	0f 43 85 d8 fd
	ff ff		 cmovae	 eax, DWORD PTR _stMSMFileName$9[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 198  : 		if (!pRaceData->LoadRaceData(stMSMFileName.c_str()))

  0037f	50		 push	 eax
  00380	e8 00 00 00 00	 call	 ?LoadRaceData@CRaceData@@QAEHPBD@Z ; CRaceData::LoadRaceData
  00385	85 c0		 test	 eax, eax
  00387	0f 85 b3 01 00
	00		 jne	 $LN13@LoadRaceDa

; 199  : 		{
; 200  : 			if (i != vec_stFullPathName.size() - 1)

  0038d	8b 85 98 fd ff
	ff		 mov	 eax, DWORD PTR $T4[ebp]
  00393	48		 dec	 eax
  00394	39 85 9c fd ff
	ff		 cmp	 DWORD PTR _i$1$[ebp], eax
  0039a	8d 85 d8 fd ff
	ff		 lea	 eax, DWORD PTR _stMSMFileName$9[ebp]
  003a0	0f 84 61 01 00
	00		 je	 $LN14@LoadRaceDa
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  003a6	83 bd ec fd ff
	ff 10		 cmp	 DWORD PTR _stMSMFileName$9[ebp+20], 16 ; 00000010H
  003ad	0f 43 85 d8 fd
	ff ff		 cmovae	 eax, DWORD PTR _stMSMFileName$9[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 202  : 				Tracenf("CRaceManager::RegisterRacePath : RACE[%u] LOAD MSMFILE[%s] ERROR. Will Find Another Path.", dwRaceIndex, stMSMFileName.c_str()); // @warme668

  003b4	50		 push	 eax
  003b5	ff 75 08	 push	 DWORD PTR _dwRaceIndex$[ebp]
  003b8	68 00 00 00 00	 push	 OFFSET ??_C@_0FK@NGFDIHNH@CRaceManager?3?3RegisterRacePath?5@
  003bd	e8 00 00 00 00	 call	 ?Tracenf@@YAXPBDZZ	; Tracenf
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4832 :         if (_My_data._Large_string_engaged()) {

  003c2	8b 8d ec fd ff
	ff		 mov	 ecx, DWORD PTR _stMSMFileName$9[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 202  : 				Tracenf("CRaceManager::RegisterRacePath : RACE[%u] LOAD MSMFILE[%s] ERROR. Will Find Another Path.", dwRaceIndex, stMSMFileName.c_str()); // @warme668

  003c8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 203  : 				continue;

  003cb	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4832 :         if (_My_data._Large_string_engaged()) {

  003cf	83 f9 10	 cmp	 ecx, 16			; 00000010H
  003d2	72 2f		 jb	 SHORT $LN385@LoadRaceDa
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  003d4	8b 95 d8 fd ff
	ff		 mov	 edx, DWORD PTR _stMSMFileName$9[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  003da	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  003db	8b c2		 mov	 eax, edx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  003dd	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  003e3	72 14		 jb	 SHORT $LN395@LoadRaceDa

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  003e5	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  003e8	83 c1 23	 add	 ecx, 35			; 00000023H
  003eb	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  003ed	83 c0 fc	 add	 eax, -4			; fffffffcH
  003f0	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  003f3	0f 87 b9 03 00
	00		 ja	 $LN150@LoadRaceDa
$LN395@LoadRaceDa:

; 265  :         ::operator delete(_Ptr, _Bytes);

  003f9	51		 push	 ecx
  003fa	52		 push	 edx
  003fb	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00400	83 c4 08	 add	 esp, 8
$LN385@LoadRaceDa:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00403	8b 85 bc fd ff
	ff		 mov	 eax, DWORD PTR _stFullPathName$7[ebp+20]

; 4841 :         _My_data._Mysize = 0;

  00409	c7 85 e8 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _stMSMFileName$9[ebp+16], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  00413	c7 85 ec fd ff
	ff 0f 00 00 00	 mov	 DWORD PTR _stMSMFileName$9[ebp+20], 15 ; 0000000fH

; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0041d	c6 85 d8 fd ff
	ff 00		 mov	 BYTE PTR _stMSMFileName$9[ebp], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 203  : 				continue;

  00424	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00428	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  0042b	72 2b		 jb	 SHORT $LN412@LoadRaceDa

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0042d	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00430	8b c6		 mov	 eax, esi

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00432	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00438	72 14		 jb	 SHORT $LN422@LoadRaceDa

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0043a	8b 70 fc	 mov	 esi, DWORD PTR [eax-4]
  0043d	83 c1 23	 add	 ecx, 35			; 00000023H
  00440	2b c6		 sub	 eax, esi

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00442	83 c0 fc	 add	 eax, -4			; fffffffcH
  00445	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00448	0f 87 64 03 00
	00		 ja	 $LN150@LoadRaceDa
$LN422@LoadRaceDa:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0044e	51		 push	 ecx
  0044f	56		 push	 esi
  00450	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00455	83 c4 08	 add	 esp, 8
$LN412@LoadRaceDa:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 172  : 	for (int i = 0; i < vec_stFullPathName.size(); i++)

  00458	8b 85 9c fd ff
	ff		 mov	 eax, DWORD PTR _i$1$[ebp]
  0045e	8b 8d 80 fd ff
	ff		 mov	 ecx, DWORD PTR tv2252[ebp]
  00464	40		 inc	 eax
  00465	83 c1 18	 add	 ecx, 24			; 00000018H
  00468	89 85 9c fd ff
	ff		 mov	 DWORD PTR _i$1$[ebp], eax
  0046e	89 8d 80 fd ff
	ff		 mov	 DWORD PTR tv2252[ebp], ecx
  00474	3b 85 98 fd ff
	ff		 cmp	 eax, DWORD PTR $T4[ebp]
  0047a	0f 82 50 fd ff
	ff		 jb	 $LL4@LoadRaceDa
$LN3@LoadRaceDa:

; 215  : 
; 216  : 		return pRaceData;
; 217  : 	}
; 218  : 	TraceError("CRaceManager::RegisterRacePath : RACE[%u] HAVE NO PATH ERROR", dwRaceIndex);

  00480	ff 75 08	 push	 DWORD PTR _dwRaceIndex$[ebp]
  00483	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@CNIFOKKO@CRaceManager?3?3RegisterRacePath?5@
  00488	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError

; 219  : 	CRaceData::Delete(pRaceData);

  0048d	ff b5 a0 fd ff
	ff		 push	 DWORD PTR $T6[ebp]
  00493	e8 00 00 00 00	 call	 ?Delete@CRaceData@@SAXPAV1@@Z ; CRaceData::Delete
  00498	83 c4 0c	 add	 esp, 12			; 0000000cH

; 220  : 	return NULL;

  0049b	33 f6		 xor	 esi, esi
$LN21@LoadRaceDa:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  0049d	8b bd 84 fd ff
	ff		 mov	 edi, DWORD PTR _vec_stFullPathName$[ebp]
  004a3	85 ff		 test	 edi, edi
  004a5	0f 84 f6 02 00
	00		 je	 $LN25@LoadRaceDa

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);

  004ab	8d 8d 84 fd ff
	ff		 lea	 ecx, DWORD PTR _vec_stFullPathName$[ebp]
  004b1	51		 push	 ecx
  004b2	ff b5 88 fd ff
	ff		 push	 DWORD PTR _vec_stFullPathName$[ebp+4]
  004b8	57		 push	 edi
  004b9	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  004be	8b 8d 8c fd ff
	ff		 mov	 ecx, DWORD PTR _vec_stFullPathName$[ebp+8]
  004c4	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  004c9	2b cf		 sub	 ecx, edi
  004cb	83 c4 0c	 add	 esp, 12			; 0000000cH
  004ce	f7 e9		 imul	 ecx
  004d0	c1 fa 02	 sar	 edx, 2
  004d3	8b c2		 mov	 eax, edx
  004d5	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  004d8	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  004da	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  004dd	8b c7		 mov	 eax, edi
  004df	c1 e1 03	 shl	 ecx, 3

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  004e2	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  004e8	0f 82 a9 02 00
	00		 jb	 $LN41@LoadRaceDa

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  004ee	8b 78 fc	 mov	 edi, DWORD PTR [eax-4]
  004f1	83 c1 23	 add	 ecx, 35			; 00000023H
  004f4	2b c7		 sub	 eax, edi

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  004f6	83 c0 fc	 add	 eax, -4			; fffffffcH
  004f9	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  004fc	0f 87 a6 02 00
	00		 ja	 $LN513@LoadRaceDa
  00502	e9 90 02 00 00	 jmp	 $LN41@LoadRaceDa
$LN14@LoadRaceDa:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00507	83 bd ec fd ff
	ff 10		 cmp	 DWORD PTR _stMSMFileName$9[ebp+20], 16 ; 00000010H

; 2236 :         if (_Large_string_engaged()) {

  0050e	0f 43 85 d8 fd
	ff ff		 cmovae	 eax, DWORD PTR _stMSMFileName$9[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 206  : 			TraceError("CRaceManager::RegisterRacePath : RACE[%u] LOAD MSMFILE[%s] ERROR", dwRaceIndex, stMSMFileName.c_str());

  00515	50		 push	 eax
  00516	ff 75 08	 push	 DWORD PTR _dwRaceIndex$[ebp]
  00519	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@IDBEOJF@CRaceManager?3?3RegisterRacePath?5@
  0051e	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError

; 207  : 			CRaceData::Delete(pRaceData);

  00523	ff b5 a0 fd ff
	ff		 push	 DWORD PTR $T6[ebp]
  00529	e8 00 00 00 00	 call	 ?Delete@CRaceData@@SAXPAV1@@Z ; CRaceData::Delete
  0052e	83 c4 10	 add	 esp, 16			; 00000010H
  00531	c7 85 a0 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T6[ebp], 0
  0053b	e9 cb 01 00 00	 jmp	 $LN335@LoadRaceDa
$LN13@LoadRaceDa:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  00540	8b bd bc fd ff
	ff		 mov	 edi, DWORD PTR _stFullPathName$7[ebp+20]
  00546	8d 8d a8 fd ff
	ff		 lea	 ecx, DWORD PTR _stFullPathName$7[ebp]

; 2620 :         if (_Count > max_size()) {

  0054c	8b 85 94 fd ff
	ff		 mov	 eax, DWORD PTR _stFullPathName$2$[ebp]

; 2236 :         if (_Large_string_engaged()) {

  00552	83 ff 10	 cmp	 edi, 16			; 00000010H
  00555	0f 57 c0	 xorps	 xmm0, xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  00558	c7 85 d0 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _stMotionListFileName$8[ebp+16], 0

; 2236 :         if (_Large_string_engaged()) {

  00562	0f 43 ce	 cmovae	 ecx, esi

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  00565	c7 85 d4 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _stMotionListFileName$8[ebp+20], 0

; 2236 :         if (_Large_string_engaged()) {

  0056f	89 8d 98 fd ff
	ff		 mov	 DWORD PTR __Result$2$[ebp], ecx

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00575	0f 11 85 c0 fd
	ff ff		 movups	 XMMWORD PTR _stMotionListFileName$8[ebp], xmm0

; 2620 :         if (_Count > max_size()) {

  0057c	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  00581	0f 87 26 02 00
	00		 ja	 $LN514@LoadRaceDa

; 2622 :         }
; 2623 : 
; 2624 :         auto& _Al       = _Getal();
; 2625 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 2626 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 2627 : 
; 2628 :         if (_Count < _BUF_SIZE) {

  00587	c7 85 d4 fd ff
	ff 0f 00 00 00	 mov	 DWORD PTR _stMotionListFileName$8[ebp+20], 15 ; 0000000fH
  00591	83 f8 10	 cmp	 eax, 16			; 00000010H
  00594	73 15		 jae	 SHORT $LN287@LoadRaceDa

; 2629 :             _My_data._Mysize = _Count;

  00596	89 85 d0 fd ff
	ff		 mov	 DWORD PTR _stMotionListFileName$8[ebp+16], eax

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0059c	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  0059f	0f 11 85 c0 fd
	ff ff		 movups	 XMMWORD PTR _stMotionListFileName$8[ebp], xmm0

; 2647 :             return;

  005a6	e9 9e 00 00 00	 jmp	 $LN308@LoadRaceDa
$LN287@LoadRaceDa:

; 4714 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  005ab	83 c8 0f	 or	 eax, 15			; 0000000fH
  005ae	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH

; 4715 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  005b3	76 22		 jbe	 SHORT $LN294@LoadRaceDa

; 4716 :             return _Max;

  005b5	b9 00 00 00 80	 mov	 ecx, -2147483648	; 80000000H
  005ba	c7 85 9c fd ff
	ff ff ff ff 7f	 mov	 DWORD PTR $T5[ebp], 2147483647 ; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  005c4	51		 push	 ecx
  005c5	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  005ca	8b d0		 mov	 edx, eax
  005cc	83 c4 04	 add	 esp, 4
  005cf	8b 85 9c fd ff
	ff		 mov	 eax, DWORD PTR $T5[ebp]
  005d5	eb 47		 jmp	 SHORT $LN301@LoadRaceDa
$LN294@LoadRaceDa:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4723 :         return (_STD max)(_Masked, _Old + _Old / 2);

  005d7	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  005dc	3b c1		 cmp	 eax, ecx
  005de	0f 42 c1	 cmovb	 eax, ecx
  005e1	89 85 9c fd ff
	ff		 mov	 DWORD PTR $T5[ebp], eax

; 2652 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  005e7	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  005ea	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  005f0	72 13		 jb	 SHORT $LN302@LoadRaceDa

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  005f2	51		 push	 ecx
  005f3	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  005f8	8b d0		 mov	 edx, eax
  005fa	83 c4 04	 add	 esp, 4
  005fd	8b 85 9c fd ff
	ff		 mov	 eax, DWORD PTR $T5[ebp]
  00603	eb 19		 jmp	 SHORT $LN301@LoadRaceDa
$LN302@LoadRaceDa:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  00605	85 c9		 test	 ecx, ecx
  00607	74 13		 je	 SHORT $LN303@LoadRaceDa

; 87   :         return ::operator new(_Bytes);

  00609	51		 push	 ecx
  0060a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 245  :         return _Traits::_Allocate(_Bytes);

  0060f	8b d0		 mov	 edx, eax

; 87   :         return ::operator new(_Bytes);

  00611	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  00614	8b 85 9c fd ff
	ff		 mov	 eax, DWORD PTR $T5[ebp]
  0061a	eb 02		 jmp	 SHORT $LN301@LoadRaceDa
$LN303@LoadRaceDa:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  0061c	33 d2		 xor	 edx, edx
$LN301@LoadRaceDa:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2657 :         _My_data._Mysize = _Count;

  0061e	8b 8d 94 fd ff
	ff		 mov	 ecx, DWORD PTR _stFullPathName$2$[ebp]

; 2658 :         _My_data._Myres  = _New_capacity;

  00624	89 85 d4 fd ff
	ff		 mov	 DWORD PTR _stMotionListFileName$8[ebp+20], eax
  0062a	89 95 c0 fd ff
	ff		 mov	 DWORD PTR _stMotionListFileName$8[ebp], edx
  00630	89 8d d0 fd ff
	ff		 mov	 DWORD PTR _stMotionListFileName$8[ebp+16], ecx

; 2659 :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2660 :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 2661 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 2662 :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2663 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);
; 2664 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 2665 :         } else { // _Strat == _Construct_strategy::_From_string
; 2666 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);

  00636	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00639	50		 push	 eax
  0063a	ff b5 98 fd ff
	ff		 push	 DWORD PTR __Result$2$[ebp]
  00640	52		 push	 edx
  00641	e8 00 00 00 00	 call	 _memcpy
  00646	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN308@LoadRaceDa:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 212  : 		stMotionListFileName+=pRaceData->GetMotionListFileName();

  00649	8b 8d a0 fd ff
	ff		 mov	 ecx, DWORD PTR $T6[ebp]
  0064f	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00653	e8 00 00 00 00	 call	 ?GetMotionListFileName@CRaceData@@QBEPBDXZ ; CRaceData::GetMotionListFileName
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00658	8b d0		 mov	 edx, eax
  0065a	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
  0065d	89 8d 98 fd ff
	ff		 mov	 DWORD PTR tv2259[ebp], ecx
$LL509@LoadRaceDa:
  00663	8a 0a		 mov	 cl, BYTE PTR [edx]
  00665	42		 inc	 edx
  00666	84 c9		 test	 cl, cl
  00668	75 f9		 jne	 SHORT $LL509@LoadRaceDa
  0066a	2b 95 98 fd ff
	ff		 sub	 edx, DWORD PTR tv2259[ebp]

; 3292 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00670	8d 8d c0 fd ff
	ff		 lea	 ecx, DWORD PTR _stMotionListFileName$8[ebp]
  00676	52		 push	 edx
  00677	50		 push	 eax
  00678	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2244 :         return _BUF_SIZE <= _Myres;

  0067d	83 bd d4 fd ff
	ff 10		 cmp	 DWORD PTR _stMotionListFileName$8[ebp+20], 16 ; 00000010H

; 2235 :         const value_type* _Result = _Bx._Buf;

  00684	8d 8d c0 fd ff
	ff		 lea	 ecx, DWORD PTR _stMotionListFileName$8[ebp]
  0068a	8d 85 a8 fd ff
	ff		 lea	 eax, DWORD PTR _stFullPathName$7[ebp]

; 2236 :         if (_Large_string_engaged()) {

  00690	0f 43 8d c0 fd
	ff ff		 cmovae	 ecx, DWORD PTR _stMotionListFileName$8[ebp]

; 2244 :         return _BUF_SIZE <= _Myres;

  00697	83 ff 10	 cmp	 edi, 16			; 00000010H
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 214  : 		__LoadRaceMotionList(*pRaceData, stFullPathName.c_str(), stMotionListFileName.c_str());

  0069a	51		 push	 ecx
  0069b	8b 8d 90 fd ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  006a1	0f 43 c6	 cmovae	 eax, esi
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 214  : 		__LoadRaceMotionList(*pRaceData, stFullPathName.c_str(), stMotionListFileName.c_str());

  006a4	50		 push	 eax
  006a5	ff b5 a0 fd ff
	ff		 push	 DWORD PTR $T6[ebp]
  006ab	e8 00 00 00 00	 call	 ?__LoadRaceMotionList@CRaceManager@@IAE_NAAVCRaceData@@PBD1@Z ; CRaceManager::__LoadRaceMotionList
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  006b0	8b 8d d4 fd ff
	ff		 mov	 ecx, DWORD PTR _stMotionListFileName$8[ebp+20]
  006b6	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  006b9	72 2f		 jb	 SHORT $LN342@LoadRaceDa
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  006bb	8b 95 c0 fd ff
	ff		 mov	 edx, DWORD PTR _stMotionListFileName$8[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  006c1	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  006c2	8b c2		 mov	 eax, edx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  006c4	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  006ca	72 14		 jb	 SHORT $LN352@LoadRaceDa

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  006cc	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  006cf	83 c1 23	 add	 ecx, 35			; 00000023H
  006d2	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  006d4	83 c0 fc	 add	 eax, -4			; fffffffcH
  006d7	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  006da	0f 87 d2 00 00
	00		 ja	 $LN150@LoadRaceDa
$LN352@LoadRaceDa:

; 265  :         ::operator delete(_Ptr, _Bytes);

  006e0	51		 push	 ecx
  006e1	52		 push	 edx
  006e2	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  006e7	83 c4 08	 add	 esp, 8
$LN342@LoadRaceDa:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  006ea	8b b5 a8 fd ff
	ff		 mov	 esi, DWORD PTR _stFullPathName$7[ebp]
  006f0	c7 85 d0 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _stMotionListFileName$8[ebp+16], 0
  006fa	c7 85 d4 fd ff
	ff 0f 00 00 00	 mov	 DWORD PTR _stMotionListFileName$8[ebp+20], 15 ; 0000000fH
  00704	c6 85 c0 fd ff
	ff 00		 mov	 BYTE PTR _stMotionListFileName$8[ebp], 0
$LN335@LoadRaceDa:

; 2244 :         return _BUF_SIZE <= _Myres;

  0070b	8b 8d ec fd ff
	ff		 mov	 ecx, DWORD PTR _stMSMFileName$9[ebp+20]
  00711	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  00714	72 2b		 jb	 SHORT $LN170@LoadRaceDa
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00716	8b 95 d8 fd ff
	ff		 mov	 edx, DWORD PTR _stMSMFileName$9[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0071c	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0071d	8b c2		 mov	 eax, edx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0071f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00725	72 10		 jb	 SHORT $LN180@LoadRaceDa

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00727	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0072a	83 c1 23	 add	 ecx, 35			; 00000023H
  0072d	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0072f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00732	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00735	77 7b		 ja	 SHORT $LN150@LoadRaceDa
$LN180@LoadRaceDa:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00737	51		 push	 ecx
  00738	52		 push	 edx
  00739	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0073e	83 c4 08	 add	 esp, 8
$LN170@LoadRaceDa:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00741	8b bd bc fd ff
	ff		 mov	 edi, DWORD PTR _stFullPathName$7[ebp+20]

; 4841 :         _My_data._Mysize = 0;

  00747	c7 85 e8 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _stMSMFileName$9[ebp+16], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  00751	c7 85 ec fd ff
	ff 0f 00 00 00	 mov	 DWORD PTR _stMSMFileName$9[ebp+20], 15 ; 0000000fH

; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0075b	c6 85 d8 fd ff
	ff 00		 mov	 BYTE PTR _stMSMFileName$9[ebp], 0

; 2244 :         return _BUF_SIZE <= _Myres;

  00762	83 ff 10	 cmp	 edi, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  00765	72 25		 jb	 SHORT $LN143@LoadRaceDa

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00767	47		 inc	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00768	8b c6		 mov	 eax, esi

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0076a	81 ff 00 10 00
	00		 cmp	 edi, 4096		; 00001000H
  00770	72 10		 jb	 SHORT $LN153@LoadRaceDa

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00772	8b 70 fc	 mov	 esi, DWORD PTR [eax-4]
  00775	83 c7 23	 add	 edi, 35			; 00000023H
  00778	2b c6		 sub	 eax, esi

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0077a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0077d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00780	77 30		 ja	 SHORT $LN150@LoadRaceDa
$LN153@LoadRaceDa:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00782	57		 push	 edi
  00783	56		 push	 esi
  00784	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00789	83 c4 08	 add	 esp, 8
$LN143@LoadRaceDa:
  0078c	8b b5 a0 fd ff
	ff		 mov	 esi, DWORD PTR $T6[ebp]
  00792	e9 06 fd ff ff	 jmp	 $LN21@LoadRaceDa
$LN41@LoadRaceDa:
  00797	51		 push	 ecx
  00798	57		 push	 edi
  00799	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0079e	83 c4 08	 add	 esp, 8
$LN25@LoadRaceDa:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 220  : 	return NULL;

  007a1	8b c6		 mov	 eax, esi
  007a3	e9 63 f9 ff ff	 jmp	 $LN1@LoadRaceDa
$LN513@LoadRaceDa:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  007a8	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN514@LoadRaceDa:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2621 :             _Xlen_string(); // result too long

  007ad	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN150@LoadRaceDa:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  007b2	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN511@LoadRaceDa:
  007b7	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?__LoadRaceData@CRaceManager@@IAEPAVCRaceData@@K@Z$0:
  00000	8d 8d 84 fd ff
	ff		 lea	 ecx, DWORD PTR _vec_stFullPathName$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__unwindfunclet$?__LoadRaceData@CRaceManager@@IAEPAVCRaceData@@K@Z$1:
  0000b	8d 8d a8 fd ff
	ff		 lea	 ecx, DWORD PTR _stFullPathName$7[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?__LoadRaceData@CRaceManager@@IAEPAVCRaceData@@K@Z$2:
  00016	8d 8d d8 fd ff
	ff		 lea	 ecx, DWORD PTR _stMSMFileName$9[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?__LoadRaceData@CRaceManager@@IAEPAVCRaceData@@K@Z$3:
  00021	8d 8d c0 fd ff
	ff		 lea	 ecx, DWORD PTR _stMotionListFileName$8[ebp]
  00027	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0002c	cc		 int	 3
  0002d	cc		 int	 3
  0002e	cc		 int	 3
  0002f	cc		 int	 3
  00030	cc		 int	 3
__ehhandler$?__LoadRaceData@CRaceManager@@IAEPAVCRaceData@@K@Z:
  00031	90		 npad	 1
  00032	90		 npad	 1
  00033	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00037	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003a	8b 8a 74 fd ff
	ff		 mov	 ecx, DWORD PTR [edx-652]
  00040	33 c8		 xor	 ecx, eax
  00042	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00047	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0004a	33 c8		 xor	 ecx, eax
  0004c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00051	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?__LoadRaceData@CRaceManager@@IAEPAVCRaceData@@K@Z
  00056	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?__LoadRaceData@CRaceManager@@IAEPAVCRaceData@@K@Z ENDP	; CRaceManager::__LoadRaceData
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
;	COMDAT ?GetRaceDataPointer@CRaceManager@@QAEHKPAPAVCRaceData@@@Z
_TEXT	SEGMENT
__Loc$1 = -16						; size = 12
$T2 = -12						; size = 8
_pRaceData$3 = -4					; size = 4
_dwRaceIndex$ = 8					; size = 4
_ppRaceData$ = 12					; size = 4
?GetRaceDataPointer@CRaceManager@@QAEHKPAPAVCRaceData@@@Z PROC ; CRaceManager::GetRaceDataPointer, COMDAT
; _this$ = ecx

; 414  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0000b	8d 45 08	 lea	 eax, DWORD PTR _dwRaceIndex$[ebp]
  0000e	50		 push	 eax
  0000f	8d 45 f0	 lea	 eax, DWORD PTR __Loc$1[ebp]
  00012	50		 push	 eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 415  : 	TRaceDataIterator itor = m_RaceDataMap.find(dwRaceIndex);

  00013	8d 5f 04	 lea	 ebx, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00016	8b cb		 mov	 ecx, ebx
  00018	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCRaceData@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CRaceData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData *> >,0> >::_Find_lower_bound<unsigned long>

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0001d	8b 4d f8	 mov	 ecx, DWORD PTR __Loc$1[ebp+8]
  00020	8b 75 08	 mov	 esi, DWORD PTR _dwRaceIndex$[ebp]
  00023	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00027	75 1f		 jne	 SHORT $LN38@GetRaceDat
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  00029	3b 71 10	 cmp	 esi, DWORD PTR [ecx+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0002c	72 1a		 jb	 SHORT $LN38@GetRaceDat

; 233  :         return this->_Ptr == _Right._Ptr;

  0002e	39 0b		 cmp	 DWORD PTR [ebx], ecx
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 417  : 	if (m_RaceDataMap.end() == itor)

  00030	74 16		 je	 SHORT $LN38@GetRaceDat

; 430  : 	}
; 431  : 
; 432  : 	*ppRaceData = itor->second;

  00032	8b 45 0c	 mov	 eax, DWORD PTR _ppRaceData$[ebp]
  00035	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00038	5f		 pop	 edi

; 433  : 	return TRUE;
; 434  : }

  00039	5e		 pop	 esi
  0003a	89 08		 mov	 DWORD PTR [eax], ecx
  0003c	b8 01 00 00 00	 mov	 eax, 1
  00041	5b		 pop	 ebx
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c2 08 00	 ret	 8
$LN38@GetRaceDat:

; 418  : 	{
; 419  : 		CRaceData * pRaceData = __LoadRaceData(dwRaceIndex);

  00048	56		 push	 esi
  00049	8b cf		 mov	 ecx, edi
  0004b	e8 00 00 00 00	 call	 ?__LoadRaceData@CRaceManager@@IAEPAVCRaceData@@K@Z ; CRaceManager::__LoadRaceData
  00050	8b f8		 mov	 edi, eax
  00052	89 7d fc	 mov	 DWORD PTR _pRaceData$3[ebp], edi
  00055	85 ff		 test	 edi, edi

; 420  : 
; 421  : 		if (pRaceData)

  00057	74 26		 je	 SHORT $LN3@GetRaceDat

; 422  : 		{
; 423  : 			m_RaceDataMap.emplace(dwRaceIndex, pRaceData);

  00059	8d 45 fc	 lea	 eax, DWORD PTR _pRaceData$3[ebp]
  0005c	8b cb		 mov	 ecx, ebx
  0005e	50		 push	 eax
  0005f	8d 45 08	 lea	 eax, DWORD PTR _dwRaceIndex$[ebp]
  00062	50		 push	 eax
  00063	8d 45 f4	 lea	 eax, DWORD PTR $T2[ebp]
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 ??$emplace@AAKAAPAVCRaceData@@@?$_Tree@V?$_Tmap_traits@KPAVCRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCRaceData@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCRaceData@@@std@@@std@@@std@@@std@@_N@1@AAKAAPAVCRaceData@@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CRaceData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData *> >,0> >::emplace<unsigned long &,CRaceData * &>

; 424  : 			*ppRaceData = pRaceData;

  0006c	8b 45 0c	 mov	 eax, DWORD PTR _ppRaceData$[ebp]
  0006f	89 38		 mov	 DWORD PTR [eax], edi

; 425  : 			return TRUE;

  00071	b8 01 00 00 00	 mov	 eax, 1
  00076	5f		 pop	 edi

; 433  : 	return TRUE;
; 434  : }

  00077	5e		 pop	 esi
  00078	5b		 pop	 ebx
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c2 08 00	 ret	 8
$LN3@GetRaceDat:

; 426  : 		}
; 427  : 
; 428  : 		TraceError("CRaceManager::GetRaceDataPointer: cannot load data by dwRaceIndex %lu", dwRaceIndex);

  0007f	56		 push	 esi
  00080	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@LLEJKJIA@CRaceManager?3?3GetRaceDataPointe@
  00085	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  0008a	83 c4 08	 add	 esp, 8

; 429  : 		return FALSE;

  0008d	33 c0		 xor	 eax, eax
  0008f	5f		 pop	 edi

; 433  : 	return TRUE;
; 434  : }

  00090	5e		 pop	 esi
  00091	5b		 pop	 ebx
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c2 08 00	 ret	 8
?GetRaceDataPointer@CRaceManager@@QAEHKPAPAVCRaceData@@@Z ENDP ; CRaceManager::GetRaceDataPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
;	COMDAT ?GetSelectedRaceDataPointer@CRaceManager@@QAEPAVCRaceData@@XZ
_TEXT	SEGMENT
?GetSelectedRaceDataPointer@CRaceManager@@QAEPAVCRaceData@@XZ PROC ; CRaceManager::GetSelectedRaceDataPointer, COMDAT
; _this$ = ecx

; 410  : 	return m_pSelectedRaceData;

  00000	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]

; 411  : }

  00003	c3		 ret	 0
?GetSelectedRaceDataPointer@CRaceManager@@QAEPAVCRaceData@@XZ ENDP ; CRaceManager::GetSelectedRaceDataPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
;	COMDAT ?SelectRace@CRaceManager@@QAEXK@Z
_TEXT	SEGMENT
__Loc$1 = -12						; size = 12
_dwRaceIndex$ = 8					; size = 4
?SelectRace@CRaceManager@@QAEXK@Z PROC			; CRaceManager::SelectRace, COMDAT
; _this$ = ecx

; 397  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f1		 mov	 esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0000a	8d 45 08	 lea	 eax, DWORD PTR _dwRaceIndex$[ebp]
  0000d	50		 push	 eax
  0000e	8d 45 f4	 lea	 eax, DWORD PTR __Loc$1[ebp]
  00011	50		 push	 eax
  00012	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00015	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCRaceData@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CRaceData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData *> >,0> >::_Find_lower_bound<unsigned long>

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0001a	8b 4d fc	 mov	 ecx, DWORD PTR __Loc$1[ebp+8]
  0001d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00021	75 13		 jne	 SHORT $LN1@SelectRace
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  00023	8b 45 08	 mov	 eax, DWORD PTR _dwRaceIndex$[ebp]
  00026	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00029	72 0b		 jb	 SHORT $LN1@SelectRace

; 233  :         return this->_Ptr == _Right._Ptr;

  0002b	39 4e 04	 cmp	 DWORD PTR [esi+4], ecx
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 399  : 	if (m_RaceDataMap.end() == itor)

  0002e	74 06		 je	 SHORT $LN1@SelectRace

; 400  : 	{
; 401  : 		assert(!"Failed to select race data!");
; 402  : 		return;
; 403  : 	}
; 404  : 
; 405  : 	m_pSelectedRaceData = itor->second;

  00030	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00033	89 46 34	 mov	 DWORD PTR [esi+52], eax
$LN1@SelectRace:

; 406  : }

  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
?SelectRace@CRaceManager@@QAEXK@Z ENDP			; CRaceManager::SelectRace
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
;	COMDAT ?CreateRace@CRaceManager@@QAEXK@Z
_TEXT	SEGMENT
__Loc$1 = -16						; size = 12
$T2 = -12						; size = 8
_pRaceData$ = -4					; size = 4
_dwRaceIndex$ = 8					; size = 4
?CreateRace@CRaceManager@@QAEXK@Z PROC			; CRaceManager::CreateRace, COMDAT
; _this$ = ecx

; 382  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00008	8d 45 08	 lea	 eax, DWORD PTR _dwRaceIndex$[ebp]
  0000b	50		 push	 eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 383  : 	if (m_RaceDataMap.end() != m_RaceDataMap.find(dwRaceIndex))

  0000c	8d 79 04	 lea	 edi, DWORD PTR [ecx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1368 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0000f	8d 45 f0	 lea	 eax, DWORD PTR __Loc$1[ebp]
  00012	8b cf		 mov	 ecx, edi
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCRaceData@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CRaceData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData *> >,0> >::_Find_lower_bound<unsigned long>

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0001a	8b 45 f8	 mov	 eax, DWORD PTR __Loc$1[ebp+8]
  0001d	8b 75 08	 mov	 esi, DWORD PTR _dwRaceIndex$[ebp]
  00020	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00024	75 1f		 jne	 SHORT $LN2@CreateRace
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  00026	3b 70 10	 cmp	 esi, DWORD PTR [eax+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00029	72 1a		 jb	 SHORT $LN2@CreateRace

; 233  :         return this->_Ptr == _Right._Ptr;

  0002b	39 07		 cmp	 DWORD PTR [edi], eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 383  : 	if (m_RaceDataMap.end() != m_RaceDataMap.find(dwRaceIndex))

  0002d	74 16		 je	 SHORT $LN2@CreateRace

; 384  : 	{
; 385  : 		TraceError("RaceManager::CreateRace : Race %u already created", dwRaceIndex);

  0002f	56		 push	 esi
  00030	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@LBGILCOK@RaceManager?3?3CreateRace?5?3?5Race?5@
  00035	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError

; 394  : }

  0003a	83 c4 08	 add	 esp, 8
  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
$LN2@CreateRace:

; 386  : 		return;
; 387  : 	}
; 388  : 
; 389  : 	CRaceData * pRaceData = CRaceData::New();

  00045	e8 00 00 00 00	 call	 ?New@CRaceData@@SAPAV1@XZ ; CRaceData::New

; 390  : 	pRaceData->SetRace(dwRaceIndex);

  0004a	56		 push	 esi
  0004b	8b c8		 mov	 ecx, eax
  0004d	89 45 fc	 mov	 DWORD PTR _pRaceData$[ebp], eax
  00050	e8 00 00 00 00	 call	 ?SetRace@CRaceData@@QAEXK@Z ; CRaceData::SetRace

; 391  : 	m_RaceDataMap.emplace(dwRaceIndex, pRaceData);

  00055	8d 45 fc	 lea	 eax, DWORD PTR _pRaceData$[ebp]
  00058	8b cf		 mov	 ecx, edi
  0005a	50		 push	 eax
  0005b	8d 45 08	 lea	 eax, DWORD PTR _dwRaceIndex$[ebp]
  0005e	50		 push	 eax
  0005f	8d 45 f4	 lea	 eax, DWORD PTR $T2[ebp]
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 ??$emplace@AAKAAPAVCRaceData@@@?$_Tree@V?$_Tmap_traits@KPAVCRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCRaceData@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCRaceData@@@std@@@std@@@std@@@std@@_N@1@AAKAAPAVCRaceData@@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CRaceData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData *> >,0> >::emplace<unsigned long &,CRaceData * &>

; 392  : 
; 393  : 	Tracenf("CRaceManager::CreateRace(dwRaceIndex=%d)", dwRaceIndex);

  00068	ff 75 08	 push	 DWORD PTR _dwRaceIndex$[ebp]
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@LEJBEJHD@CRaceManager?3?3CreateRace?$CIdwRace@
  00070	e8 00 00 00 00	 call	 ?Tracenf@@YAXPBDZZ	; Tracenf

; 394  : }

  00075	83 c4 08	 add	 esp, 8
  00078	5f		 pop	 edi
  00079	5e		 pop	 esi
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c2 04 00	 ret	 4
?CreateRace@CRaceManager@@QAEXK@Z ENDP			; CRaceManager::CreateRace
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
;	COMDAT ?GetFullPathFileName@CRaceManager@@QAEPBDPBD@Z
_TEXT	SEGMENT
_c_szFileName$ = 8					; size = 4
?GetFullPathFileName@CRaceManager@@QAEPBDPBD@Z PROC	; CRaceManager::GetFullPathFileName, COMDAT
; _this$ = ecx

; 446  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 447  : 	static std::string s_stFileName;

  00003	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  00009	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __tls_index
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	8b f9		 mov	 edi, ecx
  00013	8b 14 90	 mov	 edx, DWORD PTR [eax+edx*4]
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??GetFullPathFileName@CRaceManager@@QAEPBDPBD@Z@4HA
  0001b	3b 82 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[edx]
  00021	7f 7b		 jg	 SHORT $LN56@GetFullPat
$LN2@GetFullPat:

; 448  : 
; 449  : 	if (c_szFileName[0] != '.')

  00023	8b 75 08	 mov	 esi, DWORD PTR _c_szFileName$[ebp]
  00026	80 3e 2e	 cmp	 BYTE PTR [esi], 46	; 0000002eH
  00029	74 3e		 je	 SHORT $LN3@GetFullPat

; 450  : 	{
; 451  : 		s_stFileName = m_strPathName;

  0002b	8d 47 1c	 lea	 eax, DWORD PTR [edi+28]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 3156 :         if (this == _STD addressof(_Right)) {

  0002e	3d 00 00 00 00	 cmp	 eax, OFFSET ?s_stFileName@?1??GetFullPathFileName@CRaceManager@@QAEPBDPBD@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  00033	74 18		 je	 SHORT $LN19@GetFullPat

; 2244 :         return _BUF_SIZE <= _Myres;

  00035	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2235 :         const value_type* _Result = _Bx._Buf;

  00039	8b c8		 mov	 ecx, eax

; 2236 :         if (_Large_string_engaged()) {

  0003b	72 02		 jb	 SHORT $LN23@GetFullPat

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  0003d	8b 08		 mov	 ecx, DWORD PTR [eax]
$LN23@GetFullPat:

; 3192 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0003f	ff 70 10	 push	 DWORD PTR [eax+16]
  00042	51		 push	 ecx
  00043	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_stFileName@?1??GetFullPathFileName@CRaceManager@@QAEPBDPBD@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  00048	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN19@GetFullPat:

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0004d	8b d6		 mov	 edx, esi
  0004f	8d 7a 01	 lea	 edi, DWORD PTR [edx+1]
$LL46@GetFullPat:
  00052	8a 02		 mov	 al, BYTE PTR [edx]
  00054	42		 inc	 edx
  00055	84 c0		 test	 al, al
  00057	75 f9		 jne	 SHORT $LL46@GetFullPat
  00059	2b d7		 sub	 edx, edi

; 3292 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0005b	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_stFileName@?1??GetFullPathFileName@CRaceManager@@QAEPBDPBD@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  00060	52		 push	 edx
  00061	56		 push	 esi
  00062	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 453  : 	}

  00067	eb 1c		 jmp	 SHORT $LN4@GetFullPat
$LN3@GetFullPat:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00069	8b ce		 mov	 ecx, esi
  0006b	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0006e	66 90		 npad	 2
$LL47@GetFullPat:
  00070	8a 01		 mov	 al, BYTE PTR [ecx]
  00072	41		 inc	 ecx
  00073	84 c0		 test	 al, al
  00075	75 f9		 jne	 SHORT $LL47@GetFullPat
  00077	2b ca		 sub	 ecx, edx

; 3395 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00079	51		 push	 ecx
  0007a	56		 push	 esi
  0007b	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_stFileName@?1??GetFullPathFileName@CRaceManager@@QAEPBDPBD@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  00080	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN4@GetFullPat:

; 2244 :         return _BUF_SIZE <= _Myres;

  00085	83 3d 14 00 00
	00 10		 cmp	 DWORD PTR ?s_stFileName@?1??GetFullPathFileName@CRaceManager@@QAEPBDPBD@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 16 ; 00000010H

; 2235 :         const value_type* _Result = _Bx._Buf;

  0008c	b8 00 00 00 00	 mov	 eax, OFFSET ?s_stFileName@?1??GetFullPathFileName@CRaceManager@@QAEPBDPBD@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 457  : 	return s_stFileName.c_str();

  00091	5f		 pop	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  00092	0f 43 05 00 00
	00 00		 cmovae	 eax, DWORD PTR ?s_stFileName@?1??GetFullPathFileName@CRaceManager@@QAEPBDPBD@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 457  : 	return s_stFileName.c_str();

  00099	5e		 pop	 esi

; 458  : }

  0009a	5d		 pop	 ebp
  0009b	c2 04 00	 ret	 4
$LN56@GetFullPat:

; 447  : 	static std::string s_stFileName;

  0009e	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??GetFullPathFileName@CRaceManager@@QAEPBDPBD@Z@4HA
  000a3	e8 00 00 00 00	 call	 __Init_thread_header
  000a8	83 c4 04	 add	 esp, 4
  000ab	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??GetFullPathFileName@CRaceManager@@QAEPBDPBD@Z@4HA, -1
  000b2	0f 85 6b ff ff
	ff		 jne	 $LN2@GetFullPat
  000b8	68 00 00 00 00	 push	 OFFSET ??__Fs_stFileName@?1??GetFullPathFileName@CRaceManager@@QAEPBDPBD@Z@YAXXZ ; `CRaceManager::GetFullPathFileName'::`2'::`dynamic atexit destructor for 's_stFileName''
  000bd	e8 00 00 00 00	 call	 _atexit
  000c2	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??GetFullPathFileName@CRaceManager@@QAEPBDPBD@Z@4HA
  000c7	e8 00 00 00 00	 call	 __Init_thread_footer
  000cc	83 c4 08	 add	 esp, 8
  000cf	e9 4f ff ff ff	 jmp	 $LN2@GetFullPat
?GetFullPathFileName@CRaceManager@@QAEPBDPBD@Z ENDP	; CRaceManager::GetFullPathFileName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
;	COMDAT ?SetPathName@CRaceManager@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_c_szPathName$ = 8					; size = 24
?SetPathName@CRaceManager@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CRaceManager::SetPathName, COMDAT
; _this$ = ecx

; 441  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SetPathName@CRaceManager@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 442  : 	m_strPathName = c_szPathName;

  00022	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00025	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 3156 :         if (this == _STD addressof(_Right)) {

  0002c	8d 45 08	 lea	 eax, DWORD PTR _c_szPathName$[ebp]
  0002f	3b c8		 cmp	 ecx, eax
  00031	74 11		 je	 SHORT $LN4@SetPathNam

; 2244 :         return _BUF_SIZE <= _Myres;

  00033	83 7d 1c 10	 cmp	 DWORD PTR _c_szPathName$[ebp+20], 16 ; 00000010H

; 3192 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00037	ff 75 18	 push	 DWORD PTR _c_szPathName$[ebp+16]

; 2236 :         if (_Large_string_engaged()) {

  0003a	0f 43 45 08	 cmovae	 eax, DWORD PTR _c_szPathName$[ebp]

; 3192 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN4@SetPathNam:

; 2244 :         return _BUF_SIZE <= _Myres;

  00044	8b 4d 1c	 mov	 ecx, DWORD PTR _c_szPathName$[ebp+20]
  00047	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  0004a	72 28		 jb	 SHORT $LN24@SetPathNam
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0004c	8b 55 08	 mov	 edx, DWORD PTR _c_szPathName$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0004f	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00050	8b c2		 mov	 eax, edx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00052	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00058	72 10		 jb	 SHORT $LN34@SetPathNam

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0005a	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0005d	83 c1 23	 add	 ecx, 35			; 00000023H
  00060	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00062	83 c0 fc	 add	 eax, -4			; fffffffcH
  00065	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00068	77 1b		 ja	 SHORT $LN43@SetPathNam
$LN34@SetPathNam:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0006a	51		 push	 ecx
  0006b	52		 push	 edx
  0006c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00071	83 c4 08	 add	 esp, 8
$LN24@SetPathNam:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 443  : }

  00074	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00077	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007e	59		 pop	 ecx
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c2 18 00	 ret	 24			; 00000018H
$LN43@SetPathNam:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00085	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN41@SetPathNam:
  0008a	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetPathName@CRaceManager@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _c_szPathName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?SetPathName@CRaceManager@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetPathName@CRaceManager@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetPathName@CRaceManager@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CRaceManager::SetPathName
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
;	COMDAT ?RegisterRaceSrcName@CRaceManager@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
_TEXT	SEGMENT
__Loc$2 = -44						; size = 12
$T3 = -32						; size = 12
$T4 = -28						; size = 8
$T5 = -20						; size = 4
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_c_szName$ = 8						; size = 4
_c_szSrcName$ = 12					; size = 4
?RegisterRaceSrcName@CRaceManager@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z PROC ; CRaceManager::RegisterRaceSrcName, COMDAT
; _this$ = ecx

; 372  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterRaceSrcName@CRaceManager@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1002 :             _Loc                = _Find_lower_bound(_Keyval);

  00028	8b 5d 08	 mov	 ebx, DWORD PTR _c_szName$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 373  : 	m_kMap_stRaceName_stSrcName.emplace(c_szName, c_szSrcName);

  0002b	8d 71 0c	 lea	 esi, DWORD PTR [ecx+12]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1002 :             _Loc                = _Find_lower_bound(_Keyval);

  0002e	53		 push	 ebx
  0002f	8d 45 e0	 lea	 eax, DWORD PTR $T3[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 373  : 	m_kMap_stRaceName_stSrcName.emplace(c_szName, c_szSrcName);

  00032	89 75 f0	 mov	 DWORD PTR _this$1$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1002 :             _Loc                = _Find_lower_bound(_Keyval);

  00035	50		 push	 eax
  00036	8b ce		 mov	 ecx, esi
  00038	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  0003d	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00041	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00044	66 0f d6 45 d4	 movq	 QWORD PTR __Loc$2[ebp], xmm0

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00049	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004d	75 11		 jne	 SHORT $LN99@RegisterRa
  0004f	83 c0 10	 add	 eax, 16			; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits

; 2465 :         return _Left < _Right;

  00052	50		 push	 eax
  00053	53		 push	 ebx
  00054	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  00059	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0005c	84 c0		 test	 al, al
  0005e	74 6e		 je	 SHORT $LN87@RegisterRa
$LN99@RegisterRa:

; 1631 :         if (max_size() == _Get_scary()->_Mysize) {

  00060	81 7e 04 ff ff
	ff 03		 cmp	 DWORD PTR [esi+4], 67108863 ; 03ffffffH
  00067	74 79		 je	 SHORT $LN103@RegisterRa

; 1008 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  00069	8b 1e		 mov	 ebx, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1144 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  0006b	89 75 e4	 mov	 DWORD PTR $T4[ebp], esi

; 87   :         return ::operator new(_Bytes);

  0006e	6a 40		 push	 64			; 00000040H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00070	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1151 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00077	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+4], 0

; 87   :         return ::operator new(_Bytes);

  0007e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 245  :         return _Traits::_Allocate(_Bytes);

  00083	8b f8		 mov	 edi, eax

; 87   :         return ::operator new(_Bytes);

  00085	83 c4 04	 add	 esp, 4

; 1152 :         _Ptr = _Al.allocate(1);

  00088	89 7d e8	 mov	 DWORD PTR $T4[ebp+4], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 231  :         : first(_Val1), second(_Val2) {}

  0008b	ff 75 08	 push	 DWORD PTR _c_szName$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 806  :         : _Tree_temp_node_alloc<_Alnode>(_Al_) {

  0008e	8d 77 10	 lea	 esi, DWORD PTR [edi+16]
  00091	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 231  :         : first(_Val1), second(_Val2) {}

  00098	8b ce		 mov	 ecx, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 719  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  0009a	89 75 ec	 mov	 DWORD PTR $T5[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 231  :         : first(_Val1), second(_Val2) {}

  0009d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000a2	ff 75 0c	 push	 DWORD PTR _c_szSrcName$[ebp]
  000a5	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  000a8	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000ac	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000b1	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000b4	57		 push	 edi
  000b5	ff 75 d8	 push	 DWORD PTR __Loc$2[ebp+4]

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  000b8	89 1f		 mov	 DWORD PTR [edi], ebx

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000ba	ff 75 d4	 push	 DWORD PTR __Loc$2[ebp]

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  000bd	89 5f 04	 mov	 DWORD PTR [edi+4], ebx

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  000c0	89 5f 08	 mov	 DWORD PTR [edi+8], ebx

; 811  :         this->_Ptr->_Color = _Red;

  000c3	66 c7 47 0c 00
	00		 mov	 WORD PTR [edi+12], 0

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000c9	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Insert_node
$LN87@RegisterRa:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 374  : }

  000ce	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d8	59		 pop	 ecx
  000d9	5f		 pop	 edi
  000da	5e		 pop	 esi
  000db	5b		 pop	 ebx
  000dc	8b e5		 mov	 esp, ebp
  000de	5d		 pop	 ebp
  000df	c2 08 00	 ret	 8
$LN103@RegisterRa:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1632 :             _Throw_tree_length_error();

  000e2	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN101@RegisterRa:
  000e7	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterRaceSrcName@CRaceManager@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$2:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR $T4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
__unwindfunclet$?RegisterRaceSrcName@CRaceManager@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$1:
  00008	8d 4d e4	 lea	 ecx, DWORD PTR $T4[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?RegisterRaceSrcName@CRaceManager@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$3:
  00010	8b 4d ec	 mov	 ecx, DWORD PTR $T5[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
__ehhandler$?RegisterRaceSrcName@CRaceManager@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z:
  0001d	90		 npad	 1
  0001e	90		 npad	 1
  0001f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00023	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00026	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterRaceSrcName@CRaceManager@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterRaceSrcName@CRaceManager@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ENDP ; CRaceManager::RegisterRaceSrcName
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
;	COMDAT ?RegisterRaceName@CRaceManager@@QAEXKPBD@Z
_TEXT	SEGMENT
__Loc$2 = -40						; size = 12
$T3 = -28						; size = 12
$T4 = -24						; size = 8
__Myhead$1$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
tv633 = 8						; size = 4
_dwRaceIndex$ = 8					; size = 4
_c_szName$ = 12						; size = 4
?RegisterRaceName@CRaceManager@@QAEXKPBD@Z PROC		; CRaceManager::RegisterRaceName, COMDAT
; _this$ = ecx

; 377  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterRaceName@CRaceManager@@QAEXKPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1002 :             _Loc                = _Find_lower_bound(_Keyval);

  00027	8d 45 08	 lea	 eax, DWORD PTR _dwRaceIndex$[ebp]
  0002a	50		 push	 eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 378  : 	m_kMap_dwRaceKey_stRaceName.emplace(dwRaceIndex, c_szName);

  0002b	8d 79 14	 lea	 edi, DWORD PTR [ecx+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1002 :             _Loc                = _Find_lower_bound(_Keyval);

  0002e	8d 45 e4	 lea	 eax, DWORD PTR $T3[ebp]
  00031	8b cf		 mov	 ecx, edi
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Find_lower_bound<unsigned long>
  00039	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0003d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00040	66 0f d6 45 d8	 movq	 QWORD PTR __Loc$2[ebp], xmm0

; 1607 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00045	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00049	75 0c		 jne	 SHORT $LN110@RegisterRa
  0004b	8b 4d 08	 mov	 ecx, DWORD PTR _dwRaceIndex$[ebp]
  0004e	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00051	0f 83 91 00 00
	00		 jae	 $LN98@RegisterRa
$LN110@RegisterRa:

; 1631 :         if (max_size() == _Get_scary()->_Mysize) {

  00057	81 7f 04 5d 74
	d1 05		 cmp	 DWORD PTR [edi+4], 97612893 ; 05d1745dH
  0005e	0f 84 97 00 00
	00		 je	 $LN115@RegisterRa

; 1008 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  00064	8b 07		 mov	 eax, DWORD PTR [edi]
  00066	89 45 f0	 mov	 DWORD PTR __Myhead$1$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1144 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00069	89 7d e8	 mov	 DWORD PTR $T4[ebp], edi

; 87   :         return ::operator new(_Bytes);

  0006c	6a 2c		 push	 44			; 0000002cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  0006e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1151 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00075	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+4], 0

; 87   :         return ::operator new(_Bytes);

  0007c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 245  :         return _Traits::_Allocate(_Bytes);

  00081	8b f0		 mov	 esi, eax

; 87   :         return ::operator new(_Bytes);

  00083	83 c4 04	 add	 esp, 4

; 1152 :         _Ptr = _Al.allocate(1);

  00086	89 75 ec	 mov	 DWORD PTR $T4[ebp+4], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00089	8b 55 0c	 mov	 edx, DWORD PTR _c_szName$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 242  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  0008c	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  0008f	8b 45 08	 mov	 eax, DWORD PTR _dwRaceIndex$[ebp]
  00092	0f 57 c0	 xorps	 xmm0, xmm0
  00095	89 46 10	 mov	 DWORD PTR [esi+16], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00098	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0009b	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 806  :         : _Tree_temp_node_alloc<_Alnode>(_Al_) {

  0009e	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2293 :     size_type _Mysize = 0; // current length of string

  000a5	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  000ac	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  000b3	89 45 08	 mov	 DWORD PTR tv633[ebp], eax
$LL111@RegisterRa:
  000b6	8a 02		 mov	 al, BYTE PTR [edx]
  000b8	42		 inc	 edx
  000b9	84 c0		 test	 al, al
  000bb	75 f9		 jne	 SHORT $LL111@RegisterRa
  000bd	2b 55 08	 sub	 edx, DWORD PTR tv633[ebp]

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000c0	52		 push	 edx
  000c1	ff 75 0c	 push	 DWORD PTR _c_szName$[ebp]
  000c4	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  000c9	8b 45 f0	 mov	 eax, DWORD PTR __Myhead$1$[ebp]

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000cc	8b cf		 mov	 ecx, edi
  000ce	56		 push	 esi
  000cf	ff 75 dc	 push	 DWORD PTR __Loc$2[ebp+4]

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  000d2	89 06		 mov	 DWORD PTR [esi], eax

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000d4	ff 75 d8	 push	 DWORD PTR __Loc$2[ebp]

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  000d7	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  000da	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 811  :         this->_Ptr->_Color = _Red;

  000dd	66 c7 46 0c 00
	00		 mov	 WORD PTR [esi+12], 0

; 1027 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000e3	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Insert_node
$LN98@RegisterRa:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 379  : }

  000e8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000eb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f2	59		 pop	 ecx
  000f3	5f		 pop	 edi
  000f4	5e		 pop	 esi
  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c2 08 00	 ret	 8
$LN115@RegisterRa:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1632 :             _Throw_tree_length_error();

  000fb	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN113@RegisterRa:
  00100	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterRaceName@CRaceManager@@QAEXKPBD@Z$2:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR $T4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
__unwindfunclet$?RegisterRaceName@CRaceManager@@QAEXKPBD@Z$1:
  00008	8d 4d e8	 lea	 ecx, DWORD PTR $T4[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?RegisterRaceName@CRaceManager@@QAEXKPBD@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterRaceName@CRaceManager@@QAEXKPBD@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterRaceName@CRaceManager@@QAEXKPBD@Z ENDP		; CRaceManager::RegisterRaceName
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
;	COMDAT ?Destroy@CRaceManager@@QAEXXZ
_TEXT	SEGMENT
?Destroy@CRaceManager@@QAEXXZ PROC			; CRaceManager::Destroy, COMDAT
; _this$ = ecx

; 482  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 483  : 	__DestroyRaceDataMap();

  00003	e8 00 00 00 00	 call	 ?__DestroyRaceDataMap@CRaceManager@@IAEXXZ ; CRaceManager::__DestroyRaceDataMap

; 484  : 
; 485  : 	__Initialize();

  00008	8b ce		 mov	 ecx, esi
  0000a	5e		 pop	 esi
  0000b	e9 00 00 00 00	 jmp	 ?__Initialize@CRaceManager@@IAEXXZ ; CRaceManager::__Initialize
?Destroy@CRaceManager@@QAEXXZ ENDP			; CRaceManager::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
;	COMDAT ?Create@CRaceManager@@QAEXXZ
_TEXT	SEGMENT
?Create@CRaceManager@@QAEXXZ PROC			; CRaceManager::Create, COMDAT
; _this$ = ecx

; 463  : 	CRaceMotionData::CreateSystem(2048);

  00000	68 00 08 00 00	 push	 2048			; 00000800H
  00005	e8 00 00 00 00	 call	 ?CreateSystem@CRaceMotionData@@SAXI@Z ; CRaceMotionData::CreateSystem

; 464  : 	CRaceData::CreateSystem(256, 512);

  0000a	68 00 02 00 00	 push	 512			; 00000200H
  0000f	68 00 01 00 00	 push	 256			; 00000100H
  00014	e8 00 00 00 00	 call	 ?CreateSystem@CRaceData@@SAXII@Z ; CRaceData::CreateSystem
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH

; 465  : }

  0001c	c3		 ret	 0
?Create@CRaceManager@@QAEXXZ ENDP			; CRaceManager::Create
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
;	COMDAT ??1CRaceManager@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CRaceManager@@UAE@XZ PROC				; CRaceManager::~CRaceManager, COMDAT
; _this$ = ecx

; 494  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CRaceManager@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f9		 mov	 edi, ecx
  00026	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CRaceManager@@6B@

; 495  : 	Destroy();

  0002c	e8 00 00 00 00	 call	 ?Destroy@CRaceManager@@QAEXXZ ; CRaceManager::Destroy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00031	8b 4f 30	 mov	 ecx, DWORD PTR [edi+48]
  00034	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  00037	72 2c		 jb	 SHORT $LN15@CRaceManag
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00039	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0003c	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0003d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00043	72 16		 jb	 SHORT $LN25@CRaceManag

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00045	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00048	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0004b	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004d	83 c0 fc	 add	 eax, -4			; fffffffcH
  00050	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00053	0f 87 80 00 00
	00		 ja	 $LN22@CRaceManag

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00059	8b c2		 mov	 eax, edx
$LN25@CRaceManag:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0005b	51		 push	 ecx
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00062	83 c4 08	 add	 esp, 8
$LN15@CRaceManag:
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 496  : }

  00065	8d 77 14	 lea	 esi, DWORD PTR [edi+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  00068	c7 47 2c 00 00
	00 00		 mov	 DWORD PTR [edi+44], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  0006f	c7 47 30 0f 00
	00 00		 mov	 DWORD PTR [edi+48], 15	; 0000000fH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  00076	8b ce		 mov	 ecx, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00078	c6 47 1c 00	 mov	 BYTE PTR [edi+28], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  0007c	8b 06		 mov	 eax, DWORD PTR [esi]
  0007e	ff 70 04	 push	 DWORD PTR [eax+4]
  00081	56		 push	 esi
  00082	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00087	6a 2c		 push	 44			; 0000002cH
  00089	ff 36		 push	 DWORD PTR [esi]
  0008b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  00090	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 496  : }

  00093	8d 77 0c	 lea	 esi, DWORD PTR [edi+12]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00096	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  00099	8b ce		 mov	 ecx, esi
  0009b	ff 70 04	 push	 DWORD PTR [eax+4]
  0009e	56		 push	 esi
  0009f	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  000a4	6a 40		 push	 64			; 00000040H
  000a6	ff 36		 push	 DWORD PTR [esi]
  000a8	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000ad	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 496  : }

  000b0	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  000b3	e8 00 00 00 00	 call	 ??1?$_Tree@V?$_Tmap_traits@KPAVCRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCRaceData@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CRaceData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CRaceData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData *> >,0> >
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h

; 19   : 	{

  000b8	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CSingleton@VCRaceManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  000be	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCRaceManager@@@@0PAVCRaceManager@@A, 0 ; CSingleton<CRaceManager>::ms_singleton
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 496  : }

  000c8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000cb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d2	59		 pop	 ecx
  000d3	5f		 pop	 edi
  000d4	5e		 pop	 esi
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c3		 ret	 0
$LN22@CRaceManag:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000d9	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN97@CRaceManag:
  000de	cc		 int	 3
  000df	cc		 int	 3
  000e0	cc		 int	 3
  000e1	cc		 int	 3
  000e2	cc		 int	 3
  000e3	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CRaceManager@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CRaceManager@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CRaceManager@@UAE@XZ ENDP				; CRaceManager::~CRaceManager
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
;	COMDAT ??0CRaceManager@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
_this$ = -20						; size = 4
_this$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CRaceManager@@QAE@XZ PROC				; CRaceManager::CRaceManager, COMDAT
; _this$ = ecx

; 489  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CRaceManager@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f9		 mov	 edi, ecx
  00029	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h

; 15   : 		ms_singleton = (T*) ((int) this + offset);

  0002c	89 3d 00 00 00
	00		 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCRaceManager@@@@0PAVCRaceManager@@A, edi ; CSingleton<CRaceManager>::ms_singleton
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 489  : {

  00032	8d 77 04	 lea	 esi, DWORD PTR [edi+4]
  00035	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CRaceManager@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  0003b	6a 18		 push	 24			; 00000018H
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 489  : {

  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00044	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 437  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  00047	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0004d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  00054	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 347  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  00059	89 00		 mov	 DWORD PTR [eax], eax

; 348  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  0005b	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 349  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  0005e	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 350  :         _Pnode->_Color = _Black;

  00061	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1943 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  00067	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 489  : {

  00069	8d 77 0c	 lea	 esi, DWORD PTR [edi+12]
  0006c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  00070	6a 40		 push	 64			; 00000040H
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 489  : {

  00072	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 437  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  00075	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0007b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  00082	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 347  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  00087	89 00		 mov	 DWORD PTR [eax], eax

; 348  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  00089	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 349  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  0008c	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 350  :         _Pnode->_Color = _Black;

  0008f	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1943 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  00095	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 489  : {

  00097	8d 77 14	 lea	 esi, DWORD PTR [edi+20]
  0009a	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  0009e	6a 2c		 push	 44			; 0000002cH
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 489  : {

  000a0	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 437  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  000a3	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  000a9	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  000b0	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000b5	0f 57 c0	 xorps	 xmm0, xmm0
  000b8	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 490  : 	__Initialize();

  000bb	8b cf		 mov	 ecx, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 347  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  000bd	89 00		 mov	 DWORD PTR [eax], eax

; 348  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  000bf	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 349  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  000c2	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 350  :         _Pnode->_Color = _Black;

  000c5	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1943 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  000cb	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000cd	0f 11 47 1c	 movups	 XMMWORD PTR [edi+28], xmm0

; 4821 :         _My_data._Mysize = 0;

  000d1	c7 47 2c 00 00
	00 00		 mov	 DWORD PTR [edi+44], 0

; 4822 :         _My_data._Myres  = _BUF_SIZE - 1;

  000d8	c7 47 30 0f 00
	00 00		 mov	 DWORD PTR [edi+48], 15	; 0000000fH

; 4823 :         _My_data._Activate_SSO_buffer();
; 4824 : 
; 4825 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4826 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000df	c6 47 1c 00	 mov	 BYTE PTR [edi+28], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp

; 490  : 	__Initialize();

  000e3	e8 00 00 00 00	 call	 ?__Initialize@CRaceManager@@IAEXXZ ; CRaceManager::__Initialize

; 491  : }

  000e8	8b c7		 mov	 eax, edi
  000ea	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ed	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f4	59		 pop	 ecx
  000f5	5f		 pop	 edi
  000f6	5e		 pop	 esi
  000f7	8b e5		 mov	 esp, ebp
  000f9	5d		 pop	 ebp
  000fa	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CRaceManager@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$CSingleton@VCRaceManager@@@@UAE@XZ ; CSingleton<CRaceManager>::~CSingleton<CRaceManager>
__unwindfunclet$??0CRaceManager@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 04	 add	 ecx, 4
  0000e	e9 00 00 00 00	 jmp	 ??1?$map@KPAVCRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCRaceData@@@std@@@3@@std@@QAE@XZ
__unwindfunclet$??0CRaceManager@@QAE@XZ$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00019	e9 00 00 00 00	 jmp	 ??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAE@XZ
  0001e	cc		 int	 3
  0001f	cc		 int	 3
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
__ehhandler$??0CRaceManager@@QAE@XZ:
  00023	90		 npad	 1
  00024	90		 npad	 1
  00025	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00029	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002c	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CRaceManager@@QAE@XZ
  0003b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CRaceManager@@QAE@XZ ENDP				; CRaceManager::CRaceManager
; Function compile flags: /Ogtp
;	COMDAT ??1?$map@KPAVCRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCRaceData@@@std@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$map@KPAVCRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCRaceData@@@std@@@3@@std@@QAE@XZ PROC ; std::map<unsigned long,CRaceData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData *> > >::~map<unsigned long,CRaceData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData *> > >, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1?$_Tree@V?$_Tmap_traits@KPAVCRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCRaceData@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CRaceData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CRaceData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData *> >,0> >
??1?$map@KPAVCRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCRaceData@@@std@@@3@@std@@QAE@XZ ENDP ; std::map<unsigned long,CRaceData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData *> > >::~map<unsigned long,CRaceData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCRaceData@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCRaceData@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CRaceData *> > >::_Insert_node, COMDAT
; _this$ = ecx

; 646  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 647  :         ++_Mysize;
; 648  :         const auto _Head  = _Myhead;
; 649  :         _Newnode->_Parent = _Loc._Parent;

  00004	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0000e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00010	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00013	89 45 fc	 mov	 DWORD PTR __Head$1$[ebp], eax
  00016	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 650  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  00019	3b d0		 cmp	 edx, eax
  0001b	75 16		 jne	 SHORT $LN5@Insert_nod

; 651  :             _Head->_Left     = _Newnode;

  0001d	89 38		 mov	 DWORD PTR [eax], edi

; 652  :             _Head->_Parent   = _Newnode;

  0001f	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 653  :             _Head->_Right    = _Newnode;

  00022	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 712  :         return _Newnode;
; 713  :     }

  00025	8b c7		 mov	 eax, edi
  00027	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
  0002b	5f		 pop	 edi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 654  :             _Newnode->_Color = _Black; // the root is black
; 655  :             return _Newnode;
; 656  :         }
; 657  : 
; 658  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 659  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00033	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00037	75 0d		 jne	 SHORT $LN6@Insert_nod

; 660  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 661  :             _Loc._Parent->_Right = _Newnode;

  00039	89 7a 08	 mov	 DWORD PTR [edx+8], edi

; 662  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003c	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003f	75 0d		 jne	 SHORT $LN9@Insert_nod

; 663  :                 _Head->_Right = _Newnode;

  00041	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 664  :             }
; 665  :         } else { // add to left of _Loc._Parent

  00044	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 666  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 667  :             _Loc._Parent->_Left = _Newnode;

  00046	89 3a		 mov	 DWORD PTR [edx], edi

; 668  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00048	3b 10		 cmp	 edx, DWORD PTR [eax]
  0004a	75 02		 jne	 SHORT $LN9@Insert_nod

; 669  :                 _Head->_Left = _Newnode;

  0004c	89 38		 mov	 DWORD PTR [eax], edi
$LN9@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00051	8b c7		 mov	 eax, edi
  00053	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00057	0f 85 7d 01 00
	00		 jne	 $LN3@Insert_nod
  0005d	56		 push	 esi
  0005e	66 90		 npad	 2
$LL2@Insert_nod:

; 674  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00063	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	3b d1		 cmp	 edx, ecx
  0006a	0f 85 aa 00 00
	00		 jne	 $LN10@Insert_nod

; 675  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00070	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 676  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00073	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00077	0f 84 a3 00 00
	00		 je	 $LN76@Insert_nod

; 677  :                     _Pnode->_Parent->_Color          = _Black;
; 678  :                     _Parent_sibling->_Color          = _Black;
; 679  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 680  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 681  :                 } else { // parent's sibling has red and black children
; 682  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  0007d	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00080	3b c6		 cmp	 eax, esi
  00082	75 37		 jne	 SHORT $LN51@Insert_nod

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00084	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 683  :                         _Pnode = _Pnode->_Parent;

  00086	8b c2		 mov	 eax, edx

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00088	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0008b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00091	75 03		 jne	 SHORT $LN20@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  00093	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN20@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  00096	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00099	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  0009c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0009e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000a1	75 05		 jne	 SHORT $LN21@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  000a3	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  000a6	eb 0e		 jmp	 SHORT $LN24@Insert_nod
$LN21@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000a8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ab	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000ad	75 04		 jne	 SHORT $LN23@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  000af	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  000b1	eb 03		 jmp	 SHORT $LN24@Insert_nod
$LN23@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  000b3	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN24@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 479  :         _Wherenode->_Parent = _Pnode;

  000b8	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN51@Insert_nod:

; 684  :                         _Lrotate(_Pnode);
; 685  :                     }
; 686  : 
; 687  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 688  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c8	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 689  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 483  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000d2	8b 32		 mov	 esi, DWORD PTR [edx]

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  000d4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000d7	89 0a		 mov	 DWORD PTR [edx], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  000d9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000dc	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000e0	75 03		 jne	 SHORT $LN27@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  000e2	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN27@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  000e5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000e8	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  000eb	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000ed	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000f0	75 0b		 jne	 SHORT $LN28@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  000f2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  000f5	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  000f8	e9 cc 00 00 00	 jmp	 $LN75@Insert_nod
$LN28@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  000fd	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00100	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00103	75 0b		 jne	 SHORT $LN30@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00105	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00108	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  0010b	e9 b9 00 00 00	 jmp	 $LN75@Insert_nod
$LN30@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00110	89 31		 mov	 DWORD PTR [ecx], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00112	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  00115	e9 af 00 00 00	 jmp	 $LN75@Insert_nod
$LN10@Insert_nod:

; 692  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 693  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  0011a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0011e	75 1d		 jne	 SHORT $LN15@Insert_nod
$LN76@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00120	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1
  00124	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  00128	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0012e	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00132	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00135	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00138	e9 8f 00 00 00	 jmp	 $LN46@Insert_nod
$LN15@Insert_nod:

; 694  :                     _Pnode->_Parent->_Color          = _Black;
; 695  :                     _Parent_sibling->_Color          = _Black;
; 696  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 697  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 698  :                 } else { // parent's sibling has red and black children
; 699  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  0013d	8b 32		 mov	 esi, DWORD PTR [edx]
  0013f	3b c6		 cmp	 eax, esi
  00141	75 3a		 jne	 SHORT $LN39@Insert_nod

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00143	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 700  :                         _Pnode = _Pnode->_Parent;

  00146	8b c2		 mov	 eax, edx

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00148	89 08		 mov	 DWORD PTR [eax], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  0014a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0014d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00151	75 03		 jne	 SHORT $LN34@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  00153	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN34@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  00156	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00159	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  0015c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0015e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00161	75 05		 jne	 SHORT $LN35@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  00163	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00166	eb 0f		 jmp	 SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00168	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0016b	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0016e	75 05		 jne	 SHORT $LN37@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00170	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 496  :         } else {

  00173	eb 02		 jmp	 SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00175	89 31		 mov	 DWORD PTR [ecx], esi
$LN38@Insert_nod:

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00177	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 501  :         _Wherenode->_Parent = _Pnode;

  0017a	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN39@Insert_nod:

; 701  :                         _Rrotate(_Pnode);
; 702  :                     }
; 703  : 
; 704  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  0017d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 705  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00184	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00187	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0018a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 706  :                     _Lrotate(_Pnode->_Parent->_Parent);

  0018e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00191	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 461  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00194	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00197	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00199	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0019c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0019e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a2	75 03		 jne	 SHORT $LN41@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  001a4	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN41@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  001a7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001aa	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  001ad	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001af	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  001b2	75 05		 jne	 SHORT $LN42@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  001b4	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  001b7	eb 0e		 jmp	 SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001b9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001bc	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001be	75 04		 jne	 SHORT $LN44@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  001c2	eb 03		 jmp	 SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  001c4	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN45@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  001c7	89 16		 mov	 DWORD PTR [esi], edx
$LN75@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001c9	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN46@Insert_nod:
  001cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001cf	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001d3	0f 84 87 fe ff
	ff		 je	 $LL2@Insert_nod
  001d9	5e		 pop	 esi
$LN3@Insert_nod:

; 707  :                 }
; 708  :             }
; 709  :         }
; 710  : 
; 711  :         _Head->_Parent->_Color = _Black; // root is always black

  001da	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]
  001dd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e0	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 712  :         return _Newnode;
; 713  :     }

  001e4	8b c7		 mov	 eax, edi
  001e6	5f		 pop	 edi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCRaceData@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CRaceData *> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@KPAVCRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCRaceData@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree@V?$_Tmap_traits@KPAVCRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCRaceData@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CRaceData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CRaceData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData *> >,0> >, COMDAT
; _this$ = ecx

; 1080 :     ~_Tree() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00009	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000d	75 21		 jne	 SHORT $LN7@Tree
  0000f	90		 npad	 1
$LL6@Tree:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00010	ff 76 08	 push	 DWORD PTR [esi+8]
  00013	8b cf		 mov	 ecx, edi
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCRaceData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCRaceData@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CRaceData *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData *>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 754  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001b	8b c6		 mov	 eax, esi

; 755  :     _Val         = static_cast<_Other&&>(_New_val);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  0001f	6a 18		 push	 24			; 00000018H
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0002e	74 e0		 je	 SHORT $LL6@Tree
$LN7@Tree:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00030	6a 18		 push	 24			; 00000018H
  00032	ff 37		 push	 DWORD PTR [edi]
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00039	83 c4 08	 add	 esp, 8
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree

; 1087 :     }

  0003e	c3		 ret	 0
??1?$_Tree@V?$_Tmap_traits@KPAVCRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCRaceData@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CRaceData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CRaceData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData *> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
;	COMDAT ??_G?$CSingleton@VCRaceManager@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CSingleton@VCRaceManager@@@@UAEPAXI@Z PROC	; CSingleton<CRaceManager>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1

; 19   : 	{

  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CSingleton@VCRaceManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00010	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCRaceManager@@@@0PAVCRaceManager@@A, 0 ; CSingleton<CRaceManager>::ms_singleton
  0001a	74 0b		 je	 SHORT $LN6@scalar
  0001c	6a 04		 push	 4
  0001e	56		 push	 esi
  0001f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00024	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_G?$CSingleton@VCRaceManager@@@@UAEPAXI@Z ENDP	; CSingleton<CRaceManager>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
;	COMDAT ??1?$CSingleton@VCRaceManager@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CSingleton@VCRaceManager@@@@UAE@XZ PROC		; CSingleton<CRaceManager>::~CSingleton<CRaceManager>, COMDAT
; _this$ = ecx

; 19   : 	{

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CSingleton@VCRaceManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00006	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCRaceManager@@@@0PAVCRaceManager@@A, 0 ; CSingleton<CRaceManager>::ms_singleton

; 22   : 	}

  00010	c3		 ret	 0
??1?$CSingleton@VCRaceManager@@@@UAE@XZ ENDP		; CSingleton<CRaceManager>::~CSingleton<CRaceManager>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Insert_node, COMDAT
; _this$ = ecx

; 646  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 647  :         ++_Mysize;
; 648  :         const auto _Head  = _Myhead;
; 649  :         _Newnode->_Parent = _Loc._Parent;

  00004	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0000e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00010	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00013	89 45 fc	 mov	 DWORD PTR __Head$1$[ebp], eax
  00016	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 650  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  00019	3b d0		 cmp	 edx, eax
  0001b	75 16		 jne	 SHORT $LN5@Insert_nod

; 651  :             _Head->_Left     = _Newnode;

  0001d	89 38		 mov	 DWORD PTR [eax], edi

; 652  :             _Head->_Parent   = _Newnode;

  0001f	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 653  :             _Head->_Right    = _Newnode;

  00022	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 712  :         return _Newnode;
; 713  :     }

  00025	8b c7		 mov	 eax, edi
  00027	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
  0002b	5f		 pop	 edi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 654  :             _Newnode->_Color = _Black; // the root is black
; 655  :             return _Newnode;
; 656  :         }
; 657  : 
; 658  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 659  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00033	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00037	75 0d		 jne	 SHORT $LN6@Insert_nod

; 660  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 661  :             _Loc._Parent->_Right = _Newnode;

  00039	89 7a 08	 mov	 DWORD PTR [edx+8], edi

; 662  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003c	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003f	75 0d		 jne	 SHORT $LN9@Insert_nod

; 663  :                 _Head->_Right = _Newnode;

  00041	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 664  :             }
; 665  :         } else { // add to left of _Loc._Parent

  00044	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 666  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 667  :             _Loc._Parent->_Left = _Newnode;

  00046	89 3a		 mov	 DWORD PTR [edx], edi

; 668  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00048	3b 10		 cmp	 edx, DWORD PTR [eax]
  0004a	75 02		 jne	 SHORT $LN9@Insert_nod

; 669  :                 _Head->_Left = _Newnode;

  0004c	89 38		 mov	 DWORD PTR [eax], edi
$LN9@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00051	8b c7		 mov	 eax, edi
  00053	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00057	0f 85 7d 01 00
	00		 jne	 $LN3@Insert_nod
  0005d	56		 push	 esi
  0005e	66 90		 npad	 2
$LL2@Insert_nod:

; 674  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00063	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	3b d1		 cmp	 edx, ecx
  0006a	0f 85 aa 00 00
	00		 jne	 $LN10@Insert_nod

; 675  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00070	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 676  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00073	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00077	0f 84 a3 00 00
	00		 je	 $LN76@Insert_nod

; 677  :                     _Pnode->_Parent->_Color          = _Black;
; 678  :                     _Parent_sibling->_Color          = _Black;
; 679  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 680  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 681  :                 } else { // parent's sibling has red and black children
; 682  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  0007d	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00080	3b c6		 cmp	 eax, esi
  00082	75 37		 jne	 SHORT $LN51@Insert_nod

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00084	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 683  :                         _Pnode = _Pnode->_Parent;

  00086	8b c2		 mov	 eax, edx

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00088	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0008b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00091	75 03		 jne	 SHORT $LN20@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  00093	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN20@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  00096	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00099	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  0009c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0009e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000a1	75 05		 jne	 SHORT $LN21@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  000a3	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  000a6	eb 0e		 jmp	 SHORT $LN24@Insert_nod
$LN21@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000a8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ab	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000ad	75 04		 jne	 SHORT $LN23@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  000af	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  000b1	eb 03		 jmp	 SHORT $LN24@Insert_nod
$LN23@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  000b3	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN24@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 479  :         _Wherenode->_Parent = _Pnode;

  000b8	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN51@Insert_nod:

; 684  :                         _Lrotate(_Pnode);
; 685  :                     }
; 686  : 
; 687  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 688  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c8	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 689  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 483  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000d2	8b 32		 mov	 esi, DWORD PTR [edx]

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  000d4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000d7	89 0a		 mov	 DWORD PTR [edx], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  000d9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000dc	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000e0	75 03		 jne	 SHORT $LN27@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  000e2	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN27@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  000e5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000e8	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  000eb	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000ed	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000f0	75 0b		 jne	 SHORT $LN28@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  000f2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  000f5	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  000f8	e9 cc 00 00 00	 jmp	 $LN75@Insert_nod
$LN28@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  000fd	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00100	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00103	75 0b		 jne	 SHORT $LN30@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00105	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00108	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  0010b	e9 b9 00 00 00	 jmp	 $LN75@Insert_nod
$LN30@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00110	89 31		 mov	 DWORD PTR [ecx], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00112	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  00115	e9 af 00 00 00	 jmp	 $LN75@Insert_nod
$LN10@Insert_nod:

; 692  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 693  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  0011a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0011e	75 1d		 jne	 SHORT $LN15@Insert_nod
$LN76@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00120	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1
  00124	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  00128	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0012e	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00132	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00135	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00138	e9 8f 00 00 00	 jmp	 $LN46@Insert_nod
$LN15@Insert_nod:

; 694  :                     _Pnode->_Parent->_Color          = _Black;
; 695  :                     _Parent_sibling->_Color          = _Black;
; 696  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 697  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 698  :                 } else { // parent's sibling has red and black children
; 699  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  0013d	8b 32		 mov	 esi, DWORD PTR [edx]
  0013f	3b c6		 cmp	 eax, esi
  00141	75 3a		 jne	 SHORT $LN39@Insert_nod

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00143	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 700  :                         _Pnode = _Pnode->_Parent;

  00146	8b c2		 mov	 eax, edx

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00148	89 08		 mov	 DWORD PTR [eax], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  0014a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0014d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00151	75 03		 jne	 SHORT $LN34@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  00153	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN34@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  00156	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00159	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  0015c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0015e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00161	75 05		 jne	 SHORT $LN35@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  00163	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00166	eb 0f		 jmp	 SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00168	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0016b	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0016e	75 05		 jne	 SHORT $LN37@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00170	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 496  :         } else {

  00173	eb 02		 jmp	 SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00175	89 31		 mov	 DWORD PTR [ecx], esi
$LN38@Insert_nod:

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00177	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 501  :         _Wherenode->_Parent = _Pnode;

  0017a	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN39@Insert_nod:

; 701  :                         _Rrotate(_Pnode);
; 702  :                     }
; 703  : 
; 704  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  0017d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 705  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00184	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00187	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0018a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 706  :                     _Lrotate(_Pnode->_Parent->_Parent);

  0018e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00191	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 461  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00194	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00197	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00199	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0019c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0019e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a2	75 03		 jne	 SHORT $LN41@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  001a4	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN41@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  001a7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001aa	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  001ad	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001af	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  001b2	75 05		 jne	 SHORT $LN42@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  001b4	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  001b7	eb 0e		 jmp	 SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001b9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001bc	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001be	75 04		 jne	 SHORT $LN44@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  001c2	eb 03		 jmp	 SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  001c4	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN45@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  001c7	89 16		 mov	 DWORD PTR [esi], edx
$LN75@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001c9	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN46@Insert_nod:
  001cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001cf	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001d3	0f 84 87 fe ff
	ff		 je	 $LL2@Insert_nod
  001d9	5e		 pop	 esi
$LN3@Insert_nod:

; 707  :                 }
; 708  :             }
; 709  :         }
; 710  : 
; 711  :         _Head->_Parent->_Color = _Black; // root is always black

  001da	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]
  001dd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e0	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 712  :         return _Newnode;
; 713  :     }

  001e4	8b c7		 mov	 eax, edi
  001e6	5f		 pop	 edi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 137  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 138  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 139  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 140  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 87   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 141  :         _Throw_bad_array_new_length(); // add overflow
; 142  :     }
; 143  : 
; 144  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 87   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 145  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 146  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 147  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 148  : 
; 149  : #ifdef _DEBUG
; 150  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 151  : #endif // _DEBUG
; 152  :     return _Ptr;
; 153  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 145  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
;	COMDAT ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
$T1 = 12						; size = 4
__Count$ = 12						; size = 4
??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>, COMDAT
; _this$ = ecx

; 2610 :     _CONSTEXPR20 void _Construct(const _Char_or_ptr _Arg, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	57		 push	 edi

; 2611 :         auto& _My_data = _Mypair._Myval2;
; 2612 :         _STL_INTERNAL_CHECK(!_My_data._Large_string_engaged());
; 2613 : 
; 2614 :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2615 :             _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Char_or_ptr, _Elem>);
; 2616 :         } else {
; 2617 :             _STL_INTERNAL_STATIC_ASSERT(_Is_elem_cptr<_Char_or_ptr>::value);
; 2618 :         }
; 2619 : 
; 2620 :         if (_Count > max_size()) {

  00005	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  00010	0f 87 9f 00 00
	00		 ja	 $LN33@Construct

; 2622 :         }
; 2623 : 
; 2624 :         auto& _Al       = _Getal();
; 2625 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 2626 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 2627 : 
; 2628 :         if (_Count < _BUF_SIZE) {

  00016	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH
  0001d	83 ff 10	 cmp	 edi, 16			; 00000010H
  00020	73 1a		 jae	 SHORT $LN3@Construct

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00022	57		 push	 edi
  00023	ff 75 08	 push	 DWORD PTR __Arg$[ebp]

; 2629 :             _My_data._Mysize = _Count;

  00026	89 7b 10	 mov	 DWORD PTR [ebx+16], edi

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00029	53		 push	 ebx
  0002a	e8 00 00 00 00	 call	 _memcpy
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2630 :             _My_data._Myres  = _BUF_SIZE - 1;
; 2631 : 
; 2632 :             if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2633 :                 _Traits::assign(_My_data._Bx._Buf, _Count, _Arg);
; 2634 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());
; 2635 :             } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2636 :                 _Traits::copy(_My_data._Bx._Buf, _Arg, _Count);
; 2637 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00032	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0
  00036	5f		 pop	 edi

; 2665 :         } else { // _Strat == _Construct_strategy::_From_string
; 2666 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);
; 2667 :         }
; 2668 : 
; 2669 :         _ASAN_STRING_CREATE(*this);
; 2670 :         _Proxy._Release();
; 2671 :     }

  00037	5b		 pop	 ebx
  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
$LN3@Construct:
  0003c	56		 push	 esi

; 4714 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0003d	8b f7		 mov	 esi, edi
  0003f	83 ce 0f	 or	 esi, 15			; 0000000fH
  00042	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4715 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00048	76 15		 jbe	 SHORT $LN10@Construct

; 4716 :             return _Max;

  0004a	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0004f	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0005a	83 c4 04	 add	 esp, 4
  0005d	eb 30		 jmp	 SHORT $LN31@Construct
$LN10@Construct:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 47   :     return _Left < _Right ? _Right : _Left;

  0005f	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00064	3b f0		 cmp	 esi, eax
  00066	0f 42 f0	 cmovb	 esi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2652 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00069	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0006c	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00071	72 0b		 jb	 SHORT $LN18@Construct

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00079	83 c4 04	 add	 esp, 4
  0007c	eb 11		 jmp	 SHORT $LN31@Construct
$LN18@Construct:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  0007e	85 c0		 test	 eax, eax
  00080	74 0b		 je	 SHORT $LN19@Construct

; 87   :         return ::operator new(_Bytes);

  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00088	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  0008b	eb 02		 jmp	 SHORT $LN31@Construct
$LN19@Construct:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  0008d	33 c0		 xor	 eax, eax
$LN31@Construct:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0008f	57		 push	 edi
  00090	ff 75 08	 push	 DWORD PTR __Arg$[ebp]

; 2653 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00093	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00096	50		 push	 eax

; 2653 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00097	89 03		 mov	 DWORD PTR [ebx], eax

; 2654 : 
; 2655 :         _Start_element_lifetimes(_Unfancy(_New_ptr), _New_capacity + 1);
; 2656 : 
; 2657 :         _My_data._Mysize = _Count;

  00099	89 7b 10	 mov	 DWORD PTR [ebx+16], edi

; 2658 :         _My_data._Myres  = _New_capacity;

  0009c	89 73 14	 mov	 DWORD PTR [ebx+20], esi

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0009f	e8 00 00 00 00	 call	 _memcpy

; 2659 :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2660 :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 2661 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 2662 :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2663 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);
; 2664 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000a4	8b 45 0c	 mov	 eax, DWORD PTR $T1[ebp]

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000a7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2659 :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2660 :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 2661 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 2662 :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2663 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);
; 2664 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000aa	5e		 pop	 esi
  000ab	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
  000af	5f		 pop	 edi

; 2665 :         } else { // _Strat == _Construct_strategy::_From_string
; 2666 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);
; 2667 :         }
; 2668 : 
; 2669 :         _ASAN_STRING_CREATE(*this);
; 2670 :         _Proxy._Release();
; 2671 :     }

  000b0	5b		 pop	 ebx
  000b1	5d		 pop	 ebp
  000b2	c2 08 00	 ret	 8
$LN33@Construct:

; 2621 :             _Xlen_string(); // result too long

  000b5	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN30@Construct:
  000ba	cc		 int	 3
??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength, COMDAT

; 2138 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array, COMDAT
; _this$ = ecx

; 2013 :     _CONSTEXPR20 void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b f9		 mov	 edi, ecx

; 2014 :         // orphan all iterators, discard old array, acquire new array
; 2015 :         auto& _Al         = _Getal();
; 2016 :         auto& _My_data    = _Mypair._Myval2;
; 2017 :         pointer& _Myfirst = _My_data._Myfirst;
; 2018 :         pointer& _Mylast  = _My_data._Mylast;
; 2019 :         pointer& _Myend   = _My_data._Myend;
; 2020 : 
; 2021 :         _My_data._Orphan_all();
; 2022 : 
; 2023 :         if (_Myfirst) { // destroy and deallocate old array

  00006	8b 07		 mov	 eax, DWORD PTR [edi]
  00008	85 c0		 test	 eax, eax
  0000a	74 51		 je	 SHORT $LN8@Change_arr

; 2024 :             _Destroy_range(_Myfirst, _Mylast, _Al);

  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	ff 77 04	 push	 DWORD PTR [edi+4]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 2025 :             _ASAN_VECTOR_REMOVE;
; 2026 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00017	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0001a	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0001f	8b 37		 mov	 esi, DWORD PTR [edi]
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	2b ce		 sub	 ecx, esi
  00026	f7 e9		 imul	 ecx
  00028	c1 fa 02	 sar	 edx, 2
  0002b	8b c2		 mov	 eax, edx
  0002d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00030	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00032	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00035	c1 e1 03	 shl	 ecx, 3

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00038	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0003e	72 12		 jb	 SHORT $LN18@Change_arr

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00040	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00043	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00046	2b f2		 sub	 esi, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00048	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  0004b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0004e	77 2f		 ja	 SHORT $LN15@Change_arr

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00050	8b f2		 mov	 esi, edx
$LN18@Change_arr:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00052	51		 push	 ecx
  00053	56		 push	 esi
  00054	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00059	83 c4 08	 add	 esp, 8
  0005c	5e		 pop	 esi
$LN8@Change_arr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2029 :         _Myfirst = _Newvec;

  0005d	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]

; 2030 :         _Mylast  = _Newvec + _Newsize;

  00060	8b 45 0c	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00063	89 0f		 mov	 DWORD PTR [edi], ecx
  00065	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00068	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
  0006b	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 2031 :         _Myend   = _Newvec + _Newcapacity;

  0006e	8b 45 10	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00071	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00074	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
  00077	89 47 08	 mov	 DWORD PTR [edi+8], eax
  0007a	5f		 pop	 edi

; 2033 :     }

  0007b	5d		 pop	 ebp
  0007c	c2 0c 00	 ret	 12			; 0000000cH
$LN15@Change_arr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN25@Change_arr:
  00084	cc		 int	 3
?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 766  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 65		 je	 SHORT $LN4@vector
  00009	57		 push	 edi

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);

  0000a	56		 push	 esi
  0000b	ff 76 04	 push	 DWORD PTR [esi+4]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00014	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00017	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0001c	8b 3e		 mov	 edi, DWORD PTR [esi]
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00021	2b cf		 sub	 ecx, edi
  00023	f7 e9		 imul	 ecx
  00025	c1 fa 02	 sar	 edx, 2
  00028	8b c2		 mov	 eax, edx
  0002a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0002d	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002f	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00032	c1 e1 03	 shl	 ecx, 3

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00035	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0003b	72 12		 jb	 SHORT $LN20@vector

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0003d	8b 57 fc	 mov	 edx, DWORD PTR [edi-4]
  00040	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00043	2b fa		 sub	 edi, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  00048	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0004b	77 23		 ja	 SHORT $LN17@vector

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0004d	8b fa		 mov	 edi, edx
$LN20@vector:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0004f	51		 push	 ecx
  00050	57		 push	 edi
  00051	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00056	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00059	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 2050 :             _Mylast  = nullptr;

  0005f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2051 :             _Myend   = nullptr;

  00066	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0006d	5f		 pop	 edi
$LN4@vector:
  0006e	5e		 pop	 esi

; 772  :     }

  0006f	c3		 ret	 0
$LN17@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00070	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN28@vector:
  00075	cc		 int	 3
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate, COMDAT
; _this$ = ecx

; 966  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 967  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");
; 968  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00009	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000c	c1 e1 03	 shl	 ecx, 3

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00015	72 12		 jb	 SHORT $LN15@deallocate

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00017	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001a	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001d	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00022	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00025	77 10		 ja	 SHORT $LN12@deallocate

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00027	8b c2		 mov	 eax, edx
$LN15@deallocate:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00029	51		 push	 ecx
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00030	83 c4 08	 add	 esp, 8

; 970  :     }

  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
$LN12@deallocate:

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00037	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN18@deallocate:
  0003c	cc		 int	 3
?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xtree
;	COMDAT ?_Throw_tree_length_error@std@@YAXXZ
_TEXT	SEGMENT
?_Throw_tree_length_error@std@@YAXXZ PROC		; std::_Throw_tree_length_error, COMDAT

; 418  :     _Xlength_error("map/set too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Throw_tree:
  0000a	cc		 int	 3
?_Throw_tree_length_error@std@@YAXXZ ENDP		; std::_Throw_tree_length_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__Old$1$ = -4						; size = 4
__Ptr$ = 8						; size = 4
$T1 = 12						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 3374 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 3375 :         // assign [_Ptr, _Ptr + _Count)
; 3376 :         if (_Count <= _Mypair._Myval2._Myres) {

  00005	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	57		 push	 edi
  0000c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000f	89 4d fc	 mov	 DWORD PTR __Old$1$[ebp], ecx
  00012	3b d9		 cmp	 ebx, ecx
  00014	77 28		 ja	 SHORT $LN2@assign

; 2226 :         value_type* _Result = _Bx._Buf;

  00016	8b fe		 mov	 edi, esi

; 2244 :         return _BUF_SIZE <= _Myres;

  00018	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2227 :         if (_Large_string_engaged()) {

  0001b	72 02		 jb	 SHORT $LN5@assign

; 2228 :             _Result = _Unfancy(_Bx._Ptr);

  0001d	8b 3e		 mov	 edi, DWORD PTR [esi]
$LN5@assign:

; 119  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0001f	53		 push	 ebx
  00020	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 3377 :             _ASAN_STRING_MODIFY(*this, _Mypair._Myval2._Mysize, _Count);
; 3378 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 3379 :             _Mypair._Myval2._Mysize = _Count;

  00023	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 119  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00026	57		 push	 edi
  00027	e8 00 00 00 00	 call	 _memmove
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3380 :             _Traits::move(_Old_ptr, _Ptr, _Count);
; 3381 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0002f	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 3390 :             },
; 3391 :             _Ptr);
; 3392 :     }

  00033	8b c6		 mov	 eax, esi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
$LN2@assign:

; 4734 :         if (_New_size > max_size()) {

  0003e	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  00044	0f 87 d4 00 00
	00		 ja	 $LN69@assign

; 4714 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0004a	8b fb		 mov	 edi, ebx
  0004c	83 cf 0f	 or	 edi, 15			; 0000000fH
  0004f	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 4715 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00055	76 15		 jbe	 SHORT $LN19@assign

; 4716 :             return _Max;

  00057	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0005c	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00067	83 c4 04	 add	 esp, 4
  0006a	eb 52		 jmp	 SHORT $LN67@assign
$LN19@assign:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4719 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0006c	8b d1		 mov	 edx, ecx
  0006e	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00073	d1 ea		 shr	 edx, 1
  00075	2b c2		 sub	 eax, edx
  00077	3b c8		 cmp	 ecx, eax
  00079	76 15		 jbe	 SHORT $LN20@assign

; 4720 :             return _Max;

  0007b	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00080	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0008b	83 c4 04	 add	 esp, 4
  0008e	eb 2e		 jmp	 SHORT $LN67@assign
$LN20@assign:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4723 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00090	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 47   :     return _Left < _Right ? _Right : _Left;

  00093	3b f8		 cmp	 edi, eax
  00095	0f 42 f8	 cmovb	 edi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4741 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00098	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0009b	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000a0	72 0b		 jb	 SHORT $LN27@assign

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a8	83 c4 04	 add	 esp, 4
  000ab	eb 11		 jmp	 SHORT $LN67@assign
$LN27@assign:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  000ad	85 c0		 test	 eax, eax
  000af	74 0b		 je	 SHORT $LN28@assign

; 87   :         return ::operator new(_Bytes);

  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000b7	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  000ba	eb 02		 jmp	 SHORT $LN67@assign
$LN28@assign:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  000bc	33 c0		 xor	 eax, eax
$LN67@assign:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000be	53		 push	 ebx
  000bf	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 4746 :         _Mypair._Myval2._Mysize = _New_size;

  000c2	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c5	50		 push	 eax

; 4746 :         _Mypair._Myval2._Mysize = _New_size;

  000c6	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 4747 :         _Mypair._Myval2._Myres  = _New_capacity;

  000c9	89 7e 14	 mov	 DWORD PTR [esi+20], edi

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000cc	e8 00 00 00 00	 call	 _memcpy

; 3389 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000d1	8b 7d 0c	 mov	 edi, DWORD PTR $T1[ebp]

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4749 :         if (_BUF_SIZE <= _Old_capacity) {

  000d7	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]

; 3389 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000da	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 4749 :         if (_BUF_SIZE <= _Old_capacity) {

  000de	83 f8 10	 cmp	 eax, 16			; 00000010H
  000e1	72 29		 jb	 SHORT $LN13@assign

; 4750 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  000e3	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e6	8b 06		 mov	 eax, DWORD PTR [esi]

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000e8	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000ee	72 12		 jb	 SHORT $LN50@assign

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f0	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f3	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f6	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f8	83 c0 fc	 add	 eax, -4			; fffffffcH
  000fb	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000fe	77 19		 ja	 SHORT $LN47@assign

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00100	8b c2		 mov	 eax, edx
$LN50@assign:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00102	51		 push	 ecx
  00103	50		 push	 eax
  00104	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00109	83 c4 08	 add	 esp, 8
$LN13@assign:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 3385 :         return _Reallocate_for(

  0010c	89 3e		 mov	 DWORD PTR [esi], edi

; 3390 :             },
; 3391 :             _Ptr);
; 3392 :     }

  0010e	8b c6		 mov	 eax, esi
  00110	5f		 pop	 edi
  00111	5e		 pop	 esi
  00112	5b		 pop	 ebx
  00113	8b e5		 mov	 esp, ebp
  00115	5d		 pop	 ebp
  00116	c2 08 00	 ret	 8
$LN47@assign:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00119	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN69@assign:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4735 :             _Xlen_string(); // result too long

  0011e	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN65@assign:
  00123	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
tv507 = -12						; size = 4
__Old$1$ = -8						; size = 4
tv519 = -4						; size = 4
__Old_size$1$ = -4					; size = 4
__Ptr$ = 8						; size = 4
tv512 = 12						; size = 4
$T1 = 12						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 3268 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 3269 :         // append [_Ptr, _Ptr + _Count)
; 3270 :         const size_type _Old_size = _Mypair._Myval2._Mysize;
; 3271 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00011	8b c2		 mov	 eax, edx
  00013	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00016	2b c1		 sub	 eax, ecx
  00018	89 4d fc	 mov	 DWORD PTR __Old_size$1$[ebp], ecx
  0001b	89 55 f8	 mov	 DWORD PTR __Old$1$[ebp], edx
  0001e	3b d8		 cmp	 ebx, eax
  00020	77 2e		 ja	 SHORT $LN2@append

; 3272 :             _ASAN_STRING_MODIFY(*this, _Old_size, _Old_size + _Count);
; 3273 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00022	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  00025	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 2226 :         value_type* _Result = _Bx._Buf;

  00028	8b c7		 mov	 eax, edi

; 2244 :         return _BUF_SIZE <= _Myres;

  0002a	83 fa 10	 cmp	 edx, 16			; 00000010H

; 2227 :         if (_Large_string_engaged()) {

  0002d	72 02		 jb	 SHORT $LN5@append

; 2228 :             _Result = _Unfancy(_Bx._Ptr);

  0002f	8b 07		 mov	 eax, DWORD PTR [edi]
$LN5@append:

; 119  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00031	53		 push	 ebx
  00032	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 3274 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 3275 :             _Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

  00035	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]

; 119  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 _memmove
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3276 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  00041	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 3289 :     }

  00045	8b c7		 mov	 eax, edi
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
$LN2@append:

; 4766 :         if (max_size() - _Old_size < _Size_increase) {

  00050	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00055	2b c1		 sub	 eax, ecx
  00057	3b c3		 cmp	 eax, ebx
  00059	0f 82 26 01 00
	00		 jb	 $LN77@append

; 4768 :         }
; 4769 : 
; 4770 :         const size_type _New_size     = _Old_size + _Size_increase;

  0005f	8d 34 19	 lea	 esi, DWORD PTR [ecx+ebx]

; 4714 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00062	83 ce 0f	 or	 esi, 15			; 0000000fH
  00065	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4715 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0006b	76 18		 jbe	 SHORT $LN19@append

; 4716 :             return _Max;

  0006d	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00072	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0007d	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  00080	83 c4 04	 add	 esp, 4
  00083	eb 61		 jmp	 SHORT $LN75@append
$LN19@append:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4719 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00085	8b c2		 mov	 eax, edx
  00087	d1 e8		 shr	 eax, 1
  00089	89 45 0c	 mov	 DWORD PTR tv512[ebp], eax
  0008c	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00091	2b 45 0c	 sub	 eax, DWORD PTR tv512[ebp]
  00094	3b d0		 cmp	 edx, eax
  00096	76 18		 jbe	 SHORT $LN20@append

; 4720 :             return _Max;

  00098	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0009d	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a8	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  000ab	83 c4 04	 add	 esp, 4
  000ae	eb 36		 jmp	 SHORT $LN75@append
$LN20@append:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4723 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000b0	8b 45 0c	 mov	 eax, DWORD PTR tv512[ebp]
  000b3	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 47   :     return _Left < _Right ? _Right : _Left;

  000b5	3b f0		 cmp	 esi, eax
  000b7	0f 42 f0	 cmovb	 esi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4774 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  000ba	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000bd	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000c2	72 0e		 jb	 SHORT $LN27@append

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000c4	50		 push	 eax
  000c5	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000ca	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  000cd	83 c4 04	 add	 esp, 4
  000d0	eb 14		 jmp	 SHORT $LN75@append
$LN27@append:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  000d2	85 c0		 test	 eax, eax
  000d4	74 0e		 je	 SHORT $LN28@append

; 87   :         return ::operator new(_Bytes);

  000d6	50		 push	 eax
  000d7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 245  :         return _Traits::_Allocate(_Bytes);

  000dc	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]

; 87   :         return ::operator new(_Bytes);

  000df	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  000e2	eb 02		 jmp	 SHORT $LN75@append
$LN28@append:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  000e4	33 c0		 xor	 eax, eax
$LN75@append:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4782 :         if (_BUF_SIZE <= _Old_capacity) {

  000e6	83 7d f8 10	 cmp	 DWORD PTR __Old$1$[ebp], 16 ; 00000010H
  000ea	8d 14 19	 lea	 edx, DWORD PTR [ecx+ebx]
  000ed	89 77 14	 mov	 DWORD PTR [edi+20], esi
  000f0	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
  000f3	89 57 10	 mov	 DWORD PTR [edi+16], edx
  000f6	8d 14 1e	 lea	 edx, DWORD PTR [esi+ebx]
  000f9	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax
  000fc	89 75 fc	 mov	 DWORD PTR tv519[ebp], esi
  000ff	89 55 f4	 mov	 DWORD PTR tv507[ebp], edx
  00102	51		 push	 ecx
  00103	72 56		 jb	 SHORT $LN13@append

; 4783 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  00105	8b 37		 mov	 esi, DWORD PTR [edi]

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00107	56		 push	 esi
  00108	50		 push	 eax
  00109	e8 00 00 00 00	 call	 _memcpy
  0010e	53		 push	 ebx
  0010f	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00112	ff 75 fc	 push	 DWORD PTR tv519[ebp]
  00115	e8 00 00 00 00	 call	 _memcpy

; 3286 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0011a	8b 45 f4	 mov	 eax, DWORD PTR tv507[ebp]

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0011d	83 c4 18	 add	 esp, 24			; 00000018H

; 4785 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  00120	8b 4d f8	 mov	 ecx, DWORD PTR __Old$1$[ebp]
  00123	41		 inc	 ecx

; 3286 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00124	c6 00 00	 mov	 BYTE PTR [eax], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00127	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0012d	72 12		 jb	 SHORT $LN52@append

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0012f	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00132	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00135	2b f2		 sub	 esi, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00137	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  0013a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0013d	77 4b		 ja	 SHORT $LN49@append

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0013f	8b f2		 mov	 esi, edx
$LN52@append:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00141	51		 push	 ecx
  00142	56		 push	 esi
  00143	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 3280 :         return _Reallocate_grow_by(

  00148	8b 45 0c	 mov	 eax, DWORD PTR $T1[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  0014b	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 3280 :         return _Reallocate_grow_by(

  0014e	89 07		 mov	 DWORD PTR [edi], eax

; 3289 :     }

  00150	8b c7		 mov	 eax, edi
  00152	5f		 pop	 edi
  00153	5e		 pop	 esi
  00154	5b		 pop	 ebx
  00155	8b e5		 mov	 esp, ebp
  00157	5d		 pop	 ebp
  00158	c2 08 00	 ret	 8
$LN13@append:

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0015b	57		 push	 edi
  0015c	50		 push	 eax
  0015d	e8 00 00 00 00	 call	 _memcpy
  00162	53		 push	 ebx
  00163	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00166	56		 push	 esi
  00167	e8 00 00 00 00	 call	 _memcpy

; 3286 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0016c	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0016f	83 c4 18	 add	 esp, 24			; 00000018H

; 3286 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00172	c6 00 00	 mov	 BYTE PTR [eax], 0

; 3280 :         return _Reallocate_grow_by(

  00175	8b 45 0c	 mov	 eax, DWORD PTR $T1[ebp]
  00178	89 07		 mov	 DWORD PTR [edi], eax

; 3289 :     }

  0017a	8b c7		 mov	 eax, edi
  0017c	5f		 pop	 edi
  0017d	5e		 pop	 esi
  0017e	5b		 pop	 ebx
  0017f	8b e5		 mov	 esp, ebp
  00181	5d		 pop	 ebp
  00182	c2 08 00	 ret	 8
$LN77@append:

; 4767 :             _Xlen_string(); // result too long

  00185	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN49@append:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0018a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN73@append:
  0018f	cc		 int	 3
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 3118 :     _CONSTEXPR20 ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2244 :         return _BUF_SIZE <= _Myres;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  00009	72 27		 jb	 SHORT $LN12@basic_stri
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0000d	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN22@basic_stri

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN19@basic_stri

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN22@basic_stri:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN12@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 3126 :     }

  00044	c3		 ret	 0
$LN19@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN30@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Result$1$ = 8						; size = 4
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2491 :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 2235 :         const value_type* _Result = _Bx._Buf;

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Right$[ebp]
  00007	0f 57 c0	 xorps	 xmm0, xmm0

; 2491 :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx

; 2235 :         const value_type* _Result = _Bx._Buf;

  0000d	89 5d 08	 mov	 DWORD PTR __Result$1$[ebp], ebx
  00010	8b c3		 mov	 eax, ebx

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00012	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  00015	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  0001c	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2244 :         return _BUF_SIZE <= _Myres;

  00023	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H

; 2236 :         if (_Large_string_engaged()) {

  00027	72 05		 jb	 SHORT $LN12@basic_stri

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  00029	8b 03		 mov	 eax, DWORD PTR [ebx]
  0002b	89 45 08	 mov	 DWORD PTR __Result$1$[ebp], eax
$LN12@basic_stri:

; 2492 :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0002e	8b 5b 10	 mov	 ebx, DWORD PTR [ebx+16]

; 2620 :         if (_Count > max_size()) {

  00031	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  00037	0f 87 97 00 00
	00		 ja	 $LN49@basic_stri

; 2622 :         }
; 2623 : 
; 2624 :         auto& _Al       = _Getal();
; 2625 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 2626 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 2627 : 
; 2628 :         if (_Count < _BUF_SIZE) {

  0003d	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
  00044	83 fb 10	 cmp	 ebx, 16			; 00000010H
  00047	73 11		 jae	 SHORT $LN18@basic_stri

; 2629 :             _My_data._Mysize = _Count;

  00049	89 5f 10	 mov	 DWORD PTR [edi+16], ebx

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0004c	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]

; 2493 :     }

  0004f	8b c7		 mov	 eax, edi

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00051	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2493 :     }

  00054	5f		 pop	 edi
  00055	5b		 pop	 ebx
  00056	5d		 pop	 ebp
  00057	c2 04 00	 ret	 4
$LN18@basic_stri:
  0005a	56		 push	 esi

; 4714 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0005b	8b f3		 mov	 esi, ebx
  0005d	83 ce 0f	 or	 esi, 15			; 0000000fH
  00060	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4715 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00066	76 17		 jbe	 SHORT $LN25@basic_stri

; 4716 :             return _Max;

  00068	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0006d	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00078	83 c4 04	 add	 esp, 4
  0007b	8b c8		 mov	 ecx, eax
  0007d	eb 34		 jmp	 SHORT $LN32@basic_stri
$LN25@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 47   :     return _Left < _Right ? _Right : _Left;

  0007f	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00084	3b f0		 cmp	 esi, eax
  00086	0f 42 f0	 cmovb	 esi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2652 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00089	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0008c	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00091	72 0d		 jb	 SHORT $LN33@basic_stri

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00099	83 c4 04	 add	 esp, 4
  0009c	8b c8		 mov	 ecx, eax
  0009e	eb 13		 jmp	 SHORT $LN32@basic_stri
$LN33@basic_stri:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  000a0	85 c0		 test	 eax, eax
  000a2	74 0d		 je	 SHORT $LN34@basic_stri

; 87   :         return ::operator new(_Bytes);

  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000aa	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  000ad	8b c8		 mov	 ecx, eax
  000af	eb 02		 jmp	 SHORT $LN32@basic_stri
$LN34@basic_stri:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  000b1	33 c9		 xor	 ecx, ecx
$LN32@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2666 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);

  000b3	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  000b6	89 0f		 mov	 DWORD PTR [edi], ecx

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000b8	50		 push	 eax
  000b9	ff 75 08	 push	 DWORD PTR __Result$1$[ebp]

; 2657 :         _My_data._Mysize = _Count;

  000bc	89 5f 10	 mov	 DWORD PTR [edi+16], ebx

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000bf	51		 push	 ecx

; 2658 :         _My_data._Myres  = _New_capacity;

  000c0	89 77 14	 mov	 DWORD PTR [edi+20], esi

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c3	e8 00 00 00 00	 call	 _memcpy
  000c8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2493 :     }

  000cb	8b c7		 mov	 eax, edi

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000cd	5e		 pop	 esi

; 2493 :     }

  000ce	5f		 pop	 edi
  000cf	5b		 pop	 ebx
  000d0	5d		 pop	 ebp
  000d1	c2 04 00	 ret	 4
$LN49@basic_stri:

; 2621 :             _Xlen_string(); // result too long

  000d4	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN47@basic_stri:
  000d9	cc		 int	 3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2312 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 331  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 332  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
;	COMDAT _sscanf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sscanf	PROC						; COMDAT

; 2247 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2153 :         return __stdio_common_vsscanf(

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_scanf_options
  00016	ff 70 04	 push	 DWORD PTR [eax+4]
  00019	ff 30		 push	 DWORD PTR [eax]
  0001b	e8 00 00 00 00	 call	 ___stdio_common_vsscanf
  00020	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2248 :         int _Result;
; 2249 :         va_list _ArgList;
; 2250 :         __crt_va_start(_ArgList, _Format);
; 2251 :         _Result = _vsscanf_l(_Buffer, _Format, NULL, _ArgList);
; 2252 :         __crt_va_end(_ArgList);
; 2253 :         return _Result;
; 2254 :     }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
_sscanf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
;	COMDAT __snprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__snprintf PROC						; COMDAT

; 1947 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1392 :         int const _Result = __stdio_common_vsprintf(

  00003	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 01	 or	 ecx, 1
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1393 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1394 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1395 : 
; 1396 :         return _Result < 0 ? -1 : _Result;

  00025	83 c9 ff	 or	 ecx, -1
  00028	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 48 c1	 cmovs	 eax, ecx

; 1948 :         int _Result;
; 1949 :         va_list _ArgList;
; 1950 :         __crt_va_start(_ArgList, _Format);
; 1951 :         _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
; 1952 :         __crt_va_end(_ArgList);
; 1953 :         return _Result;
; 1954 :     }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
__snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_scanf_options
_TEXT	SEGMENT
___local_stdio_scanf_options PROC			; COMDAT

; 101  :         static unsigned __int64 _OptionsStorage;
; 102  :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA ; `__local_stdio_scanf_options'::`2'::_OptionsStorage

; 103  :     }

  00005	c3		 ret	 0
___local_stdio_scanf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\RaceManager.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
