; Listing generated by Microsoft (R) Optimizing Compiler Version 19.43.34808.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\GameLib\Distribute\PropertyManager.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__snprintf
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?_Throw_tree_length_error@std@@YAXXZ		; std::_Throw_tree_length_error
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??1?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> >,unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::~table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> >,unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long> > >
PUBLIC	??0?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >::unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >
PUBLIC	??1?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >::~unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >
PUBLIC	??1?$CSingleton@VCPropertyManager@@@@UAE@XZ	; CSingleton<CPropertyManager>::~CSingleton<CPropertyManager>
PUBLIC	??_G?$CSingleton@VCPropertyManager@@@@UAEPAXI@Z	; CSingleton<CPropertyManager>::`scalar deleting destructor'
PUBLIC	??0CPropertyManager@@QAE@XZ			; CPropertyManager::CPropertyManager
PUBLIC	??1CPropertyManager@@UAE@XZ			; CPropertyManager::~CPropertyManager
PUBLIC	?Clear@CPropertyManager@@QAEXXZ			; CPropertyManager::Clear
PUBLIC	?BuildPack@CPropertyManager@@QAE_NXZ		; CPropertyManager::BuildPack
PUBLIC	?LoadReservedCRC@CPropertyManager@@QAE_NPBD@Z	; CPropertyManager::LoadReservedCRC
PUBLIC	?ReserveCRC@CPropertyManager@@QAEXK@Z		; CPropertyManager::ReserveCRC
PUBLIC	?GetUniqueCRC@CPropertyManager@@QAEKPBD@Z	; CPropertyManager::GetUniqueCRC
PUBLIC	?Initialize@CPropertyManager@@QAE_NPBD@Z	; CPropertyManager::Initialize
PUBLIC	?Register@CPropertyManager@@QAE_NPBDPAPAVCProperty@@@Z ; CPropertyManager::Register
PUBLIC	?Get@CPropertyManager@@QAE_NKPAPAVCProperty@@@Z	; CPropertyManager::Get
PUBLIC	?Get@CPropertyManager@@QAE_NPBDPAPAVCProperty@@@Z ; CPropertyManager::Get
PUBLIC	?Put@CPropertyManager@@QAE_NPBD0@Z		; CPropertyManager::Put
PUBLIC	?Erase@CPropertyManager@@QAE_NK@Z		; CPropertyManager::Erase
PUBLIC	?Erase@CPropertyManager@@QAE_NPBD@Z		; CPropertyManager::Erase
PUBLIC	??1?$_Tree@V?$_Tmap_traits@KPAVCProperty@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCProperty@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CProperty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CProperty *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CProperty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CProperty *> >,0> >
PUBLIC	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCProperty@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CProperty *> > >::_Lrotate
PUBLIC	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCProperty@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CProperty *> > >::_Rrotate
PUBLIC	?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCProperty@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCProperty@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CProperty *> > >::_Extract
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCProperty@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CProperty *> > >::_Insert_node
PUBLIC	??1?$map@KPAVCProperty@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCProperty@@@std@@@3@@std@@QAE@XZ ; std::map<unsigned long,CProperty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CProperty *> > >::~map<unsigned long,CProperty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CProperty *> > >
PUBLIC	??1?$_Tree@V?$_Tset_traits@KU?$less@K@std@@V?$allocator@K@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tset_traits<unsigned long,std::less<unsigned long>,std::allocator<unsigned long>,0> >::~_Tree<std::_Tset_traits<unsigned long,std::less<unsigned long>,std::allocator<unsigned long>,0> >
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@K@std@@@std@@QAEPAU?$_Tree_node@KPAX@2@U?$_Tree_id@PAU?$_Tree_node@KPAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<unsigned long> >::_Insert_node
PUBLIC	??1?$set@KU?$less@K@std@@V?$allocator@K@2@@std@@QAE@XZ ; std::set<unsigned long,std::less<unsigned long>,std::allocator<unsigned long> >::~set<unsigned long,std::less<unsigned long>,std::allocator<unsigned long> >
PUBLIC	??_GCPropertyManager@@UAEPAXI@Z			; CPropertyManager::`scalar deleting destructor'
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCProperty@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CProperty *> > >,std::_Iterator_base0>::operator++
PUBLIC	??$_Find_lower_bound@K@?$_Tree@V?$_Tset_traits@KU?$less@K@std@@V?$allocator@K@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@KPAX@std@@@1@ABK@Z ; std::_Tree<std::_Tset_traits<unsigned long,std::less<unsigned long>,std::allocator<unsigned long>,0> >::_Find_lower_bound<unsigned long>
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@KPAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@K@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@KPAX@std@@@1@PAU?$_Tree_node@KPAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<unsigned long> >::_Erase_tree<std::allocator<std::_Tree_node<unsigned long,void *> > >
PUBLIC	??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCProperty@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCProperty@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CProperty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CProperty *> >,0> >::_Find_lower_bound<unsigned long>
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCProperty@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CProperty *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CProperty *>,void *> > >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@KPAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<unsigned long,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<unsigned long,void *> > >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CProperty *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CProperty *>,void *> > >
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_0BB@GCADKGJO@map?1set?5too?5long@		; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	?value@?$prime_list_template@I@detail@unordered@boost@@2QBIB ; boost::unordered::detail::prime_list_template<unsigned int>::value
PUBLIC	?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A ; CSingleton<CEterPackManager>::ms_singleton
PUBLIC	?ms_singleton@?$CSingleton@VCPropertyManager@@@@0PAVCPropertyManager@@A ; CSingleton<CPropertyManager>::ms_singleton
PUBLIC	??_7?$CSingleton@VCPropertyManager@@@@6B@	; CSingleton<CPropertyManager>::`vftable'
PUBLIC	??_7CPropertyManager@@6B@			; CPropertyManager::`vftable'
PUBLIC	??_C@_0CN@PCLFHBKL@Cannot?5open?5property?5pack?5file?5@ ; `string'
PUBLIC	??_C@_0BB@FGKGEGON@property?1reserve@		; `string'
PUBLIC	??_C@_08EMBNBNLN@property@			; `string'
PUBLIC	??_C@_0L@DIKAOLMN@property?2?$CK@		; `string'
PUBLIC	??_C@_0M@OKKDHDOO@property?2?$CFs@		; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd@				; `string'
PUBLIC	??_C@_0CP@KFNNCDLJ@Property?5already?5registered?0?5re@ ; `string'
PUBLIC	??_C@_02DPNLHKJD@a?$CL@				; `string'
PUBLIC	??_C@_0CN@HLOKHGIL@Cannot?5open?5the?5CRC?5file?5?8prope@ ; `string'
PUBLIC	??_C@_04JOCKIDOB@?$CFu?$AN?6@			; `string'
PUBLIC	??_R4CPropertyManager@@6B@			; CPropertyManager::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCPropertyManager@@@8			; CPropertyManager `RTTI Type Descriptor'
PUBLIC	??_R3CPropertyManager@@8			; CPropertyManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CPropertyManager@@8			; CPropertyManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CPropertyManager@@8		; CPropertyManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$CSingleton@VCPropertyManager@@@@8 ; CSingleton<CPropertyManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$CSingleton@VCPropertyManager@@@@@8	; CSingleton<CPropertyManager> `RTTI Type Descriptor'
PUBLIC	??_R3?$CSingleton@VCPropertyManager@@@@8	; CSingleton<CPropertyManager>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CSingleton@VCPropertyManager@@@@8	; CSingleton<CPropertyManager>::`RTTI Base Class Array'
PUBLIC	??_R4?$CSingleton@VCPropertyManager@@@@6B@	; CSingleton<CPropertyManager>::`RTTI Complete Object Locator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	__atoi64:PROC
EXTRN	__stricmp:PROC
EXTRN	__imp__DeleteFileA@4:PROC
EXTRN	__imp__FindClose@4:PROC
EXTRN	__imp__FindFirstFileA@8:PROC
EXTRN	__imp__FindNextFileA@8:PROC
EXTRN	__imp__CopyFileA@12:PROC
EXTRN	_fclose:PROC
EXTRN	_fopen:PROC
EXTRN	_fputs:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?Tracef@@YAXPBDZZ:PROC				; Tracef
EXTRN	?LogBox@@YAXPBD0PAUHWND__@@@Z:PROC		; LogBox
EXTRN	?LogBoxf@@YAXPBDZZ:PROC				; LogBoxf
EXTRN	?GetCRC32@@YAKPBDI@Z:PROC			; GetCRC32
EXTRN	??0CMemoryTextFileLoader@@QAE@XZ:PROC		; CMemoryTextFileLoader::CMemoryTextFileLoader
EXTRN	??1CMemoryTextFileLoader@@UAE@XZ:PROC		; CMemoryTextFileLoader::~CMemoryTextFileLoader
EXTRN	?Bind@CMemoryTextFileLoader@@QAEXHPBX@Z:PROC	; CMemoryTextFileLoader::Bind
EXTRN	?GetLineCount@CMemoryTextFileLoader@@QAEKXZ:PROC ; CMemoryTextFileLoader::GetLineCount
EXTRN	?GetLineString@CMemoryTextFileLoader@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@Z:PROC ; CMemoryTextFileLoader::GetLineString
EXTRN	??0CMappedFile@@QAE@XZ:PROC			; CMappedFile::CMappedFile
EXTRN	??1CMappedFile@@UAE@XZ:PROC			; CMappedFile::~CMappedFile
EXTRN	?Size@CMappedFile@@QAEKXZ:PROC			; CMappedFile::Size
EXTRN	?random@@YAKXZ:PROC				; random
EXTRN	??0CEterPack@@QAE@XZ:PROC			; CEterPack::CEterPack
EXTRN	??1CEterPack@@UAE@XZ:PROC			; CEterPack::~CEterPack
EXTRN	?Create@CEterPack@@QAE_NAAVCEterFileDict@@PBD1_NPBE@Z:PROC ; CEterPack::Create
EXTRN	?Put@CEterPack@@QAE_NPBD0EABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; CEterPack::Put
EXTRN	?Delete@CEterPack@@QAE_NPBD@Z:PROC		; CEterPack::Delete
EXTRN	?GetIndexMap@CEterPack@@QAEAAV?$unordered_map@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@5@@unordered@boost@@XZ:PROC ; CEterPack::GetIndexMap
EXTRN	?Get@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z:PROC ; CEterPackManager::Get
EXTRN	??_E?$CSingleton@VCPropertyManager@@@@UAEPAXI@Z:PROC ; CSingleton<CPropertyManager>::`vector deleting destructor'
EXTRN	??_ECPropertyManager@@UAEPAXI@Z:PROC		; CPropertyManager::`vector deleting destructor'
EXTRN	??0CProperty@@QAE@PBD@Z:PROC			; CProperty::CProperty
EXTRN	??1CProperty@@QAE@XZ:PROC			; CProperty::~CProperty
EXTRN	?ReadFromMemory@CProperty@@QAE_NPBXHPBD@Z:PROC	; CProperty::ReadFromMemory
EXTRN	?GetFileName@CProperty@@QAEPBDXZ:PROC		; CProperty::GetFileName
EXTRN	?GetCRC@CProperty@@QAEKXZ:PROC			; CProperty::GetCRC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A DD 01H DUP (?) ; CSingleton<CEterPackManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCPropertyManager@@@@0PAVCPropertyManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCPropertyManager@@@@0PAVCPropertyManager@@A DD 01H DUP (?) ; CSingleton<CPropertyManager>::ms_singleton
_BSS	ENDS
;	COMDAT ??_R4?$CSingleton@VCPropertyManager@@@@6B@
rdata$r	SEGMENT
??_R4?$CSingleton@VCPropertyManager@@@@6B@ DD 00H	; CSingleton<CPropertyManager>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CSingleton@VCPropertyManager@@@@@8
	DD	FLAT:??_R3?$CSingleton@VCPropertyManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CSingleton@VCPropertyManager@@@@8
rdata$r	SEGMENT
??_R2?$CSingleton@VCPropertyManager@@@@8 DD FLAT:??_R1A@?0A@EA@?$CSingleton@VCPropertyManager@@@@8 ; CSingleton<CPropertyManager>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CSingleton@VCPropertyManager@@@@8
rdata$r	SEGMENT
??_R3?$CSingleton@VCPropertyManager@@@@8 DD 00H		; CSingleton<CPropertyManager>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CSingleton@VCPropertyManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CSingleton@VCPropertyManager@@@@@8
data$rs	SEGMENT
??_R0?AV?$CSingleton@VCPropertyManager@@@@@8 DD FLAT:??_7type_info@@6B@ ; CSingleton<CPropertyManager> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CSingleton@VCPropertyManager@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CSingleton@VCPropertyManager@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CSingleton@VCPropertyManager@@@@8 DD FLAT:??_R0?AV?$CSingleton@VCPropertyManager@@@@@8 ; CSingleton<CPropertyManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CSingleton@VCPropertyManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CPropertyManager@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CPropertyManager@@8 DD FLAT:??_R0?AVCPropertyManager@@@8 ; CPropertyManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CPropertyManager@@8
rdata$r	ENDS
;	COMDAT ??_R2CPropertyManager@@8
rdata$r	SEGMENT
??_R2CPropertyManager@@8 DD FLAT:??_R1A@?0A@EA@CPropertyManager@@8 ; CPropertyManager::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$CSingleton@VCPropertyManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R3CPropertyManager@@8
rdata$r	SEGMENT
??_R3CPropertyManager@@8 DD 00H				; CPropertyManager::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CPropertyManager@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCPropertyManager@@@8
data$rs	SEGMENT
??_R0?AVCPropertyManager@@@8 DD FLAT:??_7type_info@@6B@	; CPropertyManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCPropertyManager@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CPropertyManager@@6B@
rdata$r	SEGMENT
??_R4CPropertyManager@@6B@ DD 00H			; CPropertyManager::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCPropertyManager@@@8
	DD	FLAT:??_R3CPropertyManager@@8
rdata$r	ENDS
;	COMDAT ??_C@_04JOCKIDOB@?$CFu?$AN?6@
CONST	SEGMENT
??_C@_04JOCKIDOB@?$CFu?$AN?6@ DB '%u', 0dH, 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@HLOKHGIL@Cannot?5open?5the?5CRC?5file?5?8prope@
CONST	SEGMENT
??_C@_0CN@HLOKHGIL@Cannot?5open?5the?5CRC?5file?5?8prope@ DB 'Cannot open'
	DB	' the CRC file ''property/reserve''.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPNLHKJD@a?$CL@
CONST	SEGMENT
??_C@_02DPNLHKJD@a?$CL@ DB 'a+', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@KFNNCDLJ@Property?5already?5registered?0?5re@
CONST	SEGMENT
??_C@_0CP@KFNNCDLJ@Property?5already?5registered?0?5re@ DB 'Property alre'
	DB	'ady registered, replace %s to %s', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd@ DB '%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OKKDHDOO@property?2?$CFs@
CONST	SEGMENT
??_C@_0M@OKKDHDOO@property?2?$CFs@ DB 'property\%s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DIKAOLMN@property?2?$CK@
CONST	SEGMENT
??_C@_0L@DIKAOLMN@property?2?$CK@ DB 'property\*', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08EMBNBNLN@property@
CONST	SEGMENT
??_C@_08EMBNBNLN@property@ DB 'property', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FGKGEGON@property?1reserve@
CONST	SEGMENT
??_C@_0BB@FGKGEGON@property?1reserve@ DB 'property/reserve', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@PCLFHBKL@Cannot?5open?5property?5pack?5file?5@
CONST	SEGMENT
??_C@_0CN@PCLFHBKL@Cannot?5open?5property?5pack?5file?5@ DB 'Cannot open '
	DB	'property pack file (filename %s)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7CPropertyManager@@6B@
CONST	SEGMENT
??_7CPropertyManager@@6B@ DD FLAT:??_R4CPropertyManager@@6B@ ; CPropertyManager::`vftable'
	DD	FLAT:??_ECPropertyManager@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CSingleton@VCPropertyManager@@@@6B@
CONST	SEGMENT
??_7?$CSingleton@VCPropertyManager@@@@6B@ DD FLAT:??_R4?$CSingleton@VCPropertyManager@@@@6B@ ; CSingleton<CPropertyManager>::`vftable'
	DD	FLAT:??_E?$CSingleton@VCPropertyManager@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ?value@?$prime_list_template@I@detail@unordered@boost@@2QBIB
CONST	SEGMENT
?value@?$prime_list_template@I@detail@unordered@boost@@2QBIB DD 011H ; boost::unordered::detail::prime_list_template<unsigned int>::value
	DD	01dH
	DD	025H
	DD	035H
	DD	043H
	DD	04fH
	DD	061H
	DD	083H
	DD	0c1H
	DD	0101H
	DD	0185H
	DD	0209H
	DD	0301H
	DD	0407H
	DD	0607H
	DD	0805H
	DD	0c07H
	DD	01807H
	DD	03001H
	DD	06011H
	DD	0c005H
	DD	01800dH
	DD	030005H
	DD	060019H
	DD	0c0001H
	DD	0180005H
	DD	030000bH
	DD	060000dH
	DD	0c00005H
	DD	01800013H
	DD	03000005H
	DD	06000017H
	DD	0c000013H
	DD	018000005H
	DD	030000059H
	DD	060000005H
	DD	0c0000001H
	DD	0fffffffbH
CONST	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
CONST	SEGMENT
??_C@_0BB@GCADKGJO@map?1set?5too?5long@ DB 'map/set too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0U?$pair@$$CBKPAVCProperty@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@1@$$QAU?$pair@$$CBKPAVCProperty@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@$$CBKPAVCProperty@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@1@$$QAU?$pair@$$CBKPAVCProperty@@@1@@Z$1
__ehfuncinfo$??$?0U?$pair@$$CBKPAVCProperty@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@1@$$QAU?$pair@$$CBKPAVCProperty@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0U?$pair@$$CBKPAVCProperty@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@1@$$QAU?$pair@$$CBKPAVCProperty@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABK@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@KPAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@KPAX@std@@@1@PAU?$_Tree_node@KPAX@1@ABK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABK@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@KPAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@KPAX@std@@@1@PAU?$_Tree_node@KPAX@1@ABK@Z$1
__ehfuncinfo$??$?0ABK@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@KPAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@KPAX@std@@@1@PAU?$_Tree_node@KPAX@1@ABK@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0ABK@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@KPAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@KPAX@std@@@1@PAU?$_Tree_node@KPAX@1@ABK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@KPAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@KPAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@KPAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@KPAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@KPAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@KPAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@KPAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@KPAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@U?$pair@$$CBKPAVCProperty@@@std@@@?$_Tree@V?$_Tmap_traits@KPAVCProperty@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCProperty@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAVCProperty@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@U?$pair@$$CBKPAVCProperty@@@std@@@?$_Tree@V?$_Tmap_traits@KPAVCProperty@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCProperty@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAVCProperty@@@1@@Z$2
__ehfuncinfo$??$_Emplace@U?$pair@$$CBKPAVCProperty@@@std@@@?$_Tree@V?$_Tmap_traits@KPAVCProperty@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCProperty@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAVCProperty@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@U?$pair@$$CBKPAVCProperty@@@std@@@?$_Tree@V?$_Tmap_traits@KPAVCProperty@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCProperty@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAVCProperty@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@ABK@?$_Tree@V?$_Tset_traits@KU?$less@K@std@@V?$allocator@K@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@KPAX@std@@_N@1@ABK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@ABK@?$_Tree@V?$_Tset_traits@KU?$less@K@std@@V?$allocator@K@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@KPAX@std@@_N@1@ABK@Z$2
__ehfuncinfo$??$_Emplace@ABK@?$_Tree@V?$_Tset_traits@KU?$less@K@std@@V?$allocator@K@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@KPAX@std@@_N@1@ABK@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@ABK@?$_Tree@V?$_Tset_traits@KU?$less@K@std@@V?$allocator@K@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@KPAX@std@@_N@1@ABK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCProperty@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCProperty@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCProperty@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCProperty@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCProperty@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCProperty@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCProperty@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCProperty@@@1@@Z$2
__ehfuncinfo$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCProperty@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCProperty@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCProperty@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCProperty@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCProperty@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCProperty@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCProperty@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCProperty@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@KU?$less@K@std@@V?$allocator@K@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@K@std@@@std@@@std@@_N@1@ABK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@KU?$less@K@std@@V?$allocator@K@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@K@std@@@std@@@std@@_N@1@ABK@Z$2
__ehfuncinfo$??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@KU?$less@K@std@@V?$allocator@K@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@K@std@@@std@@@std@@_N@1@ABK@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@KU?$less@K@std@@V?$allocator@K@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@K@std@@@std@@@std@@_N@1@ABK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Put@CPropertyManager@@QAE_NPBD0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Put@CPropertyManager@@QAE_NPBD0@Z$0
__ehfuncinfo$?Put@CPropertyManager@@QAE_NPBD0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Put@CPropertyManager@@QAE_NPBD0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Register@CPropertyManager@@QAE_NPBDPAPAVCProperty@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Register@CPropertyManager@@QAE_NPBDPAPAVCProperty@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Register@CPropertyManager@@QAE_NPBDPAPAVCProperty@@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?Register@CPropertyManager@@QAE_NPBDPAPAVCProperty@@@Z$4
__ehfuncinfo$?Register@CPropertyManager@@QAE_NPBDPAPAVCProperty@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?Register@CPropertyManager@@QAE_NPBDPAPAVCProperty@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetUniqueCRC@CPropertyManager@@QAEKPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetUniqueCRC@CPropertyManager@@QAEKPBD@Z$0
__ehfuncinfo$?GetUniqueCRC@CPropertyManager@@QAEKPBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetUniqueCRC@CPropertyManager@@QAEKPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ReserveCRC@CPropertyManager@@QAEXK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ReserveCRC@CPropertyManager@@QAEXK@Z$2
__ehfuncinfo$?ReserveCRC@CPropertyManager@@QAEXK@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ReserveCRC@CPropertyManager@@QAEXK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LoadReservedCRC@CPropertyManager@@QAE_NPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadReservedCRC@CPropertyManager@@QAE_NPBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadReservedCRC@CPropertyManager@@QAE_NPBD@Z$1
__ehfuncinfo$?LoadReservedCRC@CPropertyManager@@QAE_NPBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?LoadReservedCRC@CPropertyManager@@QAE_NPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?BuildPack@CPropertyManager@@QAE_NXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?BuildPack@CPropertyManager@@QAE_NXZ$0
__ehfuncinfo$?BuildPack@CPropertyManager@@QAE_NXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?BuildPack@CPropertyManager@@QAE_NXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CPropertyManager@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CPropertyManager@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CPropertyManager@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CPropertyManager@@QAE@XZ$2
__ehfuncinfo$??0CPropertyManager@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CPropertyManager@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CProperty *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CProperty *>,void *> > >, COMDAT
; _this$ = ecx

; 1168 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN10@Alloc_cons

; 289  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 18		 push	 24			; 00000018H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN10@Alloc_cons:

; 1169 :             _Al.deallocate(_Ptr, 1);
; 1170 :         }
; 1171 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CProperty *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CProperty *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@KPAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@KPAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<unsigned long,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<unsigned long,void *> > >, COMDAT
; _this$ = ecx

; 1168 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN10@Alloc_cons

; 289  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 14		 push	 20			; 00000014H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN10@Alloc_cons:

; 1169 :             _Al.deallocate(_Ptr, 1);
; 1170 :         }
; 1171 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@KPAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<unsigned long,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<unsigned long,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCProperty@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCProperty@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CProperty *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CProperty *>,void *> > >, COMDAT
; _this$ = ecx

; 757  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000e	75 25		 jne	 SHORT $LN39@Erase_tree
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR __Al$[ebp]
$LL2@Erase_tree:

; 759  :             _Erase_tree(_Al, _Rootnode->_Right);

  00014	ff 76 08	 push	 DWORD PTR [esi+8]
  00017	8b cb		 mov	 ecx, ebx
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCProperty@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CProperty *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CProperty *>,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001f	8b c6		 mov	 eax, esi

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  00021	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00023	6a 18		 push	 24			; 00000018H
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00032	74 e0		 je	 SHORT $LL2@Erase_tree
  00034	5f		 pop	 edi
$LN39@Erase_tree:
  00035	5e		 pop	 esi

; 760  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 761  :         }
; 762  :     }

  00036	5b		 pop	 ebx
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCProperty@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CProperty *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CProperty *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCProperty@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCProperty@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@@1@ABK@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCProperty@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCProperty@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@@1@ABK@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CProperty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CProperty *> >,0> >::_Find_lower_bound<unsigned long>, COMDAT
; _this$ = ecx

; 1618 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1619 :         const auto _Scary = _Get_scary();
; 1620 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000b	89 02		 mov	 DWORD PTR [edx], eax
  0000d	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00014	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1621 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1622 :         while (!_Trynode->_Isnil) {

  00017	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001b	75 28		 jne	 SHORT $LN13@Find_lower
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00020	56		 push	 esi
  00021	8b 31		 mov	 esi, DWORD PTR [ecx]
$LL2@Find_lower:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1623 :             _Result._Location._Parent = _Trynode;

  00023	89 02		 mov	 DWORD PTR [edx], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00025	39 70 10	 cmp	 DWORD PTR [eax+16], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1624 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00028	73 07		 jae	 SHORT $LN4@Find_lower

; 1625 :                 _Result._Location._Child = _Tree_child::_Right;
; 1626 :                 _Trynode                 = _Trynode->_Right;

  0002a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002d	33 c9		 xor	 ecx, ecx

; 1627 :             } else {

  0002f	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1628 :                 _Result._Location._Child = _Tree_child::_Left;
; 1629 :                 _Result._Bound           = _Trynode;

  00031	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1630 :                 _Trynode                 = _Trynode->_Left;

  00034	b9 01 00 00 00	 mov	 ecx, 1
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Find_lower:

; 1621 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1622 :         while (!_Trynode->_Isnil) {

  0003b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00042	74 df		 je	 SHORT $LL2@Find_lower
  00044	5e		 pop	 esi
$LN13@Find_lower:

; 1631 :             }
; 1632 :         }
; 1633 : 
; 1634 :         return _Result;
; 1635 :     }

  00045	8b c2		 mov	 eax, edx
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCProperty@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCProperty@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@@1@ABK@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CProperty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CProperty *> >,0> >::_Find_lower_bound<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@KPAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@K@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@KPAX@std@@@1@PAU?$_Tree_node@KPAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@KPAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@K@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@KPAX@std@@@1@PAU?$_Tree_node@KPAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<unsigned long> >::_Erase_tree<std::allocator<std::_Tree_node<unsigned long,void *> > >, COMDAT
; _this$ = ecx

; 757  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000e	75 25		 jne	 SHORT $LN39@Erase_tree
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR __Al$[ebp]
$LL2@Erase_tree:

; 759  :             _Erase_tree(_Al, _Rootnode->_Right);

  00014	ff 76 08	 push	 DWORD PTR [esi+8]
  00017	8b cb		 mov	 ecx, ebx
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@KPAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@K@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@KPAX@std@@@1@PAU?$_Tree_node@KPAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<unsigned long> >::_Erase_tree<std::allocator<std::_Tree_node<unsigned long,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001f	8b c6		 mov	 eax, esi

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  00021	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00023	6a 14		 push	 20			; 00000014H
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00032	74 e0		 je	 SHORT $LL2@Erase_tree
  00034	5f		 pop	 edi
$LN39@Erase_tree:
  00035	5e		 pop	 esi

; 760  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 761  :         }
; 762  :     }

  00036	5b		 pop	 ebx
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@KPAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@K@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@KPAX@std@@@1@PAU?$_Tree_node@KPAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<unsigned long> >::_Erase_tree<std::allocator<std::_Tree_node<unsigned long,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??$_Find_lower_bound@K@?$_Tree@V?$_Tset_traits@KU?$less@K@std@@V?$allocator@K@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@KPAX@std@@@1@ABK@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@K@?$_Tree@V?$_Tset_traits@KU?$less@K@std@@V?$allocator@K@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@KPAX@std@@@1@ABK@Z PROC ; std::_Tree<std::_Tset_traits<unsigned long,std::less<unsigned long>,std::allocator<unsigned long>,0> >::_Find_lower_bound<unsigned long>, COMDAT
; _this$ = ecx

; 1618 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1619 :         const auto _Scary = _Get_scary();
; 1620 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000b	89 02		 mov	 DWORD PTR [edx], eax
  0000d	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00014	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1621 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1622 :         while (!_Trynode->_Isnil) {

  00017	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001b	75 28		 jne	 SHORT $LN13@Find_lower
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00020	56		 push	 esi
  00021	8b 31		 mov	 esi, DWORD PTR [ecx]
$LL2@Find_lower:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1623 :             _Result._Location._Parent = _Trynode;

  00023	89 02		 mov	 DWORD PTR [edx], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00025	39 70 10	 cmp	 DWORD PTR [eax+16], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1624 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00028	73 07		 jae	 SHORT $LN4@Find_lower

; 1625 :                 _Result._Location._Child = _Tree_child::_Right;
; 1626 :                 _Trynode                 = _Trynode->_Right;

  0002a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002d	33 c9		 xor	 ecx, ecx

; 1627 :             } else {

  0002f	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1628 :                 _Result._Location._Child = _Tree_child::_Left;
; 1629 :                 _Result._Bound           = _Trynode;

  00031	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1630 :                 _Trynode                 = _Trynode->_Left;

  00034	b9 01 00 00 00	 mov	 ecx, 1
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Find_lower:

; 1621 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1622 :         while (!_Trynode->_Isnil) {

  0003b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00042	74 df		 je	 SHORT $LL2@Find_lower
  00044	5e		 pop	 esi
$LN13@Find_lower:

; 1631 :             }
; 1632 :         }
; 1633 : 
; 1634 :         return _Result;
; 1635 :     }

  00045	8b c2		 mov	 eax, edx
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
??$_Find_lower_bound@K@?$_Tree@V?$_Tset_traits@KU?$less@K@std@@V?$allocator@K@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@KPAX@std@@@1@ABK@Z ENDP ; std::_Tree<std::_Tset_traits<unsigned long,std::less<unsigned long>,std::allocator<unsigned long>,0> >::_Find_lower_bound<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCProperty@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCProperty@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CProperty *> > >,std::_Iterator_base0>::operator++, COMDAT
; _this$ = ecx

; 49   :     _Tree_unchecked_const_iterator& operator++() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 50   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  00004	8b 16		 mov	 edx, DWORD PTR [esi]
  00006	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  00009	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0000d	74 22		 je	 SHORT $LN4@operator

; 51   :             _Nodeptr _Pnode;
; 52   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  0000f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00012	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00016	75 12		 jne	 SHORT $LN21@operator
$LL2@operator:
  00018	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0001b	75 0d		 jne	 SHORT $LN21@operator

; 53   :                 _Ptr = _Pnode; // ==> parent while right subtree

  0001d	89 06		 mov	 DWORD PTR [esi], eax
  0001f	8b d0		 mov	 edx, eax
  00021	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00024	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00028	74 ee		 je	 SHORT $LL2@operator
$LN21@operator:

; 54   :             }
; 55   : 
; 56   :             _Ptr = _Pnode; // ==> parent (head if end())
; 57   :         } else {
; 58   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree
; 59   :         }
; 60   : 
; 61   :         return *this;

  0002a	89 06		 mov	 DWORD PTR [esi], eax

; 62   :     }

  0002c	8b c6		 mov	 eax, esi
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	c3		 ret	 0
$LN4@operator:

; 466  :         while (!_Pnode->_Left->_Isnil) {

  00031	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00033	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00037	75 13		 jne	 SHORT $LN10@operator
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL9@operator:
  00040	8b 01		 mov	 eax, DWORD PTR [ecx]

; 467  :             _Pnode = _Pnode->_Left;

  00042	8b f9		 mov	 edi, ecx
  00044	8b c8		 mov	 ecx, eax
  00046	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004a	74 f4		 je	 SHORT $LL9@operator
$LN10@operator:

; 54   :             }
; 55   : 
; 56   :             _Ptr = _Pnode; // ==> parent (head if end())
; 57   :         } else {
; 58   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree
; 59   :         }
; 60   : 
; 61   :         return *this;

  0004c	89 3e		 mov	 DWORD PTR [esi], edi

; 62   :     }

  0004e	8b c6		 mov	 eax, esi
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	c3		 ret	 0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCProperty@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CProperty *> > >,std::_Iterator_base0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCPropertyManager@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCPropertyManager@@UAEPAXI@Z PROC			; CPropertyManager::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CPropertyManager@@UAE@XZ ; CPropertyManager::~CPropertyManager
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN5@scalar
  00011	68 1c 14 00 00	 push	 5148			; 0000141cH
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCPropertyManager@@UAEPAXI@Z ENDP			; CPropertyManager::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$set@KU?$less@K@std@@V?$allocator@K@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$set@KU?$less@K@std@@V?$allocator@K@2@@std@@QAE@XZ PROC ; std::set<unsigned long,std::less<unsigned long>,std::allocator<unsigned long> >::~set<unsigned long,std::less<unsigned long>,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1?$_Tree@V?$_Tset_traits@KU?$less@K@std@@V?$allocator@K@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tset_traits<unsigned long,std::less<unsigned long>,std::allocator<unsigned long>,0> >::~_Tree<std::_Tset_traits<unsigned long,std::less<unsigned long>,std::allocator<unsigned long>,0> >
??1?$set@KU?$less@K@std@@V?$allocator@K@2@@std@@QAE@XZ ENDP ; std::set<unsigned long,std::less<unsigned long>,std::allocator<unsigned long> >::~set<unsigned long,std::less<unsigned long>,std::allocator<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@K@std@@@std@@QAEPAU?$_Tree_node@KPAX@2@U?$_Tree_id@PAU?$_Tree_node@KPAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@K@std@@@std@@QAEPAU?$_Tree_node@KPAX@2@U?$_Tree_id@PAU?$_Tree_node@KPAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<unsigned long> >::_Insert_node, COMDAT
; _this$ = ecx

; 659  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 660  :         ++_Mysize;
; 661  :         const auto _Head  = _Myhead;
; 662  :         _Newnode->_Parent = _Loc._Parent;

  00004	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0000e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00010	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00013	89 45 fc	 mov	 DWORD PTR __Head$1$[ebp], eax
  00016	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 663  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  00019	3b d0		 cmp	 edx, eax
  0001b	75 16		 jne	 SHORT $LN5@Insert_nod

; 664  :             _Head->_Left     = _Newnode;

  0001d	89 38		 mov	 DWORD PTR [eax], edi

; 665  :             _Head->_Parent   = _Newnode;

  0001f	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 666  :             _Head->_Right    = _Newnode;

  00022	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 725  :         return _Newnode;
; 726  :     }

  00025	8b c7		 mov	 eax, edi
  00027	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
  0002b	5f		 pop	 edi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 667  :             _Newnode->_Color = _Black; // the root is black
; 668  :             return _Newnode;
; 669  :         }
; 670  : 
; 671  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 672  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00033	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00037	75 0d		 jne	 SHORT $LN6@Insert_nod

; 673  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 674  :             _Loc._Parent->_Right = _Newnode;

  00039	89 7a 08	 mov	 DWORD PTR [edx+8], edi

; 675  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003c	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003f	75 0d		 jne	 SHORT $LN9@Insert_nod

; 676  :                 _Head->_Right = _Newnode;

  00041	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 677  :             }
; 678  :         } else { // add to left of _Loc._Parent

  00044	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 679  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 680  :             _Loc._Parent->_Left = _Newnode;

  00046	89 3a		 mov	 DWORD PTR [edx], edi

; 681  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00048	3b 10		 cmp	 edx, DWORD PTR [eax]
  0004a	75 02		 jne	 SHORT $LN9@Insert_nod

; 682  :                 _Head->_Left = _Newnode;

  0004c	89 38		 mov	 DWORD PTR [eax], edi
$LN9@Insert_nod:

; 683  :             }
; 684  :         }
; 685  : 
; 686  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00051	8b c7		 mov	 eax, edi
  00053	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00057	0f 85 7d 01 00
	00		 jne	 $LN3@Insert_nod
  0005d	56		 push	 esi
  0005e	66 90		 npad	 2
$LL4@Insert_nod:

; 687  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00063	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	3b d1		 cmp	 edx, ecx
  0006a	0f 85 aa 00 00
	00		 jne	 $LN10@Insert_nod

; 688  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00070	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 689  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00073	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00077	0f 84 a3 00 00
	00		 je	 $LN82@Insert_nod

; 690  :                     _Pnode->_Parent->_Color          = _Black;
; 691  :                     _Parent_sibling->_Color          = _Black;
; 692  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 693  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 694  :                 } else { // parent's sibling has red and black children
; 695  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  0007d	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00080	3b c6		 cmp	 eax, esi
  00082	75 37		 jne	 SHORT $LN57@Insert_nod

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00084	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 696  :                         _Pnode = _Pnode->_Parent;

  00086	8b c2		 mov	 eax, edx

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00088	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 476  : 
; 477  :         if (!_Pnode->_Left->_Isnil) {

  0008b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00091	75 03		 jne	 SHORT $LN21@Insert_nod

; 478  :             _Pnode->_Left->_Parent = _Wherenode;

  00093	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN21@Insert_nod:

; 479  :         }
; 480  : 
; 481  :         _Pnode->_Parent = _Wherenode->_Parent;

  00096	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00099	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 482  : 
; 483  :         if (_Wherenode == _Myhead->_Parent) {

  0009c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0009e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000a1	75 05		 jne	 SHORT $LN22@Insert_nod

; 484  :             _Myhead->_Parent = _Pnode;

  000a3	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  000a6	eb 0e		 jmp	 SHORT $LN25@Insert_nod
$LN22@Insert_nod:

; 485  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000a8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ab	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000ad	75 04		 jne	 SHORT $LN24@Insert_nod

; 486  :             _Wherenode->_Parent->_Left = _Pnode;

  000af	89 31		 mov	 DWORD PTR [ecx], esi

; 487  :         } else {

  000b1	eb 03		 jmp	 SHORT $LN25@Insert_nod
$LN24@Insert_nod:

; 488  :             _Wherenode->_Parent->_Right = _Pnode;

  000b3	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN25@Insert_nod:

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 492  :         _Wherenode->_Parent = _Pnode;

  000b8	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN57@Insert_nod:

; 697  :                         _Lrotate(_Pnode);
; 698  :                     }
; 699  : 
; 700  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 701  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c8	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 702  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 496  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000d2	8b 32		 mov	 esi, DWORD PTR [edx]

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  000d4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000d7	89 0a		 mov	 DWORD PTR [edx], ecx

; 498  : 
; 499  :         if (!_Pnode->_Right->_Isnil) {

  000d9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000dc	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000e0	75 03		 jne	 SHORT $LN29@Insert_nod

; 500  :             _Pnode->_Right->_Parent = _Wherenode;

  000e2	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN29@Insert_nod:

; 501  :         }
; 502  : 
; 503  :         _Pnode->_Parent = _Wherenode->_Parent;

  000e5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000e8	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 504  : 
; 505  :         if (_Wherenode == _Myhead->_Parent) {

  000eb	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000ed	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000f0	75 0b		 jne	 SHORT $LN30@Insert_nod

; 506  :             _Myhead->_Parent = _Pnode;

  000f2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  000f5	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 703  :                 }
; 704  :             } else { // fixup red-red in right subtree

  000f8	e9 cc 00 00 00	 jmp	 $LN81@Insert_nod
$LN30@Insert_nod:

; 507  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  000fd	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00100	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00103	75 0b		 jne	 SHORT $LN32@Insert_nod

; 508  :             _Wherenode->_Parent->_Right = _Pnode;

  00105	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00108	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 703  :                 }
; 704  :             } else { // fixup red-red in right subtree

  0010b	e9 b9 00 00 00	 jmp	 $LN81@Insert_nod
$LN32@Insert_nod:

; 510  :             _Wherenode->_Parent->_Left = _Pnode;

  00110	89 31		 mov	 DWORD PTR [ecx], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00112	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 703  :                 }
; 704  :             } else { // fixup red-red in right subtree

  00115	e9 af 00 00 00	 jmp	 $LN81@Insert_nod
$LN10@Insert_nod:

; 705  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 706  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  0011a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0011e	75 1d		 jne	 SHORT $LN15@Insert_nod
$LN82@Insert_nod:

; 683  :             }
; 684  :         }
; 685  : 
; 686  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00120	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1
  00124	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  00128	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0012e	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00132	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00135	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00138	e9 8f 00 00 00	 jmp	 $LN2@Insert_nod
$LN15@Insert_nod:

; 707  :                     _Pnode->_Parent->_Color          = _Black;
; 708  :                     _Parent_sibling->_Color          = _Black;
; 709  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 710  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 711  :                 } else { // parent's sibling has red and black children
; 712  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  0013d	8b 32		 mov	 esi, DWORD PTR [edx]
  0013f	3b c6		 cmp	 eax, esi
  00141	75 3a		 jne	 SHORT $LN42@Insert_nod

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  00143	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 713  :                         _Pnode = _Pnode->_Parent;

  00146	8b c2		 mov	 eax, edx

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  00148	89 08		 mov	 DWORD PTR [eax], ecx

; 498  : 
; 499  :         if (!_Pnode->_Right->_Isnil) {

  0014a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0014d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00151	75 03		 jne	 SHORT $LN37@Insert_nod

; 500  :             _Pnode->_Right->_Parent = _Wherenode;

  00153	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN37@Insert_nod:

; 501  :         }
; 502  : 
; 503  :         _Pnode->_Parent = _Wherenode->_Parent;

  00156	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00159	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 504  : 
; 505  :         if (_Wherenode == _Myhead->_Parent) {

  0015c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0015e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00161	75 05		 jne	 SHORT $LN38@Insert_nod

; 506  :             _Myhead->_Parent = _Pnode;

  00163	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00166	eb 0f		 jmp	 SHORT $LN41@Insert_nod
$LN38@Insert_nod:

; 507  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00168	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0016b	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0016e	75 05		 jne	 SHORT $LN40@Insert_nod

; 508  :             _Wherenode->_Parent->_Right = _Pnode;

  00170	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 509  :         } else {

  00173	eb 02		 jmp	 SHORT $LN41@Insert_nod
$LN40@Insert_nod:

; 510  :             _Wherenode->_Parent->_Left = _Pnode;

  00175	89 31		 mov	 DWORD PTR [ecx], esi
$LN41@Insert_nod:

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00177	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 514  :         _Wherenode->_Parent = _Pnode;

  0017a	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN42@Insert_nod:

; 714  :                         _Rrotate(_Pnode);
; 715  :                     }
; 716  : 
; 717  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  0017d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 718  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00184	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00187	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0018a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 719  :                     _Lrotate(_Pnode->_Parent->_Parent);

  0018e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00191	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 474  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00194	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00197	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00199	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 476  : 
; 477  :         if (!_Pnode->_Left->_Isnil) {

  0019c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0019e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a2	75 03		 jne	 SHORT $LN45@Insert_nod

; 478  :             _Pnode->_Left->_Parent = _Wherenode;

  001a4	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN45@Insert_nod:

; 479  :         }
; 480  : 
; 481  :         _Pnode->_Parent = _Wherenode->_Parent;

  001a7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001aa	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 482  : 
; 483  :         if (_Wherenode == _Myhead->_Parent) {

  001ad	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001af	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  001b2	75 05		 jne	 SHORT $LN46@Insert_nod

; 484  :             _Myhead->_Parent = _Pnode;

  001b4	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  001b7	eb 0e		 jmp	 SHORT $LN49@Insert_nod
$LN46@Insert_nod:

; 485  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001b9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001bc	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001be	75 04		 jne	 SHORT $LN48@Insert_nod

; 486  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 31		 mov	 DWORD PTR [ecx], esi

; 487  :         } else {

  001c2	eb 03		 jmp	 SHORT $LN49@Insert_nod
$LN48@Insert_nod:

; 488  :             _Wherenode->_Parent->_Right = _Pnode;

  001c4	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN49@Insert_nod:

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  001c7	89 16		 mov	 DWORD PTR [esi], edx
$LN81@Insert_nod:

; 683  :             }
; 684  :         }
; 685  : 
; 686  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001c9	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN2@Insert_nod:
  001cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001cf	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001d3	0f 84 87 fe ff
	ff		 je	 $LL4@Insert_nod
  001d9	5e		 pop	 esi
$LN3@Insert_nod:

; 720  :                 }
; 721  :             }
; 722  :         }
; 723  : 
; 724  :         _Head->_Parent->_Color = _Black; // root is always black

  001da	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]
  001dd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e0	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 725  :         return _Newnode;
; 726  :     }

  001e4	8b c7		 mov	 eax, edi
  001e6	5f		 pop	 edi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@K@std@@@std@@QAEPAU?$_Tree_node@KPAX@2@U?$_Tree_id@PAU?$_Tree_node@KPAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<unsigned long> >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tset_traits@KU?$less@K@std@@V?$allocator@K@2@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree@V?$_Tset_traits@KU?$less@K@std@@V?$allocator@K@2@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tset_traits<unsigned long,std::less<unsigned long>,std::allocator<unsigned long>,0> >::~_Tree<std::_Tset_traits<unsigned long,std::less<unsigned long>,std::allocator<unsigned long>,0> >, COMDAT
; _this$ = ecx

; 1085 :     ~_Tree() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 767  :         _Erase_tree(_Al, _Myhead->_Parent);

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00009	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000d	75 21		 jne	 SHORT $LN72@Tree
  0000f	90		 npad	 1
$LL8@Tree:

; 759  :             _Erase_tree(_Al, _Rootnode->_Right);

  00010	ff 76 08	 push	 DWORD PTR [esi+8]
  00013	8b cf		 mov	 ecx, edi
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@KPAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@K@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@KPAX@std@@@1@PAU?$_Tree_node@KPAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<unsigned long> >::_Erase_tree<std::allocator<std::_Tree_node<unsigned long,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001b	8b c6		 mov	 eax, esi

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0001f	6a 14		 push	 20			; 00000014H
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0002e	74 e0		 je	 SHORT $LL8@Tree
$LN72@Tree:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00030	6a 14		 push	 20			; 00000014H
  00032	ff 37		 push	 DWORD PTR [edi]
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00039	83 c4 08	 add	 esp, 8
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1092 :     }

  0003e	c3		 ret	 0
??1?$_Tree@V?$_Tset_traits@KU?$less@K@std@@V?$allocator@K@2@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tset_traits<unsigned long,std::less<unsigned long>,std::allocator<unsigned long>,0> >::~_Tree<std::_Tset_traits<unsigned long,std::less<unsigned long>,std::allocator<unsigned long>,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$map@KPAVCProperty@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCProperty@@@std@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$map@KPAVCProperty@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCProperty@@@std@@@3@@std@@QAE@XZ PROC ; std::map<unsigned long,CProperty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CProperty *> > >::~map<unsigned long,CProperty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CProperty *> > >, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1?$_Tree@V?$_Tmap_traits@KPAVCProperty@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCProperty@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CProperty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CProperty *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CProperty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CProperty *> >,0> >
??1?$map@KPAVCProperty@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCProperty@@@std@@@3@@std@@QAE@XZ ENDP ; std::map<unsigned long,CProperty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CProperty *> > >::~map<unsigned long,CProperty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CProperty *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCProperty@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCProperty@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CProperty *> > >::_Insert_node, COMDAT
; _this$ = ecx

; 659  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 660  :         ++_Mysize;
; 661  :         const auto _Head  = _Myhead;
; 662  :         _Newnode->_Parent = _Loc._Parent;

  00004	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0000e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00010	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00013	89 45 fc	 mov	 DWORD PTR __Head$1$[ebp], eax
  00016	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 663  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  00019	3b d0		 cmp	 edx, eax
  0001b	75 16		 jne	 SHORT $LN5@Insert_nod

; 664  :             _Head->_Left     = _Newnode;

  0001d	89 38		 mov	 DWORD PTR [eax], edi

; 665  :             _Head->_Parent   = _Newnode;

  0001f	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 666  :             _Head->_Right    = _Newnode;

  00022	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 725  :         return _Newnode;
; 726  :     }

  00025	8b c7		 mov	 eax, edi
  00027	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
  0002b	5f		 pop	 edi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 667  :             _Newnode->_Color = _Black; // the root is black
; 668  :             return _Newnode;
; 669  :         }
; 670  : 
; 671  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 672  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00033	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00037	75 0d		 jne	 SHORT $LN6@Insert_nod

; 673  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 674  :             _Loc._Parent->_Right = _Newnode;

  00039	89 7a 08	 mov	 DWORD PTR [edx+8], edi

; 675  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003c	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003f	75 0d		 jne	 SHORT $LN9@Insert_nod

; 676  :                 _Head->_Right = _Newnode;

  00041	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 677  :             }
; 678  :         } else { // add to left of _Loc._Parent

  00044	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 679  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 680  :             _Loc._Parent->_Left = _Newnode;

  00046	89 3a		 mov	 DWORD PTR [edx], edi

; 681  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00048	3b 10		 cmp	 edx, DWORD PTR [eax]
  0004a	75 02		 jne	 SHORT $LN9@Insert_nod

; 682  :                 _Head->_Left = _Newnode;

  0004c	89 38		 mov	 DWORD PTR [eax], edi
$LN9@Insert_nod:

; 683  :             }
; 684  :         }
; 685  : 
; 686  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00051	8b c7		 mov	 eax, edi
  00053	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00057	0f 85 7d 01 00
	00		 jne	 $LN3@Insert_nod
  0005d	56		 push	 esi
  0005e	66 90		 npad	 2
$LL4@Insert_nod:

; 687  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00063	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	3b d1		 cmp	 edx, ecx
  0006a	0f 85 aa 00 00
	00		 jne	 $LN10@Insert_nod

; 688  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00070	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 689  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00073	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00077	0f 84 a3 00 00
	00		 je	 $LN82@Insert_nod

; 690  :                     _Pnode->_Parent->_Color          = _Black;
; 691  :                     _Parent_sibling->_Color          = _Black;
; 692  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 693  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 694  :                 } else { // parent's sibling has red and black children
; 695  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  0007d	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00080	3b c6		 cmp	 eax, esi
  00082	75 37		 jne	 SHORT $LN57@Insert_nod

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00084	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 696  :                         _Pnode = _Pnode->_Parent;

  00086	8b c2		 mov	 eax, edx

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00088	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 476  : 
; 477  :         if (!_Pnode->_Left->_Isnil) {

  0008b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00091	75 03		 jne	 SHORT $LN21@Insert_nod

; 478  :             _Pnode->_Left->_Parent = _Wherenode;

  00093	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN21@Insert_nod:

; 479  :         }
; 480  : 
; 481  :         _Pnode->_Parent = _Wherenode->_Parent;

  00096	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00099	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 482  : 
; 483  :         if (_Wherenode == _Myhead->_Parent) {

  0009c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0009e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000a1	75 05		 jne	 SHORT $LN22@Insert_nod

; 484  :             _Myhead->_Parent = _Pnode;

  000a3	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  000a6	eb 0e		 jmp	 SHORT $LN25@Insert_nod
$LN22@Insert_nod:

; 485  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000a8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ab	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000ad	75 04		 jne	 SHORT $LN24@Insert_nod

; 486  :             _Wherenode->_Parent->_Left = _Pnode;

  000af	89 31		 mov	 DWORD PTR [ecx], esi

; 487  :         } else {

  000b1	eb 03		 jmp	 SHORT $LN25@Insert_nod
$LN24@Insert_nod:

; 488  :             _Wherenode->_Parent->_Right = _Pnode;

  000b3	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN25@Insert_nod:

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 492  :         _Wherenode->_Parent = _Pnode;

  000b8	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN57@Insert_nod:

; 697  :                         _Lrotate(_Pnode);
; 698  :                     }
; 699  : 
; 700  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 701  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c8	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 702  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 496  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000d2	8b 32		 mov	 esi, DWORD PTR [edx]

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  000d4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000d7	89 0a		 mov	 DWORD PTR [edx], ecx

; 498  : 
; 499  :         if (!_Pnode->_Right->_Isnil) {

  000d9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000dc	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000e0	75 03		 jne	 SHORT $LN29@Insert_nod

; 500  :             _Pnode->_Right->_Parent = _Wherenode;

  000e2	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN29@Insert_nod:

; 501  :         }
; 502  : 
; 503  :         _Pnode->_Parent = _Wherenode->_Parent;

  000e5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000e8	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 504  : 
; 505  :         if (_Wherenode == _Myhead->_Parent) {

  000eb	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000ed	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000f0	75 0b		 jne	 SHORT $LN30@Insert_nod

; 506  :             _Myhead->_Parent = _Pnode;

  000f2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  000f5	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 703  :                 }
; 704  :             } else { // fixup red-red in right subtree

  000f8	e9 cc 00 00 00	 jmp	 $LN81@Insert_nod
$LN30@Insert_nod:

; 507  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  000fd	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00100	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00103	75 0b		 jne	 SHORT $LN32@Insert_nod

; 508  :             _Wherenode->_Parent->_Right = _Pnode;

  00105	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00108	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 703  :                 }
; 704  :             } else { // fixup red-red in right subtree

  0010b	e9 b9 00 00 00	 jmp	 $LN81@Insert_nod
$LN32@Insert_nod:

; 510  :             _Wherenode->_Parent->_Left = _Pnode;

  00110	89 31		 mov	 DWORD PTR [ecx], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00112	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 703  :                 }
; 704  :             } else { // fixup red-red in right subtree

  00115	e9 af 00 00 00	 jmp	 $LN81@Insert_nod
$LN10@Insert_nod:

; 705  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 706  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  0011a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0011e	75 1d		 jne	 SHORT $LN15@Insert_nod
$LN82@Insert_nod:

; 683  :             }
; 684  :         }
; 685  : 
; 686  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00120	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1
  00124	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  00128	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0012e	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00132	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00135	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00138	e9 8f 00 00 00	 jmp	 $LN2@Insert_nod
$LN15@Insert_nod:

; 707  :                     _Pnode->_Parent->_Color          = _Black;
; 708  :                     _Parent_sibling->_Color          = _Black;
; 709  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 710  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 711  :                 } else { // parent's sibling has red and black children
; 712  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  0013d	8b 32		 mov	 esi, DWORD PTR [edx]
  0013f	3b c6		 cmp	 eax, esi
  00141	75 3a		 jne	 SHORT $LN42@Insert_nod

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  00143	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 713  :                         _Pnode = _Pnode->_Parent;

  00146	8b c2		 mov	 eax, edx

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  00148	89 08		 mov	 DWORD PTR [eax], ecx

; 498  : 
; 499  :         if (!_Pnode->_Right->_Isnil) {

  0014a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0014d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00151	75 03		 jne	 SHORT $LN37@Insert_nod

; 500  :             _Pnode->_Right->_Parent = _Wherenode;

  00153	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN37@Insert_nod:

; 501  :         }
; 502  : 
; 503  :         _Pnode->_Parent = _Wherenode->_Parent;

  00156	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00159	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 504  : 
; 505  :         if (_Wherenode == _Myhead->_Parent) {

  0015c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0015e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00161	75 05		 jne	 SHORT $LN38@Insert_nod

; 506  :             _Myhead->_Parent = _Pnode;

  00163	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00166	eb 0f		 jmp	 SHORT $LN41@Insert_nod
$LN38@Insert_nod:

; 507  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00168	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0016b	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0016e	75 05		 jne	 SHORT $LN40@Insert_nod

; 508  :             _Wherenode->_Parent->_Right = _Pnode;

  00170	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 509  :         } else {

  00173	eb 02		 jmp	 SHORT $LN41@Insert_nod
$LN40@Insert_nod:

; 510  :             _Wherenode->_Parent->_Left = _Pnode;

  00175	89 31		 mov	 DWORD PTR [ecx], esi
$LN41@Insert_nod:

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00177	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 514  :         _Wherenode->_Parent = _Pnode;

  0017a	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN42@Insert_nod:

; 714  :                         _Rrotate(_Pnode);
; 715  :                     }
; 716  : 
; 717  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  0017d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 718  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00184	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00187	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0018a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 719  :                     _Lrotate(_Pnode->_Parent->_Parent);

  0018e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00191	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 474  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00194	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00197	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00199	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 476  : 
; 477  :         if (!_Pnode->_Left->_Isnil) {

  0019c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0019e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a2	75 03		 jne	 SHORT $LN45@Insert_nod

; 478  :             _Pnode->_Left->_Parent = _Wherenode;

  001a4	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN45@Insert_nod:

; 479  :         }
; 480  : 
; 481  :         _Pnode->_Parent = _Wherenode->_Parent;

  001a7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001aa	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 482  : 
; 483  :         if (_Wherenode == _Myhead->_Parent) {

  001ad	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001af	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  001b2	75 05		 jne	 SHORT $LN46@Insert_nod

; 484  :             _Myhead->_Parent = _Pnode;

  001b4	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  001b7	eb 0e		 jmp	 SHORT $LN49@Insert_nod
$LN46@Insert_nod:

; 485  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001b9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001bc	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001be	75 04		 jne	 SHORT $LN48@Insert_nod

; 486  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 31		 mov	 DWORD PTR [ecx], esi

; 487  :         } else {

  001c2	eb 03		 jmp	 SHORT $LN49@Insert_nod
$LN48@Insert_nod:

; 488  :             _Wherenode->_Parent->_Right = _Pnode;

  001c4	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN49@Insert_nod:

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  001c7	89 16		 mov	 DWORD PTR [esi], edx
$LN81@Insert_nod:

; 683  :             }
; 684  :         }
; 685  : 
; 686  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001c9	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN2@Insert_nod:
  001cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001cf	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001d3	0f 84 87 fe ff
	ff		 je	 $LL4@Insert_nod
  001d9	5e		 pop	 esi
$LN3@Insert_nod:

; 720  :                 }
; 721  :             }
; 722  :         }
; 723  : 
; 724  :         _Head->_Parent->_Color = _Black; // root is always black

  001da	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]
  001dd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e0	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 725  :         return _Newnode;
; 726  :     }

  001e4	8b c7		 mov	 eax, edi
  001e6	5f		 pop	 edi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCProperty@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CProperty *> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCProperty@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCProperty@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z
_TEXT	SEGMENT
tv1039 = -16						; size = 4
tv1073 = -12						; size = 4
tv1093 = -12						; size = 4
$T1 = -12						; size = 4
__Erasednode$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
__Where$ = 8						; size = 4
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCProperty@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCProperty@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CProperty *> > >::_Extract, COMDAT
; _this$ = ecx

; 517  :     _Nodeptr _Extract(_Unchecked_const_iterator _Where) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 518  :         _Nodeptr _Erasednode = _Where._Ptr; // node to erase

  00006	8b 45 08	 mov	 eax, DWORD PTR __Where$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b d9		 mov	 ebx, ecx
  0000d	89 45 f8	 mov	 DWORD PTR __Erasednode$1$[ebp], eax
  00010	57		 push	 edi

; 519  :         ++_Where; // save successor iterator for return

  00011	8d 4d 08	 lea	 ecx, DWORD PTR __Where$[ebp]
  00014	89 5d fc	 mov	 DWORD PTR _this$1$[ebp], ebx
  00017	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCProperty@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CProperty *> > >,std::_Iterator_base0>::operator++

; 520  : 
; 521  :         _Nodeptr _Fixnode; // the node to recolor as needed
; 522  :         _Nodeptr _Fixnodeparent; // parent of _Fixnode (which may be nil)
; 523  :         _Nodeptr _Pnode = _Erasednode;
; 524  : 
; 525  :         if (_Pnode->_Left->_Isnil) {

  0001c	8b 4d f8	 mov	 ecx, DWORD PTR __Erasednode$1$[ebp]
  0001f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00021	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]
  00024	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00028	75 18		 jne	 SHORT $LN94@Extract

; 526  :             _Fixnode = _Pnode->_Right; // stitch up right subtree
; 527  :         } else if (_Pnode->_Right->_Isnil) {

  0002a	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0002e	74 04		 je	 SHORT $LN7@Extract

; 528  :             _Fixnode = _Pnode->_Left; // stitch up left subtree

  00030	8b f8		 mov	 edi, eax

; 529  :         } else { // two subtrees, must lift successor node to replace erased

  00032	eb 0e		 jmp	 SHORT $LN94@Extract
$LN7@Extract:

; 530  :             _Pnode   = _Where._Ptr; // _Pnode is successor node

  00034	8b 55 08	 mov	 edx, DWORD PTR __Where$[ebp]

; 531  :             _Fixnode = _Pnode->_Right; // _Fixnode is only subtree

  00037	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  0003a	3b d1		 cmp	 edx, ecx

; 532  :         }
; 533  : 
; 534  :         if (_Pnode == _Erasednode) { // at most one subtree, relink it

  0003c	0f 85 91 00 00
	00		 jne	 $LN9@Extract
$LN94@Extract:

; 535  :             _Fixnodeparent = _Erasednode->_Parent;
; 536  :             if (!_Fixnode->_Isnil) {

  00042	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00046	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00049	75 03		 jne	 SHORT $LN11@Extract

; 537  :                 _Fixnode->_Parent = _Fixnodeparent; // link up

  0004b	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN11@Extract:

; 538  :             }
; 539  : 
; 540  :             if (_Myhead->_Parent == _Erasednode) {

  0004e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00050	39 48 04	 cmp	 DWORD PTR [eax+4], ecx
  00053	75 05		 jne	 SHORT $LN12@Extract

; 541  :                 _Myhead->_Parent = _Fixnode; // link down from root

  00055	89 78 04	 mov	 DWORD PTR [eax+4], edi
  00058	eb 0b		 jmp	 SHORT $LN15@Extract
$LN12@Extract:

; 542  :             } else if (_Fixnodeparent->_Left == _Erasednode) {

  0005a	39 0e		 cmp	 DWORD PTR [esi], ecx
  0005c	75 04		 jne	 SHORT $LN14@Extract

; 543  :                 _Fixnodeparent->_Left = _Fixnode; // link down to left

  0005e	89 3e		 mov	 DWORD PTR [esi], edi

; 544  :             } else {

  00060	eb 03		 jmp	 SHORT $LN15@Extract
$LN14@Extract:

; 545  :                 _Fixnodeparent->_Right = _Fixnode; // link down to right

  00062	89 7e 08	 mov	 DWORD PTR [esi+8], edi
$LN15@Extract:

; 546  :             }
; 547  : 
; 548  :             if (_Myhead->_Left == _Erasednode) {

  00065	8b 03		 mov	 eax, DWORD PTR [ebx]
  00067	39 08		 cmp	 DWORD PTR [eax], ecx
  00069	75 28		 jne	 SHORT $LN16@Extract

; 549  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  0006b	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0006f	74 04		 je	 SHORT $LN42@Extract
  00071	8b d6		 mov	 edx, esi
  00073	eb 1c		 jmp	 SHORT $LN43@Extract
$LN42@Extract:

; 466  :         while (!_Pnode->_Left->_Isnil) {

  00075	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 549  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  00077	8b d7		 mov	 edx, edi

; 466  :         while (!_Pnode->_Left->_Isnil) {

  00079	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0007d	75 0f		 jne	 SHORT $LN49@Extract
  0007f	90		 npad	 1
$LL48@Extract:
  00080	8b 01		 mov	 eax, DWORD PTR [ecx]

; 467  :             _Pnode = _Pnode->_Left;

  00082	8b d1		 mov	 edx, ecx
  00084	8b c8		 mov	 ecx, eax
  00086	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0008a	74 f4		 je	 SHORT $LL48@Extract
  0008c	8b 03		 mov	 eax, DWORD PTR [ebx]
$LN49@Extract:
  0008e	8b 4d f8	 mov	 ecx, DWORD PTR __Erasednode$1$[ebp]
$LN43@Extract:

; 549  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  00091	89 10		 mov	 DWORD PTR [eax], edx
$LN16@Extract:

; 550  :                                                   : _Min(_Fixnode); // smallest in relinked subtree
; 551  :             }
; 552  : 
; 553  :             if (_Myhead->_Right == _Erasednode) {

  00093	8b 13		 mov	 edx, DWORD PTR [ebx]
  00095	39 4a 08	 cmp	 DWORD PTR [edx+8], ecx
  00098	75 34		 jne	 SHORT $LN17@Extract

; 554  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  0009a	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0009e	74 0d		 je	 SHORT $LN44@Extract

; 555  :                                                    : _Max(_Fixnode); // largest in relinked subtree
; 556  :             }
; 557  :         } else { // erased has two subtrees, _Pnode is successor to erased

  000a0	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  000a3	8b ce		 mov	 ecx, esi
  000a5	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  000a8	e9 94 00 00 00	 jmp	 $LN58@Extract
$LN44@Extract:

; 458  :         while (!_Pnode->_Right->_Isnil) {

  000ad	8b 47 08	 mov	 eax, DWORD PTR [edi+8]

; 554  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  000b0	8b cf		 mov	 ecx, edi

; 458  :         while (!_Pnode->_Right->_Isnil) {

  000b2	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000b6	75 13		 jne	 SHORT $LN54@Extract
  000b8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL53@Extract:

; 459  :             _Pnode = _Pnode->_Right;

  000c0	8b c8		 mov	 ecx, eax
  000c2	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000c5	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000c9	74 f5		 je	 SHORT $LL53@Extract
$LN54@Extract:

; 554  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  000cb	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
$LN17@Extract:

; 555  :                                                    : _Max(_Fixnode); // largest in relinked subtree
; 556  :             }
; 557  :         } else { // erased has two subtrees, _Pnode is successor to erased

  000ce	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  000d1	eb 6e		 jmp	 SHORT $LN58@Extract
$LN9@Extract:

; 558  :             _Erasednode->_Left->_Parent = _Pnode; // link left up

  000d3	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 559  :             _Pnode->_Left               = _Erasednode->_Left; // link successor down

  000d6	8b 01		 mov	 eax, DWORD PTR [ecx]
  000d8	89 02		 mov	 DWORD PTR [edx], eax

; 560  : 
; 561  :             if (_Pnode == _Erasednode->_Right) {

  000da	8d 42 04	 lea	 eax, DWORD PTR [edx+4]
  000dd	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
  000e0	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  000e3	75 04		 jne	 SHORT $LN18@Extract

; 562  :                 _Fixnodeparent = _Pnode; // successor is next to erased

  000e5	8b f2		 mov	 esi, edx

; 563  :             } else { // successor further down, link in place of erased

  000e7	eb 1f		 jmp	 SHORT $LN19@Extract
$LN18@Extract:

; 564  :                 _Fixnodeparent = _Pnode->_Parent; // parent is successor's
; 565  :                 if (!_Fixnode->_Isnil) {

  000e9	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  000ed	8b 30		 mov	 esi, DWORD PTR [eax]
  000ef	75 03		 jne	 SHORT $LN20@Extract

; 566  :                     _Fixnode->_Parent = _Fixnodeparent; // link fix up

  000f1	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN20@Extract:

; 567  :                 }
; 568  : 
; 569  :                 _Fixnodeparent->_Left        = _Fixnode; // link fix down

  000f4	89 3e		 mov	 DWORD PTR [esi], edi

; 570  :                 _Pnode->_Right               = _Erasednode->_Right; // link next down

  000f6	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000f9	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 571  :                 _Erasednode->_Right->_Parent = _Pnode; // right up

  000fc	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000ff	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00102	8d 42 04	 lea	 eax, DWORD PTR [edx+4]
  00105	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
$LN19@Extract:

; 572  :             }
; 573  : 
; 574  :             if (_Myhead->_Parent == _Erasednode) {

  00108	8b 03		 mov	 eax, DWORD PTR [ebx]
  0010a	39 48 04	 cmp	 DWORD PTR [eax+4], ecx
  0010d	75 05		 jne	 SHORT $LN21@Extract

; 575  :                 _Myhead->_Parent = _Pnode; // link down from root

  0010f	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00112	eb 0e		 jmp	 SHORT $LN141@Extract
$LN21@Extract:

; 576  :             } else if (_Erasednode->_Parent->_Left == _Erasednode) {

  00114	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00117	39 08		 cmp	 DWORD PTR [eax], ecx
  00119	75 04		 jne	 SHORT $LN23@Extract

; 577  :                 _Erasednode->_Parent->_Left = _Pnode; // link down to left

  0011b	89 10		 mov	 DWORD PTR [eax], edx

; 578  :             } else {

  0011d	eb 03		 jmp	 SHORT $LN141@Extract
$LN23@Extract:

; 579  :                 _Erasednode->_Parent->_Right = _Pnode; // link down to right

  0011f	89 50 08	 mov	 DWORD PTR [eax+8], edx
$LN141@Extract:

; 580  :             }
; 581  : 
; 582  :             _Pnode->_Parent = _Erasednode->_Parent; // link successor up

  00122	b8 04 00 00 00	 mov	 eax, 4
  00127	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  0012a	8b 4d f4	 mov	 ecx, DWORD PTR $T1[ebp]
  0012d	89 01		 mov	 DWORD PTR [ecx], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 140  :     _Left    = _STD move(_Right);

  0012f	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  00132	8a 4a 0c	 mov	 cl, BYTE PTR [edx+12]
  00135	8a 40 0c	 mov	 al, BYTE PTR [eax+12]
  00138	88 42 0c	 mov	 BYTE PTR [edx+12], al

; 141  :     _Right   = _STD move(_Tmp);

  0013b	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  0013e	88 48 0c	 mov	 BYTE PTR [eax+12], cl
$LN58@Extract:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 586  :         if (_Erasednode->_Color == _Black) { // erasing black link, must recolor/rebalance tree

  00141	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  00145	0f 85 ba 01 00
	00		 jne	 $LN25@Extract

; 587  :             for (; _Fixnode != _Myhead->_Parent && _Fixnode->_Color == _Black; _Fixnodeparent = _Fixnode->_Parent) {

  0014b	8b 03		 mov	 eax, DWORD PTR [ebx]
  0014d	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  00150	0f 84 a8 01 00
	00		 je	 $LN3@Extract
  00156	80 7f 0c 01	 cmp	 BYTE PTR [edi+12], 1
  0015a	89 75 f4	 mov	 DWORD PTR tv1093[ebp], esi
  0015d	0f 85 9b 01 00
	00		 jne	 $LN3@Extract
$LL4@Extract:

; 588  :                 if (_Fixnode == _Fixnodeparent->_Left) { // fixup left subtree

  00163	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00165	3b f9		 cmp	 edi, ecx
  00167	0f 85 be 00 00
	00		 jne	 $LN26@Extract

; 589  :                     _Pnode = _Fixnodeparent->_Right;

  0016d	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 590  :                     if (_Pnode->_Color == _Red) { // rotate red up from right subtree

  00170	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00174	75 54		 jne	 SHORT $LN95@Extract

; 591  :                         _Pnode->_Color         = _Black;

  00176	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 474  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  0017a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 592  :                         _Fixnodeparent->_Color = _Red;

  0017d	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00181	8b 01		 mov	 eax, DWORD PTR [ecx]
  00183	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 476  : 
; 477  :         if (!_Pnode->_Left->_Isnil) {

  00186	8b 01		 mov	 eax, DWORD PTR [ecx]
  00188	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0018c	75 03		 jne	 SHORT $LN61@Extract

; 478  :             _Pnode->_Left->_Parent = _Wherenode;

  0018e	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN61@Extract:

; 479  :         }
; 480  : 
; 481  :         _Pnode->_Parent = _Wherenode->_Parent;

  00191	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00194	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
  00197	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 482  : 
; 483  :         if (_Wherenode == _Myhead->_Parent) {

  0019a	8b 03		 mov	 eax, DWORD PTR [ebx]
  0019c	3b 70 04	 cmp	 esi, DWORD PTR [eax+4]
  0019f	75 0c		 jne	 SHORT $LN62@Extract

; 484  :             _Myhead->_Parent = _Pnode;

  001a1	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  001a4	89 31		 mov	 DWORD PTR [ecx], esi

; 492  :         _Wherenode->_Parent = _Pnode;

  001a6	89 0a		 mov	 DWORD PTR [edx], ecx

; 593  :                         _Lrotate(_Fixnodeparent);
; 594  :                         _Pnode = _Fixnodeparent->_Right;

  001a8	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001ab	eb 20		 jmp	 SHORT $LN87@Extract
$LN62@Extract:

; 485  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001ad	8b 02		 mov	 eax, DWORD PTR [edx]
  001af	3b 30		 cmp	 esi, DWORD PTR [eax]
  001b1	75 0b		 jne	 SHORT $LN64@Extract

; 486  :             _Wherenode->_Parent->_Left = _Pnode;

  001b3	89 08		 mov	 DWORD PTR [eax], ecx

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  001b5	89 31		 mov	 DWORD PTR [ecx], esi

; 492  :         _Wherenode->_Parent = _Pnode;

  001b7	89 0a		 mov	 DWORD PTR [edx], ecx

; 593  :                         _Lrotate(_Fixnodeparent);
; 594  :                         _Pnode = _Fixnodeparent->_Right;

  001b9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001bc	eb 0f		 jmp	 SHORT $LN87@Extract
$LN64@Extract:

; 488  :             _Wherenode->_Parent->_Right = _Pnode;

  001be	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  001c1	89 31		 mov	 DWORD PTR [ecx], esi

; 492  :         _Wherenode->_Parent = _Pnode;

  001c3	89 0a		 mov	 DWORD PTR [edx], ecx

; 593  :                         _Lrotate(_Fixnodeparent);
; 594  :                         _Pnode = _Fixnodeparent->_Right;

  001c5	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001c8	eb 03		 jmp	 SHORT $LN87@Extract
$LN95@Extract:
  001ca	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
$LN87@Extract:

; 595  :                     }
; 596  : 
; 597  :                     if (_Pnode->_Isnil) {

  001cd	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001d1	0f 85 d0 00 00
	00		 jne	 $LN2@Extract

; 598  :                         _Fixnode = _Fixnodeparent; // shouldn't happen
; 599  :                     } else if (_Pnode->_Left->_Color == _Black
; 600  :                                && _Pnode->_Right->_Color == _Black) { // redden right subtree with black children

  001d7	8b 01		 mov	 eax, DWORD PTR [ecx]
  001d9	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001dd	75 0d		 jne	 SHORT $LN97@Extract
  001df	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001e2	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001e6	0f 84 b4 00 00
	00		 je	 $LN142@Extract
$LN97@Extract:

; 601  :                         _Pnode->_Color = _Red;
; 602  :                         _Fixnode       = _Fixnodeparent;
; 603  :                     } else { // must rearrange right subtree
; 604  :                         if (_Pnode->_Right->_Color == _Black) { // rotate red up from left sub-subtree

  001ec	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001ef	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
  001f2	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001f6	75 15		 jne	 SHORT $LN33@Extract

; 605  :                             _Pnode->_Left->_Color = _Black;

  001f8	8b 01		 mov	 eax, DWORD PTR [ecx]

; 606  :                             _Pnode->_Color        = _Red;
; 607  :                             _Rrotate(_Pnode);

  001fa	51		 push	 ecx
  001fb	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  001ff	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00203	8b cb		 mov	 ecx, ebx
  00205	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCProperty@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CProperty *> > >::_Rrotate

; 608  :                             _Pnode = _Fixnodeparent->_Right;

  0020a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
$LN33@Extract:

; 609  :                         }
; 610  : 
; 611  :                         _Pnode->_Color         = _Fixnodeparent->_Color;

  0020d	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  00210	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 612  :                         _Fixnodeparent->_Color = _Black;

  00213	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 613  :                         _Pnode->_Right->_Color = _Black;

  00217	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 614  :                         _Lrotate(_Fixnodeparent);

  0021a	8b cb		 mov	 ecx, ebx
  0021c	56		 push	 esi
  0021d	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  00221	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCProperty@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CProperty *> > >::_Lrotate

; 615  :                         break; // tree now recolored/rebalanced

  00226	e9 d3 00 00 00	 jmp	 $LN3@Extract
$LN26@Extract:

; 616  :                     }
; 617  :                 } else { // fixup right subtree
; 618  :                     _Pnode = _Fixnodeparent->_Left;
; 619  :                     if (_Pnode->_Color == _Red) { // rotate red up from left subtree

  0022b	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0022f	75 55		 jne	 SHORT $LN96@Extract

; 620  :                         _Pnode->_Color         = _Black;

  00231	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 496  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00235	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 621  :                         _Fixnodeparent->_Color = _Red;

  00237	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  0023b	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0023e	89 06		 mov	 DWORD PTR [esi], eax

; 498  : 
; 499  :         if (!_Pnode->_Right->_Isnil) {

  00240	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00243	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00247	75 03		 jne	 SHORT $LN69@Extract

; 500  :             _Pnode->_Right->_Parent = _Wherenode;

  00249	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN69@Extract:

; 501  :         }
; 502  : 
; 503  :         _Pnode->_Parent = _Wherenode->_Parent;

  0024c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0024f	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
  00252	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 504  : 
; 505  :         if (_Wherenode == _Myhead->_Parent) {

  00255	8b 03		 mov	 eax, DWORD PTR [ebx]
  00257	3b 70 04	 cmp	 esi, DWORD PTR [eax+4]
  0025a	75 0c		 jne	 SHORT $LN70@Extract

; 506  :             _Myhead->_Parent = _Pnode;

  0025c	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  0025f	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 514  :         _Wherenode->_Parent = _Pnode;

  00262	89 0a		 mov	 DWORD PTR [edx], ecx

; 622  :                         _Rrotate(_Fixnodeparent);
; 623  :                         _Pnode = _Fixnodeparent->_Left;

  00264	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00266	eb 21		 jmp	 SHORT $LN86@Extract
$LN70@Extract:

; 507  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00268	8b 02		 mov	 eax, DWORD PTR [edx]
  0026a	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  0026d	75 0c		 jne	 SHORT $LN72@Extract

; 508  :             _Wherenode->_Parent->_Right = _Pnode;

  0026f	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00272	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 514  :         _Wherenode->_Parent = _Pnode;

  00275	89 0a		 mov	 DWORD PTR [edx], ecx

; 622  :                         _Rrotate(_Fixnodeparent);
; 623  :                         _Pnode = _Fixnodeparent->_Left;

  00277	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00279	eb 0e		 jmp	 SHORT $LN86@Extract
$LN72@Extract:

; 510  :             _Wherenode->_Parent->_Left = _Pnode;

  0027b	89 08		 mov	 DWORD PTR [eax], ecx

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  0027d	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 514  :         _Wherenode->_Parent = _Pnode;

  00280	89 0a		 mov	 DWORD PTR [edx], ecx

; 622  :                         _Rrotate(_Fixnodeparent);
; 623  :                         _Pnode = _Fixnodeparent->_Left;

  00282	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00284	eb 03		 jmp	 SHORT $LN86@Extract
$LN96@Extract:
  00286	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
$LN86@Extract:

; 624  :                     }
; 625  : 
; 626  :                     if (_Pnode->_Isnil) {

  00289	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0028d	75 18		 jne	 SHORT $LN2@Extract

; 627  :                         _Fixnode = _Fixnodeparent; // shouldn't happen
; 628  :                     } else if (_Pnode->_Right->_Color == _Black
; 629  :                                && _Pnode->_Left->_Color == _Black) { // redden left subtree with black children

  0028f	8b 59 08	 mov	 ebx, DWORD PTR [ecx+8]
  00292	80 7b 0c 01	 cmp	 BYTE PTR [ebx+12], 1
  00296	75 2c		 jne	 SHORT $LN98@Extract
  00298	8b 01		 mov	 eax, DWORD PTR [ecx]
  0029a	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  0029e	75 24		 jne	 SHORT $LN98@Extract
$LN142@Extract:

; 587  :             for (; _Fixnode != _Myhead->_Parent && _Fixnode->_Color == _Black; _Fixnodeparent = _Fixnode->_Parent) {

  002a0	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
  002a3	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
$LN2@Extract:
  002a7	8b 03		 mov	 eax, DWORD PTR [ebx]
  002a9	8b 4d f4	 mov	 ecx, DWORD PTR tv1093[ebp]
  002ac	8b f9		 mov	 edi, ecx
  002ae	8b 32		 mov	 esi, DWORD PTR [edx]
  002b0	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  002b3	74 49		 je	 SHORT $LN3@Extract
  002b5	80 7f 0c 01	 cmp	 BYTE PTR [edi+12], 1
  002b9	89 75 f4	 mov	 DWORD PTR tv1093[ebp], esi
  002bc	0f 84 a1 fe ff
	ff		 je	 $LL4@Extract
  002c2	eb 3a		 jmp	 SHORT $LN3@Extract
$LN98@Extract:

; 630  :                         _Pnode->_Color = _Red;
; 631  :                         _Fixnode       = _Fixnodeparent;
; 632  :                     } else { // must rearrange left subtree
; 633  :                         if (_Pnode->_Left->_Color == _Black) { // rotate red up from right sub-subtree

  002c4	8b 01		 mov	 eax, DWORD PTR [ecx]
  002c6	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  002ca	75 17		 jne	 SHORT $LN101@Extract

; 634  :                             _Pnode->_Right->_Color = _Black;

  002cc	c6 43 0c 01	 mov	 BYTE PTR [ebx+12], 1

; 635  :                             _Pnode->_Color         = _Red;
; 636  :                             _Lrotate(_Pnode);

  002d0	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
  002d3	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  002d7	51		 push	 ecx
  002d8	8b cb		 mov	 ecx, ebx
  002da	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCProperty@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CProperty *> > >::_Lrotate

; 637  :                             _Pnode = _Fixnodeparent->_Left;

  002df	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002e1	eb 03		 jmp	 SHORT $LN39@Extract
$LN101@Extract:

; 630  :                         _Pnode->_Color = _Red;
; 631  :                         _Fixnode       = _Fixnodeparent;
; 632  :                     } else { // must rearrange left subtree
; 633  :                         if (_Pnode->_Left->_Color == _Black) { // rotate red up from right sub-subtree

  002e3	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
$LN39@Extract:

; 638  :                         }
; 639  : 
; 640  :                         _Pnode->_Color         = _Fixnodeparent->_Color;

  002e6	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  002e9	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 641  :                         _Fixnodeparent->_Color = _Black;

  002ec	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 642  :                         _Pnode->_Left->_Color  = _Black;

  002f0	8b 01		 mov	 eax, DWORD PTR [ecx]

; 643  :                         _Rrotate(_Fixnodeparent);

  002f2	8b cb		 mov	 ecx, ebx
  002f4	56		 push	 esi
  002f5	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  002f9	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCProperty@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CProperty *> > >::_Rrotate
$LN3@Extract:

; 644  :                         break; // tree now recolored/rebalanced
; 645  :                     }
; 646  :                 }
; 647  :             }
; 648  : 
; 649  :             _Fixnode->_Color = _Black; // stopping node is black

  002fe	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  00301	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
$LN25@Extract:

; 650  :         }
; 651  : 
; 652  :         if (0 < _Mysize) {

  00305	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00308	85 c9		 test	 ecx, ecx
  0030a	74 04		 je	 SHORT $LN40@Extract

; 653  :             --_Mysize;

  0030c	49		 dec	 ecx
  0030d	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx
$LN40@Extract:

; 654  :         }
; 655  : 
; 656  :         return _Erasednode;
; 657  :     }

  00310	5f		 pop	 edi
  00311	5e		 pop	 esi
  00312	5b		 pop	 ebx
  00313	8b e5		 mov	 esp, ebp
  00315	5d		 pop	 ebp
  00316	c2 04 00	 ret	 4
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCProperty@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCProperty@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CProperty *> > >::_Extract
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCProperty@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCProperty@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CProperty *> > >::_Rrotate, COMDAT
; _this$ = ecx

; 495  :     void _Rrotate(_Nodeptr _Wherenode) noexcept { // promote left node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 496  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 32		 mov	 esi, DWORD PTR [edx]

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	89 02		 mov	 DWORD PTR [edx], eax

; 498  : 
; 499  :         if (!_Pnode->_Right->_Isnil) {

  0000e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Rrotate

; 500  :             _Pnode->_Right->_Parent = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Rrotate:

; 501  :         }
; 502  : 
; 503  :         _Pnode->_Parent = _Wherenode->_Parent;

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 504  : 
; 505  :         if (_Wherenode == _Myhead->_Parent) {

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0e		 jne	 SHORT $LN3@Rrotate

; 506  :             _Myhead->_Parent = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;
; 514  :         _Wherenode->_Parent = _Pnode;
; 515  :     }

  0002a	89 56 08	 mov	 DWORD PTR [esi+8], edx
  0002d	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00030	5e		 pop	 esi
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN3@Rrotate:

; 507  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00035	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00038	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003b	75 0e		 jne	 SHORT $LN5@Rrotate

; 508  :             _Wherenode->_Parent->_Right = _Pnode;

  0003d	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;
; 514  :         _Wherenode->_Parent = _Pnode;
; 515  :     }

  00040	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00043	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00046	5e		 pop	 esi
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN5@Rrotate:

; 509  :         } else {
; 510  :             _Wherenode->_Parent->_Left = _Pnode;

  0004b	89 30		 mov	 DWORD PTR [eax], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;
; 514  :         _Wherenode->_Parent = _Pnode;
; 515  :     }

  0004d	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00050	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCProperty@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CProperty *> > >::_Rrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCProperty@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCProperty@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CProperty *> > >::_Lrotate, COMDAT
; _this$ = ecx

; 473  :     void _Lrotate(_Nodeptr _Wherenode) noexcept { // promote right node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 474  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  0000a	8b 06		 mov	 eax, DWORD PTR [esi]
  0000c	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 476  : 
; 477  :         if (!_Pnode->_Left->_Isnil) {

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Lrotate

; 478  :             _Pnode->_Left->_Parent = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Lrotate:

; 479  :         }
; 480  : 
; 481  :         _Pnode->_Parent = _Wherenode->_Parent;

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 482  : 
; 483  :         if (_Wherenode == _Myhead->_Parent) {

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0d		 jne	 SHORT $LN3@Lrotate

; 484  :             _Myhead->_Parent = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;
; 492  :         _Wherenode->_Parent = _Pnode;
; 493  :     }

  0002a	89 16		 mov	 DWORD PTR [esi], edx
  0002c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0002f	5e		 pop	 esi
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
$LN3@Lrotate:

; 485  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  00034	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00037	3b 10		 cmp	 edx, DWORD PTR [eax]
  00039	75 0c		 jne	 SHORT $LN5@Lrotate

; 486  :             _Wherenode->_Parent->_Left = _Pnode;

  0003b	89 30		 mov	 DWORD PTR [eax], esi

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;
; 492  :         _Wherenode->_Parent = _Pnode;
; 493  :     }

  0003d	89 16		 mov	 DWORD PTR [esi], edx
  0003f	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN5@Lrotate:

; 487  :         } else {
; 488  :             _Wherenode->_Parent->_Right = _Pnode;

  00047	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;
; 492  :         _Wherenode->_Parent = _Pnode;
; 493  :     }

  0004a	89 16		 mov	 DWORD PTR [esi], edx
  0004c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0004f	5e		 pop	 esi
  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCProperty@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CProperty *> > >::_Lrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@KPAVCProperty@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCProperty@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree@V?$_Tmap_traits@KPAVCProperty@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCProperty@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CProperty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CProperty *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CProperty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CProperty *> >,0> >, COMDAT
; _this$ = ecx

; 1085 :     ~_Tree() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 767  :         _Erase_tree(_Al, _Myhead->_Parent);

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00009	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000d	75 21		 jne	 SHORT $LN72@Tree
  0000f	90		 npad	 1
$LL8@Tree:

; 759  :             _Erase_tree(_Al, _Rootnode->_Right);

  00010	ff 76 08	 push	 DWORD PTR [esi+8]
  00013	8b cf		 mov	 ecx, edi
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCProperty@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CProperty *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CProperty *>,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001b	8b c6		 mov	 eax, esi

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0001f	6a 18		 push	 24			; 00000018H
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0002e	74 e0		 je	 SHORT $LL8@Tree
$LN72@Tree:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00030	6a 18		 push	 24			; 00000018H
  00032	ff 37		 push	 DWORD PTR [edi]
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00039	83 c4 08	 add	 esp, 8
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1092 :     }

  0003e	c3		 ret	 0
??1?$_Tree@V?$_Tmap_traits@KPAVCProperty@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCProperty@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CProperty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CProperty *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CProperty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CProperty *> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp
;	COMDAT ?Erase@CPropertyManager@@QAE_NPBD@Z
_TEXT	SEGMENT
_pProperty$ = -4					; size = 4
_c_pszFileName$ = 8					; size = 4
?Erase@CPropertyManager@@QAE_NPBD@Z PROC		; CPropertyManager::Erase, COMDAT
; _this$ = ecx

; 241  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 242  : 	CProperty * pProperty = NULL;
; 243  : 
; 244  : 	if (Get(c_pszFileName, &pProperty))

  00005	8d 45 fc	 lea	 eax, DWORD PTR _pProperty$[ebp]
  00008	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pProperty$[ebp], 0
  0000f	50		 push	 eax
  00010	ff 75 08	 push	 DWORD PTR _c_pszFileName$[ebp]
  00013	8b f1		 mov	 esi, ecx
  00015	e8 00 00 00 00	 call	 ?Get@CPropertyManager@@QAE_NPBDPAPAVCProperty@@@Z ; CPropertyManager::Get
  0001a	84 c0		 test	 al, al
  0001c	74 17		 je	 SHORT $LN2@Erase

; 245  : 		return Erase(pProperty->GetCRC());

  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _pProperty$[ebp]
  00021	e8 00 00 00 00	 call	 ?GetCRC@CProperty@@QAEKXZ ; CProperty::GetCRC
  00026	50		 push	 eax
  00027	8b ce		 mov	 ecx, esi
  00029	e8 00 00 00 00	 call	 ?Erase@CPropertyManager@@QAE_NK@Z ; CPropertyManager::Erase
  0002e	5e		 pop	 esi

; 248  : }

  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN2@Erase:

; 246  : 
; 247  : 	return false;

  00035	32 c0		 xor	 al, al
  00037	5e		 pop	 esi

; 248  : }

  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
?Erase@CPropertyManager@@QAE_NPBD@Z ENDP		; CPropertyManager::Erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp
;	COMDAT ?Erase@CPropertyManager@@QAE_NK@Z
_TEXT	SEGMENT
__Loc$1 = -84						; size = 12
_szCRC$2 = -72						; size = 65
__$ArrayPad$ = -4					; size = 4
_dwCRC$ = 8						; size = 4
?Erase@CPropertyManager@@QAE_NK@Z PROC			; CPropertyManager::Erase, COMDAT
; _this$ = ecx

; 208  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	57		 push	 edi
  00012	8b f9		 mov	 edi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00014	8d 45 08	 lea	 eax, DWORD PTR _dwCRC$[ebp]
  00017	50		 push	 eax
  00018	8d 45 ac	 lea	 eax, DWORD PTR __Loc$1[ebp]
  0001b	50		 push	 eax
  0001c	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  0001f	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCProperty@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCProperty@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CProperty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CProperty *> >,0> >::_Find_lower_bound<unsigned long>

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00024	8b 4d b4	 mov	 ecx, DWORD PTR __Loc$1[ebp+8]
  00027	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0002b	0f 85 df 00 00
	00		 jne	 $LN113@Erase
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00031	8b 45 08	 mov	 eax, DWORD PTR _dwCRC$[ebp]
  00034	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00037	0f 82 d3 00 00
	00		 jb	 $LN113@Erase

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0003d	39 4f 08	 cmp	 DWORD PTR [edi+8], ecx
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp

; 211  : 	if (m_PropertyByCRCMap.end() == itor)

  00040	0f 84 ca 00 00
	00		 je	 $LN113@Erase

; 212  : 		return false;
; 213  : 
; 214  : 	CProperty * pProperty = itor->second;

  00046	56		 push	 esi
  00047	8b 71 14	 mov	 esi, DWORD PTR [ecx+20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1293 :         _Nodeptr _Erasednode = _Scary->_Extract(_Where); // node to erase

  0004a	51		 push	 ecx
  0004b	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  0004e	e8 00 00 00 00	 call	 ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCProperty@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCProperty@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CProperty *> > >::_Extract
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00053	6a 18		 push	 24			; 00000018H
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0005b	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp

; 217  : 	DeleteFile(pProperty->GetFileName());

  0005e	8b ce		 mov	 ecx, esi
  00060	e8 00 00 00 00	 call	 ?GetFileName@CProperty@@QAEPBDXZ ; CProperty::GetFileName
  00065	50		 push	 eax
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteFileA@4

; 218  : 	ReserveCRC(pProperty->GetCRC());

  0006c	8b ce		 mov	 ecx, esi
  0006e	e8 00 00 00 00	 call	 ?GetCRC@CProperty@@QAEKXZ ; CProperty::GetCRC
  00073	50		 push	 eax
  00074	8b cf		 mov	 ecx, edi
  00076	e8 00 00 00 00	 call	 ?ReserveCRC@CPropertyManager@@QAEXK@Z ; CPropertyManager::ReserveCRC

; 219  : 
; 220  : 	if (!m_isFileMode)

  0007b	80 7f 04 00	 cmp	 BYTE PTR [edi+4], 0
  0007f	75 10		 jne	 SHORT $LN3@Erase

; 221  : 		m_pack.Delete(pProperty->GetFileName());

  00081	8b ce		 mov	 ecx, esi
  00083	e8 00 00 00 00	 call	 ?GetFileName@CProperty@@QAEPBDXZ ; CProperty::GetFileName
  00088	50		 push	 eax
  00089	8d 4f 18	 lea	 ecx, DWORD PTR [edi+24]
  0008c	e8 00 00 00 00	 call	 ?Delete@CEterPack@@QAE_NPBD@Z ; CEterPack::Delete
$LN3@Erase:

; 222  : 
; 223  : 	FILE * fp = fopen("property/reserve", "a+");

  00091	68 00 00 00 00	 push	 OFFSET ??_C@_02DPNLHKJD@a?$CL@
  00096	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FGKGEGON@property?1reserve@
  0009b	e8 00 00 00 00	 call	 _fopen
  000a0	8b f8		 mov	 edi, eax
  000a2	83 c4 08	 add	 esp, 8

; 224  : 
; 225  : 	if (!fp)

  000a5	85 ff		 test	 edi, edi
  000a7	75 11		 jne	 SHORT $LN4@Erase

; 226  : 		LogBox("Cannot open the CRC file 'property/reserve'.");

  000a9	50		 push	 eax
  000aa	50		 push	 eax
  000ab	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@HLOKHGIL@Cannot?5open?5the?5CRC?5file?5?8prope@
  000b0	e8 00 00 00 00	 call	 ?LogBox@@YAXPBD0PAUHWND__@@@Z ; LogBox
  000b5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b8	eb 2b		 jmp	 SHORT $LN5@Erase
$LN4@Erase:

; 227  : 	else
; 228  : 	{
; 229  : 		char szCRC[64 + 1];
; 230  : 		_snprintf(szCRC, sizeof(szCRC), "%u\r\n", pProperty->GetCRC());

  000ba	8b ce		 mov	 ecx, esi
  000bc	e8 00 00 00 00	 call	 ?GetCRC@CProperty@@QAEKXZ ; CProperty::GetCRC
  000c1	50		 push	 eax
  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_04JOCKIDOB@?$CFu?$AN?6@
  000c7	8d 45 b8	 lea	 eax, DWORD PTR _szCRC$2[ebp]
  000ca	6a 41		 push	 65			; 00000041H
  000cc	50		 push	 eax
  000cd	e8 00 00 00 00	 call	 __snprintf

; 231  : 
; 232  : 		fputs(szCRC, fp);

  000d2	8d 45 b8	 lea	 eax, DWORD PTR _szCRC$2[ebp]
  000d5	57		 push	 edi
  000d6	50		 push	 eax
  000d7	e8 00 00 00 00	 call	 _fputs

; 233  : 		fclose(fp);

  000dc	57		 push	 edi
  000dd	e8 00 00 00 00	 call	 _fclose
  000e2	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN5@Erase:

; 234  : 	}
; 235  : 
; 236  : 	delete pProperty;

  000e5	85 f6		 test	 esi, esi
  000e7	74 12		 je	 SHORT $LN109@Erase
  000e9	8b ce		 mov	 ecx, esi
  000eb	e8 00 00 00 00	 call	 ??1CProperty@@QAE@XZ	; CProperty::~CProperty
  000f0	6a 40		 push	 64			; 00000040H
  000f2	56		 push	 esi
  000f3	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000f8	83 c4 08	 add	 esp, 8
$LN109@Erase:

; 237  : 	return true;

  000fb	5e		 pop	 esi
  000fc	5f		 pop	 edi
  000fd	b0 01		 mov	 al, 1

; 238  : }

  000ff	5b		 pop	 ebx
  00100	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00103	33 cd		 xor	 ecx, ebp
  00105	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010a	8b e5		 mov	 esp, ebp
  0010c	5d		 pop	 ebp
  0010d	c2 04 00	 ret	 4
$LN113@Erase:
  00110	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00113	32 c0		 xor	 al, al
  00115	5f		 pop	 edi
  00116	33 cd		 xor	 ecx, ebp
  00118	5b		 pop	 ebx
  00119	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011e	8b e5		 mov	 esp, ebp
  00120	5d		 pop	 ebp
  00121	c2 04 00	 ret	 4
?Erase@CPropertyManager@@QAE_NK@Z ENDP			; CPropertyManager::Erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp
;	COMDAT ?Put@CPropertyManager@@QAE_NPBD0@Z
_TEXT	SEGMENT
$T2 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_pszFileName$ = 8					; size = 4
_c_pszSourceFileName$ = 12				; size = 4
?Put@CPropertyManager@@QAE_NPBD0@Z PROC			; CPropertyManager::Put, COMDAT
; _this$ = ecx

; 190  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Put@CPropertyManager@@QAE_NPBD0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f1		 mov	 esi, ecx
  0002d	8b 7d 08	 mov	 edi, DWORD PTR _c_pszFileName$[ebp]
  00030	8b 45 0c	 mov	 eax, DWORD PTR _c_pszSourceFileName$[ebp]

; 191  : 	if (!CopyFile(c_pszSourceFileName, c_pszFileName, FALSE))

  00033	6a 00		 push	 0
  00035	57		 push	 edi
  00036	50		 push	 eax
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CopyFileA@12
  0003d	85 c0		 test	 eax, eax
  0003f	74 4e		 je	 SHORT $LN7@Put

; 192  : 		return false;
; 193  : 
; 194  : 	if (!m_isFileMode)

  00041	80 7e 04 00	 cmp	 BYTE PTR [esi+4], 0
  00045	75 3a		 jne	 SHORT $LN4@Put

; 195  : 	{
; 196  : 		if (!m_pack.Put(c_pszFileName, NULL, COMPRESSED_TYPE_NONE,""))

  00047	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0004c	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  0004f	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00054	8d 45 d8	 lea	 eax, DWORD PTR $T2[ebp]
  00057	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005e	50		 push	 eax
  0005f	6a 00		 push	 0
  00061	6a 00		 push	 0
  00063	57		 push	 edi
  00064	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  00067	e8 00 00 00 00	 call	 ?Put@CEterPack@@QAE_NPBD0EABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CEterPack::Put
  0006c	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  0006f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00076	8a d8		 mov	 bl, al
  00078	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0007d	84 db		 test	 bl, bl
  0007f	74 0e		 je	 SHORT $LN7@Put
$LN4@Put:

; 200  : 		}
; 201  : 	}
; 202  : 
; 203  : 	Register(c_pszFileName);

  00081	6a 00		 push	 0
  00083	57		 push	 edi
  00084	8b ce		 mov	 ecx, esi
  00086	e8 00 00 00 00	 call	 ?Register@CPropertyManager@@QAE_NPBDPAPAVCProperty@@@Z ; CPropertyManager::Register

; 204  : 	return true;

  0008b	b0 01		 mov	 al, 1
  0008d	eb 02		 jmp	 SHORT $LN1@Put
$LN7@Put:

; 197  : 		{
; 198  : 			assert(!"CPropertyManager::Put cannot write to pack file");
; 199  : 			return false;

  0008f	32 c0		 xor	 al, al
$LN1@Put:

; 205  : }

  00091	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00094	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009b	59		 pop	 ecx
  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi
  0009e	5b		 pop	 ebx
  0009f	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Put@CPropertyManager@@QAE_NPBD0@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?Put@CPropertyManager@@QAE_NPBD0@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Put@CPropertyManager@@QAE_NPBD0@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Put@CPropertyManager@@QAE_NPBD0@Z ENDP			; CPropertyManager::Put
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp
;	COMDAT ?Get@CPropertyManager@@QAE_NPBDPAPAVCProperty@@@Z
_TEXT	SEGMENT
_c_pszFileName$ = 8					; size = 4
_ppProperty$ = 12					; size = 4
?Get@CPropertyManager@@QAE_NPBDPAPAVCProperty@@@Z PROC	; CPropertyManager::Get, COMDAT
; _this$ = ecx

; 174  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 176  : }

  00003	5d		 pop	 ebp

; 175  : 	return Register(c_pszFileName, ppProperty);

  00004	e9 00 00 00 00	 jmp	 ?Register@CPropertyManager@@QAE_NPBDPAPAVCProperty@@@Z ; CPropertyManager::Register
?Get@CPropertyManager@@QAE_NPBDPAPAVCProperty@@@Z ENDP	; CPropertyManager::Get
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp
;	COMDAT ?Get@CPropertyManager@@QAE_NKPAPAVCProperty@@@Z
_TEXT	SEGMENT
__Loc$1 = -12						; size = 12
_dwCRC$ = 8						; size = 4
_ppProperty$ = 12					; size = 4
?Get@CPropertyManager@@QAE_NKPAPAVCProperty@@@Z PROC	; CPropertyManager::Get, COMDAT
; _this$ = ecx

; 179  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00007	8d 45 08	 lea	 eax, DWORD PTR _dwCRC$[ebp]
  0000a	50		 push	 eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp

; 180  : 	TPropertyCRCMap::iterator itor = m_PropertyByCRCMap.find(dwCRC);

  0000b	8d 71 08	 lea	 esi, DWORD PTR [ecx+8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0000e	8d 45 f4	 lea	 eax, DWORD PTR __Loc$1[ebp]
  00011	8b ce		 mov	 ecx, esi
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCProperty@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCProperty@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CProperty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CProperty *> >,0> >::_Find_lower_bound<unsigned long>

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00019	8b 4d fc	 mov	 ecx, DWORD PTR __Loc$1[ebp+8]
  0001c	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00020	75 1d		 jne	 SHORT $LN50@Get
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00022	8b 45 08	 mov	 eax, DWORD PTR _dwCRC$[ebp]
  00025	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00028	72 15		 jb	 SHORT $LN50@Get

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0002a	39 0e		 cmp	 DWORD PTR [esi], ecx
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp

; 182  : 	if (m_PropertyByCRCMap.end() == itor)

  0002c	74 11		 je	 SHORT $LN50@Get

; 184  : 
; 185  : 	*ppProperty = itor->second;

  0002e	8b 45 0c	 mov	 eax, DWORD PTR _ppProperty$[ebp]
  00031	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00034	5e		 pop	 esi
  00035	89 08		 mov	 DWORD PTR [eax], ecx

; 186  : 	return true;

  00037	b0 01		 mov	 al, 1

; 187  : }

  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 08 00	 ret	 8
$LN50@Get:

; 183  : 		return false;

  0003f	32 c0		 xor	 al, al
  00041	5e		 pop	 esi

; 187  : }

  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c2 08 00	 ret	 8
?Get@CPropertyManager@@QAE_NKPAPAVCProperty@@@Z ENDP	; CPropertyManager::Get
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp
;	COMDAT ?Register@CPropertyManager@@QAE_NPBDPAPAVCProperty@@@Z
_TEXT	SEGMENT
$T2 = -388						; size = 12
__Loc$3 = -376						; size = 12
__Loc$4 = -376						; size = 12
_ppProperty$GSCopy$1$ = -364				; size = 4
_c_pszFileName$GSCopy$1$ = -360				; size = 4
_c_pvData$ = -356					; size = 4
$T5 = -352						; size = 8
$T6 = -352						; size = 8
$T7 = -348						; size = 4
_dwCRC$ = -344						; size = 4
_file$ = -340						; size = 324
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_pszFileName$ = 8					; size = 4
_ppProperty$ = 12					; size = 4
?Register@CPropertyManager@@QAE_NPBDPAPAVCProperty@@@Z PROC ; CPropertyManager::Register, COMDAT
; _this$ = ecx

; 136  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Register@CPropertyManager@@QAE_NPBDPAPAVCProperty@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 78 01 00
	00		 sub	 esp, 376		; 00000178H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b f9		 mov	 edi, ecx
  00030	8b 45 0c	 mov	 eax, DWORD PTR _ppProperty$[ebp]

; 137  : 	CMappedFile file;

  00033	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  00039	8b 5d 08	 mov	 ebx, DWORD PTR _c_pszFileName$[ebp]
  0003c	89 9d 98 fe ff
	ff		 mov	 DWORD PTR _c_pszFileName$GSCopy$1$[ebp], ebx
  00042	89 85 94 fe ff
	ff		 mov	 DWORD PTR _ppProperty$GSCopy$1$[ebp], eax
  00048	e8 00 00 00 00	 call	 ??0CMappedFile@@QAE@XZ	; CMappedFile::CMappedFile

; 138  : 	LPCVOID		c_pvData;
; 139  : 
; 140  : 	if (!CEterPackManager::Instance().Get(file, c_pszFileName, &c_pvData))

  0004d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A ; CSingleton<CEterPackManager>::ms_singleton
  00053	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _c_pvData$[ebp]
  00059	50		 push	 eax
  0005a	53		 push	 ebx
  0005b	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR _file$[ebp]
  00061	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ?Get@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z ; CEterPackManager::Get
  0006e	84 c0		 test	 al, al
  00070	74 5e		 je	 SHORT $LN19@Register

; 141  : 		return false;
; 142  : 
; 143  : 	CProperty * pProperty = new CProperty(c_pszFileName);

  00072	6a 40		 push	 64			; 00000040H
  00074	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00079	83 c4 04	 add	 esp, 4
  0007c	89 85 a4 fe ff
	ff		 mov	 DWORD PTR $T7[ebp], eax
  00082	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00086	85 c0		 test	 eax, eax
  00088	74 0c		 je	 SHORT $LN8@Register
  0008a	53		 push	 ebx
  0008b	8b c8		 mov	 ecx, eax
  0008d	e8 00 00 00 00	 call	 ??0CProperty@@QAE@PBD@Z	; CProperty::CProperty
  00092	8b f0		 mov	 esi, eax
  00094	eb 02		 jmp	 SHORT $LN9@Register
$LN8@Register:
  00096	33 f6		 xor	 esi, esi
$LN9@Register:

; 144  : 
; 145  : 	if (!pProperty->ReadFromMemory(c_pvData, file.Size(), c_pszFileName))

  00098	53		 push	 ebx
  00099	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  0009f	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000a3	e8 00 00 00 00	 call	 ?Size@CMappedFile@@QAEKXZ ; CMappedFile::Size
  000a8	50		 push	 eax
  000a9	ff b5 9c fe ff
	ff		 push	 DWORD PTR _c_pvData$[ebp]
  000af	8b ce		 mov	 ecx, esi
  000b1	e8 00 00 00 00	 call	 ?ReadFromMemory@CProperty@@QAE_NPBXHPBD@Z ; CProperty::ReadFromMemory
  000b6	84 c0		 test	 al, al
  000b8	75 43		 jne	 SHORT $LN3@Register

; 146  : 	{
; 147  : 		delete pProperty;

  000ba	85 f6		 test	 esi, esi
  000bc	74 12		 je	 SHORT $LN19@Register
  000be	8b ce		 mov	 ecx, esi
  000c0	e8 00 00 00 00	 call	 ??1CProperty@@QAE@XZ	; CProperty::~CProperty
  000c5	6a 40		 push	 64			; 00000040H
  000c7	56		 push	 esi
  000c8	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000cd	83 c4 08	 add	 esp, 8
$LN19@Register:
  000d0	32 db		 xor	 bl, bl
$LN17@Register:

; 169  : 
; 170  : 	return true;

  000d2	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  000d8	e8 00 00 00 00	 call	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
  000dd	8a c3		 mov	 al, bl

; 171  : }

  000df	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e9	59		 pop	 ecx
  000ea	5f		 pop	 edi
  000eb	5e		 pop	 esi
  000ec	5b		 pop	 ebx
  000ed	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f0	33 cd		 xor	 ecx, ebp
  000f2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f7	8b e5		 mov	 esp, ebp
  000f9	5d		 pop	 ebp
  000fa	c2 08 00	 ret	 8
$LN3@Register:

; 148  : 		return false;
; 149  : 	}
; 150  : 
; 151  : 	DWORD dwCRC = pProperty->GetCRC();

  000fd	8b ce		 mov	 ecx, esi
  000ff	e8 00 00 00 00	 call	 ?GetCRC@CProperty@@QAEKXZ ; CProperty::GetCRC
  00104	89 85 a8 fe ff
	ff		 mov	 DWORD PTR _dwCRC$[ebp], eax

; 152  : 
; 153  : 	TPropertyCRCMap::iterator itor = m_PropertyByCRCMap.find(dwCRC);

  0010a	8d 5f 08	 lea	 ebx, DWORD PTR [edi+8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0010d	8d 85 a8 fe ff
	ff		 lea	 eax, DWORD PTR _dwCRC$[ebp]
  00113	8b cb		 mov	 ecx, ebx
  00115	50		 push	 eax
  00116	8d 85 88 fe ff
	ff		 lea	 eax, DWORD PTR __Loc$3[ebp]
  0011c	50		 push	 eax
  0011d	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCProperty@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCProperty@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CProperty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CProperty *> >,0> >::_Find_lower_bound<unsigned long>

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00122	8b bd 90 fe ff
	ff		 mov	 edi, DWORD PTR __Loc$3[ebp+8]
  00128	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR _dwCRC$[ebp]
  0012e	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00132	75 48		 jne	 SHORT $LN25@Register
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00134	3b 4f 10	 cmp	 ecx, DWORD PTR [edi+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00137	72 43		 jb	 SHORT $LN25@Register

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00139	8b 03		 mov	 eax, DWORD PTR [ebx]
  0013b	3b c7		 cmp	 eax, edi
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp

; 155  : 	if (m_PropertyByCRCMap.end() != itor)

  0013d	74 41		 je	 SHORT $LN202@Register

; 156  : 	{
; 157  : 		Tracef("Property already registered, replace %s to %s\n",

  0013f	ff b5 98 fe ff
	ff		 push	 DWORD PTR _c_pszFileName$GSCopy$1$[ebp]
  00145	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00148	e8 00 00 00 00	 call	 ?GetFileName@CProperty@@QAEPBDXZ ; CProperty::GetFileName
  0014d	50		 push	 eax
  0014e	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@KFNNCDLJ@Property?5already?5registered?0?5re@
  00153	e8 00 00 00 00	 call	 ?Tracef@@YAXPBDZZ	; Tracef

; 158  : 				itor->second->GetFileName(),
; 159  : 				c_pszFileName);
; 160  : 
; 161  : 		delete itor->second;

  00158	8b 5f 14	 mov	 ebx, DWORD PTR [edi+20]
  0015b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0015e	85 db		 test	 ebx, ebx
  00160	74 12		 je	 SHORT $LN80@Register
  00162	8b cb		 mov	 ecx, ebx
  00164	e8 00 00 00 00	 call	 ??1CProperty@@QAE@XZ	; CProperty::~CProperty
  00169	6a 40		 push	 64			; 00000040H
  0016b	53		 push	 ebx
  0016c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00171	83 c4 08	 add	 esp, 8
$LN80@Register:

; 162  : 		itor->second = pProperty;

  00174	89 77 14	 mov	 DWORD PTR [edi+20], esi

; 163  : 	}

  00177	e9 9c 00 00 00	 jmp	 $LN184@Register
$LN25@Register:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1379 :         return _Get_scary()->_Myhead;

  0017c	8b 3b		 mov	 edi, DWORD PTR [ebx]
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp

; 155  : 	if (m_PropertyByCRCMap.end() != itor)

  0017e	eb 02		 jmp	 SHORT $LN4@Register
$LN202@Register:
  00180	8b f8		 mov	 edi, eax
$LN4@Register:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1007 :             _Loc                = _Find_lower_bound(_Keyval);

  00182	8d 85 a0 fe ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00188	89 8d a0 fe ff
	ff		 mov	 DWORD PTR $T5[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1007 :             _Loc                = _Find_lower_bound(_Keyval);

  0018e	50		 push	 eax
  0018f	8d 85 7c fe ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00195	89 b5 a4 fe ff
	ff		 mov	 DWORD PTR $T5[ebp+4], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1007 :             _Loc                = _Find_lower_bound(_Keyval);

  0019b	50		 push	 eax
  0019c	8b cb		 mov	 ecx, ebx
  0019e	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCProperty@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCProperty@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CProperty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CProperty *> >,0> >::_Find_lower_bound<unsigned long>
  001a3	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001a6	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  001aa	66 0f d6 85 88
	fe ff ff	 movq	 QWORD PTR __Loc$4[ebp], xmm0

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  001b2	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001b6	75 0b		 jne	 SHORT $LN103@Register
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  001b8	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _dwCRC$[ebp]
  001be	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  001c1	73 55		 jae	 SHORT $LN184@Register
$LN103@Register:

; 1638 :         if (max_size() == _Get_scary()->_Mysize) {

  001c3	81 7b 04 aa aa
	aa 0a		 cmp	 DWORD PTR [ebx+4], 178956970 ; 0aaaaaaaH
  001ca	74 5f		 je	 SHORT $LN207@Register
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1156 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  001cc	89 9d a0 fe ff
	ff		 mov	 DWORD PTR $T6[ebp], ebx

; 136  :         return ::operator new(_Bytes);

  001d2	6a 18		 push	 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 798  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  001d4	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1163 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  001d8	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T6[ebp+4], 0

; 136  :         return ::operator new(_Bytes);

  001e2	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 820  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  001e7	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR _dwCRC$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  001ed	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 820  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  001f0	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 1032 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  001f3	8b cb		 mov	 ecx, ebx
  001f5	50		 push	 eax
  001f6	ff b5 8c fe ff
	ff		 push	 DWORD PTR __Loc$4[ebp+4]

; 820  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  001fc	89 70 14	 mov	 DWORD PTR [eax+20], esi

; 1032 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  001ff	ff b5 88 fe ff
	ff		 push	 DWORD PTR __Loc$4[ebp]

; 821  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  00205	89 38		 mov	 DWORD PTR [eax], edi

; 822  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  00207	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 823  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  0020a	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 824  :         this->_Ptr->_Color = _Red;

  0020d	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0

; 1032 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00213	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCProperty@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CProperty *> > >::_Insert_node
$LN184@Register:
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp

; 167  : 	if (ppProperty)

  00218	8b 85 94 fe ff
	ff		 mov	 eax, DWORD PTR _ppProperty$GSCopy$1$[ebp]
  0021e	85 c0		 test	 eax, eax
  00220	74 02		 je	 SHORT $LN6@Register

; 168  : 		*ppProperty = pProperty;

  00222	89 30		 mov	 DWORD PTR [eax], esi
$LN6@Register:

; 169  : 
; 170  : 	return true;

  00224	b3 01		 mov	 bl, 1
  00226	e9 a7 fe ff ff	 jmp	 $LN17@Register
$LN207@Register:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1639 :             _Throw_tree_length_error();

  0022b	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN205@Register:
  00230	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Register@CPropertyManager@@QAE_NPBDPAPAVCProperty@@@Z$0:
  00000	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
__unwindfunclet$?Register@CPropertyManager@@QAE_NPBDPAPAVCProperty@@@Z$1:
  0000b	6a 40		 push	 64			; 00000040H
  0000d	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR $T7[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
  0001c	c3		 ret	 0
__unwindfunclet$?Register@CPropertyManager@@QAE_NPBDPAPAVCProperty@@@Z$4:
  0001d	8d 8d a0 fe ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  00023	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CProperty *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CProperty *>,void *> > >
  00028	cc		 int	 3
  00029	cc		 int	 3
  0002a	cc		 int	 3
  0002b	cc		 int	 3
  0002c	cc		 int	 3
__ehhandler$?Register@CPropertyManager@@QAE_NPBDPAPAVCProperty@@@Z:
  0002d	90		 npad	 1
  0002e	90		 npad	 1
  0002f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00033	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00036	8b 8a 78 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-392]
  0003c	33 c8		 xor	 ecx, eax
  0003e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00043	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00046	33 c8		 xor	 ecx, eax
  00048	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Register@CPropertyManager@@QAE_NPBDPAPAVCProperty@@@Z
  00052	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Register@CPropertyManager@@QAE_NPBDPAPAVCProperty@@@Z ENDP ; CPropertyManager::Register
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp
;	COMDAT ?Initialize@CPropertyManager@@QAE_NPBD@Z
_TEXT	SEGMENT
_c_pszPackFileName$ = 8					; size = 4
?Initialize@CPropertyManager@@QAE_NPBD@Z PROC		; CPropertyManager::Initialize, COMDAT
; _this$ = ecx

; 17   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 18   : 	if (c_pszPackFileName)

  00005	8b 75 08	 mov	 esi, DWORD PTR _c_pszPackFileName$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	85 f6		 test	 esi, esi
  0000d	0f 84 8c 00 00
	00		 je	 $LN4@Initialize

; 19   : 	{
; 20   : 		if (!m_pack.Create(m_fileDict, c_pszPackFileName, "", true))

  00013	6a 00		 push	 0
  00015	6a 01		 push	 1
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0001c	56		 push	 esi
  0001d	8d 83 04 14 00
	00		 lea	 eax, DWORD PTR [ebx+5124]
  00023	50		 push	 eax
  00024	8d 4b 18	 lea	 ecx, DWORD PTR [ebx+24]
  00027	e8 00 00 00 00	 call	 ?Create@CEterPack@@QAE_NAAVCEterFileDict@@PBD1_NPBE@Z ; CEterPack::Create
  0002c	84 c0		 test	 al, al
  0002e	75 17		 jne	 SHORT $LN6@Initialize

; 21   : 		{
; 22   : 			LogBoxf("Cannot open property pack file (filename %s)", c_pszPackFileName);

  00030	56		 push	 esi
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@PCLFHBKL@Cannot?5open?5property?5pack?5file?5@
  00036	e8 00 00 00 00	 call	 ?LogBoxf@@YAXPBDZZ	; LogBoxf
  0003b	83 c4 08	 add	 esp, 8

; 23   : 			return false;

  0003e	32 c0		 xor	 al, al
  00040	5f		 pop	 edi

; 56   : 	}
; 57   : 
; 58   : 	return true;
; 59   : }

  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN6@Initialize:

; 24   : 		}
; 25   : 
; 26   : 		m_isFileMode = false;
; 27   : 
; 28   : 		TDataPositionMap & indexMap = m_pack.GetIndexMap();

  00047	8d 4b 18	 lea	 ecx, DWORD PTR [ebx+24]
  0004a	c6 43 04 00	 mov	 BYTE PTR [ebx+4], 0
  0004e	e8 00 00 00 00	 call	 ?GetIndexMap@CEterPack@@QAEAAV?$unordered_map@KPAUSEterPackIndex@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKPAUSEterPackIndex@@@std@@@5@@unordered@boost@@XZ ; CEterPack::GetIndexMap
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  00053	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00057	74 4a		 je	 SHORT $LN5@Initialize

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00059	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  0005c	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  0005f	8b 34 8e	 mov	 esi, DWORD PTR [esi+ecx*4]

; 2368 :         iterator() BOOST_NOEXCEPT : node_() {}

  00062	85 f6		 test	 esi, esi
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp

; 36   : 		while (indexMap.end() != itor)

  00064	74 3d		 je	 SHORT $LN5@Initialize
$LL2@Initialize:

; 37   : 		{
; 38   : 			TEterPackIndex * pIndex = itor->second;

  00066	8b 7e 0c	 mov	 edi, DWORD PTR [esi+12]
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2381 :           node_ = static_cast<node_pointer>(node_->next_);

  00069	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp

; 41   : 			if (!stricmp("property/reserve", pIndex->filename))

  0006b	83 c7 04	 add	 edi, 4
  0006e	57		 push	 edi
  0006f	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FGKGEGON@property?1reserve@
  00074	e8 00 00 00 00	 call	 __stricmp
  00079	83 c4 08	 add	 esp, 8
  0007c	8b cb		 mov	 ecx, ebx
  0007e	85 c0		 test	 eax, eax
  00080	75 08		 jne	 SHORT $LN7@Initialize

; 42   : 			{
; 43   : 				LoadReservedCRC(pIndex->filename);

  00082	57		 push	 edi
  00083	e8 00 00 00 00	 call	 ?LoadReservedCRC@CPropertyManager@@QAE_NPBD@Z ; CPropertyManager::LoadReservedCRC

; 44   : 				continue;

  00088	eb 08		 jmp	 SHORT $LN40@Initialize
$LN7@Initialize:

; 45   : 			}
; 46   : 
; 47   : 			if (!Register(pIndex->filename))

  0008a	6a 00		 push	 0
  0008c	57		 push	 edi
  0008d	e8 00 00 00 00	 call	 ?Register@CPropertyManager@@QAE_NPBDPAPAVCProperty@@@Z ; CPropertyManager::Register
$LN40@Initialize:
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2399 :           return node_ != x.node_;

  00092	85 f6		 test	 esi, esi
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp

; 36   : 		while (indexMap.end() != itor)

  00094	75 d0		 jne	 SHORT $LL2@Initialize

; 56   : 	}
; 57   : 
; 58   : 	return true;
; 59   : }

  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	b0 01		 mov	 al, 1
  0009a	5b		 pop	 ebx
  0009b	5d		 pop	 ebp
  0009c	c2 04 00	 ret	 4
$LN4@Initialize:

; 48   : 				continue;
; 49   : 
; 50   : 			++i;
; 51   : 		}
; 52   : 	}
; 53   : 	else
; 54   : 	{
; 55   : 		m_isFileMode = true;

  0009f	c6 43 04 01	 mov	 BYTE PTR [ebx+4], 1
$LN5@Initialize:
  000a3	5f		 pop	 edi

; 56   : 	}
; 57   : 
; 58   : 	return true;
; 59   : }

  000a4	5e		 pop	 esi
  000a5	b0 01		 mov	 al, 1
  000a7	5b		 pop	 ebx
  000a8	5d		 pop	 ebp
  000a9	c2 04 00	 ret	 4
?Initialize@CPropertyManager@@QAE_NPBD@Z ENDP		; CPropertyManager::Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp
;	COMDAT ?GetUniqueCRC@CPropertyManager@@QAEKPBD@Z
_TEXT	SEGMENT
__Loc$2 = -72						; size = 12
__Loc$3 = -60						; size = 12
_dwCRC$4 = -48						; size = 4
_szAdd$5 = -44						; size = 2
_stTmp$ = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szSeed$ = 8						; size = 4
?GetUniqueCRC@CPropertyManager@@QAEKPBD@Z PROC		; CPropertyManager::GetUniqueCRC, COMDAT
; _this$ = ecx

; 118  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetUniqueCRC@CPropertyManager@@QAEKPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f1		 mov	 esi, ecx
  0002d	8b 45 08	 mov	 eax, DWORD PTR _c_szSeed$[ebp]

; 119  : 	std::string stTmp = c_szSeed;

  00030	8d 4d d8	 lea	 ecx, DWORD PTR _stTmp$[ebp]
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00039	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00040	8d 5e 10	 lea	 ebx, DWORD PTR [esi+16]
  00043	8d 7e 08	 lea	 edi, DWORD PTR [esi+8]
$LL2@GetUniqueC:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00046	83 7d ec 0f	 cmp	 DWORD PTR _stTmp$[ebp+20], 15 ; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  0004a	8d 45 d8	 lea	 eax, DWORD PTR _stTmp$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp

; 123  : 		DWORD dwCRC = GetCRC32(stTmp.c_str(), stTmp.length());

  0004d	ff 75 e8	 push	 DWORD PTR _stTmp$[ebp+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  00050	0f 47 45 d8	 cmova	 eax, DWORD PTR _stTmp$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp

; 123  : 		DWORD dwCRC = GetCRC32(stTmp.c_str(), stTmp.length());

  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ?GetCRC32@@YAKPBDI@Z	; GetCRC32
  0005a	83 c4 08	 add	 esp, 8
  0005d	8b f0		 mov	 esi, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0005f	8d 45 d0	 lea	 eax, DWORD PTR _dwCRC$4[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp

; 123  : 		DWORD dwCRC = GetCRC32(stTmp.c_str(), stTmp.length());

  00062	89 75 d0	 mov	 DWORD PTR _dwCRC$4[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00065	8b cb		 mov	 ecx, ebx
  00067	50		 push	 eax
  00068	8d 45 c4	 lea	 eax, DWORD PTR __Loc$3[ebp]
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tset_traits@KU?$less@K@std@@V?$allocator@K@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@KPAX@std@@@1@ABK@Z ; std::_Tree<std::_Tset_traits<unsigned long,std::less<unsigned long>,std::allocator<unsigned long>,0> >::_Find_lower_bound<unsigned long>

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00071	8b 45 cc	 mov	 eax, DWORD PTR __Loc$3[ebp+8]
  00074	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00078	75 09		 jne	 SHORT $LN173@GetUniqueC
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  0007a	3b 70 10	 cmp	 esi, DWORD PTR [eax+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0007d	72 04		 jb	 SHORT $LN173@GetUniqueC

; 232  :         return this->_Ptr == _Right._Ptr;

  0007f	3b 03		 cmp	 eax, DWORD PTR [ebx]
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp

; 125  : 		if (m_ReservedCRCSet.find(dwCRC) == m_ReservedCRCSet.end() &&

  00081	75 21		 jne	 SHORT $LN4@GetUniqueC
$LN173@GetUniqueC:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00083	8d 45 d0	 lea	 eax, DWORD PTR _dwCRC$4[ebp]
  00086	8b cf		 mov	 ecx, edi
  00088	50		 push	 eax
  00089	8d 45 b8	 lea	 eax, DWORD PTR __Loc$2[ebp]
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCProperty@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCProperty@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CProperty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CProperty *> >,0> >::_Find_lower_bound<unsigned long>

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00092	8b 45 c0	 mov	 eax, DWORD PTR __Loc$2[ebp+8]
  00095	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00099	75 50		 jne	 SHORT $LN167@GetUniqueC
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  0009b	3b 70 10	 cmp	 esi, DWORD PTR [eax+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0009e	72 4b		 jb	 SHORT $LN167@GetUniqueC

; 232  :         return this->_Ptr == _Right._Ptr;

  000a0	3b 07		 cmp	 eax, DWORD PTR [edi]
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp

; 125  : 		if (m_ReservedCRCSet.find(dwCRC) == m_ReservedCRCSet.end() &&

  000a2	74 47		 je	 SHORT $LN167@GetUniqueC
$LN4@GetUniqueC:

; 130  : 		_snprintf(szAdd, sizeof(szAdd), "%d", random() % 10);

  000a4	e8 00 00 00 00	 call	 ?random@@YAKXZ		; random
  000a9	33 d2		 xor	 edx, edx
  000ab	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  000b0	f7 f1		 div	 ecx
  000b2	8d 45 d4	 lea	 eax, DWORD PTR _szAdd$5[ebp]
  000b5	52		 push	 edx
  000b6	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  000bb	6a 02		 push	 2
  000bd	50		 push	 eax
  000be	e8 00 00 00 00	 call	 __snprintf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  000c3	8d 45 d4	 lea	 eax, DWORD PTR _szAdd$5[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp

; 130  : 		_snprintf(szAdd, sizeof(szAdd), "%d", random() % 10);

  000c6	83 c4 10	 add	 esp, 16			; 00000010H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  000c9	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  000cc	0f 1f 40 00	 npad	 4
$LL174@GetUniqueC:
  000d0	8a 08		 mov	 cl, BYTE PTR [eax]
  000d2	40		 inc	 eax
  000d3	84 c9		 test	 cl, cl
  000d5	75 f9		 jne	 SHORT $LL174@GetUniqueC
  000d7	2b c2		 sub	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000d9	8d 4d d8	 lea	 ecx, DWORD PTR _stTmp$[ebp]
  000dc	50		 push	 eax
  000dd	8d 45 d4	 lea	 eax, DWORD PTR _szAdd$5[ebp]
  000e0	50		 push	 eax
  000e1	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp

; 132  : 	}

  000e6	e9 5b ff ff ff	 jmp	 $LL2@GetUniqueC
$LN167@GetUniqueC:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  000eb	8b 4d ec	 mov	 ecx, DWORD PTR _stTmp$[ebp+20]
  000ee	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  000f1	76 28		 jbe	 SHORT $LN103@GetUniqueC
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000f3	8b 55 d8	 mov	 edx, DWORD PTR _stTmp$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  000f6	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000f7	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000f9	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000ff	72 10		 jb	 SHORT $LN114@GetUniqueC

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00101	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00104	83 c1 23	 add	 ecx, 35			; 00000023H
  00107	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00109	83 c0 fc	 add	 eax, -4			; fffffffcH
  0010c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0010f	77 2a		 ja	 SHORT $LN178@GetUniqueC
$LN114@GetUniqueC:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00111	51		 push	 ecx
  00112	52		 push	 edx
  00113	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00118	83 c4 08	 add	 esp, 8
$LN103@GetUniqueC:
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp

; 127  : 			return dwCRC;

  0011b	8b c6		 mov	 eax, esi

; 133  : }

  0011d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00120	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00127	59		 pop	 ecx
  00128	5f		 pop	 edi
  00129	5e		 pop	 esi
  0012a	5b		 pop	 ebx
  0012b	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0012e	33 cd		 xor	 ecx, ebp
  00130	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00135	8b e5		 mov	 esp, ebp
  00137	5d		 pop	 ebp
  00138	c2 04 00	 ret	 4
$LN178@GetUniqueC:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0013b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN176@GetUniqueC:
  00140	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetUniqueCRC@CPropertyManager@@QAEKPBD@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _stTmp$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?GetUniqueCRC@CPropertyManager@@QAEKPBD@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a b4	 mov	 ecx, DWORD PTR [edx-76]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetUniqueCRC@CPropertyManager@@QAEKPBD@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetUniqueCRC@CPropertyManager@@QAEKPBD@Z ENDP		; CPropertyManager::GetUniqueCRC
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp
;	COMDAT ?ReserveCRC@CPropertyManager@@QAEXK@Z
_TEXT	SEGMENT
__Loc$2 = -36						; size = 12
$T3 = -24						; size = 12
$T4 = -20						; size = 8
__$EHRec$ = -12						; size = 12
_dwCRC$ = 8						; size = 4
?ReserveCRC@CPropertyManager@@QAEXK@Z PROC		; CPropertyManager::ReserveCRC, COMDAT
; _this$ = ecx

; 113  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ReserveCRC@CPropertyManager@@QAEXK@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1007 :             _Loc                = _Find_lower_bound(_Keyval);

  00028	8d 45 08	 lea	 eax, DWORD PTR _dwCRC$[ebp]
  0002b	50		 push	 eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp

; 114  : 	m_ReservedCRCSet.insert(dwCRC);

  0002c	8d 79 10	 lea	 edi, DWORD PTR [ecx+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1007 :             _Loc                = _Find_lower_bound(_Keyval);

  0002f	8d 45 e8	 lea	 eax, DWORD PTR $T3[ebp]
  00032	8b cf		 mov	 ecx, edi
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tset_traits@KU?$less@K@std@@V?$allocator@K@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@KPAX@std@@@1@ABK@Z ; std::_Tree<std::_Tset_traits<unsigned long,std::less<unsigned long>,std::allocator<unsigned long>,0> >::_Find_lower_bound<unsigned long>

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0003a	8b 5d 08	 mov	 ebx, DWORD PTR _dwCRC$[ebp]

; 1007 :             _Loc                = _Find_lower_bound(_Keyval);

  0003d	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00041	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00044	66 0f d6 45 dc	 movq	 QWORD PTR __Loc$2[ebp], xmm0

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00049	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004d	75 05		 jne	 SHORT $LN11@ReserveCRC
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  0004f	3b 58 10	 cmp	 ebx, DWORD PTR [eax+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00052	73 45		 jae	 SHORT $LN92@ReserveCRC
$LN11@ReserveCRC:

; 1638 :         if (max_size() == _Get_scary()->_Mysize) {

  00054	81 7f 04 cc cc
	cc 0c		 cmp	 DWORD PTR [edi+4], 214748364 ; 0cccccccH
  0005b	74 50		 je	 SHORT $LN109@ReserveCRC

; 1013 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  0005d	8b 37		 mov	 esi, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1156 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  0005f	89 7d ec	 mov	 DWORD PTR $T4[ebp], edi

; 136  :         return ::operator new(_Bytes);

  00062	6a 14		 push	 20			; 00000014H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 798  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00064	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1163 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0006b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+4], 0

; 136  :         return ::operator new(_Bytes);

  00072	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00077	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1032 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0007a	8b cf		 mov	 ecx, edi

; 820  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  0007c	89 58 10	 mov	 DWORD PTR [eax+16], ebx

; 1032 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0007f	50		 push	 eax
  00080	ff 75 e0	 push	 DWORD PTR __Loc$2[ebp+4]

; 821  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  00083	89 30		 mov	 DWORD PTR [eax], esi

; 1032 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00085	ff 75 dc	 push	 DWORD PTR __Loc$2[ebp]

; 822  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  00088	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 823  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  0008b	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 824  :         this->_Ptr->_Color = _Red;

  0008e	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0

; 1032 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00094	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@K@std@@@std@@QAEPAU?$_Tree_node@KPAX@2@U?$_Tree_id@PAU?$_Tree_node@KPAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<unsigned long> >::_Insert_node
$LN92@ReserveCRC:
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp

; 115  : }

  00099	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a3	59		 pop	 ecx
  000a4	5f		 pop	 edi
  000a5	5e		 pop	 esi
  000a6	5b		 pop	 ebx
  000a7	8b e5		 mov	 esp, ebp
  000a9	5d		 pop	 ebp
  000aa	c2 04 00	 ret	 4
$LN109@ReserveCRC:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1639 :             _Throw_tree_length_error();

  000ad	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN107@ReserveCRC:
  000b2	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ReserveCRC@CPropertyManager@@QAEXK@Z$2:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR $T4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@KPAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<unsigned long,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<unsigned long,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?ReserveCRC@CPropertyManager@@QAEXK@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ReserveCRC@CPropertyManager@@QAEXK@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ReserveCRC@CPropertyManager@@QAEXK@Z ENDP		; CPropertyManager::ReserveCRC
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp
;	COMDAT ?LoadReservedCRC@CPropertyManager@@QAE_NPBD@Z
_TEXT	SEGMENT
_textFileLoader$ = -360					; size = 16
_c_pvData$ = -344					; size = 4
_file$ = -340						; size = 324
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_pszFileName$ = 8					; size = 4
?LoadReservedCRC@CPropertyManager@@QAE_NPBD@Z PROC	; CPropertyManager::LoadReservedCRC, COMDAT
; _this$ = ecx

; 89   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadReservedCRC@CPropertyManager@@QAE_NPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 5c 01 00
	00		 sub	 esp, 348		; 0000015cH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b f9		 mov	 edi, ecx
  00030	8b 75 08	 mov	 esi, DWORD PTR _c_pszFileName$[ebp]

; 90   : 	CMappedFile file;

  00033	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  00039	e8 00 00 00 00	 call	 ??0CMappedFile@@QAE@XZ	; CMappedFile::CMappedFile

; 91   : 	LPCVOID c_pvData;
; 92   : 
; 93   : 	if (!CEterPackManager::Instance().Get(file, c_pszFileName, &c_pvData))

  0003e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A ; CSingleton<CEterPackManager>::ms_singleton
  00044	8d 85 a8 fe ff
	ff		 lea	 eax, DWORD PTR _c_pvData$[ebp]
  0004a	50		 push	 eax
  0004b	56		 push	 esi
  0004c	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR _file$[ebp]
  00052	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ?Get@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z ; CEterPackManager::Get
  0005f	84 c0		 test	 al, al
  00061	75 07		 jne	 SHORT $LN5@LoadReserv
  00063	32 db		 xor	 bl, bl
  00065	e9 91 00 00 00	 jmp	 $LN11@LoadReserv
$LN5@LoadReserv:

; 94   : 		return false;
; 95   : 
; 96   : 	CMemoryTextFileLoader textFileLoader;

  0006a	8d 8d 98 fe ff
	ff		 lea	 ecx, DWORD PTR _textFileLoader$[ebp]
  00070	e8 00 00 00 00	 call	 ??0CMemoryTextFileLoader@@QAE@XZ ; CMemoryTextFileLoader::CMemoryTextFileLoader

; 97   : 	textFileLoader.Bind(file.Size(), c_pvData);

  00075	ff b5 a8 fe ff
	ff		 push	 DWORD PTR _c_pvData$[ebp]
  0007b	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  00081	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00085	e8 00 00 00 00	 call	 ?Size@CMappedFile@@QAEKXZ ; CMappedFile::Size
  0008a	50		 push	 eax
  0008b	8d 8d 98 fe ff
	ff		 lea	 ecx, DWORD PTR _textFileLoader$[ebp]
  00091	e8 00 00 00 00	 call	 ?Bind@CMemoryTextFileLoader@@QAEXHPBX@Z ; CMemoryTextFileLoader::Bind

; 98   : 
; 99   : 	for (DWORD i = 0; i < textFileLoader.GetLineCount(); ++i)

  00096	8d 8d 98 fe ff
	ff		 lea	 ecx, DWORD PTR _textFileLoader$[ebp]
  0009c	33 f6		 xor	 esi, esi
  0009e	e8 00 00 00 00	 call	 ?GetLineCount@CMemoryTextFileLoader@@QAEKXZ ; CMemoryTextFileLoader::GetLineCount
  000a3	85 c0		 test	 eax, eax
  000a5	74 47		 je	 SHORT $LN3@LoadReserv
  000a7	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL4@LoadReserv:

; 100  : 	{
; 101  : 		const char * pszLine = textFileLoader.GetLineString(i).c_str();

  000b0	56		 push	 esi
  000b1	8d 8d 98 fe ff
	ff		 lea	 ecx, DWORD PTR _textFileLoader$[ebp]
  000b7	e8 00 00 00 00	 call	 ?GetLineString@CMemoryTextFileLoader@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@Z ; CMemoryTextFileLoader::GetLineString
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  000bc	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  000c0	76 02		 jbe	 SHORT $LN16@LoadReserv

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  000c2	8b 00		 mov	 eax, DWORD PTR [eax]
$LN16@LoadReserv:
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp

; 103  : 		if (!pszLine || !*pszLine)

  000c4	85 c0		 test	 eax, eax
  000c6	74 16		 je	 SHORT $LN2@LoadReserv
  000c8	80 38 00	 cmp	 BYTE PTR [eax], 0
  000cb	74 11		 je	 SHORT $LN2@LoadReserv

; 104  : 			continue;
; 105  : 
; 106  : 		ReserveCRC(atoi(pszLine));

  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 __atoi64
  000d3	83 c4 04	 add	 esp, 4
  000d6	8b cf		 mov	 ecx, edi
  000d8	50		 push	 eax
  000d9	e8 00 00 00 00	 call	 ?ReserveCRC@CPropertyManager@@QAEXK@Z ; CPropertyManager::ReserveCRC
$LN2@LoadReserv:

; 98   : 
; 99   : 	for (DWORD i = 0; i < textFileLoader.GetLineCount(); ++i)

  000de	8d 8d 98 fe ff
	ff		 lea	 ecx, DWORD PTR _textFileLoader$[ebp]
  000e4	46		 inc	 esi
  000e5	e8 00 00 00 00	 call	 ?GetLineCount@CMemoryTextFileLoader@@QAEKXZ ; CMemoryTextFileLoader::GetLineCount
  000ea	3b f0		 cmp	 esi, eax
  000ec	72 c2		 jb	 SHORT $LL4@LoadReserv
$LN3@LoadReserv:

; 107  : 	}
; 108  : 
; 109  : 	return true;

  000ee	8d 8d 98 fe ff
	ff		 lea	 ecx, DWORD PTR _textFileLoader$[ebp]
  000f4	b3 01		 mov	 bl, 1
  000f6	e8 00 00 00 00	 call	 ??1CMemoryTextFileLoader@@UAE@XZ ; CMemoryTextFileLoader::~CMemoryTextFileLoader
$LN11@LoadReserv:
  000fb	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  00101	e8 00 00 00 00	 call	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
  00106	8a c3		 mov	 al, bl

; 110  : }

  00108	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0010b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00112	59		 pop	 ecx
  00113	5f		 pop	 edi
  00114	5e		 pop	 esi
  00115	5b		 pop	 ebx
  00116	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00119	33 cd		 xor	 ecx, ebp
  0011b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00120	8b e5		 mov	 esp, ebp
  00122	5d		 pop	 ebp
  00123	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadReservedCRC@CPropertyManager@@QAE_NPBD@Z$0:
  00000	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
__unwindfunclet$?LoadReservedCRC@CPropertyManager@@QAE_NPBD@Z$1:
  0000b	8d 8d 98 fe ff
	ff		 lea	 ecx, DWORD PTR _textFileLoader$[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1CMemoryTextFileLoader@@UAE@XZ ; CMemoryTextFileLoader::~CMemoryTextFileLoader
  00016	cc		 int	 3
  00017	cc		 int	 3
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
__ehhandler$?LoadReservedCRC@CPropertyManager@@QAE_NPBD@Z:
  0001b	90		 npad	 1
  0001c	90		 npad	 1
  0001d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00021	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00024	8b 8a 94 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-364]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00034	33 c8		 xor	 ecx, eax
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadReservedCRC@CPropertyManager@@QAE_NPBD@Z
  00040	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadReservedCRC@CPropertyManager@@QAE_NPBD@Z ENDP	; CPropertyManager::LoadReservedCRC
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp
;	COMDAT ?BuildPack@CPropertyManager@@QAE_NXZ
_TEXT	SEGMENT
tv407 = -624						; size = 4
_fdata$ = -620						; size = 320
$T2 = -300						; size = 24
_szSourceFileName$3 = -276				; size = 257
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?BuildPack@CPropertyManager@@QAE_NXZ PROC		; CPropertyManager::BuildPack, COMDAT
; _this$ = ecx

; 62   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?BuildPack@CPropertyManager@@QAE_NXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 64 02 00
	00		 sub	 esp, 612		; 00000264H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 63   : 	if (!m_pack.Create(m_fileDict, "property", ""))

  0002d	6a 00		 push	 0
  0002f	6a 01		 push	 1
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00036	8d 51 18	 lea	 edx, DWORD PTR [ecx+24]
  00039	8d 81 04 14 00
	00		 lea	 eax, DWORD PTR [ecx+5124]
  0003f	89 95 90 fd ff
	ff		 mov	 DWORD PTR tv407[ebp], edx
  00045	68 00 00 00 00	 push	 OFFSET ??_C@_08EMBNBNLN@property@
  0004a	50		 push	 eax
  0004b	8b ca		 mov	 ecx, edx
  0004d	e8 00 00 00 00	 call	 ?Create@CEterPack@@QAE_NAAVCEterFileDict@@PBD1_NPBE@Z ; CEterPack::Create
  00052	84 c0		 test	 al, al
  00054	0f 84 fb 00 00
	00		 je	 $LN108@BuildPack

; 64   : 		return false;
; 65   : 
; 66   : 	WIN32_FIND_DATA fdata;
; 67   : 	HANDLE hFind = FindFirstFile("property\\*", &fdata);

  0005a	8d 85 94 fd ff
	ff		 lea	 eax, DWORD PTR _fdata$[ebp]
  00060	50		 push	 eax
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_0L@DIKAOLMN@property?2?$CK@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindFirstFileA@8
  0006c	8b f0		 mov	 esi, eax

; 68   : 
; 69   : 	if (hFind == INVALID_HANDLE_VALUE)

  0006e	83 fe ff	 cmp	 esi, -1
  00071	0f 84 de 00 00
	00		 je	 $LN108@BuildPack
  00077	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__FindNextFileA@8
  0007d	0f 1f 00	 npad	 3
$LL4@BuildPack:

; 71   : 
; 72   : 	do
; 73   : 	{
; 74   : 		if (fdata.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)

  00080	f6 85 94 fd ff
	ff 10		 test	 BYTE PTR _fdata$[ebp], 16 ; 00000010H
  00087	0f 85 ab 00 00
	00		 jne	 $LN2@BuildPack

; 78   : 		_snprintf(szSourceFileName, sizeof(szSourceFileName), "property\\%s", fdata.cFileName);

  0008d	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _fdata$[ebp+44]
  00093	50		 push	 eax
  00094	68 00 00 00 00	 push	 OFFSET ??_C@_0M@OKKDHDOO@property?2?$CFs@
  00099	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _szSourceFileName$3[ebp]
  0009f	68 01 01 00 00	 push	 257			; 00000101H
  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 __snprintf
  000aa	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  000ad	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp+16], 0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000b7	0f 11 85 d4 fe
	ff ff		 movups	 XMMWORD PTR $T2[ebp], xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp

; 78   : 		_snprintf(szSourceFileName, sizeof(szSourceFileName), "property\\%s", fdata.cFileName);

  000be	83 c4 10	 add	 esp, 16			; 00000010H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 867  :             _My_data._Myres  = _Small_string_capacity;

  000c1	c7 85 e8 fe ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T2[ebp+20], 15 ; 0000000fH

; 868  : 
; 869  :             if constexpr (_Strat == _Construct_strategy::_From_char) {
; 870  :                 _Traits::assign(_My_data._Bx._Buf, _Count, _Arg);
; 871  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());
; 872  :             } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 873  :                 _Traits::copy(_My_data._Bx._Buf, _Arg, _Count);
; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  000cb	c6 85 d4 fe ff
	ff 00		 mov	 BYTE PTR $T2[ebp], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp

; 80   : 		m_pack.Put(fdata.cFileName, szSourceFileName,COMPRESSED_TYPE_NONE,"");

  000d2	8b 8d 90 fd ff
	ff		 mov	 ecx, DWORD PTR tv407[ebp]
  000d8	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  000de	50		 push	 eax
  000df	6a 00		 push	 0
  000e1	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _szSourceFileName$3[ebp]
  000e7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000ee	50		 push	 eax
  000ef	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _fdata$[ebp+44]
  000f5	50		 push	 eax
  000f6	e8 00 00 00 00	 call	 ?Put@CEterPack@@QAE_NPBD0EABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CEterPack::Put
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  000fb	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp

; 80   : 		m_pack.Put(fdata.cFileName, szSourceFileName,COMPRESSED_TYPE_NONE,"");

  00101	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00108	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0010b	76 2b		 jbe	 SHORT $LN2@BuildPack
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0010d	8b 95 d4 fe ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00113	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00114	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00116	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0011c	72 10		 jb	 SHORT $LN91@BuildPack

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0011e	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00121	83 c1 23	 add	 ecx, 35			; 00000023H
  00124	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00126	83 c0 fc	 add	 eax, -4			; fffffffcH
  00129	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0012c	77 44		 ja	 SHORT $LN88@BuildPack
$LN91@BuildPack:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0012e	51		 push	 ecx
  0012f	52		 push	 edx
  00130	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00135	83 c4 08	 add	 esp, 8
$LN2@BuildPack:
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp

; 82   : 	while (FindNextFile(hFind, &fdata));

  00138	8d 85 94 fd ff
	ff		 lea	 eax, DWORD PTR _fdata$[ebp]
  0013e	50		 push	 eax
  0013f	56		 push	 esi
  00140	ff d7		 call	 edi
  00142	85 c0		 test	 eax, eax
  00144	0f 85 36 ff ff
	ff		 jne	 $LL4@BuildPack

; 83   : 
; 84   : 	FindClose(hFind);

  0014a	56		 push	 esi
  0014b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindClose@4

; 85   : 	return true;

  00151	b0 01		 mov	 al, 1
  00153	eb 02		 jmp	 SHORT $LN1@BuildPack
$LN108@BuildPack:

; 70   : 		return false;

  00155	32 c0		 xor	 al, al
$LN1@BuildPack:

; 86   : }

  00157	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0015a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00161	59		 pop	 ecx
  00162	5f		 pop	 edi
  00163	5e		 pop	 esi
  00164	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00167	33 cd		 xor	 ecx, ebp
  00169	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0016e	8b e5		 mov	 esp, ebp
  00170	5d		 pop	 ebp
  00171	c3		 ret	 0
$LN88@BuildPack:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00172	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN112@BuildPack:
  00177	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?BuildPack@CPropertyManager@@QAE_NXZ$0:
  00000	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
__ehhandler$?BuildPack@CPropertyManager@@QAE_NXZ:
  00010	90		 npad	 1
  00011	90		 npad	 1
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 8a 90 fd ff
	ff		 mov	 ecx, DWORD PTR [edx-624]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?BuildPack@CPropertyManager@@QAE_NXZ
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?BuildPack@CPropertyManager@@QAE_NXZ ENDP		; CPropertyManager::BuildPack
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp
;	COMDAT ?Clear@CPropertyManager@@QAEXXZ
_TEXT	SEGMENT
_i$1 = -4						; size = 4
?Clear@CPropertyManager@@QAEXXZ PROC			; CPropertyManager::Clear, COMDAT
; _this$ = ecx

; 251  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1132 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00006	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp

; 252  : 	stl_wipe_second(m_PropertyByCRCMap);

  00009	8d 59 08	 lea	 ebx, DWORD PTR [ecx+8]
  0000c	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0000d	8b 06		 mov	 eax, DWORD PTR [esi]
  0000f	89 45 fc	 mov	 DWORD PTR _i$1[ebp], eax
  00012	3b c6		 cmp	 eax, esi
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h

; 145  : 	for (auto i = container.begin(); i != container.end(); ++i)

  00014	74 2a		 je	 SHORT $LN5@Clear
$LL6@Clear:

; 146  : 	{
; 147  : 		delete i->second;

  00016	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  00019	85 f6		 test	 esi, esi
  0001b	74 12		 je	 SHORT $LN4@Clear
  0001d	8b ce		 mov	 ecx, esi
  0001f	e8 00 00 00 00	 call	 ??1CProperty@@QAE@XZ	; CProperty::~CProperty
  00024	6a 40		 push	 64			; 00000040H
  00026	56		 push	 esi
  00027	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002c	83 c4 08	 add	 esp, 8
$LN4@Clear:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 198  :         _Mybase::operator++();

  0002f	8d 4d fc	 lea	 ecx, DWORD PTR _i$1[ebp]
  00032	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCProperty@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CProperty *> > >,std::_Iterator_base0>::operator++

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00037	8b 33		 mov	 esi, DWORD PTR [ebx]

; 232  :         return this->_Ptr == _Right._Ptr;

  00039	8b 45 fc	 mov	 eax, DWORD PTR _i$1[ebp]
  0003c	3b c6		 cmp	 eax, esi
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h

; 145  : 	for (auto i = container.begin(); i != container.end(); ++i)

  0003e	75 d6		 jne	 SHORT $LL6@Clear
$LN5@Clear:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1364 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  00040	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00043	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00047	75 27		 jne	 SHORT $LN105@Clear
  00049	0f 1f 80 00 00
	00 00		 npad	 7
$LL63@Clear:

; 759  :             _Erase_tree(_Al, _Rootnode->_Right);

  00050	ff 77 08	 push	 DWORD PTR [edi+8]
  00053	8b cb		 mov	 ecx, ebx
  00055	53		 push	 ebx
  00056	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCProperty@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCProperty@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CProperty *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CProperty *>,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0005b	8b c7		 mov	 eax, edi

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  0005d	8b 3f		 mov	 edi, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0005f	6a 18		 push	 24			; 00000018H
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00067	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0006a	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0006e	74 e0		 je	 SHORT $LL63@Clear
$LN105@Clear:

; 1368 :         _Scary->_Mysize = 0;

  00070	5f		 pop	 edi
  00071	89 76 04	 mov	 DWORD PTR [esi+4], esi
  00074	89 36		 mov	 DWORD PTR [esi], esi
  00076	89 76 08	 mov	 DWORD PTR [esi+8], esi
  00079	5e		 pop	 esi
  0007a	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0
  00081	5b		 pop	 ebx
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp

; 253  : }

  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c3		 ret	 0
?Clear@CPropertyManager@@QAEXXZ ENDP			; CPropertyManager::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp
;	COMDAT ??1CPropertyManager@@UAE@XZ
_TEXT	SEGMENT
??1CPropertyManager@@UAE@XZ PROC			; CPropertyManager::~CPropertyManager, COMDAT
; _this$ = ecx

; 12   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CPropertyManager@@6B@

; 13   : 	Clear();

  00009	e8 00 00 00 00	 call	 ?Clear@CPropertyManager@@QAEXXZ ; CPropertyManager::Clear
  0000e	8d 8e 04 14 00
	00		 lea	 ecx, DWORD PTR [esi+5124]
  00014	e8 00 00 00 00	 call	 ??1?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >::~unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >

; 14   : }

  00019	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  0001c	e8 00 00 00 00	 call	 ??1CEterPack@@UAE@XZ	; CEterPack::~CEterPack
  00021	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00024	e8 00 00 00 00	 call	 ??1?$_Tree@V?$_Tset_traits@KU?$less@K@std@@V?$allocator@K@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tset_traits<unsigned long,std::less<unsigned long>,std::allocator<unsigned long>,0> >::~_Tree<std::_Tset_traits<unsigned long,std::less<unsigned long>,std::allocator<unsigned long>,0> >
  00029	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0002c	e8 00 00 00 00	 call	 ??1?$_Tree@V?$_Tmap_traits@KPAVCProperty@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCProperty@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CProperty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CProperty *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CProperty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CProperty *> >,0> >
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h

; 19   : 	{

  00031	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CSingleton@VCPropertyManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00037	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCPropertyManager@@@@0PAVCPropertyManager@@A, 0 ; CSingleton<CPropertyManager>::ms_singleton
  00041	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp

; 14   : }

  00042	c3		 ret	 0
??1CPropertyManager@@UAE@XZ ENDP			; CPropertyManager::~CPropertyManager
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp
;	COMDAT ??0CPropertyManager@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
_this$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CPropertyManager@@QAE@XZ PROC			; CPropertyManager::CPropertyManager, COMDAT
; _this$ = ecx

; 8    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CPropertyManager@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f9		 mov	 edi, ecx
  00029	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h

; 15   : 		ms_singleton = (T*) ((int) this + offset);

  0002c	89 3d 00 00 00
	00		 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCPropertyManager@@@@0PAVCPropertyManager@@A, edi ; CSingleton<CPropertyManager>::ms_singleton
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp

; 8    : {

  00032	8d 77 08	 lea	 esi, DWORD PTR [edi+8]
  00035	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CPropertyManager@@6B@
  0003b	c6 47 04 01	 mov	 BYTE PTR [edi+4], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  0003f	6a 18		 push	 24			; 00000018H
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp

; 8    : {

  00041	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00048	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 450  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  0004b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00051	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00058	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 346  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  0005d	89 00		 mov	 DWORD PTR [eax], eax

; 347  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  0005f	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 348  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  00062	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 349  :         _Pnode->_Color = _Black;

  00065	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1947 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  0006b	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp

; 8    : {

  0006d	8d 77 10	 lea	 esi, DWORD PTR [edi+16]
  00070	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00074	6a 14		 push	 20			; 00000014H
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp

; 8    : {

  00076	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 450  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  00079	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0007f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00086	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0008b	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 346  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  0008e	89 00		 mov	 DWORD PTR [eax], eax

; 347  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  00090	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 348  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  00093	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 349  :         _Pnode->_Color = _Black;

  00096	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1947 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  0009c	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\PropertyManager.cpp

; 8    : {

  0009e	8d 4f 18	 lea	 ecx, DWORD PTR [edi+24]
  000a1	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000a5	e8 00 00 00 00	 call	 ??0CEterPack@@QAE@XZ	; CEterPack::CEterPack
  000aa	8d 8f 04 14 00
	00		 lea	 ecx, DWORD PTR [edi+5124]
  000b0	e8 00 00 00 00	 call	 ??0?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >::unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >

; 9    : }

  000b5	8b c7		 mov	 eax, edi
  000b7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ba	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c1	59		 pop	 ecx
  000c2	5f		 pop	 edi
  000c3	5e		 pop	 esi
  000c4	8b e5		 mov	 esp, ebp
  000c6	5d		 pop	 ebp
  000c7	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CPropertyManager@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$CSingleton@VCPropertyManager@@@@UAE@XZ ; CSingleton<CPropertyManager>::~CSingleton<CPropertyManager>
__unwindfunclet$??0CPropertyManager@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 08	 add	 ecx, 8
  0000e	e9 00 00 00 00	 jmp	 ??1?$map@KPAVCProperty@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCProperty@@@std@@@3@@std@@QAE@XZ
__unwindfunclet$??0CPropertyManager@@QAE@XZ$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 10	 add	 ecx, 16			; 00000010H
  00019	e9 00 00 00 00	 jmp	 ??1?$set@KU?$less@K@std@@V?$allocator@K@2@@std@@QAE@XZ
  0001e	cc		 int	 3
  0001f	cc		 int	 3
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
__ehhandler$??0CPropertyManager@@QAE@XZ:
  00023	90		 npad	 1
  00024	90		 npad	 1
  00025	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00029	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002c	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CPropertyManager@@QAE@XZ
  0003b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CPropertyManager@@QAE@XZ ENDP			; CPropertyManager::CPropertyManager
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
;	COMDAT ??_G?$CSingleton@VCPropertyManager@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CSingleton@VCPropertyManager@@@@UAEPAXI@Z PROC	; CSingleton<CPropertyManager>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1

; 19   : 	{

  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CSingleton@VCPropertyManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00010	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCPropertyManager@@@@0PAVCPropertyManager@@A, 0 ; CSingleton<CPropertyManager>::ms_singleton
  0001a	74 0b		 je	 SHORT $LN8@scalar
  0001c	6a 04		 push	 4
  0001e	56		 push	 esi
  0001f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00024	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_G?$CSingleton@VCPropertyManager@@@@UAEPAXI@Z ENDP	; CSingleton<CPropertyManager>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
;	COMDAT ??1?$CSingleton@VCPropertyManager@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CSingleton@VCPropertyManager@@@@UAE@XZ PROC	; CSingleton<CPropertyManager>::~CSingleton<CPropertyManager>, COMDAT
; _this$ = ecx

; 19   : 	{

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CSingleton@VCPropertyManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00006	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCPropertyManager@@@@0PAVCPropertyManager@@A, 0 ; CSingleton<CPropertyManager>::ms_singleton

; 22   : 	}

  00010	c3		 ret	 0
??1?$CSingleton@VCPropertyManager@@@@UAE@XZ ENDP	; CSingleton<CPropertyManager>::~CSingleton<CPropertyManager>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
;	COMDAT ??1?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
??1?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE@XZ PROC ; boost::unordered::unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >::~unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >, COMDAT
; _this$ = ecx

; 2124 :     }

  00000	e9 00 00 00 00	 jmp	 ??1?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> >,unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::~table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> >,unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long> > >
??1?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE@XZ ENDP ; boost::unordered::unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >::~unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
;	COMDAT ??0?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE@XZ PROC ; boost::unordered::unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >::unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >, COMDAT
; _this$ = ecx

; 1986 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 7456 :     auto _UFirst                = _STD _Get_unwrapped(_First);

  00008	be 00 00 00 00	 mov	 esi, OFFSET ?value@?$prime_list_template@I@detail@unordered@boost@@2QBIB ; boost::unordered::detail::prime_list_template<unsigned int>::value
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp

; 1986 :     {

  0000d	89 7d fc	 mov	 DWORD PTR _this$[ebp], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 7457 :     _Iter_diff_t<_FwdIt> _Count = _STD distance(_UFirst, _STD _Get_unwrapped(_Last));

  00010	ba 26 00 00 00	 mov	 edx, 38			; 00000026H
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2761 :         functions(H const& hf, P const& eq) : current_(0)

  00015	c6 07 00	 mov	 BYTE PTR [edi], 0
$LL16@unordered_:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 7460 :         const _Iter_diff_t<_FwdIt> _Count2 = _Count / 2;

  00018	8b ca		 mov	 ecx, edx
  0001a	d1 e9		 shr	 ecx, 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2422 :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  0001c	83 3c 8e 0b	 cmp	 DWORD PTR [esi+ecx*4], 11 ; 0000000bH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 1664 :         _Where += _Off;

  00020	8d 04 8e	 lea	 eax, DWORD PTR [esi+ecx*4]

; 7462 :         if (_Pred(*_UMid, _Val)) { // try top half

  00023	73 0c		 jae	 SHORT $LN18@unordered_

; 7463 :             _UFirst = _STD _Next_iter(_UMid);

  00025	8d 70 04	 lea	 esi, DWORD PTR [eax+4]

; 7464 :             _Count -= _Count2 + 1;

  00028	83 c8 ff	 or	 eax, -1
  0002b	2b c1		 sub	 eax, ecx
  0002d	03 d0		 add	 edx, eax

; 7465 :         } else {

  0002f	eb 02		 jmp	 SHORT $LN19@unordered_
$LN18@unordered_:

; 7466 :             _Count = _Count2;

  00031	8b d1		 mov	 edx, ecx
$LN19@unordered_:

; 7458 : 
; 7459 :     while (0 < _Count) { // divide and conquer, find half that contains answer

  00033	85 d2		 test	 edx, edx
  00035	7f e1		 jg	 SHORT $LL16@unordered_
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3121 :               bucket_count_(policy::new_bucket_count(num_buckets)), size_(0),

  00037	81 fe 98 00 00
	00		 cmp	 esi, OFFSET ?value@?$prime_list_template@I@detail@unordered@boost@@2QBIB+152
  0003d	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00040	0f 45 c6	 cmovne	 eax, esi
  00043	8b 00		 mov	 eax, DWORD PTR [eax]
  00045	89 47 04	 mov	 DWORD PTR [edi+4], eax
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp

; 1987 :     }

  00048	8b c7		 mov	 eax, edi
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3121 :               bucket_count_(policy::new_bucket_count(num_buckets)), size_(0),

  0004a	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 3122 :               mlf_(1.0f), max_load_(0), buckets_()

  00051	c7 47 0c 00 00
	80 3f		 mov	 DWORD PTR [edi+12], 1065353216 ; 3f800000H
  00058	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  0005f	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp

; 1987 :     }

  00066	5f		 pop	 edi
  00067	5e		 pop	 esi
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
??0?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE@XZ ENDP ; boost::unordered::unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >::unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??1?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
??1?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> >,unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::~table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> >,unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long> > >, COMDAT
; _this$ = ecx

; 3333 :         ~table() { delete_buckets(); }

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 3345 :           if (buckets_) {

  00003	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00006	85 c9		 test	 ecx, ecx
  00008	74 65		 je	 SHORT $LN7@table

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  0000a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]

; 3346 :             node_pointer n = static_cast<node_pointer>(

  0000d	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]

; 3347 :               get_bucket_pointer(bucket_count_)->next_);
; 3348 : 
; 3349 :             if (bucket::extra_node) {
; 3350 :               node_pointer next = next_node(n);
; 3351 :               boost::unordered::detail::func::destroy(boost::to_address(n));
; 3352 :               node_allocator_traits::deallocate(node_alloc(), n, 1);
; 3353 :               n = next;
; 3354 :             }
; 3355 : 
; 3356 :             while (n) {

  00010	85 c0		 test	 eax, eax
  00012	74 15		 je	 SHORT $LN75@table
  00014	56		 push	 esi
$LL5@table:

; 3357 :               node_pointer next = next_node(n);

  00015	8b 30		 mov	 esi, DWORD PTR [eax]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00017	6a 14		 push	 20			; 00000014H
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001f	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3359 :               n = next;

  00022	8b c6		 mov	 eax, esi
  00024	85 f6		 test	 esi, esi
  00026	75 ed		 jne	 SHORT $LL5@table

; 3347 :               get_bucket_pointer(bucket_count_)->next_);
; 3348 : 
; 3349 :             if (bucket::extra_node) {
; 3350 :               node_pointer next = next_node(n);
; 3351 :               boost::unordered::detail::func::destroy(boost::to_address(n));
; 3352 :               node_allocator_traits::deallocate(node_alloc(), n, 1);
; 3353 :               n = next;
; 3354 :             }
; 3355 : 
; 3356 :             while (n) {

  00028	5e		 pop	 esi
$LN75@table:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 723  :             _STD _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00029	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0002c	8d 0c 85 04 00
	00 00		 lea	 ecx, DWORD PTR [eax*4+4]
  00033	8b 47 14	 mov	 eax, DWORD PTR [edi+20]

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00036	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0003c	72 12		 jb	 SHORT $LN95@table

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0003e	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00041	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00044	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00046	83 c0 fc	 add	 eax, -4			; fffffffcH
  00049	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0004c	77 23		 ja	 SHORT $LN92@table

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0004e	8b c2		 mov	 eax, edx
$LN95@table:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00050	51		 push	 ecx
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00057	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3363 :             buckets_ = bucket_pointer();

  0005a	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 3364 :             max_load_ = 0;

  00061	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 3365 :             size_ = 0;

  00068	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN7@table:
  0006f	5f		 pop	 edi

; 3333 :         ~table() { delete_buckets(); }

  00070	c3		 ret	 0
$LN92@table:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00071	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN114@table:
  00076	cc		 int	 3
??1?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> >,unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::~table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> >,unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 182  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 183  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 184  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 185  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 136  :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 186  :         _Throw_bad_array_new_length(); // add overflow
; 187  :     }
; 188  : 
; 189  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 136  :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 191  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 192  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 193  : 
; 194  : #ifdef _DEBUG
; 195  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 196  : #endif // defined(_DEBUG)
; 197  :     return _Ptr;
; 198  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?_Throw_tree_length_error@std@@YAXXZ
_TEXT	SEGMENT
?_Throw_tree_length_error@std@@YAXXZ PROC		; std::_Throw_tree_length_error, COMDAT

; 417  :     _Xlength_error("map/set too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Throw_tree:
  0000a	cc		 int	 3
?_Throw_tree_length_error@std@@YAXXZ ENDP		; std::_Throw_tree_length_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__New_size$1$ = -16					; size = 4
tv518 = -16						; size = 4
__Old_size$1$ = -12					; size = 4
__Old$1$ = -8						; size = 4
$T1 = -4						; size = 4
tv508 = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
tv503 = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 1486 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 1487 :         // append [_Ptr, _Ptr + _Count)
; 1488 :         const size_type _Old_size = _Mypair._Myval2._Mysize;
; 1489 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00011	8b c2		 mov	 eax, edx
  00013	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00016	2b c1		 sub	 eax, ecx
  00018	89 4d f4	 mov	 DWORD PTR __Old_size$1$[ebp], ecx
  0001b	89 55 f8	 mov	 DWORD PTR __Old$1$[ebp], edx
  0001e	3b d8		 cmp	 ebx, eax
  00020	77 2e		 ja	 SHORT $LN2@append

; 1490 :             _ASAN_STRING_MODIFY(*this, _Old_size, _Old_size + _Count);
; 1491 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00022	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  00025	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 416  :         value_type* _Result = _Bx._Buf;

  00028	8b c7		 mov	 eax, edi

; 434  :         return _Myres > _Small_string_capacity;

  0002a	83 fa 0f	 cmp	 edx, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  0002d	76 02		 jbe	 SHORT $LN5@append

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  0002f	8b 07		 mov	 eax, DWORD PTR [edi]
$LN5@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00031	53		 push	 ebx
  00032	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1493 :             _Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

  00035	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 _memmove
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1494 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  00041	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 1507 :     }

  00045	8b c7		 mov	 eax, edi
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
$LN2@append:

; 2993 :         if (max_size() - _Old_size < _Size_increase) {

  00050	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00055	2b c1		 sub	 eax, ecx
  00057	3b c3		 cmp	 eax, ebx
  00059	0f 82 1d 01 00
	00		 jb	 $LN98@append

; 2995 :         }
; 2996 : 
; 2997 :         const size_type _New_size     = _Old_size + _Size_increase;

  0005f	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00062	8b f0		 mov	 esi, eax

; 2997 :         const size_type _New_size     = _Old_size + _Size_increase;

  00064	89 45 f0	 mov	 DWORD PTR __New_size$1$[ebp], eax

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00067	83 ce 0f	 or	 esi, 15			; 0000000fH
  0006a	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00070	76 12		 jbe	 SHORT $LN23@append

; 2944 :             return _Max;

  00072	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00077	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00082	eb 4b		 jmp	 SHORT $LN96@append
$LN23@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2947 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00084	8b c2		 mov	 eax, edx
  00086	d1 e8		 shr	 eax, 1
  00088	89 45 fc	 mov	 DWORD PTR tv508[ebp], eax
  0008b	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00090	2b 45 fc	 sub	 eax, DWORD PTR tv508[ebp]
  00093	3b d0		 cmp	 edx, eax
  00095	76 12		 jbe	 SHORT $LN24@append

; 2948 :             return _Max;

  00097	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0009c	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a7	eb 26		 jmp	 SHORT $LN96@append
$LN24@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000a9	8b 45 fc	 mov	 eax, DWORD PTR tv508[ebp]
  000ac	03 c2		 add	 eax, edx
  000ae	3b f0		 cmp	 esi, eax
  000b0	0f 42 f0	 cmovb	 esi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  000b3	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  000b6	85 c0		 test	 eax, eax
  000b8	74 1e		 je	 SHORT $LN95@append
$LN37@append:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  000ba	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000bf	72 08		 jb	 SHORT $LN38@append

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000c1	50		 push	 eax
  000c2	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000c7	eb 06		 jmp	 SHORT $LN96@append
$LN38@append:

; 136  :         return ::operator new(_Bytes);

  000c9	50		 push	 eax
  000ca	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN96@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3005 :         _My_data._Mysize      = _New_size;

  000cf	8b 55 f8	 mov	 edx, DWORD PTR __Old$1$[ebp]
  000d2	83 c4 04	 add	 esp, 4
  000d5	8b 4d f4	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
$LN95@append:
  000d8	8b 5d f0	 mov	 ebx, DWORD PTR __New_size$1$[ebp]
  000db	89 5f 10	 mov	 DWORD PTR [edi+16], ebx

; 3006 :         _My_data._Myres       = _New_capacity;
; 3007 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  000de	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  000e1	89 77 14	 mov	 DWORD PTR [edi+20], esi
  000e4	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
  000e7	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  000ea	89 75 f0	 mov	 DWORD PTR tv518[ebp], esi
  000ed	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]
  000f0	89 45 0c	 mov	 DWORD PTR tv503[ebp], eax

; 3008 :         if (_Old_capacity > _Small_string_capacity) {

  000f3	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
  000f6	51		 push	 ecx
  000f7	83 fa 0f	 cmp	 edx, 15			; 0000000fH
  000fa	76 56		 jbe	 SHORT $LN16@append

; 3009 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000fc	8b 37		 mov	 esi, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000fe	56		 push	 esi
  000ff	50		 push	 eax
  00100	e8 00 00 00 00	 call	 _memcpy
  00105	53		 push	 ebx
  00106	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00109	ff 75 f0	 push	 DWORD PTR tv518[ebp]
  0010c	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1504 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00111	8b 45 0c	 mov	 eax, DWORD PTR tv503[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00114	83 c4 18	 add	 esp, 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00117	8b 4d f8	 mov	 ecx, DWORD PTR __Old$1$[ebp]
  0011a	41		 inc	 ecx

; 1504 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0011b	c6 00 00	 mov	 BYTE PTR [eax], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0011e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00124	72 12		 jb	 SHORT $LN69@append

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00126	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00129	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0012c	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0012e	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00131	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00134	77 4b		 ja	 SHORT $LN66@append

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00136	8b f2		 mov	 esi, edx
$LN69@append:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00138	51		 push	 ecx
  00139	56		 push	 esi
  0013a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1498 :         return _Reallocate_grow_by(

  0013f	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00142	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1498 :         return _Reallocate_grow_by(

  00145	89 07		 mov	 DWORD PTR [edi], eax

; 1507 :     }

  00147	8b c7		 mov	 eax, edi
  00149	5f		 pop	 edi
  0014a	5e		 pop	 esi
  0014b	5b		 pop	 ebx
  0014c	8b e5		 mov	 esp, ebp
  0014e	5d		 pop	 ebp
  0014f	c2 08 00	 ret	 8
$LN16@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00152	57		 push	 edi
  00153	50		 push	 eax
  00154	e8 00 00 00 00	 call	 _memcpy
  00159	53		 push	 ebx
  0015a	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0015d	56		 push	 esi
  0015e	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1504 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00163	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00166	83 c4 18	 add	 esp, 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1504 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00169	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1498 :         return _Reallocate_grow_by(

  0016c	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
  0016f	89 07		 mov	 DWORD PTR [edi], eax

; 1507 :     }

  00171	8b c7		 mov	 eax, edi
  00173	5f		 pop	 edi
  00174	5e		 pop	 esi
  00175	5b		 pop	 ebx
  00176	8b e5		 mov	 esp, ebp
  00178	5d		 pop	 ebp
  00179	c2 08 00	 ret	 8
$LN98@append:

; 2994 :             _Xlen_string(); // result too long

  0017c	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN66@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00181	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN93@append:
  00186	cc		 int	 3
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 1358 :     _CONSTEXPR20 ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 434  :         return _Myres > _Small_string_capacity;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00009	76 27		 jbe	 SHORT $LN19@basic_stri
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0000d	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN30@basic_stri

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN27@basic_stri

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN30@basic_stri:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN19@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 1366 :     }

  00044	c3		 ret	 0
$LN27@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN39@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 744  :     _CONSTEXPR20 basic_string(_In_z_ const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t{}) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b d9		 mov	 ebx, ecx
  00008	0f 57 c0	 xorps	 xmm0, xmm0
  0000b	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0000c	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  0000f	8b f7		 mov	 esi, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00011	0f 11 03	 movups	 XMMWORD PTR [ebx], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00014	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0001b	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00022	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
$LL51@basic_stri:
  00025	8a 06		 mov	 al, BYTE PTR [esi]
  00027	46		 inc	 esi
  00028	84 c0		 test	 al, al
  0002a	75 f9		 jne	 SHORT $LL51@basic_stri
  0002c	2b f1		 sub	 esi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 857  :         if (_Count > max_size()) {

  0002e	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  00034	0f 87 9b 00 00
	00		 ja	 $LN62@basic_stri

; 859  :         }
; 860  : 
; 861  :         auto& _Al       = _Getal();
; 862  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 863  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 864  : 
; 865  :         if (_Count <= _Small_string_capacity) {

  0003a	83 fe 0f	 cmp	 esi, 15			; 0000000fH
  0003d	77 24		 ja	 SHORT $LN21@basic_stri
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0003f	56		 push	 esi
  00040	57		 push	 edi
  00041	53		 push	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  00042	89 73 10	 mov	 DWORD PTR [ebx+16], esi

; 867  :             _My_data._Myres  = _Small_string_capacity;

  00045	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0004c	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00051	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));
; 746  :     }

  00055	83 c4 0c	 add	 esp, 12			; 0000000cH
  00058	8b c3		 mov	 eax, ebx
  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
$LN21@basic_stri:

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00063	8b fe		 mov	 edi, esi
  00065	83 cf 0f	 or	 edi, 15			; 0000000fH
  00068	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0006e	76 12		 jbe	 SHORT $LN27@basic_stri

; 2944 :             return _Max;

  00070	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00075	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00080	eb 26		 jmp	 SHORT $LN60@basic_stri
$LN27@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00082	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00087	3b f8		 cmp	 edi, eax
  00089	0f 42 f8	 cmovb	 edi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  0008c	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  0008f	85 c0		 test	 eax, eax
  00091	74 18		 je	 SHORT $LN59@basic_stri
$LN41@basic_stri:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00093	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00098	72 08		 jb	 SHORT $LN42@basic_stri

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a0	eb 06		 jmp	 SHORT $LN60@basic_stri
$LN42@basic_stri:

; 136  :         return ::operator new(_Bytes);

  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN60@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000a8	83 c4 04	 add	 esp, 4
$LN59@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000ab	56		 push	 esi
  000ac	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000af	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000b2	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000b3	89 03		 mov	 DWORD PTR [ebx], eax

; 890  : 
; 891  :         _My_data._Mysize = _Count;

  000b5	89 73 10	 mov	 DWORD PTR [ebx+16], esi

; 892  :         _My_data._Myres  = _New_capacity;

  000b8	89 7b 14	 mov	 DWORD PTR [ebx+20], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000bb	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000c0	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));
; 746  :     }

  000c3	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c6	5f		 pop	 edi

; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000c7	c6 04 30 00	 mov	 BYTE PTR [eax+esi], 0

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));
; 746  :     }

  000cb	8b c3		 mov	 eax, ebx
  000cd	5e		 pop	 esi
  000ce	5b		 pop	 ebx
  000cf	8b e5		 mov	 esp, ebp
  000d1	5d		 pop	 ebp
  000d2	c2 04 00	 ret	 4
$LN62@basic_stri:

; 858  :             _Xlen_string(); // result too long

  000d5	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN57@basic_stri:
  000da	cc		 int	 3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 512  :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 107  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 108  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN18@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN18@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 144  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 145  :     }

  00003	8b c1		 mov	 eax, ecx

; 66   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 67   :     {
; 68   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 144  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 145  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN13@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN8@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 96   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 97   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 92   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 73   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 75   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\stdio.h
;	COMDAT __snprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__snprintf PROC						; COMDAT

; 1947 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1392 :         int const _Result = __stdio_common_vsprintf(

  00003	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 01	 or	 ecx, 1
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1393 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1394 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1395 : 
; 1396 :         return _Result < 0 ? -1 : _Result;

  00025	83 c9 ff	 or	 ecx, -1
  00028	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 48 c1	 cmovs	 eax, ecx

; 1948 :         int _Result;
; 1949 :         va_list _ArgList;
; 1950 :         __crt_va_start(_ArgList, _Format);
; 1951 :         _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
; 1952 :         __crt_va_end(_ArgList);
; 1953 :         return _Result;
; 1954 :     }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
__snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
