; Listing generated by Microsoft (R) Optimizing Compiler Version 19.43.34808.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\GameLib\Distribute\MapType.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
	ORG $+7
?c_szPropertyTypeName@prt@@3QAY0CA@$$CBDA DB 'None', 00H ; prt::c_szPropertyTypeName
	ORG $+27
	DB	'Tree', 00H
	ORG $+27
	DB	'Building', 00H
	ORG $+23
	DB	'Effect', 00H
	ORG $+25
	DB	'Ambience', 00H
	ORG $+23
	DB	'DungeonBlock', 00H
	ORG $+19
?c_szPropertyExtension@prt@@3QAY0BA@$$CBDA DB '.pr', 00H ; prt::c_szPropertyExtension
	ORG $+12
	DB	'.prt', 00H
	ORG $+11
	DB	'.prb', 00H
	ORG $+11
	DB	'.pre', 00H
	ORG $+11
	DB	'.pra', 00H
	ORG $+11
	DB	'.prd', 00H
	ORG $+11
CONST	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__snprintf
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
PUBLIC	?NoExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; CFileNameHelper::NoExtension
PUBLIC	??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array
PUBLIC	?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
PUBLIC	?GetPropertyType@prt@@YAKPBD@Z			; prt::GetPropertyType
PUBLIC	?GetPropertyExtension@prt@@YAPBDK@Z		; prt::GetPropertyExtension
PUBLIC	?PropertyTreeDataToString@prt@@YA_NPAUTPropertyTree@1@PAVCProperty@@@Z ; prt::PropertyTreeDataToString
PUBLIC	?PropertyTreeStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyTree@1@@Z ; prt::PropertyTreeStringToData
PUBLIC	?PropertyBuildingDataToString@prt@@YA_NPAUTPropertyBuilding@1@PAVCProperty@@@Z ; prt::PropertyBuildingDataToString
PUBLIC	?PropertyBuildingStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyBuilding@1@@Z ; prt::PropertyBuildingStringToData
PUBLIC	?PropertyEffectDataToString@prt@@YA_NPAUTPropertyEffect@1@PAVCProperty@@@Z ; prt::PropertyEffectDataToString
PUBLIC	?PropertyEffectStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyEffect@1@@Z ; prt::PropertyEffectStringToData
PUBLIC	?PropertyAmbienceDataToString@prt@@YA_NPAUTPropertyAmbience@1@PAVCProperty@@@Z ; prt::PropertyAmbienceDataToString
PUBLIC	?PropertyAmbienceStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyAmbience@1@@Z ; prt::PropertyAmbienceStringToData
PUBLIC	?PropertyDungeonBlockDataToString@prt@@YA_NPAUTPropertyDungeonBlock@1@PAVCProperty@@@Z ; prt::PropertyDungeonBlockDataToString
PUBLIC	?PropertyDungeonBlockStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyDungeonBlock@1@@Z ; prt::PropertyDungeonBlockStringToData
PUBLIC	?GetFogNearDistance@SEnvironmentData@@QBEMXZ	; SEnvironmentData::GetFogNearDistance
PUBLIC	?GetFogFarDistance@SEnvironmentData@@QBEMXZ	; SEnvironmentData::GetFogFarDistance
PUBLIC	?SPixelPosition_CalculateDistanceSq3d@@YAMABUD3DXVECTOR3@@0@Z ; SPixelPosition_CalculateDistanceSq3d
PUBLIC	??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
PUBLIC	??$_Find_last_vectorized@$$CBDD@std@@YAPBDQBD0D@Z ; std::_Find_last_vectorized<char const ,char>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?IntegerNumberToString@prt@@YAPBDH@Z		; prt::IntegerNumberToString
PUBLIC	?FloatNumberToString@prt@@YAPBDM@Z		; prt::FloatNumberToString
PUBLIC	??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
PUBLIC	??1_Reallocation_guard@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reallocation_guard::~_Reallocation_guard
PUBLIC	??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_02NJPGOMH@?$CFf@				; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position@	; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_C@_02DPKJAMEF@?$CFd@				; `string'
PUBLIC	??_C@_04GDOOJPNH@Tree@				; `string'
PUBLIC	??_C@_0N@FPEBPNJJ@PropertyType@			; `string'
PUBLIC	??_C@_0N@PEECDNOJ@PropertyName@			; `string'
PUBLIC	??_C@_08JBFACIKL@TreeFile@			; `string'
PUBLIC	??_C@_08CBPLOPJL@TreeSize@			; `string'
PUBLIC	??_C@_0N@IDDBDNKA@TreeVariance@			; `string'
PUBLIC	??_C@_08COFDOLHN@Building@			; `string'
PUBLIC	??_C@_0N@LJHIPMJO@BuildingFile@			; `string'
PUBLIC	??_C@_0L@GJODCEE@ShadowFlag@			; `string'
PUBLIC	??_C@_06OIKCOENH@?4mdatr@			; `string'
PUBLIC	??_C@_06LBEFNKEP@Effect@			; `string'
PUBLIC	??_C@_0L@LKNLHIBB@EffectFile@			; `string'
PUBLIC	??_C@_08HABDNILH@Ambience@			; `string'
PUBLIC	??_C@_08HKNDHFCE@PlayType@			; `string'
PUBLIC	??_C@_0N@PFAKOMHI@PlayInterval@			; `string'
PUBLIC	??_C@_0BG@EAEDJCHJ@PlayIntervalVariation@	; `string'
PUBLIC	??_C@_0BI@DGADHCAB@MaxVolumeAreaPercentage@	; `string'
PUBLIC	??_C@_0BE@CHLDPEGL@AmbienceSoundVector@		; `string'
PUBLIC	??_C@_0N@HFPGEGLM@DungeonBlock@			; `string'
PUBLIC	??_C@_0BB@IJOAHLBO@DungeonBlockFile@		; `string'
PUBLIC	??_C@_0BB@CJNPGFDA@dungeonblockfile@		; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_atof:PROC
EXTRN	__atoi64:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	___std_find_last_trivial_1@12:PROC
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?Clear@CProperty@@QAEXXZ:PROC			; CProperty::Clear
EXTRN	?GetVector@CProperty@@QAE_NPBDAAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z:PROC ; CProperty::GetVector
EXTRN	?GetString@CProperty@@QAE_NPBDPAPBD@Z:PROC	; CProperty::GetString
EXTRN	?PutVector@CProperty@@QAEXPBDABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z:PROC ; CProperty::PutVector
EXTRN	?PutString@CProperty@@QAEXPBD0@Z:PROC		; CProperty::PutString
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?szString@?1??IntegerNumberToString@prt@@YAPBDH@Z@4PADA
_BSS	SEGMENT
?szString@?1??IntegerNumberToString@prt@@YAPBDH@Z@4PADA DB 011H DUP (?) ; `prt::IntegerNumberToString'::`2'::szString
_BSS	ENDS
;	COMDAT ?szString@?1??FloatNumberToString@prt@@YAPBDM@Z@4PADA
_BSS	SEGMENT
?szString@?1??FloatNumberToString@prt@@YAPBDM@Z@4PADA DB 011H DUP (?) ; `prt::FloatNumberToString'::`2'::szString
_BSS	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CJNPGFDA@dungeonblockfile@
CONST	SEGMENT
??_C@_0BB@CJNPGFDA@dungeonblockfile@ DB 'dungeonblockfile', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IJOAHLBO@DungeonBlockFile@
CONST	SEGMENT
??_C@_0BB@IJOAHLBO@DungeonBlockFile@ DB 'DungeonBlockFile', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HFPGEGLM@DungeonBlock@
CONST	SEGMENT
??_C@_0N@HFPGEGLM@DungeonBlock@ DB 'DungeonBlock', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CHLDPEGL@AmbienceSoundVector@
CONST	SEGMENT
??_C@_0BE@CHLDPEGL@AmbienceSoundVector@ DB 'AmbienceSoundVector', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@DGADHCAB@MaxVolumeAreaPercentage@
CONST	SEGMENT
??_C@_0BI@DGADHCAB@MaxVolumeAreaPercentage@ DB 'MaxVolumeAreaPercentage', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EAEDJCHJ@PlayIntervalVariation@
CONST	SEGMENT
??_C@_0BG@EAEDJCHJ@PlayIntervalVariation@ DB 'PlayIntervalVariation', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PFAKOMHI@PlayInterval@
CONST	SEGMENT
??_C@_0N@PFAKOMHI@PlayInterval@ DB 'PlayInterval', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08HKNDHFCE@PlayType@
CONST	SEGMENT
??_C@_08HKNDHFCE@PlayType@ DB 'PlayType', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08HABDNILH@Ambience@
CONST	SEGMENT
??_C@_08HABDNILH@Ambience@ DB 'Ambience', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LKNLHIBB@EffectFile@
CONST	SEGMENT
??_C@_0L@LKNLHIBB@EffectFile@ DB 'EffectFile', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06LBEFNKEP@Effect@
CONST	SEGMENT
??_C@_06LBEFNKEP@Effect@ DB 'Effect', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OIKCOENH@?4mdatr@
CONST	SEGMENT
??_C@_06OIKCOENH@?4mdatr@ DB '.mdatr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GJODCEE@ShadowFlag@
CONST	SEGMENT
??_C@_0L@GJODCEE@ShadowFlag@ DB 'ShadowFlag', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LJHIPMJO@BuildingFile@
CONST	SEGMENT
??_C@_0N@LJHIPMJO@BuildingFile@ DB 'BuildingFile', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08COFDOLHN@Building@
CONST	SEGMENT
??_C@_08COFDOLHN@Building@ DB 'Building', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IDDBDNKA@TreeVariance@
CONST	SEGMENT
??_C@_0N@IDDBDNKA@TreeVariance@ DB 'TreeVariance', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08CBPLOPJL@TreeSize@
CONST	SEGMENT
??_C@_08CBPLOPJL@TreeSize@ DB 'TreeSize', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08JBFACIKL@TreeFile@
CONST	SEGMENT
??_C@_08JBFACIKL@TreeFile@ DB 'TreeFile', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PEECDNOJ@PropertyName@
CONST	SEGMENT
??_C@_0N@PEECDNOJ@PropertyName@ DB 'PropertyName', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FPEBPNJJ@PropertyType@
CONST	SEGMENT
??_C@_0N@FPEBPNJJ@PropertyType@ DB 'PropertyType', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04GDOOJPNH@Tree@
CONST	SEGMENT
??_C@_04GDOOJPNH@Tree@ DB 'Tree', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd@ DB '%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position@ DB 'invalid string position'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_02NJPGOMH@?$CFf@
CONST	SEGMENT
??_C@_02NJPGOMH@?$CFf@ DB '%f', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z$0
__ehfuncinfo$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?PropertyDungeonBlockStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyDungeonBlock@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PropertyDungeonBlockStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyDungeonBlock@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?PropertyDungeonBlockStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyDungeonBlock@1@@Z$1
__ehfuncinfo$?PropertyDungeonBlockStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyDungeonBlock@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?PropertyDungeonBlockStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyDungeonBlock@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?PropertyAmbienceStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyAmbience@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PropertyAmbienceStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyAmbience@1@@Z$0
__ehfuncinfo$?PropertyAmbienceStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyAmbience@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PropertyAmbienceStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyAmbience@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?PropertyAmbienceDataToString@prt@@YA_NPAUTPropertyAmbience@1@PAVCProperty@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PropertyAmbienceDataToString@prt@@YA_NPAUTPropertyAmbience@1@PAVCProperty@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?PropertyAmbienceDataToString@prt@@YA_NPAUTPropertyAmbience@1@PAVCProperty@@@Z$1
__ehfuncinfo$?PropertyAmbienceDataToString@prt@@YA_NPAUTPropertyAmbience@1@PAVCProperty@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?PropertyAmbienceDataToString@prt@@YA_NPAUTPropertyAmbience@1@PAVCProperty@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?PropertyBuildingStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyBuilding@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PropertyBuildingStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyBuilding@1@@Z$0
__ehfuncinfo$?PropertyBuildingStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyBuilding@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PropertyBuildingStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyBuilding@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 1940 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1941 :     // move [_First, _Last) to raw _Dest, using _Al
; 1942 :     // note: only called internally from elsewhere in the STL
; 1943 : #ifdef _ENABLE_STL_INTERNAL_CHECK
; 1944 :     _STD _Adl_verify_range(_First, _Last);
; 1945 : #endif // ^^^ defined(_ENABLE_STL_INTERNAL_CHECK) ^^^
; 1946 :     using _Ptrval     = typename _Alloc::value_type*;
; 1947 :     auto _UFirst      = _STD _Get_unwrapped(_First);
; 1948 :     const auto _ULast = _STD _Get_unwrapped(_Last);
; 1949 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1950 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1951 : #if _HAS_CXX20
; 1952 :         if (!_STD is_constant_evaluated())
; 1953 : #endif // _HAS_CXX20
; 1954 :         {
; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));
; 1956 :             return _Dest + (_ULast - _UFirst);
; 1957 :         }
; 1958 :     }
; 1959 : 
; 1960 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1961 :     for (; _UFirst != _ULast; ++_UFirst) {

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	56		 push	 esi

; 1796 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  0000a	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]

; 1941 :     // move [_First, _Last) to raw _Dest, using _Al
; 1942 :     // note: only called internally from elsewhere in the STL
; 1943 : #ifdef _ENABLE_STL_INTERNAL_CHECK
; 1944 :     _STD _Adl_verify_range(_First, _Last);
; 1945 : #endif // ^^^ defined(_ENABLE_STL_INTERNAL_CHECK) ^^^
; 1946 :     using _Ptrval     = typename _Alloc::value_type*;
; 1947 :     auto _UFirst      = _STD _Get_unwrapped(_First);
; 1948 :     const auto _ULast = _STD _Get_unwrapped(_Last);
; 1949 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1950 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1951 : #if _HAS_CXX20
; 1952 :         if (!_STD is_constant_evaluated())
; 1953 : #endif // _HAS_CXX20
; 1954 :         {
; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));
; 1956 :             return _Dest + (_ULast - _UFirst);
; 1957 :         }
; 1958 :     }
; 1959 : 
; 1960 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1961 :     for (; _UFirst != _ULast; ++_UFirst) {

  0000d	3b c2		 cmp	 eax, edx
  0000f	74 4f		 je	 SHORT $LN3@Uninitiali

; 1796 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00011	8b ce		 mov	 ecx, esi
  00013	2b c8		 sub	 ecx, eax
  00015	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL4@Uninitiali:
  00020	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00023	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00026	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0002d	c7 44 01 14 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+20], 0

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00035	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00038	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  0003b	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  00040	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1808 :         ++_Last;

  00045	83 c6 18	 add	 esi, 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1264 :                 _Right_data._Mysize = 0;

  00048	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 1265 :                 _Right_data._Myres  = _Small_string_capacity;

  0004f	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 1266 :                 _Right_data._Activate_SSO_buffer();
; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  00056	c6 00 00	 mov	 BYTE PTR [eax], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1808 :         ++_Last;

  00059	83 c0 18	 add	 eax, 24			; 00000018H

; 1941 :     // move [_First, _Last) to raw _Dest, using _Al
; 1942 :     // note: only called internally from elsewhere in the STL
; 1943 : #ifdef _ENABLE_STL_INTERNAL_CHECK
; 1944 :     _STD _Adl_verify_range(_First, _Last);
; 1945 : #endif // ^^^ defined(_ENABLE_STL_INTERNAL_CHECK) ^^^
; 1946 :     using _Ptrval     = typename _Alloc::value_type*;
; 1947 :     auto _UFirst      = _STD _Get_unwrapped(_First);
; 1948 :     const auto _ULast = _STD _Get_unwrapped(_Last);
; 1949 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1950 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1951 : #if _HAS_CXX20
; 1952 :         if (!_STD is_constant_evaluated())
; 1953 : #endif // _HAS_CXX20
; 1954 :         {
; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));
; 1956 :             return _Dest + (_ULast - _UFirst);
; 1957 :         }
; 1958 :     }
; 1959 : 
; 1960 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1961 :     for (; _UFirst != _ULast; ++_UFirst) {

  0005c	3b c2		 cmp	 eax, edx
  0005e	75 c0		 jne	 SHORT $LL4@Uninitiali
$LN3@Uninitiali:

; 1802 :         _STD _Destroy_range(_First, _Last, _Al);

  00060	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00063	56		 push	 esi
  00064	56		 push	 esi
  00065	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  0006a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1962 :         _Backout._Emplace_back(_STD move(*_UFirst));
; 1963 :     }
; 1964 : 
; 1965 :     return _Backout._Release();

  0006d	8b c6		 mov	 eax, esi
  0006f	5e		 pop	 esi

; 1966 : }

  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??1_Reallocation_guard@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Reallocation_guard@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reallocation_guard::~_Reallocation_guard, COMDAT
; _this$ = ecx

; 605  :         _CONSTEXPR20 ~_Reallocation_guard() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 606  :             if (_New_begin != nullptr) {

  00003	83 7e 04 00	 cmp	 DWORD PTR [esi+4], 0
  00007	74 40		 je	 SHORT $LN10@Reallocati

; 607  :                 _STD _Destroy_range(_Constructed_first, _Constructed_last, _Al);

  00009	ff 36		 push	 DWORD PTR [esi]
  0000b	ff 76 10	 push	 DWORD PTR [esi+16]
  0000e	ff 76 0c	 push	 DWORD PTR [esi+12]
  00011	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00016	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 607  :                 _STD _Destroy_range(_Constructed_first, _Constructed_last, _Al);

  00019	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0001c	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  0001f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00022	c1 e1 03	 shl	 ecx, 3

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00025	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002b	72 12		 jb	 SHORT $LN21@Reallocati

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0002d	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00030	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00033	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00035	83 c0 fc	 add	 eax, -4			; fffffffcH
  00038	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0003b	77 0e		 ja	 SHORT $LN18@Reallocati

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0003d	8b c2		 mov	 eax, edx
$LN21@Reallocati:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0003f	51		 push	 ecx
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00046	83 c4 08	 add	 esp, 8
$LN10@Reallocati:
  00049	5e		 pop	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 610  :         }

  0004a	c3		 ret	 0
$LN18@Reallocati:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN28@Reallocati:
  00050	cc		 int	 3
??1_Reallocation_guard@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reallocation_guard::~_Reallocation_guard
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z
_TEXT	SEGMENT
__Guard$ = -44						; size = 20
__Oldsize$1$ = -24					; size = 4
$T2 = -20						; size = 4
__Whereoff$1$ = -16					; size = 4
tv351 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>, COMDAT
; _this$ = ecx

; 860  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx

; 861  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 862  :         _Alty& _Al        = _Getal();
; 863  :         auto& _My_data    = _Mypair._Myval2;
; 864  :         pointer& _Myfirst = _My_data._Myfirst;
; 865  :         pointer& _Mylast  = _My_data._Mylast;
; 866  : 
; 867  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 868  : 
; 869  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  0002a	8b 33		 mov	 esi, DWORD PTR [ebx]
  0002c	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00031	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]

; 870  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00034	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00037	2b d6		 sub	 edx, esi
  00039	f7 ea		 imul	 edx
  0003b	2b ce		 sub	 ecx, esi
  0003d	c1 fa 02	 sar	 edx, 2
  00040	8b c2		 mov	 eax, edx
  00042	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00045	03 c2		 add	 eax, edx
  00047	89 45 f0	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  0004a	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0004f	f7 e9		 imul	 ecx
  00051	c1 fa 02	 sar	 edx, 2
  00054	8b c2		 mov	 eax, edx
  00056	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00059	03 c2		 add	 eax, edx
  0005b	89 45 e8	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 871  : 
; 872  :         if (_Oldsize == max_size()) {

  0005e	3d aa aa aa 0a	 cmp	 eax, 178956970		; 0aaaaaaaH
  00063	0f 84 16 01 00
	00		 je	 $LN37@Emplace_re

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00069	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]

; 874  :         }
; 875  : 
; 876  :         const size_type _Newsize = _Oldsize + 1;

  0006c	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0006f	2b ce		 sub	 ecx, esi
  00071	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00076	f7 e9		 imul	 ecx

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00078	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0007d	c1 fa 02	 sar	 edx, 2
  00080	8b ca		 mov	 ecx, edx
  00082	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00085	03 ca		 add	 ecx, edx

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00087	8b d1		 mov	 edx, ecx
  00089	d1 ea		 shr	 edx, 1
  0008b	2b c2		 sub	 eax, edx
  0008d	3b c8		 cmp	 ecx, eax
  0008f	76 12		 jbe	 SHORT $LN8@Emplace_re

; 1997 :             return _Max; // geometric growth would overflow

  00091	b8 f0 ff ff ff	 mov	 eax, -16		; fffffff0H
  00096	be aa aa aa 0a	 mov	 esi, 178956970		; 0aaaaaaaH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0009b	50		 push	 eax
  0009c	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a1	eb 39		 jmp	 SHORT $LN35@Emplace_re
$LN8@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  000a3	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  000a6	8b f7		 mov	 esi, edi
  000a8	3b c7		 cmp	 eax, edi
  000aa	0f 43 f0	 cmovae	 esi, eax
  000ad	81 fe aa aa aa
	0a		 cmp	 esi, 178956970		; 0aaaaaaaH
  000b3	0f 87 cb 00 00
	00		 ja	 $LN38@Emplace_re

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  000b9	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  000bc	c1 e0 03	 shl	 eax, 3

; 227  :     if (_Bytes == 0) {

  000bf	85 c0		 test	 eax, eax
  000c1	75 04		 jne	 SHORT $LN23@Emplace_re

; 228  :         return nullptr;

  000c3	33 ff		 xor	 edi, edi
  000c5	eb 1a		 jmp	 SHORT $LN22@Emplace_re
$LN23@Emplace_re:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  000c7	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000cc	72 08		 jb	 SHORT $LN24@Emplace_re

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000d4	eb 06		 jmp	 SHORT $LN35@Emplace_re
$LN24@Emplace_re:

; 136  :         return ::operator new(_Bytes);

  000d6	50		 push	 eax
  000d7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN35@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 880  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  000dc	8b f8		 mov	 edi, eax
  000de	83 c4 04	 add	 esp, 4
$LN22@Emplace_re:
  000e1	8b 45 f0	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]

; 882  :         _Reallocation_guard _Guard{_Al, _Newvec, _Newcapacity, _Constructed_last, _Constructed_last};

  000e4	89 5d d4	 mov	 DWORD PTR __Guard$[ebp], ebx
  000e7	89 7d d8	 mov	 DWORD PTR __Guard$[ebp+4], edi
  000ea	89 75 dc	 mov	 DWORD PTR __Guard$[ebp+8], esi
  000ed	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000f0	8d 0c c7	 lea	 ecx, DWORD PTR [edi+eax*8]
  000f3	8d 41 18	 lea	 eax, DWORD PTR [ecx+24]
  000f6	89 4d f0	 mov	 DWORD PTR tv351[ebp], ecx
  000f9	89 45 ec	 mov	 DWORD PTR $T2[ebp], eax
  000fc	89 45 e0	 mov	 DWORD PTR __Guard$[ebp+12], eax
  000ff	89 45 e4	 mov	 DWORD PTR __Guard$[ebp+16], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 732  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00102	ff 75 0c	 push	 DWORD PTR _<_Val_0>$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 882  :         _Reallocation_guard _Guard{_Al, _Newvec, _Newcapacity, _Constructed_last, _Constructed_last};

  00105	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 732  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  0010c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 886  :         _Constructed_first = _Newvec + _Whereoff;

  00111	8b 45 f0	 mov	 eax, DWORD PTR tv351[ebp]

; 887  : 
; 888  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00114	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  00117	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00119	89 45 e0	 mov	 DWORD PTR __Guard$[ebp+12], eax
  0011c	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  0011f	3b c2		 cmp	 eax, edx
  00121	75 04		 jne	 SHORT $LN3@Emplace_re

; 889  :             if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 890  :                 _STD _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);

  00123	8b c7		 mov	 eax, edi

; 891  :             } else {
; 892  :                 _STD _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);
; 893  :             }
; 894  :         } else { // provide basic guarantee

  00125	eb 18		 jmp	 SHORT $LN4@Emplace_re
$LN3@Emplace_re:

; 895  :             _STD _Uninitialized_move(_Myfirst, _Whereptr, _Newvec, _Al);

  00127	53		 push	 ebx
  00128	57		 push	 edi
  00129	50		 push	 eax
  0012a	51		 push	 ecx
  0012b	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 896  :             _Constructed_first = _Newvec;
; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  00130	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  00133	83 c4 10	 add	 esp, 16			; 00000010H
  00136	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  00139	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp]
  0013c	89 7d e0	 mov	 DWORD PTR __Guard$[ebp+12], edi
$LN4@Emplace_re:

; 898  :         }
; 899  : 
; 900  :         _Guard._New_begin = nullptr;

  0013f	53		 push	 ebx
  00140	50		 push	 eax
  00141	52		 push	 edx
  00142	51		 push	 ecx
  00143	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 901  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  00148	8b 45 e8	 mov	 eax, DWORD PTR __Oldsize$1$[ebp]
  0014b	83 c4 10	 add	 esp, 16			; 00000010H
  0014e	40		 inc	 eax
  0014f	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR __Guard$[ebp+4], 0
  00156	8b cb		 mov	 ecx, ebx
  00158	56		 push	 esi
  00159	50		 push	 eax
  0015a	57		 push	 edi
  0015b	e8 00 00 00 00	 call	 ?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array

; 902  :         return _Newvec + _Whereoff;

  00160	8d 4d d4	 lea	 ecx, DWORD PTR __Guard$[ebp]
  00163	e8 00 00 00 00	 call	 ??1_Reallocation_guard@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reallocation_guard::~_Reallocation_guard
  00168	8b 45 f0	 mov	 eax, DWORD PTR tv351[ebp]

; 903  :     }

  0016b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0016e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00175	59		 pop	 ecx
  00176	5f		 pop	 edi
  00177	5e		 pop	 esi
  00178	5b		 pop	 ebx
  00179	8b e5		 mov	 esp, ebp
  0017b	5d		 pop	 ebp
  0017c	c2 08 00	 ret	 8
$LN37@Emplace_re:

; 873  :             _Xlength();

  0017f	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
$LN38@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  00184	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN34@Emplace_re:
  00189	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR __Guard$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Reallocation_guard@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reallocation_guard::~_Reallocation_guard
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z
_TEXT	SEGMENT
__Guard$ = -32						; size = 20
_this$1$ = -12						; size = 4
__Oldsize$1$ = -8					; size = 4
__Whereoff$1$ = -4					; size = 4
$T1 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 860  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H

; 861  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 862  :         _Alty& _Al        = _Getal();
; 863  :         auto& _My_data    = _Mypair._Myval2;
; 864  :         pointer& _Myfirst = _My_data._Myfirst;
; 865  :         pointer& _Mylast  = _My_data._Mylast;
; 866  : 
; 867  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 868  : 
; 869  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00006	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  00009	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000e	53		 push	 ebx
  0000f	8b d9		 mov	 ebx, ecx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	8b 33		 mov	 esi, DWORD PTR [ebx]
  00015	2b d6		 sub	 edx, esi

; 870  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00017	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0001a	f7 ea		 imul	 edx
  0001c	2b ce		 sub	 ecx, esi
  0001e	c1 fa 02	 sar	 edx, 2
  00021	8b c2		 mov	 eax, edx
  00023	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00026	03 c2		 add	 eax, edx
  00028	89 45 fc	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  0002b	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00030	f7 e9		 imul	 ecx
  00032	c1 fa 02	 sar	 edx, 2
  00035	8b c2		 mov	 eax, edx
  00037	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0003a	03 c2		 add	 eax, edx
  0003c	89 45 f8	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 871  : 
; 872  :         if (_Oldsize == max_size()) {

  0003f	3d aa aa aa 0a	 cmp	 eax, 178956970		; 0aaaaaaaH
  00044	0f 84 2b 01 00
	00		 je	 $LN70@Emplace_re

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0004a	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]

; 874  :         }
; 875  : 
; 876  :         const size_type _Newsize = _Oldsize + 1;

  0004d	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00050	2b ce		 sub	 ecx, esi
  00052	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00057	f7 e9		 imul	 ecx

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00059	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0005e	c1 fa 02	 sar	 edx, 2
  00061	8b ca		 mov	 ecx, edx
  00063	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00066	03 ca		 add	 ecx, edx

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00068	8b d1		 mov	 edx, ecx
  0006a	d1 ea		 shr	 edx, 1
  0006c	2b c2		 sub	 eax, edx
  0006e	3b c8		 cmp	 ecx, eax
  00070	76 12		 jbe	 SHORT $LN8@Emplace_re

; 1997 :             return _Max; // geometric growth would overflow

  00072	b8 f0 ff ff ff	 mov	 eax, -16		; fffffff0H
  00077	be aa aa aa 0a	 mov	 esi, 178956970		; 0aaaaaaaH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00082	eb 39		 jmp	 SHORT $LN68@Emplace_re
$LN8@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00084	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  00087	8b f7		 mov	 esi, edi
  00089	3b c7		 cmp	 eax, edi
  0008b	0f 43 f0	 cmovae	 esi, eax
  0008e	81 fe aa aa aa
	0a		 cmp	 esi, 178956970		; 0aaaaaaaH
  00094	0f 87 e0 00 00
	00		 ja	 $LN71@Emplace_re

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  0009a	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  0009d	c1 e0 03	 shl	 eax, 3

; 227  :     if (_Bytes == 0) {

  000a0	85 c0		 test	 eax, eax
  000a2	75 04		 jne	 SHORT $LN23@Emplace_re

; 228  :         return nullptr;

  000a4	33 ff		 xor	 edi, edi
  000a6	eb 1a		 jmp	 SHORT $LN22@Emplace_re
$LN23@Emplace_re:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  000a8	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000ad	72 08		 jb	 SHORT $LN24@Emplace_re

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000af	50		 push	 eax
  000b0	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000b5	eb 06		 jmp	 SHORT $LN68@Emplace_re
$LN24@Emplace_re:

; 136  :         return ::operator new(_Bytes);

  000b7	50		 push	 eax
  000b8	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN68@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 880  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  000bd	8b f8		 mov	 edi, eax
  000bf	83 c4 04	 add	 esp, 4
$LN22@Emplace_re:
  000c2	8b 45 fc	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
  000c5	0f 57 c0	 xorps	 xmm0, xmm0

; 881  : 
; 882  :         _Reallocation_guard _Guard{_Al, _Newvec, _Newcapacity, _Constructed_last, _Constructed_last};

  000c8	89 5d e0	 mov	 DWORD PTR __Guard$[ebp], ebx
  000cb	89 75 e8	 mov	 DWORD PTR __Guard$[ebp+8], esi
  000ce	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000d1	8d 0c c7	 lea	 ecx, DWORD PTR [edi+eax*8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000d4	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 880  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  000d7	8d 41 18	 lea	 eax, DWORD PTR [ecx+24]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 498  :     size_type _Mysize = 0; // current length of string (size)

  000da	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  000e1	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 880  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  000e8	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax

; 881  : 
; 882  :         _Reallocation_guard _Guard{_Al, _Newvec, _Newcapacity, _Constructed_last, _Constructed_last};

  000eb	89 45 f0	 mov	 DWORD PTR __Guard$[ebp+16], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000ee	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 880  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  000f1	89 4d f4	 mov	 DWORD PTR _this$1$[ebp], ecx

; 883  :         auto& _Constructed_first = _Guard._Constructed_first;
; 884  : 
; 885  :         _Alty_traits::construct(_Al, _STD _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);
; 886  :         _Constructed_first = _Newvec + _Whereoff;

  000f4	89 4d ec	 mov	 DWORD PTR __Guard$[ebp+12], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000f7	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  000fa	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  000fd	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  00102	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 888  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00107	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1264 :                 _Right_data._Mysize = 0;

  0010a	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 1265 :                 _Right_data._Myres  = _Small_string_capacity;

  00111	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 1266 :                 _Right_data._Activate_SSO_buffer();
; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  00118	c6 00 00	 mov	 BYTE PTR [eax], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 888  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  0011b	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  0011e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00120	3b ca		 cmp	 ecx, edx
  00122	75 04		 jne	 SHORT $LN3@Emplace_re

; 889  :             if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 890  :                 _STD _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);

  00124	8b cf		 mov	 ecx, edi

; 891  :             } else {
; 892  :                 _STD _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);
; 893  :             }
; 894  :         } else { // provide basic guarantee

  00126	eb 18		 jmp	 SHORT $LN4@Emplace_re
$LN3@Emplace_re:

; 895  :             _STD _Uninitialized_move(_Myfirst, _Whereptr, _Newvec, _Al);

  00128	53		 push	 ebx
  00129	57		 push	 edi
  0012a	51		 push	 ecx
  0012b	50		 push	 eax
  0012c	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 896  :             _Constructed_first = _Newvec;
; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  00131	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00134	83 c4 10	 add	 esp, 16			; 00000010H
  00137	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  0013a	8b 4d fc	 mov	 ecx, DWORD PTR $T1[ebp]
  0013d	89 7d ec	 mov	 DWORD PTR __Guard$[ebp+12], edi
$LN4@Emplace_re:

; 898  :         }
; 899  : 
; 900  :         _Guard._New_begin = nullptr;

  00140	53		 push	 ebx
  00141	51		 push	 ecx
  00142	52		 push	 edx
  00143	50		 push	 eax
  00144	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 901  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  00149	8b 45 f8	 mov	 eax, DWORD PTR __Oldsize$1$[ebp]
  0014c	83 c4 10	 add	 esp, 16			; 00000010H
  0014f	40		 inc	 eax
  00150	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR __Guard$[ebp+4], 0
  00157	8b cb		 mov	 ecx, ebx
  00159	56		 push	 esi
  0015a	50		 push	 eax
  0015b	57		 push	 edi
  0015c	e8 00 00 00 00	 call	 ?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array

; 902  :         return _Newvec + _Whereoff;

  00161	8d 4d e0	 lea	 ecx, DWORD PTR __Guard$[ebp]
  00164	e8 00 00 00 00	 call	 ??1_Reallocation_guard@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reallocation_guard::~_Reallocation_guard
  00169	8b 45 f4	 mov	 eax, DWORD PTR _this$1$[ebp]

; 903  :     }

  0016c	5f		 pop	 edi
  0016d	5e		 pop	 esi
  0016e	5b		 pop	 ebx
  0016f	8b e5		 mov	 esp, ebp
  00171	5d		 pop	 ebp
  00172	c2 08 00	 ret	 8
$LN70@Emplace_re:

; 873  :             _Xlength();

  00175	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
$LN71@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  0017a	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN67@Emplace_re:
  0017f	cc		 int	 3
??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 1094 : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1098 :         for (; _First != _Last; ++_First) {

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 48		 je	 SHORT $LN55@Destroy_ra
  0000f	90		 npad	 1
$LL4@Destroy_ra:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00010	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00013	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00016	76 27		 jbe	 SHORT $LN33@Destroy_ra
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00018	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0001a	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0001b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00021	72 12		 jb	 SHORT $LN44@Destroy_ra

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00023	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00026	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00029	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0002b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00031	77 28		 ja	 SHORT $LN41@Destroy_ra

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00033	8b c2		 mov	 eax, edx
$LN44@Destroy_ra:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00035	51		 push	 ecx
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003c	83 c4 08	 add	 esp, 8
$LN33@Destroy_ra:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  0003f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00046	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0004d	c6 06 00	 mov	 BYTE PTR [esi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1098 :         for (; _First != _Last; ++_First) {

  00050	83 c6 18	 add	 esi, 24			; 00000018H
  00053	3b f7		 cmp	 esi, edi
  00055	75 b9		 jne	 SHORT $LL4@Destroy_ra
$LN55@Destroy_ra:
  00057	5f		 pop	 edi

; 1099 :             allocator_traits<_Alloc>::destroy(_Al, _STD _Unfancy(_First));
; 1100 :         }
; 1101 :     }
; 1102 : }

  00058	5e		 pop	 esi
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
$LN41@Destroy_ra:

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0005b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN62@Destroy_ra:
  00060	cc		 int	 3
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp
;	COMDAT ?FloatNumberToString@prt@@YAPBDM@Z
_TEXT	SEGMENT
_fNumber$ = 8						; size = 4
?FloatNumberToString@prt@@YAPBDM@Z PROC			; prt::FloatNumberToString, COMDAT

; 54   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fNumber$[ebp]

; 55   : 	static char szString[16+1];
; 56   : 	_snprintf(szString, sizeof(szString), "%f", fNumber);

  00008	83 ec 08	 sub	 esp, 8
  0000b	0f 5a c0	 cvtps2pd xmm0, xmm0
  0000e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00013	68 00 00 00 00	 push	 OFFSET ??_C@_02NJPGOMH@?$CFf@
  00018	6a 11		 push	 17			; 00000011H
  0001a	68 00 00 00 00	 push	 OFFSET ?szString@?1??FloatNumberToString@prt@@YAPBDM@Z@4PADA
  0001f	e8 00 00 00 00	 call	 __snprintf
  00024	83 c4 14	 add	 esp, 20			; 00000014H

; 57   : 	return szString;

  00027	b8 00 00 00 00	 mov	 eax, OFFSET ?szString@?1??FloatNumberToString@prt@@YAPBDM@Z@4PADA

; 58   : }

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
?FloatNumberToString@prt@@YAPBDM@Z ENDP			; prt::FloatNumberToString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp
;	COMDAT ?IntegerNumberToString@prt@@YAPBDH@Z
_TEXT	SEGMENT
_iNumber$ = 8						; size = 4
?IntegerNumberToString@prt@@YAPBDH@Z PROC		; prt::IntegerNumberToString, COMDAT

; 47   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 48   : 	static char szString[16+1];
; 49   : 	_snprintf(szString, sizeof(szString), "%d", iNumber);

  00003	ff 75 08	 push	 DWORD PTR _iNumber$[ebp]
  00006	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  0000b	6a 11		 push	 17			; 00000011H
  0000d	68 00 00 00 00	 push	 OFFSET ?szString@?1??IntegerNumberToString@prt@@YAPBDH@Z@4PADA
  00012	e8 00 00 00 00	 call	 __snprintf
  00017	83 c4 10	 add	 esp, 16			; 00000010H

; 50   : 	return szString;

  0001a	b8 00 00 00 00	 mov	 eax, OFFSET ?szString@?1??IntegerNumberToString@prt@@YAPBDH@Z@4PADA

; 51   : }

  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?IntegerNumberToString@prt@@YAPBDH@Z ENDP		; prt::IntegerNumberToString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 182  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 183  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 184  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 185  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 136  :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 186  :         _Throw_bad_array_new_length(); // add overflow
; 187  :     }
; 188  : 
; 189  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 136  :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 191  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 192  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 193  : 
; 194  : #ifdef _DEBUG
; 195  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 196  : #endif // defined(_DEBUG)
; 197  :     return _Ptr;
; 198  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Find_last_vectorized@$$CBDD@std@@YAPBDQBD0D@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 1
??$_Find_last_vectorized@$$CBDD@std@@YAPBDQBD0D@Z PROC	; std::_Find_last_vectorized<char const ,char>, COMDAT

; 226  : _Ty* _Find_last_vectorized(_Ty* const _First, _Ty* const _Last, const _TVal _Val) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 227  :     if constexpr (is_pointer_v<_TVal> || is_null_pointer_v<_TVal>) {
; 228  : #ifdef _WIN64
; 229  :         return const_cast<_Ty*>(
; 230  :             static_cast<const _Ty*>(::__std_find_last_trivial_8(_First, _Last, reinterpret_cast<uint64_t>(_Val))));
; 231  : #else
; 232  :         return const_cast<_Ty*>(
; 233  :             static_cast<const _Ty*>(::__std_find_last_trivial_4(_First, _Last, reinterpret_cast<uint32_t>(_Val))));
; 234  : #endif
; 235  :     } else if constexpr (sizeof(_Ty) == 1) {
; 236  :         return const_cast<_Ty*>(

  00003	ff 75 10	 push	 DWORD PTR __Val$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00009	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000c	e8 00 00 00 00	 call	 ___std_find_last_trivial_1@12

; 237  :             static_cast<const _Ty*>(::__std_find_last_trivial_1(_First, _Last, static_cast<uint8_t>(_Val))));
; 238  :     } else if constexpr (sizeof(_Ty) == 2) {
; 239  :         return const_cast<_Ty*>(
; 240  :             static_cast<const _Ty*>(::__std_find_last_trivial_2(_First, _Last, static_cast<uint16_t>(_Val))));
; 241  :     } else if constexpr (sizeof(_Ty) == 4) {
; 242  :         return const_cast<_Ty*>(
; 243  :             static_cast<const _Ty*>(::__std_find_last_trivial_4(_First, _Last, static_cast<uint32_t>(_Val))));
; 244  :     } else if constexpr (sizeof(_Ty) == 8) {
; 245  :         return const_cast<_Ty*>(
; 246  :             static_cast<const _Ty*>(::__std_find_last_trivial_8(_First, _Last, static_cast<uint64_t>(_Val))));
; 247  :     } else {
; 248  :         _STL_INTERNAL_STATIC_ASSERT(false); // unexpected size
; 249  :     }
; 250  : }

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Find_last_vectorized@$$CBDD@std@@YAPBDQBD0D@Z ENDP	; std::_Find_last_vectorized<char const ,char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
__Count$ = 12						; size = 4
$T1 = 12						; size = 4
??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>, COMDAT
; _this$ = ecx

; 847  :     _CONSTEXPR20 void _Construct(const _Char_or_ptr _Arg, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 848  :         auto& _My_data = _Mypair._Myval2;
; 849  :         _STL_INTERNAL_CHECK(!_My_data._Large_mode_engaged());
; 850  : 
; 851  :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 852  :             _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Char_or_ptr, _Elem>);
; 853  :         } else {
; 854  :             _STL_INTERNAL_STATIC_ASSERT(_Is_elem_cptr<_Char_or_ptr>::value);
; 855  :         }
; 856  : 
; 857  :         if (_Count > max_size()) {

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Count$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  00010	0f 87 95 00 00
	00		 ja	 $LN40@Construct

; 859  :         }
; 860  : 
; 861  :         auto& _Al       = _Getal();
; 862  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 863  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 864  : 
; 865  :         if (_Count <= _Small_string_capacity) {

  00016	83 fe 0f	 cmp	 esi, 15			; 0000000fH
  00019	77 21		 ja	 SHORT $LN3@Construct
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0001b	56		 push	 esi
  0001c	ff 75 08	 push	 DWORD PTR __Arg$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  0001f	89 73 10	 mov	 DWORD PTR [ebx+16], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00022	53		 push	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 867  :             _My_data._Myres  = _Small_string_capacity;

  00023	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0002a	e8 00 00 00 00	 call	 _memcpy
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00032	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0
  00036	5e		 pop	 esi

; 899  :         } else { // _Strat == _Construct_strategy::_From_string
; 900  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);
; 901  :         }
; 902  : 
; 903  :         _ASAN_STRING_CREATE(*this);
; 904  :         _Proxy._Release();
; 905  :     }

  00037	5b		 pop	 ebx
  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
$LN3@Construct:
  0003c	57		 push	 edi

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  0003d	8b fe		 mov	 edi, esi
  0003f	83 cf 0f	 or	 edi, 15			; 0000000fH
  00042	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00048	76 12		 jbe	 SHORT $LN9@Construct

; 2944 :             return _Max;

  0004a	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0004f	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0005a	eb 26		 jmp	 SHORT $LN38@Construct
$LN9@Construct:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0005c	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00061	3b f8		 cmp	 edi, eax
  00063	0f 42 f8	 cmovb	 edi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  00066	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  00069	85 c0		 test	 eax, eax
  0006b	74 18		 je	 SHORT $LN37@Construct
$LN23@Construct:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  0006d	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00072	72 08		 jb	 SHORT $LN24@Construct

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0007a	eb 06		 jmp	 SHORT $LN38@Construct
$LN24@Construct:

; 136  :         return ::operator new(_Bytes);

  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN38@Construct:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00082	83 c4 04	 add	 esp, 4
$LN37@Construct:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00085	56		 push	 esi
  00086	ff 75 08	 push	 DWORD PTR __Arg$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00089	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0008c	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0008d	89 03		 mov	 DWORD PTR [ebx], eax

; 890  : 
; 891  :         _My_data._Mysize = _Count;

  0008f	89 73 10	 mov	 DWORD PTR [ebx+16], esi

; 892  :         _My_data._Myres  = _New_capacity;

  00092	89 7b 14	 mov	 DWORD PTR [ebx+20], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00095	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  0009a	8b 45 0c	 mov	 eax, DWORD PTR $T1[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0009d	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000a0	5f		 pop	 edi
  000a1	c6 04 30 00	 mov	 BYTE PTR [eax+esi], 0
  000a5	5e		 pop	 esi

; 899  :         } else { // _Strat == _Construct_strategy::_From_string
; 900  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);
; 901  :         }
; 902  : 
; 903  :         _ASAN_STRING_CREATE(*this);
; 904  :         _Proxy._Release();
; 905  :     }

  000a6	5b		 pop	 ebx
  000a7	5d		 pop	 ebp
  000a8	c2 08 00	 ret	 8
$LN40@Construct:

; 858  :             _Xlen_string(); // result too long

  000ab	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN36@Construct:
  000b0	cc		 int	 3
??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp
;	COMDAT ?SPixelPosition_CalculateDistanceSq3d@@YAMABUD3DXVECTOR3@@0@Z
_TEXT	SEGMENT
_c_rkPPosLeft$ = 8					; size = 4
tv184 = 8						; size = 4
_c_rkPPosRight$ = 12					; size = 4
?SPixelPosition_CalculateDistanceSq3d@@YAMABUD3DXVECTOR3@@0@Z PROC ; SPixelPosition_CalculateDistanceSq3d, COMDAT

; 16   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 17   : 	float dx=c_rkPPosLeft.x-c_rkPPosRight.x;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _c_rkPPosLeft$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR _c_rkPPosRight$[ebp]
  00009	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]

; 18   : 	float dy=c_rkPPosLeft.y-c_rkPPosRight.y;

  0000d	f3 0f 10 51 04	 movss	 xmm2, DWORD PTR [ecx+4]
  00012	f3 0f 5c 50 04	 subss	 xmm2, DWORD PTR [eax+4]
  00017	f3 0f 5c 08	 subss	 xmm1, DWORD PTR [eax]

; 19   : 	float dz=c_rkPPosLeft.z-c_rkPPosRight.z;

  0001b	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00020	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]

; 20   : 
; 21   : 	return dx*dx+dy*dy+dz*dz;

  00025	f3 0f 59 d2	 mulss	 xmm2, xmm2
  00029	f3 0f 59 c9	 mulss	 xmm1, xmm1
  0002d	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00031	f3 0f 58 d1	 addss	 xmm2, xmm1
  00035	f3 0f 58 d0	 addss	 xmm2, xmm0
  00039	f3 0f 11 55 08	 movss	 DWORD PTR tv184[ebp], xmm2
  0003e	d9 45 08	 fld	 DWORD PTR tv184[ebp]

; 22   : }

  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
?SPixelPosition_CalculateDistanceSq3d@@YAMABUD3DXVECTOR3@@0@Z ENDP ; SPixelPosition_CalculateDistanceSq3d
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp
;	COMDAT ?GetFogFarDistance@SEnvironmentData@@QBEMXZ
_TEXT	SEGMENT
?GetFogFarDistance@SEnvironmentData@@QBEMXZ PROC	; SEnvironmentData::GetFogFarDistance, COMDAT
; _this$ = ecx

; 12   : 	return m_fFogFarDistance;

  00000	d9 81 28 01 00
	00		 fld	 DWORD PTR [ecx+296]

; 13   : }

  00006	c3		 ret	 0
?GetFogFarDistance@SEnvironmentData@@QBEMXZ ENDP	; SEnvironmentData::GetFogFarDistance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp
;	COMDAT ?GetFogNearDistance@SEnvironmentData@@QBEMXZ
_TEXT	SEGMENT
?GetFogNearDistance@SEnvironmentData@@QBEMXZ PROC	; SEnvironmentData::GetFogNearDistance, COMDAT
; _this$ = ecx

; 7    : 	return m_fFogNearDistance;

  00000	d9 81 24 01 00
	00		 fld	 DWORD PTR [ecx+292]

; 8    : }

  00006	c3		 ret	 0
?GetFogNearDistance@SEnvironmentData@@QBEMXZ ENDP	; SEnvironmentData::GetFogNearDistance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp
;	COMDAT ?PropertyDungeonBlockStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyDungeonBlock@1@@Z
_TEXT	SEGMENT
_c_pszPropertyType$ = -100				; size = 4
_c_pszDungeonBlockFileName$ = -96			; size = 4
_c_pszPropertyName$ = -92				; size = 4
$T2 = -92						; size = 1
$T3 = -88						; size = 24
$T4 = -64						; size = 24
$T5 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pProperty$ = 8						; size = 4
_pData$ = 12						; size = 4
?PropertyDungeonBlockStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyDungeonBlock@1@@Z PROC ; prt::PropertyDungeonBlockStringToData, COMDAT

; 272  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PropertyDungeonBlockStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyDungeonBlock@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 58	 sub	 esp, 88			; 00000058H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b 75 08	 mov	 esi, DWORD PTR _pProperty$[ebp]

; 273  : 	const char * c_pszPropertyType;
; 274  : 	const char * c_pszPropertyName;
; 275  : 
; 276  : 	if (!pProperty->GetString("PropertyType", &c_pszPropertyType))

  0002d	8d 45 9c	 lea	 eax, DWORD PTR _c_pszPropertyType$[ebp]
  00030	8b 7d 0c	 mov	 edi, DWORD PTR _pData$[ebp]
  00033	8b ce		 mov	 ecx, esi
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0N@FPEBPNJJ@PropertyType@
  0003b	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  00040	84 c0		 test	 al, al
  00042	0f 84 26 01 00
	00		 je	 $LN102@PropertyDu

; 277  : 		return false;
; 278  : 
; 279  : 	if (!pProperty->GetString("PropertyName", &c_pszPropertyName))

  00048	8d 45 a4	 lea	 eax, DWORD PTR _c_pszPropertyName$[ebp]
  0004b	8b ce		 mov	 ecx, esi
  0004d	50		 push	 eax
  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PEECDNOJ@PropertyName@
  00053	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  00058	84 c0		 test	 al, al
  0005a	0f 84 0e 01 00
	00		 je	 $LN102@PropertyDu

; 280  : 		return false;
; 281  : 
; 282  : 	if (strcmp(c_pszPropertyType, "DungeonBlock"))

  00060	8b 45 9c	 mov	 eax, DWORD PTR _c_pszPropertyType$[ebp]
  00063	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0N@HFPGEGLM@DungeonBlock@
$LL106@PropertyDu:
  00068	8a 10		 mov	 dl, BYTE PTR [eax]
  0006a	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0006c	75 1a		 jne	 SHORT $LN107@PropertyDu
  0006e	84 d2		 test	 dl, dl
  00070	74 12		 je	 SHORT $LN108@PropertyDu
  00072	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00075	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00078	75 0e		 jne	 SHORT $LN107@PropertyDu
  0007a	83 c0 02	 add	 eax, 2
  0007d	83 c1 02	 add	 ecx, 2
  00080	84 d2		 test	 dl, dl
  00082	75 e4		 jne	 SHORT $LL106@PropertyDu
$LN108@PropertyDu:
  00084	33 c0		 xor	 eax, eax
  00086	eb 05		 jmp	 SHORT $LN109@PropertyDu
$LN107@PropertyDu:
  00088	1b c0		 sbb	 eax, eax
  0008a	83 c8 01	 or	 eax, 1
$LN109@PropertyDu:
  0008d	85 c0		 test	 eax, eax
  0008f	0f 85 d9 00 00
	00		 jne	 $LN102@PropertyDu

; 283  : 		return false;
; 284  : 
; 285  : 	pData->strName = c_pszPropertyName;

  00095	ff 75 a4	 push	 DWORD PTR _c_pszPropertyName$[ebp]
  00098	8b cf		 mov	 ecx, edi
  0009a	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 286  : 
; 287  : 	///////////////////////////////////////////////////////////////////////////////////
; 288  : 
; 289  : 	const char * c_pszDungeonBlockFileName = NULL;
; 290  : 	if (!pProperty->GetString("dungeonblockfile", &c_pszDungeonBlockFileName))

  0009f	8d 45 a0	 lea	 eax, DWORD PTR _c_pszDungeonBlockFileName$[ebp]
  000a2	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR _c_pszDungeonBlockFileName$[ebp], 0
  000a9	50		 push	 eax
  000aa	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@CJNPGFDA@dungeonblockfile@
  000af	8b ce		 mov	 ecx, esi
  000b1	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  000b6	84 c0		 test	 al, al
  000b8	0f 84 b0 00 00
	00		 je	 $LN102@PropertyDu

; 292  : 
; 293  : 	pData->strFileName = c_pszDungeonBlockFileName;

  000be	ff 75 a0	 push	 DWORD PTR _c_pszDungeonBlockFileName$[ebp]
  000c1	8d 77 18	 lea	 esi, DWORD PTR [edi+24]
  000c4	8b ce		 mov	 ecx, esi
  000c6	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000cb	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_06OIKCOENH@?4mdatr@
  000d0	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000d3	0f 11 45 d8	 movups	 XMMWORD PTR $T5[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d7	89 45 d8	 mov	 DWORD PTR $T5[ebp], eax
  000da	66 a1 04 00 00
	00		 mov	 ax, WORD PTR ??_C@_06OIKCOENH@?4mdatr@+4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  000e0	c7 45 e8 06 00
	00 00		 mov	 DWORD PTR $T5[ebp+16], 6

; 867  :             _My_data._Myres  = _Small_string_capacity;

  000e7	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T5[ebp+20], 15 ; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000ee	66 89 45 dc	 mov	 WORD PTR $T5[ebp+4], ax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  000f2	c6 45 de 00	 mov	 BYTE PTR $T5[ebp+6], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp

; 294  : 	pData->strAttributeDataFileName = CFileNameHelper::NoExtension(pData->strFileName) + string(".mdatr");

  000f6	8d 45 a8	 lea	 eax, DWORD PTR $T3[ebp]
  000f9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00100	56		 push	 esi
  00101	50		 push	 eax
  00102	e8 00 00 00 00	 call	 ?NoExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; CFileNameHelper::NoExtension
  00107	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3192 :     return {_String_constructor_concat_tag{}, _Left, _Right};

  0010a	8d 4d d8	 lea	 ecx, DWORD PTR $T5[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp

; 294  : 	pData->strAttributeDataFileName = CFileNameHelper::NoExtension(pData->strFileName) + string(".mdatr");

  0010d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3192 :     return {_String_constructor_concat_tag{}, _Left, _Right};

  00111	51		 push	 ecx
  00112	50		 push	 eax
  00113	ff 75 a4	 push	 DWORD PTR $T2[ebp]
  00116	8d 4d c0	 lea	 ecx, DWORD PTR $T4[ebp]
  00119	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp

; 294  : 	pData->strAttributeDataFileName = CFileNameHelper::NoExtension(pData->strFileName) + string(".mdatr");

  0011e	8d 45 c0	 lea	 eax, DWORD PTR $T4[ebp]
  00121	50		 push	 eax
  00122	8d 4f 30	 lea	 ecx, DWORD PTR [edi+48]
  00125	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  0012a	8d 4d c0	 lea	 ecx, DWORD PTR $T4[ebp]
  0012d	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00132	8d 4d a8	 lea	 ecx, DWORD PTR $T3[ebp]
  00135	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0013a	8b 4d ec	 mov	 ecx, DWORD PTR $T5[ebp+20]
  0013d	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00140	76 28		 jbe	 SHORT $LN84@PropertyDu
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00142	8b 55 d8	 mov	 edx, DWORD PTR $T5[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00145	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00146	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00148	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0014e	72 10		 jb	 SHORT $LN95@PropertyDu

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00150	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00153	83 c1 23	 add	 ecx, 35			; 00000023H
  00156	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00158	83 c0 fc	 add	 eax, -4			; fffffffcH
  0015b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0015e	77 2b		 ja	 SHORT $LN113@PropertyDu
$LN95@PropertyDu:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00160	51		 push	 ecx
  00161	52		 push	 edx
  00162	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00167	83 c4 08	 add	 esp, 8
$LN84@PropertyDu:
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp

; 296  : 	return true;

  0016a	b0 01		 mov	 al, 1
  0016c	eb 02		 jmp	 SHORT $LN1@PropertyDu
$LN102@PropertyDu:

; 291  : 		return false;

  0016e	32 c0		 xor	 al, al
$LN1@PropertyDu:

; 297  : }

  00170	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00173	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0017a	59		 pop	 ecx
  0017b	5f		 pop	 edi
  0017c	5e		 pop	 esi
  0017d	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00180	33 cd		 xor	 ecx, ebp
  00182	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00187	8b e5		 mov	 esp, ebp
  00189	5d		 pop	 ebp
  0018a	c3		 ret	 0
$LN113@PropertyDu:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0018b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN111@PropertyDu:
  00190	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PropertyDungeonBlockStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyDungeonBlock@1@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T5[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?PropertyDungeonBlockStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyDungeonBlock@1@@Z$1:
  00008	8d 4d a8	 lea	 ecx, DWORD PTR $T3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?PropertyDungeonBlockStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyDungeonBlock@1@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a 9c	 mov	 ecx, DWORD PTR [edx-100]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PropertyDungeonBlockStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyDungeonBlock@1@@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PropertyDungeonBlockStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyDungeonBlock@1@@Z ENDP ; prt::PropertyDungeonBlockStringToData
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp
;	COMDAT ?PropertyDungeonBlockDataToString@prt@@YA_NPAUTPropertyDungeonBlock@1@PAVCProperty@@@Z
_TEXT	SEGMENT
_pData$ = 8						; size = 4
_pProperty$ = 12					; size = 4
?PropertyDungeonBlockDataToString@prt@@YA_NPAUTPropertyDungeonBlock@1@PAVCProperty@@@Z PROC ; prt::PropertyDungeonBlockDataToString, COMDAT

; 264  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 265  : 	pProperty->Clear();

  00005	8b 7d 0c	 mov	 edi, DWORD PTR _pProperty$[ebp]
  00008	8b cf		 mov	 ecx, edi
  0000a	e8 00 00 00 00	 call	 ?Clear@CProperty@@QAEXXZ ; CProperty::Clear

; 266  : 	pProperty->PutString("PropertyType", "DungeonBlock");

  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_0N@HFPGEGLM@DungeonBlock@
  00014	68 00 00 00 00	 push	 OFFSET ??_C@_0N@FPEBPNJJ@PropertyType@
  00019	8b cf		 mov	 ecx, edi
  0001b	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 425  :         const value_type* _Result = _Bx._Buf;

  00020	8b 75 08	 mov	 esi, DWORD PTR _pData$[ebp]
  00023	8b c6		 mov	 eax, esi

; 434  :         return _Myres > _Small_string_capacity;

  00025	83 7e 14 0f	 cmp	 DWORD PTR [esi+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  00029	76 02		 jbe	 SHORT $LN7@PropertyDu

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0002b	8b 06		 mov	 eax, DWORD PTR [esi]
$LN7@PropertyDu:
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp

; 267  : 	pProperty->PutString("PropertyName", pData->strName.c_str());

  0002d	50		 push	 eax
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PEECDNOJ@PropertyName@
  00033	8b cf		 mov	 ecx, edi
  00035	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0003a	83 7e 2c 0f	 cmp	 DWORD PTR [esi+44], 15	; 0000000fH

; 2328 :         return _Mypair._Myval2._Myptr();

  0003e	8d 46 18	 lea	 eax, DWORD PTR [esi+24]

; 426  :         if (_Large_mode_engaged()) {

  00041	76 02		 jbe	 SHORT $LN17@PropertyDu

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00043	8b 00		 mov	 eax, DWORD PTR [eax]
$LN17@PropertyDu:
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp

; 268  : 	pProperty->PutString("DungeonBlockFile", pData->strFileName.c_str());

  00045	50		 push	 eax
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IJOAHLBO@DungeonBlockFile@
  0004b	8b cf		 mov	 ecx, edi
  0004d	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString

; 269  : 	return true;

  00052	5f		 pop	 edi
  00053	b0 01		 mov	 al, 1
  00055	5e		 pop	 esi

; 270  : }

  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
?PropertyDungeonBlockDataToString@prt@@YA_NPAUTPropertyDungeonBlock@1@PAVCProperty@@@Z ENDP ; prt::PropertyDungeonBlockDataToString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp
;	COMDAT ?PropertyAmbienceStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyAmbience@1@@Z
_TEXT	SEGMENT
_AmbienceSoundVector$ = -52				; size = 12
_c_pszPlayIntervalVariation$ = -40			; size = 4
_c_pszPlayInterval$ = -36				; size = 4
_c_pszPlayType$ = -32					; size = 4
_c_pszPropertyName$ = -28				; size = 4
_c_pszPropertyType$ = -24				; size = 4
_c_pszMaxVolumeAreaPercentage$ = -20			; size = 4
$T2 = -13						; size = 1
__$EHRec$ = -12						; size = 12
_pProperty$ = 8						; size = 4
_pData$ = 12						; size = 4
?PropertyAmbienceStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyAmbience@1@@Z PROC ; prt::PropertyAmbienceStringToData, COMDAT

; 217  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PropertyAmbienceStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyAmbience@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 218  : 	const char * c_pszPropertyType;
; 219  : 	const char * c_pszPropertyName;
; 220  : 
; 221  : 	if (!pProperty->GetString("PropertyType", &c_pszPropertyType))

  00028	8b 75 08	 mov	 esi, DWORD PTR _pProperty$[ebp]
  0002b	8d 45 e8	 lea	 eax, DWORD PTR _c_pszPropertyType$[ebp]
  0002e	8b 7d 0c	 mov	 edi, DWORD PTR _pData$[ebp]
  00031	8b ce		 mov	 ecx, esi
  00033	50		 push	 eax
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0N@FPEBPNJJ@PropertyType@
  00039	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  0003e	84 c0		 test	 al, al
  00040	0f 84 1d 02 00
	00		 je	 $LN211@PropertyAm

; 222  : 		return false;
; 223  : 
; 224  : 	if (!pProperty->GetString("PropertyName", &c_pszPropertyName))

  00046	8d 45 e4	 lea	 eax, DWORD PTR _c_pszPropertyName$[ebp]
  00049	8b ce		 mov	 ecx, esi
  0004b	50		 push	 eax
  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PEECDNOJ@PropertyName@
  00051	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  00056	84 c0		 test	 al, al
  00058	0f 84 05 02 00
	00		 je	 $LN211@PropertyAm

; 225  : 		return false;
; 226  : 
; 227  : 	if (strcmp(c_pszPropertyType, "Ambience"))

  0005e	8b 45 e8	 mov	 eax, DWORD PTR _c_pszPropertyType$[ebp]
  00061	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_08HABDNILH@Ambience@
$LL214@PropertyAm:
  00066	8a 10		 mov	 dl, BYTE PTR [eax]
  00068	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0006a	75 1a		 jne	 SHORT $LN215@PropertyAm
  0006c	84 d2		 test	 dl, dl
  0006e	74 12		 je	 SHORT $LN216@PropertyAm
  00070	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00073	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00076	75 0e		 jne	 SHORT $LN215@PropertyAm
  00078	83 c0 02	 add	 eax, 2
  0007b	83 c1 02	 add	 ecx, 2
  0007e	84 d2		 test	 dl, dl
  00080	75 e4		 jne	 SHORT $LL214@PropertyAm
$LN216@PropertyAm:
  00082	33 c0		 xor	 eax, eax
  00084	eb 05		 jmp	 SHORT $LN217@PropertyAm
$LN215@PropertyAm:
  00086	1b c0		 sbb	 eax, eax
  00088	83 c8 01	 or	 eax, 1
$LN217@PropertyAm:
  0008b	85 c0		 test	 eax, eax
  0008d	0f 85 d0 01 00
	00		 jne	 $LN211@PropertyAm

; 229  : 
; 230  : 	pData->strName = c_pszPropertyName;

  00093	ff 75 e4	 push	 DWORD PTR _c_pszPropertyName$[ebp]
  00096	8b cf		 mov	 ecx, edi
  00098	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 231  : 
; 232  : 	///////////////////////////////////////////////////////////////////////////////////
; 233  : 
; 234  : 	const char * c_pszPlayType;
; 235  : 	const char * c_pszPlayInterval;
; 236  : 	const char * c_pszPlayIntervalVariation;
; 237  : 	const char * c_pszMaxVolumeAreaPercentage = NULL;

  0009d	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _c_pszMaxVolumeAreaPercentage$[ebp], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  000a4	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _AmbienceSoundVector$[ebp], 0
  000ab	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _AmbienceSoundVector$[ebp+4], 0
  000b2	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _AmbienceSoundVector$[ebp+8], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp

; 239  : 	if (!pProperty->GetString("PlayType", &c_pszPlayType))

  000b9	8d 45 e0	 lea	 eax, DWORD PTR _c_pszPlayType$[ebp]
  000bc	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000c3	50		 push	 eax
  000c4	68 00 00 00 00	 push	 OFFSET ??_C@_08HKNDHFCE@PlayType@
  000c9	8b ce		 mov	 ecx, esi
  000cb	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  000d0	84 c0		 test	 al, al
  000d2	0f 84 d2 00 00
	00		 je	 $LN18@PropertyAm

; 240  : 		return false;
; 241  : 	if (!pProperty->GetString("PlayInterval", &c_pszPlayInterval))

  000d8	8d 45 dc	 lea	 eax, DWORD PTR _c_pszPlayInterval$[ebp]
  000db	8b ce		 mov	 ecx, esi
  000dd	50		 push	 eax
  000de	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PFAKOMHI@PlayInterval@
  000e3	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  000e8	84 c0		 test	 al, al
  000ea	0f 84 ba 00 00
	00		 je	 $LN18@PropertyAm

; 242  : 		return false;
; 243  : 	if (!pProperty->GetString("PlayIntervalVariation", &c_pszPlayIntervalVariation))

  000f0	8d 45 d8	 lea	 eax, DWORD PTR _c_pszPlayIntervalVariation$[ebp]
  000f3	8b ce		 mov	 ecx, esi
  000f5	50		 push	 eax
  000f6	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@EAEDJCHJ@PlayIntervalVariation@
  000fb	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  00100	84 c0		 test	 al, al
  00102	0f 84 a2 00 00
	00		 je	 $LN18@PropertyAm

; 244  : 		return false;
; 245  : 	if (!pProperty->GetString("MaxVolumeAreaPercentage", &c_pszMaxVolumeAreaPercentage))

  00108	8d 45 ec	 lea	 eax, DWORD PTR _c_pszMaxVolumeAreaPercentage$[ebp]
  0010b	8b ce		 mov	 ecx, esi
  0010d	50		 push	 eax
  0010e	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@DGADHCAB@MaxVolumeAreaPercentage@
  00113	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  00118	84 c0		 test	 al, al
  0011a	75 07		 jne	 SHORT $LN210@PropertyAm

; 246  : 	{
; 247  : 		pData->fMaxVolumeAreaPercentage = 0.0f;

  0011c	c7 47 38 00 00
	00 00		 mov	 DWORD PTR [edi+56], 0
$LN210@PropertyAm:

; 248  : 	}
; 249  : 	if (!pProperty->GetVector("AmbienceSoundVector", AmbienceSoundVector))

  00123	8d 45 cc	 lea	 eax, DWORD PTR _AmbienceSoundVector$[ebp]
  00126	8b ce		 mov	 ecx, esi
  00128	50		 push	 eax
  00129	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@CHLDPEGL@AmbienceSoundVector@
  0012e	e8 00 00 00 00	 call	 ?GetVector@CProperty@@QAE_NPBDAAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z ; CProperty::GetVector
  00133	84 c0		 test	 al, al
  00135	74 73		 je	 SHORT $LN18@PropertyAm

; 250  : 		return false;
; 251  : 
; 252  : 	pData->strPlayType = c_pszPlayType;

  00137	ff 75 e0	 push	 DWORD PTR _c_pszPlayType$[ebp]
  0013a	8d 4f 18	 lea	 ecx, DWORD PTR [edi+24]
  0013d	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 253  : 	pData->fPlayInterval = atof(c_pszPlayInterval);

  00142	ff 75 dc	 push	 DWORD PTR _c_pszPlayInterval$[ebp]
  00145	e8 00 00 00 00	 call	 _atof

; 254  : 	pData->fPlayIntervalVariation = atof(c_pszPlayIntervalVariation);

  0014a	ff 75 d8	 push	 DWORD PTR _c_pszPlayIntervalVariation$[ebp]
  0014d	d9 5f 30	 fstp	 DWORD PTR [edi+48]
  00150	e8 00 00 00 00	 call	 _atof

; 255  : 	if (c_pszMaxVolumeAreaPercentage)

  00155	8b 45 ec	 mov	 eax, DWORD PTR _c_pszMaxVolumeAreaPercentage$[ebp]
  00158	83 c4 08	 add	 esp, 8
  0015b	d9 5f 34	 fstp	 DWORD PTR [edi+52]
  0015e	85 c0		 test	 eax, eax
  00160	74 0c		 je	 SHORT $LN13@PropertyAm

; 256  : 		pData->fMaxVolumeAreaPercentage = atof(c_pszMaxVolumeAreaPercentage);

  00162	50		 push	 eax
  00163	e8 00 00 00 00	 call	 _atof
  00168	d9 5f 38	 fstp	 DWORD PTR [edi+56]
  0016b	83 c4 04	 add	 esp, 4
$LN13@PropertyAm:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0016e	8b 75 cc	 mov	 esi, DWORD PTR _AmbienceSoundVector$[ebp]
  00171	8b 5d d0	 mov	 ebx, DWORD PTR _AmbienceSoundVector$[ebp+4]
  00174	3b f3		 cmp	 esi, ebx
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp

; 257  : 	for (CTokenVector::iterator itor = AmbienceSoundVector.begin(); itor != AmbienceSoundVector.end(); ++itor)

  00176	74 2c		 je	 SHORT $LN3@PropertyAm
$LL4@PropertyAm:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  00178	8b 47 40	 mov	 eax, DWORD PTR [edi+64]
  0017b	56		 push	 esi
  0017c	3b 47 44	 cmp	 eax, DWORD PTR [edi+68]
  0017f	74 0d		 je	 SHORT $LN114@PropertyAm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 732  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00181	8b c8		 mov	 ecx, eax
  00183	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 854  :         ++_Mylast;

  00188	83 47 40 18	 add	 DWORD PTR [edi+64], 24	; 00000018H

; 830  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  0018c	eb 09		 jmp	 SHORT $LN2@PropertyAm
$LN114@PropertyAm:

; 831  :         }
; 832  : 
; 833  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0018e	50		 push	 eax
  0018f	8d 4f 3c	 lea	 ecx, DWORD PTR [edi+60]
  00192	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
$LN2@PropertyAm:

; 166  :         return _Ptr == _Right._Ptr;

  00197	8b 5d d0	 mov	 ebx, DWORD PTR _AmbienceSoundVector$[ebp+4]

; 82   :         ++_Ptr;

  0019a	83 c6 18	 add	 esi, 24			; 00000018H

; 166  :         return _Ptr == _Right._Ptr;

  0019d	3b f3		 cmp	 esi, ebx
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp

; 257  : 	for (CTokenVector::iterator itor = AmbienceSoundVector.begin(); itor != AmbienceSoundVector.end(); ++itor)

  0019f	75 d7		 jne	 SHORT $LL4@PropertyAm
  001a1	8b 75 cc	 mov	 esi, DWORD PTR _AmbienceSoundVector$[ebp]
$LN3@PropertyAm:

; 260  : 	return true;

  001a4	c6 45 f3 01	 mov	 BYTE PTR $T2[ebp], 1
  001a8	eb 0a		 jmp	 SHORT $LN19@PropertyAm
$LN18@PropertyAm:
  001aa	8b 5d d0	 mov	 ebx, DWORD PTR _AmbienceSoundVector$[ebp+4]
  001ad	8b 75 cc	 mov	 esi, DWORD PTR _AmbienceSoundVector$[ebp]
  001b0	c6 45 f3 00	 mov	 BYTE PTR $T2[ebp], 0
$LN19@PropertyAm:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  001b4	85 f6		 test	 esi, esi
  001b6	0f 84 92 00 00
	00		 je	 $LN124@PropertyAm

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);

  001bc	3b f3		 cmp	 esi, ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1098 :         for (; _First != _Last; ++_First) {

  001be	74 4e		 je	 SHORT $LN205@PropertyAm
$LL130@PropertyAm:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  001c0	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  001c3	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  001c6	76 2b		 jbe	 SHORT $LN159@PropertyAm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001c8	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  001ca	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  001cb	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001d1	72 16		 jb	 SHORT $LN170@PropertyAm

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001d3	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  001d6	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  001d9	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001db	83 c0 fc	 add	 eax, -4			; fffffffcH
  001de	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001e1	0f 87 90 00 00
	00		 ja	 $LN193@PropertyAm

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  001e7	8b c2		 mov	 eax, edx
$LN170@PropertyAm:

; 289  :         ::operator delete(_Ptr, _Bytes);

  001e9	51		 push	 ecx
  001ea	50		 push	 eax
  001eb	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001f0	83 c4 08	 add	 esp, 8
$LN159@PropertyAm:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  001f3	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  001fa	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00201	c6 06 00	 mov	 BYTE PTR [esi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1098 :         for (; _First != _Last; ++_First) {

  00204	83 c6 18	 add	 esi, 24			; 00000018H
  00207	3b f3		 cmp	 esi, ebx
  00209	75 b5		 jne	 SHORT $LL130@PropertyAm
  0020b	8b 75 cc	 mov	 esi, DWORD PTR _AmbienceSoundVector$[ebp]
$LN205@PropertyAm:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0020e	8b 4d d4	 mov	 ecx, DWORD PTR _AmbienceSoundVector$[ebp+8]
  00211	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00216	2b ce		 sub	 ecx, esi
  00218	f7 e9		 imul	 ecx
  0021a	c1 fa 02	 sar	 edx, 2
  0021d	8b c2		 mov	 eax, edx
  0021f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00222	03 c2		 add	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00224	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00227	8b c6		 mov	 eax, esi
  00229	c1 e1 03	 shl	 ecx, 3

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0022c	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00232	72 10		 jb	 SHORT $LN196@PropertyAm

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00234	8b 70 fc	 mov	 esi, DWORD PTR [eax-4]
  00237	83 c1 23	 add	 ecx, 35			; 00000023H
  0023a	2b c6		 sub	 eax, esi

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0023c	83 c0 fc	 add	 eax, -4			; fffffffcH
  0023f	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00242	77 33		 ja	 SHORT $LN193@PropertyAm
$LN196@PropertyAm:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00244	51		 push	 ecx
  00245	56		 push	 esi
  00246	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0024b	83 c4 08	 add	 esp, 8
$LN124@PropertyAm:
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp

; 260  : 	return true;

  0024e	8a 45 f3	 mov	 al, BYTE PTR $T2[ebp]

; 261  : }

  00251	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00254	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0025b	59		 pop	 ecx
  0025c	5f		 pop	 edi
  0025d	5e		 pop	 esi
  0025e	5b		 pop	 ebx
  0025f	8b e5		 mov	 esp, ebp
  00261	5d		 pop	 ebp
  00262	c3		 ret	 0
$LN211@PropertyAm:

; 228  : 		return false;

  00263	32 c0		 xor	 al, al

; 261  : }

  00265	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00268	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0026f	59		 pop	 ecx
  00270	5f		 pop	 edi
  00271	5e		 pop	 esi
  00272	5b		 pop	 ebx
  00273	8b e5		 mov	 esp, ebp
  00275	5d		 pop	 ebp
  00276	c3		 ret	 0
$LN193@PropertyAm:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00277	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN219@PropertyAm:
  0027c	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PropertyAmbienceStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyAmbience@1@@Z$0:
  00000	8d 4d cc	 lea	 ecx, DWORD PTR _AmbienceSoundVector$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?PropertyAmbienceStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyAmbience@1@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PropertyAmbienceStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyAmbience@1@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PropertyAmbienceStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyAmbience@1@@Z ENDP ; prt::PropertyAmbienceStringToData
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp
;	COMDAT ?PropertyAmbienceDataToString@prt@@YA_NPAUTPropertyAmbience@1@PAVCProperty@@@Z
_TEXT	SEGMENT
_pProperty$GSCopy$1$ = -60				; size = 4
tv857 = -56						; size = 4
_AmbienceSoundVector$ = -52				; size = 12
$T2 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pData$ = 8						; size = 4
_pProperty$ = 12					; size = 4
?PropertyAmbienceDataToString@prt@@YA_NPAUTPropertyAmbience@1@PAVCProperty@@@Z PROC ; prt::PropertyAmbienceDataToString, COMDAT

; 196  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PropertyAmbienceDataToString@prt@@YA_NPAUTPropertyAmbience@1@PAVCProperty@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 30	 sub	 esp, 48			; 00000030H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b 75 0c	 mov	 esi, DWORD PTR _pProperty$[ebp]

; 197  : 	pProperty->Clear();

  0002d	8b ce		 mov	 ecx, esi
  0002f	8b 7d 08	 mov	 edi, DWORD PTR _pData$[ebp]
  00032	89 75 c4	 mov	 DWORD PTR _pProperty$GSCopy$1$[ebp], esi
  00035	e8 00 00 00 00	 call	 ?Clear@CProperty@@QAEXXZ ; CProperty::Clear

; 198  : 	pProperty->PutString("PropertyType", "Ambience");

  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_08HABDNILH@Ambience@
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_0N@FPEBPNJJ@PropertyType@
  00044	8b ce		 mov	 ecx, esi
  00046	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0004b	83 7f 14 0f	 cmp	 DWORD PTR [edi+20], 15	; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  0004f	8b c7		 mov	 eax, edi

; 426  :         if (_Large_mode_engaged()) {

  00051	76 02		 jbe	 SHORT $LN12@PropertyAm

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00053	8b 07		 mov	 eax, DWORD PTR [edi]
$LN12@PropertyAm:
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp

; 199  : 	pProperty->PutString("PropertyName", pData->strName.c_str());

  00055	50		 push	 eax
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PEECDNOJ@PropertyName@
  0005b	8b ce		 mov	 ecx, esi
  0005d	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00062	83 7f 2c 0f	 cmp	 DWORD PTR [edi+44], 15	; 0000000fH

; 2328 :         return _Mypair._Myval2._Myptr();

  00066	8d 47 18	 lea	 eax, DWORD PTR [edi+24]

; 426  :         if (_Large_mode_engaged()) {

  00069	76 02		 jbe	 SHORT $LN22@PropertyAm

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0006b	8b 00		 mov	 eax, DWORD PTR [eax]
$LN22@PropertyAm:
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp

; 200  : 	pProperty->PutString("PlayType", pData->strPlayType.c_str());

  0006d	50		 push	 eax
  0006e	68 00 00 00 00	 push	 OFFSET ??_C@_08HKNDHFCE@PlayType@
  00073	8b ce		 mov	 ecx, esi
  00075	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString

; 201  : 	pProperty->PutString("PlayInterval", FloatNumberToString(pData->fPlayInterval));

  0007a	f3 0f 10 47 30	 movss	 xmm0, DWORD PTR [edi+48]
  0007f	51		 push	 ecx
  00080	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00085	e8 00 00 00 00	 call	 ?FloatNumberToString@prt@@YAPBDM@Z ; prt::FloatNumberToString
  0008a	83 c4 04	 add	 esp, 4
  0008d	8b ce		 mov	 ecx, esi
  0008f	50		 push	 eax
  00090	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PFAKOMHI@PlayInterval@
  00095	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString

; 202  : 	pProperty->PutString("PlayIntervalVariation", FloatNumberToString(pData->fPlayIntervalVariation));

  0009a	f3 0f 10 47 34	 movss	 xmm0, DWORD PTR [edi+52]
  0009f	51		 push	 ecx
  000a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a5	e8 00 00 00 00	 call	 ?FloatNumberToString@prt@@YAPBDM@Z ; prt::FloatNumberToString
  000aa	83 c4 04	 add	 esp, 4
  000ad	8b ce		 mov	 ecx, esi
  000af	50		 push	 eax
  000b0	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@EAEDJCHJ@PlayIntervalVariation@
  000b5	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString

; 203  : 	pProperty->PutString("MaxVolumeAreaPercentage", FloatNumberToString(pData->fMaxVolumeAreaPercentage));

  000ba	f3 0f 10 47 38	 movss	 xmm0, DWORD PTR [edi+56]
  000bf	51		 push	 ecx
  000c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c5	e8 00 00 00 00	 call	 ?FloatNumberToString@prt@@YAPBDM@Z ; prt::FloatNumberToString
  000ca	83 c4 04	 add	 esp, 4
  000cd	8b ce		 mov	 ecx, esi
  000cf	50		 push	 eax
  000d0	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@DGADHCAB@MaxVolumeAreaPercentage@
  000d5	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  000da	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _AmbienceSoundVector$[ebp], 0
  000e1	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _AmbienceSoundVector$[ebp+4], 0
  000e8	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _AmbienceSoundVector$[ebp+8], 0

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  000ef	8b 77 3c	 mov	 esi, DWORD PTR [edi+60]
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp

; 205  : 	CTokenVector AmbienceSoundVector;

  000f2	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  000f9	3b 77 40	 cmp	 esi, DWORD PTR [edi+64]
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp

; 207  : 	for (; itor != pData->AmbienceSoundVector.end(); ++itor)

  000fc	0f 84 bf 00 00
	00		 je	 $LN202@PropertyAm
$LL4@PropertyAm:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00102	83 7e 14 0f	 cmp	 DWORD PTR [esi+20], 15	; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  00106	8b d6		 mov	 edx, esi

; 426  :         if (_Large_mode_engaged()) {

  00108	76 02		 jbe	 SHORT $LN71@PropertyAm

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0010a	8b 16		 mov	 edx, DWORD PTR [esi]
$LN71@PropertyAm:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0010c	8b ca		 mov	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 498  :     size_type _Mysize = 0; // current length of string (size)

  0010e	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 0
  00115	0f 57 c0	 xorps	 xmm0, xmm0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00118	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0011f	0f 11 45 d8	 movups	 XMMWORD PTR $T2[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00123	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  00126	89 45 c8	 mov	 DWORD PTR tv857[ebp], eax
  00129	0f 1f 80 00 00
	00 00		 npad	 7
$LL205@PropertyAm:
  00130	8a 01		 mov	 al, BYTE PTR [ecx]
  00132	41		 inc	 ecx
  00133	84 c0		 test	 al, al
  00135	75 f9		 jne	 SHORT $LL205@PropertyAm
  00137	2b 4d c8	 sub	 ecx, DWORD PTR tv857[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0013a	51		 push	 ecx
  0013b	52		 push	 edx
  0013c	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  0013f	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  00144	8b 45 d0	 mov	 eax, DWORD PTR _AmbienceSoundVector$[ebp+4]
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp

; 210  : 		AmbienceSoundVector.push_back(rstrToken.c_str());

  00147	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  0014b	3b 45 d4	 cmp	 eax, DWORD PTR _AmbienceSoundVector$[ebp+8]
  0014e	74 20		 je	 SHORT $LN98@PropertyAm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00150	0f 10 45 d8	 movups	 xmm0, XMMWORD PTR $T2[ebp]

; 1263 : 
; 1264 :                 _Right_data._Mysize = 0;
; 1265 :                 _Right_data._Myres  = _Small_string_capacity;

  00154	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH

; 1266 :                 _Right_data._Activate_SSO_buffer();
; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  00159	c6 45 d8 00	 mov	 BYTE PTR $T2[ebp], 0
  0015d	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  00160	f3 0f 7e 45 e8	 movq	 xmm0, QWORD PTR $T2[ebp+16]
  00165	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 854  :         ++_Mylast;

  0016a	83 45 d0 18	 add	 DWORD PTR _AmbienceSoundVector$[ebp+4], 24 ; 00000018H

; 830  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  0016e	eb 10		 jmp	 SHORT $LN97@PropertyAm
$LN98@PropertyAm:

; 831  :         }
; 832  : 
; 833  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00170	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  00173	51		 push	 ecx
  00174	50		 push	 eax
  00175	8d 4d cc	 lea	 ecx, DWORD PTR _AmbienceSoundVector$[ebp]
  00178	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  0017d	8b 4d ec	 mov	 ecx, DWORD PTR $T2[ebp+20]
$LN97@PropertyAm:
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp

; 210  : 		AmbienceSoundVector.push_back(rstrToken.c_str());

  00180	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00184	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00187	76 2c		 jbe	 SHORT $LN154@PropertyAm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00189	8b 55 d8	 mov	 edx, DWORD PTR $T2[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0018c	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0018d	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0018f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00195	72 14		 jb	 SHORT $LN165@PropertyAm

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00197	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0019a	83 c1 23	 add	 ecx, 35			; 00000023H
  0019d	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0019f	83 c0 fc	 add	 eax, -4			; fffffffcH
  001a2	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001a5	0f 87 9e 00 00
	00		 ja	 $LN192@PropertyAm
$LN165@PropertyAm:

; 289  :         ::operator delete(_Ptr, _Bytes);

  001ab	51		 push	 ecx
  001ac	52		 push	 edx
  001ad	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001b2	83 c4 08	 add	 esp, 8
$LN154@PropertyAm:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 82   :         ++_Ptr;

  001b5	83 c6 18	 add	 esi, 24			; 00000018H

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  001b8	3b 77 40	 cmp	 esi, DWORD PTR [edi+64]
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp

; 207  : 	for (; itor != pData->AmbienceSoundVector.end(); ++itor)

  001bb	0f 85 41 ff ff
	ff		 jne	 $LL4@PropertyAm
$LN202@PropertyAm:

; 211  : 	}
; 212  : 	pProperty->PutVector("AmbienceSoundVector", AmbienceSoundVector);

  001c1	8b 4d c4	 mov	 ecx, DWORD PTR _pProperty$GSCopy$1$[ebp]
  001c4	8d 45 cc	 lea	 eax, DWORD PTR _AmbienceSoundVector$[ebp]
  001c7	50		 push	 eax
  001c8	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@CHLDPEGL@AmbienceSoundVector@
  001cd	e8 00 00 00 00	 call	 ?PutVector@CProperty@@QAEXPBDABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z ; CProperty::PutVector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  001d2	8b 45 cc	 mov	 eax, DWORD PTR _AmbienceSoundVector$[ebp]
  001d5	85 c0		 test	 eax, eax
  001d7	74 53		 je	 SHORT $LN176@PropertyAm

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);

  001d9	8d 4d cc	 lea	 ecx, DWORD PTR _AmbienceSoundVector$[ebp]
  001dc	51		 push	 ecx
  001dd	ff 75 d0	 push	 DWORD PTR _AmbienceSoundVector$[ebp+4]
  001e0	50		 push	 eax
  001e1	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  001e6	8b 4d d4	 mov	 ecx, DWORD PTR _AmbienceSoundVector$[ebp+8]
  001e9	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  001ee	8b 75 cc	 mov	 esi, DWORD PTR _AmbienceSoundVector$[ebp]
  001f1	83 c4 0c	 add	 esp, 12			; 0000000cH
  001f4	2b ce		 sub	 ecx, esi
  001f6	f7 e9		 imul	 ecx
  001f8	c1 fa 02	 sar	 edx, 2
  001fb	8b c2		 mov	 eax, edx
  001fd	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00200	03 c2		 add	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00202	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00205	8b c6		 mov	 eax, esi
  00207	c1 e1 03	 shl	 ecx, 3

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0020a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00210	72 10		 jb	 SHORT $LN195@PropertyAm

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00212	8b 70 fc	 mov	 esi, DWORD PTR [eax-4]
  00215	83 c1 23	 add	 ecx, 35			; 00000023H
  00218	2b c6		 sub	 eax, esi

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0021a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0021d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00220	77 27		 ja	 SHORT $LN192@PropertyAm
$LN195@PropertyAm:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00222	51		 push	 ecx
  00223	56		 push	 esi
  00224	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00229	83 c4 08	 add	 esp, 8
$LN176@PropertyAm:
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp

; 213  : 	return true;

  0022c	b0 01		 mov	 al, 1

; 214  : }

  0022e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00231	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00238	59		 pop	 ecx
  00239	5f		 pop	 edi
  0023a	5e		 pop	 esi
  0023b	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0023e	33 cd		 xor	 ecx, ebp
  00240	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00245	8b e5		 mov	 esp, ebp
  00247	5d		 pop	 ebp
  00248	c3		 ret	 0
$LN192@PropertyAm:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00249	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN207@PropertyAm:
  0024e	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PropertyAmbienceDataToString@prt@@YA_NPAUTPropertyAmbience@1@PAVCProperty@@@Z$0:
  00000	8d 4d cc	 lea	 ecx, DWORD PTR _AmbienceSoundVector$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__unwindfunclet$?PropertyAmbienceDataToString@prt@@YA_NPAUTPropertyAmbience@1@PAVCProperty@@@Z$1:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?PropertyAmbienceDataToString@prt@@YA_NPAUTPropertyAmbience@1@PAVCProperty@@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PropertyAmbienceDataToString@prt@@YA_NPAUTPropertyAmbience@1@PAVCProperty@@@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PropertyAmbienceDataToString@prt@@YA_NPAUTPropertyAmbience@1@PAVCProperty@@@Z ENDP ; prt::PropertyAmbienceDataToString
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp
;	COMDAT ?PropertyEffectStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyEffect@1@@Z
_TEXT	SEGMENT
_c_pszEffectName$ = -12					; size = 4
_c_pszPropertyName$ = -8				; size = 4
_c_pszPropertyType$ = -4				; size = 4
_pProperty$ = 8						; size = 4
_pData$ = 12						; size = 4
?PropertyEffectStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyEffect@1@@Z PROC ; prt::PropertyEffectStringToData, COMDAT

; 169  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 170  : 	const char * c_pszPropertyType;
; 171  : 	const char * c_pszPropertyName;
; 172  : 
; 173  : 	if (!pProperty->GetString("PropertyType", &c_pszPropertyType))

  00006	8d 45 fc	 lea	 eax, DWORD PTR _c_pszPropertyType$[ebp]
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8b 7d 08	 mov	 edi, DWORD PTR _pProperty$[ebp]
  0000e	8b cf		 mov	 ecx, edi
  00010	50		 push	 eax
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0N@FPEBPNJJ@PropertyType@
  00016	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  0001b	84 c0		 test	 al, al
  0001d	74 7e		 je	 SHORT $LN7@PropertyEf

; 174  : 		return false;
; 175  : 
; 176  : 	if (!pProperty->GetString("PropertyName", &c_pszPropertyName))

  0001f	8d 45 f8	 lea	 eax, DWORD PTR _c_pszPropertyName$[ebp]
  00022	8b cf		 mov	 ecx, edi
  00024	50		 push	 eax
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PEECDNOJ@PropertyName@
  0002a	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  0002f	84 c0		 test	 al, al
  00031	74 6a		 je	 SHORT $LN7@PropertyEf

; 177  : 		return false;
; 178  : 
; 179  : 	if (strcmp(c_pszPropertyType, "Effect"))

  00033	8b 45 fc	 mov	 eax, DWORD PTR _c_pszPropertyType$[ebp]
  00036	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_06LBEFNKEP@Effect@
  0003b	0f 1f 44 00 00	 npad	 5
$LL11@PropertyEf:
  00040	8a 10		 mov	 dl, BYTE PTR [eax]
  00042	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00044	75 1a		 jne	 SHORT $LN12@PropertyEf
  00046	84 d2		 test	 dl, dl
  00048	74 12		 je	 SHORT $LN13@PropertyEf
  0004a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0004d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00050	75 0e		 jne	 SHORT $LN12@PropertyEf
  00052	83 c0 02	 add	 eax, 2
  00055	83 c1 02	 add	 ecx, 2
  00058	84 d2		 test	 dl, dl
  0005a	75 e4		 jne	 SHORT $LL11@PropertyEf
$LN13@PropertyEf:
  0005c	33 c0		 xor	 eax, eax
  0005e	eb 05		 jmp	 SHORT $LN14@PropertyEf
$LN12@PropertyEf:
  00060	1b c0		 sbb	 eax, eax
  00062	83 c8 01	 or	 eax, 1
$LN14@PropertyEf:
  00065	85 c0		 test	 eax, eax
  00067	75 34		 jne	 SHORT $LN7@PropertyEf

; 180  : 		return false;
; 181  : 
; 182  : 	pData->strName = c_pszPropertyName;

  00069	ff 75 f8	 push	 DWORD PTR _c_pszPropertyName$[ebp]
  0006c	8b 75 0c	 mov	 esi, DWORD PTR _pData$[ebp]
  0006f	8b ce		 mov	 ecx, esi
  00071	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 183  : 
; 184  : 	///////////////////////////////////////////////////////////////////////////////////
; 185  : 
; 186  : 	const char * c_pszEffectName;
; 187  : 	if (!pProperty->GetString("EffectFile", &c_pszEffectName))

  00076	8d 45 f4	 lea	 eax, DWORD PTR _c_pszEffectName$[ebp]
  00079	8b cf		 mov	 ecx, edi
  0007b	50		 push	 eax
  0007c	68 00 00 00 00	 push	 OFFSET ??_C@_0L@LKNLHIBB@EffectFile@
  00081	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  00086	84 c0		 test	 al, al
  00088	74 13		 je	 SHORT $LN7@PropertyEf

; 189  : 
; 190  : 	pData->strFileName = c_pszEffectName;

  0008a	ff 75 f4	 push	 DWORD PTR _c_pszEffectName$[ebp]
  0008d	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  00090	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  00095	5f		 pop	 edi

; 191  : 
; 192  : 	return true;

  00096	b0 01		 mov	 al, 1

; 193  : }

  00098	5e		 pop	 esi
  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c3		 ret	 0
$LN7@PropertyEf:
  0009d	5f		 pop	 edi

; 188  : 		return false;

  0009e	32 c0		 xor	 al, al

; 193  : }

  000a0	5e		 pop	 esi
  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c3		 ret	 0
?PropertyEffectStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyEffect@1@@Z ENDP ; prt::PropertyEffectStringToData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp
;	COMDAT ?PropertyEffectDataToString@prt@@YA_NPAUTPropertyEffect@1@PAVCProperty@@@Z
_TEXT	SEGMENT
_pData$ = 8						; size = 4
_pProperty$ = 12					; size = 4
?PropertyEffectDataToString@prt@@YA_NPAUTPropertyEffect@1@PAVCProperty@@@Z PROC ; prt::PropertyEffectDataToString, COMDAT

; 159  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 160  : 	pProperty->Clear();

  00005	8b 7d 0c	 mov	 edi, DWORD PTR _pProperty$[ebp]
  00008	8b cf		 mov	 ecx, edi
  0000a	e8 00 00 00 00	 call	 ?Clear@CProperty@@QAEXXZ ; CProperty::Clear

; 161  : 
; 162  : 	pProperty->PutString("PropertyType", "Effect");

  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_06LBEFNKEP@Effect@
  00014	68 00 00 00 00	 push	 OFFSET ??_C@_0N@FPEBPNJJ@PropertyType@
  00019	8b cf		 mov	 ecx, edi
  0001b	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 425  :         const value_type* _Result = _Bx._Buf;

  00020	8b 75 08	 mov	 esi, DWORD PTR _pData$[ebp]
  00023	8b c6		 mov	 eax, esi

; 434  :         return _Myres > _Small_string_capacity;

  00025	83 7e 14 0f	 cmp	 DWORD PTR [esi+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  00029	76 02		 jbe	 SHORT $LN7@PropertyEf

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0002b	8b 06		 mov	 eax, DWORD PTR [esi]
$LN7@PropertyEf:
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp

; 163  : 	pProperty->PutString("PropertyName", pData->strName.c_str());

  0002d	50		 push	 eax
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PEECDNOJ@PropertyName@
  00033	8b cf		 mov	 ecx, edi
  00035	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0003a	83 7e 2c 0f	 cmp	 DWORD PTR [esi+44], 15	; 0000000fH

; 2328 :         return _Mypair._Myval2._Myptr();

  0003e	8d 46 18	 lea	 eax, DWORD PTR [esi+24]

; 426  :         if (_Large_mode_engaged()) {

  00041	76 02		 jbe	 SHORT $LN17@PropertyEf

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00043	8b 00		 mov	 eax, DWORD PTR [eax]
$LN17@PropertyEf:
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp

; 164  : 	pProperty->PutString("EffectFile", pData->strFileName.c_str());

  00045	50		 push	 eax
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_0L@LKNLHIBB@EffectFile@
  0004b	8b cf		 mov	 ecx, edi
  0004d	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString

; 165  : 	return true;

  00052	5f		 pop	 edi
  00053	b0 01		 mov	 al, 1
  00055	5e		 pop	 esi

; 166  : }

  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
?PropertyEffectDataToString@prt@@YA_NPAUTPropertyEffect@1@PAVCProperty@@@Z ENDP ; prt::PropertyEffectDataToString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp
;	COMDAT ?PropertyBuildingStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyBuilding@1@@Z
_TEXT	SEGMENT
_pData$GSCopy$1$ = -84					; size = 4
_c_pszBuildingName$ = -80				; size = 4
_c_pszPropertyName$ = -76				; size = 4
_c_pszPropertyType$ = -72				; size = 4
_c_pszShadowFlag$ = -68					; size = 4
$T2 = -64						; size = 24
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pProperty$ = 8						; size = 4
_pData$ = 12						; size = 4
?PropertyBuildingStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyBuilding@1@@Z PROC ; prt::PropertyBuildingStringToData, COMDAT

; 120  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PropertyBuildingStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyBuilding@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 48	 sub	 esp, 72			; 00000048H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b 7d 08	 mov	 edi, DWORD PTR _pProperty$[ebp]

; 121  : 	const char * c_pszPropertyType;
; 122  : 	const char * c_pszPropertyName;
; 123  : 
; 124  : 	if (!pProperty->GetString("PropertyType", &c_pszPropertyType))

  0002d	8d 45 b8	 lea	 eax, DWORD PTR _c_pszPropertyType$[ebp]
  00030	8b 75 0c	 mov	 esi, DWORD PTR _pData$[ebp]
  00033	8b cf		 mov	 ecx, edi
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0N@FPEBPNJJ@PropertyType@
  0003b	89 75 ac	 mov	 DWORD PTR _pData$GSCopy$1$[ebp], esi
  0003e	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  00043	84 c0		 test	 al, al
  00045	0f 84 42 01 00
	00		 je	 $LN87@PropertyBu

; 125  : 		return false;
; 126  : 
; 127  : 	if (!pProperty->GetString("PropertyName", &c_pszPropertyName))

  0004b	8d 45 b4	 lea	 eax, DWORD PTR _c_pszPropertyName$[ebp]
  0004e	8b cf		 mov	 ecx, edi
  00050	50		 push	 eax
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PEECDNOJ@PropertyName@
  00056	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  0005b	84 c0		 test	 al, al
  0005d	0f 84 2a 01 00
	00		 je	 $LN87@PropertyBu

; 128  : 		return false;
; 129  : 
; 130  : 	if (strcmp(c_pszPropertyType, "Building"))

  00063	8b 45 b8	 mov	 eax, DWORD PTR _c_pszPropertyType$[ebp]
  00066	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_08COFDOLHN@Building@
  0006b	0f 1f 44 00 00	 npad	 5
$LL91@PropertyBu:
  00070	8a 10		 mov	 dl, BYTE PTR [eax]
  00072	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00074	75 1a		 jne	 SHORT $LN92@PropertyBu
  00076	84 d2		 test	 dl, dl
  00078	74 12		 je	 SHORT $LN93@PropertyBu
  0007a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0007d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00080	75 0e		 jne	 SHORT $LN92@PropertyBu
  00082	83 c0 02	 add	 eax, 2
  00085	83 c1 02	 add	 ecx, 2
  00088	84 d2		 test	 dl, dl
  0008a	75 e4		 jne	 SHORT $LL91@PropertyBu
$LN93@PropertyBu:
  0008c	33 c0		 xor	 eax, eax
  0008e	eb 05		 jmp	 SHORT $LN94@PropertyBu
$LN92@PropertyBu:
  00090	1b c0		 sbb	 eax, eax
  00092	83 c8 01	 or	 eax, 1
$LN94@PropertyBu:
  00095	85 c0		 test	 eax, eax
  00097	0f 85 f0 00 00
	00		 jne	 $LN87@PropertyBu

; 131  : 		return false;
; 132  : 
; 133  : 	pData->strName = c_pszPropertyName;

  0009d	ff 75 b4	 push	 DWORD PTR _c_pszPropertyName$[ebp]
  000a0	8b ce		 mov	 ecx, esi
  000a2	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 134  : 
; 135  : 	///////////////////////////////////////////////////////////////////////////////////
; 136  : 
; 137  : 	const char * c_pszBuildingName;
; 138  : 	if (!pProperty->GetString("BuildingFile", &c_pszBuildingName))

  000a7	8d 45 b0	 lea	 eax, DWORD PTR _c_pszBuildingName$[ebp]
  000aa	8b cf		 mov	 ecx, edi
  000ac	50		 push	 eax
  000ad	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LJHIPMJO@BuildingFile@
  000b2	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  000b7	84 c0		 test	 al, al
  000b9	0f 84 ce 00 00
	00		 je	 $LN87@PropertyBu

; 140  : 
; 141  : 	pData->strFileName = c_pszBuildingName;

  000bf	ff 75 b0	 push	 DWORD PTR _c_pszBuildingName$[ebp]
  000c2	83 c6 18	 add	 esi, 24			; 00000018H
  000c5	8b ce		 mov	 ecx, esi
  000c7	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 142  : 	pData->strAttributeDataFileName = CFileNameHelper::NoExtension(pData->strFileName) + ".mdatr";

  000cc	8d 45 c0	 lea	 eax, DWORD PTR $T2[ebp]
  000cf	56		 push	 esi
  000d0	50		 push	 eax
  000d1	e8 00 00 00 00	 call	 ?NoExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; CFileNameHelper::NoExtension
  000d6	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000d9	6a 06		 push	 6
  000db	68 00 00 00 00	 push	 OFFSET ??_C@_06OIKCOENH@?4mdatr@
  000e0	8b c8		 mov	 ecx, eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp

; 142  : 	pData->strAttributeDataFileName = CFileNameHelper::NoExtension(pData->strFileName) + ".mdatr";

  000e2	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000e9	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp

; 142  : 	pData->strAttributeDataFileName = CFileNameHelper::NoExtension(pData->strFileName) + ".mdatr";

  000ee	8b 75 ac	 mov	 esi, DWORD PTR _pData$GSCopy$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000f1	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp

; 142  : 	pData->strAttributeDataFileName = CFileNameHelper::NoExtension(pData->strFileName) + ".mdatr";

  000f4	8d 4e 30	 lea	 ecx, DWORD PTR [esi+48]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000f7	0f 11 45 d8	 movups	 XMMWORD PTR $T3[ebp], xmm0
  000fb	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]

; 1263 : 
; 1264 :                 _Right_data._Mysize = 0;

  00100	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 1265 :                 _Right_data._Myres  = _Small_string_capacity;

  00107	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 1266 :                 _Right_data._Activate_SSO_buffer();
; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  0010e	c6 00 00	 mov	 BYTE PTR [eax], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp

; 142  : 	pData->strAttributeDataFileName = CFileNameHelper::NoExtension(pData->strFileName) + ".mdatr";

  00111	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00114	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00115	66 0f d6 45 e8	 movq	 QWORD PTR $T3[ebp+16], xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp

; 142  : 	pData->strAttributeDataFileName = CFileNameHelper::NoExtension(pData->strFileName) + ".mdatr";

  0011a	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0011f	8b 4d ec	 mov	 ecx, DWORD PTR $T3[ebp+20]
  00122	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00125	76 28		 jbe	 SHORT $LN69@PropertyBu
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00127	8b 55 d8	 mov	 edx, DWORD PTR $T3[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0012a	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0012b	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0012d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00133	72 10		 jb	 SHORT $LN80@PropertyBu

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00135	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00138	83 c1 23	 add	 ecx, 35			; 00000023H
  0013b	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0013d	83 c0 fc	 add	 eax, -4			; fffffffcH
  00140	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00143	77 65		 ja	 SHORT $LN98@PropertyBu
$LN80@PropertyBu:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00145	51		 push	 ecx
  00146	52		 push	 edx
  00147	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0014c	83 c4 08	 add	 esp, 8
$LN69@PropertyBu:
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp

; 142  : 	pData->strAttributeDataFileName = CFileNameHelper::NoExtension(pData->strFileName) + ".mdatr";

  0014f	8d 4d c0	 lea	 ecx, DWORD PTR $T2[ebp]
  00152	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00159	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 143  : 
; 144  : 	const char * c_pszShadowFlag;
; 145  : 	if (!pProperty->GetString("ShadowFlag", &c_pszShadowFlag))

  0015e	8d 45 bc	 lea	 eax, DWORD PTR _c_pszShadowFlag$[ebp]
  00161	8b cf		 mov	 ecx, edi
  00163	50		 push	 eax
  00164	68 00 00 00 00	 push	 OFFSET ??_C@_0L@GJODCEE@ShadowFlag@
  00169	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  0016e	84 c0		 test	 al, al
  00170	75 09		 jne	 SHORT $LN6@PropertyBu

; 146  : 	{
; 147  : 		pData->isShadowFlag = FALSE;

  00172	33 c0		 xor	 eax, eax

; 152  : 	}
; 153  : 
; 154  : 	return true;

  00174	89 46 48	 mov	 DWORD PTR [esi+72], eax
  00177	b0 01		 mov	 al, 1
  00179	eb 14		 jmp	 SHORT $LN1@PropertyBu
$LN6@PropertyBu:

; 148  : 	}
; 149  : 	else
; 150  : 	{
; 151  : 		pData->isShadowFlag = atoi(c_pszShadowFlag);

  0017b	ff 75 bc	 push	 DWORD PTR _c_pszShadowFlag$[ebp]
  0017e	e8 00 00 00 00	 call	 __atoi64

; 152  : 	}
; 153  : 
; 154  : 	return true;

  00183	89 46 48	 mov	 DWORD PTR [esi+72], eax
  00186	83 c4 04	 add	 esp, 4
  00189	b0 01		 mov	 al, 1
  0018b	eb 02		 jmp	 SHORT $LN1@PropertyBu
$LN87@PropertyBu:

; 139  : 		return false;

  0018d	32 c0		 xor	 al, al
$LN1@PropertyBu:

; 155  : }

  0018f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00192	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00199	59		 pop	 ecx
  0019a	5f		 pop	 edi
  0019b	5e		 pop	 esi
  0019c	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0019f	33 cd		 xor	 ecx, ebp
  001a1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a6	8b e5		 mov	 esp, ebp
  001a8	5d		 pop	 ebp
  001a9	c3		 ret	 0
$LN98@PropertyBu:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001aa	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN96@PropertyBu:
  001af	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PropertyBuildingStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyBuilding@1@@Z$0:
  00000	8d 4d c0	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?PropertyBuildingStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyBuilding@1@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PropertyBuildingStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyBuilding@1@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PropertyBuildingStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyBuilding@1@@Z ENDP ; prt::PropertyBuildingStringToData
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp
;	COMDAT ?PropertyBuildingDataToString@prt@@YA_NPAUTPropertyBuilding@1@PAVCProperty@@@Z
_TEXT	SEGMENT
_pData$ = 8						; size = 4
_pProperty$ = 12					; size = 4
?PropertyBuildingDataToString@prt@@YA_NPAUTPropertyBuilding@1@PAVCProperty@@@Z PROC ; prt::PropertyBuildingDataToString, COMDAT

; 109  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 110  : 	pProperty->Clear();

  00005	8b 7d 0c	 mov	 edi, DWORD PTR _pProperty$[ebp]
  00008	8b cf		 mov	 ecx, edi
  0000a	e8 00 00 00 00	 call	 ?Clear@CProperty@@QAEXXZ ; CProperty::Clear

; 111  : 
; 112  : 	pProperty->PutString("PropertyType", "Building");

  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_08COFDOLHN@Building@
  00014	68 00 00 00 00	 push	 OFFSET ??_C@_0N@FPEBPNJJ@PropertyType@
  00019	8b cf		 mov	 ecx, edi
  0001b	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 425  :         const value_type* _Result = _Bx._Buf;

  00020	8b 75 08	 mov	 esi, DWORD PTR _pData$[ebp]
  00023	8b c6		 mov	 eax, esi

; 434  :         return _Myres > _Small_string_capacity;

  00025	83 7e 14 0f	 cmp	 DWORD PTR [esi+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  00029	76 02		 jbe	 SHORT $LN7@PropertyBu

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0002b	8b 06		 mov	 eax, DWORD PTR [esi]
$LN7@PropertyBu:
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp

; 113  : 	pProperty->PutString("PropertyName", pData->strName.c_str());

  0002d	50		 push	 eax
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PEECDNOJ@PropertyName@
  00033	8b cf		 mov	 ecx, edi
  00035	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0003a	83 7e 2c 0f	 cmp	 DWORD PTR [esi+44], 15	; 0000000fH

; 2328 :         return _Mypair._Myval2._Myptr();

  0003e	8d 46 18	 lea	 eax, DWORD PTR [esi+24]

; 426  :         if (_Large_mode_engaged()) {

  00041	76 02		 jbe	 SHORT $LN17@PropertyBu

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00043	8b 00		 mov	 eax, DWORD PTR [eax]
$LN17@PropertyBu:
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp

; 114  : 	pProperty->PutString("BuildingFile", pData->strFileName.c_str());

  00045	50		 push	 eax
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LJHIPMJO@BuildingFile@
  0004b	8b cf		 mov	 ecx, edi
  0004d	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString

; 115  : 	pProperty->PutString("ShadowFlag", IntegerNumberToString(pData->isShadowFlag));

  00052	ff 76 48	 push	 DWORD PTR [esi+72]
  00055	e8 00 00 00 00	 call	 ?IntegerNumberToString@prt@@YAPBDH@Z ; prt::IntegerNumberToString
  0005a	83 c4 04	 add	 esp, 4
  0005d	8b cf		 mov	 ecx, edi
  0005f	50		 push	 eax
  00060	68 00 00 00 00	 push	 OFFSET ??_C@_0L@GJODCEE@ShadowFlag@
  00065	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString

; 116  : 	return true;

  0006a	5f		 pop	 edi
  0006b	b0 01		 mov	 al, 1
  0006d	5e		 pop	 esi

; 117  : }

  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
?PropertyBuildingDataToString@prt@@YA_NPAUTPropertyBuilding@1@PAVCProperty@@@Z ENDP ; prt::PropertyBuildingDataToString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp
;	COMDAT ?PropertyTreeStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyTree@1@@Z
_TEXT	SEGMENT
_c_pszTreeVariance$ = -20				; size = 4
_c_pszTreeSize$ = -16					; size = 4
_c_pszTreeName$ = -12					; size = 4
_c_pszPropertyName$ = -8				; size = 4
_c_pszPropertyType$ = -4				; size = 4
_pProperty$ = 8						; size = 4
_pData$ = 12						; size = 4
?PropertyTreeStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyTree@1@@Z PROC ; prt::PropertyTreeStringToData, COMDAT

; 74   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 75   : 	const char * c_pszPropertyType;
; 76   : 	const char * c_pszPropertyName;
; 77   : 
; 78   : 	if (!pProperty->GetString("PropertyType", &c_pszPropertyType))

  00006	8d 45 fc	 lea	 eax, DWORD PTR _c_pszPropertyType$[ebp]
  00009	56		 push	 esi
  0000a	8b 75 08	 mov	 esi, DWORD PTR _pProperty$[ebp]
  0000d	8b ce		 mov	 ecx, esi
  0000f	57		 push	 edi
  00010	50		 push	 eax
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0N@FPEBPNJJ@PropertyType@
  00016	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  0001b	84 c0		 test	 al, al
  0001d	0f 84 be 00 00
	00		 je	 $LN9@PropertyTr

; 79   : 		return false;
; 80   : 
; 81   : 	if (!pProperty->GetString("PropertyName", &c_pszPropertyName))

  00023	8d 45 f8	 lea	 eax, DWORD PTR _c_pszPropertyName$[ebp]
  00026	8b ce		 mov	 ecx, esi
  00028	50		 push	 eax
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PEECDNOJ@PropertyName@
  0002e	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  00033	84 c0		 test	 al, al
  00035	0f 84 a6 00 00
	00		 je	 $LN9@PropertyTr

; 82   : 		return false;
; 83   : 
; 84   : 	if (strcmp(c_pszPropertyType, "Tree"))

  0003b	8b 45 fc	 mov	 eax, DWORD PTR _c_pszPropertyType$[ebp]
  0003e	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_04GDOOJPNH@Tree@
$LL15@PropertyTr:
  00043	8a 10		 mov	 dl, BYTE PTR [eax]
  00045	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00047	75 1a		 jne	 SHORT $LN16@PropertyTr
  00049	84 d2		 test	 dl, dl
  0004b	74 12		 je	 SHORT $LN17@PropertyTr
  0004d	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00050	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00053	75 0e		 jne	 SHORT $LN16@PropertyTr
  00055	83 c0 02	 add	 eax, 2
  00058	83 c1 02	 add	 ecx, 2
  0005b	84 d2		 test	 dl, dl
  0005d	75 e4		 jne	 SHORT $LL15@PropertyTr
$LN17@PropertyTr:
  0005f	33 c0		 xor	 eax, eax
  00061	eb 05		 jmp	 SHORT $LN18@PropertyTr
$LN16@PropertyTr:
  00063	1b c0		 sbb	 eax, eax
  00065	83 c8 01	 or	 eax, 1
$LN18@PropertyTr:
  00068	85 c0		 test	 eax, eax
  0006a	75 75		 jne	 SHORT $LN9@PropertyTr

; 85   : 		return false;
; 86   : 
; 87   : 	pData->strName = c_pszPropertyName;

  0006c	ff 75 f8	 push	 DWORD PTR _c_pszPropertyName$[ebp]
  0006f	8b 7d 0c	 mov	 edi, DWORD PTR _pData$[ebp]
  00072	8b cf		 mov	 ecx, edi
  00074	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 88   : 
; 89   : 	///////////////////////////////////////////////////////////////////////////////////
; 90   : 
; 91   : 	const char * c_pszTreeName;
; 92   : 	const char * c_pszTreeSize;
; 93   : 	const char * c_pszTreeVariance;
; 94   : 	if (!pProperty->GetString("TreeFile", &c_pszTreeName))

  00079	8d 45 f4	 lea	 eax, DWORD PTR _c_pszTreeName$[ebp]
  0007c	8b ce		 mov	 ecx, esi
  0007e	50		 push	 eax
  0007f	68 00 00 00 00	 push	 OFFSET ??_C@_08JBFACIKL@TreeFile@
  00084	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  00089	84 c0		 test	 al, al
  0008b	74 54		 je	 SHORT $LN9@PropertyTr

; 95   : 		return false;
; 96   : 	if (!pProperty->GetString("TreeSize", &c_pszTreeSize))

  0008d	8d 45 f0	 lea	 eax, DWORD PTR _c_pszTreeSize$[ebp]
  00090	8b ce		 mov	 ecx, esi
  00092	50		 push	 eax
  00093	68 00 00 00 00	 push	 OFFSET ??_C@_08CBPLOPJL@TreeSize@
  00098	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  0009d	84 c0		 test	 al, al
  0009f	74 40		 je	 SHORT $LN9@PropertyTr

; 97   : 		return false;
; 98   : 	if (!pProperty->GetString("TreeVariance", &c_pszTreeVariance))

  000a1	8d 45 ec	 lea	 eax, DWORD PTR _c_pszTreeVariance$[ebp]
  000a4	8b ce		 mov	 ecx, esi
  000a6	50		 push	 eax
  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_0N@IDDBDNKA@TreeVariance@
  000ac	e8 00 00 00 00	 call	 ?GetString@CProperty@@QAE_NPBDPAPBD@Z ; CProperty::GetString
  000b1	84 c0		 test	 al, al
  000b3	74 2c		 je	 SHORT $LN9@PropertyTr

; 100  : 
; 101  : 	pData->strFileName = c_pszTreeName;

  000b5	ff 75 f4	 push	 DWORD PTR _c_pszTreeName$[ebp]
  000b8	8d 4f 18	 lea	 ecx, DWORD PTR [edi+24]
  000bb	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 102  : 	pData->fSize = atof(c_pszTreeSize);

  000c0	ff 75 f0	 push	 DWORD PTR _c_pszTreeSize$[ebp]
  000c3	e8 00 00 00 00	 call	 _atof

; 103  : 	pData->fVariance = atof(c_pszTreeVariance);

  000c8	ff 75 ec	 push	 DWORD PTR _c_pszTreeVariance$[ebp]
  000cb	d9 5f 30	 fstp	 DWORD PTR [edi+48]
  000ce	e8 00 00 00 00	 call	 _atof
  000d3	83 c4 08	 add	 esp, 8

; 104  : 
; 105  : 	return true;

  000d6	b0 01		 mov	 al, 1
  000d8	d9 5f 34	 fstp	 DWORD PTR [edi+52]
  000db	5f		 pop	 edi

; 106  : }

  000dc	5e		 pop	 esi
  000dd	8b e5		 mov	 esp, ebp
  000df	5d		 pop	 ebp
  000e0	c3		 ret	 0
$LN9@PropertyTr:
  000e1	5f		 pop	 edi

; 99   : 		return false;

  000e2	32 c0		 xor	 al, al

; 106  : }

  000e4	5e		 pop	 esi
  000e5	8b e5		 mov	 esp, ebp
  000e7	5d		 pop	 ebp
  000e8	c3		 ret	 0
?PropertyTreeStringToData@prt@@YA_NPAVCProperty@@PAUTPropertyTree@1@@Z ENDP ; prt::PropertyTreeStringToData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp
;	COMDAT ?PropertyTreeDataToString@prt@@YA_NPAUTPropertyTree@1@PAVCProperty@@@Z
_TEXT	SEGMENT
_pData$ = 8						; size = 4
_pProperty$ = 12					; size = 4
?PropertyTreeDataToString@prt@@YA_NPAUTPropertyTree@1@PAVCProperty@@@Z PROC ; prt::PropertyTreeDataToString, COMDAT

; 61   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 62   : 	pProperty->Clear();

  00005	8b 7d 0c	 mov	 edi, DWORD PTR _pProperty$[ebp]
  00008	8b cf		 mov	 ecx, edi
  0000a	e8 00 00 00 00	 call	 ?Clear@CProperty@@QAEXXZ ; CProperty::Clear

; 63   : 
; 64   : 	pProperty->PutString("PropertyType", "Tree");

  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_04GDOOJPNH@Tree@
  00014	68 00 00 00 00	 push	 OFFSET ??_C@_0N@FPEBPNJJ@PropertyType@
  00019	8b cf		 mov	 ecx, edi
  0001b	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 425  :         const value_type* _Result = _Bx._Buf;

  00020	8b 75 08	 mov	 esi, DWORD PTR _pData$[ebp]
  00023	8b c6		 mov	 eax, esi

; 434  :         return _Myres > _Small_string_capacity;

  00025	83 7e 14 0f	 cmp	 DWORD PTR [esi+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  00029	76 02		 jbe	 SHORT $LN7@PropertyTr

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0002b	8b 06		 mov	 eax, DWORD PTR [esi]
$LN7@PropertyTr:
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp

; 65   : 	pProperty->PutString("PropertyName", pData->strName.c_str());

  0002d	50		 push	 eax
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PEECDNOJ@PropertyName@
  00033	8b cf		 mov	 ecx, edi
  00035	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0003a	83 7e 2c 0f	 cmp	 DWORD PTR [esi+44], 15	; 0000000fH

; 2328 :         return _Mypair._Myval2._Myptr();

  0003e	8d 46 18	 lea	 eax, DWORD PTR [esi+24]

; 426  :         if (_Large_mode_engaged()) {

  00041	76 02		 jbe	 SHORT $LN17@PropertyTr

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00043	8b 00		 mov	 eax, DWORD PTR [eax]
$LN17@PropertyTr:
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp

; 67   : 	pProperty->PutString("TreeFile", pData->strFileName.c_str());

  00045	50		 push	 eax
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_08JBFACIKL@TreeFile@
  0004b	8b cf		 mov	 ecx, edi
  0004d	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString

; 68   : 	pProperty->PutString("TreeSize", FloatNumberToString(pData->fSize));

  00052	f3 0f 10 46 30	 movss	 xmm0, DWORD PTR [esi+48]
  00057	51		 push	 ecx
  00058	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005d	e8 00 00 00 00	 call	 ?FloatNumberToString@prt@@YAPBDM@Z ; prt::FloatNumberToString
  00062	83 c4 04	 add	 esp, 4
  00065	8b cf		 mov	 ecx, edi
  00067	50		 push	 eax
  00068	68 00 00 00 00	 push	 OFFSET ??_C@_08CBPLOPJL@TreeSize@
  0006d	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString

; 69   : 	pProperty->PutString("TreeVariance", FloatNumberToString(pData->fVariance));

  00072	f3 0f 10 46 34	 movss	 xmm0, DWORD PTR [esi+52]
  00077	51		 push	 ecx
  00078	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007d	e8 00 00 00 00	 call	 ?FloatNumberToString@prt@@YAPBDM@Z ; prt::FloatNumberToString
  00082	83 c4 04	 add	 esp, 4
  00085	8b cf		 mov	 ecx, edi
  00087	50		 push	 eax
  00088	68 00 00 00 00	 push	 OFFSET ??_C@_0N@IDDBDNKA@TreeVariance@
  0008d	e8 00 00 00 00	 call	 ?PutString@CProperty@@QAEXPBD0@Z ; CProperty::PutString

; 70   : 	return true;

  00092	5f		 pop	 edi
  00093	b0 01		 mov	 al, 1
  00095	5e		 pop	 esi

; 71   : }

  00096	5d		 pop	 ebp
  00097	c3		 ret	 0
?PropertyTreeDataToString@prt@@YA_NPAUTPropertyTree@1@PAVCProperty@@@Z ENDP ; prt::PropertyTreeDataToString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp
;	COMDAT ?GetPropertyExtension@prt@@YAPBDK@Z
_TEXT	SEGMENT
_dwType$ = 8						; size = 4
?GetPropertyExtension@prt@@YAPBDK@Z PROC		; prt::GetPropertyExtension, COMDAT

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 40   : 	if (dwType >= PROPERTY_TYPE_MAX_NUM)

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwType$[ebp]
  00006	83 f8 06	 cmp	 eax, 6
  00009	72 07		 jb	 SHORT $LN2@GetPropert

; 41   : 		return c_szPropertyExtension[0];

  0000b	b8 00 00 00 00	 mov	 eax, OFFSET ?c_szPropertyExtension@prt@@3QAY0BA@$$CBDA

; 44   : }

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
$LN2@GetPropert:

; 42   : 
; 43   : 	return c_szPropertyExtension[dwType];

  00012	c1 e0 04	 shl	 eax, 4
  00015	05 00 00 00 00	 add	 eax, OFFSET ?c_szPropertyExtension@prt@@3QAY0BA@$$CBDA

; 44   : }

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?GetPropertyExtension@prt@@YAPBDK@Z ENDP		; prt::GetPropertyExtension
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\MapType.cpp
;	COMDAT ?GetPropertyType@prt@@YAKPBD@Z
_TEXT	SEGMENT
_c_szTypeName$ = 8					; size = 4
?GetPropertyType@prt@@YAKPBD@Z PROC			; prt::GetPropertyType, COMDAT

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 29   : 	for (DWORD i = 0; i < PROPERTY_TYPE_MAX_NUM; ++i)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _c_szTypeName$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	33 f6		 xor	 esi, esi
  0000b	bf 00 00 00 00	 mov	 edi, OFFSET ?c_szPropertyTypeName@prt@@3QAY0CA@$$CBDA
$LL4@GetPropert:

; 30   : 	{
; 31   : 		if (!strcmp(c_szPropertyTypeName[i], c_szTypeName))

  00010	8b c3		 mov	 eax, ebx
  00012	8b cf		 mov	 ecx, edi
$LL12@GetPropert:
  00014	8a 11		 mov	 dl, BYTE PTR [ecx]
  00016	3a 10		 cmp	 dl, BYTE PTR [eax]
  00018	75 1a		 jne	 SHORT $LN13@GetPropert
  0001a	84 d2		 test	 dl, dl
  0001c	74 12		 je	 SHORT $LN14@GetPropert
  0001e	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  00021	3a 50 01	 cmp	 dl, BYTE PTR [eax+1]
  00024	75 0e		 jne	 SHORT $LN13@GetPropert
  00026	83 c1 02	 add	 ecx, 2
  00029	83 c0 02	 add	 eax, 2
  0002c	84 d2		 test	 dl, dl
  0002e	75 e4		 jne	 SHORT $LL12@GetPropert
$LN14@GetPropert:
  00030	33 c0		 xor	 eax, eax
  00032	eb 05		 jmp	 SHORT $LN15@GetPropert
$LN13@GetPropert:
  00034	1b c0		 sbb	 eax, eax
  00036	83 c8 01	 or	 eax, 1
$LN15@GetPropert:
  00039	85 c0		 test	 eax, eax
  0003b	74 10		 je	 SHORT $LN8@GetPropert

; 29   : 	for (DWORD i = 0; i < PROPERTY_TYPE_MAX_NUM; ++i)

  0003d	46		 inc	 esi
  0003e	83 c7 20	 add	 edi, 32			; 00000020H
  00041	83 fe 06	 cmp	 esi, 6
  00044	72 ca		 jb	 SHORT $LL4@GetPropert

; 33   : 	}
; 34   : 
; 35   : 	return PROPERTY_TYPE_NONE;
; 36   : }

  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	33 c0		 xor	 eax, eax
  0004a	5b		 pop	 ebx
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
$LN8@GetPropert:
  0004d	5f		 pop	 edi

; 32   : 			return i;

  0004e	8b c6		 mov	 eax, esi

; 33   : 	}
; 34   : 
; 35   : 	return PROPERTY_TYPE_NONE;
; 36   : }

  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
?GetPropertyType@prt@@YAKPBD@Z ENDP			; prt::GetPropertyType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength, COMDAT

; 2169 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array, COMDAT
; _this$ = ecx

; 2044 :         const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b f9		 mov	 edi, ecx

; 2045 :         // orphan all iterators, discard old array, acquire new array
; 2046 :         auto& _Al         = _Getal();
; 2047 :         auto& _My_data    = _Mypair._Myval2;
; 2048 :         pointer& _Myfirst = _My_data._Myfirst;
; 2049 :         pointer& _Mylast  = _My_data._Mylast;
; 2050 :         pointer& _Myend   = _My_data._Myend;
; 2051 : 
; 2052 :         _My_data._Orphan_all();
; 2053 : 
; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  00006	8b 07		 mov	 eax, DWORD PTR [edi]
  00008	85 c0		 test	 eax, eax
  0000a	74 51		 je	 SHORT $LN10@Change_arr

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);

  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	ff 77 04	 push	 DWORD PTR [edi+4]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 2056 :             _ASAN_VECTOR_REMOVE;
; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00017	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0001a	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0001f	8b 37		 mov	 esi, DWORD PTR [edi]
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	2b ce		 sub	 ecx, esi
  00026	f7 e9		 imul	 ecx
  00028	c1 fa 02	 sar	 edx, 2
  0002b	8b c2		 mov	 eax, edx
  0002d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00030	03 c2		 add	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00032	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00035	c1 e1 03	 shl	 ecx, 3

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00038	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0003e	72 12		 jb	 SHORT $LN21@Change_arr

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00040	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00043	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00046	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00048	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  0004b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0004e	77 2f		 ja	 SHORT $LN18@Change_arr

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00050	8b f2		 mov	 esi, edx
$LN21@Change_arr:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00052	51		 push	 ecx
  00053	56		 push	 esi
  00054	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00059	83 c4 08	 add	 esp, 8
  0005c	5e		 pop	 esi
$LN10@Change_arr:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2060 :         _Myfirst = _Newvec;

  0005d	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]

; 2061 :         _Mylast  = _Newvec + _Newsize;

  00060	8b 45 0c	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00063	89 0f		 mov	 DWORD PTR [edi], ecx
  00065	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00068	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
  0006b	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  0006e	8b 45 10	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00071	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00074	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
  00077	89 47 08	 mov	 DWORD PTR [edi+8], eax
  0007a	5f		 pop	 edi

; 2064 :     }

  0007b	5d		 pop	 ebp
  0007c	c2 0c 00	 ret	 12			; 0000000cH
$LN18@Change_arr:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN28@Change_arr:
  00084	cc		 int	 3
?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 814  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 65		 je	 SHORT $LN5@vector
  00009	57		 push	 edi

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);

  0000a	56		 push	 esi
  0000b	ff 76 04	 push	 DWORD PTR [esi+4]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00014	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00017	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0001c	8b 3e		 mov	 edi, DWORD PTR [esi]
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00021	2b cf		 sub	 ecx, edi
  00023	f7 e9		 imul	 ecx
  00025	c1 fa 02	 sar	 edx, 2
  00028	8b c2		 mov	 eax, edx
  0002a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0002d	03 c2		 add	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002f	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00032	c1 e1 03	 shl	 ecx, 3

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00035	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0003b	72 12		 jb	 SHORT $LN24@vector

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0003d	8b 57 fc	 mov	 edx, DWORD PTR [edi-4]
  00040	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00043	2b fa		 sub	 edi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  00048	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0004b	77 23		 ja	 SHORT $LN21@vector

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0004d	8b fa		 mov	 edi, edx
$LN24@vector:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0004f	51		 push	 ecx
  00050	57		 push	 edi
  00051	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00056	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00059	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 2081 :             _Mylast  = nullptr;

  0005f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2082 :             _Myend   = nullptr;

  00066	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0006d	5f		 pop	 edi
$LN5@vector:
  0006e	5e		 pop	 esi

; 820  :     }

  0006f	c3		 ret	 0
$LN21@vector:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00070	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN32@vector:
  00075	cc		 int	 3
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
;	COMDAT ?NoExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_str$ = 12						; size = 4
?NoExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z PROC ; CFileNameHelper::NoExtension, COMDAT

; 333  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 425  :         const value_type* _Result = _Bx._Buf;

  00007	8b 7d 0c	 mov	 edi, DWORD PTR _str$[ebp]
  0000a	8b df		 mov	 ebx, edi

; 434  :         return _Myres > _Small_string_capacity;

  0000c	83 7f 14 0f	 cmp	 DWORD PTR [edi+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  00010	76 02		 jbe	 SHORT $LN75@NoExtensio

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00012	8b 1f		 mov	 ebx, DWORD PTR [edi]
$LN75@NoExtensio:

; 2704 :         return static_cast<size_type>(

  00014	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 723  :     if (_Hay_size == 0) { // no room for match

  00017	85 c0		 test	 eax, eax
  00019	74 5f		 je	 SHORT $LN2@NoExtensio

; 724  :         return static_cast<size_t>(-1);
; 725  :     }
; 726  : 
; 727  :     const size_t _Actual_start_at = (_STD min)(_Start_at, _Hay_size - 1);

  0001b	48		 dec	 eax
  0001c	83 c9 ff	 or	 ecx, -1
  0001f	3b c1		 cmp	 eax, ecx

; 728  : 
; 729  : #if _USE_STD_VECTOR_ALGORITHMS
; 730  :     if constexpr (_Is_implementation_handled_char_traits<_Traits>) {
; 731  :         if (!_STD _Is_constant_evaluated()) {
; 732  :             const auto _End = _Haystack + _Actual_start_at + 1;
; 733  :             const auto _Ptr = _STD _Find_last_vectorized(_Haystack, _End, _Ch);

  00021	6a 2e		 push	 46			; 0000002eH
  00023	0f 42 c8	 cmovb	 ecx, eax
  00026	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
  00029	03 f3		 add	 esi, ebx
  0002b	56		 push	 esi
  0002c	53		 push	 ebx
  0002d	e8 00 00 00 00	 call	 ??$_Find_last_vectorized@$$CBDD@std@@YAPBDQBD0D@Z ; std::_Find_last_vectorized<char const ,char>
  00032	8b c8		 mov	 ecx, eax
  00034	83 c4 0c	 add	 esp, 12			; 0000000cH

; 734  : 
; 735  :             if (_Ptr != _End) {

  00037	3b ce		 cmp	 ecx, esi
  00039	74 3f		 je	 SHORT $LN2@NoExtensio

; 736  :                 return static_cast<size_t>(_Ptr - _Haystack);

  0003b	2b cb		 sub	 ecx, ebx
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h

; 336  : 	if (string::npos != npos)

  0003d	83 f9 ff	 cmp	 ecx, -1
  00040	74 38		 je	 SHORT $LN2@NoExtensio
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00042	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00045	0f 57 c0	 xorps	 xmm0, xmm0
  00048	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  0004b	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00052	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 468  :         return (_STD min)(_Size, _Mysize - _Off);

  00059	39 4f 10	 cmp	 DWORD PTR [edi+16], ecx
  0005c	0f 42 4f 10	 cmovb	 ecx, DWORD PTR [edi+16]

; 434  :         return _Myres > _Small_string_capacity;

  00060	83 7f 14 0f	 cmp	 DWORD PTR [edi+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  00064	76 02		 jbe	 SHORT $LN60@NoExtensio

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00066	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN60@NoExtensio:

; 713  :         _Construct<_Construct_strategy::_From_ptr>(

  00068	51		 push	 ecx
  00069	57		 push	 edi
  0006a	8b ce		 mov	 ecx, esi
  0006c	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
  00071	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h

; 337  : 		return std::string(str, 0, npos);

  00072	8b c6		 mov	 eax, esi

; 340  : }

  00074	5e		 pop	 esi
  00075	5b		 pop	 ebx
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c3		 ret	 0
$LN2@NoExtensio:

; 338  : 
; 339  : 	return str;

  0007a	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0007d	57		 push	 edi
  0007e	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00083	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00086	5f		 pop	 edi

; 340  : }

  00087	5e		 pop	 esi
  00088	5b		 pop	 ebx
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c3		 ret	 0
?NoExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ENDP ; CFileNameHelper::NoExtension
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate, COMDAT
; _this$ = ecx

; 3044 :     _CONSTEXPR20 void _Tidy_deallocate() noexcept { // initialize buffer, deallocating any storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 434  :         return _Myres > _Small_string_capacity;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3045 :         auto& _My_data = _Mypair._Myval2;
; 3046 :         _My_data._Orphan_all();
; 3047 :         if (_My_data._Large_mode_engaged()) {

  00009	76 27		 jbe	 SHORT $LN16@Tidy_deall
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0000d	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN27@Tidy_deall

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN24@Tidy_deall

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN27@Tidy_deall:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN16@Tidy_deall:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 3058 :     }

  00044	c3		 ret	 0
$LN24@Tidy_deall:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN35@Tidy_deall:
  0004a	cc		 int	 3
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__New_size$1$ = -16					; size = 4
tv518 = -16						; size = 4
__Old_size$1$ = -12					; size = 4
__Old$1$ = -8						; size = 4
$T1 = -4						; size = 4
tv508 = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
tv503 = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 1486 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 1487 :         // append [_Ptr, _Ptr + _Count)
; 1488 :         const size_type _Old_size = _Mypair._Myval2._Mysize;
; 1489 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00011	8b c2		 mov	 eax, edx
  00013	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00016	2b c1		 sub	 eax, ecx
  00018	89 4d f4	 mov	 DWORD PTR __Old_size$1$[ebp], ecx
  0001b	89 55 f8	 mov	 DWORD PTR __Old$1$[ebp], edx
  0001e	3b d8		 cmp	 ebx, eax
  00020	77 2e		 ja	 SHORT $LN2@append

; 1490 :             _ASAN_STRING_MODIFY(*this, _Old_size, _Old_size + _Count);
; 1491 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00022	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  00025	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 416  :         value_type* _Result = _Bx._Buf;

  00028	8b c7		 mov	 eax, edi

; 434  :         return _Myres > _Small_string_capacity;

  0002a	83 fa 0f	 cmp	 edx, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  0002d	76 02		 jbe	 SHORT $LN5@append

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  0002f	8b 07		 mov	 eax, DWORD PTR [edi]
$LN5@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00031	53		 push	 ebx
  00032	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1493 :             _Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

  00035	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 _memmove
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1494 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  00041	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 1507 :     }

  00045	8b c7		 mov	 eax, edi
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
$LN2@append:

; 2993 :         if (max_size() - _Old_size < _Size_increase) {

  00050	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00055	2b c1		 sub	 eax, ecx
  00057	3b c3		 cmp	 eax, ebx
  00059	0f 82 1d 01 00
	00		 jb	 $LN98@append

; 2995 :         }
; 2996 : 
; 2997 :         const size_type _New_size     = _Old_size + _Size_increase;

  0005f	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00062	8b f0		 mov	 esi, eax

; 2997 :         const size_type _New_size     = _Old_size + _Size_increase;

  00064	89 45 f0	 mov	 DWORD PTR __New_size$1$[ebp], eax

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00067	83 ce 0f	 or	 esi, 15			; 0000000fH
  0006a	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00070	76 12		 jbe	 SHORT $LN23@append

; 2944 :             return _Max;

  00072	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00077	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00082	eb 4b		 jmp	 SHORT $LN96@append
$LN23@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2947 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00084	8b c2		 mov	 eax, edx
  00086	d1 e8		 shr	 eax, 1
  00088	89 45 fc	 mov	 DWORD PTR tv508[ebp], eax
  0008b	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00090	2b 45 fc	 sub	 eax, DWORD PTR tv508[ebp]
  00093	3b d0		 cmp	 edx, eax
  00095	76 12		 jbe	 SHORT $LN24@append

; 2948 :             return _Max;

  00097	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0009c	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a7	eb 26		 jmp	 SHORT $LN96@append
$LN24@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000a9	8b 45 fc	 mov	 eax, DWORD PTR tv508[ebp]
  000ac	03 c2		 add	 eax, edx
  000ae	3b f0		 cmp	 esi, eax
  000b0	0f 42 f0	 cmovb	 esi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  000b3	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  000b6	85 c0		 test	 eax, eax
  000b8	74 1e		 je	 SHORT $LN95@append
$LN37@append:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  000ba	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000bf	72 08		 jb	 SHORT $LN38@append

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000c1	50		 push	 eax
  000c2	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000c7	eb 06		 jmp	 SHORT $LN96@append
$LN38@append:

; 136  :         return ::operator new(_Bytes);

  000c9	50		 push	 eax
  000ca	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN96@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3005 :         _My_data._Mysize      = _New_size;

  000cf	8b 55 f8	 mov	 edx, DWORD PTR __Old$1$[ebp]
  000d2	83 c4 04	 add	 esp, 4
  000d5	8b 4d f4	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
$LN95@append:
  000d8	8b 5d f0	 mov	 ebx, DWORD PTR __New_size$1$[ebp]
  000db	89 5f 10	 mov	 DWORD PTR [edi+16], ebx

; 3006 :         _My_data._Myres       = _New_capacity;
; 3007 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  000de	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  000e1	89 77 14	 mov	 DWORD PTR [edi+20], esi
  000e4	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
  000e7	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  000ea	89 75 f0	 mov	 DWORD PTR tv518[ebp], esi
  000ed	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]
  000f0	89 45 0c	 mov	 DWORD PTR tv503[ebp], eax

; 3008 :         if (_Old_capacity > _Small_string_capacity) {

  000f3	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
  000f6	51		 push	 ecx
  000f7	83 fa 0f	 cmp	 edx, 15			; 0000000fH
  000fa	76 56		 jbe	 SHORT $LN16@append

; 3009 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000fc	8b 37		 mov	 esi, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000fe	56		 push	 esi
  000ff	50		 push	 eax
  00100	e8 00 00 00 00	 call	 _memcpy
  00105	53		 push	 ebx
  00106	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00109	ff 75 f0	 push	 DWORD PTR tv518[ebp]
  0010c	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1504 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00111	8b 45 0c	 mov	 eax, DWORD PTR tv503[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00114	83 c4 18	 add	 esp, 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00117	8b 4d f8	 mov	 ecx, DWORD PTR __Old$1$[ebp]
  0011a	41		 inc	 ecx

; 1504 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0011b	c6 00 00	 mov	 BYTE PTR [eax], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0011e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00124	72 12		 jb	 SHORT $LN69@append

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00126	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00129	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0012c	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0012e	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00131	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00134	77 4b		 ja	 SHORT $LN66@append

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00136	8b f2		 mov	 esi, edx
$LN69@append:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00138	51		 push	 ecx
  00139	56		 push	 esi
  0013a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1498 :         return _Reallocate_grow_by(

  0013f	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00142	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1498 :         return _Reallocate_grow_by(

  00145	89 07		 mov	 DWORD PTR [edi], eax

; 1507 :     }

  00147	8b c7		 mov	 eax, edi
  00149	5f		 pop	 edi
  0014a	5e		 pop	 esi
  0014b	5b		 pop	 ebx
  0014c	8b e5		 mov	 esp, ebp
  0014e	5d		 pop	 ebp
  0014f	c2 08 00	 ret	 8
$LN16@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00152	57		 push	 edi
  00153	50		 push	 eax
  00154	e8 00 00 00 00	 call	 _memcpy
  00159	53		 push	 ebx
  0015a	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0015d	56		 push	 esi
  0015e	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1504 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00163	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00166	83 c4 18	 add	 esp, 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1504 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00169	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1498 :         return _Reallocate_grow_by(

  0016c	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
  0016f	89 07		 mov	 DWORD PTR [edi], eax

; 1507 :     }

  00171	8b c7		 mov	 eax, edi
  00173	5f		 pop	 edi
  00174	5e		 pop	 esi
  00175	5b		 pop	 ebx
  00176	8b e5		 mov	 esp, ebp
  00178	5d		 pop	 ebp
  00179	c2 08 00	 ret	 8
$LN98@append:

; 2994 :             _Xlen_string(); // result too long

  0017c	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN66@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00181	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN93@append:
  00186	cc		 int	 3
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z
_TEXT	SEGMENT
__Old$1$ = -8						; size = 4
$T1 = -4						; size = 4
__Ptr$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 1421 :     _CONSTEXPR20 basic_string& operator=(_In_z_ const _Elem* const _Ptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1421 :     _CONSTEXPR20 basic_string& operator=(_In_z_ const _Elem* const _Ptr) {

  00006	83 ec 08	 sub	 esp, 8
  00009	53		 push	 ebx
  0000a	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0000b	8b f2		 mov	 esi, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1421 :     _CONSTEXPR20 basic_string& operator=(_In_z_ const _Elem* const _Ptr) {

  0000d	57		 push	 edi
  0000e	8b f9		 mov	 edi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00010	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
$LL82@operator:
  00013	8a 06		 mov	 al, BYTE PTR [esi]
  00015	46		 inc	 esi
  00016	84 c0		 test	 al, al
  00018	75 f9		 jne	 SHORT $LL82@operator
  0001a	2b f1		 sub	 esi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1594 :         if (_Count <= _Mypair._Myval2._Myres) {

  0001c	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  0001f	89 4d f8	 mov	 DWORD PTR __Old$1$[ebp], ecx
  00022	3b f1		 cmp	 esi, ecx
  00024	77 26		 ja	 SHORT $LN9@operator

; 416  :         value_type* _Result = _Bx._Buf;

  00026	8b df		 mov	 ebx, edi

; 434  :         return _Myres > _Small_string_capacity;

  00028	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  0002b	76 02		 jbe	 SHORT $LN12@operator

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  0002d	8b 1f		 mov	 ebx, DWORD PTR [edi]
$LN12@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0002f	56		 push	 esi
  00030	52		 push	 edx
  00031	53		 push	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1597 :             _Mypair._Myval2._Mysize = _Count;

  00032	89 77 10	 mov	 DWORD PTR [edi+16], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00035	e8 00 00 00 00	 call	 _memmove
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1599 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0003d	c6 04 33 00	 mov	 BYTE PTR [ebx+esi], 0

; 1422 :         return assign(_Ptr);

  00041	8b c7		 mov	 eax, edi

; 1423 :     }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
$LN9@operator:

; 2962 :         if (_New_size > max_size()) {

  0004c	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  00052	0f 87 c7 00 00
	00		 ja	 $LN97@operator

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00058	8b de		 mov	 ebx, esi
  0005a	83 cb 0f	 or	 ebx, 15			; 0000000fH
  0005d	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00063	76 12		 jbe	 SHORT $LN30@operator

; 2944 :             return _Max;

  00065	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0006a	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00075	eb 45		 jmp	 SHORT $LN95@operator
$LN30@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2947 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00077	8b d1		 mov	 edx, ecx
  00079	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  0007e	d1 ea		 shr	 edx, 1
  00080	2b c2		 sub	 eax, edx
  00082	3b c8		 cmp	 ecx, eax
  00084	76 12		 jbe	 SHORT $LN31@operator

; 2948 :             return _Max;

  00086	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0008b	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00096	eb 24		 jmp	 SHORT $LN95@operator
$LN31@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00098	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  0009b	3b d8		 cmp	 ebx, eax
  0009d	0f 42 d8	 cmovb	 ebx, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  000a0	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  000a3	85 c0		 test	 eax, eax
  000a5	74 18		 je	 SHORT $LN94@operator
$LN44@operator:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  000a7	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000ac	72 08		 jb	 SHORT $LN45@operator

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000ae	50		 push	 eax
  000af	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000b4	eb 06		 jmp	 SHORT $LN95@operator
$LN45@operator:

; 136  :         return ::operator new(_Bytes);

  000b6	50		 push	 eax
  000b7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN95@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2973 :         _Mypair._Myval2._Mysize = _New_size;

  000bc	83 c4 04	 add	 esp, 4
$LN94@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000bf	56		 push	 esi
  000c0	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2973 :         _Mypair._Myval2._Mysize = _New_size;

  000c3	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c6	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2973 :         _Mypair._Myval2._Mysize = _New_size;

  000c7	89 77 10	 mov	 DWORD PTR [edi+16], esi

; 2974 :         _Mypair._Myval2._Myres  = _New_capacity;

  000ca	89 5f 14	 mov	 DWORD PTR [edi+20], ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000cd	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1608 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000d2	8b 5d fc	 mov	 ebx, DWORD PTR $T1[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2976 :         if (_Old_capacity > _Small_string_capacity) {

  000d8	8b 45 f8	 mov	 eax, DWORD PTR __Old$1$[ebp]

; 1608 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000db	c6 04 33 00	 mov	 BYTE PTR [ebx+esi], 0

; 2976 :         if (_Old_capacity > _Small_string_capacity) {

  000df	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  000e2	76 29		 jbe	 SHORT $LN23@operator

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  000e4	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e7	8b 07		 mov	 eax, DWORD PTR [edi]

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000e9	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000ef	72 12		 jb	 SHORT $LN73@operator

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f1	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f4	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f7	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f9	83 c0 fc	 add	 eax, -4			; fffffffcH
  000fc	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000ff	77 19		 ja	 SHORT $LN70@operator

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00101	8b c2		 mov	 eax, edx
$LN73@operator:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00103	51		 push	 ecx
  00104	50		 push	 eax
  00105	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0010a	83 c4 08	 add	 esp, 8
$LN23@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1604 :         return _Reallocate_for(

  0010d	89 1f		 mov	 DWORD PTR [edi], ebx

; 1422 :         return assign(_Ptr);

  0010f	8b c7		 mov	 eax, edi

; 1423 :     }

  00111	5f		 pop	 edi
  00112	5e		 pop	 esi
  00113	5b		 pop	 ebx
  00114	8b e5		 mov	 esp, ebp
  00116	5d		 pop	 ebp
  00117	c2 04 00	 ret	 4
$LN70@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0011a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN97@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2963 :             _Xlen_string(); // result too long

  0011f	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN93@operator:
  00124	cc		 int	 3
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 1358 :     _CONSTEXPR20 ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 434  :         return _Myres > _Small_string_capacity;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00009	76 27		 jbe	 SHORT $LN19@basic_stri
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0000d	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN30@basic_stri

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN27@basic_stri

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN30@basic_stri:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN19@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 1366 :     }

  00044	c3		 ret	 0
$LN27@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN39@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 1201 :         noexcept(_Choose_pocma_v<_Alty> != _Pocma_values::_No_propagate_allocators) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 1202 :         if (this == _STD addressof(_Right)) {

  00005	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 26		 je	 SHORT $LN20@operator

; 1203 :             return *this;
; 1204 :         }
; 1205 : 
; 1206 :         auto& _Al                 = _Getal();
; 1207 :         auto& _Right_al           = _Right._Getal();
; 1208 :         constexpr auto _Pocma_val = _Choose_pocma_v<_Alty>;
; 1209 :         if constexpr (_Pocma_val == _Pocma_values::_Propagate_allocators) {
; 1210 :             if (_Al != _Right_al) {
; 1211 :                 // intentionally slams into noexcept on OOM, TRANSITION, VSO-466800
; 1212 :                 _Mypair._Myval2._Orphan_all();
; 1213 :                 _Mypair._Myval2._Reload_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Al), _GET_PROXY_ALLOCATOR(_Alty, _Right_al));
; 1214 :             }
; 1215 :         } else if constexpr (_Pocma_val == _Pocma_values::_No_propagate_allocators) {
; 1216 :             if (_Al != _Right_al) {
; 1217 :                 assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);
; 1218 :                 return *this;
; 1219 :             }
; 1220 :         }
; 1221 : 
; 1222 :         _Tidy_deallocate();

  0000e	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00013	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
  00016	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  00019	f3 0f 7e 47 10	 movq	 xmm0, QWORD PTR [edi+16]
  0001e	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0

; 1263 : 
; 1264 :                 _Right_data._Mysize = 0;

  00023	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 1265 :                 _Right_data._Myres  = _Small_string_capacity;

  0002a	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 1266 :                 _Right_data._Activate_SSO_buffer();
; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  00031	c6 07 00	 mov	 BYTE PTR [edi], 0
$LN20@operator:
  00034	5f		 pop	 edi

; 1223 :         _Pocma(_Al, _Right_al);
; 1224 :         _Take_contents(_Right);
; 1225 :         return *this;
; 1226 :     }

  00035	8b c6		 mov	 eax, esi
  00037	5e		 pop	 esi
  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z
_TEXT	SEGMENT
__Right_size$1$ = -16					; size = 4
$T1 = -12						; size = 4
$T2 = -8						; size = 4
__Left_size$1$ = -4					; size = 4
___formal$ = 8						; size = 1
__Left$ = 12						; size = 4
__New_size$1$ = 12					; size = 4
__Right$ = 16						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 1056 :         : _Mypair(_One_then_variadic_args_t{}, _Left._Getal()) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 1063 :         const auto _Right_size = _Right_data._Mysize;

  00007	8b 5d 10	 mov	 ebx, DWORD PTR __Right$[ebp]
  0000a	0f 57 c0	 xorps	 xmm0, xmm0
  0000d	56		 push	 esi
  0000e	8b f1		 mov	 esi, ecx
  00010	57		 push	 edi
  00011	8b 7d 0c	 mov	 edi, DWORD PTR __Left$[ebp]

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00014	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00017	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0001e	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1057 :         auto& _My_data    = _Mypair._Myval2;
; 1058 :         auto& _Left_data  = _Left._Mypair._Myval2;
; 1059 :         auto& _Right_data = _Right._Mypair._Myval2;
; 1060 :         _Left_data._Orphan_all();
; 1061 :         _Right_data._Orphan_all();
; 1062 :         const auto _Left_size  = _Left_data._Mysize;

  00025	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]

; 1063 :         const auto _Right_size = _Right_data._Mysize;

  00028	8b 53 10	 mov	 edx, DWORD PTR [ebx+16]
  0002b	89 4d fc	 mov	 DWORD PTR __Left_size$1$[ebp], ecx
  0002e	89 55 f0	 mov	 DWORD PTR __Right_size$1$[ebp], edx

; 1064 : 
; 1065 :         const auto _Left_capacity  = _Left_data._Myres;
; 1066 :         const auto _Right_capacity = _Right_data._Myres;
; 1067 :         // overflow is OK due to max_size() checks:
; 1068 :         const auto _New_size     = static_cast<size_type>(_Left_size + _Right_size);

  00031	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  00034	89 45 0c	 mov	 DWORD PTR __New_size$1$[ebp], eax

; 1069 :         const bool _Fits_in_left = _Right_size <= _Left_capacity - _Left_size;

  00037	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0003a	2b c1		 sub	 eax, ecx
  0003c	3b d0		 cmp	 edx, eax

; 1070 :         if (_Fits_in_left && _Right_capacity <= _Left_capacity) {

  0003e	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  00041	77 5a		 ja	 SHORT $LN113@basic_stri
  00043	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00046	77 55		 ja	 SHORT $LN113@basic_stri

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00048	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
  0004b	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  0004e	f3 0f 7e 47 10	 movq	 xmm0, QWORD PTR [edi+16]
  00053	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0

; 1263 : 
; 1264 :                 _Right_data._Mysize = 0;

  00058	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 1265 :                 _Right_data._Myres  = _Small_string_capacity;

  0005f	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 1266 :                 _Right_data._Activate_SSO_buffer();
; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  00066	c6 07 00	 mov	 BYTE PTR [edi], 0

; 416  :         value_type* _Result = _Bx._Buf;

  00069	8b fe		 mov	 edi, esi

; 434  :         return _Myres > _Small_string_capacity;

  0006b	83 7e 14 0f	 cmp	 DWORD PTR [esi+20], 15	; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  0006f	76 02		 jbe	 SHORT $LN71@basic_stri

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  00071	8b 3e		 mov	 edi, DWORD PTR [esi]
$LN71@basic_stri:

; 434  :         return _Myres > _Small_string_capacity;

  00073	83 7b 14 0f	 cmp	 DWORD PTR [ebx+20], 15	; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  00077	76 02		 jbe	 SHORT $LN78@basic_stri

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  00079	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN78@basic_stri:

; 1076 :             _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  0007b	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0007e	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1076 :             _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  0007f	8d 04 0f	 lea	 eax, DWORD PTR [edi+ecx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00082	53		 push	 ebx
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1077 :             _My_data._Mysize = _New_size;

  00089	8b 45 0c	 mov	 eax, DWORD PTR __New_size$1$[ebp]

; 1122 :     }

  0008c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008f	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00092	8b c6		 mov	 eax, esi
  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c2 0c 00	 ret	 12			; 0000000cH
$LN113@basic_stri:

; 1078 :             return;
; 1079 :         }
; 1080 : 
; 1081 :         const bool _Fits_in_right = _Left_size <= _Right_capacity - _Right_size;

  0009d	2b c2		 sub	 eax, edx
  0009f	3b c8		 cmp	 ecx, eax

; 1082 :         if (_Allocators_equal(_Getal(), _Right._Getal()) && _Fits_in_right) {

  000a1	77 5b		 ja	 SHORT $LN112@basic_stri

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000a3	0f 10 03	 movups	 xmm0, XMMWORD PTR [ebx]

; 1097 :             _Traits::move(_Ptr + _Left_size, _Ptr, _Right_size + 1);

  000a6	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000a9	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000aa	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  000ad	f3 0f 7e 43 10	 movq	 xmm0, QWORD PTR [ebx+16]
  000b2	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0

; 1263 : 
; 1264 :                 _Right_data._Mysize = 0;

  000b7	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 1265 :                 _Right_data._Myres  = _Small_string_capacity;

  000be	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH

; 1266 :                 _Right_data._Activate_SSO_buffer();
; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  000c5	c6 03 00	 mov	 BYTE PTR [ebx], 0

; 1083 :             // take _Right's buffer, max_size() is OK because _Fits_in_right
; 1084 :             // At this point, we have tested:
; 1085 :             // !(_Fits_in_left && _Right_capacity <= _Left_capacity) && _Fits_in_right
; 1086 :             // therefore: (by De Morgan's Laws)
; 1087 :             // (!_Fits_in_left || _Right_capacity > _Left_capacity) && _Fits_in_right
; 1088 :             // therefore: (by the distributive property)
; 1089 :             // (!_Fits_in_left && _Fits_in_right)  // implying _Right has more capacity
; 1090 :             //     || (_Right_capacity > _Left_capacity && _Fits_in_right)  // tests that _Right has more capacity
; 1091 :             // therefore: _Right must have more than the minimum capacity, so it must be _Large_mode_engaged()
; 1092 :             _STL_INTERNAL_CHECK(_Right_data._Large_mode_engaged());
; 1093 :             _My_data._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal())); // throws, hereafter nothrow in this block
; 1094 :             _Take_contents(_Right);
; 1095 :             const auto _Ptr = _Unfancy(_My_data._Bx._Ptr);

  000c8	8b 1e		 mov	 ebx, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000ca	53		 push	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1097 :             _Traits::move(_Ptr + _Left_size, _Ptr, _Right_size + 1);

  000cb	8d 04 0b	 lea	 eax, DWORD PTR [ebx+ecx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 _memmove
  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  000d7	83 7f 14 0f	 cmp	 DWORD PTR [edi+20], 15	; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  000db	76 02		 jbe	 SHORT $LN102@basic_stri

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  000dd	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN102@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000df	8b 45 fc	 mov	 eax, DWORD PTR __Left_size$1$[ebp]
  000e2	50		 push	 eax
  000e3	57		 push	 edi
  000e4	53		 push	 ebx
  000e5	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1099 :             _My_data._Mysize = _New_size;

  000ea	8b 45 0c	 mov	 eax, DWORD PTR __New_size$1$[ebp]

; 1122 :     }

  000ed	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f0	89 46 10	 mov	 DWORD PTR [esi+16], eax
  000f3	8b c6		 mov	 eax, esi
  000f5	5f		 pop	 edi
  000f6	5e		 pop	 esi
  000f7	5b		 pop	 ebx
  000f8	8b e5		 mov	 esp, ebp
  000fa	5d		 pop	 ebp
  000fb	c2 0c 00	 ret	 12			; 0000000cH
$LN112@basic_stri:

; 1100 :             return;
; 1101 :         }
; 1102 : 
; 1103 :         // can't use either buffer, reallocate
; 1104 :         const auto _Max = max_size();
; 1105 :         if (_Max - _Left_size < _Right_size) { // check if max_size() is OK

  000fe	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00103	2b c1		 sub	 eax, ecx
  00105	3b c2		 cmp	 eax, edx
  00107	0f 82 a2 00 00
	00		 jb	 $LN132@basic_stri

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  0010d	8b 45 0c	 mov	 eax, DWORD PTR __New_size$1$[ebp]
  00110	83 c8 0f	 or	 eax, 15			; 0000000fH
  00113	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00118	76 14		 jbe	 SHORT $LN20@basic_stri

; 2944 :             return _Max;

  0011a	ba 00 00 00 80	 mov	 edx, -2147483648	; 80000000H
  0011f	c7 45 f8 ff ff
	ff 7f		 mov	 DWORD PTR $T2[ebp], 2147483647 ; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00126	52		 push	 edx
  00127	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0012c	eb 2a		 jmp	 SHORT $LN130@basic_stri
$LN20@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0012e	ba 16 00 00 00	 mov	 edx, 22			; 00000016H
  00133	3b c2		 cmp	 eax, edx
  00135	0f 42 c2	 cmovb	 eax, edx
  00138	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  0013b	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  0013e	85 d2		 test	 edx, edx
  00140	74 21		 je	 SHORT $LN129@basic_stri
$LN34@basic_stri:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00142	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00148	72 08		 jb	 SHORT $LN35@basic_stri

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0014a	52		 push	 edx
  0014b	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00150	eb 06		 jmp	 SHORT $LN130@basic_stri
$LN35@basic_stri:

; 136  :         return ::operator new(_Bytes);

  00152	52		 push	 edx
  00153	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN130@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1114 :         _Construct_in_place(_My_data._Bx._Ptr, _Fancyptr);

  00158	8b 4d fc	 mov	 ecx, DWORD PTR __Left_size$1$[ebp]
  0015b	8b d0		 mov	 edx, eax
  0015d	8b 45 f8	 mov	 eax, DWORD PTR $T2[ebp]
  00160	83 c4 04	 add	 esp, 4
$LN129@basic_stri:

; 1115 :         _My_data._Mysize = _New_size;

  00163	8b 5d 0c	 mov	 ebx, DWORD PTR __New_size$1$[ebp]
  00166	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 417  :         if (_Large_mode_engaged()) {

  00169	8b 5d 10	 mov	 ebx, DWORD PTR __Right$[ebp]

; 1114 :         _Construct_in_place(_My_data._Bx._Ptr, _Fancyptr);

  0016c	89 16		 mov	 DWORD PTR [esi], edx

; 1116 :         _My_data._Myres  = _New_capacity;

  0016e	89 46 14	 mov	 DWORD PTR [esi+20], eax

; 434  :         return _Myres > _Small_string_capacity;

  00171	83 7f 14 0f	 cmp	 DWORD PTR [edi+20], 15	; 0000000fH

; 1114 :         _Construct_in_place(_My_data._Bx._Ptr, _Fancyptr);

  00175	89 55 f4	 mov	 DWORD PTR $T1[ebp], edx

; 417  :         if (_Large_mode_engaged()) {

  00178	76 02		 jbe	 SHORT $LN40@basic_stri

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  0017a	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN40@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0017c	51		 push	 ecx
  0017d	57		 push	 edi
  0017e	52		 push	 edx
  0017f	e8 00 00 00 00	 call	 _memcpy
  00184	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00187	83 7b 14 0f	 cmp	 DWORD PTR [ebx+20], 15	; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  0018b	76 02		 jbe	 SHORT $LN50@basic_stri

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  0018d	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN50@basic_stri:

; 1119 :         _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  0018f	8b 45 f0	 mov	 eax, DWORD PTR __Right_size$1$[ebp]
  00192	40		 inc	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00193	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1119 :         _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  00194	8b 45 fc	 mov	 eax, DWORD PTR __Left_size$1$[ebp]
  00197	03 45 f4	 add	 eax, DWORD PTR $T1[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0019a	53		 push	 ebx
  0019b	50		 push	 eax
  0019c	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1122 :     }

  001a1	83 c4 0c	 add	 esp, 12			; 0000000cH
  001a4	8b c6		 mov	 eax, esi
  001a6	5f		 pop	 edi
  001a7	5e		 pop	 esi
  001a8	5b		 pop	 ebx
  001a9	8b e5		 mov	 esp, ebp
  001ab	5d		 pop	 ebp
  001ac	c2 0c 00	 ret	 12			; 0000000cH
$LN132@basic_stri:

; 1106 :             _Xlen_string();

  001af	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN127@basic_stri:
  001b4	cc		 int	 3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Result$1$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 693  :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 425  :         const value_type* _Result = _Bx._Buf;

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Right$[ebp]
  00007	0f 57 c0	 xorps	 xmm0, xmm0

; 693  :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx

; 425  :         const value_type* _Result = _Bx._Buf;

  0000d	89 5d 08	 mov	 DWORD PTR __Result$1$[ebp], ebx
  00010	8b c3		 mov	 eax, ebx

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00012	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00015	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0001c	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 434  :         return _Myres > _Small_string_capacity;

  00023	83 7b 14 0f	 cmp	 DWORD PTR [ebx+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  00027	76 05		 jbe	 SHORT $LN17@basic_stri

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00029	8b 03		 mov	 eax, DWORD PTR [ebx]
  0002b	89 45 08	 mov	 DWORD PTR __Result$1$[ebp], eax
$LN17@basic_stri:

; 694  :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0002e	8b 5b 10	 mov	 ebx, DWORD PTR [ebx+16]

; 857  :         if (_Count > max_size()) {

  00031	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  00037	0f 87 8d 00 00
	00		 ja	 $LN63@basic_stri

; 859  :         }
; 860  : 
; 861  :         auto& _Al       = _Getal();
; 862  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 863  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 864  : 
; 865  :         if (_Count <= _Small_string_capacity) {

  0003d	83 fb 0f	 cmp	 ebx, 15			; 0000000fH
  00040	77 18		 ja	 SHORT $LN25@basic_stri

; 866  :             _My_data._Mysize = _Count;

  00042	89 5f 10	 mov	 DWORD PTR [edi+16], ebx

; 867  :             _My_data._Myres  = _Small_string_capacity;

  00045	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0004c	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 695  :     }

  0004f	8b c7		 mov	 eax, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00051	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 695  :     }

  00054	5f		 pop	 edi
  00055	5b		 pop	 ebx
  00056	5d		 pop	 ebp
  00057	c2 04 00	 ret	 4
$LN25@basic_stri:
  0005a	56		 push	 esi

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  0005b	8b f3		 mov	 esi, ebx
  0005d	83 ce 0f	 or	 esi, 15			; 0000000fH
  00060	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00066	76 12		 jbe	 SHORT $LN31@basic_stri

; 2944 :             return _Max;

  00068	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0006d	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00078	eb 2a		 jmp	 SHORT $LN61@basic_stri
$LN31@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0007a	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  0007f	3b f0		 cmp	 esi, eax
  00081	0f 42 f0	 cmovb	 esi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  00084	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  00087	85 c0		 test	 eax, eax
  00089	75 04		 jne	 SHORT $LN45@basic_stri

; 228  :         return nullptr;

  0008b	33 c9		 xor	 ecx, ecx
  0008d	eb 1a		 jmp	 SHORT $LN44@basic_stri
$LN45@basic_stri:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  0008f	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00094	72 08		 jb	 SHORT $LN46@basic_stri

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00096	50		 push	 eax
  00097	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0009c	eb 06		 jmp	 SHORT $LN61@basic_stri
$LN46@basic_stri:

; 136  :         return ::operator new(_Bytes);

  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN61@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000a4	8b c8		 mov	 ecx, eax
  000a6	83 c4 04	 add	 esp, 4
$LN44@basic_stri:

; 893  :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 894  :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 895  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 896  :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 897  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);
; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 899  :         } else { // _Strat == _Construct_strategy::_From_string
; 900  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);

  000a9	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  000ac	89 0f		 mov	 DWORD PTR [edi], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000ae	50		 push	 eax
  000af	ff 75 08	 push	 DWORD PTR __Result$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 891  :         _My_data._Mysize = _Count;

  000b2	89 5f 10	 mov	 DWORD PTR [edi+16], ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000b5	51		 push	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 892  :         _My_data._Myres  = _New_capacity;

  000b6	89 77 14	 mov	 DWORD PTR [edi+20], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000b9	e8 00 00 00 00	 call	 _memcpy
  000be	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 695  :     }

  000c1	8b c7		 mov	 eax, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c3	5e		 pop	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 695  :     }

  000c4	5f		 pop	 edi
  000c5	5b		 pop	 ebx
  000c6	5d		 pop	 ebp
  000c7	c2 04 00	 ret	 4
$LN63@basic_stri:

; 858  :             _Xlen_string(); // result too long

  000ca	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN60@basic_stri:
  000cf	cc		 int	 3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 512  :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 107  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 108  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN18@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN18@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 144  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 145  :     }

  00003	8b c1		 mov	 eax, ecx

; 66   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 67   :     {
; 68   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 144  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 145  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN13@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN8@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 96   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 97   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 92   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 73   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 75   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\stdio.h
;	COMDAT __snprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__snprintf PROC						; COMDAT

; 1947 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1392 :         int const _Result = __stdio_common_vsprintf(

  00003	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 01	 or	 ecx, 1
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1393 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1394 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1395 : 
; 1396 :         return _Result < 0 ? -1 : _Result;

  00025	83 c9 ff	 or	 ecx, -1
  00028	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 48 c1	 cmovs	 eax, ecx

; 1948 :         int _Result;
; 1949 :         va_list _ArgList;
; 1950 :         __crt_va_start(_ArgList, _Format);
; 1951 :         _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
; 1952 :         __crt_va_end(_ArgList);
; 1953 :         return _Result;
; 1954 :     }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
__snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
