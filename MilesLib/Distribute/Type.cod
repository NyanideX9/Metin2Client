; Listing generated by Microsoft (R) Optimizing Compiler Version 19.43.34808.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\MilesLib\Distribute\Type.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	_fprintf
PUBLIC	__snprintf
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z ; NSound::LoadSoundInformationPiece
PUBLIC	?SaveSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z ; NSound::SaveSoundInformationPiece
PUBLIC	?DataToInstance@NSound@@YAXABV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@PAV?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@3@@Z ; NSound::DataToInstance
PUBLIC	?GetResultString@NSound@@YAPBDXZ		; NSound::GetResultString
PUBLIC	?SetResultString@NSound@@YAXPBD@Z		; NSound::SetResultString
PUBLIC	?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?_Xlength@?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@CAXXZ ; std::vector<NSound::SSoundData,std::allocator<NSound::SSoundData> >::_Xlength
PUBLIC	?_Xlength@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@CAXXZ ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::_Xlength
PUBLIC	?_Xrange@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@CAXXZ ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::_Xrange
PUBLIC	??$_Destroy_range@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAXPAUSSoundInstance@NSound@@QAU12@AAV?$allocator@USSoundInstance@NSound@@@0@@Z ; std::_Destroy_range<std::allocator<NSound::SSoundInstance> >
PUBLIC	??$_Destroy_range@V?$allocator@USSoundData@NSound@@@std@@@std@@YAXPAUSSoundData@NSound@@QAU12@AAV?$allocator@USSoundData@NSound@@@0@@Z ; std::_Destroy_range<std::allocator<NSound::SSoundData> >
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Uninitialized_value_construct_n@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAPAUSSoundInstance@NSound@@PAU12@IAAV?$allocator@USSoundInstance@NSound@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<NSound::SSoundInstance> >
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<NSound::SSoundData,std::allocator<NSound::SSoundData> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Uninitialized_value_construct_n@V?$allocator@USSoundData@NSound@@@std@@@std@@YAPAUSSoundData@NSound@@PAU12@IAAV?$allocator@USSoundData@NSound@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<NSound::SSoundData> >
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	?strResult@NSound@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; NSound::strResult
PUBLIC	??_C@_0BP@LLPPICEF@?5Can?5not?5open?5file?5for?5reading@ ; `string'
PUBLIC	??_C@_0P@DFMHJMOB@sounddatacount@		; `string'
PUBLIC	??_C@_0DD@IKAPCMKK@?5File?5format?5error?0?5SoundDataCo@ ; `string'
PUBLIC	??_C@_0O@OOLLGPNP@sounddata?$CF02d@		; `string'
PUBLIC	??_C@_0BA@EHBCCDFO@?5Unable?5to?5find@		; `string'
PUBLIC	??_C@_0BF@LPIKLLAN@?5File?5format?5error?3?5@	; `string'
PUBLIC	??_C@_0DE@ECJCCDPG@?5File?5format?5error?3?5The?5size?5of@ ; `string'
PUBLIC	??_C@_07EGDJHJID@?5Loaded@			; `string'
PUBLIC	??_C@_02BKFDOEMK@wt@				; `string'
PUBLIC	??_C@_0FN@PJPGJAJH@Failed?5to?5save?5file?5?$CI?$CFs?$CJ?4?6Pleas@ ; `string'
PUBLIC	??_C@_05NAOIJFC@Error@				; `string'
PUBLIC	??_C@_0BO@MLNNILFP@?5Cannot?5open?5file?5for?5writing@ ; `string'
PUBLIC	??_C@_0CN@NJIDENFN@ScriptType?5?5?5?5?5?5?5?5CharacterSoun@ ; `string'
PUBLIC	??_C@_01EEMJAFIK@?6@				; `string'
PUBLIC	??_C@_0BG@JEIKAJIN@SoundDataCount?5?5?5?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0BN@FNDBKONF@SoundData?$CF02d?5?5?5?5?5?5?5?$CFf?5?$CC?$CFs?$CC?6@ ; `string'
PUBLIC	??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@	; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	__real@3c888889
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_atof:PROC
EXTRN	_fclose:PROC
EXTRN	_fopen:PROC
EXTRN	__unlink:PROC
EXTRN	___stdio_common_vfprintf:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?IsFile@@YA_NPBD@Z:PROC				; IsFile
EXTRN	?LogBox@@YAXPBD0PAUHWND__@@@Z:PROC		; LogBox
EXTRN	?Cache@CTextFileLoader@@SAPAV1@PBD@Z:PROC	; CTextFileLoader::Cache
EXTRN	?IsEmpty@CTextFileLoader@@QAE_NXZ:PROC		; CTextFileLoader::IsEmpty
EXTRN	?SetTop@CTextFileLoader@@QAEXXZ:PROC		; CTextFileLoader::SetTop
EXTRN	?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z:PROC ; CTextFileLoader::GetTokenVector
EXTRN	?GetTokenInteger@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAH@Z:PROC ; CTextFileLoader::GetTokenInteger
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__ftol3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
CRT$XCU	SEGMENT
?strResult$initializer$@NSound@@3P6AXXZA DD FLAT:??__EstrResult@NSound@@YAXXZ ; NSound::strResult$initializer$
CRT$XCU	ENDS
;	COMDAT __real@3c888889
CONST	SEGMENT
__real@3c888889 DD 03c888889r			; 0.0166667
CONST	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@
CONST	SEGMENT
??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@ DB 'invalid vector subscri'
	DB	'pt', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@FNDBKONF@SoundData?$CF02d?5?5?5?5?5?5?5?$CFf?5?$CC?$CFs?$CC?6@
CONST	SEGMENT
??_C@_0BN@FNDBKONF@SoundData?$CF02d?5?5?5?5?5?5?5?$CFf?5?$CC?$CFs?$CC?6@ DB 'S'
	DB	'oundData%02d       %f "%s"', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@JEIKAJIN@SoundDataCount?5?5?5?5?$CFd?6@
CONST	SEGMENT
??_C@_0BG@JEIKAJIN@SoundDataCount?5?5?5?5?$CFd?6@ DB 'SoundDataCount    %'
	DB	'd', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@NJIDENFN@ScriptType?5?5?5?5?5?5?5?5CharacterSoun@
CONST	SEGMENT
??_C@_0CN@NJIDENFN@ScriptType?5?5?5?5?5?5?5?5CharacterSoun@ DB 'ScriptTyp'
	DB	'e        CharacterSoundInformation', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@MLNNILFP@?5Cannot?5open?5file?5for?5writing@
CONST	SEGMENT
??_C@_0BO@MLNNILFP@?5Cannot?5open?5file?5for?5writing@ DB ' Cannot open f'
	DB	'ile for writing', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05NAOIJFC@Error@
CONST	SEGMENT
??_C@_05NAOIJFC@Error@ DB 'Error', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0FN@PJPGJAJH@Failed?5to?5save?5file?5?$CI?$CFs?$CJ?4?6Pleas@
CONST	SEGMENT
??_C@_0FN@PJPGJAJH@Failed?5to?5save?5file?5?$CI?$CFs?$CJ?4?6Pleas@ DB 'Fa'
	DB	'iled to save file (%s).', 0aH, 'Please check if it is read-on'
	DB	'ly or you have no space on the disk.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02BKFDOEMK@wt@
CONST	SEGMENT
??_C@_02BKFDOEMK@wt@ DB 'wt', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07EGDJHJID@?5Loaded@
CONST	SEGMENT
??_C@_07EGDJHJID@?5Loaded@ DB ' Loaded', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@ECJCCDPG@?5File?5format?5error?3?5The?5size?5of@
CONST	SEGMENT
??_C@_0DE@ECJCCDPG@?5File?5format?5error?3?5The?5size?5of@ DB ' File form'
	DB	'at error: The size of the vector is not 2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LPIKLLAN@?5File?5format?5error?3?5@
CONST	SEGMENT
??_C@_0BF@LPIKLLAN@?5File?5format?5error?3?5@ DB ' File format error: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EHBCCDFO@?5Unable?5to?5find@
CONST	SEGMENT
??_C@_0BA@EHBCCDFO@?5Unable?5to?5find@ DB ' Unable to find', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OOLLGPNP@sounddata?$CF02d@
CONST	SEGMENT
??_C@_0O@OOLLGPNP@sounddata?$CF02d@ DB 'sounddata%02d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@IKAPCMKK@?5File?5format?5error?0?5SoundDataCo@
CONST	SEGMENT
??_C@_0DD@IKAPCMKK@?5File?5format?5error?0?5SoundDataCo@ DB ' File format'
	DB	' error, SoundDataCount Unable to find.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DFMHJMOB@sounddatacount@
CONST	SEGMENT
??_C@_0P@DFMHJMOB@sounddatacount@ DB 'sounddatacount', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@LLPPICEF@?5Can?5not?5open?5file?5for?5reading@
CONST	SEGMENT
??_C@_0BP@LLPPICEF@?5Can?5not?5open?5file?5for?5reading@ DB ' Can not ope'
	DB	'n file for reading', 00H			; `string'
CONST	ENDS
_DATA	SEGMENT
?strResult@NSound@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A DB 00H ; NSound::strResult
	DB	19 DUP(00H)
	DD	0fH
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SaveSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SaveSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?SaveSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z$1
__ehfuncinfo$?SaveSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SaveSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z DD 019930522H
	DD	0aH
	DD	FLAT:__unwindtable$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$4
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$7
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$8
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$9
xdata$x	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$allocator@USSoundData@NSound@@@std@@@std@@YAPAUSSoundData@NSound@@PAU12@IAAV?$allocator@USSoundData@NSound@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Uninitialized_value_construct_n@V?$allocator@USSoundData@NSound@@@std@@@std@@YAPAUSSoundData@NSound@@PAU12@IAAV?$allocator@USSoundData@NSound@@@0@@Z PROC ; std::_Uninitialized_value_construct_n<std::allocator<NSound::SSoundData> >, COMDAT

; 2041 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2042 :     // value-initialize _Count objects to raw _First, using _Al
; 2043 :     using _Ptrty = typename _Alloc::value_type*;
; 2044 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 2045 : #if _HAS_CXX20
; 2046 :         if (!_STD is_constant_evaluated())
; 2047 : #endif // _HAS_CXX20
; 2048 :         {
; 2049 :             auto _PFirst = _Unfancy(_First);
; 2050 :             _Zero_range(_PFirst, _PFirst + _Count);
; 2051 :             return _First + _Count;
; 2052 :         }
; 2053 :     }
; 2054 : 
; 2055 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 2056 :     for (; 0 < _Count; --_Count) {

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	56		 push	 esi

; 1796 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00007	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]

; 2042 :     // value-initialize _Count objects to raw _First, using _Al
; 2043 :     using _Ptrty = typename _Alloc::value_type*;
; 2044 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 2045 : #if _HAS_CXX20
; 2046 :         if (!_STD is_constant_evaluated())
; 2047 : #endif // _HAS_CXX20
; 2048 :         {
; 2049 :             auto _PFirst = _Unfancy(_First);
; 2050 :             _Zero_range(_PFirst, _PFirst + _Count);
; 2051 :             return _First + _Count;
; 2052 :         }
; 2053 :     }
; 2054 : 
; 2055 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 2056 :     for (; 0 < _Count; --_Count) {

  0000a	85 c0		 test	 eax, eax
  0000c	74 29		 je	 SHORT $LN3@Uninitiali
  0000e	66 90		 npad	 2
$LL4@Uninitiali:

; 732  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00016	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00019	0f 11 46 04	 movups	 XMMWORD PTR [esi+4], xmm0

; 836  :         _My_data._Mysize = 0;

  0001d	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  00024	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0002b	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1808 :         ++_Last;

  0002f	83 c6 1c	 add	 esi, 28			; 0000001cH

; 2042 :     // value-initialize _Count objects to raw _First, using _Al
; 2043 :     using _Ptrty = typename _Alloc::value_type*;
; 2044 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 2045 : #if _HAS_CXX20
; 2046 :         if (!_STD is_constant_evaluated())
; 2047 : #endif // _HAS_CXX20
; 2048 :         {
; 2049 :             auto _PFirst = _Unfancy(_First);
; 2050 :             _Zero_range(_PFirst, _PFirst + _Count);
; 2051 :             return _First + _Count;
; 2052 :         }
; 2053 :     }
; 2054 : 
; 2055 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 2056 :     for (; 0 < _Count; --_Count) {

  00032	83 e8 01	 sub	 eax, 1
  00035	75 d9		 jne	 SHORT $LL4@Uninitiali
$LN3@Uninitiali:

; 1802 :         _STD _Destroy_range(_First, _Last, _Al);

  00037	ff 75 10	 push	 DWORD PTR __Al$[ebp]
  0003a	56		 push	 esi
  0003b	56		 push	 esi
  0003c	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USSoundData@NSound@@@std@@@std@@YAXPAUSSoundData@NSound@@QAU12@AAV?$allocator@USSoundData@NSound@@@0@@Z ; std::_Destroy_range<std::allocator<NSound::SSoundData> >
  00041	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2057 :         _Backout._Emplace_back();
; 2058 :     }
; 2059 : 
; 2060 :     return _Backout._Release();

  00044	8b c6		 mov	 eax, esi
  00046	5e		 pop	 esi

; 2061 : }

  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
??$_Uninitialized_value_construct_n@V?$allocator@USSoundData@NSound@@@std@@@std@@YAPAUSSoundData@NSound@@PAU12@IAAV?$allocator@USSoundData@NSound@@@0@@Z ENDP ; std::_Uninitialized_value_construct_n<std::allocator<NSound::SSoundData> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
_this$1$ = -16						; size = 4
__Oldsize$1$ = -12					; size = 4
tv746 = -8						; size = 4
$T2 = -4						; size = 4
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<NSound::SSoundData,std::allocator<NSound::SSoundData> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1537 :     _CONSTEXPR20 void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 1538 :         if (_Newsize > max_size()) {

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Newsize$[ebp]
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	89 7d f0	 mov	 DWORD PTR _this$1$[ebp], edi
  00010	81 fb 49 92 24
	09		 cmp	 ebx, 153391689		; 09249249H
  00016	0f 87 c9 01 00
	00		 ja	 $LN144@Resize_rea

; 1540 :         }
; 1541 : 
; 1542 :         auto& _Al         = _Getal();
; 1543 :         auto& _My_data    = _Mypair._Myval2;
; 1544 :         pointer& _Myfirst = _My_data._Myfirst;
; 1545 :         pointer& _Mylast  = _My_data._Mylast;
; 1546 : 
; 1547 :         const auto _Oldsize    = static_cast<size_type>(_Mylast - _Myfirst);

  0001c	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0001f	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00024	2b 0f		 sub	 ecx, DWORD PTR [edi]
  00026	f7 e9		 imul	 ecx
  00028	56		 push	 esi
  00029	03 d1		 add	 edx, ecx

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002b	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0002e	2b 0f		 sub	 ecx, DWORD PTR [edi]

; 1540 :         }
; 1541 : 
; 1542 :         auto& _Al         = _Getal();
; 1543 :         auto& _My_data    = _Mypair._Myval2;
; 1544 :         pointer& _Myfirst = _My_data._Myfirst;
; 1545 :         pointer& _Mylast  = _My_data._Mylast;
; 1546 : 
; 1547 :         const auto _Oldsize    = static_cast<size_type>(_Mylast - _Myfirst);

  00030	c1 fa 04	 sar	 edx, 4
  00033	8b c2		 mov	 eax, edx
  00035	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00038	03 c2		 add	 eax, edx
  0003a	89 45 f4	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0003d	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00042	f7 e9		 imul	 ecx

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00044	b8 49 92 24 09	 mov	 eax, 153391689		; 09249249H

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00049	03 d1		 add	 edx, ecx
  0004b	c1 fa 04	 sar	 edx, 4
  0004e	8b ca		 mov	 ecx, edx
  00050	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00053	03 ca		 add	 ecx, edx

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00055	8b d1		 mov	 edx, ecx
  00057	d1 ea		 shr	 edx, 1
  00059	2b c2		 sub	 eax, edx
  0005b	3b c8		 cmp	 ecx, eax
  0005d	76 19		 jbe	 SHORT $LN6@Resize_rea

; 1997 :             return _Max; // geometric growth would overflow

  0005f	be fc ff ff ff	 mov	 esi, -4			; fffffffcH
  00064	c7 45 f8 fc ff
	ff ff		 mov	 DWORD PTR tv746[ebp], -4 ; fffffffcH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0006b	56		 push	 esi
  0006c	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00071	8b d8		 mov	 ebx, eax
  00073	89 5d fc	 mov	 DWORD PTR $T2[ebp], ebx
  00076	eb 50		 jmp	 SHORT $LN142@Resize_rea
$LN6@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00078	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 2001 : 
; 2002 :         if (_Geometric < _Newsize) {

  0007b	3b c3		 cmp	 eax, ebx
  0007d	73 1c		 jae	 SHORT $LN7@Resize_rea

; 2003 :             return _Newsize; // geometric growth would be insufficient

  0007f	8b c3		 mov	 eax, ebx
$LN17@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 122  :     return _Count * _Ty_size;

  00081	8d 34 c5 00 00
	00 00		 lea	 esi, DWORD PTR [eax*8]
  00088	2b f0		 sub	 esi, eax
  0008a	c1 e6 02	 shl	 esi, 2
  0008d	89 75 f8	 mov	 DWORD PTR tv746[ebp], esi

; 227  :     if (_Bytes == 0) {

  00090	85 f6		 test	 esi, esi
  00092	75 14		 jne	 SHORT $LN21@Resize_rea

; 228  :         return nullptr;

  00094	33 db		 xor	 ebx, ebx
  00096	89 5d fc	 mov	 DWORD PTR $T2[ebp], ebx
  00099	eb 30		 jmp	 SHORT $LN20@Resize_rea
$LN7@Resize_rea:

; 117  :         if (_Count > _Max_possible) {

  0009b	3d 49 92 24 09	 cmp	 eax, 153391689		; 09249249H
  000a0	0f 87 44 01 00
	00		 ja	 $LN145@Resize_rea
  000a6	eb d9		 jmp	 SHORT $LN17@Resize_rea
$LN21@Resize_rea:

; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  000a8	81 fe 00 10 00
	00		 cmp	 esi, 4096		; 00001000H
  000ae	72 0d		 jb	 SHORT $LN22@Resize_rea

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000b0	56		 push	 esi
  000b1	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000b6	8b d8		 mov	 ebx, eax
  000b8	89 5d fc	 mov	 DWORD PTR $T2[ebp], ebx
  000bb	eb 0b		 jmp	 SHORT $LN142@Resize_rea
$LN22@Resize_rea:

; 136  :         return ::operator new(_Bytes);

  000bd	56		 push	 esi
  000be	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 256  :         return _Traits::_Allocate(_Bytes);

  000c3	8b d8		 mov	 ebx, eax
  000c5	89 45 fc	 mov	 DWORD PTR $T2[ebp], eax
$LN142@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1551 :         const pointer _Appended_first = _Newvec + _Oldsize;

  000c8	83 c4 04	 add	 esp, 4
$LN20@Resize_rea:
  000cb	8b 55 f4	 mov	 edx, DWORD PTR __Oldsize$1$[ebp]

; 1560 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

  000ce	57		 push	 edi
  000cf	8d 04 d5 00 00
	00 00		 lea	 eax, DWORD PTR [edx*8]
  000d6	2b c2		 sub	 eax, edx
  000d8	8d 0c 83	 lea	 ecx, DWORD PTR [ebx+eax*4]
  000db	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  000de	2b c2		 sub	 eax, edx
  000e0	50		 push	 eax
  000e1	51		 push	 ecx
  000e2	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n@V?$allocator@USSoundData@NSound@@@std@@@std@@YAPAUSSoundData@NSound@@PAU12@IAAV?$allocator@USSoundData@NSound@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<NSound::SSoundData> >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1948 :     const auto _ULast = _STD _Get_unwrapped(_Last);

  000e7	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1560 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

  000ea	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ed	8b 37		 mov	 esi, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1961 :     for (; _UFirst != _ULast; ++_UFirst) {

  000ef	3b f0		 cmp	 esi, eax
  000f1	74 5d		 je	 SHORT $LN30@Resize_rea
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1551 :         const pointer _Appended_first = _Newvec + _Oldsize;

  000f3	8b 55 fc	 mov	 edx, DWORD PTR $T2[ebp]
  000f6	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  000f9	83 c2 04	 add	 edx, 4
  000fc	8b f8		 mov	 edi, eax
  000fe	66 90		 npad	 2
$LL31@Resize_rea:
  00100	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1808 :         ++_Last;

  00102	8d 52 1c	 lea	 edx, DWORD PTR [edx+28]
  00105	89 03		 mov	 DWORD PTR [ebx], eax

; 1961 :     for (; _UFirst != _ULast; ++_UFirst) {

  00107	8d 49 1c	 lea	 ecx, DWORD PTR [ecx+28]
  0010a	0f 57 c0	 xorps	 xmm0, xmm0
  0010d	83 c6 1c	 add	 esi, 28			; 0000001cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00110	0f 11 42 e4	 movups	 XMMWORD PTR [edx-28], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00114	c7 42 f4 00 00
	00 00		 mov	 DWORD PTR [edx-12], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1808 :         ++_Last;

  0011b	83 c3 1c	 add	 ebx, 28			; 0000001cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0011e	c7 42 f8 00 00
	00 00		 mov	 DWORD PTR [edx-8], 0

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00125	0f 10 41 e4	 movups	 xmm0, XMMWORD PTR [ecx-28]
  00129	0f 11 42 e4	 movups	 XMMWORD PTR [edx-28], xmm0
  0012d	f3 0f 7e 41 f4	 movq	 xmm0, QWORD PTR [ecx-12]
  00132	66 0f d6 42 f4	 movq	 QWORD PTR [edx-12], xmm0

; 1263 : 
; 1264 :                 _Right_data._Mysize = 0;

  00137	c7 41 f4 00 00
	00 00		 mov	 DWORD PTR [ecx-12], 0

; 1265 :                 _Right_data._Myres  = _Small_string_capacity;

  0013e	c7 41 f8 0f 00
	00 00		 mov	 DWORD PTR [ecx-8], 15	; 0000000fH

; 1266 :                 _Right_data._Activate_SSO_buffer();
; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  00145	c6 41 e4 00	 mov	 BYTE PTR [ecx-28], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1961 :     for (; _UFirst != _ULast; ++_UFirst) {

  00149	3b f7		 cmp	 esi, edi
  0014b	75 b3		 jne	 SHORT $LL31@Resize_rea
  0014d	8b 7d f0	 mov	 edi, DWORD PTR _this$1$[ebp]
$LN30@Resize_rea:

; 1802 :         _STD _Destroy_range(_First, _Last, _Al);

  00150	57		 push	 edi
  00151	53		 push	 ebx
  00152	53		 push	 ebx
  00153	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USSoundData@NSound@@@std@@@std@@YAXPAUSSoundData@NSound@@QAU12@AAV?$allocator@USSoundData@NSound@@@0@@Z ; std::_Destroy_range<std::allocator<NSound::SSoundData> >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  00158	8b 0f		 mov	 ecx, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1802 :         _STD _Destroy_range(_First, _Last, _Al);

  0015a	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  0015d	85 c9		 test	 ecx, ecx
  0015f	74 57		 je	 SHORT $LN87@Resize_rea

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);

  00161	57		 push	 edi
  00162	ff 77 04	 push	 DWORD PTR [edi+4]
  00165	51		 push	 ecx
  00166	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USSoundData@NSound@@@std@@@std@@YAXPAUSSoundData@NSound@@QAU12@AAV?$allocator@USSoundData@NSound@@@0@@Z ; std::_Destroy_range<std::allocator<NSound::SSoundData> >

; 2056 :             _ASAN_VECTOR_REMOVE;
; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0016b	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0016e	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00173	8b 37		 mov	 esi, DWORD PTR [edi]
  00175	83 c4 0c	 add	 esp, 12			; 0000000cH
  00178	2b ce		 sub	 ecx, esi
  0017a	f7 e9		 imul	 ecx
  0017c	03 d1		 add	 edx, ecx
  0017e	c1 fa 04	 sar	 edx, 4
  00181	8b c2		 mov	 eax, edx
  00183	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00186	03 c2		 add	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00188	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  0018f	2b c8		 sub	 ecx, eax
  00191	c1 e1 02	 shl	 ecx, 2

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00194	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0019a	72 12		 jb	 SHORT $LN98@Resize_rea

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0019c	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  0019f	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  001a2	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001a4	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  001a7	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001aa	77 34		 ja	 SHORT $LN95@Resize_rea

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  001ac	8b f2		 mov	 esi, edx
$LN98@Resize_rea:

; 289  :         ::operator delete(_Ptr, _Bytes);

  001ae	51		 push	 ecx
  001af	56		 push	 esi
  001b0	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001b5	83 c4 08	 add	 esp, 8
$LN87@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2061 :         _Mylast  = _Newvec + _Newsize;

  001b8	8b 55 08	 mov	 edx, DWORD PTR __Newsize$[ebp]
  001bb	8b 4d fc	 mov	 ecx, DWORD PTR $T2[ebp]
  001be	89 0f		 mov	 DWORD PTR [edi], ecx

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  001c0	5e		 pop	 esi
  001c1	8d 04 d5 00 00
	00 00		 lea	 eax, DWORD PTR [edx*8]
  001c8	2b c2		 sub	 eax, edx
  001ca	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  001cd	89 47 04	 mov	 DWORD PTR [edi+4], eax
  001d0	8b 45 f8	 mov	 eax, DWORD PTR tv746[ebp]
  001d3	03 c1		 add	 eax, ecx
  001d5	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 1571 :     }

  001d8	5f		 pop	 edi
  001d9	5b		 pop	 ebx
  001da	8b e5		 mov	 esp, ebp
  001dc	5d		 pop	 ebp
  001dd	c2 08 00	 ret	 8
$LN95@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001e0	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN144@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1539 :             _Xlength();

  001e5	e8 00 00 00 00	 call	 ?_Xlength@?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@CAXXZ ; std::vector<NSound::SSoundData,std::allocator<NSound::SSoundData> >::_Xlength
$LN145@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  001ea	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN141@Resize_rea:
  001ef	cc		 int	 3
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<NSound::SSoundData,std::allocator<NSound::SSoundData> >::_Resize_reallocate<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAPAUSSoundInstance@NSound@@PAU12@IAAV?$allocator@USSoundInstance@NSound@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Uninitialized_value_construct_n@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAPAUSSoundInstance@NSound@@PAU12@IAAV?$allocator@USSoundInstance@NSound@@@0@@Z PROC ; std::_Uninitialized_value_construct_n<std::allocator<NSound::SSoundInstance> >, COMDAT

; 2041 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2042 :     // value-initialize _Count objects to raw _First, using _Al
; 2043 :     using _Ptrty = typename _Alloc::value_type*;
; 2044 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 2045 : #if _HAS_CXX20
; 2046 :         if (!_STD is_constant_evaluated())
; 2047 : #endif // _HAS_CXX20
; 2048 :         {
; 2049 :             auto _PFirst = _Unfancy(_First);
; 2050 :             _Zero_range(_PFirst, _PFirst + _Count);
; 2051 :             return _First + _Count;
; 2052 :         }
; 2053 :     }
; 2054 : 
; 2055 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 2056 :     for (; 0 < _Count; --_Count) {

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	56		 push	 esi

; 1796 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00007	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]

; 2042 :     // value-initialize _Count objects to raw _First, using _Al
; 2043 :     using _Ptrty = typename _Alloc::value_type*;
; 2044 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 2045 : #if _HAS_CXX20
; 2046 :         if (!_STD is_constant_evaluated())
; 2047 : #endif // _HAS_CXX20
; 2048 :         {
; 2049 :             auto _PFirst = _Unfancy(_First);
; 2050 :             _Zero_range(_PFirst, _PFirst + _Count);
; 2051 :             return _First + _Count;
; 2052 :         }
; 2053 :     }
; 2054 : 
; 2055 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 2056 :     for (; 0 < _Count; --_Count) {

  0000a	85 c0		 test	 eax, eax
  0000c	74 29		 je	 SHORT $LN3@Uninitiali
  0000e	66 90		 npad	 2
$LL4@Uninitiali:

; 732  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00016	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00019	0f 11 46 04	 movups	 XMMWORD PTR [esi+4], xmm0

; 836  :         _My_data._Mysize = 0;

  0001d	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  00024	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0002b	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1808 :         ++_Last;

  0002f	83 c6 1c	 add	 esi, 28			; 0000001cH

; 2042 :     // value-initialize _Count objects to raw _First, using _Al
; 2043 :     using _Ptrty = typename _Alloc::value_type*;
; 2044 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 2045 : #if _HAS_CXX20
; 2046 :         if (!_STD is_constant_evaluated())
; 2047 : #endif // _HAS_CXX20
; 2048 :         {
; 2049 :             auto _PFirst = _Unfancy(_First);
; 2050 :             _Zero_range(_PFirst, _PFirst + _Count);
; 2051 :             return _First + _Count;
; 2052 :         }
; 2053 :     }
; 2054 : 
; 2055 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 2056 :     for (; 0 < _Count; --_Count) {

  00032	83 e8 01	 sub	 eax, 1
  00035	75 d9		 jne	 SHORT $LL4@Uninitiali
$LN3@Uninitiali:

; 1802 :         _STD _Destroy_range(_First, _Last, _Al);

  00037	ff 75 10	 push	 DWORD PTR __Al$[ebp]
  0003a	56		 push	 esi
  0003b	56		 push	 esi
  0003c	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAXPAUSSoundInstance@NSound@@QAU12@AAV?$allocator@USSoundInstance@NSound@@@0@@Z ; std::_Destroy_range<std::allocator<NSound::SSoundInstance> >
  00041	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2057 :         _Backout._Emplace_back();
; 2058 :     }
; 2059 : 
; 2060 :     return _Backout._Release();

  00044	8b c6		 mov	 eax, esi
  00046	5e		 pop	 esi

; 2061 : }

  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
??$_Uninitialized_value_construct_n@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAPAUSSoundInstance@NSound@@PAU12@IAAV?$allocator@USSoundInstance@NSound@@@0@@Z ENDP ; std::_Uninitialized_value_construct_n<std::allocator<NSound::SSoundInstance> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
_this$1$ = -16						; size = 4
__Oldsize$1$ = -12					; size = 4
tv746 = -8						; size = 4
$T2 = -4						; size = 4
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1537 :     _CONSTEXPR20 void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 1538 :         if (_Newsize > max_size()) {

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Newsize$[ebp]
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	89 7d f0	 mov	 DWORD PTR _this$1$[ebp], edi
  00010	81 fb 49 92 24
	09		 cmp	 ebx, 153391689		; 09249249H
  00016	0f 87 c9 01 00
	00		 ja	 $LN144@Resize_rea

; 1540 :         }
; 1541 : 
; 1542 :         auto& _Al         = _Getal();
; 1543 :         auto& _My_data    = _Mypair._Myval2;
; 1544 :         pointer& _Myfirst = _My_data._Myfirst;
; 1545 :         pointer& _Mylast  = _My_data._Mylast;
; 1546 : 
; 1547 :         const auto _Oldsize    = static_cast<size_type>(_Mylast - _Myfirst);

  0001c	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0001f	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00024	2b 0f		 sub	 ecx, DWORD PTR [edi]
  00026	f7 e9		 imul	 ecx
  00028	56		 push	 esi
  00029	03 d1		 add	 edx, ecx

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002b	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0002e	2b 0f		 sub	 ecx, DWORD PTR [edi]

; 1540 :         }
; 1541 : 
; 1542 :         auto& _Al         = _Getal();
; 1543 :         auto& _My_data    = _Mypair._Myval2;
; 1544 :         pointer& _Myfirst = _My_data._Myfirst;
; 1545 :         pointer& _Mylast  = _My_data._Mylast;
; 1546 : 
; 1547 :         const auto _Oldsize    = static_cast<size_type>(_Mylast - _Myfirst);

  00030	c1 fa 04	 sar	 edx, 4
  00033	8b c2		 mov	 eax, edx
  00035	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00038	03 c2		 add	 eax, edx
  0003a	89 45 f4	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0003d	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00042	f7 e9		 imul	 ecx

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00044	b8 49 92 24 09	 mov	 eax, 153391689		; 09249249H

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00049	03 d1		 add	 edx, ecx
  0004b	c1 fa 04	 sar	 edx, 4
  0004e	8b ca		 mov	 ecx, edx
  00050	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00053	03 ca		 add	 ecx, edx

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00055	8b d1		 mov	 edx, ecx
  00057	d1 ea		 shr	 edx, 1
  00059	2b c2		 sub	 eax, edx
  0005b	3b c8		 cmp	 ecx, eax
  0005d	76 19		 jbe	 SHORT $LN6@Resize_rea

; 1997 :             return _Max; // geometric growth would overflow

  0005f	be fc ff ff ff	 mov	 esi, -4			; fffffffcH
  00064	c7 45 f8 fc ff
	ff ff		 mov	 DWORD PTR tv746[ebp], -4 ; fffffffcH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0006b	56		 push	 esi
  0006c	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00071	8b d8		 mov	 ebx, eax
  00073	89 5d fc	 mov	 DWORD PTR $T2[ebp], ebx
  00076	eb 50		 jmp	 SHORT $LN142@Resize_rea
$LN6@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00078	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 2001 : 
; 2002 :         if (_Geometric < _Newsize) {

  0007b	3b c3		 cmp	 eax, ebx
  0007d	73 1c		 jae	 SHORT $LN7@Resize_rea

; 2003 :             return _Newsize; // geometric growth would be insufficient

  0007f	8b c3		 mov	 eax, ebx
$LN17@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 122  :     return _Count * _Ty_size;

  00081	8d 34 c5 00 00
	00 00		 lea	 esi, DWORD PTR [eax*8]
  00088	2b f0		 sub	 esi, eax
  0008a	c1 e6 02	 shl	 esi, 2
  0008d	89 75 f8	 mov	 DWORD PTR tv746[ebp], esi

; 227  :     if (_Bytes == 0) {

  00090	85 f6		 test	 esi, esi
  00092	75 14		 jne	 SHORT $LN21@Resize_rea

; 228  :         return nullptr;

  00094	33 db		 xor	 ebx, ebx
  00096	89 5d fc	 mov	 DWORD PTR $T2[ebp], ebx
  00099	eb 30		 jmp	 SHORT $LN20@Resize_rea
$LN7@Resize_rea:

; 117  :         if (_Count > _Max_possible) {

  0009b	3d 49 92 24 09	 cmp	 eax, 153391689		; 09249249H
  000a0	0f 87 44 01 00
	00		 ja	 $LN145@Resize_rea
  000a6	eb d9		 jmp	 SHORT $LN17@Resize_rea
$LN21@Resize_rea:

; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  000a8	81 fe 00 10 00
	00		 cmp	 esi, 4096		; 00001000H
  000ae	72 0d		 jb	 SHORT $LN22@Resize_rea

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000b0	56		 push	 esi
  000b1	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000b6	8b d8		 mov	 ebx, eax
  000b8	89 5d fc	 mov	 DWORD PTR $T2[ebp], ebx
  000bb	eb 0b		 jmp	 SHORT $LN142@Resize_rea
$LN22@Resize_rea:

; 136  :         return ::operator new(_Bytes);

  000bd	56		 push	 esi
  000be	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 256  :         return _Traits::_Allocate(_Bytes);

  000c3	8b d8		 mov	 ebx, eax
  000c5	89 45 fc	 mov	 DWORD PTR $T2[ebp], eax
$LN142@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1551 :         const pointer _Appended_first = _Newvec + _Oldsize;

  000c8	83 c4 04	 add	 esp, 4
$LN20@Resize_rea:
  000cb	8b 55 f4	 mov	 edx, DWORD PTR __Oldsize$1$[ebp]

; 1560 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

  000ce	57		 push	 edi
  000cf	8d 04 d5 00 00
	00 00		 lea	 eax, DWORD PTR [edx*8]
  000d6	2b c2		 sub	 eax, edx
  000d8	8d 0c 83	 lea	 ecx, DWORD PTR [ebx+eax*4]
  000db	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  000de	2b c2		 sub	 eax, edx
  000e0	50		 push	 eax
  000e1	51		 push	 ecx
  000e2	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAPAUSSoundInstance@NSound@@PAU12@IAAV?$allocator@USSoundInstance@NSound@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<NSound::SSoundInstance> >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1948 :     const auto _ULast = _STD _Get_unwrapped(_Last);

  000e7	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1560 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

  000ea	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ed	8b 37		 mov	 esi, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1961 :     for (; _UFirst != _ULast; ++_UFirst) {

  000ef	3b f0		 cmp	 esi, eax
  000f1	74 5d		 je	 SHORT $LN30@Resize_rea
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1551 :         const pointer _Appended_first = _Newvec + _Oldsize;

  000f3	8b 55 fc	 mov	 edx, DWORD PTR $T2[ebp]
  000f6	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  000f9	83 c2 04	 add	 edx, 4
  000fc	8b f8		 mov	 edi, eax
  000fe	66 90		 npad	 2
$LL31@Resize_rea:
  00100	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1808 :         ++_Last;

  00102	8d 52 1c	 lea	 edx, DWORD PTR [edx+28]
  00105	89 03		 mov	 DWORD PTR [ebx], eax

; 1961 :     for (; _UFirst != _ULast; ++_UFirst) {

  00107	8d 49 1c	 lea	 ecx, DWORD PTR [ecx+28]
  0010a	0f 57 c0	 xorps	 xmm0, xmm0
  0010d	83 c6 1c	 add	 esi, 28			; 0000001cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00110	0f 11 42 e4	 movups	 XMMWORD PTR [edx-28], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00114	c7 42 f4 00 00
	00 00		 mov	 DWORD PTR [edx-12], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1808 :         ++_Last;

  0011b	83 c3 1c	 add	 ebx, 28			; 0000001cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0011e	c7 42 f8 00 00
	00 00		 mov	 DWORD PTR [edx-8], 0

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00125	0f 10 41 e4	 movups	 xmm0, XMMWORD PTR [ecx-28]
  00129	0f 11 42 e4	 movups	 XMMWORD PTR [edx-28], xmm0
  0012d	f3 0f 7e 41 f4	 movq	 xmm0, QWORD PTR [ecx-12]
  00132	66 0f d6 42 f4	 movq	 QWORD PTR [edx-12], xmm0

; 1263 : 
; 1264 :                 _Right_data._Mysize = 0;

  00137	c7 41 f4 00 00
	00 00		 mov	 DWORD PTR [ecx-12], 0

; 1265 :                 _Right_data._Myres  = _Small_string_capacity;

  0013e	c7 41 f8 0f 00
	00 00		 mov	 DWORD PTR [ecx-8], 15	; 0000000fH

; 1266 :                 _Right_data._Activate_SSO_buffer();
; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  00145	c6 41 e4 00	 mov	 BYTE PTR [ecx-28], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1961 :     for (; _UFirst != _ULast; ++_UFirst) {

  00149	3b f7		 cmp	 esi, edi
  0014b	75 b3		 jne	 SHORT $LL31@Resize_rea
  0014d	8b 7d f0	 mov	 edi, DWORD PTR _this$1$[ebp]
$LN30@Resize_rea:

; 1802 :         _STD _Destroy_range(_First, _Last, _Al);

  00150	57		 push	 edi
  00151	53		 push	 ebx
  00152	53		 push	 ebx
  00153	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAXPAUSSoundInstance@NSound@@QAU12@AAV?$allocator@USSoundInstance@NSound@@@0@@Z ; std::_Destroy_range<std::allocator<NSound::SSoundInstance> >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  00158	8b 0f		 mov	 ecx, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1802 :         _STD _Destroy_range(_First, _Last, _Al);

  0015a	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  0015d	85 c9		 test	 ecx, ecx
  0015f	74 57		 je	 SHORT $LN87@Resize_rea

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);

  00161	57		 push	 edi
  00162	ff 77 04	 push	 DWORD PTR [edi+4]
  00165	51		 push	 ecx
  00166	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAXPAUSSoundInstance@NSound@@QAU12@AAV?$allocator@USSoundInstance@NSound@@@0@@Z ; std::_Destroy_range<std::allocator<NSound::SSoundInstance> >

; 2056 :             _ASAN_VECTOR_REMOVE;
; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0016b	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0016e	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00173	8b 37		 mov	 esi, DWORD PTR [edi]
  00175	83 c4 0c	 add	 esp, 12			; 0000000cH
  00178	2b ce		 sub	 ecx, esi
  0017a	f7 e9		 imul	 ecx
  0017c	03 d1		 add	 edx, ecx
  0017e	c1 fa 04	 sar	 edx, 4
  00181	8b c2		 mov	 eax, edx
  00183	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00186	03 c2		 add	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00188	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  0018f	2b c8		 sub	 ecx, eax
  00191	c1 e1 02	 shl	 ecx, 2

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00194	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0019a	72 12		 jb	 SHORT $LN98@Resize_rea

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0019c	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  0019f	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  001a2	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001a4	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  001a7	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001aa	77 34		 ja	 SHORT $LN95@Resize_rea

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  001ac	8b f2		 mov	 esi, edx
$LN98@Resize_rea:

; 289  :         ::operator delete(_Ptr, _Bytes);

  001ae	51		 push	 ecx
  001af	56		 push	 esi
  001b0	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001b5	83 c4 08	 add	 esp, 8
$LN87@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2061 :         _Mylast  = _Newvec + _Newsize;

  001b8	8b 55 08	 mov	 edx, DWORD PTR __Newsize$[ebp]
  001bb	8b 4d fc	 mov	 ecx, DWORD PTR $T2[ebp]
  001be	89 0f		 mov	 DWORD PTR [edi], ecx

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  001c0	5e		 pop	 esi
  001c1	8d 04 d5 00 00
	00 00		 lea	 eax, DWORD PTR [edx*8]
  001c8	2b c2		 sub	 eax, edx
  001ca	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  001cd	89 47 04	 mov	 DWORD PTR [edi+4], eax
  001d0	8b 45 f8	 mov	 eax, DWORD PTR tv746[ebp]
  001d3	03 c1		 add	 eax, ecx
  001d5	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 1571 :     }

  001d8	5f		 pop	 edi
  001d9	5b		 pop	 ebx
  001da	8b e5		 mov	 esp, ebp
  001dc	5d		 pop	 ebp
  001dd	c2 08 00	 ret	 8
$LN95@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001e0	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN144@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1539 :             _Xlength();

  001e5	e8 00 00 00 00	 call	 ?_Xlength@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@CAXXZ ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::_Xlength
$LN145@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  001ea	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN141@Resize_rea:
  001ef	cc		 int	 3
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::_Resize_reallocate<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@USSoundData@NSound@@@std@@@std@@YAXPAUSSoundData@NSound@@QAU12@AAV?$allocator@USSoundData@NSound@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@USSoundData@NSound@@@std@@@std@@YAXPAUSSoundData@NSound@@QAU12@AAV?$allocator@USSoundData@NSound@@@0@@Z PROC ; std::_Destroy_range<std::allocator<NSound::SSoundData> >, COMDAT

; 1094 : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1098 :         for (; _First != _Last; ++_First) {

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000b	3b f3		 cmp	 esi, ebx
  0000d	74 4f		 je	 SHORT $LN61@Destroy_ra
  0000f	83 c6 18	 add	 esi, 24			; 00000018H
  00012	57		 push	 edi
$LL4@Destroy_ra:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00013	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00015	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00018	76 28		 jbe	 SHORT $LN64@Destroy_ra
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0001a	8b 46 ec	 mov	 eax, DWORD PTR [esi-20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0001d	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0001e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00024	72 12		 jb	 SHORT $LN49@Destroy_ra

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00026	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00029	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0002c	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0002e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00031	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00034	77 2c		 ja	 SHORT $LN46@Destroy_ra

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00036	8b c2		 mov	 eax, edx
$LN49@Destroy_ra:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00038	51		 push	 ecx
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003f	83 c4 08	 add	 esp, 8
$LN64@Destroy_ra:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00042	c7 46 fc 00 00
	00 00		 mov	 DWORD PTR [esi-4], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00049	c7 06 0f 00 00
	00		 mov	 DWORD PTR [esi], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0004f	c6 46 ec 00	 mov	 BYTE PTR [esi-20], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1098 :         for (; _First != _Last; ++_First) {

  00053	83 c6 1c	 add	 esi, 28			; 0000001cH
  00056	8d 46 e8	 lea	 eax, DWORD PTR [esi-24]
  00059	3b c3		 cmp	 eax, ebx
  0005b	75 b6		 jne	 SHORT $LL4@Destroy_ra
  0005d	5f		 pop	 edi
$LN61@Destroy_ra:
  0005e	5e		 pop	 esi

; 1099 :             allocator_traits<_Alloc>::destroy(_Al, _STD _Unfancy(_First));
; 1100 :         }
; 1101 :     }
; 1102 : }

  0005f	5b		 pop	 ebx
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
$LN46@Destroy_ra:

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00062	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN70@Destroy_ra:
  00067	cc		 int	 3
??$_Destroy_range@V?$allocator@USSoundData@NSound@@@std@@@std@@YAXPAUSSoundData@NSound@@QAU12@AAV?$allocator@USSoundData@NSound@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<NSound::SSoundData> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAXPAUSSoundInstance@NSound@@QAU12@AAV?$allocator@USSoundInstance@NSound@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAXPAUSSoundInstance@NSound@@QAU12@AAV?$allocator@USSoundInstance@NSound@@@0@@Z PROC ; std::_Destroy_range<std::allocator<NSound::SSoundInstance> >, COMDAT

; 1094 : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1098 :         for (; _First != _Last; ++_First) {

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000b	3b f3		 cmp	 esi, ebx
  0000d	74 4f		 je	 SHORT $LN61@Destroy_ra
  0000f	83 c6 18	 add	 esi, 24			; 00000018H
  00012	57		 push	 edi
$LL4@Destroy_ra:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00013	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00015	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00018	76 28		 jbe	 SHORT $LN64@Destroy_ra
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0001a	8b 46 ec	 mov	 eax, DWORD PTR [esi-20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0001d	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0001e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00024	72 12		 jb	 SHORT $LN49@Destroy_ra

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00026	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00029	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0002c	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0002e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00031	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00034	77 2c		 ja	 SHORT $LN46@Destroy_ra

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00036	8b c2		 mov	 eax, edx
$LN49@Destroy_ra:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00038	51		 push	 ecx
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003f	83 c4 08	 add	 esp, 8
$LN64@Destroy_ra:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00042	c7 46 fc 00 00
	00 00		 mov	 DWORD PTR [esi-4], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00049	c7 06 0f 00 00
	00		 mov	 DWORD PTR [esi], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0004f	c6 46 ec 00	 mov	 BYTE PTR [esi-20], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1098 :         for (; _First != _Last; ++_First) {

  00053	83 c6 1c	 add	 esi, 28			; 0000001cH
  00056	8d 46 e8	 lea	 eax, DWORD PTR [esi-24]
  00059	3b c3		 cmp	 eax, ebx
  0005b	75 b6		 jne	 SHORT $LL4@Destroy_ra
  0005d	5f		 pop	 edi
$LN61@Destroy_ra:
  0005e	5e		 pop	 esi

; 1099 :             allocator_traits<_Alloc>::destroy(_Al, _STD _Unfancy(_First));
; 1100 :         }
; 1101 :     }
; 1102 : }

  0005f	5b		 pop	 ebx
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
$LN46@Destroy_ra:

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00062	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN70@Destroy_ra:
  00067	cc		 int	 3
??$_Destroy_range@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAXPAUSSoundInstance@NSound@@QAU12@AAV?$allocator@USSoundInstance@NSound@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<NSound::SSoundInstance> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xrange@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xrange@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@CAXXZ PROC ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::_Xrange, COMDAT

; 2173 :         _Xout_of_range("invalid vector subscript");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN3@Xrange:
  0000a	cc		 int	 3
?_Xrange@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@CAXXZ ENDP ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::_Xrange
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xlength@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@CAXXZ PROC ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::_Xlength, COMDAT

; 2169 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@CAXXZ ENDP ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xlength@?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@CAXXZ PROC ; std::vector<NSound::SSoundData,std::allocator<NSound::SSoundData> >::_Xlength, COMDAT

; 2169 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@CAXXZ ENDP ; std::vector<NSound::SSoundData,std::allocator<NSound::SSoundData> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z
_TEXT	SEGMENT
__New_size$1$ = -8					; size = 4
__Left_size$1$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 3148 :     const basic_string<_Elem, _Traits, _Alloc>& _Left, _In_z_ const _Elem* const _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 3149 :     using _Size_type       = typename basic_string<_Elem, _Traits, _Alloc>::size_type;
; 3150 :     const auto _Left_size  = _Left.size();

  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Left$[ebp]
  00009	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0000a	8b 75 10	 mov	 esi, DWORD PTR __Right$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3148 :     const basic_string<_Elem, _Traits, _Alloc>& _Left, _In_z_ const _Elem* const _Right) {

  0000d	57		 push	 edi

; 3149 :     using _Size_type       = typename basic_string<_Elem, _Traits, _Alloc>::size_type;
; 3150 :     const auto _Left_size  = _Left.size();

  0000e	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00011	89 55 fc	 mov	 DWORD PTR __Left_size$1$[ebp], edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00014	8d 7e 01	 lea	 edi, DWORD PTR [esi+1]
$LL62@operator:
  00017	8a 06		 mov	 al, BYTE PTR [esi]
  00019	46		 inc	 esi
  0001a	84 c0		 test	 al, al
  0001c	75 f9		 jne	 SHORT $LL62@operator
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3152 :     if (_Left.max_size() - _Left_size < _Right_size) {

  0001e	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00023	2b f7		 sub	 esi, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3152 :     if (_Left.max_size() - _Left_size < _Right_size) {

  00025	2b c2		 sub	 eax, edx
  00027	3b c6		 cmp	 eax, esi
  00029	0f 82 c6 00 00
	00		 jb	 $LN72@operator

; 434  :         return _Myres > _Small_string_capacity;

  0002f	83 79 14 0f	 cmp	 DWORD PTR [ecx+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  00033	76 05		 jbe	 SHORT $LN13@operator

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00035	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00037	89 4d 0c	 mov	 DWORD PTR __Left$[ebp], ecx
$LN13@operator:

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0003a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1039 :         if (_New_capacity < _New_size) {

  0003d	8d 0c 16	 lea	 ecx, DWORD PTR [esi+edx]
  00040	53		 push	 ebx

; 802  : 
; 803  :         pointer _Fancy_ptr = nullptr;
; 804  :         if constexpr (_Policy == _Allocation_policy::_At_least) {
; 805  :             _Fancy_ptr = _Allocate_at_least_helper(_Al, _Capacity);
; 806  :         } else {
; 807  :             _STL_INTERNAL_STATIC_ASSERT(_Policy == _Allocation_policy::_Exactly);
; 808  :             _Fancy_ptr = _Al.allocate(_Capacity);
; 809  :         }
; 810  : 
; 811  : #if _HAS_CXX20
; 812  :         // Start element lifetimes to avoid UB. This is a more general mechanism than _String_val::_Activate_SSO_buffer,
; 813  :         // but likely more impactful to throughput.
; 814  :         if (_STD is_constant_evaluated()) {
; 815  :             _Elem* const _Ptr = _Unfancy(_Fancy_ptr);
; 816  :             for (size_type _Idx = 0; _Idx < _Capacity; ++_Idx) {
; 817  :                 _STD construct_at(_Ptr + _Idx);
; 818  :             }
; 819  :         }
; 820  : #endif // _HAS_CXX20
; 821  :         --_Capacity;
; 822  :         return _Fancy_ptr;
; 823  :     }
; 824  : 
; 825  :     static _CONSTEXPR20 void _Deallocate_for_capacity(
; 826  :         _Alty& _Al, const pointer _Old_ptr, const size_type _Capacity) noexcept {
; 827  :         _STL_INTERNAL_CHECK(_Capacity > _Small_string_capacity);
; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator
; 829  :     }
; 830  : 
; 831  :     _CONSTEXPR20 void _Construct_empty() {
; 832  :         auto& _My_data = _Mypair._Myval2;
; 833  :         _My_data._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));
; 834  : 
; 835  :         // initialize basic_string data members
; 836  :         _My_data._Mysize = 0;
; 837  :         _My_data._Myres  = _Small_string_capacity;
; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());
; 842  :     }
; 843  : 
; 844  :     enum class _Construct_strategy : uint8_t { _From_char, _From_ptr, _From_string };
; 845  : 
; 846  :     template <_Construct_strategy _Strat, class _Char_or_ptr>
; 847  :     _CONSTEXPR20 void _Construct(const _Char_or_ptr _Arg, _CRT_GUARDOVERFLOW const size_type _Count) {
; 848  :         auto& _My_data = _Mypair._Myval2;
; 849  :         _STL_INTERNAL_CHECK(!_My_data._Large_mode_engaged());
; 850  : 
; 851  :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 852  :             _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Char_or_ptr, _Elem>);
; 853  :         } else {
; 854  :             _STL_INTERNAL_STATIC_ASSERT(_Is_elem_cptr<_Char_or_ptr>::value);
; 855  :         }
; 856  : 
; 857  :         if (_Count > max_size()) {
; 858  :             _Xlen_string(); // result too long
; 859  :         }
; 860  : 
; 861  :         auto& _Al       = _Getal();
; 862  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 863  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 864  : 
; 865  :         if (_Count <= _Small_string_capacity) {
; 866  :             _My_data._Mysize = _Count;
; 867  :             _My_data._Myres  = _Small_string_capacity;
; 868  : 
; 869  :             if constexpr (_Strat == _Construct_strategy::_From_char) {
; 870  :                 _Traits::assign(_My_data._Bx._Buf, _Count, _Arg);
; 871  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());
; 872  :             } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 873  :                 _Traits::copy(_My_data._Bx._Buf, _Arg, _Count);
; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());
; 875  :             } else { // _Strat == _Construct_strategy::_From_string
; 876  : #ifdef _INSERT_STRING_ANNOTATION
; 877  :                 _Traits::copy(_My_data._Bx._Buf, _Arg, _Count + 1);
; 878  : #else // ^^^ _INSERT_STRING_ANNOTATION / !_INSERT_STRING_ANNOTATION vvv
; 879  :                 _Traits::copy(_My_data._Bx._Buf, _Arg, _BUF_SIZE);
; 880  : #endif // ^^^ !_INSERT_STRING_ANNOTATION ^^^
; 881  :             }
; 882  : 
; 883  :             _Proxy._Release();
; 884  :             return;
; 885  :         }
; 886  : 
; 887  :         size_type _New_capacity = _Calculate_growth(_Count, _Small_string_capacity, max_size());
; 888  :         const pointer _New_ptr  = _Allocate_for_capacity(_Al, _New_capacity); // throws
; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);
; 890  : 
; 891  :         _My_data._Mysize = _Count;
; 892  :         _My_data._Myres  = _New_capacity;
; 893  :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 894  :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 895  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 896  :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 897  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);
; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 899  :         } else { // _Strat == _Construct_strategy::_From_string
; 900  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);
; 901  :         }
; 902  : 
; 903  :         _ASAN_STRING_CREATE(*this);
; 904  :         _Proxy._Release();
; 905  :     }
; 906  : 
; 907  :     template <class _Iter, class _Sent, class _Size = nullptr_t>
; 908  :     _CONSTEXPR20 void _Construct_from_iter(_Iter _First, const _Sent _Last, _Size _Count = {}) {
; 909  :         // Pre: _Iter models input_iterator or meets the Cpp17InputIterator requirements.
; 910  :         // Pre: [_First, _Last) is a valid range.
; 911  :         // Pre: if _Iter models forward_iterator or meets the Cpp17ForwardIterator requirements,
; 912  :         //      then is_same_v<_Size, size_type> holds.
; 913  :         // Pre: if is_same_v<_Size, size_type>, _Count is the length of [_First, _Last).
; 914  :         // Pre: *this is in small mode; the lifetime of the SSO elements has already begun.
; 915  : 
; 916  :         auto& _My_data  = _Mypair._Myval2;
; 917  :         auto& _Al       = _Getal();
; 918  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 919  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 920  : 
; 921  :         _My_data._Mysize = 0;
; 922  :         _My_data._Myres  = _Small_string_capacity;
; 923  : 
; 924  :         if constexpr (is_same_v<_Size, size_type>) {
; 925  :             if (_Count > max_size()) {
; 926  :                 _Xlen_string(); // result too long
; 927  :             }
; 928  : 
; 929  :             if (_Count > _Small_string_capacity) {
; 930  :                 size_type _New_capacity = _Calculate_growth(_Count);
; 931  :                 const pointer _New_ptr  = _Allocate_for_capacity(_Al, _New_capacity); // throws
; 932  :                 _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);
; 933  :                 _My_data._Myres = _New_capacity;
; 934  :             }
; 935  :         }
; 936  : 
; 937  :         _Tidy_deallocate_guard<basic_string> _Guard{this};
; 938  : 
; 939  :         constexpr bool _Can_construct_by_copy =
; 940  :             _Is_specialization_v<_Traits, char_traits> && _Is_EcharT<_Elem> && is_same_v<_Size, size_type>;
; 941  : 
; 942  :         if constexpr (_Can_construct_by_copy) {
; 943  :             const auto _Data = _My_data._Myptr();
; 944  :             _STD _Copy_n_unchecked4(_STD move(_First), _Count, _Data);
; 945  :             _My_data._Mysize = _Count;
; 946  :             _Data[_Count]    = _Elem();
; 947  :         } else {
; 948  :             for (; _First != _Last; ++_First) {
; 949  :                 if constexpr (!is_same_v<_Size, size_type>) {
; 950  :                     if (_My_data._Mysize == _My_data._Myres) { // Need to grow
; 951  :                         if (_My_data._Mysize == max_size()) {
; 952  :                             _Xlen_string(); // result too long
; 953  :                         }
; 954  : 
; 955  :                         _Elem* const _Old_ptr   = _My_data._Myptr();
; 956  :                         size_type _New_capacity = _Calculate_growth(_My_data._Mysize + 1);
; 957  :                         const pointer _New_ptr  = _Allocate_for_capacity(_Al, _New_capacity); // throws
; 958  : 
; 959  :                         _Traits::copy(_Unfancy(_New_ptr), _Old_ptr, _My_data._Mysize);
; 960  :                         if (_My_data._Large_mode_engaged()) { // Need to deallocate old storage
; 961  :                             _Deallocate_for_capacity(_Al, _My_data._Bx._Ptr, _My_data._Myres);
; 962  :                             _My_data._Bx._Ptr = _New_ptr;
; 963  :                         } else {
; 964  :                             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);
; 965  :                         }
; 966  :                         _My_data._Myres = _New_capacity;
; 967  :                     }
; 968  :                 }
; 969  : 
; 970  :                 _Elem* const _Ptr = _My_data._Myptr();
; 971  :                 _Traits::assign(_Ptr[_My_data._Mysize], *_First);
; 972  :                 ++_My_data._Mysize;
; 973  :             }
; 974  : 
; 975  :             _Elem* const _Ptr = _My_data._Myptr();
; 976  :             _Traits::assign(_Ptr[_My_data._Mysize], _Elem());
; 977  :         }
; 978  : 
; 979  :         _ASAN_STRING_CREATE(*this);
; 980  :         _Guard._Target = nullptr;
; 981  :         _Proxy._Release();
; 982  :     }
; 983  : 
; 984  : public:
; 985  : #if _HAS_CXX23
; 986  :     template <_Container_compatible_range<_Elem> _Rng>
; 987  :     constexpr basic_string(from_range_t, _Rng&& _Range, const _Alloc& _Al = _Alloc())
; 988  :         : _Mypair(_One_then_variadic_args_t{}, _Al) {
; 989  :         if constexpr (_RANGES sized_range<_Rng> || _RANGES forward_range<_Rng>) {
; 990  :             const auto _Length = _To_unsigned_like(_RANGES distance(_Range));
; 991  :             const auto _Count  = _Convert_size<size_type>(_Length);
; 992  :             if constexpr (_Contiguous_range_of<_Rng, _Elem>) {
; 993  :                 _Construct<_Construct_strategy::_From_ptr>(_RANGES data(_Range), _Count);
; 994  :             } else {
; 995  :                 _Construct_from_iter(_RANGES _Ubegin(_Range), _RANGES _Uend(_Range), _Count);
; 996  :             }
; 997  :         } else {
; 998  :             _Construct_from_iter(_RANGES _Ubegin(_Range), _RANGES _Uend(_Range));
; 999  :         }
; 1000 :     }
; 1001 : #endif // _HAS_CXX23
; 1002 : 
; 1003 :     _CONSTEXPR20 basic_string(basic_string&& _Right) noexcept
; 1004 :         : _Mypair(_One_then_variadic_args_t{}, _STD move(_Right._Getal())) {
; 1005 :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));
; 1006 :         _Take_contents(_Right);
; 1007 :     }
; 1008 : 
; 1009 :     _CONSTEXPR20 basic_string(basic_string&& _Right, const _Alloc& _Al)
; 1010 :         noexcept(_Alty_traits::is_always_equal::value) // strengthened
; 1011 :         : _Mypair(_One_then_variadic_args_t{}, _Al) {
; 1012 :         if constexpr (!_Alty_traits::is_always_equal::value) {
; 1013 :             if (_Getal() != _Right._Getal()) {
; 1014 :                 _Construct<_Construct_strategy::_From_string>(
; 1015 :                     _Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);
; 1016 :                 return;
; 1017 :             }
; 1018 :         }
; 1019 : 
; 1020 :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));
; 1021 :         _Take_contents(_Right);
; 1022 :     }
; 1023 : 
; 1024 :     _CONSTEXPR20 basic_string(_String_constructor_concat_tag, const basic_string& _Source_of_al,
; 1025 :         const _Elem* const _Left_ptr, const size_type _Left_size, const _Elem* const _Right_ptr,
; 1026 :         const size_type _Right_size)
; 1027 :         : _Mypair(_One_then_variadic_args_t{},
; 1028 :               _Alty_traits::select_on_container_copy_construction(_Source_of_al._Getal())) {
; 1029 :         _STL_INTERNAL_CHECK(_Left_size <= max_size());
; 1030 :         _STL_INTERNAL_CHECK(_Right_size <= max_size());
; 1031 :         _STL_INTERNAL_CHECK(_Right_size <= max_size() - _Left_size);
; 1032 :         const auto _New_size    = static_cast<size_type>(_Left_size + _Right_size);

  00041	8d 1c 16	 lea	 ebx, DWORD PTR [esi+edx]
  00044	0f 57 c0	 xorps	 xmm0, xmm0

; 1033 :         size_type _New_capacity = _Small_string_capacity;

  00047	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH
  0004c	89 5d f8	 mov	 DWORD PTR __New_size$1$[ebp], ebx

; 1034 :         auto& _My_data          = _Mypair._Myval2;
; 1035 :         _Elem* _Ptr             = _My_data._Bx._Buf;

  0004f	8b d8		 mov	 ebx, eax

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00051	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00054	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0005b	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 1039 :         if (_New_capacity < _New_size) {

  00062	3b cf		 cmp	 ecx, edi
  00064	76 58		 jbe	 SHORT $LN20@operator

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00066	8b 7d f8	 mov	 edi, DWORD PTR __New_size$1$[ebp]
  00069	83 cf 0f	 or	 edi, 15			; 0000000fH
  0006c	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00072	76 12		 jbe	 SHORT $LN36@operator

; 2944 :             return _Max;

  00074	ba 00 00 00 80	 mov	 edx, -2147483648	; 80000000H
  00079	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007e	52		 push	 edx
  0007f	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00084	eb 2b		 jmp	 SHORT $LN70@operator
$LN36@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00086	ba 16 00 00 00	 mov	 edx, 22			; 00000016H
  0008b	3b fa		 cmp	 edi, edx
  0008d	0f 42 fa	 cmovb	 edi, edx

; 801  :         ++_Capacity; // Take null terminator into consideration

  00090	8d 57 01	 lea	 edx, DWORD PTR [edi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  00093	85 d2		 test	 edx, edx
  00095	75 04		 jne	 SHORT $LN50@operator

; 228  :         return nullptr;

  00097	33 db		 xor	 ebx, ebx
  00099	eb 1e		 jmp	 SHORT $LN49@operator
$LN50@operator:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  0009b	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  000a1	72 08		 jb	 SHORT $LN51@operator

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a3	52		 push	 edx
  000a4	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a9	eb 06		 jmp	 SHORT $LN70@operator
$LN51@operator:

; 136  :         return ::operator new(_Bytes);

  000ab	52		 push	 edx
  000ac	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN70@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1043 :             _Construct_in_place(_My_data._Bx._Ptr, _Fancyptr);

  000b1	8b d8		 mov	 ebx, eax
  000b3	83 c4 04	 add	 esp, 4
  000b6	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN49@operator:
  000b9	8b 55 fc	 mov	 edx, DWORD PTR __Left_size$1$[ebp]
  000bc	89 18		 mov	 DWORD PTR [eax], ebx
$LN20@operator:

; 1046 :         _My_data._Mysize = _New_size;

  000be	8d 0c 16	 lea	 ecx, DWORD PTR [esi+edx]

; 1047 :         _My_data._Myres  = _New_capacity;

  000c1	89 78 14	 mov	 DWORD PTR [eax+20], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c4	52		 push	 edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1046 :         _My_data._Mysize = _New_size;

  000c5	89 48 10	 mov	 DWORD PTR [eax+16], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c8	8b 4d 0c	 mov	 ecx, DWORD PTR __Left$[ebp]
  000cb	51		 push	 ecx
  000cc	53		 push	 ebx
  000cd	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1049 :         _Traits::copy(_Ptr + static_cast<ptrdiff_t>(_Left_size), _Right_ptr, _Right_size);

  000d2	8b 4d fc	 mov	 ecx, DWORD PTR __Left_size$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d5	56		 push	 esi
  000d6	ff 75 10	 push	 DWORD PTR __Right$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1049 :         _Traits::copy(_Ptr + static_cast<ptrdiff_t>(_Left_size), _Right_ptr, _Right_size);

  000d9	03 cb		 add	 ecx, ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000db	51		 push	 ecx
  000dc	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1050 :         _Traits::assign(_Ptr[_New_size], _Elem());

  000e1	8b 45 f8	 mov	 eax, DWORD PTR __New_size$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000e4	83 c4 18	 add	 esp, 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1050 :         _Traits::assign(_Ptr[_New_size], _Elem());

  000e7	c6 04 03 00	 mov	 BYTE PTR [ebx+eax], 0

; 3154 :     }
; 3155 : 
; 3156 :     return {_String_constructor_concat_tag{}, _Left, _Left.c_str(), _Left_size, _Right, _Right_size};

  000eb	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000ee	5b		 pop	 ebx

; 3157 : }

  000ef	5f		 pop	 edi
  000f0	5e		 pop	 esi
  000f1	8b e5		 mov	 esp, ebp
  000f3	5d		 pop	 ebp
  000f4	c3		 ret	 0
$LN72@operator:

; 3153 :         _Xlen_string();

  000f5	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN69@operator:
  000fa	cc		 int	 3
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??__FstrResult@NSound@@YAXXZ
text$yd	SEGMENT
??__FstrResult@NSound@@YAXXZ PROC			; NSound::`dynamic atexit destructor for 'strResult'', COMDAT
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00000	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?strResult@NSound@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20
  00006	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00009	76 2a		 jbe	 SHORT $LN23@dynamic
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?strResult@NSound@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00010	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00011	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN34@dynamic

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00019	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001c	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 28		 ja	 SHORT $LN31@dynamic

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00029	8b c2		 mov	 eax, edx
$LN34@dynamic:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0002b	51		 push	 ecx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00032	83 c4 08	 add	 esp, 8
$LN23@dynamic:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00035	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?strResult@NSound@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+16, 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  0003f	c7 05 14 00 00
	00 0f 00 00 00	 mov	 DWORD PTR ?strResult@NSound@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 15 ; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00049	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?strResult@NSound@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A, 0
  00050	c3		 ret	 0
$LN31@dynamic:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00051	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??__FstrResult@NSound@@YAXXZ ENDP			; NSound::`dynamic atexit destructor for 'strResult''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
;	COMDAT ??__EstrResult@NSound@@YAXXZ
text$di	SEGMENT
??__EstrResult@NSound@@YAXXZ PROC			; NSound::`dynamic initializer for 'strResult'', COMDAT

; 5    : std::string NSound::strResult;

  00000	68 00 00 00 00	 push	 OFFSET ??__FstrResult@NSound@@YAXXZ ; NSound::`dynamic atexit destructor for 'strResult''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__EstrResult@NSound@@YAXXZ ENDP			; NSound::`dynamic initializer for 'strResult''
text$di	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange, COMDAT

; 2173 :         _Xout_of_range("invalid vector subscript");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN3@Xrange:
  0000a	cc		 int	 3
?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
;	COMDAT ?SetResultString@NSound@@YAXPBD@Z
_TEXT	SEGMENT
_c_pszStr$ = 8						; size = 4
?SetResultString@NSound@@YAXPBD@Z PROC			; NSound::SetResultString, COMDAT

; 13   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00003	8b 55 08	 mov	 edx, DWORD PTR _c_pszStr$[ebp]
  00006	8b c2		 mov	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 13   : {

  00008	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00009	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  0000c	0f 1f 40 00	 npad	 4
$LL8@SetResultS:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL8@SetResultS
  00017	2b c6		 sub	 eax, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1614 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00019	b9 00 00 00 00	 mov	 ecx, OFFSET ?strResult@NSound@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; NSound::strResult
  0001e	50		 push	 eax
  0001f	52		 push	 edx
  00020	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00025	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 15   : }

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?SetResultString@NSound@@YAXPBD@Z ENDP			; NSound::SetResultString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
;	COMDAT ?GetResultString@NSound@@YAPBDXZ
_TEXT	SEGMENT
?GetResultString@NSound@@YAPBDXZ PROC			; NSound::GetResultString, COMDAT
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00000	83 3d 14 00 00
	00 0f		 cmp	 DWORD PTR ?strResult@NSound@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 15 ; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  00007	b8 00 00 00 00	 mov	 eax, OFFSET ?strResult@NSound@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; NSound::strResult

; 426  :         if (_Large_mode_engaged()) {

  0000c	0f 47 05 00 00
	00 00		 cmova	 eax, DWORD PTR ?strResult@NSound@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 10   : }

  00013	c3		 ret	 0
?GetResultString@NSound@@YAPBDXZ ENDP			; NSound::GetResultString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
;	COMDAT ?DataToInstance@NSound@@YAXABV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@PAV?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@3@@Z
_TEXT	SEGMENT
__Oldsize$1$ = -16					; size = 4
tv508 = -16						; size = 4
_i$1$ = -12						; size = 4
$T1 = -12						; size = 4
$T2 = -8						; size = 4
$T3 = -1						; size = 1
_c_rSoundDataVector$ = 8				; size = 4
_pSoundInstanceVector$ = 12				; size = 4
?DataToInstance@NSound@@YAXABV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@PAV?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@3@@Z PROC ; NSound::DataToInstance, COMDAT

; 119  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _c_rSoundDataVector$[ebp]
  0000a	8b 03		 mov	 eax, DWORD PTR [ebx]
  0000c	3b 43 04	 cmp	 eax, DWORD PTR [ebx+4]
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 120  : 	if (c_rSoundDataVector.empty())

  0000f	0f 84 6b 01 00
	00		 je	 $LN3@DataToInst
  00015	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1795 :         pointer& _Mylast  = _My_data._Mylast;

  00016	8b 7d 0c	 mov	 edi, DWORD PTR _pSoundInstanceVector$[ebp]

; 1796 : 
; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00019	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0001b	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0001e	89 4d f8	 mov	 DWORD PTR $T2[ebp], ecx
  00021	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
  00024	3b c8		 cmp	 ecx, eax
  00026	74 16		 je	 SHORT $LN10@DataToInst

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());

  00028	57		 push	 edi
  00029	50		 push	 eax
  0002a	51		 push	 ecx
  0002b	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAXPAUSSoundInstance@NSound@@QAU12@AAV?$allocator@USSoundInstance@NSound@@@0@@Z ; std::_Destroy_range<std::allocator<NSound::SSoundInstance> >

; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00030	8b 07		 mov	 eax, DWORD PTR [edi]
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
  00035	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
  00038	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0003b	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
$LN10@DataToInst:

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0003e	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00041	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00046	2b 0b		 sub	 ecx, DWORD PTR [ebx]
  00048	f7 e9		 imul	 ecx
  0004a	56		 push	 esi
  0004b	03 d1		 add	 edx, ecx

; 1580 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  0004d	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00052	8b 4d f4	 mov	 ecx, DWORD PTR $T1[ebp]
  00055	2b 4d f8	 sub	 ecx, DWORD PTR $T2[ebp]

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00058	c1 fa 04	 sar	 edx, 4
  0005b	8b f2		 mov	 esi, edx
  0005d	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  00060	03 f2		 add	 esi, edx

; 1580 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  00062	f7 e9		 imul	 ecx
  00064	03 d1		 add	 edx, ecx
  00066	c1 fa 04	 sar	 edx, 4
  00069	8b c2		 mov	 eax, edx
  0006b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0006e	03 c2		 add	 eax, edx
  00070	89 45 f0	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 1581 :         if (_Newsize < _Oldsize) { // trim

  00073	3b f0		 cmp	 esi, eax
  00075	73 1e		 jae	 SHORT $LN20@DataToInst

; 1582 :             const pointer _Newlast = _Myfirst + _Newsize;

  00077	8b 4d f8	 mov	 ecx, DWORD PTR $T2[ebp]
  0007a	8d 04 f5 00 00
	00 00		 lea	 eax, DWORD PTR [esi*8]
  00081	2b c6		 sub	 eax, esi

; 1583 :             _Orphan_range(_Newlast, _Mylast);
; 1584 :             _Destroy_range(_Newlast, _Mylast, _Al);

  00083	57		 push	 edi
  00084	ff 75 f4	 push	 DWORD PTR $T1[ebp]
  00087	8d 34 81	 lea	 esi, DWORD PTR [ecx+eax*4]
  0008a	56		 push	 esi
  0008b	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAXPAUSSoundInstance@NSound@@QAU12@AAV?$allocator@USSoundInstance@NSound@@@0@@Z ; std::_Destroy_range<std::allocator<NSound::SSoundInstance> >

; 1585 :             _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1586 :             _Mylast = _Newlast;

  00090	89 77 04	 mov	 DWORD PTR [edi+4], esi

; 1587 :             return;

  00093	eb 3d		 jmp	 SHORT $LN61@DataToInst
$LN20@DataToInst:

; 1588 :         }
; 1589 : 
; 1590 :         if (_Newsize > _Oldsize) { // append

  00095	76 3e		 jbe	 SHORT $LN21@DataToInst

; 1591 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

  00097	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0009a	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0009f	2b 4d f8	 sub	 ecx, DWORD PTR $T2[ebp]
  000a2	f7 e9		 imul	 ecx
  000a4	03 d1		 add	 edx, ecx
  000a6	c1 fa 04	 sar	 edx, 4
  000a9	8b c2		 mov	 eax, edx
  000ab	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000ae	03 c2		 add	 eax, edx

; 1592 :             if (_Newsize > _Oldcapacity) { // reallocate

  000b0	3b f0		 cmp	 esi, eax
  000b2	76 0e		 jbe	 SHORT $LN22@DataToInst

; 1593 :                 _Resize_reallocate(_Newsize, _Val);

  000b4	8d 45 ff	 lea	 eax, DWORD PTR $T3[ebp]
  000b7	8b cf		 mov	 ecx, edi
  000b9	50		 push	 eax
  000ba	56		 push	 esi
  000bb	e8 00 00 00 00	 call	 ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::_Resize_reallocate<std::_Value_init_tag>

; 1594 :                 return;

  000c0	eb 13		 jmp	 SHORT $LN21@DataToInst
$LN22@DataToInst:

; 1595 :             }
; 1596 : 
; 1597 :             _ASAN_VECTOR_EXTEND_GUARD(_Newsize);
; 1598 :             const pointer _Oldlast = _Mylast;
; 1599 :             if constexpr (is_same_v<_Ty2, _Ty>) {
; 1600 :                 _Mylast = _Uninitialized_fill_n(_Oldlast, _Newsize - _Oldsize, _Val, _Al);
; 1601 :             } else {
; 1602 :                 _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Ty2, _Value_init_tag>);
; 1603 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  000c2	2b 75 f0	 sub	 esi, DWORD PTR __Oldsize$1$[ebp]
  000c5	57		 push	 edi
  000c6	56		 push	 esi
  000c7	ff 75 f4	 push	 DWORD PTR $T1[ebp]
  000ca	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAPAUSSoundInstance@NSound@@PAU12@IAAV?$allocator@USSoundInstance@NSound@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<NSound::SSoundInstance> >
  000cf	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN61@DataToInst:
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 128  : 	for (DWORD i = 0; i < c_rSoundDataVector.size(); ++i)

  000d2	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN21@DataToInst:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000d5	8b 4d 08	 mov	 ecx, DWORD PTR _c_rSoundDataVector$[ebp]
  000d8	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  000dd	8b 1b		 mov	 ebx, DWORD PTR [ebx]
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 128  : 	for (DWORD i = 0; i < c_rSoundDataVector.size(); ++i)

  000df	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$1$[ebp], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000e6	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000e9	2b cb		 sub	 ecx, ebx
  000eb	f7 e9		 imul	 ecx
  000ed	03 d1		 add	 edx, ecx
  000ef	c1 fa 04	 sar	 edx, 4
  000f2	8b c2		 mov	 eax, edx
  000f4	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000f7	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 128  : 	for (DWORD i = 0; i < c_rSoundDataVector.size(); ++i)

  000f9	0f 84 7f 00 00
	00		 je	 $LN59@DataToInst
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1899 :         auto& _My_data = _Mypair._Myval2;

  000ff	33 f6		 xor	 esi, esi
$LL4@DataToInst:

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00101	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00104	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00109	2b 0f		 sub	 ecx, DWORD PTR [edi]
  0010b	f7 e9		 imul	 ecx
  0010d	03 d1		 add	 edx, ecx
  0010f	c1 fa 04	 sar	 edx, 4
  00112	8b c2		 mov	 eax, edx
  00114	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00117	03 c2		 add	 eax, edx
  00119	3b 45 f4	 cmp	 eax, DWORD PTR _i$1$[ebp]
  0011c	76 67		 jbe	 SHORT $LN45@DataToInst
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 133  : 		rSoundInstance.dwFrame = (DWORD) (c_rSoundData.fTime / c_fFrameTime);

  0011e	f3 0f 10 04 1e	 movss	 xmm0, DWORD PTR [esi+ebx]
  00123	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@3c888889
  0012b	e8 00 00 00 00	 call	 __ftol3
  00130	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00132	89 04 0e	 mov	 DWORD PTR [esi+ecx], eax

; 134  : 		rSoundInstance.strSoundFileName = c_rSoundData.strSoundFileName;

  00135	83 c1 04	 add	 ecx, 4
  00138	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  0013b	03 ce		 add	 ecx, esi
  0013d	03 c6		 add	 eax, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1371 :         if (this == _STD addressof(_Right)) {

  0013f	3b c8		 cmp	 ecx, eax
  00141	74 13		 je	 SHORT $LN2@DataToInst

; 434  :         return _Myres > _Small_string_capacity;

  00143	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  00147	8b d0		 mov	 edx, eax

; 426  :         if (_Large_mode_engaged()) {

  00149	76 02		 jbe	 SHORT $LN38@DataToInst

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0014b	8b 10		 mov	 edx, DWORD PTR [eax]
$LN38@DataToInst:

; 1410 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0014d	ff 70 10	 push	 DWORD PTR [eax+16]
  00150	52		 push	 edx
  00151	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN2@DataToInst:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00156	8b 45 08	 mov	 eax, DWORD PTR _c_rSoundDataVector$[ebp]
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 128  : 	for (DWORD i = 0; i < c_rSoundDataVector.size(); ++i)

  00159	83 c6 1c	 add	 esi, 28			; 0000001cH
  0015c	ff 45 f4	 inc	 DWORD PTR _i$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0015f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00162	8b 18		 mov	 ebx, DWORD PTR [eax]
  00164	2b cb		 sub	 ecx, ebx
  00166	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0016b	f7 e9		 imul	 ecx
  0016d	03 d1		 add	 edx, ecx
  0016f	c1 fa 04	 sar	 edx, 4
  00172	8b c2		 mov	 eax, edx
  00174	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00177	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 128  : 	for (DWORD i = 0; i < c_rSoundDataVector.size(); ++i)

  00179	39 45 f4	 cmp	 DWORD PTR _i$1$[ebp], eax
  0017c	72 83		 jb	 SHORT $LL4@DataToInst
$LN59@DataToInst:
  0017e	5e		 pop	 esi
  0017f	5f		 pop	 edi
$LN3@DataToInst:
  00180	5b		 pop	 ebx

; 136  : }

  00181	8b e5		 mov	 esp, ebp
  00183	5d		 pop	 ebp
  00184	c3		 ret	 0
$LN45@DataToInst:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1935 :             _Xrange();

  00185	e8 00 00 00 00	 call	 ?_Xrange@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@CAXXZ ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::_Xrange
$LN60@DataToInst:
  0018a	cc		 int	 3
?DataToInstance@NSound@@YAXABV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@PAV?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@3@@Z ENDP ; NSound::DataToInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
;	COMDAT ?SaveSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z
_TEXT	SEGMENT
_rSoundDataVector$GSCopy$1$ = -340			; size = 4
_File$1$ = -336						; size = 4
_i$1$ = -332						; size = 4
$T2 = -325						; size = 1
$T3 = -324						; size = 24
_strResult$ = -300					; size = 24
_szErrorText$4 = -276					; size = 257
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szFileName$ = 8					; size = 4
_rSoundDataVector$ = 12					; size = 4
?SaveSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z PROC ; NSound::SaveSoundInformationPiece, COMDAT

; 79   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SaveSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 48 01 00
	00		 sub	 esp, 328		; 00000148H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b 7d 0c	 mov	 edi, DWORD PTR _rSoundDataVector$[ebp]
  00030	8b 75 08	 mov	 esi, DWORD PTR _c_szFileName$[ebp]
  00033	89 bd ac fe ff
	ff		 mov	 DWORD PTR _rSoundDataVector$GSCopy$1$[ebp], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  00039	8b 07		 mov	 eax, DWORD PTR [edi]
  0003b	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 80   : 	if (rSoundDataVector.empty())

  0003e	75 1d		 jne	 SHORT $LN5@SaveSoundI

; 81   : 	{
; 82   : 		if (IsFile(c_szFileName))

  00040	56		 push	 esi
  00041	e8 00 00 00 00	 call	 ?IsFile@@YA_NPBD@Z	; IsFile
  00046	83 c4 04	 add	 esp, 4
  00049	84 c0		 test	 al, al
  0004b	74 09		 je	 SHORT $LN6@SaveSoundI

; 83   : 		{
; 84   : 			_unlink(c_szFileName);

  0004d	56		 push	 esi
  0004e	e8 00 00 00 00	 call	 __unlink
  00053	83 c4 04	 add	 esp, 4
$LN6@SaveSoundI:

; 85   : 		}
; 86   : 		return true;

  00056	b0 01		 mov	 al, 1
  00058	e9 ff 01 00 00	 jmp	 $LN1@SaveSoundI
$LN5@SaveSoundI:
  0005d	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 836  :         _My_data._Mysize = 0;

  00060	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _strResult$[ebp+16], 0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0006a	0f 11 85 d4 fe
	ff ff		 movups	 XMMWORD PTR _strResult$[ebp], xmm0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  00071	c7 85 e8 fe ff
	ff 0f 00 00 00	 mov	 DWORD PTR _strResult$[ebp+20], 15 ; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0007b	c6 85 d4 fe ff
	ff 00		 mov	 BYTE PTR _strResult$[ebp], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00082	8b ce		 mov	 ecx, esi
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 89   : 	std::string strResult;

  00084	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0008b	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0008e	66 90		 npad	 2
$LL128@SaveSoundI:
  00090	8a 01		 mov	 al, BYTE PTR [ecx]
  00092	41		 inc	 ecx
  00093	84 c0		 test	 al, al
  00095	75 f9		 jne	 SHORT $LL128@SaveSoundI
  00097	2b ca		 sub	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1614 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00099	51		 push	 ecx
  0009a	56		 push	 esi
  0009b	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _strResult$[ebp]
  000a1	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 92   : 	FILE * File = fopen(c_szFileName, "wt");

  000a6	68 00 00 00 00	 push	 OFFSET ??_C@_02BKFDOEMK@wt@
  000ab	56		 push	 esi
  000ac	e8 00 00 00 00	 call	 _fopen
  000b1	83 c4 08	 add	 esp, 8
  000b4	89 85 b0 fe ff
	ff		 mov	 DWORD PTR _File$1$[ebp], eax

; 93   : 
; 94   : 	if (!File)

  000ba	85 c0		 test	 eax, eax
  000bc	75 71		 jne	 SHORT $LN7@SaveSoundI

; 95   : 	{
; 96   : 		char szErrorText[256+1];
; 97   : 		_snprintf(szErrorText, sizeof(szErrorText), "Failed to save file (%s).\nPlease check if it is read-only or you have no space on the disk.\n", c_szFileName);

  000be	56		 push	 esi
  000bf	68 00 00 00 00	 push	 OFFSET ??_C@_0FN@PJPGJAJH@Failed?5to?5save?5file?5?$CI?$CFs?$CJ?4?6Pleas@
  000c4	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _szErrorText$4[ebp]
  000ca	68 01 01 00 00	 push	 257			; 00000101H
  000cf	50		 push	 eax
  000d0	e8 00 00 00 00	 call	 __snprintf

; 98   : 		LogBox(szErrorText, "Error");

  000d5	6a 00		 push	 0
  000d7	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _szErrorText$4[ebp]
  000dd	68 00 00 00 00	 push	 OFFSET ??_C@_05NAOIJFC@Error@
  000e2	50		 push	 eax
  000e3	e8 00 00 00 00	 call	 ?LogBox@@YAXPBD0PAUHWND__@@@Z ; LogBox

; 99   : 		SetResultString((strResult + " Cannot open file for writing").c_str());

  000e8	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@MLNNILFP@?5Cannot?5open?5file?5for?5writing@
  000ed	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _strResult$[ebp]
  000f3	50		 push	 eax
  000f4	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  000fa	50		 push	 eax
  000fb	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00100	83 c4 28	 add	 esp, 40			; 00000028H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00103	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 99   : 		SetResultString((strResult + " Cannot open file for writing").c_str());

  00107	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  0010b	76 02		 jbe	 SHORT $LN46@SaveSoundI

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0010d	8b 00		 mov	 eax, DWORD PTR [eax]
$LN46@SaveSoundI:
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 99   : 		SetResultString((strResult + " Cannot open file for writing").c_str());

  0010f	50		 push	 eax
  00110	e8 00 00 00 00	 call	 ?SetResultString@NSound@@YAXPBD@Z ; NSound::SetResultString
  00115	83 c4 04	 add	 esp, 4
  00118	8d 8d bc fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  0011e	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00123	c6 85 bb fe ff
	ff 00		 mov	 BYTE PTR $T2[ebp], 0
  0012a	e9 f1 00 00 00	 jmp	 $LN11@SaveSoundI
$LN7@SaveSoundI:

; 100  : 		return false;
; 101  : 	}
; 102  : 
; 103  : 	fprintf(File, "ScriptType        CharacterSoundInformation\n");

  0012f	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@NJIDENFN@ScriptType?5?5?5?5?5?5?5?5CharacterSoun@
  00134	50		 push	 eax
  00135	e8 00 00 00 00	 call	 _fprintf

; 104  : 	fprintf(File, "\n");

  0013a	8b b5 b0 fe ff
	ff		 mov	 esi, DWORD PTR _File$1$[ebp]
  00140	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  00145	56		 push	 esi
  00146	e8 00 00 00 00	 call	 _fprintf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0014b	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0014e	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00153	2b 0f		 sub	 ecx, DWORD PTR [edi]
  00155	f7 e9		 imul	 ecx
  00157	03 d1		 add	 edx, ecx
  00159	c1 fa 04	 sar	 edx, 4
  0015c	8b c2		 mov	 eax, edx
  0015e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00161	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 106  : 	fprintf(File, "SoundDataCount    %d\n", rSoundDataVector.size());

  00163	50		 push	 eax
  00164	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@JEIKAJIN@SoundDataCount?5?5?5?5?$CFd?6@
  00169	56		 push	 esi
  0016a	e8 00 00 00 00	 call	 _fprintf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0016f	8b 3f		 mov	 edi, DWORD PTR [edi]
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 108  : 	for (DWORD i = 0; i < rSoundDataVector.size(); ++i)

  00171	33 c9		 xor	 ecx, ecx
  00173	89 8d b4 fe ff
	ff		 mov	 DWORD PTR _i$1$[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00179	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0017e	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR _rSoundDataVector$GSCopy$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 106  : 	fprintf(File, "SoundDataCount    %d\n", rSoundDataVector.size());

  00184	83 c4 1c	 add	 esp, 28			; 0000001cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00187	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0018a	2b cf		 sub	 ecx, edi
  0018c	f7 e9		 imul	 ecx
  0018e	03 d1		 add	 edx, ecx
  00190	c1 fa 04	 sar	 edx, 4
  00193	8b c2		 mov	 eax, edx
  00195	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00198	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 108  : 	for (DWORD i = 0; i < rSoundDataVector.size(); ++i)

  0019a	74 74		 je	 SHORT $LN3@SaveSoundI
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1899 :         auto& _My_data = _Mypair._Myval2;

  0019c	33 f6		 xor	 esi, esi
  0019e	66 90		 npad	 2
$LL4@SaveSoundI:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2328 :         return _Mypair._Myval2._Myptr();

  001a0	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  001a3	03 c6		 add	 eax, esi

; 434  :         return _Myres > _Small_string_capacity;

  001a5	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  001a9	76 02		 jbe	 SHORT $LN80@SaveSoundI

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  001ab	8b 00		 mov	 eax, DWORD PTR [eax]
$LN80@SaveSoundI:
  001ad	f3 0f 10 04 3e	 movss	 xmm0, DWORD PTR [esi+edi]
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 111  : 		fprintf(File, "SoundData%02d       %f \"%s\"\n", i, rSoundData.fTime, rSoundData.strSoundFileName.c_str());

  001b2	8b bd b4 fe ff
	ff		 mov	 edi, DWORD PTR _i$1$[ebp]
  001b8	50		 push	 eax
  001b9	0f 5a c0	 cvtps2pd xmm0, xmm0
  001bc	83 ec 08	 sub	 esp, 8
  001bf	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  001c4	57		 push	 edi
  001c5	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@FNDBKONF@SoundData?$CF02d?5?5?5?5?5?5?5?$CFf?5?$CC?$CFs?$CC?6@
  001ca	ff b5 b0 fe ff
	ff		 push	 DWORD PTR _File$1$[ebp]
  001d0	e8 00 00 00 00	 call	 _fprintf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  001d5	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR _rSoundDataVector$GSCopy$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 108  : 	for (DWORD i = 0; i < rSoundDataVector.size(); ++i)

  001db	47		 inc	 edi
  001dc	89 bd b4 fe ff
	ff		 mov	 DWORD PTR _i$1$[ebp], edi

; 111  : 		fprintf(File, "SoundData%02d       %f \"%s\"\n", i, rSoundData.fTime, rSoundData.strSoundFileName.c_str());

  001e2	83 c4 18	 add	 esp, 24			; 00000018H
  001e5	83 c6 1c	 add	 esi, 28			; 0000001cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  001e8	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001eb	8b 38		 mov	 edi, DWORD PTR [eax]
  001ed	2b cf		 sub	 ecx, edi
  001ef	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  001f4	f7 e9		 imul	 ecx
  001f6	03 d1		 add	 edx, ecx
  001f8	c1 fa 04	 sar	 edx, 4
  001fb	8b c2		 mov	 eax, edx
  001fd	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00200	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 108  : 	for (DWORD i = 0; i < rSoundDataVector.size(); ++i)

  00202	39 85 b4 fe ff
	ff		 cmp	 DWORD PTR _i$1$[ebp], eax
  00208	72 96		 jb	 SHORT $LL4@SaveSoundI
  0020a	8b b5 b0 fe ff
	ff		 mov	 esi, DWORD PTR _File$1$[ebp]
$LN3@SaveSoundI:

; 112  : 	}
; 113  : 
; 114  : 	fclose(File);

  00210	56		 push	 esi
  00211	e8 00 00 00 00	 call	 _fclose
  00216	83 c4 04	 add	 esp, 4

; 115  : 	return true;

  00219	c6 85 bb fe ff
	ff 01		 mov	 BYTE PTR $T2[ebp], 1
$LN11@SaveSoundI:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00220	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _strResult$[ebp+20]
  00226	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00229	76 2b		 jbe	 SHORT $LN106@SaveSoundI
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0022b	8b 95 d4 fe ff
	ff		 mov	 edx, DWORD PTR _strResult$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00231	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00232	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00234	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0023a	72 10		 jb	 SHORT $LN117@SaveSoundI

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0023c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0023f	83 c1 23	 add	 ecx, 35			; 00000023H
  00242	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00244	83 c0 fc	 add	 eax, -4			; fffffffcH
  00247	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0024a	77 2b		 ja	 SHORT $LN132@SaveSoundI
$LN117@SaveSoundI:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0024c	51		 push	 ecx
  0024d	52		 push	 edx
  0024e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00253	83 c4 08	 add	 esp, 8
$LN106@SaveSoundI:
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 115  : 	return true;

  00256	8a 85 bb fe ff
	ff		 mov	 al, BYTE PTR $T2[ebp]
$LN1@SaveSoundI:

; 116  : }

  0025c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0025f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00266	59		 pop	 ecx
  00267	5f		 pop	 edi
  00268	5e		 pop	 esi
  00269	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0026c	33 cd		 xor	 ecx, ebp
  0026e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00273	8b e5		 mov	 esp, ebp
  00275	5d		 pop	 ebp
  00276	c3		 ret	 0
$LN132@SaveSoundI:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00277	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN130@SaveSoundI:
  0027c	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SaveSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z$0:
  00000	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _strResult$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SaveSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z$1:
  0000b	8d 8d bc fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00016	cc		 int	 3
  00017	cc		 int	 3
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
__ehhandler$?SaveSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z:
  0001b	90		 npad	 1
  0001c	90		 npad	 1
  0001d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00021	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00024	8b 8a ac fe ff
	ff		 mov	 ecx, DWORD PTR [edx-340]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00034	33 c8		 xor	 ecx, eax
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SaveSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z
  00040	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SaveSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z ENDP ; NSound::SaveSoundInformationPiece
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp
;	COMDAT ?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z
_TEXT	SEGMENT
_c_szPathHeader$GSCopy$1$ = -180			; size = 4
_pkTextFileLoader$1$ = -176				; size = 4
_iCount$ = -172						; size = 4
tv2070 = -168						; size = 4
tv2077 = -168						; size = 4
_i$1$ = -164						; size = 4
__Oldsize$1$ = -164					; size = 4
_pTokenVector$2 = -160					; size = 4
$T3 = -160						; size = 4
tv2042 = -156						; size = 4
$T4 = -156						; size = 4
$T5 = -149						; size = 1
$T6 = -149						; size = 1
$T7 = -148						; size = 24
_strResult$ = -124					; size = 24
$T8 = -100						; size = 24
$T9 = -100						; size = 24
$T10 = -100						; size = 24
$T11 = -100						; size = 24
$T12 = -100						; size = 24
$T13 = -76						; size = 24
$T14 = -76						; size = 24
$T15 = -76						; size = 24
_szSoundDataHeader$ = -52				; size = 33
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szFileName$ = 8					; size = 4
_rSoundDataVector$ = 12					; size = 4
_c_szPathHeader$ = 16					; size = 4
?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z PROC ; NSound::LoadSoundInformationPiece, COMDAT

; 18   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec a8 00 00
	00		 sub	 esp, 168		; 000000a8H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b 45 10	 mov	 eax, DWORD PTR _c_szPathHeader$[ebp]
  00030	0f 57 c0	 xorps	 xmm0, xmm0
  00033	8b 75 08	 mov	 esi, DWORD PTR _c_szFileName$[ebp]
  00036	8b 7d 0c	 mov	 edi, DWORD PTR _rSoundDataVector$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00039	0f 11 45 84	 movups	 XMMWORD PTR _strResult$[ebp], xmm0
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 18   : {

  0003d	89 85 4c ff ff
	ff		 mov	 DWORD PTR _c_szPathHeader$GSCopy$1$[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 836  :         _My_data._Mysize = 0;

  00043	c7 45 94 00 00
	00 00		 mov	 DWORD PTR _strResult$[ebp+16], 0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  0004a	c7 45 98 0f 00
	00 00		 mov	 DWORD PTR _strResult$[ebp+20], 15 ; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00051	c6 45 84 00	 mov	 BYTE PTR _strResult$[ebp], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00055	8b ce		 mov	 ecx, esi
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 19   : 	std::string strResult;

  00057	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0005e	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL572@LoadSoundI:
  00061	8a 01		 mov	 al, BYTE PTR [ecx]
  00063	41		 inc	 ecx
  00064	84 c0		 test	 al, al
  00066	75 f9		 jne	 SHORT $LL572@LoadSoundI
  00068	2b ca		 sub	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1614 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0006a	51		 push	 ecx
  0006b	56		 push	 esi
  0006c	8d 4d 84	 lea	 ecx, DWORD PTR _strResult$[ebp]
  0006f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 22   : 	CTextFileLoader* pkTextFileLoader=CTextFileLoader::Cache(c_szFileName);

  00074	56		 push	 esi
  00075	e8 00 00 00 00	 call	 ?Cache@CTextFileLoader@@SAPAV1@PBD@Z ; CTextFileLoader::Cache
  0007a	8b f0		 mov	 esi, eax
  0007c	83 c4 04	 add	 esp, 4
  0007f	89 b5 50 ff ff
	ff		 mov	 DWORD PTR _pkTextFileLoader$1$[ebp], esi

; 23   : 	if (!pkTextFileLoader)

  00085	85 f6		 test	 esi, esi
  00087	0f 84 ee 00 00
	00		 je	 $LN25@LoadSoundI

; 24   : 		return false;
; 25   : 
; 26   : 	CTextFileLoader& rkTextFileLoader=*pkTextFileLoader;
; 27   : 	if (rkTextFileLoader.IsEmpty())

  0008d	8b ce		 mov	 ecx, esi
  0008f	e8 00 00 00 00	 call	 ?IsEmpty@CTextFileLoader@@QAE_NXZ ; CTextFileLoader::IsEmpty
  00094	84 c0		 test	 al, al
  00096	74 1e		 je	 SHORT $LN6@LoadSoundI

; 28   : 	{
; 29   : 		SetResultString((strResult + " Can not open file for reading").c_str());

  00098	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@LLPPICEF@?5Can?5not?5open?5file?5for?5reading@
  0009d	8d 45 84	 lea	 eax, DWORD PTR _strResult$[ebp]
  000a0	50		 push	 eax
  000a1	8d 45 9c	 lea	 eax, DWORD PTR $T8[ebp]
  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  000aa	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ad	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000b1	e9 ac 00 00 00	 jmp	 $LN584@LoadSoundI
$LN6@LoadSoundI:

; 30   : 		return false;
; 31   : 	}
; 32   : 
; 33   : 	rkTextFileLoader.SetTop();

  000b6	8b ce		 mov	 ecx, esi
  000b8	e8 00 00 00 00	 call	 ?SetTop@CTextFileLoader@@QAEXXZ ; CTextFileLoader::SetTop
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000bd	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_0P@DFMHJMOB@sounddatacount@+8
  000c2	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000c5	0f 11 45 b4	 movups	 XMMWORD PTR $T13[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c9	89 45 bc	 mov	 DWORD PTR $T13[ebp+8], eax
  000cc	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0P@DFMHJMOB@sounddatacount@
  000d4	66 a1 0c 00 00
	00		 mov	 ax, WORD PTR ??_C@_0P@DFMHJMOB@sounddatacount@+12
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  000da	c7 45 c4 0e 00
	00 00		 mov	 DWORD PTR $T13[ebp+16], 14 ; 0000000eH

; 867  :             _My_data._Myres  = _Small_string_capacity;

  000e1	c7 45 c8 0f 00
	00 00		 mov	 DWORD PTR $T13[ebp+20], 15 ; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000e8	66 0f d6 45 b4	 movq	 QWORD PTR $T13[ebp], xmm0
  000ed	66 89 45 c0	 mov	 WORD PTR $T13[ebp+12], ax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  000f1	c6 45 c2 00	 mov	 BYTE PTR $T13[ebp+14], 0
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 36   : 	if (!rkTextFileLoader.GetTokenInteger("sounddatacount", &iCount))

  000f5	8d 85 54 ff ff
	ff		 lea	 eax, DWORD PTR _iCount$[ebp]
  000fb	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000ff	50		 push	 eax
  00100	8d 45 b4	 lea	 eax, DWORD PTR $T13[ebp]
  00103	8b ce		 mov	 ecx, esi
  00105	50		 push	 eax
  00106	e8 00 00 00 00	 call	 ?GetTokenInteger@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAH@Z ; CTextFileLoader::GetTokenInteger
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0010b	8b 4d c8	 mov	 ecx, DWORD PTR $T13[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 36   : 	if (!rkTextFileLoader.GetTokenInteger("sounddatacount", &iCount))

  0010e	8b f0		 mov	 esi, eax
  00110	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00114	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00117	76 2c		 jbe	 SHORT $LN366@LoadSoundI
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00119	8b 55 b4	 mov	 edx, DWORD PTR $T13[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0011c	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0011d	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0011f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00125	72 14		 jb	 SHORT $LN377@LoadSoundI

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00127	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0012a	83 c1 23	 add	 ecx, 35			; 00000023H
  0012d	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0012f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00132	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00135	0f 87 24 05 00
	00		 ja	 $LN186@LoadSoundI
$LN377@LoadSoundI:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0013b	51		 push	 ecx
  0013c	52		 push	 edx
  0013d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00142	83 c4 08	 add	 esp, 8
$LN366@LoadSoundI:
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 36   : 	if (!rkTextFileLoader.GetTokenInteger("sounddatacount", &iCount))

  00145	85 f6		 test	 esi, esi
  00147	75 70		 jne	 SHORT $LN7@LoadSoundI

; 38   : 		SetResultString((strResult + " File format error, SoundDataCount Unable to find.").c_str());

  00149	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@IKAPCMKK@?5File?5format?5error?0?5SoundDataCo@
  0014e	8d 45 84	 lea	 eax, DWORD PTR _strResult$[ebp]
  00151	50		 push	 eax
  00152	8d 45 9c	 lea	 eax, DWORD PTR $T9[ebp]
  00155	50		 push	 eax
  00156	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0015b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0015e	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
$LN584@LoadSoundI:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00162	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH
  00166	76 02		 jbe	 SHORT $LN413@LoadSoundI
  00168	8b 00		 mov	 eax, DWORD PTR [eax]
$LN413@LoadSoundI:
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 38   : 		SetResultString((strResult + " File format error, SoundDataCount Unable to find.").c_str());

  0016a	50		 push	 eax
  0016b	e8 00 00 00 00	 call	 ?SetResultString@NSound@@YAXPBD@Z ; NSound::SetResultString
  00170	83 c4 04	 add	 esp, 4
  00173	8d 4d 9c	 lea	 ecx, DWORD PTR $T9[ebp]
$LN582@LoadSoundI:
  00176	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN25@LoadSoundI:
  0017b	c6 85 6b ff ff
	ff 00		 mov	 BYTE PTR $T6[ebp], 0
$LN27@LoadSoundI:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00182	8b 4d 98	 mov	 ecx, DWORD PTR _strResult$[ebp+20]
  00185	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00188	0f 86 b0 04 00
	00		 jbe	 $LN48@LoadSoundI
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0018e	8b 55 84	 mov	 edx, DWORD PTR _strResult$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00191	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00192	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00194	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0019a	0f 82 94 04 00
	00		 jb	 $LN59@LoadSoundI

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001a0	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  001a3	83 c1 23	 add	 ecx, 35			; 00000023H
  001a6	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001a8	83 c0 fc	 add	 eax, -4			; fffffffcH
  001ab	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001ae	0f 87 b0 04 00
	00		 ja	 $LN587@LoadSoundI
  001b4	e9 7b 04 00 00	 jmp	 $LN59@LoadSoundI
$LN7@LoadSoundI:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  001b9	8b 17		 mov	 edx, DWORD PTR [edi]
  001bb	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  001be	89 95 64 ff ff
	ff		 mov	 DWORD PTR $T4[ebp], edx
  001c4	89 85 60 ff ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  001ca	3b d0		 cmp	 edx, eax
  001cc	74 1e		 je	 SHORT $LN419@LoadSoundI

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());

  001ce	57		 push	 edi
  001cf	50		 push	 eax
  001d0	52		 push	 edx
  001d1	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USSoundData@NSound@@@std@@@std@@YAXPAUSSoundData@NSound@@QAU12@AAV?$allocator@USSoundData@NSound@@@0@@Z ; std::_Destroy_range<std::allocator<NSound::SSoundData> >

; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  001d6	8b 07		 mov	 eax, DWORD PTR [edi]
  001d8	83 c4 0c	 add	 esp, 12			; 0000000cH
  001db	89 85 60 ff ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  001e1	8b d0		 mov	 edx, eax
  001e3	89 47 04	 mov	 DWORD PTR [edi+4], eax
  001e6	89 85 64 ff ff
	ff		 mov	 DWORD PTR $T4[ebp], eax
$LN419@LoadSoundI:

; 1581 :         if (_Newsize < _Oldsize) { // trim

  001ec	8b b5 54 ff ff
	ff		 mov	 esi, DWORD PTR _iCount$[ebp]
  001f2	8b c8		 mov	 ecx, eax
  001f4	2b ca		 sub	 ecx, edx
  001f6	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  001fb	f7 e9		 imul	 ecx
  001fd	03 d1		 add	 edx, ecx
  001ff	c1 fa 04	 sar	 edx, 4
  00202	8b c2		 mov	 eax, edx
  00204	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00207	03 c2		 add	 eax, edx
  00209	89 85 5c ff ff
	ff		 mov	 DWORD PTR __Oldsize$1$[ebp], eax
  0020f	3b f0		 cmp	 esi, eax
  00211	73 24		 jae	 SHORT $LN426@LoadSoundI

; 1582 :             const pointer _Newlast = _Myfirst + _Newsize;

  00213	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR $T4[ebp]
  00219	8d 04 f5 00 00
	00 00		 lea	 eax, DWORD PTR [esi*8]
  00220	2b c6		 sub	 eax, esi

; 1583 :             _Orphan_range(_Newlast, _Mylast);
; 1584 :             _Destroy_range(_Newlast, _Mylast, _Al);

  00222	57		 push	 edi
  00223	ff b5 60 ff ff
	ff		 push	 DWORD PTR $T3[ebp]
  00229	8d 34 82	 lea	 esi, DWORD PTR [edx+eax*4]
  0022c	56		 push	 esi
  0022d	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USSoundData@NSound@@@std@@@std@@YAXPAUSSoundData@NSound@@QAU12@AAV?$allocator@USSoundData@NSound@@@0@@Z ; std::_Destroy_range<std::allocator<NSound::SSoundData> >

; 1585 :             _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1586 :             _Mylast = _Newlast;

  00232	89 77 04	 mov	 DWORD PTR [edi+4], esi

; 1587 :             return;

  00235	eb 49		 jmp	 SHORT $LN580@LoadSoundI
$LN426@LoadSoundI:

; 1588 :         }
; 1589 : 
; 1590 :         if (_Newsize > _Oldsize) { // append

  00237	76 4a		 jbe	 SHORT $LN427@LoadSoundI

; 1591 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

  00239	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0023c	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00241	2b 8d 64 ff ff
	ff		 sub	 ecx, DWORD PTR $T4[ebp]
  00247	f7 e9		 imul	 ecx
  00249	03 d1		 add	 edx, ecx
  0024b	c1 fa 04	 sar	 edx, 4
  0024e	8b c2		 mov	 eax, edx
  00250	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00253	03 c2		 add	 eax, edx

; 1592 :             if (_Newsize > _Oldcapacity) { // reallocate

  00255	3b f0		 cmp	 esi, eax
  00257	76 11		 jbe	 SHORT $LN428@LoadSoundI

; 1593 :                 _Resize_reallocate(_Newsize, _Val);

  00259	8d 85 6b ff ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  0025f	8b cf		 mov	 ecx, edi
  00261	50		 push	 eax
  00262	56		 push	 esi
  00263	e8 00 00 00 00	 call	 ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<NSound::SSoundData,std::allocator<NSound::SSoundData> >::_Resize_reallocate<std::_Value_init_tag>

; 1594 :                 return;

  00268	eb 19		 jmp	 SHORT $LN427@LoadSoundI
$LN428@LoadSoundI:

; 1595 :             }
; 1596 : 
; 1597 :             _ASAN_VECTOR_EXTEND_GUARD(_Newsize);
; 1598 :             const pointer _Oldlast = _Mylast;
; 1599 :             if constexpr (is_same_v<_Ty2, _Ty>) {
; 1600 :                 _Mylast = _Uninitialized_fill_n(_Oldlast, _Newsize - _Oldsize, _Val, _Al);
; 1601 :             } else {
; 1602 :                 _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Ty2, _Value_init_tag>);
; 1603 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  0026a	2b b5 5c ff ff
	ff		 sub	 esi, DWORD PTR __Oldsize$1$[ebp]
  00270	57		 push	 edi
  00271	56		 push	 esi
  00272	ff b5 60 ff ff
	ff		 push	 DWORD PTR $T3[ebp]
  00278	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n@V?$allocator@USSoundData@NSound@@@std@@@std@@YAPAUSSoundData@NSound@@PAU12@IAAV?$allocator@USSoundData@NSound@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<NSound::SSoundData> >
  0027d	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN580@LoadSoundI:
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 46   : 	for (DWORD i = 0; i < rSoundDataVector.size(); ++i)

  00280	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN427@LoadSoundI:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00283	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00286	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0028b	2b 0f		 sub	 ecx, DWORD PTR [edi]
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 46   : 	for (DWORD i = 0; i < rSoundDataVector.size(); ++i)

  0028d	33 f6		 xor	 esi, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0028f	f7 e9		 imul	 ecx
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 46   : 	for (DWORD i = 0; i < rSoundDataVector.size(); ++i)

  00291	89 b5 5c ff ff
	ff		 mov	 DWORD PTR _i$1$[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00297	03 d1		 add	 edx, ecx
  00299	c1 fa 04	 sar	 edx, 4
  0029c	8b c2		 mov	 eax, edx
  0029e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002a1	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 46   : 	for (DWORD i = 0; i < rSoundDataVector.size(); ++i)

  002a3	0f 84 1b 02 00
	00		 je	 $LN3@LoadSoundI
  002a9	89 b5 64 ff ff
	ff		 mov	 DWORD PTR tv2042[ebp], esi
  002af	90		 npad	 1
$LL4@LoadSoundI:

; 48   : 		_snprintf(szSoundDataHeader, sizeof(szSoundDataHeader), "sounddata%02d", i);

  002b0	56		 push	 esi
  002b1	68 00 00 00 00	 push	 OFFSET ??_C@_0O@OOLLGPNP@sounddata?$CF02d@
  002b6	8d 45 cc	 lea	 eax, DWORD PTR _szSoundDataHeader$[ebp]
  002b9	6a 21		 push	 33			; 00000021H
  002bb	50		 push	 eax
  002bc	e8 00 00 00 00	 call	 __snprintf
  002c1	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 498  :     size_type _Mysize = 0; // current length of string (size)

  002c4	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR $T14[ebp+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  002cb	8d 4d cc	 lea	 ecx, DWORD PTR _szSoundDataHeader$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  002ce	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR $T14[ebp+20], 0
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 48   : 		_snprintf(szSoundDataHeader, sizeof(szSoundDataHeader), "sounddata%02d", i);

  002d5	83 c4 10	 add	 esp, 16			; 00000010H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  002d8	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  002db	0f 11 45 b4	 movups	 XMMWORD PTR $T14[ebp], xmm0
  002df	90		 npad	 1
$LL573@LoadSoundI:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  002e0	8a 01		 mov	 al, BYTE PTR [ecx]
  002e2	41		 inc	 ecx
  002e3	84 c0		 test	 al, al
  002e5	75 f9		 jne	 SHORT $LL573@LoadSoundI
  002e7	2b ca		 sub	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  002e9	8d 45 cc	 lea	 eax, DWORD PTR _szSoundDataHeader$[ebp]
  002ec	51		 push	 ecx
  002ed	50		 push	 eax
  002ee	8d 4d b4	 lea	 ecx, DWORD PTR $T14[ebp]
  002f1	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 50   : 		if (!rkTextFileLoader.GetTokenVector(szSoundDataHeader, &pTokenVector))

  002f6	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR _pkTextFileLoader$1$[ebp]
  002fc	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _pTokenVector$2[ebp]
  00302	50		 push	 eax
  00303	8d 45 b4	 lea	 eax, DWORD PTR $T14[ebp]
  00306	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  0030a	50		 push	 eax
  0030b	e8 00 00 00 00	 call	 ?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z ; CTextFileLoader::GetTokenVector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00310	8b 4d c8	 mov	 ecx, DWORD PTR $T14[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 50   : 		if (!rkTextFileLoader.GetTokenVector(szSoundDataHeader, &pTokenVector))

  00313	8b f0		 mov	 esi, eax
  00315	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00319	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0031c	76 2c		 jbe	 SHORT $LN178@LoadSoundI
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0031e	8b 55 b4	 mov	 edx, DWORD PTR $T14[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00321	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00322	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00324	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0032a	72 14		 jb	 SHORT $LN189@LoadSoundI

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0032c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0032f	83 c1 23	 add	 ecx, 35			; 00000023H
  00332	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00334	83 c0 fc	 add	 eax, -4			; fffffffcH
  00337	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0033a	0f 87 1f 03 00
	00		 ja	 $LN186@LoadSoundI
$LN189@LoadSoundI:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00340	51		 push	 ecx
  00341	52		 push	 edx
  00342	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00347	83 c4 08	 add	 esp, 8
$LN178@LoadSoundI:
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 50   : 		if (!rkTextFileLoader.GetTokenVector(szSoundDataHeader, &pTokenVector))

  0034a	85 f6		 test	 esi, esi
  0034c	0f 84 f1 01 00
	00		 je	 $LN562@LoadSoundI
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00352	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _pTokenVector$2[ebp]
  00358	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0035b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0035d	2b d1		 sub	 edx, ecx
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 56   : 		if (2 != pTokenVector->size())

  0035f	8d 42 d0	 lea	 eax, DWORD PTR [edx-48]
  00362	83 f8 18	 cmp	 eax, 24			; 00000018H
  00365	0f 83 ba 01 00
	00		 jae	 $LN563@LoadSoundI
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  0036b	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00370	f7 ea		 imul	 edx
  00372	c1 fa 02	 sar	 edx, 2
  00375	8b c2		 mov	 eax, edx
  00377	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0037a	03 c2		 add	 eax, edx
  0037c	0f 84 ec 02 00
	00		 je	 $LN564@LoadSoundI
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00382	83 79 14 0f	 cmp	 DWORD PTR [ecx+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  00386	76 02		 jbe	 SHORT $LN400@LoadSoundI

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00388	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN400@LoadSoundI:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1919 :         return _My_data._Myfirst[_Pos];

  0038a	8b 37		 mov	 esi, DWORD PTR [edi]
  0038c	03 b5 64 ff ff
	ff		 add	 esi, DWORD PTR tv2042[ebp]
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 62   : 		rSoundDataVector[i].fTime = (float) atof(pTokenVector->at(0).c_str());

  00392	51		 push	 ecx
  00393	e8 00 00 00 00	 call	 _atof
  00398	d9 1e		 fstp	 DWORD PTR [esi]

; 63   : 		if (c_szPathHeader)

  0039a	8b b5 4c ff ff
	ff		 mov	 esi, DWORD PTR _c_szPathHeader$GSCopy$1$[ebp]
  003a0	83 c4 04	 add	 esp, 4
  003a3	85 f6		 test	 esi, esi
  003a5	74 7a		 je	 SHORT $LN10@LoadSoundI
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  003a7	8b ce		 mov	 ecx, esi
  003a9	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  003ac	0f 1f 40 00	 npad	 4
$LL574@LoadSoundI:
  003b0	8a 01		 mov	 al, BYTE PTR [ecx]
  003b2	41		 inc	 ecx
  003b3	84 c0		 test	 al, al
  003b5	75 f9		 jne	 SHORT $LL574@LoadSoundI
  003b7	2b ca		 sub	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1614 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  003b9	51		 push	 ecx
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 65   : 			rSoundDataVector[i].strSoundFileName = c_szPathHeader;

  003ba	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR tv2042[ebp]
  003c0	83 c1 04	 add	 ecx, 4
  003c3	03 0f		 add	 ecx, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1614 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  003c5	56		 push	 esi
  003c6	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  003cb	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _pTokenVector$2[ebp]
  003d1	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  003d4	8b 30		 mov	 esi, DWORD PTR [eax]
  003d6	2b ce		 sub	 ecx, esi
  003d8	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  003dd	f7 e9		 imul	 ecx
  003df	c1 fa 02	 sar	 edx, 2
  003e2	8b c2		 mov	 eax, edx
  003e4	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  003e7	03 c2		 add	 eax, edx
  003e9	83 f8 01	 cmp	 eax, 1
  003ec	0f 86 7c 02 00
	00		 jbe	 $LN564@LoadSoundI
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  003f2	83 7e 2c 0f	 cmp	 DWORD PTR [esi+44], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1938 :         return _My_data._Myfirst[_Pos];

  003f6	8d 56 18	 lea	 edx, DWORD PTR [esi+24]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  003f9	76 02		 jbe	 SHORT $LN434@LoadSoundI

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  003fb	8b 12		 mov	 edx, DWORD PTR [edx]
$LN434@LoadSoundI:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  003fd	8b ca		 mov	 ecx, edx
  003ff	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
$LL575@LoadSoundI:
  00402	8a 01		 mov	 al, BYTE PTR [ecx]
  00404	41		 inc	 ecx
  00405	84 c0		 test	 al, al
  00407	75 f9		 jne	 SHORT $LL575@LoadSoundI
  00409	2b ce		 sub	 ecx, esi
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 66   : 			rSoundDataVector[i].strSoundFileName += pTokenVector->at(1).c_str();

  0040b	8b b5 64 ff ff
	ff		 mov	 esi, DWORD PTR tv2042[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00411	51		 push	 ecx
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 66   : 			rSoundDataVector[i].strSoundFileName += pTokenVector->at(1).c_str();

  00412	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00414	83 c1 04	 add	 ecx, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00417	52		 push	 edx
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 66   : 			rSoundDataVector[i].strSoundFileName += pTokenVector->at(1).c_str();

  00418	03 ce		 add	 ecx, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0041a	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 67   : 		}

  0041f	eb 6e		 jmp	 SHORT $LN2@LoadSoundI
$LN10@LoadSoundI:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00421	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _pTokenVector$2[ebp]
  00427	8b 10		 mov	 edx, DWORD PTR [eax]
  00429	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0042c	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00431	2b ca		 sub	 ecx, edx
  00433	89 95 58 ff ff
	ff		 mov	 DWORD PTR tv2070[ebp], edx
  00439	f7 e9		 imul	 ecx
  0043b	c1 fa 02	 sar	 edx, 2
  0043e	8b c2		 mov	 eax, edx
  00440	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00443	03 c2		 add	 eax, edx
  00445	83 f8 01	 cmp	 eax, 1
  00448	0f 86 20 02 00
	00		 jbe	 $LN564@LoadSoundI

; 1938 :         return _My_data._Myfirst[_Pos];

  0044e	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR tv2070[ebp]

; 1919 :         return _My_data._Myfirst[_Pos];

  00454	8b 37		 mov	 esi, DWORD PTR [edi]

; 1938 :         return _My_data._Myfirst[_Pos];

  00456	83 c2 18	 add	 edx, 24			; 00000018H

; 1919 :         return _My_data._Myfirst[_Pos];

  00459	03 b5 64 ff ff
	ff		 add	 esi, DWORD PTR tv2042[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0045f	83 7a 14 0f	 cmp	 DWORD PTR [edx+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  00463	76 02		 jbe	 SHORT $LN480@LoadSoundI

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00465	8b 12		 mov	 edx, DWORD PTR [edx]
$LN480@LoadSoundI:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00467	8b ca		 mov	 ecx, edx
  00469	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0046c	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv2077[ebp], eax
$LL576@LoadSoundI:
  00472	8a 01		 mov	 al, BYTE PTR [ecx]
  00474	41		 inc	 ecx
  00475	84 c0		 test	 al, al
  00477	75 f9		 jne	 SHORT $LL576@LoadSoundI
  00479	2b 8d 58 ff ff
	ff		 sub	 ecx, DWORD PTR tv2077[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1614 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0047f	51		 push	 ecx
  00480	52		 push	 edx
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 70   : 			rSoundDataVector[i].strSoundFileName = pTokenVector->at(1).c_str();

  00481	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1614 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00484	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00489	8b b5 64 ff ff
	ff		 mov	 esi, DWORD PTR tv2042[ebp]
$LN2@LoadSoundI:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0048f	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00492	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00497	2b 0f		 sub	 ecx, DWORD PTR [edi]
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 46   : 	for (DWORD i = 0; i < rSoundDataVector.size(); ++i)

  00499	83 c6 1c	 add	 esi, 28			; 0000001cH
  0049c	ff 85 5c ff ff
	ff		 inc	 DWORD PTR _i$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  004a2	f7 e9		 imul	 ecx
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 46   : 	for (DWORD i = 0; i < rSoundDataVector.size(); ++i)

  004a4	89 b5 64 ff ff
	ff		 mov	 DWORD PTR tv2042[ebp], esi
  004aa	8b b5 5c ff ff
	ff		 mov	 esi, DWORD PTR _i$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  004b0	03 d1		 add	 edx, ecx
  004b2	c1 fa 04	 sar	 edx, 4
  004b5	8b c2		 mov	 eax, edx
  004b7	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  004ba	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 46   : 	for (DWORD i = 0; i < rSoundDataVector.size(); ++i)

  004bc	3b f0		 cmp	 esi, eax
  004be	0f 82 ec fd ff
	ff		 jb	 $LL4@LoadSoundI
$LN3@LoadSoundI:

; 74   : 	SetResultString((strResult + " Loaded").c_str());

  004c4	68 00 00 00 00	 push	 OFFSET ??_C@_07EGDJHJID@?5Loaded@
  004c9	8d 45 84	 lea	 eax, DWORD PTR _strResult$[ebp]
  004cc	50		 push	 eax
  004cd	8d 45 9c	 lea	 eax, DWORD PTR $T12[ebp]
  004d0	50		 push	 eax
  004d1	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  004d6	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  004d9	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 74   : 	SetResultString((strResult + " Loaded").c_str());

  004dd	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  004e1	76 02		 jbe	 SHORT $LN97@LoadSoundI

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  004e3	8b 00		 mov	 eax, DWORD PTR [eax]
$LN97@LoadSoundI:
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 74   : 	SetResultString((strResult + " Loaded").c_str());

  004e5	50		 push	 eax
  004e6	e8 00 00 00 00	 call	 ?SetResultString@NSound@@YAXPBD@Z ; NSound::SetResultString
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  004eb	8b 4d b0	 mov	 ecx, DWORD PTR $T12[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 74   : 	SetResultString((strResult + " Loaded").c_str());

  004ee	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  004f1	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  004f4	0f 86 2e 01 00
	00		 jbe	 $LN123@LoadSoundI
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  004fa	8b 55 9c	 mov	 edx, DWORD PTR $T12[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  004fd	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  004fe	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00500	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00506	0f 82 12 01 00
	00		 jb	 $LN134@LoadSoundI

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0050c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0050f	83 c1 23	 add	 ecx, 35			; 00000023H
  00512	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00514	83 c0 fc	 add	 eax, -4			; fffffffcH
  00517	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0051a	0f 87 49 01 00
	00		 ja	 $LN588@LoadSoundI
  00520	e9 f9 00 00 00	 jmp	 $LN134@LoadSoundI
$LN563@LoadSoundI:
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 58   : 			SetResultString((strResult + " File format error: The size of the vector is not 2").c_str());

  00525	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@ECJCCDPG@?5File?5format?5error?3?5The?5size?5of@
  0052a	8d 45 84	 lea	 eax, DWORD PTR _strResult$[ebp]
  0052d	50		 push	 eax
  0052e	8d 45 9c	 lea	 eax, DWORD PTR $T11[ebp]
  00531	50		 push	 eax
  00532	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00537	83 c4 0c	 add	 esp, 12			; 0000000cH
  0053a	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8

; 59   : 			return false;

  0053e	e9 1f fc ff ff	 jmp	 $LN584@LoadSoundI
$LN562@LoadSoundI:

; 52   : 			SetResultString((strResult + " File format error: " + szSoundDataHeader + " Unable to find").c_str());

  00543	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@LPIKLLAN@?5File?5format?5error?3?5@
  00548	8d 45 84	 lea	 eax, DWORD PTR _strResult$[ebp]
  0054b	50		 push	 eax
  0054c	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
  00552	50		 push	 eax
  00553	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00558	83 c4 0c	 add	 esp, 12			; 0000000cH
  0055b	8b d0		 mov	 edx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0055d	8d 4d cc	 lea	 ecx, DWORD PTR _szSoundDataHeader$[ebp]
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 52   : 			SetResultString((strResult + " File format error: " + szSoundDataHeader + " Unable to find").c_str());

  00560	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00564	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
$LL577@LoadSoundI:
  00567	8a 01		 mov	 al, BYTE PTR [ecx]
  00569	41		 inc	 ecx
  0056a	84 c0		 test	 al, al
  0056c	75 f9		 jne	 SHORT $LL577@LoadSoundI
  0056e	2b ce		 sub	 ecx, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00570	8d 45 cc	 lea	 eax, DWORD PTR _szSoundDataHeader$[ebp]
  00573	51		 push	 ecx
  00574	50		 push	 eax
  00575	8b ca		 mov	 ecx, edx
  00577	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 498  :     size_type _Mysize = 0; // current length of string (size)

  0057c	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR $T15[ebp+16], 0
  00583	0f 57 c0	 xorps	 xmm0, xmm0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00586	0f 11 45 b4	 movups	 XMMWORD PTR $T15[ebp], xmm0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0058a	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR $T15[ebp+20], 0

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00591	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00594	0f 11 45 b4	 movups	 XMMWORD PTR $T15[ebp], xmm0
  00598	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  0059d	66 0f d6 45 c4	 movq	 QWORD PTR $T15[ebp+16], xmm0

; 1263 : 
; 1264 :                 _Right_data._Mysize = 0;

  005a2	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 1265 :                 _Right_data._Myres  = _Small_string_capacity;

  005a9	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 1266 :                 _Right_data._Activate_SSO_buffer();
; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  005b0	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  005b3	6a 0f		 push	 15			; 0000000fH
  005b5	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@EHBCCDFO@?5Unable?5to?5find@
  005ba	8d 4d b4	 lea	 ecx, DWORD PTR $T15[ebp]
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 52   : 			SetResultString((strResult + " File format error: " + szSoundDataHeader + " Unable to find").c_str());

  005bd	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  005c1	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  005c6	0f 10 08	 movups	 xmm1, XMMWORD PTR [eax]
  005c9	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  005ce	0f 11 4d 9c	 movups	 XMMWORD PTR $T10[ebp], xmm1

; 1263 : 
; 1264 :                 _Right_data._Mysize = 0;

  005d2	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
  005d9	66 0f d6 45 ac	 movq	 QWORD PTR $T10[ebp+16], xmm0

; 1265 :                 _Right_data._Myres  = _Small_string_capacity;

  005de	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 1266 :                 _Right_data._Activate_SSO_buffer();
; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  005e5	c6 00 00	 mov	 BYTE PTR [eax], 0

; 434  :         return _Myres > _Small_string_capacity;

  005e8	83 7d b0 0f	 cmp	 DWORD PTR $T10[ebp+20], 15 ; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  005ec	8d 4d 9c	 lea	 ecx, DWORD PTR $T10[ebp]

; 426  :         if (_Large_mode_engaged()) {

  005ef	66 0f 7e c8	 movd	 eax, xmm1
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 52   : 			SetResultString((strResult + " File format error: " + szSoundDataHeader + " Unable to find").c_str());

  005f3	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  005f7	0f 47 c8	 cmova	 ecx, eax
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 52   : 			SetResultString((strResult + " File format error: " + szSoundDataHeader + " Unable to find").c_str());

  005fa	51		 push	 ecx
  005fb	e8 00 00 00 00	 call	 ?SetResultString@NSound@@YAXPBD@Z ; NSound::SetResultString
  00600	83 c4 04	 add	 esp, 4
  00603	8d 4d 9c	 lea	 ecx, DWORD PTR $T10[ebp]
  00606	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0060b	8d 4d b4	 lea	 ecx, DWORD PTR $T15[ebp]
  0060e	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00613	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  00619	e9 58 fb ff ff	 jmp	 $LN582@LoadSoundI
$LN134@LoadSoundI:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0061e	51		 push	 ecx
  0061f	52		 push	 edx
  00620	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00625	83 c4 08	 add	 esp, 8
$LN123@LoadSoundI:
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 75   : 	return true;

  00628	c6 85 6b ff ff
	ff 01		 mov	 BYTE PTR $T6[ebp], 1
  0062f	e9 4e fb ff ff	 jmp	 $LN27@LoadSoundI
$LN59@LoadSoundI:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00634	51		 push	 ecx
  00635	52		 push	 edx
  00636	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0063b	83 c4 08	 add	 esp, 8
$LN48@LoadSoundI:
; File C:\Marty 5.5\Src-Client\Client\MilesLib\Type.cpp

; 75   : 	return true;

  0063e	8a 85 6b ff ff
	ff		 mov	 al, BYTE PTR $T6[ebp]

; 76   : }

  00644	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00647	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0064e	59		 pop	 ecx
  0064f	5f		 pop	 edi
  00650	5e		 pop	 esi
  00651	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00654	33 cd		 xor	 ecx, ebp
  00656	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0065b	8b e5		 mov	 esp, ebp
  0065d	5d		 pop	 ebp
  0065e	c3		 ret	 0
$LN186@LoadSoundI:
  0065f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN587@LoadSoundI:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00664	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN588@LoadSoundI:
  00669	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN564@LoadSoundI:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1935 :             _Xrange();

  0066e	e8 00 00 00 00	 call	 ?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
$LN579@LoadSoundI:
  00673	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$0:
  00000	8d 4d 84	 lea	 ecx, DWORD PTR _strResult$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$1:
  00008	8d 4d 9c	 lea	 ecx, DWORD PTR $T8[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$2:
  00010	8d 4d b4	 lea	 ecx, DWORD PTR $T13[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$3:
  00018	8d 4d 9c	 lea	 ecx, DWORD PTR $T9[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$4:
  00020	8d 4d b4	 lea	 ecx, DWORD PTR $T14[ebp]
  00023	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$9:
  00028	8d 4d 9c	 lea	 ecx, DWORD PTR $T12[ebp]
  0002b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$8:
  00030	8d 4d 9c	 lea	 ecx, DWORD PTR $T11[ebp]
  00033	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$5:
  00038	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  0003e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$6:
  00043	8d 4d b4	 lea	 ecx, DWORD PTR $T15[ebp]
  00046	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$7:
  0004b	8d 4d 9c	 lea	 ecx, DWORD PTR $T10[ebp]
  0004e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00053	cc		 int	 3
  00054	cc		 int	 3
  00055	cc		 int	 3
  00056	cc		 int	 3
  00057	cc		 int	 3
__ehhandler$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z:
  00058	90		 npad	 1
  00059	90		 npad	 1
  0005a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0005e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00061	8b 8a 4c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-180]
  00067	33 c8		 xor	 ecx, eax
  00069	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006e	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00071	33 c8		 xor	 ecx, eax
  00073	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00078	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z
  0007d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z ENDP ; NSound::LoadSoundInformationPiece
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 182  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 183  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 184  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 185  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 136  :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 186  :         _Throw_bad_array_new_length(); // add overflow
; 187  :     }
; 188  : 
; 189  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 136  :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 191  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 192  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 193  : 
; 194  : #ifdef _DEBUG
; 195  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 196  : #endif // defined(_DEBUG)
; 197  :     return _Ptr;
; 198  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
__Count$ = 12						; size = 4
$T1 = 12						; size = 4
??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>, COMDAT
; _this$ = ecx

; 847  :     _CONSTEXPR20 void _Construct(const _Char_or_ptr _Arg, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 848  :         auto& _My_data = _Mypair._Myval2;
; 849  :         _STL_INTERNAL_CHECK(!_My_data._Large_mode_engaged());
; 850  : 
; 851  :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 852  :             _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Char_or_ptr, _Elem>);
; 853  :         } else {
; 854  :             _STL_INTERNAL_STATIC_ASSERT(_Is_elem_cptr<_Char_or_ptr>::value);
; 855  :         }
; 856  : 
; 857  :         if (_Count > max_size()) {

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Count$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  00010	0f 87 95 00 00
	00		 ja	 $LN40@Construct

; 859  :         }
; 860  : 
; 861  :         auto& _Al       = _Getal();
; 862  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 863  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 864  : 
; 865  :         if (_Count <= _Small_string_capacity) {

  00016	83 fe 0f	 cmp	 esi, 15			; 0000000fH
  00019	77 21		 ja	 SHORT $LN3@Construct
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0001b	56		 push	 esi
  0001c	ff 75 08	 push	 DWORD PTR __Arg$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  0001f	89 73 10	 mov	 DWORD PTR [ebx+16], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00022	53		 push	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 867  :             _My_data._Myres  = _Small_string_capacity;

  00023	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0002a	e8 00 00 00 00	 call	 _memcpy
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00032	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0
  00036	5e		 pop	 esi

; 899  :         } else { // _Strat == _Construct_strategy::_From_string
; 900  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);
; 901  :         }
; 902  : 
; 903  :         _ASAN_STRING_CREATE(*this);
; 904  :         _Proxy._Release();
; 905  :     }

  00037	5b		 pop	 ebx
  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
$LN3@Construct:
  0003c	57		 push	 edi

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  0003d	8b fe		 mov	 edi, esi
  0003f	83 cf 0f	 or	 edi, 15			; 0000000fH
  00042	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00048	76 12		 jbe	 SHORT $LN9@Construct

; 2944 :             return _Max;

  0004a	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0004f	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0005a	eb 26		 jmp	 SHORT $LN38@Construct
$LN9@Construct:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0005c	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00061	3b f8		 cmp	 edi, eax
  00063	0f 42 f8	 cmovb	 edi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  00066	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  00069	85 c0		 test	 eax, eax
  0006b	74 18		 je	 SHORT $LN37@Construct
$LN23@Construct:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  0006d	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00072	72 08		 jb	 SHORT $LN24@Construct

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0007a	eb 06		 jmp	 SHORT $LN38@Construct
$LN24@Construct:

; 136  :         return ::operator new(_Bytes);

  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN38@Construct:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00082	83 c4 04	 add	 esp, 4
$LN37@Construct:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00085	56		 push	 esi
  00086	ff 75 08	 push	 DWORD PTR __Arg$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00089	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0008c	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0008d	89 03		 mov	 DWORD PTR [ebx], eax

; 890  : 
; 891  :         _My_data._Mysize = _Count;

  0008f	89 73 10	 mov	 DWORD PTR [ebx+16], esi

; 892  :         _My_data._Myres  = _New_capacity;

  00092	89 7b 14	 mov	 DWORD PTR [ebx+20], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00095	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  0009a	8b 45 0c	 mov	 eax, DWORD PTR $T1[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0009d	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000a0	5f		 pop	 edi
  000a1	c6 04 30 00	 mov	 BYTE PTR [eax+esi], 0
  000a5	5e		 pop	 esi

; 899  :         } else { // _Strat == _Construct_strategy::_From_string
; 900  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);
; 901  :         }
; 902  : 
; 903  :         _ASAN_STRING_CREATE(*this);
; 904  :         _Proxy._Release();
; 905  :     }

  000a6	5b		 pop	 ebx
  000a7	5d		 pop	 ebp
  000a8	c2 08 00	 ret	 8
$LN40@Construct:

; 858  :             _Xlen_string(); // result too long

  000ab	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN36@Construct:
  000b0	cc		 int	 3
??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__Old$1$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
$T1 = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1592 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 1593 :         // assign [_Ptr, _Ptr + _Count)
; 1594 :         if (_Count <= _Mypair._Myval2._Myres) {

  00005	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	57		 push	 edi
  0000c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000f	89 4d fc	 mov	 DWORD PTR __Old$1$[ebp], ecx
  00012	3b d9		 cmp	 ebx, ecx
  00014	77 28		 ja	 SHORT $LN2@assign

; 416  :         value_type* _Result = _Bx._Buf;

  00016	8b fe		 mov	 edi, esi

; 434  :         return _Myres > _Small_string_capacity;

  00018	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  0001b	76 02		 jbe	 SHORT $LN5@assign

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  0001d	8b 3e		 mov	 edi, DWORD PTR [esi]
$LN5@assign:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0001f	53		 push	 ebx
  00020	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1597 :             _Mypair._Myval2._Mysize = _Count;

  00023	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00026	57		 push	 edi
  00027	e8 00 00 00 00	 call	 _memmove
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1599 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0002f	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 1609 :             },
; 1610 :             _Ptr);
; 1611 :     }

  00033	8b c6		 mov	 eax, esi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
$LN2@assign:

; 2962 :         if (_New_size > max_size()) {

  0003e	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  00044	0f 87 c7 00 00
	00		 ja	 $LN87@assign

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  0004a	8b fb		 mov	 edi, ebx
  0004c	83 cf 0f	 or	 edi, 15			; 0000000fH
  0004f	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00055	76 12		 jbe	 SHORT $LN23@assign

; 2944 :             return _Max;

  00057	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0005c	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00067	eb 45		 jmp	 SHORT $LN85@assign
$LN23@assign:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2947 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00069	8b d1		 mov	 edx, ecx
  0006b	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00070	d1 ea		 shr	 edx, 1
  00072	2b c2		 sub	 eax, edx
  00074	3b c8		 cmp	 ecx, eax
  00076	76 12		 jbe	 SHORT $LN24@assign

; 2948 :             return _Max;

  00078	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0007d	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00088	eb 24		 jmp	 SHORT $LN85@assign
$LN24@assign:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0008a	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  0008d	3b f8		 cmp	 edi, eax
  0008f	0f 42 f8	 cmovb	 edi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  00092	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  00095	85 c0		 test	 eax, eax
  00097	74 18		 je	 SHORT $LN84@assign
$LN37@assign:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00099	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0009e	72 08		 jb	 SHORT $LN38@assign

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a0	50		 push	 eax
  000a1	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a6	eb 06		 jmp	 SHORT $LN85@assign
$LN38@assign:

; 136  :         return ::operator new(_Bytes);

  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN85@assign:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2973 :         _Mypair._Myval2._Mysize = _New_size;

  000ae	83 c4 04	 add	 esp, 4
$LN84@assign:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000b1	53		 push	 ebx
  000b2	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2973 :         _Mypair._Myval2._Mysize = _New_size;

  000b5	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000b8	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2973 :         _Mypair._Myval2._Mysize = _New_size;

  000b9	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 2974 :         _Mypair._Myval2._Myres  = _New_capacity;

  000bc	89 7e 14	 mov	 DWORD PTR [esi+20], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000bf	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1608 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000c4	8b 7d 0c	 mov	 edi, DWORD PTR $T1[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c7	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2976 :         if (_Old_capacity > _Small_string_capacity) {

  000ca	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]

; 1608 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000cd	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 2976 :         if (_Old_capacity > _Small_string_capacity) {

  000d1	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  000d4	76 29		 jbe	 SHORT $LN16@assign

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  000d6	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000d9	8b 06		 mov	 eax, DWORD PTR [esi]

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000db	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000e1	72 12		 jb	 SHORT $LN66@assign

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000e3	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000e6	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000e9	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000eb	83 c0 fc	 add	 eax, -4			; fffffffcH
  000ee	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000f1	77 19		 ja	 SHORT $LN63@assign

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000f3	8b c2		 mov	 eax, edx
$LN66@assign:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000f5	51		 push	 ecx
  000f6	50		 push	 eax
  000f7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000fc	83 c4 08	 add	 esp, 8
$LN16@assign:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1604 :         return _Reallocate_for(

  000ff	89 3e		 mov	 DWORD PTR [esi], edi

; 1609 :             },
; 1610 :             _Ptr);
; 1611 :     }

  00101	8b c6		 mov	 eax, esi
  00103	5f		 pop	 edi
  00104	5e		 pop	 esi
  00105	5b		 pop	 ebx
  00106	8b e5		 mov	 esp, ebp
  00108	5d		 pop	 ebp
  00109	c2 08 00	 ret	 8
$LN63@assign:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0010c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN87@assign:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2963 :             _Xlen_string(); // result too long

  00111	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN82@assign:
  00116	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__New_size$1$ = -16					; size = 4
tv518 = -16						; size = 4
__Old_size$1$ = -12					; size = 4
__Old$1$ = -8						; size = 4
$T1 = -4						; size = 4
tv508 = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
tv503 = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 1486 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 1487 :         // append [_Ptr, _Ptr + _Count)
; 1488 :         const size_type _Old_size = _Mypair._Myval2._Mysize;
; 1489 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00011	8b c2		 mov	 eax, edx
  00013	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00016	2b c1		 sub	 eax, ecx
  00018	89 4d f4	 mov	 DWORD PTR __Old_size$1$[ebp], ecx
  0001b	89 55 f8	 mov	 DWORD PTR __Old$1$[ebp], edx
  0001e	3b d8		 cmp	 ebx, eax
  00020	77 2e		 ja	 SHORT $LN2@append

; 1490 :             _ASAN_STRING_MODIFY(*this, _Old_size, _Old_size + _Count);
; 1491 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00022	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  00025	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 416  :         value_type* _Result = _Bx._Buf;

  00028	8b c7		 mov	 eax, edi

; 434  :         return _Myres > _Small_string_capacity;

  0002a	83 fa 0f	 cmp	 edx, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  0002d	76 02		 jbe	 SHORT $LN5@append

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  0002f	8b 07		 mov	 eax, DWORD PTR [edi]
$LN5@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00031	53		 push	 ebx
  00032	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1493 :             _Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

  00035	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 _memmove
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1494 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  00041	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 1507 :     }

  00045	8b c7		 mov	 eax, edi
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
$LN2@append:

; 2993 :         if (max_size() - _Old_size < _Size_increase) {

  00050	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00055	2b c1		 sub	 eax, ecx
  00057	3b c3		 cmp	 eax, ebx
  00059	0f 82 1d 01 00
	00		 jb	 $LN98@append

; 2995 :         }
; 2996 : 
; 2997 :         const size_type _New_size     = _Old_size + _Size_increase;

  0005f	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00062	8b f0		 mov	 esi, eax

; 2997 :         const size_type _New_size     = _Old_size + _Size_increase;

  00064	89 45 f0	 mov	 DWORD PTR __New_size$1$[ebp], eax

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00067	83 ce 0f	 or	 esi, 15			; 0000000fH
  0006a	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00070	76 12		 jbe	 SHORT $LN23@append

; 2944 :             return _Max;

  00072	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00077	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00082	eb 4b		 jmp	 SHORT $LN96@append
$LN23@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2947 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00084	8b c2		 mov	 eax, edx
  00086	d1 e8		 shr	 eax, 1
  00088	89 45 fc	 mov	 DWORD PTR tv508[ebp], eax
  0008b	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00090	2b 45 fc	 sub	 eax, DWORD PTR tv508[ebp]
  00093	3b d0		 cmp	 edx, eax
  00095	76 12		 jbe	 SHORT $LN24@append

; 2948 :             return _Max;

  00097	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0009c	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a7	eb 26		 jmp	 SHORT $LN96@append
$LN24@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000a9	8b 45 fc	 mov	 eax, DWORD PTR tv508[ebp]
  000ac	03 c2		 add	 eax, edx
  000ae	3b f0		 cmp	 esi, eax
  000b0	0f 42 f0	 cmovb	 esi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  000b3	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  000b6	85 c0		 test	 eax, eax
  000b8	74 1e		 je	 SHORT $LN95@append
$LN37@append:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  000ba	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000bf	72 08		 jb	 SHORT $LN38@append

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000c1	50		 push	 eax
  000c2	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000c7	eb 06		 jmp	 SHORT $LN96@append
$LN38@append:

; 136  :         return ::operator new(_Bytes);

  000c9	50		 push	 eax
  000ca	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN96@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3005 :         _My_data._Mysize      = _New_size;

  000cf	8b 55 f8	 mov	 edx, DWORD PTR __Old$1$[ebp]
  000d2	83 c4 04	 add	 esp, 4
  000d5	8b 4d f4	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
$LN95@append:
  000d8	8b 5d f0	 mov	 ebx, DWORD PTR __New_size$1$[ebp]
  000db	89 5f 10	 mov	 DWORD PTR [edi+16], ebx

; 3006 :         _My_data._Myres       = _New_capacity;
; 3007 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  000de	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  000e1	89 77 14	 mov	 DWORD PTR [edi+20], esi
  000e4	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
  000e7	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  000ea	89 75 f0	 mov	 DWORD PTR tv518[ebp], esi
  000ed	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]
  000f0	89 45 0c	 mov	 DWORD PTR tv503[ebp], eax

; 3008 :         if (_Old_capacity > _Small_string_capacity) {

  000f3	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
  000f6	51		 push	 ecx
  000f7	83 fa 0f	 cmp	 edx, 15			; 0000000fH
  000fa	76 56		 jbe	 SHORT $LN16@append

; 3009 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000fc	8b 37		 mov	 esi, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000fe	56		 push	 esi
  000ff	50		 push	 eax
  00100	e8 00 00 00 00	 call	 _memcpy
  00105	53		 push	 ebx
  00106	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00109	ff 75 f0	 push	 DWORD PTR tv518[ebp]
  0010c	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1504 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00111	8b 45 0c	 mov	 eax, DWORD PTR tv503[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00114	83 c4 18	 add	 esp, 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00117	8b 4d f8	 mov	 ecx, DWORD PTR __Old$1$[ebp]
  0011a	41		 inc	 ecx

; 1504 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0011b	c6 00 00	 mov	 BYTE PTR [eax], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0011e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00124	72 12		 jb	 SHORT $LN69@append

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00126	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00129	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0012c	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0012e	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00131	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00134	77 4b		 ja	 SHORT $LN66@append

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00136	8b f2		 mov	 esi, edx
$LN69@append:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00138	51		 push	 ecx
  00139	56		 push	 esi
  0013a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1498 :         return _Reallocate_grow_by(

  0013f	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00142	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1498 :         return _Reallocate_grow_by(

  00145	89 07		 mov	 DWORD PTR [edi], eax

; 1507 :     }

  00147	8b c7		 mov	 eax, edi
  00149	5f		 pop	 edi
  0014a	5e		 pop	 esi
  0014b	5b		 pop	 ebx
  0014c	8b e5		 mov	 esp, ebp
  0014e	5d		 pop	 ebp
  0014f	c2 08 00	 ret	 8
$LN16@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00152	57		 push	 edi
  00153	50		 push	 eax
  00154	e8 00 00 00 00	 call	 _memcpy
  00159	53		 push	 ebx
  0015a	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0015d	56		 push	 esi
  0015e	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1504 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00163	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00166	83 c4 18	 add	 esp, 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1504 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00169	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1498 :         return _Reallocate_grow_by(

  0016c	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
  0016f	89 07		 mov	 DWORD PTR [edi], eax

; 1507 :     }

  00171	8b c7		 mov	 eax, edi
  00173	5f		 pop	 edi
  00174	5e		 pop	 esi
  00175	5b		 pop	 ebx
  00176	8b e5		 mov	 esp, ebp
  00178	5d		 pop	 ebp
  00179	c2 08 00	 ret	 8
$LN98@append:

; 2994 :             _Xlen_string(); // result too long

  0017c	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN66@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00181	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN93@append:
  00186	cc		 int	 3
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 1358 :     _CONSTEXPR20 ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 434  :         return _Myres > _Small_string_capacity;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00009	76 27		 jbe	 SHORT $LN19@basic_stri
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0000d	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN30@basic_stri

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN27@basic_stri

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN30@basic_stri:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN19@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 1366 :     }

  00044	c3		 ret	 0
$LN27@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN39@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 512  :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 107  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 108  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN18@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN18@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 144  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 145  :     }

  00003	8b c1		 mov	 eax, ecx

; 66   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 67   :     {
; 68   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 144  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 145  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN13@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN8@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 96   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 97   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 92   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 73   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 75   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\stdio.h
;	COMDAT __snprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__snprintf PROC						; COMDAT

; 1947 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1392 :         int const _Result = __stdio_common_vsprintf(

  00003	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 01	 or	 ecx, 1
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1393 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1394 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1395 : 
; 1396 :         return _Result < 0 ? -1 : _Result;

  00025	83 c9 ff	 or	 ecx, -1
  00028	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 48 c1	 cmovs	 eax, ecx

; 1948 :         int _Result;
; 1949 :         va_list _ArgList;
; 1950 :         __crt_va_start(_ArgList, _Format);
; 1951 :         _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
; 1952 :         __crt_va_end(_ArgList);
; 1953 :         return _Result;
; 1954 :     }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
__snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\stdio.h
;	COMDAT _fprintf
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT

; 837  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 645  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR __Stream$[ebp]
  0000f	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00014	ff 70 04	 push	 DWORD PTR [eax+4]
  00017	ff 30		 push	 DWORD PTR [eax]
  00019	e8 00 00 00 00	 call	 ___stdio_common_vfprintf
  0001e	83 c4 18	 add	 esp, 24			; 00000018H

; 838  :         int _Result;
; 839  :         va_list _ArgList;
; 840  :         __crt_va_start(_ArgList, _Format);
; 841  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);
; 842  :         __crt_va_end(_ArgList);
; 843  :         return _Result;
; 844  :     }

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
