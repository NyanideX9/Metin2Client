; Listing generated by Microsoft (R) Optimizing Compiler Version 19.43.34808.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\MilesLib\Distribute\SoundManager.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?_Throw_tree_length_error@std@@YAXXZ		; std::_Throw_tree_length_error
PUBLIC	??1?$CSingleton@VCSoundManager@@@@UAE@XZ	; CSingleton<CSoundManager>::~CSingleton<CSoundManager>
PUBLIC	??_G?$CSingleton@VCSoundManager@@@@UAEPAXI@Z	; CSingleton<CSoundManager>::`scalar deleting destructor'
PUBLIC	??0CSoundManager@@QAE@XZ			; CSoundManager::CSoundManager
PUBLIC	??1CSoundManager@@UAE@XZ			; CSoundManager::~CSoundManager
PUBLIC	?Create@CSoundManager@@QAEHXZ			; CSoundManager::Create
PUBLIC	?Destroy@CSoundManager@@QAEXXZ			; CSoundManager::Destroy
PUBLIC	?SetPosition@CSoundManager@@QAEXMMM@Z		; CSoundManager::SetPosition
PUBLIC	?SetDirection@CSoundManager@@QAEXMMMMMM@Z	; CSoundManager::SetDirection
PUBLIC	?Update@CSoundManager@@QAEXXZ			; CSoundManager::Update
PUBLIC	?GetSoundScale@CSoundManager@@QAEMXZ		; CSoundManager::GetSoundScale
PUBLIC	?SetSoundScale@CSoundManager@@QAEXM@Z		; CSoundManager::SetSoundScale
PUBLIC	?SetAmbienceSoundScale@CSoundManager@@QAEXM@Z	; CSoundManager::SetAmbienceSoundScale
PUBLIC	?SetSoundVolume@CSoundManager@@QAEXM@Z		; CSoundManager::SetSoundVolume
PUBLIC	?SetSoundVolumeRatio@CSoundManager@@QAEXM@Z	; CSoundManager::SetSoundVolumeRatio
PUBLIC	?SetMusicVolume@CSoundManager@@QAEXM@Z		; CSoundManager::SetMusicVolume
PUBLIC	?SetSoundVolumeGrade@CSoundManager@@QAEXH@Z	; CSoundManager::SetSoundVolumeGrade
PUBLIC	?SaveVolume@CSoundManager@@QAEXXZ		; CSoundManager::SaveVolume
PUBLIC	?RestoreVolume@CSoundManager@@QAEXXZ		; CSoundManager::RestoreVolume
PUBLIC	?GetSoundVolume@CSoundManager@@QAEMXZ		; CSoundManager::GetSoundVolume
PUBLIC	?GetMusicVolume@CSoundManager@@QAEMXZ		; CSoundManager::GetMusicVolume
PUBLIC	?PlaySound2D@CSoundManager@@QAEXPBD@Z		; CSoundManager::PlaySound2D
PUBLIC	?PlaySound3D@CSoundManager@@QAEXMMMPBDH@Z	; CSoundManager::PlaySound3D
PUBLIC	?StopSound3D@CSoundManager@@QAEXH@Z		; CSoundManager::StopSound3D
PUBLIC	?PlayAmbienceSound3D@CSoundManager@@QAEHMMMPBDH@Z ; CSoundManager::PlayAmbienceSound3D
PUBLIC	?PlayCharacterSound3D@CSoundManager@@QAEXMMMPBDH@Z ; CSoundManager::PlayCharacterSound3D
PUBLIC	?SetSoundVolume3D@CSoundManager@@QAEXHM@Z	; CSoundManager::SetSoundVolume3D
PUBLIC	?StopAllSound3D@CSoundManager@@QAEXXZ		; CSoundManager::StopAllSound3D
PUBLIC	?PlayMusic@CSoundManager@@QAEXPBD@Z		; CSoundManager::PlayMusic
PUBLIC	?FadeInMusic@CSoundManager@@QAEXPBDM@Z		; CSoundManager::FadeInMusic
PUBLIC	?FadeOutMusic@CSoundManager@@QAEXPBDM@Z		; CSoundManager::FadeOutMusic
PUBLIC	?FadeLimitOutMusic@CSoundManager@@QAEXPBDMM@Z	; CSoundManager::FadeLimitOutMusic
PUBLIC	?FadeOutAllMusic@CSoundManager@@QAEXXZ		; CSoundManager::FadeOutAllMusic
PUBLIC	?FadeAll@CSoundManager@@QAEXXZ			; CSoundManager::FadeAll
PUBLIC	?UpdateSoundData@CSoundManager@@QAEXKPBV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z ; CSoundManager::UpdateSoundData
PUBLIC	?UpdateSoundData@CSoundManager@@QAEXMMMKPBV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z ; CSoundManager::UpdateSoundData
PUBLIC	?UpdateSoundInstance@CSoundManager@@QAEXMMMKPBV?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@H@Z ; CSoundManager::UpdateSoundInstance
PUBLIC	?UpdateSoundInstance@CSoundManager@@QAEXKPBV?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@@Z ; CSoundManager::UpdateSoundInstance
PUBLIC	?PlayMusic@CSoundManager@@IAEXKPBDMM@Z		; CSoundManager::PlayMusic
PUBLIC	?StopMusic@CSoundManager@@IAEXK@Z		; CSoundManager::StopMusic
PUBLIC	?GetMusicIndex@CSoundManager@@IAEHPBDPAK@Z	; CSoundManager::GetMusicIndex
PUBLIC	?__ConvertGradeVolumeToApplyVolume@CSoundManager@@IAEMH@Z ; CSoundManager::__ConvertGradeVolumeToApplyVolume
PUBLIC	?__ConvertRatioVolumeToApplyVolume@CSoundManager@@IAEMM@Z ; CSoundManager::__ConvertRatioVolumeToApplyVolume
PUBLIC	?__SetMusicVolume@CSoundManager@@IAEXM@Z	; CSoundManager::__SetMusicVolume
PUBLIC	?GetSoundInstance2D@CSoundManager@@IAEHPBDPAPAVISoundInstance@@@Z ; CSoundManager::GetSoundInstance2D
PUBLIC	?GetSoundInstance3D@CSoundManager@@IAEHPBDPAPAVISoundInstance@@@Z ; CSoundManager::GetSoundInstance3D
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@2@$0A@@std@@@std@@QAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,float,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> >,0> >::erase
PUBLIC	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >::_Lrotate
PUBLIC	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >::_Rrotate
PUBLIC	?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >::_Extract
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >::_Insert_node
PUBLIC	??_GCSoundManager@@UAEPAXI@Z			; CSoundManager::`scalar deleting destructor'
PUBLIC	?_Xrange@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@CAXXZ ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::_Xrange
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >,std::_Iterator_base0>::operator++
PUBLIC	??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >
PUBLIC	??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *>::_Freenode<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >
PUBLIC	??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,float,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >::destroy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >
PUBLIC	??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >
PUBLIC	??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_C@_0BB@GCADKGJO@map?1set?5too?5long@		; `string'
PUBLIC	?ms_singleton@?$CSingleton@VCSoundManager@@@@0PAVCSoundManager@@A ; CSingleton<CSoundManager>::ms_singleton
PUBLIC	??_7?$CSingleton@VCSoundManager@@@@6B@		; CSingleton<CSoundManager>::`vftable'
PUBLIC	?ms_SoundManager2D@CSoundManager@@1VCSoundManager2D@@A ; CSoundManager::ms_SoundManager2D
PUBLIC	?ms_SoundManager3D@CSoundManager@@1VCSoundManager3D@@A ; CSoundManager::ms_SoundManager3D
PUBLIC	?ms_SoundManagerStream@CSoundManager@@1VCSoundManagerStream@@A ; CSoundManager::ms_SoundManagerStream
PUBLIC	??_7CSoundManager@@6B@				; CSoundManager::`vftable'
PUBLIC	?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
PUBLIC	??_C@_0DG@IHJECCAM@CSoundManager?3?3Create?5?9?5Sound2D@ ; `string'
PUBLIC	??_C@_0DK@HNOILEHO@CSoundManager?3?3Create?5?9?5SoundSt@ ; `string'
PUBLIC	??_C@_0DG@CCBPLCAC@CSoundManager?3?3Create?5?9?5Sound3D@ ; `string'
PUBLIC	??_C@_0CD@IKOINIJC@FadeOutMusic?3?5?$CFs?5?9?5ERROR?5NOT?5EX@ ; `string'
PUBLIC	??_C@_0CG@CAGDPBLM@FadeOutMusic?3?5?$CFs?5?9?5ERROR?5OUT?5OF@ ; `string'
PUBLIC	??_C@_0DM@BCCLJDHL@CSoundManager?3?3PlayMusic?5?9?5Fail@ ; `string'
PUBLIC	??_C@_0EC@EPLOEFBK@CSoundManager?3?3PlayMusic?5?9?5Ther@ ; `string'
PUBLIC	??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@	; `string'
PUBLIC	??_R4CSoundManager@@6B@				; CSoundManager::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCSoundManager@@@8			; CSoundManager `RTTI Type Descriptor'
PUBLIC	??_R3CSoundManager@@8				; CSoundManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSoundManager@@8				; CSoundManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CSoundManager@@8			; CSoundManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$CSingleton@VCSoundManager@@@@8	; CSingleton<CSoundManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$CSingleton@VCSoundManager@@@@@8	; CSingleton<CSoundManager> `RTTI Type Descriptor'
PUBLIC	??_R3?$CSingleton@VCSoundManager@@@@8		; CSingleton<CSoundManager>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CSingleton@VCSoundManager@@@@8		; CSingleton<CSoundManager>::`RTTI Base Class Array'
PUBLIC	??_R4?$CSingleton@VCSoundManager@@@@6B@		; CSingleton<CSoundManager>::`RTTI Complete Object Locator'
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e99999a
PUBLIC	__real@3f800000
PUBLIC	__real@4024000000000000
PUBLIC	__real@40a00000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	?GetCaseCRC32@@YAKPBDI@Z:PROC			; GetCaseCRC32
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?StringPath@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; StringPath
EXTRN	?fMIN@@YAMMM@Z:PROC				; fMIN
EXTRN	?fMAX@@YAMMM@Z:PROC				; fMAX
EXTRN	?Tracen@@YAXPBD@Z:PROC				; Tracen
EXTRN	?Tracenf@@YAXPBDZZ:PROC				; Tracenf
EXTRN	?TraceError@@YAXPBDZZ:PROC			; TraceError
EXTRN	??0CSoundManagerStream@@QAE@XZ:PROC		; CSoundManagerStream::CSoundManagerStream
EXTRN	??1CSoundManagerStream@@UAE@XZ:PROC		; CSoundManagerStream::~CSoundManagerStream
EXTRN	?Initialize@CSoundManagerStream@@QAE_NXZ:PROC	; CSoundManagerStream::Initialize
EXTRN	?Destroy@CSoundManagerStream@@QAEXXZ:PROC	; CSoundManagerStream::Destroy
EXTRN	?SetInstance@CSoundManagerStream@@QAE_NKPBD@Z:PROC ; CSoundManagerStream::SetInstance
EXTRN	?GetInstance@CSoundManagerStream@@QAEPAVCSoundInstanceStream@@K@Z:PROC ; CSoundManagerStream::GetInstance
EXTRN	??0CSoundManager2D@@QAE@XZ:PROC			; CSoundManager2D::CSoundManager2D
EXTRN	??1CSoundManager2D@@UAE@XZ:PROC			; CSoundManager2D::~CSoundManager2D
EXTRN	?Initialize@CSoundManager2D@@QAE_NXZ:PROC	; CSoundManager2D::Initialize
EXTRN	?Destroy@CSoundManager2D@@QAEXXZ:PROC		; CSoundManager2D::Destroy
EXTRN	?GetInstance@CSoundManager2D@@QAEPAVISoundInstance@@PBD@Z:PROC ; CSoundManager2D::GetInstance
EXTRN	??0CSoundManager3D@@QAE@XZ:PROC			; CSoundManager3D::CSoundManager3D
EXTRN	??1CSoundManager3D@@UAE@XZ:PROC			; CSoundManager3D::~CSoundManager3D
EXTRN	?Initialize@CSoundManager3D@@QAE_NXZ:PROC	; CSoundManager3D::Initialize
EXTRN	?Destroy@CSoundManager3D@@QAEXXZ:PROC		; CSoundManager3D::Destroy
EXTRN	?SetInstance@CSoundManager3D@@QAEHPBD@Z:PROC	; CSoundManager3D::SetInstance
EXTRN	?GetInstance@CSoundManager3D@@QAEPAVISoundInstance@@K@Z:PROC ; CSoundManager3D::GetInstance
EXTRN	?SetListenerDirection@CSoundManager3D@@QAEXMMMMMM@Z:PROC ; CSoundManager3D::SetListenerDirection
EXTRN	?SetListenerPosition@CSoundManager3D@@QAEXMMM@Z:PROC ; CSoundManager3D::SetListenerPosition
EXTRN	??_E?$CSingleton@VCSoundManager@@@@UAEPAXI@Z:PROC ; CSingleton<CSoundManager>::`vector deleting destructor'
EXTRN	??_ECSoundManager@@UAEPAXI@Z:PROC		; CSoundManager::`vector deleting destructor'
EXTRN	?GetCurrentSecond@CTimer@@QAEMXZ:PROC		; CTimer::GetCurrentSecond
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__libm_sse2_pow_precise:PROC
EXTRN	_memcpy:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCSoundManager@@@@0PAVCSoundManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCSoundManager@@@@0PAVCSoundManager@@A DD 01H DUP (?) ; CSingleton<CSoundManager>::ms_singleton
_BSS	ENDS
_BSS	SEGMENT
?ms_SoundManager2D@CSoundManager@@1VCSoundManager2D@@A DB 034H DUP (?) ; CSoundManager::ms_SoundManager2D
?ms_SoundManager3D@CSoundManager@@1VCSoundManager3D@@A DB 01acH DUP (?) ; CSoundManager::ms_SoundManager3D
?ms_SoundManagerStream@CSoundManager@@1VCSoundManagerStream@@A DB 01cH DUP (?) ; CSoundManager::ms_SoundManagerStream
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A DD 01H DUP (?) ; CSingleton<CTimer>::ms_singleton
_BSS	ENDS
CRT$XCU	SEGMENT
??ms_SoundManager2D$initializer$@CSoundManager@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_SoundManager2D@CSoundManager@@1VCSoundManager2D@@A@@YAXXZ ; ??ms_SoundManager2D$initializer$@CSoundManager@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT ??_R4?$CSingleton@VCSoundManager@@@@6B@
rdata$r	SEGMENT
??_R4?$CSingleton@VCSoundManager@@@@6B@ DD 00H		; CSingleton<CSoundManager>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CSingleton@VCSoundManager@@@@@8
	DD	FLAT:??_R3?$CSingleton@VCSoundManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CSingleton@VCSoundManager@@@@8
rdata$r	SEGMENT
??_R2?$CSingleton@VCSoundManager@@@@8 DD FLAT:??_R1A@?0A@EA@?$CSingleton@VCSoundManager@@@@8 ; CSingleton<CSoundManager>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CSingleton@VCSoundManager@@@@8
rdata$r	SEGMENT
??_R3?$CSingleton@VCSoundManager@@@@8 DD 00H		; CSingleton<CSoundManager>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CSingleton@VCSoundManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CSingleton@VCSoundManager@@@@@8
data$rs	SEGMENT
??_R0?AV?$CSingleton@VCSoundManager@@@@@8 DD FLAT:??_7type_info@@6B@ ; CSingleton<CSoundManager> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CSingleton@VCSoundManager@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CSingleton@VCSoundManager@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CSingleton@VCSoundManager@@@@8 DD FLAT:??_R0?AV?$CSingleton@VCSoundManager@@@@@8 ; CSingleton<CSoundManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CSingleton@VCSoundManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CSoundManager@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CSoundManager@@8 DD FLAT:??_R0?AVCSoundManager@@@8 ; CSoundManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSoundManager@@8
rdata$r	ENDS
;	COMDAT ??_R2CSoundManager@@8
rdata$r	SEGMENT
??_R2CSoundManager@@8 DD FLAT:??_R1A@?0A@EA@CSoundManager@@8 ; CSoundManager::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$CSingleton@VCSoundManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R3CSoundManager@@8
rdata$r	SEGMENT
??_R3CSoundManager@@8 DD 00H				; CSoundManager::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CSoundManager@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSoundManager@@@8
data$rs	SEGMENT
??_R0?AVCSoundManager@@@8 DD FLAT:??_7type_info@@6B@	; CSoundManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSoundManager@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CSoundManager@@6B@
rdata$r	SEGMENT
??_R4CSoundManager@@6B@ DD 00H				; CSoundManager::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCSoundManager@@@8
	DD	FLAT:??_R3CSoundManager@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@
CONST	SEGMENT
??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@ DB 'invalid vector subscri'
	DB	'pt', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@EPLOEFBK@CSoundManager?3?3PlayMusic?5?9?5Ther@
CONST	SEGMENT
??_C@_0EC@EPLOEFBK@CSoundManager?3?3PlayMusic?5?9?5Ther@ DB 'CSoundManage'
	DB	'r::PlayMusic - There is no stream sound instance : %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@BCCLJDHL@CSoundManager?3?3PlayMusic?5?9?5Fail@
CONST	SEGMENT
??_C@_0DM@BCCLJDHL@CSoundManager?3?3PlayMusic?5?9?5Fail@ DB 'CSoundManage'
	DB	'r::PlayMusic - Failed to load stream sound : %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@CAGDPBLM@FadeOutMusic?3?5?$CFs?5?9?5ERROR?5OUT?5OF@
CONST	SEGMENT
??_C@_0CG@CAGDPBLM@FadeOutMusic?3?5?$CFs?5?9?5ERROR?5OUT?5OF@ DB 'FadeOut'
	DB	'Music: %s - ERROR OUT OF RANGE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@IKOINIJC@FadeOutMusic?3?5?$CFs?5?9?5ERROR?5NOT?5EX@
CONST	SEGMENT
??_C@_0CD@IKOINIJC@FadeOutMusic?3?5?$CFs?5?9?5ERROR?5NOT?5EX@ DB 'FadeOut'
	DB	'Music: %s - ERROR NOT EXIST', 00H		; `string'
CONST	ENDS
;	COMDAT ?s_fLimitDistance@?6??PlayCharacterSound3D@CSoundManager@@QAEXMMMPBDH@Z@4MA
_DATA	SEGMENT
?s_fLimitDistance@?6??PlayCharacterSound3D@CSoundManager@@QAEXMMMPBDH@Z@4MA DD 04bbebc20r ; 2.5e+07 ; `CSoundManager::PlayCharacterSound3D'::`7'::s_fLimitDistance
_DATA	ENDS
;	COMDAT ??_C@_0DG@CCBPLCAC@CSoundManager?3?3Create?5?9?5Sound3D@
CONST	SEGMENT
??_C@_0DG@CCBPLCAC@CSoundManager?3?3Create?5?9?5Sound3D@ DB 'CSoundManage'
	DB	'r::Create - Sound3D::Initialize - FAILURE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@HNOILEHO@CSoundManager?3?3Create?5?9?5SoundSt@
CONST	SEGMENT
??_C@_0DK@HNOILEHO@CSoundManager?3?3Create?5?9?5SoundSt@ DB 'CSoundManage'
	DB	'r::Create - SoundStream::Initialize - FAILURE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@IHJECCAM@CSoundManager?3?3Create?5?9?5Sound2D@
CONST	SEGMENT
??_C@_0DG@IHJECCAM@CSoundManager?3?3Create?5?9?5Sound2D@ DB 'CSoundManage'
	DB	'r::Create - Sound2D::Initialize - FAILURE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7CSoundManager@@6B@
CONST	SEGMENT
??_7CSoundManager@@6B@ DD FLAT:??_R4CSoundManager@@6B@	; CSoundManager::`vftable'
	DD	FLAT:??_ECSoundManager@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CSingleton@VCSoundManager@@@@6B@
CONST	SEGMENT
??_7?$CSingleton@VCSoundManager@@@@6B@ DD FLAT:??_R4?$CSingleton@VCSoundManager@@@@6B@ ; CSingleton<CSoundManager>::`vftable'
	DD	FLAT:??_E?$CSingleton@VCSoundManager@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
CONST	SEGMENT
??_C@_0BB@GCADKGJO@map?1set?5too?5long@ DB 'map/set too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0AAPBDM@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@1@AAPBD$$QAM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0AAPBDM@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@1@AAPBD$$QAM@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0AAPBDM@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@1@AAPBD$$QAM@Z$0
__ehfuncinfo$??$?0AAPBDM@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@1@AAPBD$$QAM@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$?0AAPBDM@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@1@AAPBD$$QAM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@AAPBDM@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@_N@1@AAPBD$$QAM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@AAPBDM@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@_N@1@AAPBD$$QAM@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@AAPBDM@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@_N@1@AAPBD$$QAM@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@AAPBDM@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@_N@1@AAPBD$$QAM@Z$0
__ehfuncinfo$??$_Emplace@AAPBDM@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@_N@1@AAPBD$$QAM@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Emplace@AAPBDM@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@_N@1@AAPBD$$QAM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$emplace@AAPBDM@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@@std@@_N@1@AAPBD$$QAM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@AAPBDM@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@@std@@_N@1@AAPBD$$QAM@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@AAPBDM@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@@std@@_N@1@AAPBD$$QAM@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@AAPBDM@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@@std@@_N@1@AAPBD$$QAM@Z$0
__ehfuncinfo$??$emplace@AAPBDM@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@@std@@_N@1@AAPBD$$QAM@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$emplace@AAPBDM@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@@std@@_N@1@AAPBD$$QAM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetMusicIndex@CSoundManager@@IAEHPBDPAK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetMusicIndex@CSoundManager@@IAEHPBDPAK@Z$0
__ehfuncinfo$?GetMusicIndex@CSoundManager@@IAEHPBDPAK@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetMusicIndex@CSoundManager@@IAEHPBDPAK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?PlayMusic@CSoundManager@@IAEXKPBDMM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PlayMusic@CSoundManager@@IAEXKPBDMM@Z$0
__ehfuncinfo$?PlayMusic@CSoundManager@@IAEXKPBDMM@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PlayMusic@CSoundManager@@IAEXKPBDMM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?PlayCharacterSound3D@CSoundManager@@QAEXMMMPBDH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PlayCharacterSound3D@CSoundManager@@QAEXMMMPBDH@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?PlayCharacterSound3D@CSoundManager@@QAEXMMMPBDH@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?PlayCharacterSound3D@CSoundManager@@QAEXMMMPBDH@Z$2
__ehfuncinfo$?PlayCharacterSound3D@CSoundManager@@QAEXMMMPBDH@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?PlayCharacterSound3D@CSoundManager@@QAEXMMMPBDH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CSoundManager@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CSoundManager@@QAE@XZ$0
__ehfuncinfo$??0CSoundManager@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CSoundManager@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
CRT$XCU	SEGMENT
??ms_SoundManager3D$initializer$@CSoundManager@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_SoundManager3D@CSoundManager@@1VCSoundManager3D@@A@@YAXXZ ; ??ms_SoundManager3D$initializer$@CSoundManager@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
CRT$XCU	SEGMENT
??ms_SoundManagerStream$initializer$@CSoundManager@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_SoundManagerStream@CSoundManager@@1VCSoundManagerStream@@A@@YAXXZ ; ??ms_SoundManagerStream$initializer$@CSoundManager@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >, COMDAT
; _this$ = ecx

; 831  :     ~_Tree_temp_node() {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 832  :         if (this->_Ptr) {

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 0e		 je	 SHORT $LN2@Tree_temp_

; 833  :             _Destroy_in_place(this->_Ptr->_Left);
; 834  :             _Destroy_in_place(this->_Ptr->_Parent);
; 835  :             _Destroy_in_place(this->_Ptr->_Right);
; 836  :             _Alnode_traits::destroy(this->_Al, _STD addressof(this->_Ptr->_Myval));

  0000a	83 c0 10	 add	 eax, 16			; 00000010H
  0000d	50		 push	 eax
  0000e	ff 36		 push	 DWORD PTR [esi]
  00010	e8 00 00 00 00	 call	 ??$destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >::destroy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> >
  00015	83 c4 08	 add	 esp, 8
$LN2@Tree_temp_:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1168 :         if (_Ptr) {

  00018	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001b	5e		 pop	 esi
  0001c	85 c0		 test	 eax, eax
  0001e	74 0b		 je	 SHORT $LN19@Tree_temp_

; 289  :         ::operator delete(_Ptr, _Bytes);

  00020	6a 2c		 push	 44			; 0000002cH
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00028	83 c4 08	 add	 esp, 8
$LN19@Tree_temp_:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 838  :     }

  0002b	c3		 ret	 0
??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >, COMDAT
; _this$ = ecx

; 1168 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN13@Tree_temp_

; 289  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 2c		 push	 44			; 0000002cH
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN13@Tree_temp_:
  00012	c3		 ret	 0
??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >, COMDAT
; _this$ = ecx

; 1168 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN10@Alloc_cons

; 289  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 2c		 push	 44			; 0000002cH
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN10@Alloc_cons:

; 1169 :             _Al.deallocate(_Ptr, 1);
; 1170 :         }
; 1171 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >::destroy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> >, COMDAT

; 737  :     static _CONSTEXPR20 void destroy(_Alloc&, _Uty* const _Ptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Ptr$[ebp]
  00007	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000a	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0000d	76 27		 jbe	 SHORT $LN32@destroy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00011	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00012	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00018	72 12		 jb	 SHORT $LN43@destroy

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001a	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001d	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00020	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00022	83 c0 fc	 add	 eax, -4			; fffffffcH
  00025	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00028	77 20		 ja	 SHORT $LN40@destroy

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002a	8b c2		 mov	 eax, edx
$LN43@destroy:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0002c	51		 push	 ecx
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00033	83 c4 08	 add	 esp, 8
$LN32@destroy:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00036	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  0003d	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00044	c6 06 00	 mov	 BYTE PTR [esi], 0
  00047	5e		 pop	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 743  :     }

  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
$LN40@destroy:

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN55@destroy:
  0004f	cc		 int	 3
??$destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >::destroy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,float,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 1618 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1619 :         const auto _Scary = _Get_scary();
; 1620 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  0000d	89 37		 mov	 DWORD PTR [edi], esi

; 1621 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1622 :         while (!_Trynode->_Isnil) {

  0000f	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00013	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  0001a	89 47 08	 mov	 DWORD PTR [edi+8], eax
  0001d	75 32		 jne	 SHORT $LN13@Find_lower
  0001f	53		 push	 ebx
  00020	8b 5d 0c	 mov	 ebx, DWORD PTR __Keyval$[ebp]
$LL2@Find_lower:

; 1624 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00023	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  00026	89 37		 mov	 DWORD PTR [edi], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00028	53		 push	 ebx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  0002f	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1624 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00032	84 c0		 test	 al, al
  00034	74 07		 je	 SHORT $LN4@Find_lower

; 1625 :                 _Result._Location._Child = _Tree_child::_Right;
; 1626 :                 _Trynode                 = _Trynode->_Right;

  00036	8b 76 08	 mov	 esi, DWORD PTR [esi+8]
  00039	33 c0		 xor	 eax, eax

; 1627 :             } else {

  0003b	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1628 :                 _Result._Location._Child = _Tree_child::_Left;
; 1629 :                 _Result._Bound           = _Trynode;

  0003d	89 77 08	 mov	 DWORD PTR [edi+8], esi

; 1630 :                 _Trynode                 = _Trynode->_Left;

  00040	b8 01 00 00 00	 mov	 eax, 1
  00045	8b 36		 mov	 esi, DWORD PTR [esi]
$LN5@Find_lower:

; 1621 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1622 :         while (!_Trynode->_Isnil) {

  00047	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0004a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0004e	74 d3		 je	 SHORT $LL2@Find_lower
  00050	5b		 pop	 ebx
$LN13@Find_lower:

; 1631 :             }
; 1632 :         }
; 1633 : 
; 1634 :         return _Result;
; 1635 :     }

  00051	8b c7		 mov	 eax, edi
  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5d		 pop	 ebp
  00056	c2 08 00	 ret	 8
??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,float,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@PAU01@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@PAU01@@Z PROC ; std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *>::_Freenode<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >, COMDAT

; 379  :     static void _Freenode(_Alloc& _Al, _Nodeptr _Ptr) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 380  :         static_assert(is_same_v<typename _Alloc::value_type, _Tree_node>, "Bad _Freenode call");
; 381  :         allocator_traits<_Alloc>::destroy(_Al, _STD addressof(_Ptr->_Myval));

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Ptr$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00007	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  0000a	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0000d	76 28		 jbe	 SHORT $LN35@Freenode
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00012	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00013	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00019	72 12		 jb	 SHORT $LN46@Freenode

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001b	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001e	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00021	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00023	83 c0 fc	 add	 eax, -4			; fffffffcH
  00026	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00029	77 2c		 ja	 SHORT $LN43@Freenode

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002b	8b c2		 mov	 eax, edx
$LN46@Freenode:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0002d	51		 push	 ecx
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00034	83 c4 08	 add	 esp, 8
$LN35@Freenode:
  00037	6a 2c		 push	 44			; 0000002cH
  00039	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  0003a	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00041	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00048	c6 46 10 00	 mov	 BYTE PTR [esi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0004c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00051	83 c4 08	 add	 esp, 8
  00054	5e		 pop	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 383  :     }

  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
$LN43@Freenode:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00057	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN82@Freenode:
  0005c	cc		 int	 3
??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@PAU01@@Z ENDP ; std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *>::_Freenode<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@1@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >, COMDAT
; _this$ = ecx

; 757  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	57		 push	 edi

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 7d 0c	 mov	 edi, DWORD PTR __Rootnode$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000d	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00011	75 6e		 jne	 SHORT $LN90@Erase_tree
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR __Al$[ebp]
  00017	56		 push	 esi
$LL2@Erase_tree:

; 759  :             _Erase_tree(_Al, _Rootnode->_Right);

  00018	ff 77 08	 push	 DWORD PTR [edi+8]
  0001b	8b c8		 mov	 ecx, eax
  0001d	53		 push	 ebx
  0001e	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00023	8b f7		 mov	 esi, edi

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  00025	8b 3f		 mov	 edi, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00027	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  0002a	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0002d	76 28		 jbe	 SHORT $LN43@Erase_tree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00032	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00033	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00039	72 12		 jb	 SHORT $LN54@Erase_tree

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0003b	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0003e	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00041	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00043	83 c0 fc	 add	 eax, -4			; fffffffcH
  00046	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00049	77 3d		 ja	 SHORT $LN51@Erase_tree

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0004b	8b c2		 mov	 eax, edx
$LN54@Erase_tree:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0004d	51		 push	 ecx
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00054	83 c4 08	 add	 esp, 8
$LN43@Erase_tree:
  00057	6a 2c		 push	 44			; 0000002cH
  00059	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  0005a	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00061	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00068	c6 46 10 00	 mov	 BYTE PTR [esi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0006c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00071	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00074	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00078	75 05		 jne	 SHORT $LN99@Erase_tree
  0007a	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  0007d	eb 99		 jmp	 SHORT $LL2@Erase_tree
$LN99@Erase_tree:
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx
$LN90@Erase_tree:
  00081	5f		 pop	 edi

; 762  :     }

  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
$LN51@Erase_tree:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00088	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN100@Erase_tree:
  0008d	cc		 int	 3
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z PROC ; std::operator<<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 3271 :     const basic_string<_Elem, _Traits, _Alloc>& _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 425  :         const value_type* _Result = _Bx._Buf;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b c8		 mov	 ecx, eax

; 434  :         return _Myres > _Small_string_capacity;

  00008	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  0000c	76 02		 jbe	 SHORT $LN8@operator

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0000e	8b 08		 mov	 ecx, DWORD PTR [eax]
$LN8@operator:
  00010	53		 push	 ebx
  00011	56		 push	 esi

; 425  :         const value_type* _Result = _Bx._Buf;

  00012	8b 75 08	 mov	 esi, DWORD PTR __Left$[ebp]
  00015	8b d6		 mov	 edx, esi
  00017	57		 push	 edi

; 434  :         return _Myres > _Small_string_capacity;

  00018	83 7e 14 0f	 cmp	 DWORD PTR [esi+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  0001c	76 02		 jbe	 SHORT $LN15@operator

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0001e	8b 16		 mov	 edx, DWORD PTR [esi]
$LN15@operator:

; 2854 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  00020	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  00023	8b f3		 mov	 esi, ebx
  00025	8b 78 10	 mov	 edi, DWORD PTR [eax+16]
  00028	3b fb		 cmp	 edi, ebx
  0002a	0f 42 f7	 cmovb	 esi, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 413  :         return _CSTD memcmp(_First1, _First2, _Count);

  0002d	83 ee 04	 sub	 esi, 4
  00030	72 11		 jb	 SHORT $LN35@operator
$LL36@operator:
  00032	8b 02		 mov	 eax, DWORD PTR [edx]
  00034	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00036	75 10		 jne	 SHORT $LN34@operator
  00038	83 c2 04	 add	 edx, 4
  0003b	83 c1 04	 add	 ecx, 4
  0003e	83 ee 04	 sub	 esi, 4
  00041	73 ef		 jae	 SHORT $LL36@operator
$LN35@operator:
  00043	83 fe fc	 cmp	 esi, -4			; fffffffcH
  00046	74 34		 je	 SHORT $LN33@operator
$LN34@operator:
  00048	8a 02		 mov	 al, BYTE PTR [edx]
  0004a	3a 01		 cmp	 al, BYTE PTR [ecx]
  0004c	75 27		 jne	 SHORT $LN37@operator
  0004e	83 fe fd	 cmp	 esi, -3			; fffffffdH
  00051	74 29		 je	 SHORT $LN33@operator
  00053	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  00056	3a 41 01	 cmp	 al, BYTE PTR [ecx+1]
  00059	75 1a		 jne	 SHORT $LN37@operator
  0005b	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0005e	74 1c		 je	 SHORT $LN33@operator
  00060	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  00063	3a 41 02	 cmp	 al, BYTE PTR [ecx+2]
  00066	75 0d		 jne	 SHORT $LN37@operator
  00068	83 fe ff	 cmp	 esi, -1
  0006b	74 0f		 je	 SHORT $LN33@operator
  0006d	8a 42 03	 mov	 al, BYTE PTR [edx+3]
  00070	3a 41 03	 cmp	 al, BYTE PTR [ecx+3]
  00073	74 07		 je	 SHORT $LN33@operator
$LN37@operator:
  00075	1b c0		 sbb	 eax, eax
  00077	83 c8 01	 or	 eax, 1
  0007a	eb 02		 jmp	 SHORT $LN38@operator
$LN33@operator:
  0007c	33 c0		 xor	 eax, eax
$LN38@operator:

; 595  :     if (_Ans != 0) {

  0007e	85 c0		 test	 eax, eax
  00080	75 13		 jne	 SHORT $LN24@operator

; 596  :         return _Ans;
; 597  :     }
; 598  : 
; 599  :     if (_Left_size < _Right_size) {

  00082	3b fb		 cmp	 edi, ebx
  00084	76 0b		 jbe	 SHORT $LN51@operator
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3272 :     return _Left.compare(_Right) < 0;

  00086	5f		 pop	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 600  :         return -1;

  00087	83 c8 ff	 or	 eax, -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3272 :     return _Left.compare(_Right) < 0;

  0008a	5e		 pop	 esi
  0008b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0008e	5b		 pop	 ebx

; 3273 : }

  0008f	5d		 pop	 ebp
  00090	c3		 ret	 0
$LN51@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 603  :     if (_Left_size > _Right_size) {

  00091	1b c0		 sbb	 eax, eax
  00093	f7 d8		 neg	 eax
$LN24@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3272 :     return _Left.compare(_Right) < 0;

  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0009a	5b		 pop	 ebx

; 3273 : }

  0009b	5d		 pop	 ebp
  0009c	c3		 ret	 0
??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ENDP ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >,std::_Iterator_base0>::operator++, COMDAT
; _this$ = ecx

; 49   :     _Tree_unchecked_const_iterator& operator++() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 50   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  00004	8b 16		 mov	 edx, DWORD PTR [esi]
  00006	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  00009	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0000d	74 22		 je	 SHORT $LN4@operator

; 51   :             _Nodeptr _Pnode;
; 52   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  0000f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00012	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00016	75 12		 jne	 SHORT $LN21@operator
$LL2@operator:
  00018	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0001b	75 0d		 jne	 SHORT $LN21@operator

; 53   :                 _Ptr = _Pnode; // ==> parent while right subtree

  0001d	89 06		 mov	 DWORD PTR [esi], eax
  0001f	8b d0		 mov	 edx, eax
  00021	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00024	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00028	74 ee		 je	 SHORT $LL2@operator
$LN21@operator:

; 54   :             }
; 55   : 
; 56   :             _Ptr = _Pnode; // ==> parent (head if end())
; 57   :         } else {
; 58   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree
; 59   :         }
; 60   : 
; 61   :         return *this;

  0002a	89 06		 mov	 DWORD PTR [esi], eax

; 62   :     }

  0002c	8b c6		 mov	 eax, esi
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	c3		 ret	 0
$LN4@operator:

; 466  :         while (!_Pnode->_Left->_Isnil) {

  00031	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00033	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00037	75 13		 jne	 SHORT $LN10@operator
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL9@operator:
  00040	8b 01		 mov	 eax, DWORD PTR [ecx]

; 467  :             _Pnode = _Pnode->_Left;

  00042	8b f9		 mov	 edi, ecx
  00044	8b c8		 mov	 ecx, eax
  00046	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004a	74 f4		 je	 SHORT $LL9@operator
$LN10@operator:

; 54   :             }
; 55   : 
; 56   :             _Ptr = _Pnode; // ==> parent (head if end())
; 57   :         } else {
; 58   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree
; 59   :         }
; 60   : 
; 61   :         return *this;

  0004c	89 3e		 mov	 DWORD PTR [esi], edi

; 62   :     }

  0004e	8b c6		 mov	 eax, esi
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	c3		 ret	 0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >,std::_Iterator_base0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xrange@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xrange@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@CAXXZ PROC ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::_Xrange, COMDAT

; 2173 :         _Xout_of_range("invalid vector subscript");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN3@Xrange:
  0000a	cc		 int	 3
?_Xrange@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@CAXXZ ENDP ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::_Xrange
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_SoundManagerStream@CSoundManager@@1VCSoundManagerStream@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_SoundManagerStream@CSoundManager@@1VCSoundManagerStream@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CSoundManager::ms_SoundManagerStream'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManagerStream@CSoundManager@@1VCSoundManagerStream@@A ; CSoundManager::ms_SoundManagerStream
  00005	e9 00 00 00 00	 jmp	 ??1CSoundManagerStream@@UAE@XZ ; CSoundManagerStream::~CSoundManagerStream
??__F?ms_SoundManagerStream@CSoundManager@@1VCSoundManagerStream@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CSoundManager::ms_SoundManagerStream''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
;	COMDAT ??__E?ms_SoundManagerStream@CSoundManager@@1VCSoundManagerStream@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_SoundManagerStream@CSoundManager@@1VCSoundManagerStream@@A@@YAXXZ PROC ; `dynamic initializer for 'CSoundManager::ms_SoundManagerStream'', COMDAT

; 9    : CSoundManagerStream CSoundManager::ms_SoundManagerStream;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManagerStream@CSoundManager@@1VCSoundManagerStream@@A ; CSoundManager::ms_SoundManagerStream
  00005	e8 00 00 00 00	 call	 ??0CSoundManagerStream@@QAE@XZ ; CSoundManagerStream::CSoundManagerStream
  0000a	68 00 00 00 00	 push	 OFFSET ??__F?ms_SoundManagerStream@CSoundManager@@1VCSoundManagerStream@@A@@YAXXZ ; `dynamic atexit destructor for 'CSoundManager::ms_SoundManagerStream''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__E?ms_SoundManagerStream@CSoundManager@@1VCSoundManagerStream@@A@@YAXXZ ENDP ; `dynamic initializer for 'CSoundManager::ms_SoundManagerStream''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_SoundManager3D@CSoundManager@@1VCSoundManager3D@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_SoundManager3D@CSoundManager@@1VCSoundManager3D@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CSoundManager::ms_SoundManager3D'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManager3D@CSoundManager@@1VCSoundManager3D@@A ; CSoundManager::ms_SoundManager3D
  00005	e9 00 00 00 00	 jmp	 ??1CSoundManager3D@@UAE@XZ ; CSoundManager3D::~CSoundManager3D
??__F?ms_SoundManager3D@CSoundManager@@1VCSoundManager3D@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CSoundManager::ms_SoundManager3D''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
;	COMDAT ??__E?ms_SoundManager3D@CSoundManager@@1VCSoundManager3D@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_SoundManager3D@CSoundManager@@1VCSoundManager3D@@A@@YAXXZ PROC ; `dynamic initializer for 'CSoundManager::ms_SoundManager3D'', COMDAT

; 8    : CSoundManager3D CSoundManager::ms_SoundManager3D;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManager3D@CSoundManager@@1VCSoundManager3D@@A ; CSoundManager::ms_SoundManager3D
  00005	e8 00 00 00 00	 call	 ??0CSoundManager3D@@QAE@XZ ; CSoundManager3D::CSoundManager3D
  0000a	68 00 00 00 00	 push	 OFFSET ??__F?ms_SoundManager3D@CSoundManager@@1VCSoundManager3D@@A@@YAXXZ ; `dynamic atexit destructor for 'CSoundManager::ms_SoundManager3D''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__E?ms_SoundManager3D@CSoundManager@@1VCSoundManager3D@@A@@YAXXZ ENDP ; `dynamic initializer for 'CSoundManager::ms_SoundManager3D''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_SoundManager2D@CSoundManager@@1VCSoundManager2D@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_SoundManager2D@CSoundManager@@1VCSoundManager2D@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CSoundManager::ms_SoundManager2D'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManager2D@CSoundManager@@1VCSoundManager2D@@A ; CSoundManager::ms_SoundManager2D
  00005	e9 00 00 00 00	 jmp	 ??1CSoundManager2D@@UAE@XZ ; CSoundManager2D::~CSoundManager2D
??__F?ms_SoundManager2D@CSoundManager@@1VCSoundManager2D@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CSoundManager::ms_SoundManager2D''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
;	COMDAT ??__E?ms_SoundManager2D@CSoundManager@@1VCSoundManager2D@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_SoundManager2D@CSoundManager@@1VCSoundManager2D@@A@@YAXXZ PROC ; `dynamic initializer for 'CSoundManager::ms_SoundManager2D'', COMDAT

; 7    : CSoundManager2D CSoundManager::ms_SoundManager2D;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManager2D@CSoundManager@@1VCSoundManager2D@@A ; CSoundManager::ms_SoundManager2D
  00005	e8 00 00 00 00	 call	 ??0CSoundManager2D@@QAE@XZ ; CSoundManager2D::CSoundManager2D
  0000a	68 00 00 00 00	 push	 OFFSET ??__F?ms_SoundManager2D@CSoundManager@@1VCSoundManager2D@@A@@YAXXZ ; `dynamic atexit destructor for 'CSoundManager::ms_SoundManager2D''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__E?ms_SoundManager2D@CSoundManager@@1VCSoundManager2D@@A@@YAXXZ ENDP ; `dynamic initializer for 'CSoundManager::ms_SoundManager2D''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCSoundManager@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCSoundManager@@UAEPAXI@Z PROC			; CSoundManager::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CSoundManager@@UAE@XZ ; CSoundManager::~CSoundManager
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 74		 push	 116			; 00000074H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCSoundManager@@UAEPAXI@Z ENDP			; CSoundManager::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >::_Insert_node, COMDAT
; _this$ = ecx

; 659  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 660  :         ++_Mysize;
; 661  :         const auto _Head  = _Myhead;
; 662  :         _Newnode->_Parent = _Loc._Parent;

  00004	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0000e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00010	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00013	89 45 fc	 mov	 DWORD PTR __Head$1$[ebp], eax
  00016	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 663  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  00019	3b d0		 cmp	 edx, eax
  0001b	75 16		 jne	 SHORT $LN5@Insert_nod

; 664  :             _Head->_Left     = _Newnode;

  0001d	89 38		 mov	 DWORD PTR [eax], edi

; 665  :             _Head->_Parent   = _Newnode;

  0001f	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 666  :             _Head->_Right    = _Newnode;

  00022	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 725  :         return _Newnode;
; 726  :     }

  00025	8b c7		 mov	 eax, edi
  00027	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
  0002b	5f		 pop	 edi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 667  :             _Newnode->_Color = _Black; // the root is black
; 668  :             return _Newnode;
; 669  :         }
; 670  : 
; 671  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 672  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00033	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00037	75 0d		 jne	 SHORT $LN6@Insert_nod

; 673  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 674  :             _Loc._Parent->_Right = _Newnode;

  00039	89 7a 08	 mov	 DWORD PTR [edx+8], edi

; 675  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003c	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003f	75 0d		 jne	 SHORT $LN9@Insert_nod

; 676  :                 _Head->_Right = _Newnode;

  00041	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 677  :             }
; 678  :         } else { // add to left of _Loc._Parent

  00044	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 679  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 680  :             _Loc._Parent->_Left = _Newnode;

  00046	89 3a		 mov	 DWORD PTR [edx], edi

; 681  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00048	3b 10		 cmp	 edx, DWORD PTR [eax]
  0004a	75 02		 jne	 SHORT $LN9@Insert_nod

; 682  :                 _Head->_Left = _Newnode;

  0004c	89 38		 mov	 DWORD PTR [eax], edi
$LN9@Insert_nod:

; 683  :             }
; 684  :         }
; 685  : 
; 686  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00051	8b c7		 mov	 eax, edi
  00053	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00057	0f 85 7d 01 00
	00		 jne	 $LN3@Insert_nod
  0005d	56		 push	 esi
  0005e	66 90		 npad	 2
$LL4@Insert_nod:

; 687  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00063	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	3b d1		 cmp	 edx, ecx
  0006a	0f 85 aa 00 00
	00		 jne	 $LN10@Insert_nod

; 688  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00070	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 689  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00073	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00077	0f 84 a3 00 00
	00		 je	 $LN82@Insert_nod

; 690  :                     _Pnode->_Parent->_Color          = _Black;
; 691  :                     _Parent_sibling->_Color          = _Black;
; 692  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 693  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 694  :                 } else { // parent's sibling has red and black children
; 695  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  0007d	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00080	3b c6		 cmp	 eax, esi
  00082	75 37		 jne	 SHORT $LN57@Insert_nod

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00084	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 696  :                         _Pnode = _Pnode->_Parent;

  00086	8b c2		 mov	 eax, edx

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00088	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 476  : 
; 477  :         if (!_Pnode->_Left->_Isnil) {

  0008b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00091	75 03		 jne	 SHORT $LN21@Insert_nod

; 478  :             _Pnode->_Left->_Parent = _Wherenode;

  00093	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN21@Insert_nod:

; 479  :         }
; 480  : 
; 481  :         _Pnode->_Parent = _Wherenode->_Parent;

  00096	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00099	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 482  : 
; 483  :         if (_Wherenode == _Myhead->_Parent) {

  0009c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0009e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000a1	75 05		 jne	 SHORT $LN22@Insert_nod

; 484  :             _Myhead->_Parent = _Pnode;

  000a3	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  000a6	eb 0e		 jmp	 SHORT $LN25@Insert_nod
$LN22@Insert_nod:

; 485  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000a8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ab	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000ad	75 04		 jne	 SHORT $LN24@Insert_nod

; 486  :             _Wherenode->_Parent->_Left = _Pnode;

  000af	89 31		 mov	 DWORD PTR [ecx], esi

; 487  :         } else {

  000b1	eb 03		 jmp	 SHORT $LN25@Insert_nod
$LN24@Insert_nod:

; 488  :             _Wherenode->_Parent->_Right = _Pnode;

  000b3	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN25@Insert_nod:

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 492  :         _Wherenode->_Parent = _Pnode;

  000b8	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN57@Insert_nod:

; 697  :                         _Lrotate(_Pnode);
; 698  :                     }
; 699  : 
; 700  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 701  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c8	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 702  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 496  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000d2	8b 32		 mov	 esi, DWORD PTR [edx]

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  000d4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000d7	89 0a		 mov	 DWORD PTR [edx], ecx

; 498  : 
; 499  :         if (!_Pnode->_Right->_Isnil) {

  000d9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000dc	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000e0	75 03		 jne	 SHORT $LN29@Insert_nod

; 500  :             _Pnode->_Right->_Parent = _Wherenode;

  000e2	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN29@Insert_nod:

; 501  :         }
; 502  : 
; 503  :         _Pnode->_Parent = _Wherenode->_Parent;

  000e5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000e8	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 504  : 
; 505  :         if (_Wherenode == _Myhead->_Parent) {

  000eb	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000ed	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000f0	75 0b		 jne	 SHORT $LN30@Insert_nod

; 506  :             _Myhead->_Parent = _Pnode;

  000f2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  000f5	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 703  :                 }
; 704  :             } else { // fixup red-red in right subtree

  000f8	e9 cc 00 00 00	 jmp	 $LN81@Insert_nod
$LN30@Insert_nod:

; 507  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  000fd	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00100	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00103	75 0b		 jne	 SHORT $LN32@Insert_nod

; 508  :             _Wherenode->_Parent->_Right = _Pnode;

  00105	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00108	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 703  :                 }
; 704  :             } else { // fixup red-red in right subtree

  0010b	e9 b9 00 00 00	 jmp	 $LN81@Insert_nod
$LN32@Insert_nod:

; 510  :             _Wherenode->_Parent->_Left = _Pnode;

  00110	89 31		 mov	 DWORD PTR [ecx], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00112	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 703  :                 }
; 704  :             } else { // fixup red-red in right subtree

  00115	e9 af 00 00 00	 jmp	 $LN81@Insert_nod
$LN10@Insert_nod:

; 705  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 706  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  0011a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0011e	75 1d		 jne	 SHORT $LN15@Insert_nod
$LN82@Insert_nod:

; 683  :             }
; 684  :         }
; 685  : 
; 686  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00120	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1
  00124	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  00128	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0012e	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00132	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00135	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00138	e9 8f 00 00 00	 jmp	 $LN2@Insert_nod
$LN15@Insert_nod:

; 707  :                     _Pnode->_Parent->_Color          = _Black;
; 708  :                     _Parent_sibling->_Color          = _Black;
; 709  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 710  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 711  :                 } else { // parent's sibling has red and black children
; 712  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  0013d	8b 32		 mov	 esi, DWORD PTR [edx]
  0013f	3b c6		 cmp	 eax, esi
  00141	75 3a		 jne	 SHORT $LN42@Insert_nod

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  00143	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 713  :                         _Pnode = _Pnode->_Parent;

  00146	8b c2		 mov	 eax, edx

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  00148	89 08		 mov	 DWORD PTR [eax], ecx

; 498  : 
; 499  :         if (!_Pnode->_Right->_Isnil) {

  0014a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0014d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00151	75 03		 jne	 SHORT $LN37@Insert_nod

; 500  :             _Pnode->_Right->_Parent = _Wherenode;

  00153	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN37@Insert_nod:

; 501  :         }
; 502  : 
; 503  :         _Pnode->_Parent = _Wherenode->_Parent;

  00156	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00159	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 504  : 
; 505  :         if (_Wherenode == _Myhead->_Parent) {

  0015c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0015e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00161	75 05		 jne	 SHORT $LN38@Insert_nod

; 506  :             _Myhead->_Parent = _Pnode;

  00163	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00166	eb 0f		 jmp	 SHORT $LN41@Insert_nod
$LN38@Insert_nod:

; 507  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00168	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0016b	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0016e	75 05		 jne	 SHORT $LN40@Insert_nod

; 508  :             _Wherenode->_Parent->_Right = _Pnode;

  00170	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 509  :         } else {

  00173	eb 02		 jmp	 SHORT $LN41@Insert_nod
$LN40@Insert_nod:

; 510  :             _Wherenode->_Parent->_Left = _Pnode;

  00175	89 31		 mov	 DWORD PTR [ecx], esi
$LN41@Insert_nod:

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00177	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 514  :         _Wherenode->_Parent = _Pnode;

  0017a	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN42@Insert_nod:

; 714  :                         _Rrotate(_Pnode);
; 715  :                     }
; 716  : 
; 717  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  0017d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 718  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00184	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00187	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0018a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 719  :                     _Lrotate(_Pnode->_Parent->_Parent);

  0018e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00191	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 474  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00194	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00197	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00199	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 476  : 
; 477  :         if (!_Pnode->_Left->_Isnil) {

  0019c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0019e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a2	75 03		 jne	 SHORT $LN45@Insert_nod

; 478  :             _Pnode->_Left->_Parent = _Wherenode;

  001a4	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN45@Insert_nod:

; 479  :         }
; 480  : 
; 481  :         _Pnode->_Parent = _Wherenode->_Parent;

  001a7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001aa	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 482  : 
; 483  :         if (_Wherenode == _Myhead->_Parent) {

  001ad	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001af	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  001b2	75 05		 jne	 SHORT $LN46@Insert_nod

; 484  :             _Myhead->_Parent = _Pnode;

  001b4	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  001b7	eb 0e		 jmp	 SHORT $LN49@Insert_nod
$LN46@Insert_nod:

; 485  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001b9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001bc	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001be	75 04		 jne	 SHORT $LN48@Insert_nod

; 486  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 31		 mov	 DWORD PTR [ecx], esi

; 487  :         } else {

  001c2	eb 03		 jmp	 SHORT $LN49@Insert_nod
$LN48@Insert_nod:

; 488  :             _Wherenode->_Parent->_Right = _Pnode;

  001c4	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN49@Insert_nod:

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  001c7	89 16		 mov	 DWORD PTR [esi], edx
$LN81@Insert_nod:

; 683  :             }
; 684  :         }
; 685  : 
; 686  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001c9	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN2@Insert_nod:
  001cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001cf	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001d3	0f 84 87 fe ff
	ff		 je	 $LL4@Insert_nod
  001d9	5e		 pop	 esi
$LN3@Insert_nod:

; 720  :                 }
; 721  :             }
; 722  :         }
; 723  : 
; 724  :         _Head->_Parent->_Color = _Black; // root is always black

  001da	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]
  001dd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e0	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 725  :         return _Newnode;
; 726  :     }

  001e4	8b c7		 mov	 eax, edi
  001e6	5f		 pop	 edi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z
_TEXT	SEGMENT
tv1039 = -16						; size = 4
tv1073 = -12						; size = 4
tv1093 = -12						; size = 4
$T1 = -12						; size = 4
__Erasednode$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
__Where$ = 8						; size = 4
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >::_Extract, COMDAT
; _this$ = ecx

; 517  :     _Nodeptr _Extract(_Unchecked_const_iterator _Where) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 518  :         _Nodeptr _Erasednode = _Where._Ptr; // node to erase

  00006	8b 45 08	 mov	 eax, DWORD PTR __Where$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b d9		 mov	 ebx, ecx
  0000d	89 45 f8	 mov	 DWORD PTR __Erasednode$1$[ebp], eax
  00010	57		 push	 edi

; 519  :         ++_Where; // save successor iterator for return

  00011	8d 4d 08	 lea	 ecx, DWORD PTR __Where$[ebp]
  00014	89 5d fc	 mov	 DWORD PTR _this$1$[ebp], ebx
  00017	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >,std::_Iterator_base0>::operator++

; 520  : 
; 521  :         _Nodeptr _Fixnode; // the node to recolor as needed
; 522  :         _Nodeptr _Fixnodeparent; // parent of _Fixnode (which may be nil)
; 523  :         _Nodeptr _Pnode = _Erasednode;
; 524  : 
; 525  :         if (_Pnode->_Left->_Isnil) {

  0001c	8b 4d f8	 mov	 ecx, DWORD PTR __Erasednode$1$[ebp]
  0001f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00021	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]
  00024	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00028	75 18		 jne	 SHORT $LN94@Extract

; 526  :             _Fixnode = _Pnode->_Right; // stitch up right subtree
; 527  :         } else if (_Pnode->_Right->_Isnil) {

  0002a	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0002e	74 04		 je	 SHORT $LN7@Extract

; 528  :             _Fixnode = _Pnode->_Left; // stitch up left subtree

  00030	8b f8		 mov	 edi, eax

; 529  :         } else { // two subtrees, must lift successor node to replace erased

  00032	eb 0e		 jmp	 SHORT $LN94@Extract
$LN7@Extract:

; 530  :             _Pnode   = _Where._Ptr; // _Pnode is successor node

  00034	8b 55 08	 mov	 edx, DWORD PTR __Where$[ebp]

; 531  :             _Fixnode = _Pnode->_Right; // _Fixnode is only subtree

  00037	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  0003a	3b d1		 cmp	 edx, ecx

; 532  :         }
; 533  : 
; 534  :         if (_Pnode == _Erasednode) { // at most one subtree, relink it

  0003c	0f 85 91 00 00
	00		 jne	 $LN9@Extract
$LN94@Extract:

; 535  :             _Fixnodeparent = _Erasednode->_Parent;
; 536  :             if (!_Fixnode->_Isnil) {

  00042	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00046	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00049	75 03		 jne	 SHORT $LN11@Extract

; 537  :                 _Fixnode->_Parent = _Fixnodeparent; // link up

  0004b	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN11@Extract:

; 538  :             }
; 539  : 
; 540  :             if (_Myhead->_Parent == _Erasednode) {

  0004e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00050	39 48 04	 cmp	 DWORD PTR [eax+4], ecx
  00053	75 05		 jne	 SHORT $LN12@Extract

; 541  :                 _Myhead->_Parent = _Fixnode; // link down from root

  00055	89 78 04	 mov	 DWORD PTR [eax+4], edi
  00058	eb 0b		 jmp	 SHORT $LN15@Extract
$LN12@Extract:

; 542  :             } else if (_Fixnodeparent->_Left == _Erasednode) {

  0005a	39 0e		 cmp	 DWORD PTR [esi], ecx
  0005c	75 04		 jne	 SHORT $LN14@Extract

; 543  :                 _Fixnodeparent->_Left = _Fixnode; // link down to left

  0005e	89 3e		 mov	 DWORD PTR [esi], edi

; 544  :             } else {

  00060	eb 03		 jmp	 SHORT $LN15@Extract
$LN14@Extract:

; 545  :                 _Fixnodeparent->_Right = _Fixnode; // link down to right

  00062	89 7e 08	 mov	 DWORD PTR [esi+8], edi
$LN15@Extract:

; 546  :             }
; 547  : 
; 548  :             if (_Myhead->_Left == _Erasednode) {

  00065	8b 03		 mov	 eax, DWORD PTR [ebx]
  00067	39 08		 cmp	 DWORD PTR [eax], ecx
  00069	75 28		 jne	 SHORT $LN16@Extract

; 549  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  0006b	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0006f	74 04		 je	 SHORT $LN42@Extract
  00071	8b d6		 mov	 edx, esi
  00073	eb 1c		 jmp	 SHORT $LN43@Extract
$LN42@Extract:

; 466  :         while (!_Pnode->_Left->_Isnil) {

  00075	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 549  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  00077	8b d7		 mov	 edx, edi

; 466  :         while (!_Pnode->_Left->_Isnil) {

  00079	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0007d	75 0f		 jne	 SHORT $LN49@Extract
  0007f	90		 npad	 1
$LL48@Extract:
  00080	8b 01		 mov	 eax, DWORD PTR [ecx]

; 467  :             _Pnode = _Pnode->_Left;

  00082	8b d1		 mov	 edx, ecx
  00084	8b c8		 mov	 ecx, eax
  00086	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0008a	74 f4		 je	 SHORT $LL48@Extract
  0008c	8b 03		 mov	 eax, DWORD PTR [ebx]
$LN49@Extract:
  0008e	8b 4d f8	 mov	 ecx, DWORD PTR __Erasednode$1$[ebp]
$LN43@Extract:

; 549  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  00091	89 10		 mov	 DWORD PTR [eax], edx
$LN16@Extract:

; 550  :                                                   : _Min(_Fixnode); // smallest in relinked subtree
; 551  :             }
; 552  : 
; 553  :             if (_Myhead->_Right == _Erasednode) {

  00093	8b 13		 mov	 edx, DWORD PTR [ebx]
  00095	39 4a 08	 cmp	 DWORD PTR [edx+8], ecx
  00098	75 34		 jne	 SHORT $LN17@Extract

; 554  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  0009a	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0009e	74 0d		 je	 SHORT $LN44@Extract

; 555  :                                                    : _Max(_Fixnode); // largest in relinked subtree
; 556  :             }
; 557  :         } else { // erased has two subtrees, _Pnode is successor to erased

  000a0	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  000a3	8b ce		 mov	 ecx, esi
  000a5	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  000a8	e9 94 00 00 00	 jmp	 $LN58@Extract
$LN44@Extract:

; 458  :         while (!_Pnode->_Right->_Isnil) {

  000ad	8b 47 08	 mov	 eax, DWORD PTR [edi+8]

; 554  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  000b0	8b cf		 mov	 ecx, edi

; 458  :         while (!_Pnode->_Right->_Isnil) {

  000b2	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000b6	75 13		 jne	 SHORT $LN54@Extract
  000b8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL53@Extract:

; 459  :             _Pnode = _Pnode->_Right;

  000c0	8b c8		 mov	 ecx, eax
  000c2	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000c5	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000c9	74 f5		 je	 SHORT $LL53@Extract
$LN54@Extract:

; 554  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  000cb	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
$LN17@Extract:

; 555  :                                                    : _Max(_Fixnode); // largest in relinked subtree
; 556  :             }
; 557  :         } else { // erased has two subtrees, _Pnode is successor to erased

  000ce	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  000d1	eb 6e		 jmp	 SHORT $LN58@Extract
$LN9@Extract:

; 558  :             _Erasednode->_Left->_Parent = _Pnode; // link left up

  000d3	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 559  :             _Pnode->_Left               = _Erasednode->_Left; // link successor down

  000d6	8b 01		 mov	 eax, DWORD PTR [ecx]
  000d8	89 02		 mov	 DWORD PTR [edx], eax

; 560  : 
; 561  :             if (_Pnode == _Erasednode->_Right) {

  000da	8d 42 04	 lea	 eax, DWORD PTR [edx+4]
  000dd	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
  000e0	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  000e3	75 04		 jne	 SHORT $LN18@Extract

; 562  :                 _Fixnodeparent = _Pnode; // successor is next to erased

  000e5	8b f2		 mov	 esi, edx

; 563  :             } else { // successor further down, link in place of erased

  000e7	eb 1f		 jmp	 SHORT $LN19@Extract
$LN18@Extract:

; 564  :                 _Fixnodeparent = _Pnode->_Parent; // parent is successor's
; 565  :                 if (!_Fixnode->_Isnil) {

  000e9	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  000ed	8b 30		 mov	 esi, DWORD PTR [eax]
  000ef	75 03		 jne	 SHORT $LN20@Extract

; 566  :                     _Fixnode->_Parent = _Fixnodeparent; // link fix up

  000f1	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN20@Extract:

; 567  :                 }
; 568  : 
; 569  :                 _Fixnodeparent->_Left        = _Fixnode; // link fix down

  000f4	89 3e		 mov	 DWORD PTR [esi], edi

; 570  :                 _Pnode->_Right               = _Erasednode->_Right; // link next down

  000f6	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000f9	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 571  :                 _Erasednode->_Right->_Parent = _Pnode; // right up

  000fc	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000ff	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00102	8d 42 04	 lea	 eax, DWORD PTR [edx+4]
  00105	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
$LN19@Extract:

; 572  :             }
; 573  : 
; 574  :             if (_Myhead->_Parent == _Erasednode) {

  00108	8b 03		 mov	 eax, DWORD PTR [ebx]
  0010a	39 48 04	 cmp	 DWORD PTR [eax+4], ecx
  0010d	75 05		 jne	 SHORT $LN21@Extract

; 575  :                 _Myhead->_Parent = _Pnode; // link down from root

  0010f	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00112	eb 0e		 jmp	 SHORT $LN141@Extract
$LN21@Extract:

; 576  :             } else if (_Erasednode->_Parent->_Left == _Erasednode) {

  00114	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00117	39 08		 cmp	 DWORD PTR [eax], ecx
  00119	75 04		 jne	 SHORT $LN23@Extract

; 577  :                 _Erasednode->_Parent->_Left = _Pnode; // link down to left

  0011b	89 10		 mov	 DWORD PTR [eax], edx

; 578  :             } else {

  0011d	eb 03		 jmp	 SHORT $LN141@Extract
$LN23@Extract:

; 579  :                 _Erasednode->_Parent->_Right = _Pnode; // link down to right

  0011f	89 50 08	 mov	 DWORD PTR [eax+8], edx
$LN141@Extract:

; 580  :             }
; 581  : 
; 582  :             _Pnode->_Parent = _Erasednode->_Parent; // link successor up

  00122	b8 04 00 00 00	 mov	 eax, 4
  00127	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  0012a	8b 4d f4	 mov	 ecx, DWORD PTR $T1[ebp]
  0012d	89 01		 mov	 DWORD PTR [ecx], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 140  :     _Left    = _STD move(_Right);

  0012f	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  00132	8a 4a 0c	 mov	 cl, BYTE PTR [edx+12]
  00135	8a 40 0c	 mov	 al, BYTE PTR [eax+12]
  00138	88 42 0c	 mov	 BYTE PTR [edx+12], al

; 141  :     _Right   = _STD move(_Tmp);

  0013b	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  0013e	88 48 0c	 mov	 BYTE PTR [eax+12], cl
$LN58@Extract:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 586  :         if (_Erasednode->_Color == _Black) { // erasing black link, must recolor/rebalance tree

  00141	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  00145	0f 85 ba 01 00
	00		 jne	 $LN25@Extract

; 587  :             for (; _Fixnode != _Myhead->_Parent && _Fixnode->_Color == _Black; _Fixnodeparent = _Fixnode->_Parent) {

  0014b	8b 03		 mov	 eax, DWORD PTR [ebx]
  0014d	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  00150	0f 84 a8 01 00
	00		 je	 $LN3@Extract
  00156	80 7f 0c 01	 cmp	 BYTE PTR [edi+12], 1
  0015a	89 75 f4	 mov	 DWORD PTR tv1093[ebp], esi
  0015d	0f 85 9b 01 00
	00		 jne	 $LN3@Extract
$LL4@Extract:

; 588  :                 if (_Fixnode == _Fixnodeparent->_Left) { // fixup left subtree

  00163	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00165	3b f9		 cmp	 edi, ecx
  00167	0f 85 be 00 00
	00		 jne	 $LN26@Extract

; 589  :                     _Pnode = _Fixnodeparent->_Right;

  0016d	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 590  :                     if (_Pnode->_Color == _Red) { // rotate red up from right subtree

  00170	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00174	75 54		 jne	 SHORT $LN95@Extract

; 591  :                         _Pnode->_Color         = _Black;

  00176	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 474  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  0017a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 592  :                         _Fixnodeparent->_Color = _Red;

  0017d	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00181	8b 01		 mov	 eax, DWORD PTR [ecx]
  00183	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 476  : 
; 477  :         if (!_Pnode->_Left->_Isnil) {

  00186	8b 01		 mov	 eax, DWORD PTR [ecx]
  00188	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0018c	75 03		 jne	 SHORT $LN61@Extract

; 478  :             _Pnode->_Left->_Parent = _Wherenode;

  0018e	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN61@Extract:

; 479  :         }
; 480  : 
; 481  :         _Pnode->_Parent = _Wherenode->_Parent;

  00191	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00194	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
  00197	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 482  : 
; 483  :         if (_Wherenode == _Myhead->_Parent) {

  0019a	8b 03		 mov	 eax, DWORD PTR [ebx]
  0019c	3b 70 04	 cmp	 esi, DWORD PTR [eax+4]
  0019f	75 0c		 jne	 SHORT $LN62@Extract

; 484  :             _Myhead->_Parent = _Pnode;

  001a1	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  001a4	89 31		 mov	 DWORD PTR [ecx], esi

; 492  :         _Wherenode->_Parent = _Pnode;

  001a6	89 0a		 mov	 DWORD PTR [edx], ecx

; 593  :                         _Lrotate(_Fixnodeparent);
; 594  :                         _Pnode = _Fixnodeparent->_Right;

  001a8	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001ab	eb 20		 jmp	 SHORT $LN87@Extract
$LN62@Extract:

; 485  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001ad	8b 02		 mov	 eax, DWORD PTR [edx]
  001af	3b 30		 cmp	 esi, DWORD PTR [eax]
  001b1	75 0b		 jne	 SHORT $LN64@Extract

; 486  :             _Wherenode->_Parent->_Left = _Pnode;

  001b3	89 08		 mov	 DWORD PTR [eax], ecx

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  001b5	89 31		 mov	 DWORD PTR [ecx], esi

; 492  :         _Wherenode->_Parent = _Pnode;

  001b7	89 0a		 mov	 DWORD PTR [edx], ecx

; 593  :                         _Lrotate(_Fixnodeparent);
; 594  :                         _Pnode = _Fixnodeparent->_Right;

  001b9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001bc	eb 0f		 jmp	 SHORT $LN87@Extract
$LN64@Extract:

; 488  :             _Wherenode->_Parent->_Right = _Pnode;

  001be	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  001c1	89 31		 mov	 DWORD PTR [ecx], esi

; 492  :         _Wherenode->_Parent = _Pnode;

  001c3	89 0a		 mov	 DWORD PTR [edx], ecx

; 593  :                         _Lrotate(_Fixnodeparent);
; 594  :                         _Pnode = _Fixnodeparent->_Right;

  001c5	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001c8	eb 03		 jmp	 SHORT $LN87@Extract
$LN95@Extract:
  001ca	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
$LN87@Extract:

; 595  :                     }
; 596  : 
; 597  :                     if (_Pnode->_Isnil) {

  001cd	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001d1	0f 85 d0 00 00
	00		 jne	 $LN2@Extract

; 598  :                         _Fixnode = _Fixnodeparent; // shouldn't happen
; 599  :                     } else if (_Pnode->_Left->_Color == _Black
; 600  :                                && _Pnode->_Right->_Color == _Black) { // redden right subtree with black children

  001d7	8b 01		 mov	 eax, DWORD PTR [ecx]
  001d9	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001dd	75 0d		 jne	 SHORT $LN97@Extract
  001df	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001e2	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001e6	0f 84 b4 00 00
	00		 je	 $LN142@Extract
$LN97@Extract:

; 601  :                         _Pnode->_Color = _Red;
; 602  :                         _Fixnode       = _Fixnodeparent;
; 603  :                     } else { // must rearrange right subtree
; 604  :                         if (_Pnode->_Right->_Color == _Black) { // rotate red up from left sub-subtree

  001ec	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001ef	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
  001f2	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001f6	75 15		 jne	 SHORT $LN33@Extract

; 605  :                             _Pnode->_Left->_Color = _Black;

  001f8	8b 01		 mov	 eax, DWORD PTR [ecx]

; 606  :                             _Pnode->_Color        = _Red;
; 607  :                             _Rrotate(_Pnode);

  001fa	51		 push	 ecx
  001fb	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  001ff	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00203	8b cb		 mov	 ecx, ebx
  00205	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >::_Rrotate

; 608  :                             _Pnode = _Fixnodeparent->_Right;

  0020a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
$LN33@Extract:

; 609  :                         }
; 610  : 
; 611  :                         _Pnode->_Color         = _Fixnodeparent->_Color;

  0020d	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  00210	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 612  :                         _Fixnodeparent->_Color = _Black;

  00213	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 613  :                         _Pnode->_Right->_Color = _Black;

  00217	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 614  :                         _Lrotate(_Fixnodeparent);

  0021a	8b cb		 mov	 ecx, ebx
  0021c	56		 push	 esi
  0021d	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  00221	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >::_Lrotate

; 615  :                         break; // tree now recolored/rebalanced

  00226	e9 d3 00 00 00	 jmp	 $LN3@Extract
$LN26@Extract:

; 616  :                     }
; 617  :                 } else { // fixup right subtree
; 618  :                     _Pnode = _Fixnodeparent->_Left;
; 619  :                     if (_Pnode->_Color == _Red) { // rotate red up from left subtree

  0022b	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0022f	75 55		 jne	 SHORT $LN96@Extract

; 620  :                         _Pnode->_Color         = _Black;

  00231	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 496  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00235	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 621  :                         _Fixnodeparent->_Color = _Red;

  00237	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  0023b	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0023e	89 06		 mov	 DWORD PTR [esi], eax

; 498  : 
; 499  :         if (!_Pnode->_Right->_Isnil) {

  00240	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00243	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00247	75 03		 jne	 SHORT $LN69@Extract

; 500  :             _Pnode->_Right->_Parent = _Wherenode;

  00249	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN69@Extract:

; 501  :         }
; 502  : 
; 503  :         _Pnode->_Parent = _Wherenode->_Parent;

  0024c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0024f	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
  00252	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 504  : 
; 505  :         if (_Wherenode == _Myhead->_Parent) {

  00255	8b 03		 mov	 eax, DWORD PTR [ebx]
  00257	3b 70 04	 cmp	 esi, DWORD PTR [eax+4]
  0025a	75 0c		 jne	 SHORT $LN70@Extract

; 506  :             _Myhead->_Parent = _Pnode;

  0025c	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  0025f	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 514  :         _Wherenode->_Parent = _Pnode;

  00262	89 0a		 mov	 DWORD PTR [edx], ecx

; 622  :                         _Rrotate(_Fixnodeparent);
; 623  :                         _Pnode = _Fixnodeparent->_Left;

  00264	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00266	eb 21		 jmp	 SHORT $LN86@Extract
$LN70@Extract:

; 507  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00268	8b 02		 mov	 eax, DWORD PTR [edx]
  0026a	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  0026d	75 0c		 jne	 SHORT $LN72@Extract

; 508  :             _Wherenode->_Parent->_Right = _Pnode;

  0026f	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00272	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 514  :         _Wherenode->_Parent = _Pnode;

  00275	89 0a		 mov	 DWORD PTR [edx], ecx

; 622  :                         _Rrotate(_Fixnodeparent);
; 623  :                         _Pnode = _Fixnodeparent->_Left;

  00277	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00279	eb 0e		 jmp	 SHORT $LN86@Extract
$LN72@Extract:

; 510  :             _Wherenode->_Parent->_Left = _Pnode;

  0027b	89 08		 mov	 DWORD PTR [eax], ecx

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  0027d	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 514  :         _Wherenode->_Parent = _Pnode;

  00280	89 0a		 mov	 DWORD PTR [edx], ecx

; 622  :                         _Rrotate(_Fixnodeparent);
; 623  :                         _Pnode = _Fixnodeparent->_Left;

  00282	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00284	eb 03		 jmp	 SHORT $LN86@Extract
$LN96@Extract:
  00286	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
$LN86@Extract:

; 624  :                     }
; 625  : 
; 626  :                     if (_Pnode->_Isnil) {

  00289	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0028d	75 18		 jne	 SHORT $LN2@Extract

; 627  :                         _Fixnode = _Fixnodeparent; // shouldn't happen
; 628  :                     } else if (_Pnode->_Right->_Color == _Black
; 629  :                                && _Pnode->_Left->_Color == _Black) { // redden left subtree with black children

  0028f	8b 59 08	 mov	 ebx, DWORD PTR [ecx+8]
  00292	80 7b 0c 01	 cmp	 BYTE PTR [ebx+12], 1
  00296	75 2c		 jne	 SHORT $LN98@Extract
  00298	8b 01		 mov	 eax, DWORD PTR [ecx]
  0029a	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  0029e	75 24		 jne	 SHORT $LN98@Extract
$LN142@Extract:

; 587  :             for (; _Fixnode != _Myhead->_Parent && _Fixnode->_Color == _Black; _Fixnodeparent = _Fixnode->_Parent) {

  002a0	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
  002a3	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
$LN2@Extract:
  002a7	8b 03		 mov	 eax, DWORD PTR [ebx]
  002a9	8b 4d f4	 mov	 ecx, DWORD PTR tv1093[ebp]
  002ac	8b f9		 mov	 edi, ecx
  002ae	8b 32		 mov	 esi, DWORD PTR [edx]
  002b0	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  002b3	74 49		 je	 SHORT $LN3@Extract
  002b5	80 7f 0c 01	 cmp	 BYTE PTR [edi+12], 1
  002b9	89 75 f4	 mov	 DWORD PTR tv1093[ebp], esi
  002bc	0f 84 a1 fe ff
	ff		 je	 $LL4@Extract
  002c2	eb 3a		 jmp	 SHORT $LN3@Extract
$LN98@Extract:

; 630  :                         _Pnode->_Color = _Red;
; 631  :                         _Fixnode       = _Fixnodeparent;
; 632  :                     } else { // must rearrange left subtree
; 633  :                         if (_Pnode->_Left->_Color == _Black) { // rotate red up from right sub-subtree

  002c4	8b 01		 mov	 eax, DWORD PTR [ecx]
  002c6	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  002ca	75 17		 jne	 SHORT $LN101@Extract

; 634  :                             _Pnode->_Right->_Color = _Black;

  002cc	c6 43 0c 01	 mov	 BYTE PTR [ebx+12], 1

; 635  :                             _Pnode->_Color         = _Red;
; 636  :                             _Lrotate(_Pnode);

  002d0	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
  002d3	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  002d7	51		 push	 ecx
  002d8	8b cb		 mov	 ecx, ebx
  002da	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >::_Lrotate

; 637  :                             _Pnode = _Fixnodeparent->_Left;

  002df	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002e1	eb 03		 jmp	 SHORT $LN39@Extract
$LN101@Extract:

; 630  :                         _Pnode->_Color = _Red;
; 631  :                         _Fixnode       = _Fixnodeparent;
; 632  :                     } else { // must rearrange left subtree
; 633  :                         if (_Pnode->_Left->_Color == _Black) { // rotate red up from right sub-subtree

  002e3	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
$LN39@Extract:

; 638  :                         }
; 639  : 
; 640  :                         _Pnode->_Color         = _Fixnodeparent->_Color;

  002e6	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  002e9	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 641  :                         _Fixnodeparent->_Color = _Black;

  002ec	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 642  :                         _Pnode->_Left->_Color  = _Black;

  002f0	8b 01		 mov	 eax, DWORD PTR [ecx]

; 643  :                         _Rrotate(_Fixnodeparent);

  002f2	8b cb		 mov	 ecx, ebx
  002f4	56		 push	 esi
  002f5	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  002f9	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >::_Rrotate
$LN3@Extract:

; 644  :                         break; // tree now recolored/rebalanced
; 645  :                     }
; 646  :                 }
; 647  :             }
; 648  : 
; 649  :             _Fixnode->_Color = _Black; // stopping node is black

  002fe	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  00301	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
$LN25@Extract:

; 650  :         }
; 651  : 
; 652  :         if (0 < _Mysize) {

  00305	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00308	85 c9		 test	 ecx, ecx
  0030a	74 04		 je	 SHORT $LN40@Extract

; 653  :             --_Mysize;

  0030c	49		 dec	 ecx
  0030d	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx
$LN40@Extract:

; 654  :         }
; 655  : 
; 656  :         return _Erasednode;
; 657  :     }

  00310	5f		 pop	 edi
  00311	5e		 pop	 esi
  00312	5b		 pop	 ebx
  00313	8b e5		 mov	 esp, ebp
  00315	5d		 pop	 ebp
  00316	c2 04 00	 ret	 4
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >::_Extract
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >::_Rrotate, COMDAT
; _this$ = ecx

; 495  :     void _Rrotate(_Nodeptr _Wherenode) noexcept { // promote left node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 496  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 32		 mov	 esi, DWORD PTR [edx]

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	89 02		 mov	 DWORD PTR [edx], eax

; 498  : 
; 499  :         if (!_Pnode->_Right->_Isnil) {

  0000e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Rrotate

; 500  :             _Pnode->_Right->_Parent = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Rrotate:

; 501  :         }
; 502  : 
; 503  :         _Pnode->_Parent = _Wherenode->_Parent;

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 504  : 
; 505  :         if (_Wherenode == _Myhead->_Parent) {

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0e		 jne	 SHORT $LN3@Rrotate

; 506  :             _Myhead->_Parent = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;
; 514  :         _Wherenode->_Parent = _Pnode;
; 515  :     }

  0002a	89 56 08	 mov	 DWORD PTR [esi+8], edx
  0002d	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00030	5e		 pop	 esi
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN3@Rrotate:

; 507  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00035	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00038	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003b	75 0e		 jne	 SHORT $LN5@Rrotate

; 508  :             _Wherenode->_Parent->_Right = _Pnode;

  0003d	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;
; 514  :         _Wherenode->_Parent = _Pnode;
; 515  :     }

  00040	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00043	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00046	5e		 pop	 esi
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN5@Rrotate:

; 509  :         } else {
; 510  :             _Wherenode->_Parent->_Left = _Pnode;

  0004b	89 30		 mov	 DWORD PTR [eax], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;
; 514  :         _Wherenode->_Parent = _Pnode;
; 515  :     }

  0004d	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00050	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >::_Rrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >::_Lrotate, COMDAT
; _this$ = ecx

; 473  :     void _Lrotate(_Nodeptr _Wherenode) noexcept { // promote right node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 474  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  0000a	8b 06		 mov	 eax, DWORD PTR [esi]
  0000c	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 476  : 
; 477  :         if (!_Pnode->_Left->_Isnil) {

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Lrotate

; 478  :             _Pnode->_Left->_Parent = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Lrotate:

; 479  :         }
; 480  : 
; 481  :         _Pnode->_Parent = _Wherenode->_Parent;

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 482  : 
; 483  :         if (_Wherenode == _Myhead->_Parent) {

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0d		 jne	 SHORT $LN3@Lrotate

; 484  :             _Myhead->_Parent = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;
; 492  :         _Wherenode->_Parent = _Pnode;
; 493  :     }

  0002a	89 16		 mov	 DWORD PTR [esi], edx
  0002c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0002f	5e		 pop	 esi
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
$LN3@Lrotate:

; 485  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  00034	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00037	3b 10		 cmp	 edx, DWORD PTR [eax]
  00039	75 0c		 jne	 SHORT $LN5@Lrotate

; 486  :             _Wherenode->_Parent->_Left = _Pnode;

  0003b	89 30		 mov	 DWORD PTR [eax], esi

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;
; 492  :         _Wherenode->_Parent = _Pnode;
; 493  :     }

  0003d	89 16		 mov	 DWORD PTR [esi], edx
  0003f	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN5@Lrotate:

; 487  :         } else {
; 488  :             _Wherenode->_Parent->_Right = _Pnode;

  00047	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;
; 492  :         _Wherenode->_Parent = _Pnode;
; 493  :     }

  0004a	89 16		 mov	 DWORD PTR [esi], edx
  0004c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0004f	5e		 pop	 esi
  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >::_Lrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@2@$0A@@std@@@std@@QAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
__Off$1$ = -12						; size = 4
tv635 = -12						; size = 4
_this$1$ = -8						; size = 4
__Head$1$ = -4						; size = 4
__Keyval$ = 8						; size = 4
__First$ = 8						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@2@$0A@@std@@@std@@QAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,float,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> >,0> >::erase, COMDAT
; _this$ = ecx

; 1347 :     size_type erase(const key_type& _Keyval) noexcept(noexcept(_Eqrange(_Keyval))) /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	8b c1		 mov	 eax, ecx

; 1703 :         while (!_Pnode->_Isnil) {

  00008	8b 4d 08	 mov	 ecx, DWORD PTR __Keyval$[ebp]

; 1347 :     size_type erase(const key_type& _Keyval) noexcept(noexcept(_Eqrange(_Keyval))) /* strengthened */ {

  0000b	89 45 f8	 mov	 DWORD PTR _this$1$[ebp], eax
  0000e	53		 push	 ebx
  0000f	56		 push	 esi

; 1699 :         _Nodeptr _Pnode   = _Scary->_Myhead->_Parent;

  00010	8b 00		 mov	 eax, DWORD PTR [eax]

; 1701 :         _Nodeptr _Hinode  = _Scary->_Myhead; // end() if search fails

  00012	8b f0		 mov	 esi, eax

; 1347 :     size_type erase(const key_type& _Keyval) noexcept(noexcept(_Eqrange(_Keyval))) /* strengthened */ {

  00014	57		 push	 edi

; 1699 :         _Nodeptr _Pnode   = _Scary->_Myhead->_Parent;

  00015	89 45 fc	 mov	 DWORD PTR __Head$1$[ebp], eax

; 1700 :         _Nodeptr _Lonode  = _Scary->_Myhead; // end() if search fails

  00018	8b f8		 mov	 edi, eax
  0001a	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0001d	8b da		 mov	 ebx, edx
  0001f	89 55 f4	 mov	 DWORD PTR tv635[ebp], edx

; 1702 : 
; 1703 :         while (!_Pnode->_Isnil) {

  00022	80 7b 0d 00	 cmp	 BYTE PTR [ebx+13], 0
  00026	75 40		 jne	 SHORT $LN6@erase
$LL5@erase:

; 1704 :             const auto& _Nodekey = _Traits::_Kfn(_Pnode->_Myval);

  00028	8d 43 10	 lea	 eax, DWORD PTR [ebx+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  0002b	51		 push	 ecx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  00032	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1705 :             if (_DEBUG_LT_PRED(_Comp, _Nodekey, _Keyval)) {

  00035	84 c0		 test	 al, al
  00037	74 05		 je	 SHORT $LN9@erase

; 1706 :                 _Pnode = _Pnode->_Right; // descend right subtree

  00039	8b 5b 08	 mov	 ebx, DWORD PTR [ebx+8]

; 1707 :             } else { // _Pnode not less than _Keyval, remember it

  0003c	eb 1e		 jmp	 SHORT $LN10@erase
$LN9@erase:

; 1708 :                 if (_Hinode->_Isnil && _DEBUG_LT_PRED(_Comp, _Keyval, _Nodekey)) {

  0003e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00042	74 14		 je	 SHORT $LN11@erase
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00044	8d 43 10	 lea	 eax, DWORD PTR [ebx+16]
  00047	50		 push	 eax
  00048	ff 75 08	 push	 DWORD PTR __Keyval$[ebp]
  0004b	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  00050	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1708 :                 if (_Hinode->_Isnil && _DEBUG_LT_PRED(_Comp, _Keyval, _Nodekey)) {

  00053	84 c0		 test	 al, al
  00055	0f 45 f3	 cmovne	 esi, ebx
$LN11@erase:

; 1709 :                     _Hinode = _Pnode; // _Pnode greater, remember it
; 1710 :                 }
; 1711 : 
; 1712 :                 _Lonode = _Pnode;

  00058	8b fb		 mov	 edi, ebx

; 1713 :                 _Pnode  = _Pnode->_Left; // descend left subtree

  0005a	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN10@erase:

; 1702 : 
; 1703 :         while (!_Pnode->_Isnil) {

  0005c	80 7b 0d 00	 cmp	 BYTE PTR [ebx+13], 0
  00060	8b 4d 08	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00063	74 c3		 je	 SHORT $LL5@erase
  00065	8b 55 f4	 mov	 edx, DWORD PTR tv635[ebp]
$LN6@erase:

; 1714 :             }
; 1715 :         }
; 1716 : 
; 1717 :         _Pnode = _Hinode->_Isnil ? _Scary->_Myhead->_Parent : _Hinode->_Left; // continue scan for upper bound

  00068	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0006c	8b da		 mov	 ebx, edx
  0006e	75 02		 jne	 SHORT $LN16@erase
  00070	8b 1e		 mov	 ebx, DWORD PTR [esi]
$LN16@erase:

; 1718 :         while (!_Pnode->_Isnil) {

  00072	80 7b 0d 00	 cmp	 BYTE PTR [ebx+13], 0
  00076	75 23		 jne	 SHORT $LN8@erase
$LL7@erase:

; 1719 :             if (_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Pnode->_Myval))) {

  00078	8d 43 10	 lea	 eax, DWORD PTR [ebx+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  0007b	50		 push	 eax
  0007c	51		 push	 ecx
  0007d	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  00082	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1719 :             if (_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Pnode->_Myval))) {

  00085	84 c0		 test	 al, al
  00087	74 06		 je	 SHORT $LN12@erase

; 1720 :                 // _Pnode greater than _Keyval, remember it
; 1721 :                 _Hinode = _Pnode;

  00089	8b f3		 mov	 esi, ebx

; 1722 :                 _Pnode  = _Pnode->_Left; // descend left subtree

  0008b	8b 1b		 mov	 ebx, DWORD PTR [ebx]

; 1723 :             } else {

  0008d	eb 03		 jmp	 SHORT $LN13@erase
$LN12@erase:

; 1724 :                 _Pnode = _Pnode->_Right; // descend right subtree

  0008f	8b 5b 08	 mov	 ebx, DWORD PTR [ebx+8]
$LN13@erase:

; 1718 :         while (!_Pnode->_Isnil) {

  00092	80 7b 0d 00	 cmp	 BYTE PTR [ebx+13], 0
  00096	8b 4d 08	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00099	74 dd		 je	 SHORT $LL7@erase
$LN8@erase:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 1695 :         auto _UFirst             = _STD _Get_unwrapped(_First);

  0009b	8b c7		 mov	 eax, edi

; 1696 :         const auto _ULast        = _STD _Get_unwrapped(_Last);
; 1697 :         _Iter_diff_t<_InIt> _Off = 0;

  0009d	33 db		 xor	 ebx, ebx
  0009f	89 5d f4	 mov	 DWORD PTR __Off$1$[ebp], ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 96   :         return _Ptr == _Right._Ptr;

  000a2	3b c6		 cmp	 eax, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 1698 :         for (; _UFirst != _ULast; ++_UFirst) {

  000a4	74 4d		 je	 SHORT $LN41@erase
$LL42@erase:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 50   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  000a6	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 1699 :             ++_Off;

  000a9	43		 inc	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 50   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  000aa	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000ae	74 24		 je	 SHORT $LN47@erase

; 51   :             _Nodeptr _Pnode;
; 52   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  000b0	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000b3	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000b7	75 17		 jne	 SHORT $LN118@erase
  000b9	0f 1f 80 00 00
	00 00		 npad	 7
$LL45@erase:
  000c0	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  000c3	75 0b		 jne	 SHORT $LN118@erase

; 53   :                 _Ptr = _Pnode; // ==> parent while right subtree

  000c5	8b c1		 mov	 eax, ecx
  000c7	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000ca	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000ce	74 f0		 je	 SHORT $LL45@erase
$LN118@erase:

; 54   :             }
; 55   : 
; 56   :             _Ptr = _Pnode; // ==> parent (head if end())

  000d0	8b c1		 mov	 eax, ecx

; 57   :         } else {

  000d2	eb 18		 jmp	 SHORT $LN53@erase
$LN47@erase:

; 58   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree

  000d4	8b c1		 mov	 eax, ecx

; 466  :         while (!_Pnode->_Left->_Isnil) {

  000d6	8b 10		 mov	 edx, DWORD PTR [eax]
  000d8	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  000dc	75 0e		 jne	 SHORT $LN53@erase
  000de	66 90		 npad	 2
$LL52@erase:
  000e0	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 467  :             _Pnode = _Pnode->_Left;

  000e2	8b c2		 mov	 eax, edx
  000e4	8b d1		 mov	 edx, ecx
  000e6	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000ea	74 f4		 je	 SHORT $LL52@erase
$LN53@erase:

; 96   :         return _Ptr == _Right._Ptr;

  000ec	3b c6		 cmp	 eax, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 1698 :         for (; _UFirst != _ULast; ++_UFirst) {

  000ee	75 b6		 jne	 SHORT $LL42@erase
  000f0	89 5d f4	 mov	 DWORD PTR __Off$1$[ebp], ebx
$LN41@erase:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 96   :         return _Ptr == _Right._Ptr;

  000f3	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]

; 1319 :         _Erase_unchecked(_First, _Last);

  000f6	89 7d 08	 mov	 DWORD PTR __First$[ebp], edi

; 96   :         return _Ptr == _Right._Ptr;

  000f9	3b 38		 cmp	 edi, DWORD PTR [eax]

; 1301 :         if (_First == _Begin && _Last._Ptr->_Isnil) {

  000fb	75 31		 jne	 SHORT $LN100@erase
  000fd	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00101	74 2b		 je	 SHORT $LN100@erase

; 1364 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  00103	ff 70 04	 push	 DWORD PTR [eax+4]
  00106	8b 75 f8	 mov	 esi, DWORD PTR _this$1$[ebp]
  00109	8b ce		 mov	 ecx, esi
  0010b	56		 push	 esi
  0010c	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >

; 1365 :         _Head->_Parent  = _Head;

  00111	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]
  00114	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1366 :         _Head->_Left    = _Head;

  00117	89 00		 mov	 DWORD PTR [eax], eax

; 1367 :         _Head->_Right   = _Head;

  00119	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 1368 :         _Scary->_Mysize = 0;

  0011c	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
$LN117@erase:
  00123	5f		 pop	 edi

; 1348 :         return _Erase(_Eqrange(_Keyval));
; 1349 :     }

  00124	5e		 pop	 esi
  00125	8b c3		 mov	 eax, ebx
  00127	5b		 pop	 ebx
  00128	8b e5		 mov	 esp, ebp
  0012a	5d		 pop	 ebp
  0012b	c2 04 00	 ret	 4
$LN100@erase:

; 96   :         return _Ptr == _Right._Ptr;

  0012e	3b fe		 cmp	 edi, esi

; 1308 :         while (_First != _Last) {

  00130	74 f1		 je	 SHORT $LN117@erase
  00132	8b 5d f8	 mov	 ebx, DWORD PTR _this$1$[ebp]
$LL63@erase:

; 66   :         ++*this;

  00135	8d 4d 08	 lea	 ecx, DWORD PTR __First$[ebp]
  00138	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >,std::_Iterator_base0>::operator++

; 1293 :         _Nodeptr _Erasednode = _Scary->_Extract(_Where); // node to erase

  0013d	57		 push	 edi
  0013e	8b cb		 mov	 ecx, ebx
  00140	e8 00 00 00 00	 call	 ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >::_Extract

; 1294 :         _Scary->_Orphan_ptr(_Erasednode);
; 1295 :         _Node::_Freenode(_Getal(), _Erasednode); // delete erased node

  00145	50		 push	 eax
  00146	53		 push	 ebx
  00147	e8 00 00 00 00	 call	 ??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *>::_Freenode<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >

; 96   :         return _Ptr == _Right._Ptr;

  0014c	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]

; 1295 :         _Node::_Freenode(_Getal(), _Erasednode); // delete erased node

  0014f	83 c4 08	 add	 esp, 8

; 96   :         return _Ptr == _Right._Ptr;

  00152	3b fe		 cmp	 edi, esi

; 1308 :         while (_First != _Last) {

  00154	75 df		 jne	 SHORT $LL63@erase

; 1348 :         return _Erase(_Eqrange(_Keyval));
; 1349 :     }

  00156	8b 45 f4	 mov	 eax, DWORD PTR __Off$1$[ebp]
  00159	5f		 pop	 edi
  0015a	5e		 pop	 esi
  0015b	5b		 pop	 ebx
  0015c	8b e5		 mov	 esp, ebp
  0015e	5d		 pop	 ebp
  0015f	c2 04 00	 ret	 4
?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@2@$0A@@std@@@std@@QAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,float,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> >,0> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
;	COMDAT ?GetSoundInstance3D@CSoundManager@@IAEHPBDPAPAVISoundInstance@@@Z
_TEXT	SEGMENT
_c_szFileName$ = 8					; size = 4
_ppInstance$ = 12					; size = 4
?GetSoundInstance3D@CSoundManager@@IAEHPBDPAPAVISoundInstance@@@Z PROC ; CSoundManager::GetSoundInstance3D, COMDAT
; _this$ = ecx

; 305  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 306  : 	int iIndex = ms_SoundManager3D.SetInstance(c_szFileName);

  00003	ff 75 08	 push	 DWORD PTR _c_szFileName$[ebp]
  00006	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManager3D@CSoundManager@@1VCSoundManager3D@@A ; CSoundManager::ms_SoundManager3D
  0000b	e8 00 00 00 00	 call	 ?SetInstance@CSoundManager3D@@QAEHPBD@Z ; CSoundManager3D::SetInstance

; 307  : 
; 308  : 	if (-1 == iIndex)

  00010	83 f8 ff	 cmp	 eax, -1
  00013	74 1d		 je	 SHORT $LN5@GetSoundIn

; 309  : 		return FALSE;
; 310  : 
; 311  : 	*ppInstance = ms_SoundManager3D.GetInstance(iIndex);

  00015	50		 push	 eax
  00016	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManager3D@CSoundManager@@1VCSoundManager3D@@A ; CSoundManager::ms_SoundManager3D
  0001b	e8 00 00 00 00	 call	 ?GetInstance@CSoundManager3D@@QAEPAVISoundInstance@@K@Z ; CSoundManager3D::GetInstance
  00020	8b 4d 0c	 mov	 ecx, DWORD PTR _ppInstance$[ebp]
  00023	8b d0		 mov	 edx, eax

; 312  : 
; 313  : 	if (!*ppInstance)

  00025	33 c0		 xor	 eax, eax
  00027	85 d2		 test	 edx, edx
  00029	0f 95 c0	 setne	 al
  0002c	89 11		 mov	 DWORD PTR [ecx], edx

; 315  : 
; 316  : 	return TRUE;
; 317  : }

  0002e	5d		 pop	 ebp
  0002f	c2 08 00	 ret	 8
$LN5@GetSoundIn:

; 314  : 		return FALSE;

  00032	33 c0		 xor	 eax, eax

; 315  : 
; 316  : 	return TRUE;
; 317  : }

  00034	5d		 pop	 ebp
  00035	c2 08 00	 ret	 8
?GetSoundInstance3D@CSoundManager@@IAEHPBDPAPAVISoundInstance@@@Z ENDP ; CSoundManager::GetSoundInstance3D
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
;	COMDAT ?GetSoundInstance2D@CSoundManager@@IAEHPBDPAPAVISoundInstance@@@Z
_TEXT	SEGMENT
_c_szSoundFileName$ = 8					; size = 4
_ppInstance$ = 12					; size = 4
?GetSoundInstance2D@CSoundManager@@IAEHPBDPAPAVISoundInstance@@@Z PROC ; CSoundManager::GetSoundInstance2D, COMDAT
; _this$ = ecx

; 295  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 296  : 	*ppInstance = ms_SoundManager2D.GetInstance(c_szSoundFileName);

  00003	ff 75 08	 push	 DWORD PTR _c_szSoundFileName$[ebp]
  00006	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManager2D@CSoundManager@@1VCSoundManager2D@@A ; CSoundManager::ms_SoundManager2D
  0000b	e8 00 00 00 00	 call	 ?GetInstance@CSoundManager2D@@QAEPAVISoundInstance@@PBD@Z ; CSoundManager2D::GetInstance
  00010	8b 4d 0c	 mov	 ecx, DWORD PTR _ppInstance$[ebp]
  00013	8b d0		 mov	 edx, eax

; 297  : 
; 298  : 	if (!*ppInstance)

  00015	33 c0		 xor	 eax, eax
  00017	85 d2		 test	 edx, edx
  00019	0f 95 c0	 setne	 al
  0001c	89 11		 mov	 DWORD PTR [ecx], edx

; 299  : 		return FALSE;
; 300  : 
; 301  : 	return TRUE;
; 302  : }

  0001e	5d		 pop	 ebp
  0001f	c2 08 00	 ret	 8
?GetSoundInstance2D@CSoundManager@@IAEHPBDPAPAVISoundInstance@@@Z ENDP ; CSoundManager::GetSoundInstance2D
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
;	COMDAT ?__SetMusicVolume@CSoundManager@@IAEXM@Z
_TEXT	SEGMENT
_fVolume$ = 8						; size = 4
?__SetMusicVolume@CSoundManager@@IAEXM@Z PROC		; CSoundManager::__SetMusicVolume, COMDAT
; _this$ = ecx

; 214  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 215  : 	if (m_isSoundDisable)

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fVolume$[ebp]
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx
  0000b	83 7f 08 00	 cmp	 DWORD PTR [edi+8], 0
  0000f	74 0a		 je	 SHORT $LN5@SetMusicVo

; 216  : 	{
; 217  : 		m_fBackupMusicVolume = fVolume;

  00011	f3 0f 11 47 28	 movss	 DWORD PTR [edi+40], xmm0
  00016	5f		 pop	 edi

; 243  : 	}
; 244  : }

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
$LN5@SetMusicVo:

; 218  : 		return;
; 219  : 	}
; 220  : 
; 221  : 	fVolume = fMAX(fVolume, 0.0f);

  0001b	83 ec 08	 sub	 esp, 8
  0001e	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR [esp+4], 0
  00026	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0002b	e8 00 00 00 00	 call	 ?fMAX@@YAMMM@Z		; fMAX
  00030	d9 5d 08	 fstp	 DWORD PTR _fVolume$[ebp]

; 222  : 	fVolume = fMIN(fVolume, 1.0f);

  00033	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fVolume$[ebp]
  00038	c7 44 24 04 00
	00 80 3f	 mov	 DWORD PTR [esp+4], 1065353216 ; 3f800000H
  00040	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00045	e8 00 00 00 00	 call	 ?fMIN@@YAMMM@Z		; fMIN
  0004a	d9 5d 08	 fstp	 DWORD PTR _fVolume$[ebp]

; 223  : 	m_fMusicVolume = fVolume;

  0004d	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fVolume$[ebp]
  00052	83 c4 08	 add	 esp, 8

; 224  : 
; 225  : 	if (!m_isSoundDisable)

  00055	83 7f 08 00	 cmp	 DWORD PTR [edi+8], 0
  00059	f3 0f 11 47 24	 movss	 DWORD PTR [edi+36], xmm0
  0005e	75 05		 jne	 SHORT $LN6@SetMusicVo

; 226  : 	{
; 227  : 		m_fBackupMusicVolume = fVolume;

  00060	f3 0f 11 47 28	 movss	 DWORD PTR [edi+40], xmm0
$LN6@SetMusicVo:
  00065	56		 push	 esi

; 228  : 	}
; 229  : 
; 230  : 	for (int i = 0; i < CSoundManagerStream::MUSIC_INSTANCE_MAX_NUM; ++i)

  00066	33 f6		 xor	 esi, esi
  00068	83 c7 38	 add	 edi, 56			; 00000038H
  0006b	0f 1f 44 00 00	 npad	 5
$LL4@SetMusicVo:

; 231  : 	{
; 232  : 		TMusicInstance & rMusicInstance = m_MusicInstances[i];
; 233  : 		if (MUSIC_STATE_OFF == rMusicInstance.MusicState)

  00070	8b 47 fc	 mov	 eax, DWORD PTR [edi-4]
  00073	85 c0		 test	 eax, eax
  00075	74 2f		 je	 SHORT $LN2@SetMusicVo

; 234  : 			continue;
; 235  : 		if (MUSIC_STATE_FADE_OUT == rMusicInstance.MusicState)

  00077	83 f8 03	 cmp	 eax, 3
  0007a	74 2a		 je	 SHORT $LN2@SetMusicVo

; 236  : 			continue;
; 237  : 
; 238  : 		rMusicInstance.fVolume = fVolume;
; 239  : 
; 240  : 		CSoundInstanceStream * pInstance = ms_SoundManagerStream.GetInstance(i);

  0007c	56		 push	 esi
  0007d	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManagerStream@CSoundManager@@1VCSoundManagerStream@@A ; CSoundManager::ms_SoundManagerStream
  00082	f3 0f 11 07	 movss	 DWORD PTR [edi], xmm0
  00086	e8 00 00 00 00	 call	 ?GetInstance@CSoundManagerStream@@QAEPAVCSoundInstanceStream@@K@Z ; CSoundManagerStream::GetInstance

; 241  : 		if (pInstance)

  0008b	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fVolume$[ebp]
  00090	85 c0		 test	 eax, eax
  00092	74 12		 je	 SHORT $LN2@SetMusicVo

; 242  : 			pInstance->SetVolume(fVolume);

  00094	8b 10		 mov	 edx, DWORD PTR [eax]
  00096	51		 push	 ecx
  00097	8b c8		 mov	 ecx, eax
  00099	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009e	ff 52 24	 call	 DWORD PTR [edx+36]
  000a1	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fVolume$[ebp]
$LN2@SetMusicVo:

; 228  : 	}
; 229  : 
; 230  : 	for (int i = 0; i < CSoundManagerStream::MUSIC_INSTANCE_MAX_NUM; ++i)

  000a6	46		 inc	 esi
  000a7	83 c7 14	 add	 edi, 20			; 00000014H
  000aa	83 fe 03	 cmp	 esi, 3
  000ad	7c c1		 jl	 SHORT $LL4@SetMusicVo
  000af	5e		 pop	 esi
  000b0	5f		 pop	 edi

; 243  : 	}
; 244  : }

  000b1	5d		 pop	 ebp
  000b2	c2 04 00	 ret	 4
?__SetMusicVolume@CSoundManager@@IAEXM@Z ENDP		; CSoundManager::__SetMusicVolume
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
;	COMDAT ?__ConvertRatioVolumeToApplyVolume@CSoundManager@@IAEMM@Z
_TEXT	SEGMENT
_fRatioVolume$ = 8					; size = 4
tv75 = 8						; size = 4
?__ConvertRatioVolumeToApplyVolume@CSoundManager@@IAEMM@Z PROC ; CSoundManager::__ConvertRatioVolumeToApplyVolume, COMDAT
; _this$ = ecx

; 247  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 248  : 	if (0.1f>fRatioVolume)

  00003	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  0000b	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _fRatioVolume$[ebp]
  00010	0f 2f c1	 comiss	 xmm0, xmm1
  00013	76 07		 jbe	 SHORT $LN2@ConvertRat

; 249  : 		return fRatioVolume;

  00015	d9 45 08	 fld	 DWORD PTR _fRatioVolume$[ebp]

; 252  : }

  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
$LN2@ConvertRat:

; 250  : 
; 251  : 	return (float)pow(10.0f, (-1.0f + fRatioVolume));

  0001c	f3 0f 5c 0d 00
	00 00 00	 subss	 xmm1, DWORD PTR __real@3f800000
  00024	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4024000000000000
  0002c	0f 5a c9	 cvtps2pd xmm1, xmm1
  0002f	e8 00 00 00 00	 call	 __libm_sse2_pow_precise
  00034	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00038	f3 0f 11 45 08	 movss	 DWORD PTR tv75[ebp], xmm0
  0003d	d9 45 08	 fld	 DWORD PTR tv75[ebp]

; 252  : }

  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
?__ConvertRatioVolumeToApplyVolume@CSoundManager@@IAEMM@Z ENDP ; CSoundManager::__ConvertRatioVolumeToApplyVolume
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
;	COMDAT ?__ConvertGradeVolumeToApplyVolume@CSoundManager@@IAEMH@Z
_TEXT	SEGMENT
_nGradeVolume$ = 8					; size = 4
?__ConvertGradeVolumeToApplyVolume@CSoundManager@@IAEMH@Z PROC ; CSoundManager::__ConvertGradeVolumeToApplyVolume, COMDAT
; _this$ = ecx

; 255  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	66 0f 6e 45 08	 movd	 xmm0, DWORD PTR _nGradeVolume$[ebp]

; 256  : 	return __ConvertRatioVolumeToApplyVolume(nGradeVolume/5.0f);

  00008	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0000b	51		 push	 ecx
  0000c	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40a00000
  00014	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00019	e8 00 00 00 00	 call	 ?__ConvertRatioVolumeToApplyVolume@CSoundManager@@IAEMM@Z ; CSoundManager::__ConvertRatioVolumeToApplyVolume

; 257  : }

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?__ConvertGradeVolumeToApplyVolume@CSoundManager@@IAEMH@Z ENDP ; CSoundManager::__ConvertGradeVolumeToApplyVolume
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
;	COMDAT ?GetMusicIndex@CSoundManager@@IAEHPBDPAK@Z
_TEXT	SEGMENT
_strFileName$ = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szFileName$ = 8					; size = 4
_pdwIndex$ = 12						; size = 4
?GetMusicIndex@CSoundManager@@IAEHPBDPAK@Z PROC		; CSoundManager::GetMusicIndex, COMDAT
; _this$ = ecx

; 615  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetMusicIndex@CSoundManager@@IAEHPBDPAK@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b f1		 mov	 esi, ecx
  0002c	8b 45 08	 mov	 eax, DWORD PTR _c_szFileName$[ebp]
  0002f	0f 57 c0	 xorps	 xmm0, xmm0
  00032	8b 7d 0c	 mov	 edi, DWORD PTR _pdwIndex$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00035	0f 11 45 d8	 movups	 XMMWORD PTR _strFileName$[ebp], xmm0

; 836  :         _My_data._Mysize = 0;

  00039	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _strFileName$[ebp+16], 0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  00040	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _strFileName$[ebp+20], 15 ; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00047	c6 45 d8 00	 mov	 BYTE PTR _strFileName$[ebp], 0
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp

; 617  : 	StringPath(c_szFileName, strFileName);

  0004b	8d 4d d8	 lea	 ecx, DWORD PTR _strFileName$[ebp]
  0004e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00055	51		 push	 ecx
  00056	50		 push	 eax
  00057	e8 00 00 00 00	 call	 ?StringPath@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; StringPath
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0005c	83 7d ec 0f	 cmp	 DWORD PTR _strFileName$[ebp+20], 15 ; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  00060	8d 45 d8	 lea	 eax, DWORD PTR _strFileName$[ebp]
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp

; 618  : 	DWORD dwCRC = GetCaseCRC32(strFileName.c_str(), strFileName.length());

  00063	ff 75 e8	 push	 DWORD PTR _strFileName$[ebp+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  00066	0f 47 45 d8	 cmova	 eax, DWORD PTR _strFileName$[ebp]
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp

; 618  : 	DWORD dwCRC = GetCaseCRC32(strFileName.c_str(), strFileName.length());

  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ?GetCaseCRC32@@YAKPBDI@Z ; GetCaseCRC32
  00070	83 c4 10	 add	 esp, 16			; 00000010H
  00073	8d 4e 30	 lea	 ecx, DWORD PTR [esi+48]

; 619  : 
; 620  : 	for (int i = 0; i < CSoundManagerStream::MUSIC_INSTANCE_MAX_NUM; ++i)

  00076	33 d2		 xor	 edx, edx
$LL4@GetMusicIn:

; 621  : 	{
; 622  : 		const TMusicInstance & c_rMusicInstance = m_MusicInstances[i];
; 623  : 		if (MUSIC_STATE_OFF != c_rMusicInstance.MusicState)

  00078	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  0007c	74 04		 je	 SHORT $LN2@GetMusicIn

; 624  : 		if (c_rMusicInstance.dwMusicFileNameCRC == dwCRC)

  0007e	39 01		 cmp	 DWORD PTR [ecx], eax
  00080	74 33		 je	 SHORT $LN97@GetMusicIn
$LN2@GetMusicIn:

; 619  : 
; 620  : 	for (int i = 0; i < CSoundManagerStream::MUSIC_INSTANCE_MAX_NUM; ++i)

  00082	42		 inc	 edx
  00083	83 c1 14	 add	 ecx, 20			; 00000014H
  00086	83 fa 03	 cmp	 edx, 3
  00089	7c ed		 jl	 SHORT $LL4@GetMusicIn

; 631  : 	return FALSE;

  0008b	33 f6		 xor	 esi, esi
$LN9@GetMusicIn:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0008d	8b 4d ec	 mov	 ecx, DWORD PTR _strFileName$[ebp+20]
  00090	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00093	76 33		 jbe	 SHORT $LN78@GetMusicIn
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00095	8b 55 d8	 mov	 edx, DWORD PTR _strFileName$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00098	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00099	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0009b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000a1	72 1b		 jb	 SHORT $LN89@GetMusicIn

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000a3	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000a6	83 c1 23	 add	 ecx, 35			; 00000023H
  000a9	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ab	83 c0 fc	 add	 eax, -4			; fffffffcH
  000ae	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000b1	77 34		 ja	 SHORT $LN105@GetMusicIn
  000b3	eb 09		 jmp	 SHORT $LN89@GetMusicIn
$LN97@GetMusicIn:
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp

; 626  : 			*pdwIndex = i;

  000b5	89 17		 mov	 DWORD PTR [edi], edx
  000b7	be 01 00 00 00	 mov	 esi, 1
  000bc	eb cf		 jmp	 SHORT $LN9@GetMusicIn
$LN89@GetMusicIn:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  000be	51		 push	 ecx
  000bf	52		 push	 edx
  000c0	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000c5	83 c4 08	 add	 esp, 8
$LN78@GetMusicIn:
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp

; 631  : 	return FALSE;

  000c8	8b c6		 mov	 eax, esi

; 632  : }

  000ca	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000cd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d4	59		 pop	 ecx
  000d5	5f		 pop	 edi
  000d6	5e		 pop	 esi
  000d7	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000da	33 cd		 xor	 ecx, ebp
  000dc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e1	8b e5		 mov	 esp, ebp
  000e3	5d		 pop	 ebp
  000e4	c2 08 00	 ret	 8
$LN105@GetMusicIn:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000e7	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN103@GetMusicIn:
  000ec	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetMusicIndex@CSoundManager@@IAEHPBDPAK@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _strFileName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?GetMusicIndex@CSoundManager@@IAEHPBDPAK@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetMusicIndex@CSoundManager@@IAEHPBDPAK@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetMusicIndex@CSoundManager@@IAEHPBDPAK@Z ENDP		; CSoundManager::GetMusicIndex
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
;	COMDAT ?StopMusic@CSoundManager@@IAEXK@Z
_TEXT	SEGMENT
_dwIndex$ = 8						; size = 4
?StopMusic@CSoundManager@@IAEXK@Z PROC			; CSoundManager::StopMusic, COMDAT
; _this$ = ecx

; 597  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 598  : 	if (dwIndex >= CSoundManagerStream::MUSIC_INSTANCE_MAX_NUM)

  00004	8b 75 08	 mov	 esi, DWORD PTR _dwIndex$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	83 fe 03	 cmp	 esi, 3
  0000d	73 39		 jae	 SHORT $LN1@StopMusic

; 599  : 		return;
; 600  : 
; 601  : 	CSoundInstanceStream * pInstance = ms_SoundManagerStream.GetInstance(dwIndex);

  0000f	56		 push	 esi
  00010	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManagerStream@CSoundManager@@1VCSoundManagerStream@@A ; CSoundManager::ms_SoundManagerStream
  00015	e8 00 00 00 00	 call	 ?GetInstance@CSoundManagerStream@@QAEPAVCSoundInstanceStream@@K@Z ; CSoundManagerStream::GetInstance

; 602  : 	if (!pInstance)

  0001a	85 c0		 test	 eax, eax
  0001c	74 2a		 je	 SHORT $LN1@StopMusic

; 603  : 		return;
; 604  : 
; 605  : 	pInstance->Stop();

  0001e	8b 10		 mov	 edx, DWORD PTR [eax]
  00020	8b c8		 mov	 ecx, eax
  00022	ff 52 1c	 call	 DWORD PTR [edx+28]

; 606  : 
; 607  : 	TMusicInstance & rMusicInstance = m_MusicInstances[dwIndex];

  00025	8d 04 b6	 lea	 eax, DWORD PTR [esi+esi*4]

; 608  : 	rMusicInstance.fVolume = 0.0f;

  00028	c7 44 87 38 00
	00 00 00	 mov	 DWORD PTR [edi+eax*4+56], 0

; 609  : 	rMusicInstance.fVolumeSpeed = 0.0f;

  00030	c7 44 87 40 00
	00 00 00	 mov	 DWORD PTR [edi+eax*4+64], 0

; 610  : 	rMusicInstance.MusicState = MUSIC_STATE_OFF;

  00038	c7 44 87 34 00
	00 00 00	 mov	 DWORD PTR [edi+eax*4+52], 0

; 611  : 	rMusicInstance.dwMusicFileNameCRC = 0;

  00040	c7 44 87 30 00
	00 00 00	 mov	 DWORD PTR [edi+eax*4+48], 0
$LN1@StopMusic:

; 612  : }

  00048	5f		 pop	 edi
  00049	5e		 pop	 esi
  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
?StopMusic@CSoundManager@@IAEXK@Z ENDP			; CSoundManager::StopMusic
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
;	COMDAT ?PlayMusic@CSoundManager@@IAEXKPBDMM@Z
_TEXT	SEGMENT
_pInstance$1$ = -48					; size = 4
_this$GSCopy$1$ = -44					; size = 4
_strFileName$ = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_dwIndex$ = 8						; size = 4
_c_szFileName$ = 12					; size = 4
_fVolume$ = 16						; size = 4
_fVolumeSpeed$ = 20					; size = 4
?PlayMusic@CSoundManager@@IAEXKPBDMM@Z PROC		; CSoundManager::PlayMusic, COMDAT
; _this$ = ecx

; 566  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PlayMusic@CSoundManager@@IAEXKPBDMM@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d d4	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  0002d	8b 75 08	 mov	 esi, DWORD PTR _dwIndex$[ebp]
  00030	8b 7d 0c	 mov	 edi, DWORD PTR _c_szFileName$[ebp]

; 567  : 	if (dwIndex >= CSoundManagerStream::MUSIC_INSTANCE_MAX_NUM)

  00033	83 fe 03	 cmp	 esi, 3
  00036	0f 83 fc 00 00
	00		 jae	 $LN60@PlayMusic

; 568  : 		return;
; 569  : 
; 570  : 	if (!ms_SoundManagerStream.SetInstance(dwIndex, c_szFileName))

  0003c	57		 push	 edi
  0003d	56		 push	 esi
  0003e	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManagerStream@CSoundManager@@1VCSoundManagerStream@@A ; CSoundManager::ms_SoundManagerStream
  00043	e8 00 00 00 00	 call	 ?SetInstance@CSoundManagerStream@@QAE_NKPBD@Z ; CSoundManagerStream::SetInstance
  00048	84 c0		 test	 al, al
  0004a	75 10		 jne	 SHORT $LN3@PlayMusic

; 571  : 	{
; 572  : 		TraceError("CSoundManager::PlayMusic - Failed to load stream sound : %s", c_szFileName);

  0004c	57		 push	 edi
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@BCCLJDHL@CSoundManager?3?3PlayMusic?5?9?5Fail@
  00052	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError

; 573  : 		return;

  00057	e9 d9 00 00 00	 jmp	 $LN80@PlayMusic
$LN3@PlayMusic:

; 574  : 	}
; 575  : 
; 576  : 	CSoundInstanceStream * pInstance = ms_SoundManagerStream.GetInstance(dwIndex);

  0005c	56		 push	 esi
  0005d	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManagerStream@CSoundManager@@1VCSoundManagerStream@@A ; CSoundManager::ms_SoundManagerStream
  00062	e8 00 00 00 00	 call	 ?GetInstance@CSoundManagerStream@@QAEPAVCSoundInstanceStream@@K@Z ; CSoundManagerStream::GetInstance
  00067	8b c8		 mov	 ecx, eax
  00069	89 4d d0	 mov	 DWORD PTR _pInstance$1$[ebp], ecx

; 577  : 	if (!pInstance)

  0006c	85 c9		 test	 ecx, ecx
  0006e	75 10		 jne	 SHORT $LN4@PlayMusic

; 578  : 	{
; 579  : 		TraceError("CSoundManager::PlayMusic - There is no stream sound instance : %s", c_szFileName);

  00070	57		 push	 edi
  00071	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@EPLOEFBK@CSoundManager?3?3PlayMusic?5?9?5Ther@
  00076	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError

; 580  : 		return;

  0007b	e9 b5 00 00 00	 jmp	 $LN80@PlayMusic
$LN4@PlayMusic:

; 581  : 	}
; 582  : 
; 583  : 	pInstance->SetVolume(fVolume);

  00080	8b 01		 mov	 eax, DWORD PTR [ecx]
  00082	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fVolume$[ebp]
  00087	51		 push	 ecx
  00088	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008d	ff 50 24	 call	 DWORD PTR [eax+36]

; 584  : 	pInstance->Play(0);

  00090	8b 4d d0	 mov	 ecx, DWORD PTR _pInstance$1$[ebp]
  00093	6a 00		 push	 0
  00095	6a 00		 push	 0
  00097	8b 01		 mov	 eax, DWORD PTR [ecx]
  00099	ff 50 10	 call	 DWORD PTR [eax+16]

; 587  : 	rMusicInstance.fVolume = fVolume;

  0009c	8b 45 d4	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  0009f	8d 34 b6	 lea	 esi, DWORD PTR [esi+esi*4]
  000a2	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fVolume$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 836  :         _My_data._Mysize = 0;

  000a7	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _strFileName$[ebp+16], 0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  000ae	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _strFileName$[ebp+20], 15 ; 0000000fH
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp

; 587  : 	rMusicInstance.fVolume = fVolume;

  000b5	f3 0f 11 44 b0
	38		 movss	 DWORD PTR [eax+esi*4+56], xmm0

; 588  : 	rMusicInstance.fVolumeSpeed = fVolumeSpeed;

  000bb	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _fVolumeSpeed$[ebp]
  000c0	f3 0f 11 44 b0
	40		 movss	 DWORD PTR [eax+esi*4+64], xmm0
  000c6	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000c9	0f 11 45 d8	 movups	 XMMWORD PTR _strFileName$[ebp], xmm0
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp

; 589  : 	rMusicInstance.MusicState = MUSIC_STATE_FADE_IN;

  000cd	c7 44 b0 34 02
	00 00 00	 mov	 DWORD PTR [eax+esi*4+52], 2
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000d5	c6 45 d8 00	 mov	 BYTE PTR _strFileName$[ebp], 0
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp

; 592  : 	StringPath(c_szFileName, strFileName);

  000d9	8d 45 d8	 lea	 eax, DWORD PTR _strFileName$[ebp]
  000dc	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000e3	50		 push	 eax
  000e4	57		 push	 edi
  000e5	e8 00 00 00 00	 call	 ?StringPath@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; StringPath
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  000ea	83 7d ec 0f	 cmp	 DWORD PTR _strFileName$[ebp+20], 15 ; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  000ee	8d 45 d8	 lea	 eax, DWORD PTR _strFileName$[ebp]
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp

; 593  : 	rMusicInstance.dwMusicFileNameCRC = GetCaseCRC32(strFileName.c_str(), strFileName.length());

  000f1	ff 75 e8	 push	 DWORD PTR _strFileName$[ebp+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  000f4	0f 47 45 d8	 cmova	 eax, DWORD PTR _strFileName$[ebp]
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp

; 593  : 	rMusicInstance.dwMusicFileNameCRC = GetCaseCRC32(strFileName.c_str(), strFileName.length());

  000f8	50		 push	 eax
  000f9	e8 00 00 00 00	 call	 ?GetCaseCRC32@@YAKPBDI@Z ; GetCaseCRC32
  000fe	8b 4d d4	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00101	83 c4 10	 add	 esp, 16			; 00000010H
  00104	89 44 b1 30	 mov	 DWORD PTR [ecx+esi*4+48], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00108	8b 4d ec	 mov	 ecx, DWORD PTR _strFileName$[ebp+20]
  0010b	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0010e	76 28		 jbe	 SHORT $LN60@PlayMusic
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00110	8b 55 d8	 mov	 edx, DWORD PTR _strFileName$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00113	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00114	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00116	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0011c	72 10		 jb	 SHORT $LN71@PlayMusic

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0011e	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00121	83 c1 23	 add	 ecx, 35			; 00000023H
  00124	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00126	83 c0 fc	 add	 eax, -4			; fffffffcH
  00129	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0012c	77 27		 ja	 SHORT $LN82@PlayMusic
$LN71@PlayMusic:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0012e	51		 push	 ecx
  0012f	52		 push	 edx
  00130	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
$LN80@PlayMusic:
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp

; 594  : }

  00135	83 c4 08	 add	 esp, 8
$LN60@PlayMusic:
  00138	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0013b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00142	59		 pop	 ecx
  00143	5f		 pop	 edi
  00144	5e		 pop	 esi
  00145	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00148	33 cd		 xor	 ecx, ebp
  0014a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0014f	8b e5		 mov	 esp, ebp
  00151	5d		 pop	 ebp
  00152	c2 10 00	 ret	 16			; 00000010H
$LN82@PlayMusic:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00155	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN79@PlayMusic:
  0015a	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PlayMusic@CSoundManager@@IAEXKPBDMM@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _strFileName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?PlayMusic@CSoundManager@@IAEXKPBDMM@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PlayMusic@CSoundManager@@IAEXKPBDMM@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PlayMusic@CSoundManager@@IAEXKPBDMM@Z ENDP		; CSoundManager::PlayMusic
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
;	COMDAT ?UpdateSoundInstance@CSoundManager@@QAEXKPBV?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@@Z
_TEXT	SEGMENT
_this$1$ = -8						; size = 4
_i$1$ = -4						; size = 4
_dwcurFrame$ = 8					; size = 4
_c_pSoundInstanceVector$ = 12				; size = 4
?UpdateSoundInstance@CSoundManager@@QAEXKPBV?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@@Z PROC ; CSoundManager::UpdateSoundInstance, COMDAT
; _this$ = ecx

; 168  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR _c_pSoundInstanceVector$[ebp]
  0000a	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp

; 168  : {

  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	89 4d f8	 mov	 DWORD PTR _this$1$[ebp], ecx

; 169  : 	for (DWORD i = 0; i < c_pSoundInstanceVector->size(); ++i)

  00014	33 c9		 xor	 ecx, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00016	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  00019	8b f7		 mov	 esi, edi
  0001b	8b 1b		 mov	 ebx, DWORD PTR [ebx]
  0001d	2b f3		 sub	 esi, ebx
  0001f	f7 ee		 imul	 esi
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp

; 169  : 	for (DWORD i = 0; i < c_pSoundInstanceVector->size(); ++i)

  00021	89 4d fc	 mov	 DWORD PTR _i$1$[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00024	03 d6		 add	 edx, esi
  00026	c1 fa 04	 sar	 edx, 4
  00029	8b c2		 mov	 eax, edx
  0002b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0002e	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp

; 169  : 	for (DWORD i = 0; i < c_pSoundInstanceVector->size(); ++i)

  00030	74 69		 je	 SHORT $LN3@UpdateSoun
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1899 :         auto& _My_data = _Mypair._Myval2;

  00032	33 f6		 xor	 esi, esi
$LL4@UpdateSoun:

; 1943 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00034	2b fb		 sub	 edi, ebx
  00036	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0003b	f7 ef		 imul	 edi
  0003d	03 d7		 add	 edx, edi
  0003f	c1 fa 04	 sar	 edx, 4
  00042	8b c2		 mov	 eax, edx
  00044	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00047	03 c2		 add	 eax, edx
  00049	3b c1		 cmp	 eax, ecx
  0004b	76 57		 jbe	 SHORT $LN25@UpdateSoun
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp

; 173  : 		if (c_rSoundInstance.dwFrame == dwcurFrame)

  0004d	8b 45 08	 mov	 eax, DWORD PTR _dwcurFrame$[ebp]
  00050	39 04 1e	 cmp	 DWORD PTR [esi+ebx], eax
  00053	75 19		 jne	 SHORT $LN2@UpdateSoun
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2328 :         return _Mypair._Myval2._Myptr();

  00055	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  00058	03 c6		 add	 eax, esi

; 434  :         return _Myres > _Small_string_capacity;

  0005a	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  0005e	76 02		 jbe	 SHORT $LN18@UpdateSoun

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00060	8b 00		 mov	 eax, DWORD PTR [eax]
$LN18@UpdateSoun:
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp

; 175  : 			PlaySound2D(c_rSoundInstance.strSoundFileName.c_str());

  00062	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ?PlaySound2D@CSoundManager@@QAEXPBD@Z ; CSoundManager::PlaySound2D
  0006b	8b 4d fc	 mov	 ecx, DWORD PTR _i$1$[ebp]
$LN2@UpdateSoun:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0006e	8b 45 0c	 mov	 eax, DWORD PTR _c_pSoundInstanceVector$[ebp]
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp

; 169  : 	for (DWORD i = 0; i < c_pSoundInstanceVector->size(); ++i)

  00071	41		 inc	 ecx
  00072	89 4d fc	 mov	 DWORD PTR _i$1$[ebp], ecx
  00075	83 c6 1c	 add	 esi, 28			; 0000001cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00078	8b 78 04	 mov	 edi, DWORD PTR [eax+4]
  0007b	8b cf		 mov	 ecx, edi
  0007d	8b 18		 mov	 ebx, DWORD PTR [eax]
  0007f	2b cb		 sub	 ecx, ebx
  00081	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00086	f7 e9		 imul	 ecx
  00088	03 d1		 add	 edx, ecx
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp

; 169  : 	for (DWORD i = 0; i < c_pSoundInstanceVector->size(); ++i)

  0008a	8b 4d fc	 mov	 ecx, DWORD PTR _i$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0008d	c1 fa 04	 sar	 edx, 4
  00090	8b c2		 mov	 eax, edx
  00092	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00095	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp

; 169  : 	for (DWORD i = 0; i < c_pSoundInstanceVector->size(); ++i)

  00097	3b c8		 cmp	 ecx, eax
  00099	72 99		 jb	 SHORT $LL4@UpdateSoun
$LN3@UpdateSoun:
  0009b	5f		 pop	 edi

; 178  : }

  0009c	5e		 pop	 esi
  0009d	5b		 pop	 ebx
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c2 08 00	 ret	 8
$LN25@UpdateSoun:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1944 :             _Xrange();

  000a4	e8 00 00 00 00	 call	 ?_Xrange@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@CAXXZ ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::_Xrange
$LN33@UpdateSoun:
  000a9	cc		 int	 3
?UpdateSoundInstance@CSoundManager@@QAEXKPBV?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@@Z ENDP ; CSoundManager::UpdateSoundInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
;	COMDAT ?UpdateSoundInstance@CSoundManager@@QAEXMMMKPBV?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@H@Z
_TEXT	SEGMENT
_this$1$ = -8						; size = 4
_i$1$ = -4						; size = 4
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
_dwcurFrame$ = 20					; size = 4
_c_pSoundInstanceVector$ = 24				; size = 4
_bCheckFrequency$ = 28					; size = 4
?UpdateSoundInstance@CSoundManager@@QAEXMMMKPBV?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@H@Z PROC ; CSoundManager::UpdateSoundInstance, COMDAT
; _this$ = ecx

; 158  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00009	8b 7d 18	 mov	 edi, DWORD PTR _c_pSoundInstanceVector$[ebp]
  0000c	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp

; 158  : {

  00011	89 4d f8	 mov	 DWORD PTR _this$1$[ebp], ecx

; 159  : 	for (DWORD i = 0; i < c_pSoundInstanceVector->size(); ++i)

  00014	33 c9		 xor	 ecx, ecx
  00016	89 4d fc	 mov	 DWORD PTR _i$1$[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00019	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]
  0001c	8b f3		 mov	 esi, ebx
  0001e	8b 3f		 mov	 edi, DWORD PTR [edi]
  00020	2b f7		 sub	 esi, edi
  00022	f7 ee		 imul	 esi
  00024	03 d6		 add	 edx, esi
  00026	c1 fa 04	 sar	 edx, 4
  00029	8b c2		 mov	 eax, edx
  0002b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0002e	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp

; 159  : 	for (DWORD i = 0; i < c_pSoundInstanceVector->size(); ++i)

  00030	0f 84 9f 00 00
	00		 je	 $LN3@UpdateSoun
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1899 :         auto& _My_data = _Mypair._Myval2;

  00036	33 f6		 xor	 esi, esi
  00038	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@UpdateSoun:

; 1943 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00040	2b df		 sub	 ebx, edi
  00042	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00047	f7 eb		 imul	 ebx
  00049	03 d3		 add	 edx, ebx
  0004b	c1 fa 04	 sar	 edx, 4
  0004e	8b c2		 mov	 eax, edx
  00050	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00053	03 c2		 add	 eax, edx
  00055	3b c1		 cmp	 eax, ecx
  00057	0f 86 81 00 00
	00		 jbe	 $LN25@UpdateSoun
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp

; 162  : 		if (c_rSoundInstance.dwFrame == dwcurFrame)

  0005d	8b 45 14	 mov	 eax, DWORD PTR _dwcurFrame$[ebp]
  00060	39 04 3e	 cmp	 DWORD PTR [esi+edi], eax
  00063	75 3f		 jne	 SHORT $LN2@UpdateSoun
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2328 :         return _Mypair._Myval2._Myptr();

  00065	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  00068	03 c6		 add	 eax, esi

; 434  :         return _Myres > _Small_string_capacity;

  0006a	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  0006e	76 02		 jbe	 SHORT $LN18@UpdateSoun

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00070	8b 00		 mov	 eax, DWORD PTR [eax]
$LN18@UpdateSoun:
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp

; 163  : 			PlayCharacterSound3D(fx, fy, fz, c_rSoundInstance.strSoundFileName.c_str(), bCheckFrequency);

  00072	ff 75 1c	 push	 DWORD PTR _bCheckFrequency$[ebp]
  00075	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0007a	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0007d	50		 push	 eax
  0007e	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00081	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00087	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  0008c	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00092	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00097	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009c	e8 00 00 00 00	 call	 ?PlayCharacterSound3D@CSoundManager@@QAEXMMMPBDH@Z ; CSoundManager::PlayCharacterSound3D
  000a1	8b 4d fc	 mov	 ecx, DWORD PTR _i$1$[ebp]
$LN2@UpdateSoun:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000a4	8b 45 18	 mov	 eax, DWORD PTR _c_pSoundInstanceVector$[ebp]
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp

; 159  : 	for (DWORD i = 0; i < c_pSoundInstanceVector->size(); ++i)

  000a7	41		 inc	 ecx
  000a8	89 4d fc	 mov	 DWORD PTR _i$1$[ebp], ecx
  000ab	83 c6 1c	 add	 esi, 28			; 0000001cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000ae	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]
  000b1	8b cb		 mov	 ecx, ebx
  000b3	8b 38		 mov	 edi, DWORD PTR [eax]
  000b5	2b cf		 sub	 ecx, edi
  000b7	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  000bc	f7 e9		 imul	 ecx
  000be	03 d1		 add	 edx, ecx
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp

; 159  : 	for (DWORD i = 0; i < c_pSoundInstanceVector->size(); ++i)

  000c0	8b 4d fc	 mov	 ecx, DWORD PTR _i$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000c3	c1 fa 04	 sar	 edx, 4
  000c6	8b c2		 mov	 eax, edx
  000c8	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000cb	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp

; 159  : 	for (DWORD i = 0; i < c_pSoundInstanceVector->size(); ++i)

  000cd	3b c8		 cmp	 ecx, eax
  000cf	0f 82 6b ff ff
	ff		 jb	 $LL4@UpdateSoun
$LN3@UpdateSoun:
  000d5	5f		 pop	 edi

; 165  : }

  000d6	5e		 pop	 esi
  000d7	5b		 pop	 ebx
  000d8	8b e5		 mov	 esp, ebp
  000da	5d		 pop	 ebp
  000db	c2 18 00	 ret	 24			; 00000018H
$LN25@UpdateSoun:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1944 :             _Xrange();

  000de	e8 00 00 00 00	 call	 ?_Xrange@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@CAXXZ ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::_Xrange
$LN33@UpdateSoun:
  000e3	cc		 int	 3
?UpdateSoundInstance@CSoundManager@@QAEXMMMKPBV?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@H@Z ENDP ; CSoundManager::UpdateSoundInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
;	COMDAT ?UpdateSoundData@CSoundManager@@QAEXMMMKPBV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
_dwcurTime$ = 20					; size = 4
_c_pSoundDataVector$ = 24				; size = 4
?UpdateSoundData@CSoundManager@@QAEXMMMKPBV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z PROC ; CSoundManager::UpdateSoundData, COMDAT
; _this$ = ecx

; 154  : 	assert(!"CSoundManager::UpdateSoundData");
; 155  : }

  00000	c2 14 00	 ret	 20			; 00000014H
?UpdateSoundData@CSoundManager@@QAEXMMMKPBV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z ENDP ; CSoundManager::UpdateSoundData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
;	COMDAT ?UpdateSoundData@CSoundManager@@QAEXKPBV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z
_TEXT	SEGMENT
_dwcurTime$ = 8						; size = 4
_c_pSoundDataVector$ = 12				; size = 4
?UpdateSoundData@CSoundManager@@QAEXKPBV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z PROC ; CSoundManager::UpdateSoundData, COMDAT
; _this$ = ecx

; 149  : 	assert(!"CSoundManager::UpdateSoundData");
; 150  : }

  00000	c2 08 00	 ret	 8
?UpdateSoundData@CSoundManager@@QAEXKPBV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z ENDP ; CSoundManager::UpdateSoundData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
;	COMDAT ?FadeAll@CSoundManager@@QAEXXZ
_TEXT	SEGMENT
?FadeAll@CSoundManager@@QAEXXZ PROC			; CSoundManager::FadeAll, COMDAT
; _this$ = ecx

; 636  : 	FadeOutAllMusic();

  00000	e9 00 00 00 00	 jmp	 ?FadeOutAllMusic@CSoundManager@@QAEXXZ ; CSoundManager::FadeOutAllMusic
?FadeAll@CSoundManager@@QAEXXZ ENDP			; CSoundManager::FadeAll
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
;	COMDAT ?FadeOutAllMusic@CSoundManager@@QAEXXZ
_TEXT	SEGMENT
?FadeOutAllMusic@CSoundManager@@QAEXXZ PROC		; CSoundManager::FadeOutAllMusic, COMDAT
; _this$ = ecx

; 532  : 	//Tracenf("FadeOutAllMusic");
; 533  : 
; 534  : 	for (int i = 0; i < CSoundManagerStream::MUSIC_INSTANCE_MAX_NUM; ++i)
; 535  : 	{
; 536  : 		if (MUSIC_STATE_OFF == m_MusicInstances[i].MusicState)

  00000	83 79 34 00	 cmp	 DWORD PTR [ecx+52], 0
  00004	74 0e		 je	 SHORT $LN2@FadeOutAll

; 537  : 			continue;
; 538  : 
; 539  : 		m_MusicInstances[i].MusicState = MUSIC_STATE_FADE_OUT;

  00006	c7 41 34 03 00
	00 00		 mov	 DWORD PTR [ecx+52], 3

; 540  : 		m_MusicInstances[i].fVolumeSpeed = 0.01f;

  0000d	c7 41 40 0a d7
	23 3c		 mov	 DWORD PTR [ecx+64], 1008981770 ; 3c23d70aH
$LN2@FadeOutAll:

; 532  : 	//Tracenf("FadeOutAllMusic");
; 533  : 
; 534  : 	for (int i = 0; i < CSoundManagerStream::MUSIC_INSTANCE_MAX_NUM; ++i)
; 535  : 	{
; 536  : 		if (MUSIC_STATE_OFF == m_MusicInstances[i].MusicState)

  00014	83 79 48 00	 cmp	 DWORD PTR [ecx+72], 0
  00018	74 0e		 je	 SHORT $LN14@FadeOutAll

; 537  : 			continue;
; 538  : 
; 539  : 		m_MusicInstances[i].MusicState = MUSIC_STATE_FADE_OUT;

  0001a	c7 41 48 03 00
	00 00		 mov	 DWORD PTR [ecx+72], 3

; 540  : 		m_MusicInstances[i].fVolumeSpeed = 0.01f;

  00021	c7 41 54 0a d7
	23 3c		 mov	 DWORD PTR [ecx+84], 1008981770 ; 3c23d70aH
$LN14@FadeOutAll:

; 532  : 	//Tracenf("FadeOutAllMusic");
; 533  : 
; 534  : 	for (int i = 0; i < CSoundManagerStream::MUSIC_INSTANCE_MAX_NUM; ++i)
; 535  : 	{
; 536  : 		if (MUSIC_STATE_OFF == m_MusicInstances[i].MusicState)

  00028	83 79 5c 00	 cmp	 DWORD PTR [ecx+92], 0
  0002c	74 0e		 je	 SHORT $LN16@FadeOutAll

; 537  : 			continue;
; 538  : 
; 539  : 		m_MusicInstances[i].MusicState = MUSIC_STATE_FADE_OUT;

  0002e	c7 41 5c 03 00
	00 00		 mov	 DWORD PTR [ecx+92], 3

; 540  : 		m_MusicInstances[i].fVolumeSpeed = 0.01f;

  00035	c7 41 68 0a d7
	23 3c		 mov	 DWORD PTR [ecx+104], 1008981770 ; 3c23d70aH
$LN16@FadeOutAll:

; 541  : 	}
; 542  : }

  0003c	c3		 ret	 0
?FadeOutAllMusic@CSoundManager@@QAEXXZ ENDP		; CSoundManager::FadeOutAllMusic
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
;	COMDAT ?FadeLimitOutMusic@CSoundManager@@QAEXPBDMM@Z
_TEXT	SEGMENT
_dwIndex$ = -4						; size = 4
_c_szFileName$ = 8					; size = 4
_fLimitVolume$ = 12					; size = 4
_fVolumeSpeed$ = 16					; size = 4
?FadeLimitOutMusic@CSoundManager@@QAEXPBDMM@Z PROC	; CSoundManager::FadeLimitOutMusic, COMDAT
; _this$ = ecx

; 485  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 486  : 	//Tracenf("FadeLimitOutMusic: %s", c_szFileName);
; 487  : 
; 488  : 	DWORD dwIndex;
; 489  : 	if (!GetMusicIndex(c_szFileName, &dwIndex))

  00005	8b 75 08	 mov	 esi, DWORD PTR _c_szFileName$[ebp]
  00008	8d 45 fc	 lea	 eax, DWORD PTR _dwIndex$[ebp]
  0000b	57		 push	 edi
  0000c	50		 push	 eax
  0000d	56		 push	 esi
  0000e	8b f9		 mov	 edi, ecx
  00010	e8 00 00 00 00	 call	 ?GetMusicIndex@CSoundManager@@IAEHPBDPAK@Z ; CSoundManager::GetMusicIndex
  00015	85 c0		 test	 eax, eax
  00017	75 16		 jne	 SHORT $LN2@FadeLimitO

; 490  : 	{
; 491  : 		Tracenf("FadeOutMusic: %s - ERROR NOT EXIST", c_szFileName);

  00019	56		 push	 esi
  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@IKOINIJC@FadeOutMusic?3?5?$CFs?5?9?5ERROR?5NOT?5EX@
  0001f	e8 00 00 00 00	 call	 ?Tracenf@@YAXPBDZZ	; Tracenf
  00024	83 c4 08	 add	 esp, 8
  00027	5f		 pop	 edi

; 505  : 
; 506  : 	//Tracenf("LimitVolume %f(%f)", fLimitVolume, rkMusicInst.fLimitVolume);
; 507  : }

  00028	5e		 pop	 esi
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 0c 00	 ret	 12			; 0000000cH
$LN2@FadeLimitO:

; 492  : 		return;
; 493  : 	}
; 494  : 
; 495  : 	if (dwIndex >= CSoundManagerStream::MUSIC_INSTANCE_MAX_NUM)

  0002f	8b 45 fc	 mov	 eax, DWORD PTR _dwIndex$[ebp]
  00032	83 f8 03	 cmp	 eax, 3
  00035	72 16		 jb	 SHORT $LN3@FadeLimitO

; 496  : 	{
; 497  : 		Tracenf("FadeOutMusic: %s - ERROR OUT OF RANGE", c_szFileName);

  00037	56		 push	 esi
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@CAGDPBLM@FadeOutMusic?3?5?$CFs?5?9?5ERROR?5OUT?5OF@
  0003d	e8 00 00 00 00	 call	 ?Tracenf@@YAXPBDZZ	; Tracenf
  00042	83 c4 08	 add	 esp, 8
  00045	5f		 pop	 edi

; 505  : 
; 506  : 	//Tracenf("LimitVolume %f(%f)", fLimitVolume, rkMusicInst.fLimitVolume);
; 507  : }

  00046	5e		 pop	 esi
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 0c 00	 ret	 12			; 0000000cH
$LN3@FadeLimitO:

; 498  : 		return;
; 499  : 	}
; 500  : 
; 501  : 	SMusicInstance& rkMusicInst=m_MusicInstances[dwIndex];
; 502  : 	rkMusicInst.MusicState = MUSIC_STATE_FADE_LIMIT_OUT;
; 503  : 	rkMusicInst.fVolumeSpeed = fVolumeSpeed;

  0004d	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fVolumeSpeed$[ebp]
  00052	8d 34 80	 lea	 esi, DWORD PTR [eax+eax*4]
  00055	f3 0f 11 44 b7
	40		 movss	 DWORD PTR [edi+esi*4+64], xmm0

; 504  : 	rkMusicInst.fLimitVolume = __ConvertRatioVolumeToApplyVolume(fLimitVolume);

  0005b	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fLimitVolume$[ebp]
  00060	51		 push	 ecx
  00061	8b cf		 mov	 ecx, edi
  00063	c7 44 b7 34 04
	00 00 00	 mov	 DWORD PTR [edi+esi*4+52], 4
  0006b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00070	e8 00 00 00 00	 call	 ?__ConvertRatioVolumeToApplyVolume@CSoundManager@@IAEMM@Z ; CSoundManager::__ConvertRatioVolumeToApplyVolume
  00075	d9 5c b7 3c	 fstp	 DWORD PTR [edi+esi*4+60]
  00079	5f		 pop	 edi

; 505  : 
; 506  : 	//Tracenf("LimitVolume %f(%f)", fLimitVolume, rkMusicInst.fLimitVolume);
; 507  : }

  0007a	5e		 pop	 esi
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c2 0c 00	 ret	 12			; 0000000cH
?FadeLimitOutMusic@CSoundManager@@QAEXPBDMM@Z ENDP	; CSoundManager::FadeLimitOutMusic
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
;	COMDAT ?FadeOutMusic@CSoundManager@@QAEXPBDM@Z
_TEXT	SEGMENT
_dwIndex$ = -4						; size = 4
_c_szFileName$ = 8					; size = 4
_fVolumeSpeed$ = 12					; size = 4
?FadeOutMusic@CSoundManager@@QAEXPBDM@Z PROC		; CSoundManager::FadeOutMusic, COMDAT
; _this$ = ecx

; 510  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 511  : 	//Tracenf("FadeOutMusic: %s", c_szFileName);
; 512  : 
; 513  : 	DWORD dwIndex;
; 514  : 	if (!GetMusicIndex(c_szFileName, &dwIndex))

  00005	8b 75 08	 mov	 esi, DWORD PTR _c_szFileName$[ebp]
  00008	8d 45 fc	 lea	 eax, DWORD PTR _dwIndex$[ebp]
  0000b	57		 push	 edi
  0000c	50		 push	 eax
  0000d	56		 push	 esi
  0000e	8b f9		 mov	 edi, ecx
  00010	e8 00 00 00 00	 call	 ?GetMusicIndex@CSoundManager@@IAEHPBDPAK@Z ; CSoundManager::GetMusicIndex
  00015	85 c0		 test	 eax, eax
  00017	75 16		 jne	 SHORT $LN2@FadeOutMus

; 515  : 	{
; 516  : 		Tracenf("FadeOutMusic: %s - ERROR NOT EXIST", c_szFileName);

  00019	56		 push	 esi
  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@IKOINIJC@FadeOutMusic?3?5?$CFs?5?9?5ERROR?5NOT?5EX@
  0001f	e8 00 00 00 00	 call	 ?Tracenf@@YAXPBDZZ	; Tracenf
  00024	83 c4 08	 add	 esp, 8
  00027	5f		 pop	 edi

; 528  : }

  00028	5e		 pop	 esi
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
$LN2@FadeOutMus:

; 517  : 		return;
; 518  : 	}
; 519  : 
; 520  : 	if (dwIndex >= CSoundManagerStream::MUSIC_INSTANCE_MAX_NUM)

  0002f	8b 45 fc	 mov	 eax, DWORD PTR _dwIndex$[ebp]
  00032	83 f8 03	 cmp	 eax, 3
  00035	72 16		 jb	 SHORT $LN3@FadeOutMus

; 521  : 	{
; 522  : 		Tracenf("FadeOutMusic: %s - ERROR OUT OF RANGE", c_szFileName);

  00037	56		 push	 esi
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@CAGDPBLM@FadeOutMusic?3?5?$CFs?5?9?5ERROR?5OUT?5OF@
  0003d	e8 00 00 00 00	 call	 ?Tracenf@@YAXPBDZZ	; Tracenf
  00042	83 c4 08	 add	 esp, 8
  00045	5f		 pop	 edi

; 528  : }

  00046	5e		 pop	 esi
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
$LN3@FadeOutMus:

; 523  : 		return;
; 524  : 	}
; 525  : 
; 526  : 	m_MusicInstances[dwIndex].MusicState = MUSIC_STATE_FADE_OUT;
; 527  : 	m_MusicInstances[dwIndex].fVolumeSpeed = fVolumeSpeed;

  0004d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fVolumeSpeed$[ebp]
  00052	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00055	c7 44 87 34 03
	00 00 00	 mov	 DWORD PTR [edi+eax*4+52], 3
  0005d	f3 0f 11 44 87
	40		 movss	 DWORD PTR [edi+eax*4+64], xmm0
  00063	5f		 pop	 edi

; 528  : }

  00064	5e		 pop	 esi
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c2 08 00	 ret	 8
?FadeOutMusic@CSoundManager@@QAEXPBDM@Z ENDP		; CSoundManager::FadeOutMusic
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
;	COMDAT ?FadeInMusic@CSoundManager@@QAEXPBDM@Z
_TEXT	SEGMENT
_dwIndex$ = -4						; size = 4
_c_szFileName$ = 8					; size = 4
_fVolumeSpeed$ = 12					; size = 4
?FadeInMusic@CSoundManager@@QAEXPBDM@Z PROC		; CSoundManager::FadeInMusic, COMDAT
; _this$ = ecx

; 452  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 453  : 	DWORD dwIndex;
; 454  : 	if (GetMusicIndex(c_szFileName, &dwIndex))

  00005	8d 45 fc	 lea	 eax, DWORD PTR _dwIndex$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	50		 push	 eax
  0000b	ff 75 08	 push	 DWORD PTR _c_szFileName$[ebp]
  0000e	e8 00 00 00 00	 call	 ?GetMusicIndex@CSoundManager@@IAEHPBDPAK@Z ; CSoundManager::GetMusicIndex
  00013	85 c0		 test	 eax, eax
  00015	74 20		 je	 SHORT $LN5@FadeInMusi

; 455  : 	{
; 456  : 		m_MusicInstances[dwIndex].MusicState = MUSIC_STATE_FADE_IN;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _dwIndex$[ebp]

; 457  : 		m_MusicInstances[dwIndex].fVolumeSpeed = fVolumeSpeed;

  0001a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fVolumeSpeed$[ebp]
  0001f	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00022	c7 44 86 34 02
	00 00 00	 mov	 DWORD PTR [esi+eax*4+52], 2
  0002a	f3 0f 11 44 86
	40		 movss	 DWORD PTR [esi+eax*4+64], xmm0
  00030	5e		 pop	 esi

; 472  : 		return;
; 473  : 	}
; 474  : 
; 475  : 	return;
; 476  : 
; 477  : 	// If there is no empty music slot, then play music on slot 0.
; 478  : 	/*
; 479  : 	StopMusic(0);
; 480  : 	PlayMusic(0, c_szFileName, 0.0f, fVolumeSpeed);
; 481  : 	*/
; 482  : }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
$LN5@FadeInMusi:

; 458  : 		return;
; 459  : 	}
; 460  : 
; 461  : 	FadeOutAllMusic();

  00037	8b ce		 mov	 ecx, esi
  00039	e8 00 00 00 00	 call	 ?FadeOutAllMusic@CSoundManager@@QAEXXZ ; CSoundManager::FadeOutAllMusic

; 462  : 
; 463  : 	//Tracenf("FadeInMusic: %s", c_szFileName);
; 464  : 
; 465  : 	for (int i = 0; i < CSoundManagerStream::MUSIC_INSTANCE_MAX_NUM; ++i)

  0003e	33 c0		 xor	 eax, eax
  00040	8d 4e 34	 lea	 ecx, DWORD PTR [esi+52]
$LL4@FadeInMusi:

; 466  : 	{
; 467  : 		TMusicInstance & rMusicInstance = m_MusicInstances[i];
; 468  : 		if (MUSIC_STATE_OFF != rMusicInstance.MusicState)

  00043	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00046	74 10		 je	 SHORT $LN6@FadeInMusi

; 462  : 
; 463  : 	//Tracenf("FadeInMusic: %s", c_szFileName);
; 464  : 
; 465  : 	for (int i = 0; i < CSoundManagerStream::MUSIC_INSTANCE_MAX_NUM; ++i)

  00048	40		 inc	 eax
  00049	83 c1 14	 add	 ecx, 20			; 00000014H
  0004c	83 f8 03	 cmp	 eax, 3
  0004f	7c f2		 jl	 SHORT $LL4@FadeInMusi
  00051	5e		 pop	 esi

; 472  : 		return;
; 473  : 	}
; 474  : 
; 475  : 	return;
; 476  : 
; 477  : 	// If there is no empty music slot, then play music on slot 0.
; 478  : 	/*
; 479  : 	StopMusic(0);
; 480  : 	PlayMusic(0, c_szFileName, 0.0f, fVolumeSpeed);
; 481  : 	*/
; 482  : }

  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 08 00	 ret	 8
$LN6@FadeInMusi:

; 469  : 			continue;
; 470  : 
; 471  : 		PlayMusic(i, c_szFileName, 0.0f, fVolumeSpeed);

  00058	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fVolumeSpeed$[ebp]
  0005d	83 ec 08	 sub	 esp, 8
  00060	8b ce		 mov	 ecx, esi
  00062	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00068	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  0006f	ff 75 08	 push	 DWORD PTR _c_szFileName$[ebp]
  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 ?PlayMusic@CSoundManager@@IAEXKPBDMM@Z ; CSoundManager::PlayMusic
  00078	5e		 pop	 esi

; 472  : 		return;
; 473  : 	}
; 474  : 
; 475  : 	return;
; 476  : 
; 477  : 	// If there is no empty music slot, then play music on slot 0.
; 478  : 	/*
; 479  : 	StopMusic(0);
; 480  : 	PlayMusic(0, c_szFileName, 0.0f, fVolumeSpeed);
; 481  : 	*/
; 482  : }

  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c2 08 00	 ret	 8
?FadeInMusic@CSoundManager@@QAEXPBDM@Z ENDP		; CSoundManager::FadeInMusic
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
;	COMDAT ?PlayMusic@CSoundManager@@QAEXPBD@Z
_TEXT	SEGMENT
_c_szFileName$ = 8					; size = 4
?PlayMusic@CSoundManager@@QAEXPBD@Z PROC		; CSoundManager::PlayMusic, COMDAT
; _this$ = ecx

; 447  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 448  : 	PlayMusic(0, c_szFileName, GetMusicVolume(), 0.0f);

  00004	51		 push	 ecx
  00005	8b f1		 mov	 esi, ecx
  00007	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  0000e	e8 00 00 00 00	 call	 ?GetMusicVolume@CSoundManager@@QAEMXZ ; CSoundManager::GetMusicVolume
  00013	51		 push	 ecx
  00014	d9 1c 24	 fstp	 DWORD PTR [esp]
  00017	ff 75 08	 push	 DWORD PTR _c_szFileName$[ebp]
  0001a	8b ce		 mov	 ecx, esi
  0001c	6a 00		 push	 0
  0001e	e8 00 00 00 00	 call	 ?PlayMusic@CSoundManager@@IAEXKPBDMM@Z ; CSoundManager::PlayMusic
  00023	5e		 pop	 esi

; 449  : }

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
?PlayMusic@CSoundManager@@QAEXPBD@Z ENDP		; CSoundManager::PlayMusic
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
;	COMDAT ?StopAllSound3D@CSoundManager@@QAEXXZ
_TEXT	SEGMENT
?StopAllSound3D@CSoundManager@@QAEXXZ PROC		; CSoundManager::StopAllSound3D, COMDAT
; _this$ = ecx

; 439  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 440  : 	for (int i = 0; i < CSoundManager3D::INSTANCE_MAX_COUNT; ++i)

  00004	33 f6		 xor	 esi, esi
$LL4@StopAllSou:

; 441  : 	{
; 442  : 		StopSound3D(i);

  00006	56		 push	 esi
  00007	8b cf		 mov	 ecx, edi
  00009	e8 00 00 00 00	 call	 ?StopSound3D@CSoundManager@@QAEXH@Z ; CSoundManager::StopSound3D
  0000e	46		 inc	 esi
  0000f	83 fe 20	 cmp	 esi, 32			; 00000020H
  00012	7c f2		 jl	 SHORT $LL4@StopAllSou

; 440  : 	for (int i = 0; i < CSoundManager3D::INSTANCE_MAX_COUNT; ++i)

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi

; 443  : 	}
; 444  : }

  00016	c3		 ret	 0
?StopAllSound3D@CSoundManager@@QAEXXZ ENDP		; CSoundManager::StopAllSound3D
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
;	COMDAT ?SetSoundVolume3D@CSoundManager@@QAEXHM@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
_fVolume$ = 12						; size = 4
?SetSoundVolume3D@CSoundManager@@QAEXHM@Z PROC		; CSoundManager::SetSoundVolume3D, COMDAT
; _this$ = ecx

; 429  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 430  : 	ISoundInstance * pInstance = ms_SoundManager3D.GetInstance(iIndex);

  00003	ff 75 08	 push	 DWORD PTR _iIndex$[ebp]
  00006	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManager3D@CSoundManager@@1VCSoundManager3D@@A ; CSoundManager::ms_SoundManager3D
  0000b	e8 00 00 00 00	 call	 ?GetInstance@CSoundManager3D@@QAEPAVISoundInstance@@K@Z ; CSoundManager3D::GetInstance

; 431  : 
; 432  : 	if (!pInstance)

  00010	85 c0		 test	 eax, eax
  00012	74 12		 je	 SHORT $LN1@SetSoundVo

; 433  : 		return;
; 434  : 
; 435  : 	pInstance->SetVolume(fVolume);

  00014	8b 10		 mov	 edx, DWORD PTR [eax]
  00016	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fVolume$[ebp]
  0001b	51		 push	 ecx
  0001c	8b c8		 mov	 ecx, eax
  0001e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00023	ff 52 24	 call	 DWORD PTR [edx+36]
$LN1@SetSoundVo:

; 436  : }

  00026	5d		 pop	 ebp
  00027	c2 08 00	 ret	 8
?SetSoundVolume3D@CSoundManager@@QAEXHM@Z ENDP		; CSoundManager::SetSoundVolume3D
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
;	COMDAT ?PlayCharacterSound3D@CSoundManager@@QAEXMMMPBDH@Z
_TEXT	SEGMENT
__Loc$2 = -72						; size = 12
__Loc$3 = -72						; size = 12
__Newnode$4 = -60					; size = 8
_this$GSCopy$1$ = -52					; size = 4
_c_szFileName$GSCopy$1$ = -48				; size = 4
_fTime$5 = -44						; size = 4
$T6 = -44						; size = 4
_pInstance$ = -44					; size = 4
tv1231 = -44						; size = 4
tv1252 = -44						; size = 4
$T7 = -40						; size = 24
$T8 = -40						; size = 24
$T9 = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
_c_szFileName$ = 20					; size = 4
_bCheckFrequency$ = 24					; size = 4
?PlayCharacterSound3D@CSoundManager@@QAEXMMMPBDH@Z PROC	; CSoundManager::PlayCharacterSound3D, COMDAT
; _this$ = ecx

; 377  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PlayCharacterSound3D@CSoundManager@@QAEXMMMPBDH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b d9		 mov	 ebx, ecx
  0002d	89 5d cc	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ebx
  00030	8b 7d 14	 mov	 edi, DWORD PTR _c_szFileName$[ebp]
  00033	89 7d d0	 mov	 DWORD PTR _c_szFileName$GSCopy$1$[ebp], edi

; 378  : 	if (0.0f == GetSoundVolume())

  00036	e8 00 00 00 00	 call	 ?GetSoundVolume@CSoundManager@@QAEMXZ ; CSoundManager::GetSoundVolume
  0003b	0f 57 c0	 xorps	 xmm0, xmm0
  0003e	d9 5d d4	 fstp	 DWORD PTR tv1252[ebp]
  00041	0f 2e 45 d4	 ucomiss xmm0, DWORD PTR tv1252[ebp]
  00045	9f		 lahf
  00046	f6 c4 44	 test	 ah, 68			; 00000044H
  00049	0f 8b 59 02 00
	00		 jnp	 $LN1@PlayCharac

; 379  : 		return;
; 380  : 
; 381  : 	if (bCheckFrequency)

  0004f	83 7d 18 00	 cmp	 DWORD PTR _bCheckFrequency$[ebp], 0
  00053	0f 84 d5 01 00
	00		 je	 $LN283@PlayCharac

; 382  : 	{
; 383  : 		static float s_fLimitDistance = 5000*5000;
; 384  : 		float fdx = (fx - m_fxPosition) * (fx - m_fxPosition);

  00059	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _fx$[ebp]

; 385  : 		float fdy = (fy - m_fyPosition) * (fy - m_fyPosition);

  0005e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00063	f3 0f 5c 43 10	 subss	 xmm0, DWORD PTR [ebx+16]
  00068	f3 0f 5c 4b 0c	 subss	 xmm1, DWORD PTR [ebx+12]
  0006d	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00071	f3 0f 59 c9	 mulss	 xmm1, xmm1

; 386  : 
; 387  : 		if (fdx+fdy > s_fLimitDistance)

  00075	f3 0f 58 c1	 addss	 xmm0, xmm1
  00079	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?s_fLimitDistance@?6??PlayCharacterSound3D@CSoundManager@@QAEXMMMPBDH@Z@4MA
  00080	0f 87 22 02 00
	00		 ja	 $LN1@PlayCharac

; 390  : 		std::map<std::string, float>::iterator itor = m_PlaySoundHistoryMap.find(c_szFileName);

  00086	57		 push	 edi
  00087	8d 4d d8	 lea	 ecx, DWORD PTR $T7[ebp]
  0008a	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0008f	8d 45 d8	 lea	 eax, DWORD PTR $T7[ebp]
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp

; 390  : 		std::map<std::string, float>::iterator itor = m_PlaySoundHistoryMap.find(c_szFileName);

  00092	83 c3 6c	 add	 ebx, 108		; 0000006cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00095	50		 push	 eax
  00096	8d 45 b8	 lea	 eax, DWORD PTR __Loc$2[ebp]
  00099	8b cb		 mov	 ecx, ebx
  0009b	50		 push	 eax
  0009c	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,float,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000a1	8b 75 c0	 mov	 esi, DWORD PTR __Loc$2[ebp+8]
  000a4	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  000a8	75 14		 jne	 SHORT $LN14@PlayCharac
  000aa	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  000ad	50		 push	 eax
  000ae	8d 45 d8	 lea	 eax, DWORD PTR $T7[ebp]
  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  000b7	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000ba	84 c0		 test	 al, al
  000bc	74 02		 je	 SHORT $LN13@PlayCharac
$LN14@PlayCharac:

; 1379 :         return _Get_scary()->_Myhead;

  000be	8b 33		 mov	 esi, DWORD PTR [ebx]
$LN13@PlayCharac:
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp

; 390  : 		std::map<std::string, float>::iterator itor = m_PlaySoundHistoryMap.find(c_szFileName);

  000c0	8d 4d d8	 lea	 ecx, DWORD PTR $T7[ebp]
  000c3	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  000c8	39 33		 cmp	 DWORD PTR [ebx], esi
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp

; 391  : 		if (m_PlaySoundHistoryMap.end() != itor)

  000ca	74 2d		 je	 SHORT $LN6@PlayCharac

; 392  : 		{
; 393  : 			float fTime = itor->second;

  000cc	f3 0f 10 46 28	 movss	 xmm0, DWORD PTR [esi+40]

; 394  : 			if (CTimer::Instance().GetCurrentSecond() - fTime < 0.3f)

  000d1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  000d7	f3 0f 11 45 d4	 movss	 DWORD PTR _fTime$5[ebp], xmm0
  000dc	e8 00 00 00 00	 call	 ?GetCurrentSecond@CTimer@@QAEMXZ ; CTimer::GetCurrentSecond
  000e1	d8 65 d4	 fsub	 DWORD PTR _fTime$5[ebp]
  000e4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  000ec	d9 5d d4	 fstp	 DWORD PTR tv1231[ebp]
  000ef	0f 2f 45 d4	 comiss	 xmm0, DWORD PTR tv1231[ebp]
  000f3	0f 87 af 01 00
	00		 ja	 $LN1@PlayCharac
$LN6@PlayCharac:

; 395  : 			{
; 396  : 				return;
; 397  : 			}
; 398  : 		}
; 399  : 
; 400  : 		m_PlaySoundHistoryMap.erase(c_szFileName);

  000f9	57		 push	 edi
  000fa	8d 4d d8	 lea	 ecx, DWORD PTR $T8[ebp]
  000fd	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00102	8d 45 d8	 lea	 eax, DWORD PTR $T8[ebp]
  00105	8b cb		 mov	 ecx, ebx
  00107	50		 push	 eax
  00108	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@2@$0A@@std@@@std@@QAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,float,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> >,0> >::erase
  0010d	8d 4d d8	 lea	 ecx, DWORD PTR $T8[ebp]
  00110	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 401  : 		m_PlaySoundHistoryMap.emplace(c_szFileName, CTimer::Instance().GetCurrentSecond());

  00115	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  0011b	e8 00 00 00 00	 call	 ?GetCurrentSecond@CTimer@@QAEMXZ ; CTimer::GetCurrentSecond
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1016 :             _Tree_temp_node<_Alnode> _Newnode(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...);

  00120	8b 33		 mov	 esi, DWORD PTR [ebx]
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp

; 401  : 		m_PlaySoundHistoryMap.emplace(c_szFileName, CTimer::Instance().GetCurrentSecond());

  00122	d9 5d d4	 fstp	 DWORD PTR $T6[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1156 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00125	89 5d c4	 mov	 DWORD PTR __Newnode$4[ebp], ebx

; 136  :         return ::operator new(_Bytes);

  00128	6a 2c		 push	 44			; 0000002cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 798  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  0012a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1163 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00131	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR __Newnode$4[ebp+4], 0

; 136  :         return ::operator new(_Bytes);

  00138	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0013d	83 c4 04	 add	 esp, 4

; 1164 :         _Ptr = _Al.allocate(1);

  00140	89 45 c8	 mov	 DWORD PTR __Newnode$4[ebp+4], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00143	ff 75 d0	 push	 DWORD PTR _c_szFileName$GSCopy$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 820  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00146	8d 78 10	 lea	 edi, DWORD PTR [eax+16]
  00149	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00150	8b cf		 mov	 ecx, edi
  00152	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 821  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  00157	8b 45 c8	 mov	 eax, DWORD PTR __Newnode$4[ebp+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  0015a	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR $T6[ebp]
  0015f	f3 0f 11 47 18	 movss	 DWORD PTR [edi+24], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 821  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  00164	89 30		 mov	 DWORD PTR [eax], esi

; 822  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  00166	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 823  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  00169	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 824  :         this->_Ptr->_Color = _Red;

  0016c	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0

; 1021 :                 _Loc = _Find_lower_bound(_Keyval);

  00172	57		 push	 edi
  00173	8d 45 e4	 lea	 eax, DWORD PTR $T9[ebp]
  00176	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  0017d	50		 push	 eax
  0017e	8b cb		 mov	 ecx, ebx
  00180	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,float,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  00185	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00189	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0018c	66 0f d6 45 b8	 movq	 QWORD PTR __Loc$3[ebp], xmm0

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00191	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00195	75 6c		 jne	 SHORT $LN53@PlayCharac
  00197	83 c0 10	 add	 eax, 16			; 00000010H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  0019a	50		 push	 eax
  0019b	57		 push	 edi
  0019c	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  001a1	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  001a4	84 c0		 test	 al, al
  001a6	75 5b		 jne	 SHORT $LN53@PlayCharac
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  001a8	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1023 :                     return {_Loc._Bound, false};

  001ab	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  001b2	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  001b5	76 2b		 jbe	 SHORT $LN134@PlayCharac
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001b7	8b 07		 mov	 eax, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  001b9	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  001ba	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001c0	72 16		 jb	 SHORT $LN145@PlayCharac

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001c2	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  001c5	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  001c8	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001ca	83 c0 fc	 add	 eax, -4			; fffffffcH
  001cd	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001d0	0f 87 f0 00 00
	00		 ja	 $LN142@PlayCharac

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  001d6	8b c2		 mov	 eax, edx
$LN145@PlayCharac:

; 289  :         ::operator delete(_Ptr, _Bytes);

  001d8	51		 push	 ecx
  001d9	50		 push	 eax
  001da	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001df	83 c4 08	 add	 esp, 8
$LN134@PlayCharac:
  001e2	8b 45 c8	 mov	 eax, DWORD PTR __Newnode$4[ebp+4]
  001e5	6a 2c		 push	 44			; 0000002cH
  001e7	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  001e8	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  001ef	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  001f6	c6 07 00	 mov	 BYTE PTR [edi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  001f9	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001fe	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1023 :                     return {_Loc._Bound, false};

  00201	eb 25		 jmp	 SHORT $LN312@PlayCharac
$LN53@PlayCharac:

; 1638 :         if (max_size() == _Get_scary()->_Mysize) {

  00203	81 7b 04 5d 74
	d1 05		 cmp	 DWORD PTR [ebx+4], 97612893 ; 05d1745dH
  0020a	0f 84 bb 00 00
	00		 je	 $LN314@PlayCharac

; 1032 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00210	8b 45 c8	 mov	 eax, DWORD PTR __Newnode$4[ebp+4]
  00213	8b cb		 mov	 ecx, ebx
  00215	50		 push	 eax
  00216	ff 75 bc	 push	 DWORD PTR __Loc$3[ebp+4]
  00219	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00220	ff 75 b8	 push	 DWORD PTR __Loc$3[ebp]
  00223	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >::_Insert_node
$LN312@PlayCharac:
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp

; 406  : 	if (!GetSoundInstance3D(c_szFileName, &pInstance))

  00228	8b 7d d0	 mov	 edi, DWORD PTR _c_szFileName$GSCopy$1$[ebp]
  0022b	8b 5d cc	 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
$LN283@PlayCharac:
  0022e	8d 45 d4	 lea	 eax, DWORD PTR _pInstance$[ebp]
  00231	8b cb		 mov	 ecx, ebx
  00233	50		 push	 eax
  00234	57		 push	 edi
  00235	e8 00 00 00 00	 call	 ?GetSoundInstance3D@CSoundManager@@IAEHPBDPAPAVISoundInstance@@@Z ; CSoundManager::GetSoundInstance3D
  0023a	85 c0		 test	 eax, eax
  0023c	74 6a		 je	 SHORT $LN1@PlayCharac

; 407  : 		return;
; 408  : 
; 409  : 	pInstance->SetPosition((fx - m_fxPosition) / m_fSoundScale,

  0023e	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  00243	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00246	f3 0f 5c 43 14	 subss	 xmm0, DWORD PTR [ebx+20]
  0024b	f3 0f 10 4b 18	 movss	 xmm1, DWORD PTR [ebx+24]
  00250	8b 7d d4	 mov	 edi, DWORD PTR _pInstance$[ebp]
  00253	8b cf		 mov	 ecx, edi
  00255	f3 0f 5e c1	 divss	 xmm0, xmm1
  00259	8b 07		 mov	 eax, DWORD PTR [edi]
  0025b	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00261	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00266	f3 0f 5c 43 10	 subss	 xmm0, DWORD PTR [ebx+16]
  0026b	f3 0f 5e c1	 divss	 xmm0, xmm1
  0026f	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00275	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  0027a	f3 0f 5c 43 0c	 subss	 xmm0, DWORD PTR [ebx+12]
  0027f	f3 0f 5e c1	 divss	 xmm0, xmm1
  00283	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00288	ff 50 2c	 call	 DWORD PTR [eax+44]

; 410  : 						   (fy - m_fyPosition) / m_fSoundScale,
; 411  : 						   (fz - m_fzPosition) / m_fSoundScale);
; 412  : 
; 413  : 	pInstance->SetVolume(GetSoundVolume());

  0028b	8b 37		 mov	 esi, DWORD PTR [edi]
  0028d	8b cb		 mov	 ecx, ebx
  0028f	e8 00 00 00 00	 call	 ?GetSoundVolume@CSoundManager@@QAEMXZ ; CSoundManager::GetSoundVolume
  00294	51		 push	 ecx
  00295	8b cf		 mov	 ecx, edi
  00297	d9 1c 24	 fstp	 DWORD PTR [esp]
  0029a	ff 56 24	 call	 DWORD PTR [esi+36]

; 414  : 	pInstance->Play(1);

  0029d	8b 07		 mov	 eax, DWORD PTR [edi]
  0029f	8b cf		 mov	 ecx, edi
  002a1	6a 00		 push	 0
  002a3	6a 01		 push	 1
  002a5	ff 50 10	 call	 DWORD PTR [eax+16]
$LN1@PlayCharac:

; 415  : }

  002a8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002ab	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002b2	59		 pop	 ecx
  002b3	5f		 pop	 edi
  002b4	5e		 pop	 esi
  002b5	5b		 pop	 ebx
  002b6	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002b9	33 cd		 xor	 ecx, ebp
  002bb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002c0	8b e5		 mov	 esp, ebp
  002c2	5d		 pop	 ebp
  002c3	c2 14 00	 ret	 20			; 00000014H
$LN142@PlayCharac:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  002c6	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN314@PlayCharac:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1639 :             _Throw_tree_length_error();

  002cb	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN311@PlayCharac:
  002d0	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PlayCharacterSound3D@CSoundManager@@QAEXMMMPBDH@Z$4:
  00000	8d 4d c4	 lea	 ecx, DWORD PTR __Newnode$4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >
__unwindfunclet$?PlayCharacterSound3D@CSoundManager@@QAEXMMMPBDH@Z$3:
  00008	8d 4d c4	 lea	 ecx, DWORD PTR __Newnode$4[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?PlayCharacterSound3D@CSoundManager@@QAEXMMMPBDH@Z$2:
  00010	8d 4d c4	 lea	 ecx, DWORD PTR __Newnode$4[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
__ehhandler$?PlayCharacterSound3D@CSoundManager@@QAEXMMMPBDH@Z:
  0001d	90		 npad	 1
  0001e	90		 npad	 1
  0001f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00023	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00026	8b 4a b4	 mov	 ecx, DWORD PTR [edx-76]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PlayCharacterSound3D@CSoundManager@@QAEXMMMPBDH@Z
  0003f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PlayCharacterSound3D@CSoundManager@@QAEXMMMPBDH@Z ENDP	; CSoundManager::PlayCharacterSound3D
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
;	COMDAT ?PlayAmbienceSound3D@CSoundManager@@QAEHMMMPBDH@Z
_TEXT	SEGMENT
_this$1$ = -8						; size = 4
tv203 = -4						; size = 4
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
_c_szFileName$ = 20					; size = 4
_iPlayCount$ = 24					; size = 4
?PlayAmbienceSound3D@CSoundManager@@QAEHMMMPBDH@Z PROC	; CSoundManager::PlayAmbienceSound3D, COMDAT
; _this$ = ecx

; 354  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi
  0000b	89 75 f8	 mov	 DWORD PTR _this$1$[ebp], esi

; 355  : 	if (0.0f == GetSoundVolume())

  0000e	e8 00 00 00 00	 call	 ?GetSoundVolume@CSoundManager@@QAEMXZ ; CSoundManager::GetSoundVolume
  00013	d9 5d fc	 fstp	 DWORD PTR tv203[ebp]
  00016	0f 57 c0	 xorps	 xmm0, xmm0
  00019	0f 2e 45 fc	 ucomiss xmm0, DWORD PTR tv203[ebp]
  0001d	9f		 lahf
  0001e	f6 c4 44	 test	 ah, 68			; 00000044H
  00021	0f 8b 9d 00 00
	00		 jnp	 $LN6@PlayAmbien

; 356  : 		return -1;
; 357  : 
; 358  : 	int iIndex = ms_SoundManager3D.SetInstance(c_szFileName);

  00027	ff 75 14	 push	 DWORD PTR _c_szFileName$[ebp]
  0002a	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManager3D@CSoundManager@@1VCSoundManager3D@@A ; CSoundManager::ms_SoundManager3D
  0002f	e8 00 00 00 00	 call	 ?SetInstance@CSoundManager3D@@QAEHPBD@Z ; CSoundManager3D::SetInstance
  00034	8b f8		 mov	 edi, eax

; 359  : 	if (-1 == iIndex)

  00036	83 ff ff	 cmp	 edi, -1
  00039	0f 84 85 00 00
	00		 je	 $LN6@PlayAmbien

; 360  : 		return -1;
; 361  : 
; 362  : 	ISoundInstance * pInstance = ms_SoundManager3D.GetInstance(iIndex);

  0003f	57		 push	 edi
  00040	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManager3D@CSoundManager@@1VCSoundManager3D@@A ; CSoundManager::ms_SoundManager3D
  00045	e8 00 00 00 00	 call	 ?GetInstance@CSoundManager3D@@QAEPAVISoundInstance@@K@Z ; CSoundManager3D::GetInstance
  0004a	8b d8		 mov	 ebx, eax

; 363  : 	if (!pInstance)

  0004c	85 db		 test	 ebx, ebx
  0004e	74 74		 je	 SHORT $LN6@PlayAmbien

; 364  : 		return -1;
; 365  : 
; 366  : 	pInstance->SetPosition((fx - m_fxPosition) / m_fAmbienceSoundScale,

  00050	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  00055	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00058	f3 0f 5c 46 14	 subss	 xmm0, DWORD PTR [esi+20]
  0005d	f3 0f 10 4e 1c	 movss	 xmm1, DWORD PTR [esi+28]
  00062	8b cb		 mov	 ecx, ebx
  00064	8b 13		 mov	 edx, DWORD PTR [ebx]
  00066	f3 0f 5e c1	 divss	 xmm0, xmm1
  0006a	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00070	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00075	f3 0f 5c 46 10	 subss	 xmm0, DWORD PTR [esi+16]
  0007a	f3 0f 5e c1	 divss	 xmm0, xmm1
  0007e	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00084	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00089	f3 0f 5c 46 0c	 subss	 xmm0, DWORD PTR [esi+12]
  0008e	f3 0f 5e c1	 divss	 xmm0, xmm1
  00092	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00097	ff 52 2c	 call	 DWORD PTR [edx+44]

; 367  : 						   (fy - m_fyPosition) / m_fAmbienceSoundScale,
; 368  : 						   (fz - m_fzPosition) / m_fAmbienceSoundScale);
; 369  : 
; 370  : 	pInstance->SetVolume(GetSoundVolume());

  0009a	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0009d	8b 33		 mov	 esi, DWORD PTR [ebx]
  0009f	e8 00 00 00 00	 call	 ?GetSoundVolume@CSoundManager@@QAEMXZ ; CSoundManager::GetSoundVolume
  000a4	51		 push	 ecx
  000a5	8b cb		 mov	 ecx, ebx
  000a7	d9 1c 24	 fstp	 DWORD PTR [esp]
  000aa	ff 56 24	 call	 DWORD PTR [esi+36]

; 371  : 	pInstance->Play(iPlayCount);

  000ad	8b 03		 mov	 eax, DWORD PTR [ebx]
  000af	8b cb		 mov	 ecx, ebx
  000b1	6a 00		 push	 0
  000b3	ff 75 18	 push	 DWORD PTR _iPlayCount$[ebp]
  000b6	ff 50 10	 call	 DWORD PTR [eax+16]

; 372  : 
; 373  : 	return iIndex;

  000b9	8b c7		 mov	 eax, edi
  000bb	5f		 pop	 edi

; 374  : }

  000bc	5e		 pop	 esi
  000bd	5b		 pop	 ebx
  000be	8b e5		 mov	 esp, ebp
  000c0	5d		 pop	 ebp
  000c1	c2 14 00	 ret	 20			; 00000014H
$LN6@PlayAmbien:
  000c4	5f		 pop	 edi
  000c5	5e		 pop	 esi
  000c6	83 c8 ff	 or	 eax, -1
  000c9	5b		 pop	 ebx
  000ca	8b e5		 mov	 esp, ebp
  000cc	5d		 pop	 ebp
  000cd	c2 14 00	 ret	 20			; 00000014H
?PlayAmbienceSound3D@CSoundManager@@QAEHMMMPBDH@Z ENDP	; CSoundManager::PlayAmbienceSound3D
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
;	COMDAT ?StopSound3D@CSoundManager@@QAEXH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?StopSound3D@CSoundManager@@QAEXH@Z PROC		; CSoundManager::StopSound3D, COMDAT
; _this$ = ecx

; 418  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 419  : 	ISoundInstance * pInstance = ms_SoundManager3D.GetInstance(iIndex);

  00003	ff 75 08	 push	 DWORD PTR _iIndex$[ebp]
  00006	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManager3D@CSoundManager@@1VCSoundManager3D@@A ; CSoundManager::ms_SoundManager3D
  0000b	e8 00 00 00 00	 call	 ?GetInstance@CSoundManager3D@@QAEPAVISoundInstance@@K@Z ; CSoundManager3D::GetInstance

; 420  : 
; 421  : 	if (!pInstance)

  00010	85 c0		 test	 eax, eax
  00012	74 07		 je	 SHORT $LN1@StopSound3

; 422  : 		return;
; 423  : 
; 424  : 	pInstance->Stop();

  00014	8b 10		 mov	 edx, DWORD PTR [eax]
  00016	8b c8		 mov	 ecx, eax
  00018	ff 52 1c	 call	 DWORD PTR [edx+28]
$LN1@StopSound3:

; 425  : 	//bool bisDone = pInstance->IsDone();
; 426  : }

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?StopSound3D@CSoundManager@@QAEXH@Z ENDP		; CSoundManager::StopSound3D
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
;	COMDAT ?PlaySound3D@CSoundManager@@QAEXMMMPBDH@Z
_TEXT	SEGMENT
tv201 = -4						; size = 4
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
_c_szFileName$ = 20					; size = 4
_iPlayCount$ = 24					; size = 4
?PlaySound3D@CSoundManager@@QAEXMMMPBDH@Z PROC		; CSoundManager::PlaySound3D, COMDAT
; _this$ = ecx

; 333  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b d9		 mov	 ebx, ecx

; 334  : 	if (0.0f == GetSoundVolume())

  00007	e8 00 00 00 00	 call	 ?GetSoundVolume@CSoundManager@@QAEMXZ ; CSoundManager::GetSoundVolume
  0000c	d9 5d fc	 fstp	 DWORD PTR tv201[ebp]
  0000f	0f 57 c0	 xorps	 xmm0, xmm0
  00012	0f 2e 45 fc	 ucomiss xmm0, DWORD PTR tv201[ebp]
  00016	9f		 lahf
  00017	f6 c4 44	 test	 ah, 68			; 00000044H
  0001a	0f 8b 8f 00 00
	00		 jnp	 $LN1@PlaySound3

; 335  : 		return;
; 336  : 
; 337  : 	int iIndex = ms_SoundManager3D.SetInstance(c_szFileName);

  00020	ff 75 14	 push	 DWORD PTR _c_szFileName$[ebp]
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManager3D@CSoundManager@@1VCSoundManager3D@@A ; CSoundManager::ms_SoundManager3D
  00028	e8 00 00 00 00	 call	 ?SetInstance@CSoundManager3D@@QAEHPBD@Z ; CSoundManager3D::SetInstance

; 338  : 	if (-1 == iIndex)

  0002d	83 f8 ff	 cmp	 eax, -1
  00030	74 7d		 je	 SHORT $LN1@PlaySound3

; 339  : 		return;
; 340  : 
; 341  : 	ISoundInstance * pInstance = ms_SoundManager3D.GetInstance(iIndex);

  00032	57		 push	 edi
  00033	50		 push	 eax
  00034	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManager3D@CSoundManager@@1VCSoundManager3D@@A ; CSoundManager::ms_SoundManager3D
  00039	e8 00 00 00 00	 call	 ?GetInstance@CSoundManager3D@@QAEPAVISoundInstance@@K@Z ; CSoundManager3D::GetInstance
  0003e	8b f8		 mov	 edi, eax

; 342  : 	if (!pInstance)

  00040	85 ff		 test	 edi, edi
  00042	74 6a		 je	 SHORT $LN9@PlaySound3

; 343  : 		return;
; 344  : 
; 345  : 	pInstance->SetPosition((fx - m_fxPosition) / m_fSoundScale,

  00044	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  00049	8b cf		 mov	 ecx, edi
  0004b	f3 0f 5c 43 14	 subss	 xmm0, DWORD PTR [ebx+20]
  00050	f3 0f 10 4b 18	 movss	 xmm1, DWORD PTR [ebx+24]
  00055	56		 push	 esi
  00056	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00059	8b 17		 mov	 edx, DWORD PTR [edi]
  0005b	f3 0f 5e c1	 divss	 xmm0, xmm1
  0005f	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00065	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  0006a	f3 0f 5c 43 10	 subss	 xmm0, DWORD PTR [ebx+16]
  0006f	f3 0f 5e c1	 divss	 xmm0, xmm1
  00073	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00079	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  0007e	f3 0f 5c 43 0c	 subss	 xmm0, DWORD PTR [ebx+12]
  00083	f3 0f 5e c1	 divss	 xmm0, xmm1
  00087	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008c	ff 52 2c	 call	 DWORD PTR [edx+44]

; 346  : 						   (fy - m_fyPosition) / m_fSoundScale,
; 347  : 						   (fz - m_fzPosition) / m_fSoundScale);
; 348  : 
; 349  : 	pInstance->SetVolume(GetSoundVolume());

  0008f	8b 37		 mov	 esi, DWORD PTR [edi]
  00091	8b cb		 mov	 ecx, ebx
  00093	e8 00 00 00 00	 call	 ?GetSoundVolume@CSoundManager@@QAEMXZ ; CSoundManager::GetSoundVolume
  00098	51		 push	 ecx
  00099	8b cf		 mov	 ecx, edi
  0009b	d9 1c 24	 fstp	 DWORD PTR [esp]
  0009e	ff 56 24	 call	 DWORD PTR [esi+36]

; 350  : 	pInstance->Play(iPlayCount);

  000a1	8b 07		 mov	 eax, DWORD PTR [edi]
  000a3	8b cf		 mov	 ecx, edi
  000a5	6a 00		 push	 0
  000a7	ff 75 18	 push	 DWORD PTR _iPlayCount$[ebp]
  000aa	ff 50 10	 call	 DWORD PTR [eax+16]
  000ad	5e		 pop	 esi
$LN9@PlaySound3:
  000ae	5f		 pop	 edi
$LN1@PlaySound3:
  000af	5b		 pop	 ebx

; 351  : }

  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c2 14 00	 ret	 20			; 00000014H
?PlaySound3D@CSoundManager@@QAEXMMMPBDH@Z ENDP		; CSoundManager::PlaySound3D
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
;	COMDAT ?PlaySound2D@CSoundManager@@QAEXPBD@Z
_TEXT	SEGMENT
_pInstance$ = -4					; size = 4
tv133 = -4						; size = 4
_c_szFileName$ = 8					; size = 4
?PlaySound2D@CSoundManager@@QAEXPBD@Z PROC		; CSoundManager::PlaySound2D, COMDAT
; _this$ = ecx

; 320  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b d9		 mov	 ebx, ecx

; 321  : 	if (0.0f == GetSoundVolume())

  00007	e8 00 00 00 00	 call	 ?GetSoundVolume@CSoundManager@@QAEMXZ ; CSoundManager::GetSoundVolume
  0000c	0f 57 c0	 xorps	 xmm0, xmm0
  0000f	d9 5d fc	 fstp	 DWORD PTR tv133[ebp]
  00012	0f 2e 45 fc	 ucomiss xmm0, DWORD PTR tv133[ebp]
  00016	9f		 lahf
  00017	f6 c4 44	 test	 ah, 68			; 00000044H
  0001a	7b 36		 jnp	 SHORT $LN1@PlaySound2

; 322  : 		return;
; 323  : 
; 324  : 	ISoundInstance * pInstance;
; 325  : 	if (!GetSoundInstance2D(c_szFileName, &pInstance))

  0001c	8d 45 fc	 lea	 eax, DWORD PTR _pInstance$[ebp]
  0001f	8b cb		 mov	 ecx, ebx
  00021	50		 push	 eax
  00022	ff 75 08	 push	 DWORD PTR _c_szFileName$[ebp]
  00025	e8 00 00 00 00	 call	 ?GetSoundInstance2D@CSoundManager@@IAEHPBDPAPAVISoundInstance@@@Z ; CSoundManager::GetSoundInstance2D
  0002a	85 c0		 test	 eax, eax
  0002c	74 24		 je	 SHORT $LN1@PlaySound2

; 326  : 		return;
; 327  : 
; 328  : 	pInstance->SetVolume(GetSoundVolume());

  0002e	56		 push	 esi
  0002f	57		 push	 edi
  00030	8b 7d fc	 mov	 edi, DWORD PTR _pInstance$[ebp]
  00033	8b cb		 mov	 ecx, ebx
  00035	8b 37		 mov	 esi, DWORD PTR [edi]
  00037	e8 00 00 00 00	 call	 ?GetSoundVolume@CSoundManager@@QAEMXZ ; CSoundManager::GetSoundVolume
  0003c	51		 push	 ecx
  0003d	8b cf		 mov	 ecx, edi
  0003f	d9 1c 24	 fstp	 DWORD PTR [esp]
  00042	ff 56 24	 call	 DWORD PTR [esi+36]

; 329  : 	pInstance->Play(1);

  00045	8b 07		 mov	 eax, DWORD PTR [edi]
  00047	8b cf		 mov	 ecx, edi
  00049	6a 00		 push	 0
  0004b	6a 01		 push	 1
  0004d	ff 50 10	 call	 DWORD PTR [eax+16]
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
$LN1@PlaySound2:
  00052	5b		 pop	 ebx

; 330  : }

  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
?PlaySound2D@CSoundManager@@QAEXPBD@Z ENDP		; CSoundManager::PlaySound2D
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
;	COMDAT ?GetMusicVolume@CSoundManager@@QAEMXZ
_TEXT	SEGMENT
?GetMusicVolume@CSoundManager@@QAEMXZ PROC		; CSoundManager::GetMusicVolume, COMDAT
; _this$ = ecx

; 291  : 	return m_fMusicVolume;

  00000	d9 41 24	 fld	 DWORD PTR [ecx+36]

; 292  : }

  00003	c3		 ret	 0
?GetMusicVolume@CSoundManager@@QAEMXZ ENDP		; CSoundManager::GetMusicVolume
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
;	COMDAT ?GetSoundVolume@CSoundManager@@QAEMXZ
_TEXT	SEGMENT
?GetSoundVolume@CSoundManager@@QAEMXZ PROC		; CSoundManager::GetSoundVolume, COMDAT
; _this$ = ecx

; 286  : 	return m_fSoundVolume;

  00000	d9 41 20	 fld	 DWORD PTR [ecx+32]

; 287  : }

  00003	c3		 ret	 0
?GetSoundVolume@CSoundManager@@QAEMXZ ENDP		; CSoundManager::GetSoundVolume
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
;	COMDAT ?RestoreVolume@CSoundManager@@QAEXXZ
_TEXT	SEGMENT
?RestoreVolume@CSoundManager@@QAEXXZ PROC		; CSoundManager::RestoreVolume, COMDAT
; _this$ = ecx

; 559  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 560  : 	m_isSoundDisable = FALSE;
; 561  : 	__SetMusicVolume(m_fBackupMusicVolume);

  00003	51		 push	 ecx
  00004	f3 0f 10 46 28	 movss	 xmm0, DWORD PTR [esi+40]
  00009	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00010	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00015	e8 00 00 00 00	 call	 ?__SetMusicVolume@CSoundManager@@IAEXM@Z ; CSoundManager::__SetMusicVolume

; 562  : 	SetSoundVolume(m_fBackupSoundVolume);

  0001a	f3 0f 10 46 2c	 movss	 xmm0, DWORD PTR [esi+44]
  0001f	51		 push	 ecx
  00020	8b ce		 mov	 ecx, esi
  00022	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00027	e8 00 00 00 00	 call	 ?SetSoundVolume@CSoundManager@@QAEXM@Z ; CSoundManager::SetSoundVolume
  0002c	5e		 pop	 esi

; 563  : }

  0002d	c3		 ret	 0
?RestoreVolume@CSoundManager@@QAEXXZ ENDP		; CSoundManager::RestoreVolume
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
;	COMDAT ?SaveVolume@CSoundManager@@QAEXXZ
_TEXT	SEGMENT
_fBackupSoundVolume$1$ = -8				; size = 4
_fBackupMusicVolume$1$ = -4				; size = 4
?SaveVolume@CSoundManager@@QAEXXZ PROC			; CSoundManager::SaveVolume, COMDAT
; _this$ = ecx

; 545  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 546  : 	if (m_isSoundDisable)

  00009	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  0000d	75 4b		 jne	 SHORT $LN1@SaveVolume

; 547  : 		return;
; 548  : 
; 549  : 	float fBackupMusicVolume = m_fMusicVolume;

  0000f	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [esi+36]
  00014	f3 0f 11 45 fc	 movss	 DWORD PTR _fBackupMusicVolume$1$[ebp], xmm0

; 550  : 	float fBackupSoundVolume = m_fSoundVolume;

  00019	f3 0f 10 46 20	 movss	 xmm0, DWORD PTR [esi+32]

; 551  : 	__SetMusicVolume(0.0f);

  0001e	51		 push	 ecx
  0001f	f3 0f 11 45 f8	 movss	 DWORD PTR _fBackupSoundVolume$1$[ebp], xmm0
  00024	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  0002b	e8 00 00 00 00	 call	 ?__SetMusicVolume@CSoundManager@@IAEXM@Z ; CSoundManager::__SetMusicVolume

; 552  : 	SetSoundVolume(0.0f);

  00030	51		 push	 ecx
  00031	8b ce		 mov	 ecx, esi
  00033	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  0003a	e8 00 00 00 00	 call	 ?SetSoundVolume@CSoundManager@@QAEXM@Z ; CSoundManager::SetSoundVolume

; 553  : 	m_fBackupMusicVolume = fBackupMusicVolume;

  0003f	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _fBackupMusicVolume$1$[ebp]
  00044	f3 0f 11 46 28	 movss	 DWORD PTR [esi+40], xmm0

; 554  : 	m_fBackupSoundVolume = fBackupSoundVolume;

  00049	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _fBackupSoundVolume$1$[ebp]
  0004e	f3 0f 11 46 2c	 movss	 DWORD PTR [esi+44], xmm0

; 555  : 	m_isSoundDisable = TRUE;

  00053	c7 46 08 01 00
	00 00		 mov	 DWORD PTR [esi+8], 1
$LN1@SaveVolume:
  0005a	5e		 pop	 esi

; 556  : }

  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
?SaveVolume@CSoundManager@@QAEXXZ ENDP			; CSoundManager::SaveVolume
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
;	COMDAT ?SetSoundVolumeGrade@CSoundManager@@QAEXH@Z
_TEXT	SEGMENT
_iGrade$ = 8						; size = 4
?SetSoundVolumeGrade@CSoundManager@@QAEXH@Z PROC	; CSoundManager::SetSoundVolumeGrade, COMDAT
; _this$ = ecx

; 261  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 262  : 	float fVolume=__ConvertGradeVolumeToApplyVolume(iGrade);

  00004	ff 75 08	 push	 DWORD PTR _iGrade$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ?__ConvertGradeVolumeToApplyVolume@CSoundManager@@IAEMH@Z ; CSoundManager::__ConvertGradeVolumeToApplyVolume

; 263  : 	SetSoundVolume(fVolume);

  0000e	51		 push	 ecx
  0000f	8b ce		 mov	 ecx, esi
  00011	d9 1c 24	 fstp	 DWORD PTR [esp]
  00014	e8 00 00 00 00	 call	 ?SetSoundVolume@CSoundManager@@QAEXM@Z ; CSoundManager::SetSoundVolume
  00019	5e		 pop	 esi

; 264  : }

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?SetSoundVolumeGrade@CSoundManager@@QAEXH@Z ENDP	; CSoundManager::SetSoundVolumeGrade
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
;	COMDAT ?SetMusicVolume@CSoundManager@@QAEXM@Z
_TEXT	SEGMENT
_fVolume$ = 8						; size = 4
?SetMusicVolume@CSoundManager@@QAEXM@Z PROC		; CSoundManager::SetMusicVolume, COMDAT
; _this$ = ecx

; 279  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	//float fVolume = __ConvertRatioVolumeToApplyVolume(fRatio);
; 281  : 	__SetMusicVolume(fVolume);

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fVolume$[ebp]
  00008	51		 push	 ecx
  00009	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0000e	e8 00 00 00 00	 call	 ?__SetMusicVolume@CSoundManager@@IAEXM@Z ; CSoundManager::__SetMusicVolume

; 282  : }

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?SetMusicVolume@CSoundManager@@QAEXM@Z ENDP		; CSoundManager::SetMusicVolume
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
;	COMDAT ?SetSoundVolumeRatio@CSoundManager@@QAEXM@Z
_TEXT	SEGMENT
_fRatio$ = 8						; size = 4
?SetSoundVolumeRatio@CSoundManager@@QAEXM@Z PROC	; CSoundManager::SetSoundVolumeRatio, COMDAT
; _this$ = ecx

; 273  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 274  : 	float fVolume = __ConvertRatioVolumeToApplyVolume(fRatio);

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fRatio$[ebp]
  00008	56		 push	 esi
  00009	51		 push	 ecx
  0000a	8b f1		 mov	 esi, ecx
  0000c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00011	e8 00 00 00 00	 call	 ?__ConvertRatioVolumeToApplyVolume@CSoundManager@@IAEMM@Z ; CSoundManager::__ConvertRatioVolumeToApplyVolume

; 275  : 	SetSoundVolume(fVolume);

  00016	51		 push	 ecx
  00017	8b ce		 mov	 ecx, esi
  00019	d9 1c 24	 fstp	 DWORD PTR [esp]
  0001c	e8 00 00 00 00	 call	 ?SetSoundVolume@CSoundManager@@QAEXM@Z ; CSoundManager::SetSoundVolume
  00021	5e		 pop	 esi

; 276  : }

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?SetSoundVolumeRatio@CSoundManager@@QAEXM@Z ENDP	; CSoundManager::SetSoundVolumeRatio
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
;	COMDAT ?SetSoundVolume@CSoundManager@@QAEXM@Z
_TEXT	SEGMENT
_fVolume$ = 8						; size = 4
?SetSoundVolume@CSoundManager@@QAEXM@Z PROC		; CSoundManager::SetSoundVolume, COMDAT
; _this$ = ecx

; 196  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 	if (m_isSoundDisable)

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fVolume$[ebp]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  0000f	75 45		 jne	 SHORT $LN7@SetSoundVo

; 198  : 	{
; 199  : 		m_fBackupSoundVolume = fVolume;
; 200  : 		return;
; 201  : 	}
; 202  : 
; 203  : 	fVolume = fMAX(fVolume, 0.0f);

  00011	83 ec 08	 sub	 esp, 8
  00014	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR [esp+4], 0
  0001c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00021	e8 00 00 00 00	 call	 ?fMAX@@YAMMM@Z		; fMAX
  00026	d9 5d 08	 fstp	 DWORD PTR _fVolume$[ebp]

; 204  : 	fVolume = fMIN(fVolume, 1.0f);

  00029	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fVolume$[ebp]
  0002e	c7 44 24 04 00
	00 80 3f	 mov	 DWORD PTR [esp+4], 1065353216 ; 3f800000H
  00036	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003b	e8 00 00 00 00	 call	 ?fMIN@@YAMMM@Z		; fMIN
  00040	d9 5d 08	 fstp	 DWORD PTR _fVolume$[ebp]

; 205  : 	m_fSoundVolume = fVolume;

  00043	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fVolume$[ebp]
  00048	83 c4 08	 add	 esp, 8

; 206  : 
; 207  : 	if (!m_isSoundDisable)

  0004b	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  0004f	f3 0f 11 46 20	 movss	 DWORD PTR [esi+32], xmm0
  00054	75 05		 jne	 SHORT $LN3@SetSoundVo
$LN7@SetSoundVo:

; 208  : 	{
; 209  : 		m_fBackupSoundVolume = fVolume;
; 210  : 	}
; 211  : }

  00056	f3 0f 11 46 2c	 movss	 DWORD PTR [esi+44], xmm0
$LN3@SetSoundVo:
  0005b	5e		 pop	 esi
  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
?SetSoundVolume@CSoundManager@@QAEXM@Z ENDP		; CSoundManager::SetSoundVolume
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
;	COMDAT ?SetAmbienceSoundScale@CSoundManager@@QAEXM@Z
_TEXT	SEGMENT
_fScale$ = 8						; size = 4
?SetAmbienceSoundScale@CSoundManager@@QAEXM@Z PROC	; CSoundManager::SetAmbienceSoundScale, COMDAT
; _this$ = ecx

; 191  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 192  : 	m_fAmbienceSoundScale = fScale;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fScale$[ebp]
  00008	f3 0f 11 41 1c	 movss	 DWORD PTR [ecx+28], xmm0

; 193  : }

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
?SetAmbienceSoundScale@CSoundManager@@QAEXM@Z ENDP	; CSoundManager::SetAmbienceSoundScale
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
;	COMDAT ?SetSoundScale@CSoundManager@@QAEXM@Z
_TEXT	SEGMENT
_fScale$ = 8						; size = 4
?SetSoundScale@CSoundManager@@QAEXM@Z PROC		; CSoundManager::SetSoundScale, COMDAT
; _this$ = ecx

; 186  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 	m_fSoundScale = fScale;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fScale$[ebp]
  00008	f3 0f 11 41 18	 movss	 DWORD PTR [ecx+24], xmm0

; 188  : }

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
?SetSoundScale@CSoundManager@@QAEXM@Z ENDP		; CSoundManager::SetSoundScale
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
;	COMDAT ?GetSoundScale@CSoundManager@@QAEMXZ
_TEXT	SEGMENT
?GetSoundScale@CSoundManager@@QAEMXZ PROC		; CSoundManager::GetSoundScale, COMDAT
; _this$ = ecx

; 182  : 	return m_fSoundScale;

  00000	d9 41 18	 fld	 DWORD PTR [ecx+24]

; 183  : }

  00003	c3		 ret	 0
?GetSoundScale@CSoundManager@@QAEMXZ ENDP		; CSoundManager::GetSoundScale
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
;	COMDAT ?Update@CSoundManager@@QAEXXZ
_TEXT	SEGMENT
tv609 = -8						; size = 4
tv572 = -4						; size = 4
?Update@CSoundManager@@QAEXXZ PROC			; CSoundManager::Update, COMDAT
; _this$ = ecx

; 84   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 85   : 	// Update Information about 3D Sound
; 86   : 	ms_SoundManager3D.SetListenerPosition(0.0f, 0.0f, 0.0f);

  00009	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0000c	8b d9		 mov	 ebx, ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManager3D@CSoundManager@@1VCSoundManager3D@@A ; CSoundManager::ms_SoundManager3D
  00013	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR [esp+8], 0
  0001b	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR [esp+4], 0
  00023	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  0002a	e8 00 00 00 00	 call	 ?SetListenerPosition@CSoundManager3D@@QAEXMMM@Z ; CSoundManager3D::SetListenerPosition

; 87   : 
; 88   : 	for (int i = 0; i < CSoundManagerStream::MUSIC_INSTANCE_MAX_NUM; ++i)

  0002f	33 ff		 xor	 edi, edi
  00031	8d 73 38	 lea	 esi, DWORD PTR [ebx+56]
$LL4@Update:

; 89   : 	{
; 90   : 		TMusicInstance & rMusicInstance = m_MusicInstances[i];
; 91   : 		if (MUSIC_STATE_OFF == rMusicInstance.MusicState)

  00034	8b 46 fc	 mov	 eax, DWORD PTR [esi-4]
  00037	85 c0		 test	 eax, eax
  00039	0f 84 c1 00 00
	00		 je	 $LN2@Update

; 92   : 			continue;
; 93   : 
; 94   : 		switch (rMusicInstance.MusicState)

  0003f	83 e8 02	 sub	 eax, 2
  00042	74 5e		 je	 SHORT $LN8@Update
  00044	83 e8 01	 sub	 eax, 1
  00047	74 26		 je	 SHORT $LN14@Update
  00049	83 e8 01	 sub	 eax, 1
  0004c	0f 85 ae 00 00
	00		 jne	 $LN2@Update

; 102  : 					rMusicInstance.fVolumeSpeed = 0.0f;
; 103  : 					rMusicInstance.MusicState = MUSIC_STATE_PLAY;
; 104  : 				}
; 105  : 
; 106  : 				{
; 107  : 					CSoundInstanceStream * pInstance = ms_SoundManagerStream.GetInstance(i);
; 108  : 					if (pInstance)
; 109  : 						pInstance->SetVolume(rMusicInstance.fVolume);
; 110  : 				}
; 111  : 				break;
; 112  : 
; 113  : 			case MUSIC_STATE_FADE_LIMIT_OUT:
; 114  : 				rMusicInstance.fVolume -= rMusicInstance.fVolumeSpeed;

  00052	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  00056	f3 0f 5c 46 08	 subss	 xmm0, DWORD PTR [esi+8]

; 115  : 				if (rMusicInstance.fVolume <= rMusicInstance.fLimitVolume)

  0005b	f3 0f 10 4e 04	 movss	 xmm1, DWORD PTR [esi+4]
  00060	0f 2f c8	 comiss	 xmm1, xmm0
  00063	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0
  00067	72 77		 jb	 SHORT $LN9@Update

; 116  : 				{
; 117  : 					rMusicInstance.fVolume = rMusicInstance.fLimitVolume;

  00069	f3 0f 11 0e	 movss	 DWORD PTR [esi], xmm1

; 118  : 					rMusicInstance.fVolumeSpeed = 0.0f;
; 119  : 					rMusicInstance.MusicState = MUSIC_STATE_PLAY;
; 120  : 				}
; 121  : 				{
; 122  : 					CSoundInstanceStream * pInstance = ms_SoundManagerStream.GetInstance(i);
; 123  : 					if (pInstance)
; 124  : 						pInstance->SetVolume(rMusicInstance.fVolume);
; 125  : 				}
; 126  : 				break;

  0006d	eb 63		 jmp	 SHORT $LN34@Update
$LN14@Update:

; 127  : 			case MUSIC_STATE_FADE_OUT:
; 128  : 				rMusicInstance.fVolume -= rMusicInstance.fVolumeSpeed;

  0006f	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  00073	0f 57 c9	 xorps	 xmm1, xmm1
  00076	f3 0f 5c 46 08	 subss	 xmm0, DWORD PTR [esi+8]

; 129  : 				if (rMusicInstance.fVolume <= 0.0f)

  0007b	0f 2f c8	 comiss	 xmm1, xmm0
  0007e	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0
  00082	72 5c		 jb	 SHORT $LN9@Update

; 130  : 				{
; 131  : 					rMusicInstance.fVolume = 0.0f;
; 132  : 					rMusicInstance.fVolumeSpeed = 0.0f;
; 133  : 					rMusicInstance.MusicState = MUSIC_STATE_OFF;
; 134  : 
; 135  : 					StopMusic(i);

  00084	57		 push	 edi
  00085	8b cb		 mov	 ecx, ebx
  00087	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0008d	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00094	c7 46 fc 00 00
	00 00		 mov	 DWORD PTR [esi-4], 0
  0009b	e8 00 00 00 00	 call	 ?StopMusic@CSoundManager@@IAEXK@Z ; CSoundManager::StopMusic

; 136  : 				}
; 137  : 				{
; 138  : 					CSoundInstanceStream * pInstance = ms_SoundManagerStream.GetInstance(i);
; 139  : 					if (pInstance)
; 140  : 						pInstance->SetVolume(rMusicInstance.fVolume);

  000a0	eb 3e		 jmp	 SHORT $LN9@Update
$LN8@Update:

; 95   : 		{
; 96   : 			case MUSIC_STATE_FADE_IN:
; 97   : 				rMusicInstance.fVolume += rMusicInstance.fVolumeSpeed;

  000a2	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]

; 98   : 
; 99   : 				if (rMusicInstance.fVolume >= GetMusicVolume())

  000a6	8b cb		 mov	 ecx, ebx
  000a8	f3 0f 58 46 08	 addss	 xmm0, DWORD PTR [esi+8]
  000ad	f3 0f 11 45 fc	 movss	 DWORD PTR tv572[ebp], xmm0
  000b2	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0
  000b6	e8 00 00 00 00	 call	 ?GetMusicVolume@CSoundManager@@QAEMXZ ; CSoundManager::GetMusicVolume
  000bb	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR tv572[ebp]
  000c0	d9 5d f8	 fstp	 DWORD PTR tv609[ebp]
  000c3	0f 2f 45 f8	 comiss	 xmm0, DWORD PTR tv609[ebp]
  000c7	72 17		 jb	 SHORT $LN9@Update

; 100  : 				{
; 101  : 					rMusicInstance.fVolume = GetMusicVolume();

  000c9	8b cb		 mov	 ecx, ebx
  000cb	e8 00 00 00 00	 call	 ?GetMusicVolume@CSoundManager@@QAEMXZ ; CSoundManager::GetMusicVolume
  000d0	d9 1e		 fstp	 DWORD PTR [esi]
$LN34@Update:

; 87   : 
; 88   : 	for (int i = 0; i < CSoundManagerStream::MUSIC_INSTANCE_MAX_NUM; ++i)

  000d2	c7 46 fc 01 00
	00 00		 mov	 DWORD PTR [esi-4], 1
  000d9	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN9@Update:
  000e0	57		 push	 edi
  000e1	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManagerStream@CSoundManager@@1VCSoundManagerStream@@A ; CSoundManager::ms_SoundManagerStream
  000e6	e8 00 00 00 00	 call	 ?GetInstance@CSoundManagerStream@@QAEPAVCSoundInstanceStream@@K@Z ; CSoundManagerStream::GetInstance
  000eb	85 c0		 test	 eax, eax
  000ed	74 11		 je	 SHORT $LN2@Update
  000ef	8b 10		 mov	 edx, DWORD PTR [eax]
  000f1	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  000f5	51		 push	 ecx
  000f6	8b c8		 mov	 ecx, eax
  000f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fd	ff 52 24	 call	 DWORD PTR [edx+36]
$LN2@Update:
  00100	47		 inc	 edi
  00101	83 c6 14	 add	 esi, 20			; 00000014H
  00104	83 ff 03	 cmp	 edi, 3
  00107	0f 8c 27 ff ff
	ff		 jl	 $LL4@Update
  0010d	5f		 pop	 edi
  0010e	5e		 pop	 esi
  0010f	5b		 pop	 ebx

; 141  : 				}
; 142  : 				break;
; 143  : 		}
; 144  : 	}
; 145  : }

  00110	8b e5		 mov	 esp, ebp
  00112	5d		 pop	 ebp
  00113	c3		 ret	 0
?Update@CSoundManager@@QAEXXZ ENDP			; CSoundManager::Update
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
;	COMDAT ?SetDirection@CSoundManager@@QAEXMMMMMM@Z
_TEXT	SEGMENT
_fxDir$ = 8						; size = 4
_fyDir$ = 12						; size = 4
_fzDir$ = 16						; size = 4
_fxUp$ = 20						; size = 4
_fyUp$ = 24						; size = 4
_fzUp$ = 28						; size = 4
?SetDirection@CSoundManager@@QAEXMMMMMM@Z PROC		; CSoundManager::SetDirection, COMDAT
; _this$ = ecx

; 79   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 80   : 	ms_SoundManager3D.SetListenerDirection(fxDir, fyDir, fzDir, fxUp, fyUp, fzUp);

  00003	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _fzUp$[ebp]
  00008	83 ec 18	 sub	 esp, 24			; 00000018H
  0000b	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManager3D@CSoundManager@@1VCSoundManager3D@@A ; CSoundManager::ms_SoundManager3D
  00010	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  00016	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _fyUp$[ebp]
  0001b	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  00021	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _fxUp$[ebp]
  00026	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  0002c	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fzDir$[ebp]
  00031	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00037	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fyDir$[ebp]
  0003c	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00042	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fxDir$[ebp]
  00047	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004c	e8 00 00 00 00	 call	 ?SetListenerDirection@CSoundManager3D@@QAEXMMMMMM@Z ; CSoundManager3D::SetListenerDirection

; 81   : }

  00051	5d		 pop	 ebp
  00052	c2 18 00	 ret	 24			; 00000018H
?SetDirection@CSoundManager@@QAEXMMMMMM@Z ENDP		; CSoundManager::SetDirection
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
;	COMDAT ?SetPosition@CSoundManager@@QAEXMMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
?SetPosition@CSoundManager@@QAEXMMM@Z PROC		; CSoundManager::SetPosition, COMDAT
; _this$ = ecx

; 72   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   : 	m_fxPosition = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00008	f3 0f 11 41 0c	 movss	 DWORD PTR [ecx+12], xmm0

; 74   : 	m_fyPosition = fy;

  0000d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00012	f3 0f 11 41 10	 movss	 DWORD PTR [ecx+16], xmm0

; 75   : 	m_fzPosition = fz;

  00017	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0001c	f3 0f 11 41 14	 movss	 DWORD PTR [ecx+20], xmm0

; 76   : }

  00021	5d		 pop	 ebp
  00022	c2 0c 00	 ret	 12			; 0000000cH
?SetPosition@CSoundManager@@QAEXMMM@Z ENDP		; CSoundManager::SetPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
;	COMDAT ?Destroy@CSoundManager@@QAEXXZ
_TEXT	SEGMENT
?Destroy@CSoundManager@@QAEXXZ PROC			; CSoundManager::Destroy, COMDAT
; _this$ = ecx

; 66   : 	ms_SoundManagerStream.Destroy();

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManagerStream@CSoundManager@@1VCSoundManagerStream@@A ; CSoundManager::ms_SoundManagerStream
  00005	e8 00 00 00 00	 call	 ?Destroy@CSoundManagerStream@@QAEXXZ ; CSoundManagerStream::Destroy

; 67   : 	ms_SoundManager3D.Destroy();

  0000a	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManager3D@CSoundManager@@1VCSoundManager3D@@A ; CSoundManager::ms_SoundManager3D
  0000f	e8 00 00 00 00	 call	 ?Destroy@CSoundManager3D@@QAEXXZ ; CSoundManager3D::Destroy

; 68   : 	ms_SoundManager2D.Destroy();

  00014	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManager2D@CSoundManager@@1VCSoundManager2D@@A ; CSoundManager::ms_SoundManager2D
  00019	e9 00 00 00 00	 jmp	 ?Destroy@CSoundManager2D@@QAEXXZ ; CSoundManager2D::Destroy
?Destroy@CSoundManager@@QAEXXZ ENDP			; CSoundManager::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
;	COMDAT ?Create@CSoundManager@@QAEHXZ
_TEXT	SEGMENT
?Create@CSoundManager@@QAEHXZ PROC			; CSoundManager::Create, COMDAT
; _this$ = ecx

; 44   : 	if (!ms_SoundManager2D.Initialize()) {

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManager2D@CSoundManager@@1VCSoundManager2D@@A ; CSoundManager::ms_SoundManager2D
  00005	e8 00 00 00 00	 call	 ?Initialize@CSoundManager2D@@QAE_NXZ ; CSoundManager2D::Initialize
  0000a	84 c0		 test	 al, al
  0000c	75 10		 jne	 SHORT $LN2@Create

; 45   : 		Tracen("CSoundManager::Create - Sound2D::Initialize - FAILURE");

  0000e	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@IHJECCAM@CSoundManager?3?3Create?5?9?5Sound2D@
  00013	e8 00 00 00 00	 call	 ?Tracen@@YAXPBD@Z	; Tracen
  00018	83 c4 04	 add	 esp, 4

; 46   : 		return FALSE;

  0001b	33 c0		 xor	 eax, eax

; 62   : }

  0001d	c3		 ret	 0
$LN2@Create:

; 47   : 	}
; 48   : 
; 49   : 	if (!ms_SoundManagerStream.Initialize())

  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManagerStream@CSoundManager@@1VCSoundManagerStream@@A ; CSoundManager::ms_SoundManagerStream
  00023	e8 00 00 00 00	 call	 ?Initialize@CSoundManagerStream@@QAE_NXZ ; CSoundManagerStream::Initialize
  00028	84 c0		 test	 al, al
  0002a	75 10		 jne	 SHORT $LN3@Create

; 50   : 	{
; 51   : 		Tracen("CSoundManager::Create - SoundStream::Initialize - FAILURE");

  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@HNOILEHO@CSoundManager?3?3Create?5?9?5SoundSt@
  00031	e8 00 00 00 00	 call	 ?Tracen@@YAXPBD@Z	; Tracen
  00036	83 c4 04	 add	 esp, 4

; 52   : 		return FALSE;

  00039	33 c0		 xor	 eax, eax

; 62   : }

  0003b	c3		 ret	 0
$LN3@Create:

; 53   : 	}
; 54   : 
; 55   : 	if (!ms_SoundManager3D.Initialize())

  0003c	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_SoundManager3D@CSoundManager@@1VCSoundManager3D@@A ; CSoundManager::ms_SoundManager3D
  00041	e8 00 00 00 00	 call	 ?Initialize@CSoundManager3D@@QAE_NXZ ; CSoundManager3D::Initialize
  00046	84 c0		 test	 al, al
  00048	75 10		 jne	 SHORT $LN4@Create

; 56   : 	{
; 57   : 		Tracen("CSoundManager::Create - Sound3D::Initialize - FAILURE");

  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@CCBPLCAC@CSoundManager?3?3Create?5?9?5Sound3D@
  0004f	e8 00 00 00 00	 call	 ?Tracen@@YAXPBD@Z	; Tracen
  00054	83 c4 04	 add	 esp, 4

; 58   : 		return FALSE;

  00057	33 c0		 xor	 eax, eax

; 62   : }

  00059	c3		 ret	 0
$LN4@Create:

; 59   : 	}
; 60   : 
; 61   : 	return TRUE;

  0005a	b8 01 00 00 00	 mov	 eax, 1

; 62   : }

  0005f	c3		 ret	 0
?Create@CSoundManager@@QAEHXZ ENDP			; CSoundManager::Create
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
;	COMDAT ??1CSoundManager@@UAE@XZ
_TEXT	SEGMENT
??1CSoundManager@@UAE@XZ PROC				; CSoundManager::~CSoundManager, COMDAT
; _this$ = ecx

; 39   : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 40   : }

  00004	8d 77 6c	 lea	 esi, DWORD PTR [edi+108]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 767  :         _Erase_tree(_Al, _Myhead->_Parent);

  00007	8b ce		 mov	 ecx, esi
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp

; 39   : {

  00009	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CSoundManager@@6B@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 767  :         _Erase_tree(_Al, _Myhead->_Parent);

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	ff 70 04	 push	 DWORD PTR [eax+4]
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,float>,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0001a	6a 2c		 push	 44			; 0000002cH
  0001c	ff 36		 push	 DWORD PTR [esi]
  0001e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00023	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h

; 19   : 	{

  00026	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CSingleton@VCSoundManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  0002c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCSoundManager@@@@0PAVCSoundManager@@A, 0 ; CSingleton<CSoundManager>::ms_singleton
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp

; 40   : }

  00038	c3		 ret	 0
??1CSoundManager@@UAE@XZ ENDP				; CSoundManager::~CSoundManager
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp
;	COMDAT ??0CSoundManager@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CSoundManager@@QAE@XZ PROC				; CSoundManager::CSoundManager, COMDAT
; _this$ = ecx

; 12   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CSoundManager@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f9		 mov	 edi, ecx
  00029	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h

; 15   : 		ms_singleton = (T*) ((int) this + offset);

  0002c	89 3d 00 00 00
	00		 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCSoundManager@@@@0PAVCSoundManager@@A, edi ; CSingleton<CSoundManager>::ms_singleton
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp

; 12   : {

  00032	8d 77 6c	 lea	 esi, DWORD PTR [edi+108]
  00035	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CSoundManager@@6B@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  0003b	6a 2c		 push	 44			; 0000002cH
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp

; 12   : {

  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00044	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 450  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  00047	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0004d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00054	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00059	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 346  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  0005c	89 00		 mov	 DWORD PTR [eax], eax

; 347  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  0005e	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 348  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  00061	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 349  :         _Pnode->_Color = _Black;

  00064	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1947 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  0006a	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager.cpp

; 36   : }

  0006c	8b c7		 mov	 eax, edi
  0006e	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  00075	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  0007c	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
  00083	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  0008a	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
  00091	c7 47 18 00 00
	48 43		 mov	 DWORD PTR [edi+24], 1128792064 ; 43480000H
  00098	c7 47 1c 00 00
	7a 44		 mov	 DWORD PTR [edi+28], 1148846080 ; 447a0000H
  0009f	c7 47 20 00 00
	80 3f		 mov	 DWORD PTR [edi+32], 1065353216 ; 3f800000H
  000a6	c7 47 24 00 00
	80 3f		 mov	 DWORD PTR [edi+36], 1065353216 ; 3f800000H
  000ad	c7 47 28 00 00
	00 00		 mov	 DWORD PTR [edi+40], 0
  000b4	c7 47 2c 00 00
	00 00		 mov	 DWORD PTR [edi+44], 0
  000bb	c7 47 30 00 00
	00 00		 mov	 DWORD PTR [edi+48], 0
  000c2	c7 47 44 00 00
	00 00		 mov	 DWORD PTR [edi+68], 0
  000c9	c7 47 34 00 00
	00 00		 mov	 DWORD PTR [edi+52], 0
  000d0	c7 47 38 00 00
	00 00		 mov	 DWORD PTR [edi+56], 0
  000d7	c7 47 40 00 00
	00 00		 mov	 DWORD PTR [edi+64], 0
  000de	c7 47 48 00 00
	00 00		 mov	 DWORD PTR [edi+72], 0
  000e5	c7 47 4c 00 00
	00 00		 mov	 DWORD PTR [edi+76], 0
  000ec	c7 47 54 00 00
	00 00		 mov	 DWORD PTR [edi+84], 0
  000f3	c7 47 58 00 00
	00 00		 mov	 DWORD PTR [edi+88], 0
  000fa	c7 47 5c 00 00
	00 00		 mov	 DWORD PTR [edi+92], 0
  00101	c7 47 60 00 00
	00 00		 mov	 DWORD PTR [edi+96], 0
  00108	c7 47 68 00 00
	00 00		 mov	 DWORD PTR [edi+104], 0
  0010f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00112	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00119	59		 pop	 ecx
  0011a	5f		 pop	 edi
  0011b	5e		 pop	 esi
  0011c	8b e5		 mov	 esp, ebp
  0011e	5d		 pop	 ebp
  0011f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CSoundManager@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$CSingleton@VCSoundManager@@@@UAE@XZ ; CSingleton<CSoundManager>::~CSingleton<CSoundManager>
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0CSoundManager@@QAE@XZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CSoundManager@@QAE@XZ
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CSoundManager@@QAE@XZ ENDP				; CSoundManager::CSoundManager
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
;	COMDAT ??_G?$CSingleton@VCSoundManager@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CSingleton@VCSoundManager@@@@UAEPAXI@Z PROC	; CSingleton<CSoundManager>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1

; 19   : 	{

  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CSingleton@VCSoundManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00010	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCSoundManager@@@@0PAVCSoundManager@@A, 0 ; CSingleton<CSoundManager>::ms_singleton
  0001a	74 0b		 je	 SHORT $LN8@scalar
  0001c	6a 04		 push	 4
  0001e	56		 push	 esi
  0001f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00024	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_G?$CSingleton@VCSoundManager@@@@UAEPAXI@Z ENDP	; CSingleton<CSoundManager>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
;	COMDAT ??1?$CSingleton@VCSoundManager@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CSingleton@VCSoundManager@@@@UAE@XZ PROC		; CSingleton<CSoundManager>::~CSingleton<CSoundManager>, COMDAT
; _this$ = ecx

; 19   : 	{

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CSingleton@VCSoundManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00006	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCSoundManager@@@@0PAVCSoundManager@@A, 0 ; CSingleton<CSoundManager>::ms_singleton

; 22   : 	}

  00010	c3		 ret	 0
??1?$CSingleton@VCSoundManager@@@@UAE@XZ ENDP		; CSingleton<CSoundManager>::~CSingleton<CSoundManager>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?_Throw_tree_length_error@std@@YAXXZ
_TEXT	SEGMENT
?_Throw_tree_length_error@std@@YAXXZ PROC		; std::_Throw_tree_length_error, COMDAT

; 417  :     _Xlength_error("map/set too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Throw_tree:
  0000a	cc		 int	 3
?_Throw_tree_length_error@std@@YAXXZ ENDP		; std::_Throw_tree_length_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 182  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 183  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 184  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 185  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 136  :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 186  :         _Throw_bad_array_new_length(); // add overflow
; 187  :     }
; 188  : 
; 189  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 136  :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 191  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 192  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 193  : 
; 194  : #ifdef _DEBUG
; 195  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 196  : #endif // defined(_DEBUG)
; 197  :     return _Ptr;
; 198  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 1358 :     _CONSTEXPR20 ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 434  :         return _Myres > _Small_string_capacity;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00009	76 27		 jbe	 SHORT $LN19@basic_stri
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0000d	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN30@basic_stri

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN27@basic_stri

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN30@basic_stri:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN19@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 1366 :     }

  00044	c3		 ret	 0
$LN27@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN39@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 744  :     _CONSTEXPR20 basic_string(_In_z_ const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t{}) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b d9		 mov	 ebx, ecx
  00008	0f 57 c0	 xorps	 xmm0, xmm0
  0000b	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0000c	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  0000f	8b f7		 mov	 esi, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00011	0f 11 03	 movups	 XMMWORD PTR [ebx], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00014	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0001b	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00022	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
$LL51@basic_stri:
  00025	8a 06		 mov	 al, BYTE PTR [esi]
  00027	46		 inc	 esi
  00028	84 c0		 test	 al, al
  0002a	75 f9		 jne	 SHORT $LL51@basic_stri
  0002c	2b f1		 sub	 esi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 857  :         if (_Count > max_size()) {

  0002e	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  00034	0f 87 9b 00 00
	00		 ja	 $LN62@basic_stri

; 859  :         }
; 860  : 
; 861  :         auto& _Al       = _Getal();
; 862  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 863  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 864  : 
; 865  :         if (_Count <= _Small_string_capacity) {

  0003a	83 fe 0f	 cmp	 esi, 15			; 0000000fH
  0003d	77 24		 ja	 SHORT $LN21@basic_stri
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0003f	56		 push	 esi
  00040	57		 push	 edi
  00041	53		 push	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  00042	89 73 10	 mov	 DWORD PTR [ebx+16], esi

; 867  :             _My_data._Myres  = _Small_string_capacity;

  00045	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0004c	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00051	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));
; 746  :     }

  00055	83 c4 0c	 add	 esp, 12			; 0000000cH
  00058	8b c3		 mov	 eax, ebx
  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
$LN21@basic_stri:

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00063	8b fe		 mov	 edi, esi
  00065	83 cf 0f	 or	 edi, 15			; 0000000fH
  00068	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0006e	76 12		 jbe	 SHORT $LN27@basic_stri

; 2944 :             return _Max;

  00070	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00075	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00080	eb 26		 jmp	 SHORT $LN60@basic_stri
$LN27@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00082	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00087	3b f8		 cmp	 edi, eax
  00089	0f 42 f8	 cmovb	 edi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  0008c	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  0008f	85 c0		 test	 eax, eax
  00091	74 18		 je	 SHORT $LN59@basic_stri
$LN41@basic_stri:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00093	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00098	72 08		 jb	 SHORT $LN42@basic_stri

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a0	eb 06		 jmp	 SHORT $LN60@basic_stri
$LN42@basic_stri:

; 136  :         return ::operator new(_Bytes);

  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN60@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000a8	83 c4 04	 add	 esp, 4
$LN59@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000ab	56		 push	 esi
  000ac	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000af	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000b2	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000b3	89 03		 mov	 DWORD PTR [ebx], eax

; 890  : 
; 891  :         _My_data._Mysize = _Count;

  000b5	89 73 10	 mov	 DWORD PTR [ebx+16], esi

; 892  :         _My_data._Myres  = _New_capacity;

  000b8	89 7b 14	 mov	 DWORD PTR [ebx+20], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000bb	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000c0	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));
; 746  :     }

  000c3	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c6	5f		 pop	 edi

; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000c7	c6 04 30 00	 mov	 BYTE PTR [eax+esi], 0

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));
; 746  :     }

  000cb	8b c3		 mov	 eax, ebx
  000cd	5e		 pop	 esi
  000ce	5b		 pop	 ebx
  000cf	8b e5		 mov	 esp, ebp
  000d1	5d		 pop	 ebp
  000d2	c2 04 00	 ret	 4
$LN62@basic_stri:

; 858  :             _Xlen_string(); // result too long

  000d5	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN57@basic_stri:
  000da	cc		 int	 3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 512  :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 107  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 108  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN18@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN18@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 144  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 145  :     }

  00003	8b c1		 mov	 eax, ecx

; 66   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 67   :     {
; 68   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 144  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 145  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN13@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN8@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 96   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 97   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 92   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 73   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 75   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
