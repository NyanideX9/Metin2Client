; Listing generated by Microsoft (R) Optimizing Compiler Version 19.43.34808.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\MilesLib\Distribute\SoundManager3D.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??0CSoundManager3D@@QAE@XZ			; CSoundManager3D::CSoundManager3D
PUBLIC	??1CSoundManager3D@@UAE@XZ			; CSoundManager3D::~CSoundManager3D
PUBLIC	?Initialize@CSoundManager3D@@QAE_NXZ		; CSoundManager3D::Initialize
PUBLIC	?Destroy@CSoundManager3D@@QAEXXZ		; CSoundManager3D::Destroy
PUBLIC	?SetInstance@CSoundManager3D@@QAEHPBD@Z		; CSoundManager3D::SetInstance
PUBLIC	?GetInstance@CSoundManager3D@@QAEPAVISoundInstance@@K@Z ; CSoundManager3D::GetInstance
PUBLIC	?SetListenerDirection@CSoundManager3D@@QAEXMMMMMM@Z ; CSoundManager3D::SetListenerDirection
PUBLIC	?SetListenerPosition@CSoundManager3D@@QAEXMMM@Z	; CSoundManager3D::SetListenerPosition
PUBLIC	?SetListenerVelocity@CSoundManager3D@@QAEXMMMM@Z ; CSoundManager3D::SetListenerVelocity
PUBLIC	?Lock@CSoundManager3D@@QAEXH@Z			; CSoundManager3D::Lock
PUBLIC	?Unlock@CSoundManager3D@@QAEXH@Z		; CSoundManager3D::Unlock
PUBLIC	??_GCSoundManager3D@@UAEPAXI@Z			; CSoundManager3D::`scalar deleting destructor'
PUBLIC	?_Xlength@?$vector@USProvider@@V?$allocator@USProvider@@@std@@@std@@CAXXZ ; std::vector<SProvider,std::allocator<SProvider> >::_Xlength
PUBLIC	??$_Resize@U_Value_init_tag@std@@@?$vector@USProvider@@V?$allocator@USProvider@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<SProvider,std::allocator<SProvider> >::_Resize<std::_Value_init_tag>
PUBLIC	??$_Copy_memmove@PAUSProvider@@PAU1@@std@@YAPAUSProvider@@PAU1@00@Z ; std::_Copy_memmove<SProvider *,SProvider *>
PUBLIC	??$_Copy_memmove_tail@PAUSProvider@@@std@@YAPAUSProvider@@QBDQAU1@II@Z ; std::_Copy_memmove_tail<SProvider *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_7CSoundManager3D@@6B@			; CSoundManager3D::`vftable'
PUBLIC	??_C@_0BP@KDDGJLNF@Miles?5Fast?52D?5Positional?5Audio@ ; `string'
PUBLIC	??_C@_0CM@LDIAPBKD@CSoundManager3D?3?3GetInstance?5?$CIf@ ; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R1A@?0A@EA@CSoundBase@@8			; CSoundBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCSoundBase@@@8				; CSoundBase `RTTI Type Descriptor'
PUBLIC	??_R3CSoundBase@@8				; CSoundBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSoundBase@@8				; CSoundBase::`RTTI Base Class Array'
PUBLIC	??_R4CSoundManager3D@@6B@			; CSoundManager3D::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCSoundManager3D@@@8			; CSoundManager3D `RTTI Type Descriptor'
PUBLIC	??_R3CSoundManager3D@@8				; CSoundManager3D::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSoundManager3D@@8				; CSoundManager3D::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CSoundManager3D@@8		; CSoundManager3D::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??_L@YGXPAXIIP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	__imp__AIL_enumerate_3D_providers@12:PROC
EXTRN	__imp__AIL_open_3D_provider@4:PROC
EXTRN	__imp__AIL_close_3D_provider@4:PROC
EXTRN	__imp__AIL_open_3D_listener@4:PROC
EXTRN	__imp__AIL_close_3D_listener@4:PROC
EXTRN	__imp__AIL_set_3D_position@16:PROC
EXTRN	__imp__AIL_set_3D_velocity@20:PROC
EXTRN	__imp__AIL_set_3D_orientation@28:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?TraceError@@YAXPBDZZ:PROC			; TraceError
EXTRN	??0CSoundBase@@QAE@XZ:PROC			; CSoundBase::CSoundBase
EXTRN	??1CSoundBase@@UAE@XZ:PROC			; CSoundBase::~CSoundBase
EXTRN	?Initialize@CSoundBase@@QAEXXZ:PROC		; CSoundBase::Initialize
EXTRN	?Destroy@CSoundBase@@QAEXXZ:PROC		; CSoundBase::Destroy
EXTRN	?AddFile@CSoundBase@@QAEPAVCSoundData@@KPBD@Z:PROC ; CSoundBase::AddFile
EXTRN	?GetFileCRC@CSoundBase@@QAEKPBD@Z:PROC		; CSoundBase::GetFileCRC
EXTRN	??0CSoundInstance3D@@QAE@XZ:PROC		; CSoundInstance3D::CSoundInstance3D
EXTRN	??1CSoundInstance3D@@UAE@XZ:PROC		; CSoundInstance3D::~CSoundInstance3D
EXTRN	??_ECSoundManager3D@@UAEPAXI@Z:PROC		; CSoundManager3D::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?ms_pProviderDefault@CSoundBase@@1PAUSProvider@@A:DWORD ; CSoundBase::ms_pProviderDefault
EXTRN	?ms_ProviderVector@CSoundBase@@1V?$vector@USProvider@@V?$allocator@USProvider@@@std@@@std@@A:BYTE ; CSoundBase::ms_ProviderVector
EXTRN	?ms_dataMap@CSoundBase@@1V?$map@KPAVCSoundData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCSoundData@@@std@@@3@@std@@A:QWORD ; CSoundBase::ms_dataMap
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?k@?1??SetInstance@CSoundManager3D@@QAEHPBD@Z@4KA
_BSS	SEGMENT
?k@?1??SetInstance@CSoundManager3D@@QAEHPBD@Z@4KA DD 01H DUP (?) ; `CSoundManager3D::SetInstance'::`2'::k
_BSS	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CSoundManager3D@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CSoundManager3D@@8 DD FLAT:??_R0?AVCSoundManager3D@@@8 ; CSoundManager3D::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSoundManager3D@@8
rdata$r	ENDS
;	COMDAT ??_R2CSoundManager3D@@8
rdata$r	SEGMENT
??_R2CSoundManager3D@@8 DD FLAT:??_R1A@?0A@EA@CSoundManager3D@@8 ; CSoundManager3D::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CSoundBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CSoundManager3D@@8
rdata$r	SEGMENT
??_R3CSoundManager3D@@8 DD 00H				; CSoundManager3D::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CSoundManager3D@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSoundManager3D@@@8
data$rs	SEGMENT
??_R0?AVCSoundManager3D@@@8 DD FLAT:??_7type_info@@6B@	; CSoundManager3D `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSoundManager3D@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CSoundManager3D@@6B@
rdata$r	SEGMENT
??_R4CSoundManager3D@@6B@ DD 00H			; CSoundManager3D::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCSoundManager3D@@@8
	DD	FLAT:??_R3CSoundManager3D@@8
rdata$r	ENDS
;	COMDAT ??_R2CSoundBase@@8
rdata$r	SEGMENT
??_R2CSoundBase@@8 DD FLAT:??_R1A@?0A@EA@CSoundBase@@8	; CSoundBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CSoundBase@@8
rdata$r	SEGMENT
??_R3CSoundBase@@8 DD 00H				; CSoundBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CSoundBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSoundBase@@@8
data$rs	SEGMENT
??_R0?AVCSoundBase@@@8 DD FLAT:??_7type_info@@6B@	; CSoundBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSoundBase@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CSoundBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CSoundBase@@8 DD FLAT:??_R0?AVCSoundBase@@@8 ; CSoundBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSoundBase@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@LDIAPBKD@CSoundManager3D?3?3GetInstance?5?$CIf@
CONST	SEGMENT
??_C@_0CM@LDIAPBKD@CSoundManager3D?3?3GetInstance?5?$CIf@ DB 'CSoundManag'
	DB	'er3D::GetInstance (filename: %s)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@KDDGJLNF@Miles?5Fast?52D?5Positional?5Audio@
CONST	SEGMENT
??_C@_0BP@KDDGJLNF@Miles?5Fast?52D?5Positional?5Audio@ DB 'Miles Fast 2D '
	DB	'Positional Audio', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7CSoundManager3D@@6B@
CONST	SEGMENT
??_7CSoundManager3D@@6B@ DD FLAT:??_R4CSoundManager3D@@6B@ ; CSoundManager3D::`vftable'
	DD	FLAT:??_ECSoundManager3D@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CSoundManager3D@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CSoundManager3D@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CSoundManager3D@@QAE@XZ$0
__ehfuncinfo$??0CSoundManager3D@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CSoundManager3D@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove_tail@PAUSProvider@@@std@@YAPAUSProvider@@QBDQAU1@II@Z
_TEXT	SEGMENT
__First_ch$ = 8						; size = 4
__Dest$ = 12						; size = 4
__Byte_count$ = 16					; size = 4
__Object_count$ = 20					; size = 4
??$_Copy_memmove_tail@PAUSProvider@@@std@@YAPAUSProvider@@QBDQAU1@II@Z PROC ; std::_Copy_memmove_tail<SProvider *>, COMDAT

; 4763 :     const char* const _First_ch, const _OutCtgIt _Dest, const size_t _Byte_count, const size_t _Object_count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4764 :     _STL_INTERNAL_CHECK(_Byte_count == _Object_count * sizeof(*_Dest));
; 4765 :     const auto _Dest_ptr = _STD _To_address(_Dest);
; 4766 :     const auto _Dest_ch  = const_cast<char*>(reinterpret_cast<const volatile char*>(_Dest_ptr));
; 4767 :     _CSTD memmove(_Dest_ch, _First_ch, _Byte_count);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 10	 mov	 edi, DWORD PTR __Byte_count$[ebp]
  0000b	57		 push	 edi
  0000c	ff 75 08	 push	 DWORD PTR __First_ch$[ebp]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memmove
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4768 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4769 :         (void) _Object_count;
; 4770 :         // CodeQL [SM02986] This cast is correct: we're bypassing pointer arithmetic for performance.
; 4771 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Byte_count);

  00018	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi

; 4772 :     } else {
; 4773 :         return _Dest + static_cast<_Iter_diff_t<_OutCtgIt>>(_Object_count);
; 4774 :     }
; 4775 : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Copy_memmove_tail@PAUSProvider@@@std@@YAPAUSProvider@@QBDQAU1@II@Z ENDP ; std::_Copy_memmove_tail<SProvider *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove@PAUSProvider@@PAU1@@std@@YAPAUSProvider@@PAU1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAUSProvider@@PAU1@@std@@YAPAUSProvider@@PAU1@00@Z PROC ; std::_Copy_memmove<SProvider *,SProvider *>, COMDAT

; 4778 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4779 :     _STL_INTERNAL_CHECK(_First <= _Last);
; 4780 :     const auto _First_ptr    = _STD _To_address(_First);
; 4781 :     const auto _Last_ptr     = _STD _To_address(_Last);
; 4782 :     const auto _Object_count = static_cast<size_t>(_Last_ptr - _First_ptr);

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	8b c1		 mov	 eax, ecx
  0000d	c1 f8 03	 sar	 eax, 3

; 4783 :     const auto _First_ch     = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 4784 :     const auto _Last_ch      = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last_ptr));
; 4785 :     const auto _Byte_count   = static_cast<size_t>(_Last_ch - _First_ch);
; 4786 :     return _STD _Copy_memmove_tail(_First_ch, _STD move(_Dest), _Byte_count, _Object_count);

  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00015	52		 push	 edx
  00016	e8 00 00 00 00	 call	 ??$_Copy_memmove_tail@PAUSProvider@@@std@@YAPAUSProvider@@QBDQAU1@II@Z ; std::_Copy_memmove_tail<SProvider *>
  0001b	83 c4 10	 add	 esp, 16			; 00000010H

; 4787 : }

  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??$_Copy_memmove@PAUSProvider@@PAU1@@std@@YAPAUSProvider@@PAU1@00@Z ENDP ; std::_Copy_memmove<SProvider *,SProvider *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??$_Resize@U_Value_init_tag@std@@@?$vector@USProvider@@V?$allocator@USProvider@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
__Oldsize$1$ = -4					; size = 4
__Newsize$ = 8						; size = 4
tv668 = 8						; size = 4
__Val$ = 12						; size = 4
??$_Resize@U_Value_init_tag@std@@@?$vector@USProvider@@V?$allocator@USProvider@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<SProvider,std::allocator<SProvider> >::_Resize<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1574 :     _CONSTEXPR20 void _Resize(const size_type _Newsize, const _Ty2& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi

; 1575 :         // trim or append elements, provide strong guarantee
; 1576 :         auto& _Al           = _Getal();
; 1577 :         auto& _My_data      = _Mypair._Myval2;
; 1578 :         pointer& _Myfirst   = _My_data._Myfirst;
; 1579 :         pointer& _Mylast    = _My_data._Mylast;
; 1580 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);
; 1581 :         if (_Newsize < _Oldsize) { // trim

  00006	8b 75 08	 mov	 esi, DWORD PTR __Newsize$[ebp]
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]
  0000f	8b c3		 mov	 eax, ebx
  00011	8b 17		 mov	 edx, DWORD PTR [edi]
  00013	2b c2		 sub	 eax, edx
  00015	c1 f8 03	 sar	 eax, 3
  00018	89 45 fc	 mov	 DWORD PTR __Oldsize$1$[ebp], eax
  0001b	3b f0		 cmp	 esi, eax
  0001d	73 0f		 jae	 SHORT $LN2@Resize

; 1582 :             const pointer _Newlast = _Myfirst + _Newsize;

  0001f	8d 04 f2	 lea	 eax, DWORD PTR [edx+esi*8]

; 1583 :             _Orphan_range(_Newlast, _Mylast);
; 1584 :             _Destroy_range(_Newlast, _Mylast, _Al);
; 1585 :             _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1586 :             _Mylast = _Newlast;

  00022	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00025	5f		 pop	 edi

; 1610 :     }

  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 08 00	 ret	 8
$LN2@Resize:

; 1587 :             return;
; 1588 :         }
; 1589 : 
; 1590 :         if (_Newsize > _Oldsize) { // append

  0002e	0f 86 0d 01 00
	00		 jbe	 $LN3@Resize

; 1591 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

  00034	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00037	2b ca		 sub	 ecx, edx
  00039	c1 f9 03	 sar	 ecx, 3

; 1592 :             if (_Newsize > _Oldcapacity) { // reallocate

  0003c	3b f1		 cmp	 esi, ecx
  0003e	0f 86 e5 00 00
	00		 jbe	 $LN4@Resize

; 1538 :         if (_Newsize > max_size()) {

  00044	81 fe ff ff ff
	1f		 cmp	 esi, 536870911		; 1fffffffH
  0004a	0f 87 fa 00 00
	00		 ja	 $LN144@Resize

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00050	8b d1		 mov	 edx, ecx
  00052	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH
  00057	d1 ea		 shr	 edx, 1
  00059	2b c2		 sub	 eax, edx
  0005b	3b c8		 cmp	 ecx, eax
  0005d	76 14		 jbe	 SHORT $LN11@Resize

; 1997 :             return _Max; // geometric growth would overflow

  0005f	b8 f8 ff ff ff	 mov	 eax, -8			; fffffff8H
  00064	c7 45 08 f8 ff
	ff ff		 mov	 DWORD PTR tv668[ebp], -8 ; fffffff8H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00071	eb 39		 jmp	 SHORT $LN142@Resize
$LN11@Resize:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00073	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 2001 : 
; 2002 :         if (_Geometric < _Newsize) {

  00076	3b c6		 cmp	 eax, esi
  00078	73 10		 jae	 SHORT $LN12@Resize

; 2003 :             return _Newsize; // geometric growth would be insufficient

  0007a	8b c6		 mov	 eax, esi
$LN22@Resize:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 122  :     return _Count * _Ty_size;

  0007c	c1 e0 03	 shl	 eax, 3
  0007f	89 45 08	 mov	 DWORD PTR tv668[ebp], eax

; 227  :     if (_Bytes == 0) {

  00082	85 c0		 test	 eax, eax
  00084	75 11		 jne	 SHORT $LN26@Resize

; 228  :         return nullptr;

  00086	33 db		 xor	 ebx, ebx
  00088	eb 27		 jmp	 SHORT $LN25@Resize
$LN12@Resize:

; 117  :         if (_Count > _Max_possible) {

  0008a	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  0008f	0f 87 ba 00 00
	00		 ja	 $LN145@Resize
  00095	eb e5		 jmp	 SHORT $LN22@Resize
$LN26@Resize:

; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00097	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0009c	72 08		 jb	 SHORT $LN27@Resize

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a4	eb 06		 jmp	 SHORT $LN142@Resize
$LN27@Resize:

; 136  :         return ::operator new(_Bytes);

  000a6	50		 push	 eax
  000a7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN142@Resize:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1551 :         const pointer _Appended_first = _Newvec + _Oldsize;

  000ac	8b d8		 mov	 ebx, eax
  000ae	83 c4 04	 add	 esp, 4
$LN25@Resize:
  000b1	8b 45 fc	 mov	 eax, DWORD PTR __Oldsize$1$[ebp]

; 1560 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

  000b4	8b ce		 mov	 ecx, esi
  000b6	8d 14 c3	 lea	 edx, DWORD PTR [ebx+eax*8]
  000b9	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 2056 :     for (; 0 < _Count; --_Count) {

  000bb	74 13		 je	 SHORT $LN36@Resize
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1560 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

  000bd	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  000c4	50		 push	 eax
  000c5	6a 00		 push	 0
  000c7	52		 push	 edx
  000c8	e8 00 00 00 00	 call	 _memset
  000cd	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN36@Resize:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000d0	53		 push	 ebx
  000d1	ff 77 04	 push	 DWORD PTR [edi+4]
  000d4	ff 37		 push	 DWORD PTR [edi]
  000d6	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAUSProvider@@PAU1@@std@@YAPAUSProvider@@PAU1@00@Z ; std::_Copy_memmove<SProvider *,SProvider *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  000db	8b 07		 mov	 eax, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000dd	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  000e0	85 c0		 test	 eax, eax
  000e2	74 2c		 je	 SHORT $LN66@Resize

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2056 :             _ASAN_VECTOR_REMOVE;
; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e4	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  000e7	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e9	83 e1 f8	 and	 ecx, -8			; fffffff8H

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000ec	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f2	72 12		 jb	 SHORT $LN77@Resize

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f4	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f7	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000fa	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fc	83 c0 fc	 add	 eax, -4			; fffffffcH
  000ff	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00102	77 50		 ja	 SHORT $LN74@Resize

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00104	8b c2		 mov	 eax, edx
$LN77@Resize:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00106	51		 push	 ecx
  00107	50		 push	 eax
  00108	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0010d	83 c4 08	 add	 esp, 8
$LN66@Resize:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2061 :         _Mylast  = _Newvec + _Newsize;

  00110	8d 04 f3	 lea	 eax, DWORD PTR [ebx+esi*8]
  00113	89 1f		 mov	 DWORD PTR [edi], ebx
  00115	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  00118	8b 45 08	 mov	 eax, DWORD PTR tv668[ebp]
  0011b	03 c3		 add	 eax, ebx
  0011d	89 47 08	 mov	 DWORD PTR [edi+8], eax
  00120	5f		 pop	 edi

; 1610 :     }

  00121	5e		 pop	 esi
  00122	5b		 pop	 ebx
  00123	8b e5		 mov	 esp, ebp
  00125	5d		 pop	 ebp
  00126	c2 08 00	 ret	 8
$LN4@Resize:

; 1603 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  00129	2b f0		 sub	 esi, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 2056 :     for (; 0 < _Count; --_Count) {

  0012b	74 11		 je	 SHORT $LN109@Resize
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1603 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  0012d	c1 e6 03	 shl	 esi, 3
  00130	56		 push	 esi
  00131	6a 00		 push	 0
  00133	53		 push	 ebx
  00134	e8 00 00 00 00	 call	 _memset
  00139	83 c4 0c	 add	 esp, 12			; 0000000cH
  0013c	03 de		 add	 ebx, esi
$LN109@Resize:
  0013e	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
$LN3@Resize:
  00141	5f		 pop	 edi

; 1610 :     }

  00142	5e		 pop	 esi
  00143	5b		 pop	 ebx
  00144	8b e5		 mov	 esp, ebp
  00146	5d		 pop	 ebp
  00147	c2 08 00	 ret	 8
$LN144@Resize:

; 1539 :             _Xlength();

  0014a	e8 00 00 00 00	 call	 ?_Xlength@?$vector@USProvider@@V?$allocator@USProvider@@@std@@@std@@CAXXZ ; std::vector<SProvider,std::allocator<SProvider> >::_Xlength
$LN145@Resize:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  0014f	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN74@Resize:

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00154	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN141@Resize:
  00159	cc		 int	 3
??$_Resize@U_Value_init_tag@std@@@?$vector@USProvider@@V?$allocator@USProvider@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<SProvider,std::allocator<SProvider> >::_Resize<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xlength@?$vector@USProvider@@V?$allocator@USProvider@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@USProvider@@V?$allocator@USProvider@@@std@@@std@@CAXXZ PROC ; std::vector<SProvider,std::allocator<SProvider> >::_Xlength, COMDAT

; 2169 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@USProvider@@V?$allocator@USProvider@@@std@@@std@@CAXXZ ENDP ; std::vector<SProvider,std::allocator<SProvider> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCSoundManager3D@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCSoundManager3D@@UAEPAXI@Z PROC			; CSoundManager3D::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CSoundManager3D@@UAE@XZ ; CSoundManager3D::~CSoundManager3D
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN5@scalar
  00011	68 ac 01 00 00	 push	 428			; 000001acH
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCSoundManager3D@@UAEPAXI@Z ENDP			; CSoundManager3D::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager3D.cpp
;	COMDAT ?Unlock@CSoundManager3D@@QAEXH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?Unlock@CSoundManager3D@@QAEXH@Z PROC			; CSoundManager3D::Unlock, COMDAT
; _this$ = ecx

; 198  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 183  : 	if (iIndex >= 0 && iIndex < INSTANCE_MAX_COUNT)

  00003	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  00006	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00009	77 05		 ja	 SHORT $LN1@Unlock

; 199  : 	if (!IsValidInstanceIndex(iIndex))
; 200  : 		return;
; 201  : 
; 202  : 	m_bLockingFlag[iIndex] = false;

  0000b	c6 44 08 04 00	 mov	 BYTE PTR [eax+ecx+4], 0
$LN1@Unlock:

; 203  : }

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
?Unlock@CSoundManager3D@@QAEXH@Z ENDP			; CSoundManager3D::Unlock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager3D.cpp
;	COMDAT ?Lock@CSoundManager3D@@QAEXH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?Lock@CSoundManager3D@@QAEXH@Z PROC			; CSoundManager3D::Lock, COMDAT
; _this$ = ecx

; 190  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 183  : 	if (iIndex >= 0 && iIndex < INSTANCE_MAX_COUNT)

  00003	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  00006	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00009	77 05		 ja	 SHORT $LN1@Lock

; 191  : 	if (!IsValidInstanceIndex(iIndex))
; 192  : 		return;
; 193  : 
; 194  : 	m_bLockingFlag[iIndex] = true;

  0000b	c6 44 08 04 01	 mov	 BYTE PTR [eax+ecx+4], 1
$LN1@Lock:

; 195  : }

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
?Lock@CSoundManager3D@@QAEXH@Z ENDP			; CSoundManager3D::Lock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager3D.cpp
;	COMDAT ?SetListenerVelocity@CSoundManager3D@@QAEXMMMM@Z
_TEXT	SEGMENT
_fDistanceX$ = 8					; size = 4
_fDistanceY$ = 12					; size = 4
_fDistanceZ$ = 16					; size = 4
_fNagnitude$ = 20					; size = 4
?SetListenerVelocity@CSoundManager3D@@QAEXMMMM@Z PROC	; CSoundManager3D::SetListenerVelocity, COMDAT
; _this$ = ecx

; 118  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 119  : // 	assert(m_pListener != NULL);
; 120  : 	if (NULL == m_pListener)

  00003	8b 81 a4 01 00
	00		 mov	 eax, DWORD PTR [ecx+420]
  00009	85 c0		 test	 eax, eax
  0000b	74 3c		 je	 SHORT $LN1@SetListene

; 121  : 		return;
; 122  : 	AIL_set_3D_velocity(m_pListener, fDistanceX, fDistanceY, -fDistanceZ, fNagnitude);

  0000d	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _fNagnitude$[ebp]
  00012	83 ec 10	 sub	 esp, 16			; 00000010H
  00015	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  0001b	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fDistanceZ$[ebp]
  00020	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00027	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0002d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fDistanceY$[ebp]
  00032	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00038	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fDistanceX$[ebp]
  0003d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00042	50		 push	 eax
  00043	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AIL_set_3D_velocity@20
$LN1@SetListene:

; 123  : }

  00049	5d		 pop	 ebp
  0004a	c2 10 00	 ret	 16			; 00000010H
?SetListenerVelocity@CSoundManager3D@@QAEXMMMM@Z ENDP	; CSoundManager3D::SetListenerVelocity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager3D.cpp
;	COMDAT ?SetListenerPosition@CSoundManager3D@@QAEXMMM@Z
_TEXT	SEGMENT
_fX$ = 8						; size = 4
_fY$ = 12						; size = 4
_fZ$ = 16						; size = 4
?SetListenerPosition@CSoundManager3D@@QAEXMMM@Z PROC	; CSoundManager3D::SetListenerPosition, COMDAT
; _this$ = ecx

; 110  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : // 	assert(m_pListener != NULL);
; 112  : 	if (NULL == m_pListener)

  00003	8b 81 a4 01 00
	00		 mov	 eax, DWORD PTR [ecx+420]
  00009	85 c0		 test	 eax, eax
  0000b	74 31		 je	 SHORT $LN1@SetListene

; 113  : 		return;
; 114  : 	AIL_set_3D_position(m_pListener, fX, fY, -fZ);

  0000d	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fZ$[ebp]
  00012	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00015	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0001c	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00022	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fY$[ebp]
  00027	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0002d	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fX$[ebp]
  00032	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00037	50		 push	 eax
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AIL_set_3D_position@16
$LN1@SetListene:

; 115  : }

  0003e	5d		 pop	 ebp
  0003f	c2 0c 00	 ret	 12			; 0000000cH
?SetListenerPosition@CSoundManager3D@@QAEXMMM@Z ENDP	; CSoundManager3D::SetListenerPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager3D.cpp
;	COMDAT ?SetListenerDirection@CSoundManager3D@@QAEXMMMMMM@Z
_TEXT	SEGMENT
_fxDir$ = 8						; size = 4
_fyDir$ = 12						; size = 4
_fzDir$ = 16						; size = 4
_fxUp$ = 20						; size = 4
_fyUp$ = 24						; size = 4
_fzUp$ = 28						; size = 4
?SetListenerDirection@CSoundManager3D@@QAEXMMMMMM@Z PROC ; CSoundManager3D::SetListenerDirection, COMDAT
; _this$ = ecx

; 103  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 104  : 	if (NULL == m_pListener)

  00003	8b 81 a4 01 00
	00		 mov	 eax, DWORD PTR [ecx+420]
  00009	85 c0		 test	 eax, eax
  0000b	74 59		 je	 SHORT $LN1@SetListene

; 105  : 		return;
; 106  : 	AIL_set_3D_orientation(m_pListener, fxDir, fyDir, -fzDir, fxUp, fyUp, -fzUp);

  0000d	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _fzUp$[ebp]
  00012	83 ec 18	 sub	 esp, 24			; 00000018H
  00015	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0001c	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  00022	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _fyUp$[ebp]
  00027	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  0002d	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _fxUp$[ebp]
  00032	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00038	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fzDir$[ebp]
  0003d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00044	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0004a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fyDir$[ebp]
  0004f	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00055	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fxDir$[ebp]
  0005a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005f	50		 push	 eax
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AIL_set_3D_orientation@28
$LN1@SetListene:

; 107  : }

  00066	5d		 pop	 ebp
  00067	c2 18 00	 ret	 24			; 00000018H
?SetListenerDirection@CSoundManager3D@@QAEXMMMMMM@Z ENDP ; CSoundManager3D::SetListenerDirection
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager3D.cpp
;	COMDAT ?GetInstance@CSoundManager3D@@QAEPAVISoundInstance@@K@Z
_TEXT	SEGMENT
_dwIndex$ = 8						; size = 4
?GetInstance@CSoundManager3D@@QAEPAVISoundInstance@@K@Z PROC ; CSoundManager3D::GetInstance, COMDAT
; _this$ = ecx

; 172  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _dwIndex$[ebp]

; 173  : 	if (dwIndex >= INSTANCE_MAX_COUNT)

  00006	83 f8 20	 cmp	 eax, 32			; 00000020H
  00009	72 06		 jb	 SHORT $LN2@GetInstanc

; 174  : 	{
; 175  : 		assert(dwIndex < INSTANCE_MAX_COUNT);
; 176  : 		return NULL;

  0000b	33 c0		 xor	 eax, eax

; 179  : }

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
$LN2@GetInstanc:

; 177  : 	}
; 178  : 	return &m_Instances[dwIndex];

  00011	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00014	8d 40 09	 lea	 eax, DWORD PTR [eax+9]
  00017	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]

; 179  : }

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?GetInstance@CSoundManager3D@@QAEPAVISoundInstance@@K@Z ENDP ; CSoundManager3D::GetInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager3D.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager3D.cpp
;	COMDAT ?SetInstance@CSoundManager3D@@QAEHPBD@Z
_TEXT	SEGMENT
_this$1$ = -12						; size = 4
_end$1$ = -8						; size = 4
_pkSoundData$1$ = -4					; size = 4
_c_pszFileName$ = 8					; size = 4
?SetInstance@CSoundManager3D@@QAEHPBD@Z PROC		; CSoundManager3D::SetInstance, COMDAT
; _this$ = ecx

; 126  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 127  : 	DWORD dwFileCRC = GetFileCRC(c_pszFileName);

  00009	8b 7d 08	 mov	 edi, DWORD PTR _c_pszFileName$[ebp]
  0000c	8b d9		 mov	 ebx, ecx
  0000e	57		 push	 edi
  0000f	89 5d f4	 mov	 DWORD PTR _this$1$[ebp], ebx
  00012	e8 00 00 00 00	 call	 ?GetFileCRC@CSoundBase@@QAEKPBD@Z ; CSoundBase::GetFileCRC
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1620 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00017	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_dataMap@CSoundBase@@1V?$map@KPAVCSoundData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCSoundData@@@std@@@3@@std@@A
  0001d	8b ce		 mov	 ecx, esi
  0001f	8b 56 04	 mov	 edx, DWORD PTR [esi+4]

; 1621 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1622 :         while (!_Trynode->_Isnil) {

  00022	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00026	75 14		 jne	 SHORT $LN17@SetInstanc
$LL16@SetInstanc:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00028	39 42 10	 cmp	 DWORD PTR [edx+16], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1624 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  0002b	73 05		 jae	 SHORT $LN18@SetInstanc

; 1625 :                 _Result._Location._Child = _Tree_child::_Right;
; 1626 :                 _Trynode                 = _Trynode->_Right;

  0002d	8b 52 08	 mov	 edx, DWORD PTR [edx+8]

; 1627 :             } else {

  00030	eb 04		 jmp	 SHORT $LN19@SetInstanc
$LN18@SetInstanc:

; 1628 :                 _Result._Location._Child = _Tree_child::_Left;
; 1629 :                 _Result._Bound           = _Trynode;

  00032	8b ca		 mov	 ecx, edx

; 1630 :                 _Trynode                 = _Trynode->_Left;

  00034	8b 12		 mov	 edx, DWORD PTR [edx]
$LN19@SetInstanc:

; 1621 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1622 :         while (!_Trynode->_Isnil) {

  00036	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  0003a	74 ec		 je	 SHORT $LL16@SetInstanc
$LN17@SetInstanc:

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0003c	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00040	75 05		 jne	 SHORT $LN13@SetInstanc
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00042	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00045	73 02		 jae	 SHORT $LN12@SetInstanc
$LN13@SetInstanc:

; 1379 :         return _Get_scary()->_Myhead;

  00047	8b ce		 mov	 ecx, esi
$LN12@SetInstanc:

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00049	3b ce		 cmp	 ecx, esi
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager3D.cpp

; 132  : 	if (itor == ms_dataMap.end())

  0004b	75 0b		 jne	 SHORT $LN4@SetInstanc

; 133  : 		pkSoundData = AddFile(dwFileCRC, c_pszFileName); // CSoundBase::AddFile

  0004d	57		 push	 edi
  0004e	50		 push	 eax
  0004f	8b cb		 mov	 ecx, ebx
  00051	e8 00 00 00 00	 call	 ?AddFile@CSoundBase@@QAEPAVCSoundData@@KPBD@Z ; CSoundBase::AddFile
  00056	eb 03		 jmp	 SHORT $LN81@SetInstanc
$LN4@SetInstanc:

; 134  : 	else
; 135  : 		pkSoundData = itor->second;

  00058	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
$LN81@SetInstanc:

; 136  : 
; 137  : 	assert(pkSoundData != NULL);
; 138  : 
; 139  : 	static DWORD k = 0;
; 140  : 
; 141  : 	DWORD start = k++;

  0005b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?k@?1??SetInstance@CSoundManager3D@@QAEHPBD@Z@4KA
  00061	89 45 fc	 mov	 DWORD PTR _pkSoundData$1$[ebp], eax
  00064	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00067	a3 00 00 00 00	 mov	 DWORD PTR ?k@?1??SetInstance@CSoundManager3D@@QAEHPBD@Z@4KA, eax

; 142  : 	DWORD end = start + INSTANCE_MAX_COUNT;

  0006c	8d 46 20	 lea	 eax, DWORD PTR [esi+32]
  0006f	89 45 f8	 mov	 DWORD PTR _end$1$[ebp], eax

; 143  : 
; 144  : 	while (start < end)

  00072	3b f0		 cmp	 esi, eax
  00074	73 2c		 jae	 SHORT $LN3@SetInstanc
$LL2@SetInstanc:

; 145  : 	{
; 146  : 		CSoundInstance3D * pkInst = &m_Instances[start % INSTANCE_MAX_COUNT];

  00076	8b fe		 mov	 edi, esi
  00078	83 e7 1f	 and	 edi, 31			; 0000001fH
  0007b	8d 47 03	 lea	 eax, DWORD PTR [edi+3]
  0007e	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00081	8d 1c 83	 lea	 ebx, DWORD PTR [ebx+eax*4]

; 147  : 
; 148  : 		if (pkInst->IsDone())

  00084	8b 03		 mov	 eax, DWORD PTR [ebx]
  00086	8b cb		 mov	 ecx, ebx
  00088	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  0008b	ff d0		 call	 eax
  0008d	84 c0		 test	 al, al
  0008f	75 1d		 jne	 SHORT $LN66@SetInstanc

; 157  : 		}
; 158  : 
; 159  : 		++start;

  00091	46		 inc	 esi

; 160  : 
; 161  : 		if (start > 50000)

  00092	81 fe 50 c3 00
	00		 cmp	 esi, 50000		; 0000c350H
  00098	77 08		 ja	 SHORT $LN3@SetInstanc

; 143  : 
; 144  : 	while (start < end)

  0009a	8b 5d f4	 mov	 ebx, DWORD PTR _this$1$[ebp]
  0009d	3b 75 f8	 cmp	 esi, DWORD PTR _end$1$[ebp]
  000a0	72 d4		 jb	 SHORT $LL2@SetInstanc
$LN3@SetInstanc:
  000a2	5f		 pop	 edi

; 162  : 		{
; 163  : 			start = 0;
; 164  : 			return -1;
; 165  : 		}
; 166  : 	}
; 167  : 
; 168  : 	return -1;
; 169  : }

  000a3	5e		 pop	 esi
  000a4	83 c8 ff	 or	 eax, -1
  000a7	5b		 pop	 ebx
  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c2 04 00	 ret	 4
$LN66@SetInstanc:

; 149  : 		{
; 150  : 			if (!pkInst->SetSound(pkSoundData))

  000ae	8b 03		 mov	 eax, DWORD PTR [ebx]
  000b0	8b cb		 mov	 ecx, ebx
  000b2	ff 75 fc	 push	 DWORD PTR _pkSoundData$1$[ebp]
  000b5	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  000b8	ff d0		 call	 eax
  000ba	84 c0		 test	 al, al
  000bc	75 1c		 jne	 SHORT $LN7@SetInstanc

; 151  : 			{
; 152  : 				TraceError("CSoundManager3D::GetInstance (filename: %s)", c_pszFileName);

  000be	ff 75 08	 push	 DWORD PTR _c_pszFileName$[ebp]
  000c1	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@LDIAPBKD@CSoundManager3D?3?3GetInstance?5?$CIf@
  000c6	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  000cb	83 c4 08	 add	 esp, 8

; 162  : 		{
; 163  : 			start = 0;
; 164  : 			return -1;
; 165  : 		}
; 166  : 	}
; 167  : 
; 168  : 	return -1;
; 169  : }

  000ce	83 c8 ff	 or	 eax, -1
  000d1	5f		 pop	 edi
  000d2	5e		 pop	 esi
  000d3	5b		 pop	 ebx
  000d4	8b e5		 mov	 esp, ebp
  000d6	5d		 pop	 ebp
  000d7	c2 04 00	 ret	 4
$LN7@SetInstanc:

; 153  : 				return -1;
; 154  : 			}
; 155  : 
; 156  : 			return (start % INSTANCE_MAX_COUNT);

  000da	8b c7		 mov	 eax, edi
  000dc	5f		 pop	 edi

; 162  : 		{
; 163  : 			start = 0;
; 164  : 			return -1;
; 165  : 		}
; 166  : 	}
; 167  : 
; 168  : 	return -1;
; 169  : }

  000dd	5e		 pop	 esi
  000de	5b		 pop	 ebx
  000df	8b e5		 mov	 esp, ebp
  000e1	5d		 pop	 ebp
  000e2	c2 04 00	 ret	 4
?SetInstance@CSoundManager3D@@QAEHPBD@Z ENDP		; CSoundManager3D::SetInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager3D.cpp
;	COMDAT ?Destroy@CSoundManager3D@@QAEXXZ
_TEXT	SEGMENT
?Destroy@CSoundManager3D@@QAEXXZ PROC			; CSoundManager3D::Destroy, COMDAT
; _this$ = ecx

; 79   : {

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 80   : 	if (!m_bInit)

  00003	80 bf a8 01 00
	00 00		 cmp	 BYTE PTR [edi+424], 0
  0000a	74 60		 je	 SHORT $LN1@Destroy

; 81   : 		return;
; 82   : 
; 83   : 	for (int i = 0; i < INSTANCE_MAX_COUNT; ++i)

  0000c	53		 push	 ebx
  0000d	56		 push	 esi
  0000e	8d 77 24	 lea	 esi, DWORD PTR [edi+36]
  00011	bb 20 00 00 00	 mov	 ebx, 32			; 00000020H
$LL4@Destroy:

; 84   : 		m_Instances[i].Destroy();

  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	8b ce		 mov	 ecx, esi
  0001a	ff 50 08	 call	 DWORD PTR [eax+8]
  0001d	83 c6 0c	 add	 esi, 12			; 0000000cH
  00020	83 eb 01	 sub	 ebx, 1
  00023	75 f1		 jne	 SHORT $LL4@Destroy

; 85   : 
; 86   : 	if (m_pListener)

  00025	8b 87 a4 01 00
	00		 mov	 eax, DWORD PTR [edi+420]
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	85 c0		 test	 eax, eax
  0002f	74 11		 je	 SHORT $LN6@Destroy

; 87   : 	{
; 88   : 		AIL_close_3D_listener(m_pListener);

  00031	50		 push	 eax
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AIL_close_3D_listener@4

; 89   : 		m_pListener = NULL;

  00038	c7 87 a4 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+420], 0
$LN6@Destroy:

; 90   : 	}
; 91   : 
; 92   : 	if (ms_pProviderDefault)

  00042	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_pProviderDefault@CSoundBase@@1PAUSProvider@@A ; CSoundBase::ms_pProviderDefault
  00047	85 c0		 test	 eax, eax
  00049	74 13		 je	 SHORT $LN7@Destroy

; 93   : 	{
; 94   : 		AIL_close_3D_provider(ms_pProviderDefault->hProvider);

  0004b	ff 70 04	 push	 DWORD PTR [eax+4]
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AIL_close_3D_provider@4

; 95   : 		ms_pProviderDefault = NULL;

  00054	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_pProviderDefault@CSoundBase@@1PAUSProvider@@A, 0 ; CSoundBase::ms_pProviderDefault
$LN7@Destroy:

; 96   : 	}
; 97   : 
; 98   : 	CSoundBase::Destroy();

  0005e	8b cf		 mov	 ecx, edi
  00060	e8 00 00 00 00	 call	 ?Destroy@CSoundBase@@QAEXXZ ; CSoundBase::Destroy

; 99   : 	m_bInit = false;

  00065	c6 87 a8 01 00
	00 00		 mov	 BYTE PTR [edi+424], 0
$LN1@Destroy:

; 100  : }

  0006c	5f		 pop	 edi
  0006d	c3		 ret	 0
?Destroy@CSoundManager3D@@QAEXXZ ENDP			; CSoundManager3D::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager3D.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager3D.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager3D.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager3D.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager3D.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager3D.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager3D.cpp
;	COMDAT ?Initialize@CSoundManager3D@@QAE_NXZ
_TEXT	SEGMENT
_enum3D$ = -8						; size = 4
$T1 = -1						; size = 1
?Initialize@CSoundManager3D@@QAE_NXZ PROC		; CSoundManager3D::Initialize, COMDAT
; _this$ = ecx

; 14   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx

; 15   : 	CSoundBase::Initialize();

  00009	e8 00 00 00 00	 call	 ?Initialize@CSoundBase@@QAEXXZ ; CSoundBase::Initialize

; 16   : 
; 17   : 	if (ms_pProviderDefault)

  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ms_pProviderDefault@CSoundBase@@1PAUSProvider@@A, 0 ; CSoundBase::ms_pProviderDefault
  00015	74 07		 je	 SHORT $LN7@Initialize

; 18   : 		return true;

  00017	b0 01		 mov	 al, 1
  00019	5b		 pop	 ebx

; 75   : }

  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
$LN7@Initialize:
  0001e	56		 push	 esi
  0001f	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1615 :         _Resize(_Newsize, _Value_init_tag{});

  00020	8d 45 ff	 lea	 eax, DWORD PTR $T1[ebp]
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_ProviderVector@CSoundBase@@1V?$vector@USProvider@@V?$allocator@USProvider@@@std@@@std@@A ; CSoundBase::ms_ProviderVector
  00028	50		 push	 eax
  00029	6a 20		 push	 32			; 00000020H
  0002b	e8 00 00 00 00	 call	 ??$_Resize@U_Value_init_tag@std@@@?$vector@USProvider@@V?$allocator@USProvider@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<SProvider,std::allocator<SProvider> >::_Resize<std::_Value_init_tag>

; 1919 :         return _My_data._Myfirst[_Pos];

  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_ProviderVector@CSoundBase@@1V?$vector@USProvider@@V?$allocator@USProvider@@@std@@@std@@A
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager3D.cpp

; 27   : 									  &ms_ProviderVector[i].name) && (i < MAX_PROVIDERS))

  00035	50		 push	 eax
  00036	83 c0 04	 add	 eax, 4
  00039	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _enum3D$[ebp], 0
  00040	50		 push	 eax
  00041	8d 45 f8	 lea	 eax, DWORD PTR _enum3D$[ebp]
  00044	50		 push	 eax
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AIL_enumerate_3D_providers@12
  0004b	85 c0		 test	 eax, eax
  0004d	74 65		 je	 SHORT $LN37@Initialize
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1615 :         _Resize(_Newsize, _Value_init_tag{});

  0004f	33 f6		 xor	 esi, esi
$LL2@Initialize:
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager3D.cpp

; 27   : 									  &ms_ProviderVector[i].name) && (i < MAX_PROVIDERS))

  00051	81 fe 00 01 00
	00		 cmp	 esi, 256		; 00000100H
  00057	7d 5b		 jge	 SHORT $LN37@Initialize
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1919 :         return _My_data._Myfirst[_Pos];

  00059	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?ms_ProviderVector@CSoundBase@@1V?$vector@USProvider@@V?$allocator@USProvider@@@std@@@std@@A
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager3D.cpp

; 38   : 		if (strcmp(provider->name, "Miles Fast 2D Positional Audio") == 0)

  0005f	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BP@KDDGJLNF@Miles?5Fast?52D?5Positional?5Audio@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1919 :         return _My_data._Myfirst[_Pos];

  00064	03 fe		 add	 edi, esi
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager3D.cpp

; 38   : 		if (strcmp(provider->name, "Miles Fast 2D Positional Audio") == 0)

  00066	8b 07		 mov	 eax, DWORD PTR [edi]
$LL33@Initialize:
  00068	8a 10		 mov	 dl, BYTE PTR [eax]
  0006a	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0006c	75 1a		 jne	 SHORT $LN34@Initialize
  0006e	84 d2		 test	 dl, dl
  00070	74 12		 je	 SHORT $LN35@Initialize
  00072	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00075	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00078	75 0e		 jne	 SHORT $LN34@Initialize
  0007a	83 c0 02	 add	 eax, 2
  0007d	83 c1 02	 add	 ecx, 2
  00080	84 d2		 test	 dl, dl
  00082	75 e4		 jne	 SHORT $LL33@Initialize
$LN35@Initialize:
  00084	33 c0		 xor	 eax, eax
  00086	eb 05		 jmp	 SHORT $LN36@Initialize
$LN34@Initialize:
  00088	1b c0		 sbb	 eax, eax
  0008a	83 c8 01	 or	 eax, 1
$LN36@Initialize:
  0008d	85 c0		 test	 eax, eax
  0008f	75 06		 jne	 SHORT $LN8@Initialize

; 39   : 			ms_pProviderDefault = provider;

  00091	89 3d 00 00 00
	00		 mov	 DWORD PTR ?ms_pProviderDefault@CSoundBase@@1PAUSProvider@@A, edi ; CSoundBase::ms_pProviderDefault
$LN8@Initialize:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1919 :         return _My_data._Myfirst[_Pos];

  00097	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_ProviderVector@CSoundBase@@1V?$vector@USProvider@@V?$allocator@USProvider@@@std@@@std@@A
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager3D.cpp

; 41   : 		++i;

  0009c	83 c6 08	 add	 esi, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1919 :         return _My_data._Myfirst[_Pos];

  0009f	03 c6		 add	 eax, esi
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager3D.cpp

; 27   : 									  &ms_ProviderVector[i].name) && (i < MAX_PROVIDERS))

  000a1	50		 push	 eax
  000a2	83 c0 04	 add	 eax, 4
  000a5	50		 push	 eax
  000a6	8d 45 f8	 lea	 eax, DWORD PTR _enum3D$[ebp]
  000a9	50		 push	 eax
  000aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AIL_enumerate_3D_providers@12
  000b0	85 c0		 test	 eax, eax
  000b2	75 9d		 jne	 SHORT $LL2@Initialize
$LN37@Initialize:

; 42   : 	}
; 43   : 
; 44   : 	if (!ms_pProviderDefault)

  000b4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_pProviderDefault@CSoundBase@@1PAUSProvider@@A ; CSoundBase::ms_pProviderDefault
  000b9	85 c0		 test	 eax, eax
  000bb	74 6c		 je	 SHORT $LN31@Initialize

; 45   : 	{
; 46   : 		CSoundBase::Destroy();
; 47   : 		return false;
; 48   : 	}
; 49   : 
; 50   : 	assert(ms_pProviderDefault != NULL);
; 51   : 
; 52   : 	if (M3D_NOERR != AIL_open_3D_provider(ms_pProviderDefault->hProvider))

  000bd	ff 70 04	 push	 DWORD PTR [eax+4]
  000c0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AIL_open_3D_provider@4
  000c6	85 c0		 test	 eax, eax
  000c8	75 5f		 jne	 SHORT $LN31@Initialize

; 61   : 	}
; 62   : 
; 63   : 	m_pListener = AIL_open_3D_listener(ms_pProviderDefault->hProvider);

  000ca	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_pProviderDefault@CSoundBase@@1PAUSProvider@@A ; CSoundBase::ms_pProviderDefault
  000cf	ff 70 04	 push	 DWORD PTR [eax+4]
  000d2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AIL_open_3D_listener@4

; 64   : 
; 65   : 	SetListenerPosition(0.0f, 0.0f, 0.0f);

  000d8	83 ec 0c	 sub	 esp, 12			; 0000000cH
  000db	89 83 a4 01 00
	00		 mov	 DWORD PTR [ebx+420], eax
  000e1	8b cb		 mov	 ecx, ebx
  000e3	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR [esp+8], 0
  000eb	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR [esp+4], 0
  000f3	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  000fa	e8 00 00 00 00	 call	 ?SetListenerPosition@CSoundManager3D@@QAEXMMM@Z ; CSoundManager3D::SetListenerPosition
  000ff	33 f6		 xor	 esi, esi
  00101	8d 7b 24	 lea	 edi, DWORD PTR [ebx+36]
$LL6@Initialize:

; 66   : 
; 67   : 	for (i = 0; i < INSTANCE_MAX_COUNT; ++i)
; 68   : 	{
; 69   : 		m_Instances[i].Initialize();

  00104	8b 07		 mov	 eax, DWORD PTR [edi]
  00106	8b cf		 mov	 ecx, edi
  00108	ff 50 04	 call	 DWORD PTR [eax+4]

; 70   : 		m_bLockingFlag[i] = false;

  0010b	c6 44 33 04 00	 mov	 BYTE PTR [ebx+esi+4], 0
  00110	83 c7 0c	 add	 edi, 12			; 0000000cH
  00113	46		 inc	 esi
  00114	83 fe 20	 cmp	 esi, 32			; 00000020H
  00117	7c eb		 jl	 SHORT $LL6@Initialize

; 71   : 	}
; 72   : 
; 73   : 	m_bInit = true;

  00119	5f		 pop	 edi
  0011a	5e		 pop	 esi
  0011b	c6 83 a8 01 00
	00 01		 mov	 BYTE PTR [ebx+424], 1

; 74   : 	return true;

  00122	b0 01		 mov	 al, 1
  00124	5b		 pop	 ebx

; 75   : }

  00125	8b e5		 mov	 esp, ebp
  00127	5d		 pop	 ebp
  00128	c3		 ret	 0
$LN31@Initialize:

; 53   : 	{
; 54   : //		assert(!"AIL_open_3D_provider error");
; 55   : //		char buf[64];
; 56   : //		sprintf(buf, "Error AIL_open_3D_provider: %s\n", AIL_last_error());
; 57   : //		OutputDebugString(buf);
; 58   : 
; 59   : 		CSoundBase::Destroy();

  00129	8b cb		 mov	 ecx, ebx
  0012b	e8 00 00 00 00	 call	 ?Destroy@CSoundBase@@QAEXXZ ; CSoundBase::Destroy
  00130	5f		 pop	 edi
  00131	5e		 pop	 esi

; 60   : 		return false;

  00132	32 c0		 xor	 al, al
  00134	5b		 pop	 ebx

; 75   : }

  00135	8b e5		 mov	 esp, ebp
  00137	5d		 pop	 ebp
  00138	c3		 ret	 0
?Initialize@CSoundManager3D@@QAE_NXZ ENDP		; CSoundManager3D::Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager3D.cpp
;	COMDAT ??1CSoundManager3D@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CSoundManager3D@@UAE@XZ PROC				; CSoundManager3D::~CSoundManager3D, COMDAT
; _this$ = ecx

; 10   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CSoundManager3D@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 11   : }

  00025	68 00 00 00 00	 push	 OFFSET ??1CSoundInstance3D@@UAE@XZ ; CSoundInstance3D::~CSoundInstance3D
  0002a	6a 20		 push	 32			; 00000020H
  0002c	6a 0c		 push	 12			; 0000000cH
  0002e	8d 46 24	 lea	 eax, DWORD PTR [esi+36]
  00031	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CSoundManager3D@@6B@
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  0003d	8b ce		 mov	 ecx, esi
  0003f	e8 00 00 00 00	 call	 ??1CSoundBase@@UAE@XZ	; CSoundBase::~CSoundBase
  00044	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00047	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004e	59		 pop	 ecx
  0004f	5e		 pop	 esi
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
  00054	cc		 int	 3
  00055	cc		 int	 3
  00056	cc		 int	 3
  00057	cc		 int	 3
  00058	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CSoundManager3D@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CSoundManager3D@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CSoundManager3D@@UAE@XZ ENDP				; CSoundManager3D::~CSoundManager3D
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\MilesLib\SoundManager3D.cpp
;	COMDAT ??0CSoundManager3D@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CSoundManager3D@@QAE@XZ PROC				; CSoundManager3D::CSoundManager3D, COMDAT
; _this$ = ecx

; 5    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CSoundManager3D@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	e8 00 00 00 00	 call	 ??0CSoundBase@@QAE@XZ	; CSoundBase::CSoundBase
  0002e	68 00 00 00 00	 push	 OFFSET ??1CSoundInstance3D@@UAE@XZ ; CSoundInstance3D::~CSoundInstance3D
  00033	68 00 00 00 00	 push	 OFFSET ??0CSoundInstance3D@@QAE@XZ ; CSoundInstance3D::CSoundInstance3D
  00038	6a 20		 push	 32			; 00000020H
  0003a	6a 0c		 push	 12			; 0000000cH
  0003c	8d 46 24	 lea	 eax, DWORD PTR [esi+36]
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00046	50		 push	 eax
  00047	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CSoundManager3D@@6B@
  0004d	e8 00 00 00 00	 call	 ??_L@YGXPAXIIP6EX0@Z1@Z

; 6    : 	m_bInit = false;

  00052	c6 86 a8 01 00
	00 00		 mov	 BYTE PTR [esi+424], 0

; 7    : }

  00059	8b c6		 mov	 eax, esi
  0005b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00065	59		 pop	 ecx
  00066	5e		 pop	 esi
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CSoundManager3D@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CSoundBase@@UAE@XZ	; CSoundBase::~CSoundBase
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0CSoundManager3D@@QAE@XZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CSoundManager3D@@QAE@XZ
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CSoundManager3D@@QAE@XZ ENDP				; CSoundManager3D::CSoundManager3D
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 182  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 183  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 184  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 185  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 136  :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 186  :         _Throw_bad_array_new_length(); // add overflow
; 187  :     }
; 188  : 
; 189  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 136  :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 191  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 192  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 193  : 
; 194  : #ifdef _DEBUG
; 195  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 196  : #endif // defined(_DEBUG)
; 197  :     return _Ptr;
; 198  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 107  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 108  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN18@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN18@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 144  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 145  :     }

  00003	8b c1		 mov	 eax, ecx

; 66   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 67   :     {
; 68   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 144  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 145  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN13@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN8@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 96   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 97   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 92   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 73   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 75   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
