; Listing generated by Microsoft (R) Optimizing Compiler Version 19.37.32822.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\eterGrnLib\Distribute\LODController.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?ms_isMinLODModeEnable@@3_NA			; ms_isMinLODModeEnable
_BSS	SEGMENT
?ms_isMinLODModeEnable@@3_NA DB 01H DUP (?)		; ms_isMinLODModeEnable
_BSS	ENDS
CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?SetMinLODMode@CGrannyLODController@@SAX_N@Z	; CGrannyLODController::SetMinLODMode
PUBLIC	??0CGrannyLODController@@QAE@XZ			; CGrannyLODController::CGrannyLODController
PUBLIC	??1CGrannyLODController@@UAE@XZ			; CGrannyLODController::~CGrannyLODController
PUBLIC	?Clear@CGrannyLODController@@QAEXXZ		; CGrannyLODController::Clear
PUBLIC	?CreateDeviceObjects@CGrannyLODController@@QAEXXZ ; CGrannyLODController::CreateDeviceObjects
PUBLIC	?DestroyDeviceObjects@CGrannyLODController@@QAEXXZ ; CGrannyLODController::DestroyDeviceObjects
PUBLIC	?AddModel@CGrannyLODController@@QAEXPAVCGraphicThing@@HPAV1@@Z ; CGrannyLODController::AddModel
PUBLIC	?AttachModelInstance@CGrannyLODController@@QAEXPAV1@PBD@Z ; CGrannyLODController::AttachModelInstance
PUBLIC	?DetachModelInstance@CGrannyLODController@@QAEXPAV1@@Z ; CGrannyLODController::DetachModelInstance
PUBLIC	?SetLODLimits@CGrannyLODController@@QAEXMM@Z	; CGrannyLODController::SetLODLimits
PUBLIC	?SetLODLevel@CGrannyLODController@@QAEXE@Z	; CGrannyLODController::SetLODLevel
PUBLIC	?SetMaterialImagePointer@CGrannyLODController@@QAEXPBDPAVCGraphicImage@@@Z ; CGrannyLODController::SetMaterialImagePointer
PUBLIC	?SetMaterialData@CGrannyLODController@@QAEXPBDABUSMaterialData@@@Z ; CGrannyLODController::SetMaterialData
PUBLIC	?SetSpecularInfo@CGrannyLODController@@QAEXPBDHM@Z ; CGrannyLODController::SetSpecularInfo
PUBLIC	?RenderWithOneTexture@CGrannyLODController@@QAEXXZ ; CGrannyLODController::RenderWithOneTexture
PUBLIC	?RenderWithTwoTexture@CGrannyLODController@@QAEXXZ ; CGrannyLODController::RenderWithTwoTexture
PUBLIC	?BlendRenderWithOneTexture@CGrannyLODController@@QAEXXZ ; CGrannyLODController::BlendRenderWithOneTexture
PUBLIC	?BlendRenderWithTwoTexture@CGrannyLODController@@QAEXXZ ; CGrannyLODController::BlendRenderWithTwoTexture
PUBLIC	?Update@CGrannyLODController@@QAEXMMM@Z		; CGrannyLODController::Update
PUBLIC	?UpdateLODLevel@CGrannyLODController@@QAEXMM@Z	; CGrannyLODController::UpdateLODLevel
PUBLIC	?UpdateTime@CGrannyLODController@@QAEXM@Z	; CGrannyLODController::UpdateTime
PUBLIC	?UpdateSkeleton@CGrannyLODController@@QAEXPBUD3DXMATRIX@@M@Z ; CGrannyLODController::UpdateSkeleton
PUBLIC	?Deform@CGrannyLODController@@QAEXPBUD3DXMATRIX@@@Z ; CGrannyLODController::Deform
PUBLIC	?DeformNoSkin@CGrannyLODController@@QAEXPBUD3DXMATRIX@@@Z ; CGrannyLODController::DeformNoSkin
PUBLIC	?DeformAll@CGrannyLODController@@QAEXPBUD3DXMATRIX@@@Z ; CGrannyLODController::DeformAll
PUBLIC	?RenderToShadowMap@CGrannyLODController@@QAEXXZ	; CGrannyLODController::RenderToShadowMap
PUBLIC	?RenderShadow@CGrannyLODController@@QAEXXZ	; CGrannyLODController::RenderShadow
PUBLIC	?ReloadTexture@CGrannyLODController@@QAEXXZ	; CGrannyLODController::ReloadTexture
PUBLIC	?GetBoundBox@CGrannyLODController@@QAEXPAUD3DXVECTOR3@@0@Z ; CGrannyLODController::GetBoundBox
PUBLIC	?Intersect@CGrannyLODController@@QAE_NPBUD3DXMATRIX@@PAM11@Z ; CGrannyLODController::Intersect
PUBLIC	?SetLocalTime@CGrannyLODController@@QAEXM@Z	; CGrannyLODController::SetLocalTime
PUBLIC	?ResetLocalTime@CGrannyLODController@@QAEXXZ	; CGrannyLODController::ResetLocalTime
PUBLIC	?SetMotionPointer@CGrannyLODController@@QAEXPBVCGrannyMotion@@MHM@Z ; CGrannyLODController::SetMotionPointer
PUBLIC	?ChangeMotionPointer@CGrannyLODController@@QAEXPBVCGrannyMotion@@HM@Z ; CGrannyLODController::ChangeMotionPointer
PUBLIC	?SetMotionAtEnd@CGrannyLODController@@QAEXXZ	; CGrannyLODController::SetMotionAtEnd
PUBLIC	?isModelInstance@CGrannyLODController@@QAEHXZ	; CGrannyLODController::isModelInstance
PUBLIC	?GetModelInstance@CGrannyLODController@@QAEPAVCGrannyModelInstance@@XZ ; CGrannyLODController::GetModelInstance
PUBLIC	?SetCurrentModelInstance@CGrannyLODController@@IAEXPAVCGrannyModelInstance@@@Z ; CGrannyLODController::SetCurrentModelInstance
PUBLIC	?RefreshAttachedModelInstance@CGrannyLODController@@IAEXXZ ; CGrannyLODController::RefreshAttachedModelInstance
PUBLIC	?__ReserveSharedDeformableVertexBuffer@CGrannyLODController@@IAEXK@Z ; CGrannyLODController::__ReserveSharedDeformableVertexBuffer
PUBLIC	??1SAttachingModelData@CGrannyLODController@@QAE@XZ ; CGrannyLODController::SAttachingModelData::~SAttachingModelData
PUBLIC	?deallocate@?$allocator@USAttachingModelData@CGrannyLODController@@@std@@QAEXQAUSAttachingModelData@CGrannyLODController@@I@Z ; std::allocator<CGrannyLODController::SAttachingModelData>::deallocate
PUBLIC	??1?$vector@USAttachingModelData@CGrannyLODController@@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@QAE@XZ ; std::vector<CGrannyLODController::SAttachingModelData,std::allocator<CGrannyLODController::SAttachingModelData> >::~vector<CGrannyLODController::SAttachingModelData,std::allocator<CGrannyLODController::SAttachingModelData> >
PUBLIC	?erase@?$vector@USAttachingModelData@CGrannyLODController@@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USAttachingModelData@CGrannyLODController@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USAttachingModelData@CGrannyLODController@@@std@@@std@@@2@@Z ; std::vector<CGrannyLODController::SAttachingModelData,std::allocator<CGrannyLODController::SAttachingModelData> >::erase
PUBLIC	?_Xlength@?$vector@USAttachingModelData@CGrannyLODController@@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@CAXXZ ; std::vector<CGrannyLODController::SAttachingModelData,std::allocator<CGrannyLODController::SAttachingModelData> >::_Xlength
PUBLIC	?_Xlen@?$deque@PAVCGrannyModelInstance@@V?$allocator@PAVCGrannyModelInstance@@@std@@@std@@ABEXXZ ; std::deque<CGrannyModelInstance *,std::allocator<CGrannyModelInstance *> >::_Xlen
PUBLIC	?_Growmap@?$deque@PAVCGrannyModelInstance@@V?$allocator@PAVCGrannyModelInstance@@@std@@@std@@AAEXI@Z ; std::deque<CGrannyModelInstance *,std::allocator<CGrannyModelInstance *> >::_Growmap
PUBLIC	?_Tidy@?$deque@PAVCGrannyModelInstance@@V?$allocator@PAVCGrannyModelInstance@@@std@@@std@@AAEXXZ ; std::deque<CGrannyModelInstance *,std::allocator<CGrannyModelInstance *> >::_Tidy
PUBLIC	??_GCGrannyLODController@@UAEPAXI@Z		; CGrannyLODController::`scalar deleting destructor'
PUBLIC	??0?$vector@PAVCGraphicVertexBuffer@@V?$allocator@PAVCGraphicVertexBuffer@@@std@@@std@@QAE@XZ ; std::vector<CGraphicVertexBuffer *,std::allocator<CGraphicVertexBuffer *> >::vector<CGraphicVertexBuffer *,std::allocator<CGraphicVertexBuffer *> >
PUBLIC	??1?$vector@PAVCGraphicVertexBuffer@@V?$allocator@PAVCGraphicVertexBuffer@@@std@@@std@@QAE@XZ ; std::vector<CGraphicVertexBuffer *,std::allocator<CGraphicVertexBuffer *> >::~vector<CGraphicVertexBuffer *,std::allocator<CGraphicVertexBuffer *> >
PUBLIC	?_Xlength@?$vector@PAVCGraphicVertexBuffer@@V?$allocator@PAVCGraphicVertexBuffer@@@std@@@std@@CAXXZ ; std::vector<CGraphicVertexBuffer *,std::allocator<CGraphicVertexBuffer *> >::_Xlength
PUBLIC	?__FreeDeformVertexBuffer@@YAXPAVCGraphicVertexBuffer@@@Z ; __FreeDeformVertexBuffer
PUBLIC	?__ReserveSharedVertexBuffers@@YAXII@Z		; __ReserveSharedVertexBuffers
PUBLIC	?GrannyCreateSharedDeformBuffer@@YAXXZ		; GrannyCreateSharedDeformBuffer
PUBLIC	?GrannyDestroySharedDeformBuffer@@YAXXZ		; GrannyDestroySharedDeformBuffer
PUBLIC	??$_Destroy_range@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@YAXPAUSAttachingModelData@CGrannyLODController@@QAU12@AAV?$allocator@USAttachingModelData@CGrannyLODController@@@0@@Z ; std::_Destroy_range<std::allocator<CGrannyLODController::SAttachingModelData> >
PUBLIC	??$_Emplace_reallocate@ABQAVCGraphicVertexBuffer@@@?$vector@PAVCGraphicVertexBuffer@@V?$allocator@PAVCGraphicVertexBuffer@@@std@@@std@@AAEPAPAVCGraphicVertexBuffer@@QAPAV2@ABQAV2@@Z ; std::vector<CGraphicVertexBuffer *,std::allocator<CGraphicVertexBuffer *> >::_Emplace_reallocate<CGraphicVertexBuffer * const &>
PUBLIC	??$_Emplace_reallocate@ABUSAttachingModelData@CGrannyLODController@@@?$vector@USAttachingModelData@CGrannyLODController@@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@AAEPAUSAttachingModelData@CGrannyLODController@@QAU23@ABU23@@Z ; std::vector<CGrannyLODController::SAttachingModelData,std::allocator<CGrannyLODController::SAttachingModelData> >::_Emplace_reallocate<CGrannyLODController::SAttachingModelData const &>
PUBLIC	??$uninitialized_copy@PAPAPAVCGrannyModelInstance@@PAPAPAV1@@std@@YAPAPAPAVCGrannyModelInstance@@QAPAPAV1@0PAPAPAV1@@Z ; std::uninitialized_copy<CGrannyModelInstance * * *,CGrannyModelInstance * * *>
PUBLIC	??$_Uninitialized_value_construct_n_unchecked1@PAPAPAVCGrannyModelInstance@@I@std@@YAPAPAPAVCGrannyModelInstance@@PAPAPAV1@I@Z ; std::_Uninitialized_value_construct_n_unchecked1<CGrannyModelInstance * * *,unsigned int>
PUBLIC	??$construct@USAttachingModelData@CGrannyLODController@@ABU12@@?$_Default_allocator_traits@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@SAXAAV?$allocator@USAttachingModelData@CGrannyLODController@@@1@QAUSAttachingModelData@CGrannyLODController@@ABU34@@Z ; std::_Default_allocator_traits<std::allocator<CGrannyLODController::SAttachingModelData> >::construct<CGrannyLODController::SAttachingModelData,CGrannyLODController::SAttachingModelData const &>
PUBLIC	??$_Uninitialized_move@PAUSAttachingModelData@CGrannyLODController@@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@YAPAUSAttachingModelData@CGrannyLODController@@QAU12@0PAU12@AAV?$allocator@USAttachingModelData@CGrannyLODController@@@0@@Z ; std::_Uninitialized_move<CGrannyLODController::SAttachingModelData *,std::allocator<CGrannyLODController::SAttachingModelData> >
PUBLIC	??$_Zero_range@PAPAPAVCGrannyModelInstance@@@std@@YAPAPAPAVCGrannyModelInstance@@QAPAPAV1@0@Z ; std::_Zero_range<CGrannyModelInstance * * *>
PUBLIC	??$_Copy_memmove@PAPAVCGraphicVertexBuffer@@PAPAV1@@std@@YAPAPAVCGraphicVertexBuffer@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicVertexBuffer * *,CGraphicVertexBuffer * *>
PUBLIC	??$_Copy_memmove@PAPAPAVCGrannyModelInstance@@PAPAPAV1@@std@@YAPAPAPAVCGrannyModelInstance@@PAPAPAV1@00@Z ; std::_Copy_memmove<CGrannyModelInstance * * *,CGrannyModelInstance * * *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7CGrannyLODController@@6B@			; CGrannyLODController::`vftable'
PUBLIC	??_C@_0BG@IJPBENCD@NEW_ERROR?5?$CF8d?3?5?$CFd?$CI?$CFd?$CJ@ ; `string'
PUBLIC	??_C@_0HN@JOABBJCG@CGrannyLODController?3?3RefreshAt@ ; `string'
PUBLIC	??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@	; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CGrannyLODController@@6B@			; CGrannyLODController::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCGrannyLODController@@@8		; CGrannyLODController `RTTI Type Descriptor'
PUBLIC	??_R3CGrannyLODController@@8			; CGrannyLODController::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGrannyLODController@@8			; CGrannyLODController::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGrannyLODController@@8		; CGrannyLODController::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CGraphicBase@@8			; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicBase@@@8			; CGraphicBase `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicBase@@8				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicBase@@8				; CGraphicBase::`RTTI Base Class Array'
PUBLIC	__real@41f00000
PUBLIC	__real@42b40000
PUBLIC	__real@43fa0000
PUBLIC	__real@44bb8000
PUBLIC	__real@451c4000
PUBLIC	__real@459c4000
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@7fffffff7fffffff7fffffff7fffffff
EXTRN	??_L@YGXPAXIIP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?MIN@@YAHHH@Z:PROC				; MIN
EXTRN	?fMAX@@YAMMM@Z:PROC				; fMAX
EXTRN	?fMINMAX@@YAMMMM@Z:PROC				; fMINMAX
EXTRN	?Tracenf@@YAXPBDZZ:PROC				; Tracenf
EXTRN	?TraceError@@YAXPBDZZ:PROC			; TraceError
EXTRN	__time64:PROC
EXTRN	??0CGraphicBase@@QAE@XZ:PROC			; CGraphicBase::CGraphicBase
EXTRN	??1CGraphicBase@@UAE@XZ:PROC			; CGraphicBase::~CGraphicBase
EXTRN	??0CGraphicVertexBuffer@@QAE@XZ:PROC		; CGraphicVertexBuffer::CGraphicVertexBuffer
EXTRN	??1CGraphicVertexBuffer@@UAE@XZ:PROC		; CGraphicVertexBuffer::~CGraphicVertexBuffer
EXTRN	?Destroy@CGraphicVertexBuffer@@QAEXXZ:PROC	; CGraphicVertexBuffer::Destroy
EXTRN	?GetVertexCount@CGraphicVertexBuffer@@QBEHXZ:PROC ; CGraphicVertexBuffer::GetVertexCount
EXTRN	?AddReference@CReferenceObject@@QAEXXZ:PROC	; CReferenceObject::AddReference
EXTRN	?Release@CReferenceObject@@QAEXXZ:PROC		; CReferenceObject::Release
EXTRN	?GetDeformVertexCount@CGrannyModel@@QBEHXZ:PROC	; CGrannyModel::GetDeformVertexCount
EXTRN	?GetModelPointer@CGraphicThing@@QAEPAVCGrannyModel@@H@Z:PROC ; CGraphicThing::GetModelPointer
EXTRN	?GetModelCount@CGraphicThing@@QBEHXZ:PROC	; CGraphicThing::GetModelCount
EXTRN	?New@CGrannyModelInstance@@SAPAV1@XZ:PROC	; CGrannyModelInstance::New
EXTRN	?Delete@CGrannyModelInstance@@SAXPAV1@@Z:PROC	; CGrannyModelInstance::Delete
EXTRN	?CreateDeviceObjects@CGrannyModelInstance@@QAE_NXZ:PROC ; CGrannyModelInstance::CreateDeviceObjects
EXTRN	?DestroyDeviceObjects@CGrannyModelInstance@@QAEXXZ:PROC ; CGrannyModelInstance::DestroyDeviceObjects
EXTRN	?Update@CGrannyModelInstance@@QAEXK@Z:PROC	; CGrannyModelInstance::Update
EXTRN	?UpdateLocalTime@CGrannyModelInstance@@QAEXM@Z:PROC ; CGrannyModelInstance::UpdateLocalTime
EXTRN	?UpdateSkeleton@CGrannyModelInstance@@QAEXPBUD3DXMATRIX@@M@Z:PROC ; CGrannyModelInstance::UpdateSkeleton
EXTRN	?DeformNoSkin@CGrannyModelInstance@@QAEXPBUD3DXMATRIX@@@Z:PROC ; CGrannyModelInstance::DeformNoSkin
EXTRN	?Deform@CGrannyModelInstance@@QAEXPBUD3DXMATRIX@@@Z:PROC ; CGrannyModelInstance::Deform
EXTRN	?RenderWithOneTexture@CGrannyModelInstance@@QAEXXZ:PROC ; CGrannyModelInstance::RenderWithOneTexture
EXTRN	?RenderWithTwoTexture@CGrannyModelInstance@@QAEXXZ:PROC ; CGrannyModelInstance::RenderWithTwoTexture
EXTRN	?BlendRenderWithOneTexture@CGrannyModelInstance@@QAEXXZ:PROC ; CGrannyModelInstance::BlendRenderWithOneTexture
EXTRN	?BlendRenderWithTwoTexture@CGrannyModelInstance@@QAEXXZ:PROC ; CGrannyModelInstance::BlendRenderWithTwoTexture
EXTRN	?RenderWithoutTexture@CGrannyModelInstance@@QAEXXZ:PROC ; CGrannyModelInstance::RenderWithoutTexture
EXTRN	?SetMaterialImagePointer@CGrannyModelInstance@@QAEXPBDPAVCGraphicImage@@@Z:PROC ; CGrannyModelInstance::SetMaterialImagePointer
EXTRN	?SetMaterialData@CGrannyModelInstance@@QAEXPBDABUSMaterialData@@@Z:PROC ; CGrannyModelInstance::SetMaterialData
EXTRN	?SetSpecularInfo@CGrannyModelInstance@@QAEXPBDHM@Z:PROC ; CGrannyModelInstance::SetSpecularInfo
EXTRN	?SetLinkedModelPointer@CGrannyModelInstance@@QAEXPAVCGrannyModel@@PAVCGraphicVertexBuffer@@PAPAV1@@Z:PROC ; CGrannyModelInstance::SetLinkedModelPointer
EXTRN	?SetMotionPointer@CGrannyModelInstance@@QAEXPBVCGrannyMotion@@MHM@Z:PROC ; CGrannyModelInstance::SetMotionPointer
EXTRN	?ChangeMotionPointer@CGrannyModelInstance@@QAEXPBVCGrannyMotion@@HM@Z:PROC ; CGrannyModelInstance::ChangeMotionPointer
EXTRN	?SetMotionAtEnd@CGrannyModelInstance@@QAEXXZ:PROC ; CGrannyModelInstance::SetMotionAtEnd
EXTRN	?CopyMotion@CGrannyModelInstance@@QAEXPAV1@_N@Z:PROC ; CGrannyModelInstance::CopyMotion
EXTRN	?SetLocalTime@CGrannyModelInstance@@QAEXM@Z:PROC ; CGrannyModelInstance::SetLocalTime
EXTRN	?ResetLocalTime@CGrannyModelInstance@@QAEHXZ:PROC ; CGrannyModelInstance::ResetLocalTime
EXTRN	?SetParentModelInstance@CGrannyModelInstance@@QAEXPBV1@PBD@Z:PROC ; CGrannyModelInstance::SetParentModelInstance
EXTRN	?SetParentModelInstance@CGrannyModelInstance@@QAEXPBV1@H@Z:PROC ; CGrannyModelInstance::SetParentModelInstance
EXTRN	?Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z:PROC ; CGrannyModelInstance::Intersect
EXTRN	?GetBoundBox@CGrannyModelInstance@@QAEXPAUD3DXVECTOR3@@0@Z:PROC ; CGrannyModelInstance::GetBoundBox
EXTRN	?ReloadTexture@CGrannyModelInstance@@QAEXXZ:PROC ; CGrannyModelInstance::ReloadTexture
EXTRN	??_ECGrannyLODController@@UAEPAXI@Z:PROC	; CGrannyLODController::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__ftol3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?ms_matIdentity@CGraphicBase@@1UD3DXMATRIX@@A:ZWORD ; CGraphicBase::ms_matIdentity
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
_BSS	SEGMENT
	ALIGN	4

?gs_vbs@@3PAV?$vector@PAVCGraphicVertexBuffer@@V?$allocator@PAVCGraphicVertexBuffer@@@std@@@std@@A DB 06cH DUP (?) ; gs_vbs
?gs_emptyVB@@3VCGraphicVertexBuffer@@A DB 020H DUP (?)	; gs_emptyVB
_BSS	ENDS
;	COMDAT ?base@?1??__AllocDeformVertexBuffer@@YAPAVCGraphicVertexBuffer@@I@Z@4_JA
_BSS	SEGMENT
?base@?1??__AllocDeformVertexBuffer@@YAPAVCGraphicVertexBuffer@@I@Z@4_JA DQ 01H DUP (?) ; `__AllocDeformVertexBuffer'::`2'::base
_BSS	ENDS
;	COMDAT ?$TSS0@?1??__AllocDeformVertexBuffer@@YAPAVCGraphicVertexBuffer@@I@Z@4HA
_BSS	SEGMENT
?$TSS0@?1??__AllocDeformVertexBuffer@@YAPAVCGraphicVertexBuffer@@I@Z@4HA DD 01H DUP (?) ; `__AllocDeformVertexBuffer'::`2'::$TSS0
_BSS	ENDS
CRT$XCU	SEGMENT
?gs_vbs$initializer$@@3P6AXXZA DD FLAT:??__Egs_vbs@@YAXXZ ; gs_vbs$initializer$
CRT$XCU	ENDS
;	COMDAT __xmm@7fffffff7fffffff7fffffff7fffffff
CONST	SEGMENT
__xmm@7fffffff7fffffff7fffffff7fffffff DB 0ffH, 0ffH, 0ffH, 07fH, 0ffH, 0ffH
	DB	0ffH, 07fH, 0ffH, 0ffH, 0ffH, 07fH, 0ffH, 0ffH, 0ffH, 07fH
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@459c4000
CONST	SEGMENT
__real@459c4000 DD 0459c4000r			; 5000
CONST	ENDS
;	COMDAT __real@451c4000
CONST	SEGMENT
__real@451c4000 DD 0451c4000r			; 2500
CONST	ENDS
;	COMDAT __real@44bb8000
CONST	SEGMENT
__real@44bb8000 DD 044bb8000r			; 1500
CONST	ENDS
;	COMDAT __real@43fa0000
CONST	SEGMENT
__real@43fa0000 DD 043fa0000r			; 500
CONST	ENDS
;	COMDAT __real@42b40000
CONST	SEGMENT
__real@42b40000 DD 042b40000r			; 90
CONST	ENDS
;	COMDAT __real@41f00000
CONST	SEGMENT
__real@41f00000 DD 041f00000r			; 30
CONST	ENDS
;	COMDAT ??_R2CGraphicBase@@8
rdata$r	SEGMENT
??_R2CGraphicBase@@8 DD FLAT:??_R1A@?0A@EA@CGraphicBase@@8 ; CGraphicBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGraphicBase@@8
rdata$r	SEGMENT
??_R3CGraphicBase@@8 DD 00H				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicBase@@@8
data$rs	SEGMENT
??_R0?AVCGraphicBase@@@8 DD FLAT:??_7type_info@@6B@	; CGraphicBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicBase@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicBase@@8 DD FLAT:??_R0?AVCGraphicBase@@@8 ; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CGrannyLODController@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGrannyLODController@@8 DD FLAT:??_R0?AVCGrannyLODController@@@8 ; CGrannyLODController::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGrannyLODController@@8
rdata$r	ENDS
;	COMDAT ??_R2CGrannyLODController@@8
rdata$r	SEGMENT
??_R2CGrannyLODController@@8 DD FLAT:??_R1A@?0A@EA@CGrannyLODController@@8 ; CGrannyLODController::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CGrannyLODController@@8
rdata$r	SEGMENT
??_R3CGrannyLODController@@8 DD 00H			; CGrannyLODController::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CGrannyLODController@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGrannyLODController@@@8
data$rs	SEGMENT
??_R0?AVCGrannyLODController@@@8 DD FLAT:??_7type_info@@6B@ ; CGrannyLODController `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGrannyLODController@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CGrannyLODController@@6B@
rdata$r	SEGMENT
??_R4CGrannyLODController@@6B@ DD 00H			; CGrannyLODController::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCGrannyLODController@@@8
	DD	FLAT:??_R3CGrannyLODController@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@
CONST	SEGMENT
??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@ DB 'deque<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0HN@JOABBJCG@CGrannyLODController?3?3RefreshAt@
CONST	SEGMENT
??_C@_0HN@JOABBJCG@CGrannyLODController?3?3RefreshAt@ DB 'CGrannyLODContr'
	DB	'oller::RefreshAttachedModelInstance : m_AttachedModelDataVect'
	DB	'or[%d]->pkLODController->GetModelIntance()==NULL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IJPBENCD@NEW_ERROR?5?$CF8d?3?5?$CFd?$CI?$CFd?$CJ@
CONST	SEGMENT
??_C@_0BG@IJPBENCD@NEW_ERROR?5?$CF8d?3?5?$CFd?$CI?$CFd?$CJ@ DB 'NEW_ERROR'
	DB	' %8d: %d(%d)', 00H				; `string'
CONST	ENDS
_DATA	SEGMENT
?LODHEIGHT_ACTOR@@3MA DD 043fa0000r		; 500	; LODHEIGHT_ACTOR
?LODDISTANCE_ACTOR@@3MA DD 0459c4000r		; 5000	; LODDISTANCE_ACTOR
?LODDISTANCE_BUILDING@@3MA DD 046c35000r	; 25000	; LODDISTANCE_BUILDING
_DATA	ENDS
;	COMDAT ??_7CGrannyLODController@@6B@
CONST	SEGMENT
??_7CGrannyLODController@@6B@ DD FLAT:??_R4CGrannyLODController@@6B@ ; CGrannyLODController::`vftable'
	DD	FLAT:??_ECGrannyLODController@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@ABUSAttachingModelData@CGrannyLODController@@@?$vector@USAttachingModelData@CGrannyLODController@@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@AAEPAUSAttachingModelData@CGrannyLODController@@QAU23@ABU23@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@ABUSAttachingModelData@CGrannyLODController@@@?$vector@USAttachingModelData@CGrannyLODController@@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@AAEPAUSAttachingModelData@CGrannyLODController@@QAU23@ABU23@@Z$0
__unwindtable$??$_Emplace_reallocate@ABUSAttachingModelData@CGrannyLODController@@@?$vector@USAttachingModelData@CGrannyLODController@@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@AAEPAUSAttachingModelData@CGrannyLODController@@QAU23@ABU23@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@ABUSAttachingModelData@CGrannyLODController@@@?$vector@USAttachingModelData@CGrannyLODController@@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@AAEPAUSAttachingModelData@CGrannyLODController@@QAU23@ABU23@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@ABUSAttachingModelData@CGrannyLODController@@@?$vector@USAttachingModelData@CGrannyLODController@@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@AAEPAUSAttachingModelData@CGrannyLODController@@QAU23@ABU23@@Z$2
__ehfuncinfo$??$_Emplace_reallocate@ABUSAttachingModelData@CGrannyLODController@@@?$vector@USAttachingModelData@CGrannyLODController@@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@AAEPAUSAttachingModelData@CGrannyLODController@@QAU23@ABU23@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@ABUSAttachingModelData@CGrannyLODController@@@?$vector@USAttachingModelData@CGrannyLODController@@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@AAEPAUSAttachingModelData@CGrannyLODController@@QAU23@ABU23@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@ABUSAttachingModelData@CGrannyLODController@@@?$vector@USAttachingModelData@CGrannyLODController@@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@AAEPAUSAttachingModelData@CGrannyLODController@@QAU23@ABU23@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?__ReserveSharedVertexBuffers@@YAXII@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?__ReserveSharedVertexBuffers@@YAXII@Z$0
__ehfuncinfo$?__ReserveSharedVertexBuffers@@YAXII@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?__ReserveSharedVertexBuffers@@YAXII@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?__AllocDeformVertexBuffer@@YAPAVCGraphicVertexBuffer@@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?__AllocDeformVertexBuffer@@YAPAVCGraphicVertexBuffer@@I@Z$0
__ehfuncinfo$?__AllocDeformVertexBuffer@@YAPAVCGraphicVertexBuffer@@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?__AllocDeformVertexBuffer@@YAPAVCGraphicVertexBuffer@@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AttachModelInstance@CGrannyLODController@@QAEXPAV1@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AttachModelInstance@CGrannyLODController@@QAEXPAV1@PBD@Z$0
__ehfuncinfo$?AttachModelInstance@CGrannyLODController@@QAEXPAV1@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AttachModelInstance@CGrannyLODController@@QAEXPAV1@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CGrannyLODController@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CGrannyLODController@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CGrannyLODController@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CGrannyLODController@@QAE@XZ$1
__ehfuncinfo$??0CGrannyLODController@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CGrannyLODController@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
CRT$XCU	SEGMENT
?gs_emptyVB$initializer$@@3P6AXXZA DD FLAT:??__Egs_emptyVB@@YAXXZ ; gs_emptyVB$initializer$
CRT$XCU	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAPAVCGrannyModelInstance@@PAPAPAV1@@std@@YAPAPAPAVCGrannyModelInstance@@PAPAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAPAVCGrannyModelInstance@@PAPAPAV1@@std@@YAPAPAPAVCGrannyModelInstance@@PAPAPAV1@00@Z PROC ; std::_Copy_memmove<CGrannyModelInstance * * *,CGrannyModelInstance * * *>, COMDAT

; 4526 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4527 :     auto _FirstPtr              = _To_address(_First);
; 4528 :     auto _LastPtr               = _To_address(_Last);
; 4529 :     auto _DestPtr               = _To_address(_Dest);
; 4530 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4531 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4532 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4533 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4535 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4536 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4537 :     } else {
; 4538 :         return _Dest + (_LastPtr - _FirstPtr);
; 4539 :     }
; 4540 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAPAVCGrannyModelInstance@@PAPAPAV1@@std@@YAPAPAPAVCGrannyModelInstance@@PAPAPAV1@00@Z ENDP ; std::_Copy_memmove<CGrannyModelInstance * * *,CGrannyModelInstance * * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCGraphicVertexBuffer@@PAPAV1@@std@@YAPAPAVCGraphicVertexBuffer@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCGraphicVertexBuffer@@PAPAV1@@std@@YAPAPAVCGraphicVertexBuffer@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CGraphicVertexBuffer * *,CGraphicVertexBuffer * *>, COMDAT

; 4526 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4527 :     auto _FirstPtr              = _To_address(_First);
; 4528 :     auto _LastPtr               = _To_address(_Last);
; 4529 :     auto _DestPtr               = _To_address(_Dest);
; 4530 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4531 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4532 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4533 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4535 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4536 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4537 :     } else {
; 4538 :         return _Dest + (_LastPtr - _FirstPtr);
; 4539 :     }
; 4540 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAVCGraphicVertexBuffer@@PAPAV1@@std@@YAPAPAVCGraphicVertexBuffer@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CGraphicVertexBuffer * *,CGraphicVertexBuffer * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$_Zero_range@PAPAPAVCGrannyModelInstance@@@std@@YAPAPAPAVCGrannyModelInstance@@QAPAPAV1@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Zero_range@PAPAPAVCGrannyModelInstance@@@std@@YAPAPAPAVCGrannyModelInstance@@QAPAPAV1@0@Z PROC ; std::_Zero_range<CGrannyModelInstance * * *>, COMDAT

; 2017 : _Ptr _Zero_range(const _Ptr _First, const _Ptr _Last) { // fill [_First, _Last) with zeroes

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2018 :     char* const _First_ch = reinterpret_cast<char*>(_To_address(_First));
; 2019 :     char* const _Last_ch  = reinterpret_cast<char*>(_To_address(_Last));
; 2020 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	51		 push	 ecx
  0000c	6a 00		 push	 0
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 _memset

; 2021 :     return _Last;

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2022 : }

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Zero_range@PAPAPAVCGrannyModelInstance@@@std@@YAPAPAPAVCGrannyModelInstance@@QAPAPAV1@0@Z ENDP ; std::_Zero_range<CGrannyModelInstance * * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAUSAttachingModelData@CGrannyLODController@@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@YAPAUSAttachingModelData@CGrannyLODController@@QAU12@0PAU12@AAV?$allocator@USAttachingModelData@CGrannyLODController@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUSAttachingModelData@CGrannyLODController@@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@YAPAUSAttachingModelData@CGrannyLODController@@QAU12@0PAU12@AAV?$allocator@USAttachingModelData@CGrannyLODController@@@0@@Z PROC ; std::_Uninitialized_move<CGrannyLODController::SAttachingModelData *,std::allocator<CGrannyLODController::SAttachingModelData> >, COMDAT

; 1927 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1945 :     for (; _UFirst != _ULast; ++_UFirst) {

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	53		 push	 ebx
  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  0000a	56		 push	 esi

; 1791 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  0000b	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]

; 1945 :     for (; _UFirst != _ULast; ++_UFirst) {

  0000e	3b cb		 cmp	 ecx, ebx
  00010	74 60		 je	 SHORT $LN3@Uninitiali
  00012	57		 push	 edi

; 1791 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00013	8b fe		 mov	 edi, esi
  00015	8d 56 18	 lea	 edx, DWORD PTR [esi+24]
  00018	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  0001b	2b f9		 sub	 edi, ecx
  0001d	0f 1f 00	 npad	 3
$LL4@Uninitiali:
  00020	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]

; 1803 :         ++_Last;

  00023	8d 40 1c	 lea	 eax, DWORD PTR [eax+28]
  00026	89 0e		 mov	 DWORD PTR [esi], ecx
  00028	8d 52 1c	 lea	 edx, DWORD PTR [edx+28]
  0002b	0f 57 c0	 xorps	 xmm0, xmm0

; 1945 :     for (; _UFirst != _ULast; ++_UFirst) {

  0002e	8d 48 fc	 lea	 ecx, DWORD PTR [eax-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00031	0f 11 44 07 e4	 movups	 XMMWORD PTR [edi+eax-28], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  00036	c7 42 e0 00 00
	00 00		 mov	 DWORD PTR [edx-32], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1803 :         ++_Last;

  0003d	83 c6 1c	 add	 esi, 28			; 0000001cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  00040	c7 42 e4 00 00
	00 00		 mov	 DWORD PTR [edx-28], 0

; 2999 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00047	0f 10 40 e4	 movups	 xmm0, XMMWORD PTR [eax-28]
  0004b	0f 11 44 07 e4	 movups	 XMMWORD PTR [edi+eax-28], xmm0
  00050	f3 0f 7e 40 f4	 movq	 xmm0, QWORD PTR [eax-12]
  00055	66 0f d6 44 07
	f4		 movq	 QWORD PTR [edi+eax-12], xmm0

; 4821 :         _My_data._Mysize = 0;

  0005b	c7 40 f4 00 00
	00 00		 mov	 DWORD PTR [eax-12], 0

; 4822 :         _My_data._Myres  = _BUF_SIZE - 1;

  00062	c7 40 f8 0f 00
	00 00		 mov	 DWORD PTR [eax-8], 15	; 0000000fH

; 4823 :         _My_data._Activate_SSO_buffer();
; 4824 : 
; 4825 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4826 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00069	c6 40 e4 00	 mov	 BYTE PTR [eax-28], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1945 :     for (; _UFirst != _ULast; ++_UFirst) {

  0006d	3b cb		 cmp	 ecx, ebx
  0006f	75 af		 jne	 SHORT $LL4@Uninitiali
  00071	5f		 pop	 edi
$LN3@Uninitiali:

; 1797 :         _Destroy_range(_First, _Last, _Al);

  00072	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00075	56		 push	 esi
  00076	56		 push	 esi
  00077	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@YAXPAUSAttachingModelData@CGrannyLODController@@QAU12@AAV?$allocator@USAttachingModelData@CGrannyLODController@@@0@@Z ; std::_Destroy_range<std::allocator<CGrannyLODController::SAttachingModelData> >
  0007c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1946 :         _Backout._Emplace_back(_STD move(*_UFirst));
; 1947 :     }
; 1948 : 
; 1949 :     return _Backout._Release();

  0007f	8b c6		 mov	 eax, esi
  00081	5e		 pop	 esi
  00082	5b		 pop	 ebx

; 1950 : }

  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
??$_Uninitialized_move@PAUSAttachingModelData@CGrannyLODController@@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@YAPAUSAttachingModelData@CGrannyLODController@@QAU12@0PAU12@AAV?$allocator@USAttachingModelData@CGrannyLODController@@@0@@Z ENDP ; std::_Uninitialized_move<CGrannyLODController::SAttachingModelData *,std::allocator<CGrannyLODController::SAttachingModelData> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$construct@USAttachingModelData@CGrannyLODController@@ABU12@@?$_Default_allocator_traits@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@SAXAAV?$allocator@USAttachingModelData@CGrannyLODController@@@1@QAUSAttachingModelData@CGrannyLODController@@ABU34@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__Result$1$ = 16					; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@USAttachingModelData@CGrannyLODController@@ABU12@@?$_Default_allocator_traits@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@SAXAAV?$allocator@USAttachingModelData@CGrannyLODController@@@1@QAUSAttachingModelData@CGrannyLODController@@ABU34@@Z PROC ; std::_Default_allocator_traits<std::allocator<CGrannyLODController::SAttachingModelData> >::construct<CGrannyLODController::SAttachingModelData,CGrannyLODController::SAttachingModelData const &>, COMDAT

; 715  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	53		 push	 ebx
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Ptr$[ebp]
  0000e	8d 59 04	 lea	 ebx, DWORD PTR [ecx+4]
  00011	8b 01		 mov	 eax, DWORD PTR [ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2235 :         const value_type* _Result = _Bx._Buf;

  00013	89 5d 10	 mov	 DWORD PTR __Result$1$[ebp], ebx
  00016	89 07		 mov	 DWORD PTR [edi], eax
  00018	8b c3		 mov	 eax, ebx

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0001a	0f 11 47 04	 movups	 XMMWORD PTR [edi+4], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  0001e	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  00025	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0

; 2244 :         return _BUF_SIZE <= _Myres;

  0002c	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H

; 2236 :         if (_Large_string_engaged()) {

  00030	72 05		 jb	 SHORT $LN17@construct

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  00032	8b 03		 mov	 eax, DWORD PTR [ebx]
  00034	89 45 10	 mov	 DWORD PTR __Result$1$[ebp], eax
$LN17@construct:

; 2492 :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00037	8b 5b 10	 mov	 ebx, DWORD PTR [ebx+16]

; 2620 :         if (_Count > max_size()) {

  0003a	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  00040	0f 87 91 00 00
	00		 ja	 $LN56@construct

; 2622 :         }
; 2623 : 
; 2624 :         auto& _Al       = _Getal();
; 2625 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 2626 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 2627 : 
; 2628 :         if (_Count < _BUF_SIZE) {

  00046	c7 47 18 0f 00
	00 00		 mov	 DWORD PTR [edi+24], 15	; 0000000fH
  0004d	83 fb 10	 cmp	 ebx, 16			; 00000010H
  00050	73 0e		 jae	 SHORT $LN23@construct

; 2629 :             _My_data._Mysize = _Count;

  00052	89 5f 14	 mov	 DWORD PTR [edi+20], ebx

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00055	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00058	0f 11 47 04	 movups	 XMMWORD PTR [edi+4], xmm0
  0005c	5f		 pop	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 721  :     }

  0005d	5b		 pop	 ebx
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
$LN23@construct:
  00060	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4714 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00061	8b f3		 mov	 esi, ebx
  00063	83 ce 0f	 or	 esi, 15			; 0000000fH
  00066	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4715 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0006c	76 17		 jbe	 SHORT $LN30@construct

; 4716 :             return _Max;

  0006e	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00073	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0007e	83 c4 04	 add	 esp, 4
  00081	8b c8		 mov	 ecx, eax
  00083	eb 34		 jmp	 SHORT $LN37@construct
$LN30@construct:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 47   :     return _Left < _Right ? _Right : _Left;

  00085	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  0008a	3b f0		 cmp	 esi, eax
  0008c	0f 42 f0	 cmovb	 esi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2652 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0008f	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00092	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00097	72 0d		 jb	 SHORT $LN38@construct

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0009f	83 c4 04	 add	 esp, 4
  000a2	8b c8		 mov	 ecx, eax
  000a4	eb 13		 jmp	 SHORT $LN37@construct
$LN38@construct:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  000a6	85 c0		 test	 eax, eax
  000a8	74 0d		 je	 SHORT $LN39@construct

; 87   :         return ::operator new(_Bytes);

  000aa	50		 push	 eax
  000ab	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000b0	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  000b3	8b c8		 mov	 ecx, eax
  000b5	eb 02		 jmp	 SHORT $LN37@construct
$LN39@construct:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  000b7	33 c9		 xor	 ecx, ecx
$LN37@construct:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2666 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);

  000b9	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  000bc	89 4f 04	 mov	 DWORD PTR [edi+4], ecx

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000bf	50		 push	 eax
  000c0	ff 75 10	 push	 DWORD PTR __Result$1$[ebp]

; 2657 :         _My_data._Mysize = _Count;

  000c3	89 5f 14	 mov	 DWORD PTR [edi+20], ebx

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c6	51		 push	 ecx

; 2658 :         _My_data._Myres  = _New_capacity;

  000c7	89 77 18	 mov	 DWORD PTR [edi+24], esi

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000ca	e8 00 00 00 00	 call	 _memcpy
  000cf	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d2	5e		 pop	 esi
  000d3	5f		 pop	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 721  :     }

  000d4	5b		 pop	 ebx
  000d5	5d		 pop	 ebp
  000d6	c3		 ret	 0
$LN56@construct:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2621 :             _Xlen_string(); // result too long

  000d7	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN54@construct:
  000dc	cc		 int	 3
??$construct@USAttachingModelData@CGrannyLODController@@ABU12@@?$_Default_allocator_traits@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@SAXAAV?$allocator@USAttachingModelData@CGrannyLODController@@@1@QAUSAttachingModelData@CGrannyLODController@@ABU34@@Z ENDP ; std::_Default_allocator_traits<std::allocator<CGrannyLODController::SAttachingModelData> >::construct<CGrannyLODController::SAttachingModelData,CGrannyLODController::SAttachingModelData const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n_unchecked1@PAPAPAVCGrannyModelInstance@@I@std@@YAPAPAPAVCGrannyModelInstance@@PAPAPAV1@I@Z
_TEXT	SEGMENT
__UFirst$ = 8						; size = 4
__Count$ = 12						; size = 4
??$_Uninitialized_value_construct_n_unchecked1@PAPAPAVCGrannyModelInstance@@I@std@@YAPAPAPAVCGrannyModelInstance@@PAPAPAV1@I@Z PROC ; std::_Uninitialized_value_construct_n_unchecked1<CGrannyModelInstance * * *,unsigned int>, COMDAT

; 2049 : _NoThrowFwdIt _Uninitialized_value_construct_n_unchecked1(_NoThrowFwdIt _UFirst, _Diff _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2050 :     // value-initialize all elements in [_UFirst, _UFirst + _Count)
; 2051 :     _STL_INTERNAL_CHECK(_Count >= 0);
; 2052 :     if constexpr (_Use_memset_value_construct_v<_NoThrowFwdIt>) {
; 2053 :         return _Zero_range(_UFirst, _UFirst + _Count);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __UFirst$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00009	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0000c	89 45 0c	 mov	 DWORD PTR __Count$[ebp], eax
  0000f	89 4d 08	 mov	 DWORD PTR __UFirst$[ebp], ecx

; 2054 :     } else {
; 2055 :         _Uninitialized_backout<_NoThrowFwdIt> _Backout{_UFirst};
; 2056 :         for (; 0 < _Count; --_Count) {
; 2057 :             _Backout._Emplace_back();
; 2058 :         }
; 2059 : 
; 2060 :         return _Backout._Release();
; 2061 :     }
; 2062 : }

  00012	5d		 pop	 ebp

; 2050 :     // value-initialize all elements in [_UFirst, _UFirst + _Count)
; 2051 :     _STL_INTERNAL_CHECK(_Count >= 0);
; 2052 :     if constexpr (_Use_memset_value_construct_v<_NoThrowFwdIt>) {
; 2053 :         return _Zero_range(_UFirst, _UFirst + _Count);

  00013	e9 00 00 00 00	 jmp	 ??$_Zero_range@PAPAPAVCGrannyModelInstance@@@std@@YAPAPAPAVCGrannyModelInstance@@QAPAPAV1@0@Z ; std::_Zero_range<CGrannyModelInstance * * *>
??$_Uninitialized_value_construct_n_unchecked1@PAPAPAVCGrannyModelInstance@@I@std@@YAPAPAPAVCGrannyModelInstance@@PAPAPAV1@I@Z ENDP ; std::_Uninitialized_value_construct_n_unchecked1<CGrannyModelInstance * * *,unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$uninitialized_copy@PAPAPAVCGrannyModelInstance@@PAPAPAV1@@std@@YAPAPAPAVCGrannyModelInstance@@QAPAPAV1@0PAPAPAV1@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$uninitialized_copy@PAPAPAVCGrannyModelInstance@@PAPAPAV1@@std@@YAPAPAPAVCGrannyModelInstance@@QAPAPAV1@0PAPAPAV1@@Z PROC ; std::uninitialized_copy<CGrannyModelInstance * * *,CGrannyModelInstance * * *>, COMDAT

; 1915 : _NoThrowFwdIt uninitialized_copy(const _InIt _First, const _InIt _Last, _NoThrowFwdIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1916 :     // copy [_First, _Last) to raw [_Dest, ...)
; 1917 :     _Adl_verify_range(_First, _Last);
; 1918 :     auto _UFirst      = _Get_unwrapped(_First);
; 1919 :     const auto _ULast = _Get_unwrapped(_Last);
; 1920 :     auto _UDest       = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
; 1921 :     _Seek_wrapped(_Dest, _Uninitialized_copy_unchecked(_UFirst, _ULast, _UDest));
; 1922 :     return _Dest;
; 1923 : }

  00003	5d		 pop	 ebp

; 1902 :             return _Copy_memmove(_First, _Last, _Dest);

  00004	e9 00 00 00 00	 jmp	 ??$_Copy_memmove@PAPAPAVCGrannyModelInstance@@PAPAPAV1@@std@@YAPAPAPAVCGrannyModelInstance@@PAPAPAV1@00@Z ; std::_Copy_memmove<CGrannyModelInstance * * *,CGrannyModelInstance * * *>
??$uninitialized_copy@PAPAPAVCGrannyModelInstance@@PAPAPAV1@@std@@YAPAPAPAVCGrannyModelInstance@@QAPAPAV1@0PAPAPAV1@@Z ENDP ; std::uninitialized_copy<CGrannyModelInstance * * *,CGrannyModelInstance * * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??$_Emplace_reallocate@ABUSAttachingModelData@CGrannyLODController@@@?$vector@USAttachingModelData@CGrannyLODController@@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@AAEPAUSAttachingModelData@CGrannyLODController@@QAU23@ABU23@@Z
_TEXT	SEGMENT
__Constructed_last$ = -44				; size = 4
_this$ = -40						; size = 4
__Oldsize$1$ = -36					; size = 4
tv439 = -32						; size = 4
__Whereoff$1$ = -32					; size = 4
tv453 = -28						; size = 4
$T2 = -24						; size = 4
__Newcapacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABUSAttachingModelData@CGrannyLODController@@@?$vector@USAttachingModelData@CGrannyLODController@@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@AAEPAUSAttachingModelData@CGrannyLODController@@QAU23@ABU23@@Z PROC ; std::vector<CGrannyLODController::SAttachingModelData,std::allocator<CGrannyLODController::SAttachingModelData> >::_Emplace_reallocate<CGrannyLODController::SAttachingModelData const &>, COMDAT
; _this$ = ecx

; 812  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Emplace_reallocate@ABUSAttachingModelData@CGrannyLODController@@@?$vector@USAttachingModelData@CGrannyLODController@@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@AAEPAUSAttachingModelData@CGrannyLODController@@QAU23@ABU23@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d d8	 mov	 DWORD PTR _this$[ebp], edi

; 813  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 814  :         _Alty& _Al        = _Getal();
; 815  :         auto& _My_data    = _Mypair._Myval2;
; 816  :         pointer& _Myfirst = _My_data._Myfirst;
; 817  :         pointer& _Mylast  = _My_data._Mylast;
; 818  : 
; 819  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 820  : 
; 821  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00030	8b 1f		 mov	 ebx, DWORD PTR [edi]
  00032	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00037	8b 75 08	 mov	 esi, DWORD PTR __Whereptr$[ebp]

; 822  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  0003a	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0003d	2b f3		 sub	 esi, ebx
  0003f	f7 ee		 imul	 esi
  00041	2b cb		 sub	 ecx, ebx
  00043	03 d6		 add	 edx, esi
  00045	c1 fa 04	 sar	 edx, 4
  00048	8b c2		 mov	 eax, edx
  0004a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0004d	03 c2		 add	 eax, edx
  0004f	89 45 e0	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  00052	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00057	f7 e9		 imul	 ecx
  00059	03 d1		 add	 edx, ecx
  0005b	c1 fa 04	 sar	 edx, 4
  0005e	8b c2		 mov	 eax, edx
  00060	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00063	03 c2		 add	 eax, edx
  00065	89 45 dc	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 823  : 
; 824  :         if (_Oldsize == max_size()) {

  00068	3d 49 92 24 09	 cmp	 eax, 153391689		; 09249249H
  0006d	0f 84 ad 01 00
	00		 je	 $LN58@Emplace_re

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00073	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]

; 826  :         }
; 827  : 
; 828  :         const size_type _Newsize     = _Oldsize + 1;

  00076	8d 70 01	 lea	 esi, DWORD PTR [eax+1]

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00079	2b cb		 sub	 ecx, ebx
  0007b	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00080	f7 e9		 imul	 ecx

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00082	b8 49 92 24 09	 mov	 eax, 153391689		; 09249249H

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00087	03 d1		 add	 edx, ecx
  00089	c1 fa 04	 sar	 edx, 4
  0008c	8b ca		 mov	 ecx, edx
  0008e	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00091	03 ca		 add	 ecx, edx

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00093	8b d1		 mov	 edx, ecx
  00095	d1 ea		 shr	 edx, 1
  00097	2b c2		 sub	 eax, edx
  00099	3b c8		 cmp	 ecx, eax
  0009b	76 1c		 jbe	 SHORT $LN12@Emplace_re

; 1967 :             return _Max; // geometric growth would overflow

  0009d	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  000a2	c7 45 ec 49 92
	24 09		 mov	 DWORD PTR __Newcapacity$[ebp], 153391689 ; 09249249H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a9	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1967 :             return _Max; // geometric growth would overflow

  000aa	89 45 e4	 mov	 DWORD PTR tv453[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000ad	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000b2	83 c4 04	 add	 esp, 4
  000b5	8b f0		 mov	 esi, eax
  000b7	eb 52		 jmp	 SHORT $LN55@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1970 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  000b9	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 70   :         if (_Count > _Max_possible) {

  000bc	8b de		 mov	 ebx, esi
  000be	3b c6		 cmp	 eax, esi
  000c0	0f 43 d8	 cmovae	 ebx, eax
  000c3	81 fb 49 92 24
	09		 cmp	 ebx, 153391689		; 09249249H
  000c9	0f 87 56 01 00
	00		 ja	 $LN59@Emplace_re

; 72   :         }
; 73   :     }
; 74   : 
; 75   :     return _Count * _Ty_size;

  000cf	8d 04 dd 00 00
	00 00		 lea	 eax, DWORD PTR [ebx*8]
  000d6	89 5d ec	 mov	 DWORD PTR __Newcapacity$[ebp], ebx
  000d9	2b c3		 sub	 eax, ebx
  000db	c1 e0 02	 shl	 eax, 2
  000de	89 45 e4	 mov	 DWORD PTR tv453[ebp], eax

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000e1	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000e6	72 0d		 jb	 SHORT $LN24@Emplace_re

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000e8	50		 push	 eax
  000e9	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000ee	83 c4 04	 add	 esp, 4
  000f1	8b f0		 mov	 esi, eax
  000f3	eb 16		 jmp	 SHORT $LN55@Emplace_re
$LN24@Emplace_re:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  000f5	85 c0		 test	 eax, eax
  000f7	74 0d		 je	 SHORT $LN25@Emplace_re

; 87   :         return ::operator new(_Bytes);

  000f9	50		 push	 eax
  000fa	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000ff	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  00102	8b f0		 mov	 esi, eax
  00104	eb 02		 jmp	 SHORT $LN56@Emplace_re
$LN25@Emplace_re:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  00106	33 f6		 xor	 esi, esi
$LN56@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 832  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  00108	89 5d ec	 mov	 DWORD PTR __Newcapacity$[ebp], ebx
$LN55@Emplace_re:
  0010b	8b 4d e0	 mov	 ecx, DWORD PTR __Whereoff$1$[ebp]

; 833  :         pointer _Constructed_first      = _Constructed_last;
; 834  : 
; 835  :         _TRY_BEGIN
; 836  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  0010e	ff 75 0c	 push	 DWORD PTR _<_Val_0>$[ebp]
  00111	89 75 e8	 mov	 DWORD PTR $T2[ebp], esi
  00114	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0011b	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  00122	2b c1		 sub	 eax, ecx
  00124	8d 04 86	 lea	 eax, DWORD PTR [esi+eax*4]
  00127	50		 push	 eax
  00128	8d 58 1c	 lea	 ebx, DWORD PTR [eax+28]
  0012b	89 45 e0	 mov	 DWORD PTR tv439[ebp], eax
  0012e	57		 push	 edi
  0012f	89 5d d4	 mov	 DWORD PTR __Constructed_last$[ebp], ebx
  00132	e8 00 00 00 00	 call	 ??$construct@USAttachingModelData@CGrannyLODController@@ABU12@@?$_Default_allocator_traits@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@SAXAAV?$allocator@USAttachingModelData@CGrannyLODController@@@1@QAUSAttachingModelData@CGrannyLODController@@ABU34@@Z ; std::_Default_allocator_traits<std::allocator<CGrannyLODController::SAttachingModelData> >::construct<CGrannyLODController::SAttachingModelData,CGrannyLODController::SAttachingModelData const &>

; 837  :         _Constructed_first = _Newvec + _Whereoff;
; 838  : 
; 839  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00137	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0013a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0013d	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  00140	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00142	3b d0		 cmp	 edx, eax
  00144	75 04		 jne	 SHORT $LN4@Emplace_re

; 840  :             if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 841  :                 _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);

  00146	8b de		 mov	 ebx, esi

; 842  :             } else {
; 843  :                 _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);
; 844  :             }
; 845  :         } else { // provide basic guarantee

  00148	eb 12		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 846  :             _Uninitialized_move(_Myfirst, _Whereptr, _Newvec, _Al);

  0014a	57		 push	 edi
  0014b	56		 push	 esi
  0014c	52		 push	 edx
  0014d	51		 push	 ecx
  0014e	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUSAttachingModelData@CGrannyLODController@@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@YAPAUSAttachingModelData@CGrannyLODController@@QAU12@0PAU12@AAV?$allocator@USAttachingModelData@CGrannyLODController@@@0@@Z ; std::_Uninitialized_move<CGrannyLODController::SAttachingModelData *,std::allocator<CGrannyLODController::SAttachingModelData> >

; 847  :             _Constructed_first = _Newvec;
; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  00153	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  00156	83 c4 10	 add	 esp, 16			; 00000010H
  00159	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
$LN5@Emplace_re:
  0015c	57		 push	 edi
  0015d	53		 push	 ebx
  0015e	50		 push	 eax
  0015f	51		 push	 ecx
  00160	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUSAttachingModelData@CGrannyLODController@@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@YAPAUSAttachingModelData@CGrannyLODController@@QAU12@0PAU12@AAV?$allocator@USAttachingModelData@CGrannyLODController@@@0@@Z ; std::_Uninitialized_move<CGrannyLODController::SAttachingModelData *,std::allocator<CGrannyLODController::SAttachingModelData> >

; 2023 :         if (_Myfirst) { // destroy and deallocate old array

  00165	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 847  :             _Constructed_first = _Newvec;
; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  00167	83 c4 10	 add	 esp, 16			; 00000010H

; 2023 :         if (_Myfirst) { // destroy and deallocate old array

  0016a	85 c9		 test	 ecx, ecx
  0016c	74 57		 je	 SHORT $LN37@Emplace_re

; 2024 :             _Destroy_range(_Myfirst, _Mylast, _Al);

  0016e	57		 push	 edi
  0016f	ff 77 04	 push	 DWORD PTR [edi+4]
  00172	51		 push	 ecx
  00173	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@YAXPAUSAttachingModelData@CGrannyLODController@@QAU12@AAV?$allocator@USAttachingModelData@CGrannyLODController@@@0@@Z ; std::_Destroy_range<std::allocator<CGrannyLODController::SAttachingModelData> >

; 2025 :             _ASAN_VECTOR_REMOVE;
; 2026 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00178	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0017b	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00180	8b 1f		 mov	 ebx, DWORD PTR [edi]
  00182	83 c4 0c	 add	 esp, 12			; 0000000cH
  00185	2b cb		 sub	 ecx, ebx
  00187	f7 e9		 imul	 ecx
  00189	03 d1		 add	 edx, ecx
  0018b	c1 fa 04	 sar	 edx, 4
  0018e	8b c2		 mov	 eax, edx
  00190	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00193	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00195	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  0019c	2b c8		 sub	 ecx, eax
  0019e	c1 e1 02	 shl	 ecx, 2

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  001a1	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001a7	72 12		 jb	 SHORT $LN47@Emplace_re

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001a9	8b 53 fc	 mov	 edx, DWORD PTR [ebx-4]
  001ac	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  001af	2b da		 sub	 ebx, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001b1	8d 43 fc	 lea	 eax, DWORD PTR [ebx-4]
  001b4	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001b7	77 71		 ja	 SHORT $LN44@Emplace_re

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  001b9	8b da		 mov	 ebx, edx
$LN47@Emplace_re:

; 265  :         ::operator delete(_Ptr, _Bytes);

  001bb	51		 push	 ecx
  001bc	53		 push	 ebx
  001bd	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001c2	83 c4 08	 add	 esp, 8
$LN37@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2030 :         _Mylast  = _Newvec + _Newsize;

  001c5	8b 45 dc	 mov	 eax, DWORD PTR __Oldsize$1$[ebp]
  001c8	40		 inc	 eax
  001c9	89 37		 mov	 DWORD PTR [edi], esi
  001cb	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  001d2	2b c8		 sub	 ecx, eax

; 854  :         _CATCH_END
; 855  : 
; 856  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 857  :         return _Newvec + _Whereoff;

  001d4	8b 45 e0	 mov	 eax, DWORD PTR tv439[ebp]

; 2030 :         _Mylast  = _Newvec + _Newsize;

  001d7	8d 0c 8e	 lea	 ecx, DWORD PTR [esi+ecx*4]
  001da	89 4f 04	 mov	 DWORD PTR [edi+4], ecx

; 2031 :         _Myend   = _Newvec + _Newcapacity;

  001dd	8b 4d e4	 mov	 ecx, DWORD PTR tv453[ebp]
  001e0	03 ce		 add	 ecx, esi
  001e2	89 4f 08	 mov	 DWORD PTR [edi+8], ecx

; 858  :     }

  001e5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001e8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001ef	59		 pop	 ecx
  001f0	5f		 pop	 edi
  001f1	5e		 pop	 esi
  001f2	5b		 pop	 ebx
  001f3	8b e5		 mov	 esp, ebp
  001f5	5d		 pop	 ebp
  001f6	c2 08 00	 ret	 8
__catch$??$_Emplace_reallocate@ABUSAttachingModelData@CGrannyLODController@@@?$vector@USAttachingModelData@CGrannyLODController@@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@AAEPAUSAttachingModelData@CGrannyLODController@@QAU23@ABU23@@Z$0:

; 849  :         }
; 850  :         _CATCH_ALL
; 851  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);

  001f9	8b 75 d8	 mov	 esi, DWORD PTR _this$[ebp]
  001fc	8b 45 d4	 mov	 eax, DWORD PTR __Constructed_last$[ebp]
  001ff	56		 push	 esi
  00200	50		 push	 eax
  00201	50		 push	 eax
  00202	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@YAXPAUSAttachingModelData@CGrannyLODController@@QAU12@AAV?$allocator@USAttachingModelData@CGrannyLODController@@@0@@Z ; std::_Destroy_range<std::allocator<CGrannyLODController::SAttachingModelData> >
  00207	83 c4 0c	 add	 esp, 12			; 0000000cH

; 852  :         _Al.deallocate(_Newvec, _Newcapacity);

  0020a	8b ce		 mov	 ecx, esi
  0020c	ff 75 ec	 push	 DWORD PTR __Newcapacity$[ebp]
  0020f	ff 75 e8	 push	 DWORD PTR $T2[ebp]
  00212	e8 00 00 00 00	 call	 ?deallocate@?$allocator@USAttachingModelData@CGrannyLODController@@@std@@QAEXQAUSAttachingModelData@CGrannyLODController@@I@Z ; std::allocator<CGrannyLODController::SAttachingModelData>::deallocate

; 853  :         _RERAISE;

  00217	6a 00		 push	 0
  00219	6a 00		 push	 0
  0021b	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN58@Emplace_re:

; 825  :             _Xlength();

  00220	e8 00 00 00 00	 call	 ?_Xlength@?$vector@USAttachingModelData@CGrannyLODController@@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@CAXXZ ; std::vector<CGrannyLODController::SAttachingModelData,std::allocator<CGrannyLODController::SAttachingModelData> >::_Xlength
$LN59@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 71   :             _Throw_bad_array_new_length(); // multiply overflow

  00225	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN44@Emplace_re:

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0022a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN54@Emplace_re:
  0022f	cc		 int	 3
  00230	cc		 int	 3
  00231	cc		 int	 3
  00232	cc		 int	 3
  00233	cc		 int	 3
  00234	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@ABUSAttachingModelData@CGrannyLODController@@@?$vector@USAttachingModelData@CGrannyLODController@@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@AAEPAUSAttachingModelData@CGrannyLODController@@QAU23@ABU23@@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@ABUSAttachingModelData@CGrannyLODController@@@?$vector@USAttachingModelData@CGrannyLODController@@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@AAEPAUSAttachingModelData@CGrannyLODController@@QAU23@ABU23@@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@ABUSAttachingModelData@CGrannyLODController@@@?$vector@USAttachingModelData@CGrannyLODController@@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@AAEPAUSAttachingModelData@CGrannyLODController@@QAU23@ABU23@@Z ENDP ; std::vector<CGrannyLODController::SAttachingModelData,std::allocator<CGrannyLODController::SAttachingModelData> >::_Emplace_reallocate<CGrannyLODController::SAttachingModelData const &>
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCGraphicVertexBuffer@@@?$vector@PAVCGraphicVertexBuffer@@V?$allocator@PAVCGraphicVertexBuffer@@@std@@@std@@AAEPAPAVCGraphicVertexBuffer@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
__Newsize$1$ = -12					; size = 4
tv607 = -8						; size = 4
tv590 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCGraphicVertexBuffer@@@?$vector@PAVCGraphicVertexBuffer@@V?$allocator@PAVCGraphicVertexBuffer@@@std@@@std@@AAEPAPAVCGraphicVertexBuffer@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CGraphicVertexBuffer *,std::allocator<CGraphicVertexBuffer *> >::_Emplace_reallocate<CGraphicVertexBuffer * const &>, COMDAT
; _this$ = ecx

; 812  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 813  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 814  :         _Alty& _Al        = _Getal();
; 815  :         auto& _My_data    = _Mypair._Myval2;
; 816  :         pointer& _Myfirst = _My_data._Myfirst;
; 817  :         pointer& _Mylast  = _My_data._Mylast;
; 818  : 
; 819  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 820  : 
; 821  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	2b d9		 sub	 ebx, ecx

; 822  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c1		 sub	 eax, ecx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 823  : 
; 824  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 0f 01 00
	00		 je	 $LN96@Emplace_re

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 826  :         }
; 827  : 
; 828  :         const size_type _Newsize     = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b d1		 sub	 edx, ecx

; 826  :         }
; 827  : 
; 828  :         const size_type _Newsize     = _Oldsize + 1;

  00030	89 7d f4	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 fa 02	 sar	 edx, 2

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b ca		 mov	 ecx, edx
  0003d	d1 e9		 shr	 ecx, 1
  0003f	2b c1		 sub	 eax, ecx
  00041	3b d0		 cmp	 edx, eax
  00043	76 15		 jbe	 SHORT $LN12@Emplace_re

; 1967 :             return _Max; // geometric growth would overflow

  00045	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004a	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1967 :             return _Max; // geometric growth would overflow

  0004b	89 45 f8	 mov	 DWORD PTR tv607[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00053	83 c4 04	 add	 esp, 4
  00056	8b f8		 mov	 edi, eax
  00058	eb 47		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1970 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005a	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 70   :         if (_Count > _Max_possible) {

  0005d	8b cf		 mov	 ecx, edi
  0005f	3b c7		 cmp	 eax, edi
  00061	0f 43 c8	 cmovae	 ecx, eax
  00064	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  0006a	0f 87 cc 00 00
	00		 ja	 $LN97@Emplace_re

; 72   :         }
; 73   :     }
; 74   : 
; 75   :     return _Count * _Ty_size;

  00070	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  00077	89 45 f8	 mov	 DWORD PTR tv607[ebp], eax

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0007a	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0007f	72 0d		 jb	 SHORT $LN24@Emplace_re

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00087	83 c4 04	 add	 esp, 4
  0008a	8b f8		 mov	 edi, eax
  0008c	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  0008e	85 c0		 test	 eax, eax
  00090	74 0d		 je	 SHORT $LN25@Emplace_re

; 87   :         return ::operator new(_Bytes);

  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00098	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  0009b	8b f8		 mov	 edi, eax
  0009d	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  0009f	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 836  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000a1	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000a4	8d 0c 9f	 lea	 ecx, DWORD PTR [edi+ebx*4]

; 837  :         _Constructed_first = _Newvec + _Whereoff;
; 838  : 
; 839  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000a7	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  000aa	89 4d fc	 mov	 DWORD PTR tv590[ebp], ecx
  000ad	8b 00		 mov	 eax, DWORD PTR [eax]
  000af	89 01		 mov	 DWORD PTR [ecx], eax
  000b1	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000b4	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000b6	3b d8		 cmp	 ebx, eax
  000b8	75 07		 jne	 SHORT $LN4@Emplace_re

; 845  :         } else { // provide basic guarantee

  000ba	8b 5d fc	 mov	 ebx, DWORD PTR tv590[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000bd	8b d7		 mov	 edx, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 845  :         } else { // provide basic guarantee

  000bf	eb 16		 jmp	 SHORT $LN52@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000c1	57		 push	 edi
  000c2	53		 push	 ebx
  000c3	51		 push	 ecx
  000c4	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCGraphicVertexBuffer@@PAPAV1@@std@@YAPAPAVCGraphicVertexBuffer@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicVertexBuffer * *,CGraphicVertexBuffer * *>
  000c9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000cc	8b cb		 mov	 ecx, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000ce	8b 5d fc	 mov	 ebx, DWORD PTR tv590[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000d1	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000d4	8d 53 04	 lea	 edx, DWORD PTR [ebx+4]
$LN52@Emplace_re:
  000d7	52		 push	 edx
  000d8	50		 push	 eax
  000d9	51		 push	 ecx
  000da	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCGraphicVertexBuffer@@PAPAV1@@std@@YAPAPAVCGraphicVertexBuffer@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicVertexBuffer * *,CGraphicVertexBuffer * *>

; 2023 :         if (_Myfirst) { // destroy and deallocate old array

  000df	8b 06		 mov	 eax, DWORD PTR [esi]

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000e1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2023 :         if (_Myfirst) { // destroy and deallocate old array

  000e4	85 c0		 test	 eax, eax
  000e6	74 2c		 je	 SHORT $LN70@Emplace_re

; 2024 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2025 :             _ASAN_VECTOR_REMOVE;
; 2026 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e8	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000eb	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ed	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000f0	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f6	72 12		 jb	 SHORT $LN80@Emplace_re

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f8	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000fb	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000fe	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00100	83 c0 fc	 add	 eax, -4			; fffffffcH
  00103	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00106	77 2a		 ja	 SHORT $LN77@Emplace_re

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00108	8b c2		 mov	 eax, edx
$LN80@Emplace_re:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0010a	51		 push	 ecx
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00111	83 c4 08	 add	 esp, 8
$LN70@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2030 :         _Mylast  = _Newvec + _Newsize;

  00114	8b 45 f4	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  00117	89 3e		 mov	 DWORD PTR [esi], edi
  00119	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]

; 849  :         }
; 850  :         _CATCH_ALL
; 851  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 852  :         _Al.deallocate(_Newvec, _Newcapacity);
; 853  :         _RERAISE;
; 854  :         _CATCH_END
; 855  : 
; 856  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 857  :         return _Newvec + _Whereoff;

  0011c	8b c3		 mov	 eax, ebx

; 2030 :         _Mylast  = _Newvec + _Newsize;

  0011e	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 2031 :         _Myend   = _Newvec + _Newcapacity;

  00121	8b 4d f8	 mov	 ecx, DWORD PTR tv607[ebp]
  00124	03 cf		 add	 ecx, edi

; 858  :     }

  00126	5f		 pop	 edi

; 2031 :         _Myend   = _Newvec + _Newcapacity;

  00127	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 858  :     }

  0012a	5e		 pop	 esi
  0012b	5b		 pop	 ebx
  0012c	8b e5		 mov	 esp, ebp
  0012e	5d		 pop	 ebp
  0012f	c2 08 00	 ret	 8
$LN77@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00132	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN96@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 825  :             _Xlength();

  00137	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCGraphicVertexBuffer@@V?$allocator@PAVCGraphicVertexBuffer@@@std@@@std@@CAXXZ ; std::vector<CGraphicVertexBuffer *,std::allocator<CGraphicVertexBuffer *> >::_Xlength
$LN97@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 71   :             _Throw_bad_array_new_length(); // multiply overflow

  0013c	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN94@Emplace_re:
  00141	cc		 int	 3
??$_Emplace_reallocate@ABQAVCGraphicVertexBuffer@@@?$vector@PAVCGraphicVertexBuffer@@V?$allocator@PAVCGraphicVertexBuffer@@@std@@@std@@AAEPAPAVCGraphicVertexBuffer@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CGraphicVertexBuffer *,std::allocator<CGraphicVertexBuffer *> >::_Emplace_reallocate<CGraphicVertexBuffer * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@YAXPAUSAttachingModelData@CGrannyLODController@@QAU12@AAV?$allocator@USAttachingModelData@CGrannyLODController@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@YAXPAUSAttachingModelData@CGrannyLODController@@QAU12@AAV?$allocator@USAttachingModelData@CGrannyLODController@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CGrannyLODController::SAttachingModelData> >, COMDAT

; 1082 : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1086 :         for (; _First != _Last; ++_First) {

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 4d		 je	 SHORT $LN50@Destroy_ra
  0000f	83 c6 18	 add	 esi, 24			; 00000018H
$LL4@Destroy_ra:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00012	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00014	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  00017	72 28		 jb	 SHORT $LN49@Destroy_ra
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00019	8b 46 ec	 mov	 eax, DWORD PTR [esi-20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0001c	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0001d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00023	72 12		 jb	 SHORT $LN36@Destroy_ra

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00025	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00028	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0002b	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0002d	83 c0 fc	 add	 eax, -4			; fffffffcH
  00030	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00033	77 2b		 ja	 SHORT $LN33@Destroy_ra

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00035	8b c2		 mov	 eax, edx
$LN36@Destroy_ra:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00037	51		 push	 ecx
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003e	83 c4 08	 add	 esp, 8
$LN49@Destroy_ra:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  00041	c7 46 fc 00 00
	00 00		 mov	 DWORD PTR [esi-4], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  00048	c7 06 0f 00 00
	00		 mov	 DWORD PTR [esi], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0004e	c6 46 ec 00	 mov	 BYTE PTR [esi-20], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1086 :         for (; _First != _Last; ++_First) {

  00052	83 c6 1c	 add	 esi, 28			; 0000001cH
  00055	8d 46 e8	 lea	 eax, DWORD PTR [esi-24]
  00058	3b c7		 cmp	 eax, edi
  0005a	75 b6		 jne	 SHORT $LL4@Destroy_ra
$LN50@Destroy_ra:
  0005c	5f		 pop	 edi

; 1087 :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 1088 :         }
; 1089 :     }
; 1090 : }

  0005d	5e		 pop	 esi
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
$LN33@Destroy_ra:

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00060	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN55@Destroy_ra:
  00065	cc		 int	 3
??$_Destroy_range@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@YAXPAUSAttachingModelData@CGrannyLODController@@QAU12@AAV?$allocator@USAttachingModelData@CGrannyLODController@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CGrannyLODController::SAttachingModelData> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
;	COMDAT ?GrannyDestroySharedDeformBuffer@@YAXXZ
_TEXT	SEGMENT
?GrannyDestroySharedDeformBuffer@@YAXXZ PROC		; GrannyDestroySharedDeformBuffer, COMDAT

; 121  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi

; 125  : 	for (int i = 0; i != SHARED_VB_NUM; ++i)

  00003	bb 00 00 00 00	 mov	 ebx, OFFSET ?gs_vbs@@3PAV?$vector@PAVCGraphicVertexBuffer@@V?$allocator@PAVCGraphicVertexBuffer@@@std@@@std@@A
$LL4@GrannyDest:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00008	8b 33		 mov	 esi, DWORD PTR [ebx]
  0000a	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0000d	3b f0		 cmp	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 133  : 		for (v = vbs.begin(); v != vbs.end(); ++v)

  0000f	74 1f		 je	 SHORT $LN6@GrannyDest
$LL24@GrannyDest:

; 134  : 		{
; 135  : 			CGraphicVertexBuffer* pkEachVB = (*v);

  00011	8b 3e		 mov	 edi, DWORD PTR [esi]

; 136  : 			pkEachVB->Destroy();

  00013	8b cf		 mov	 ecx, edi
  00015	e8 00 00 00 00	 call	 ?Destroy@CGraphicVertexBuffer@@QAEXXZ ; CGraphicVertexBuffer::Destroy

; 137  : 			delete pkEachVB;

  0001a	85 ff		 test	 edi, edi
  0001c	74 08		 je	 SHORT $LN5@GrannyDest
  0001e	8b 07		 mov	 eax, DWORD PTR [edi]
  00020	8b cf		 mov	 ecx, edi
  00022	6a 01		 push	 1
  00024	ff 10		 call	 DWORD PTR [eax]
$LN5@GrannyDest:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00026	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]

; 79   :         ++_Ptr;

  00029	83 c6 04	 add	 esi, 4

; 163  :         return _Ptr == _Right._Ptr;

  0002c	3b f0		 cmp	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 133  : 		for (v = vbs.begin(); v != vbs.end(); ++v)

  0002e	75 e1		 jne	 SHORT $LL24@GrannyDest
$LN6@GrannyDest:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00030	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00032	3b c8		 cmp	 ecx, eax
  00034	74 03		 je	 SHORT $LN2@GrannyDest

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  00036	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx
$LN2@GrannyDest:
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 125  : 	for (int i = 0; i != SHARED_VB_NUM; ++i)

  00039	83 c3 0c	 add	 ebx, 12			; 0000000cH
  0003c	81 fb 6c 00 00
	00		 cmp	 ebx, OFFSET ?gs_vbs@@3PAV?$vector@PAVCGraphicVertexBuffer@@V?$allocator@PAVCGraphicVertexBuffer@@@std@@@std@@A+108
  00042	75 c4		 jne	 SHORT $LL4@GrannyDest
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx

; 138  : 		}
; 139  : 		vbs.clear();
; 140  : 	}
; 141  : 
; 142  : }

  00047	c3		 ret	 0
?GrannyDestroySharedDeformBuffer@@YAXXZ ENDP		; GrannyDestroySharedDeformBuffer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
;	COMDAT ?GrannyCreateSharedDeformBuffer@@YAXXZ
_TEXT	SEGMENT
?GrannyCreateSharedDeformBuffer@@YAXXZ PROC		; GrannyCreateSharedDeformBuffer, COMDAT

; 113  : 	__ReserveSharedVertexBuffers(SHARED_VB_500, 40);

  00000	6a 28		 push	 40			; 00000028H
  00002	6a 00		 push	 0
  00004	e8 00 00 00 00	 call	 ?__ReserveSharedVertexBuffers@@YAXII@Z ; __ReserveSharedVertexBuffers

; 114  : 	__ReserveSharedVertexBuffers(SHARED_VB_1000, 20);

  00009	6a 14		 push	 20			; 00000014H
  0000b	6a 01		 push	 1
  0000d	e8 00 00 00 00	 call	 ?__ReserveSharedVertexBuffers@@YAXII@Z ; __ReserveSharedVertexBuffers

; 115  : 	__ReserveSharedVertexBuffers(SHARED_VB_1500, 20);

  00012	6a 14		 push	 20			; 00000014H
  00014	6a 02		 push	 2
  00016	e8 00 00 00 00	 call	 ?__ReserveSharedVertexBuffers@@YAXII@Z ; __ReserveSharedVertexBuffers

; 116  : 	__ReserveSharedVertexBuffers(SHARED_VB_2000, 40);

  0001b	6a 28		 push	 40			; 00000028H
  0001d	6a 03		 push	 3
  0001f	e8 00 00 00 00	 call	 ?__ReserveSharedVertexBuffers@@YAXII@Z ; __ReserveSharedVertexBuffers

; 117  : 	__ReserveSharedVertexBuffers(SHARED_VB_3000, 20);

  00024	6a 14		 push	 20			; 00000014H
  00026	6a 05		 push	 5
  00028	e8 00 00 00 00	 call	 ?__ReserveSharedVertexBuffers@@YAXII@Z ; __ReserveSharedVertexBuffers
  0002d	83 c4 28	 add	 esp, 40			; 00000028H

; 118  : }

  00030	c3		 ret	 0
?GrannyCreateSharedDeformBuffer@@YAXXZ ENDP		; GrannyCreateSharedDeformBuffer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
;	COMDAT ?__ReserveSharedVertexBuffers@@YAXII@Z
_TEXT	SEGMENT
$T2 = -20						; size = 4
_pkNewVB$3 = -16					; size = 4
__$EHRec$ = -12						; size = 12
_capacity$1$ = 8					; size = 4
_index$ = 8						; size = 4
_count$ = 12						; size = 4
?__ReserveSharedVertexBuffers@@YAXII@Z PROC		; __ReserveSharedVertexBuffers, COMDAT

; 93   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?__ReserveSharedVertexBuffers@@YAXII@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 94   : 	if (index >= SHARED_VB_NUM)

  00028	8b 4d 08	 mov	 ecx, DWORD PTR _index$[ebp]
  0002b	83 f9 09	 cmp	 ecx, 9
  0002e	0f 83 80 00 00
	00		 jae	 $LN3@ReserveSha

; 99   : 	for (unsigned i = 0; i != count; ++i)

  00034	8b 5d 0c	 mov	 ebx, DWORD PTR _count$[ebp]
  00037	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0003a	69 c0 f4 01 00
	00		 imul	 eax, eax, 500
  00040	89 45 08	 mov	 DWORD PTR _capacity$1$[ebp], eax
  00043	85 db		 test	 ebx, ebx
  00045	74 6d		 je	 SHORT $LN3@ReserveSha
  00047	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
  0004a	8d 3c 85 00 00
	00 00		 lea	 edi, DWORD PTR ?gs_vbs@@3PAV?$vector@PAVCGraphicVertexBuffer@@V?$allocator@PAVCGraphicVertexBuffer@@@std@@@std@@A[eax*4]
$LL4@ReserveSha:

; 100  : 	{
; 101  : 		CGraphicVertexBuffer* pkNewVB = new CGraphicVertexBuffer;

  00051	6a 20		 push	 32			; 00000020H
  00053	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00058	83 c4 04	 add	 esp, 4
  0005b	89 45 ec	 mov	 DWORD PTR $T2[ebp], eax
  0005e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00065	85 c0		 test	 eax, eax
  00067	74 0b		 je	 SHORT $LN7@ReserveSha
  00069	8b c8		 mov	 ecx, eax
  0006b	e8 00 00 00 00	 call	 ??0CGraphicVertexBuffer@@QAE@XZ ; CGraphicVertexBuffer::CGraphicVertexBuffer
  00070	8b f0		 mov	 esi, eax
  00072	eb 02		 jmp	 SHORT $LN8@ReserveSha
$LN7@ReserveSha:
  00074	33 f6		 xor	 esi, esi
$LN8@ReserveSha:

; 102  : 		pkNewVB->Create(

  00076	8b 06		 mov	 eax, DWORD PTR [esi]
  00078	8b ce		 mov	 ecx, esi
  0007a	6a 01		 push	 1
  0007c	6a 08		 push	 8
  0007e	68 12 01 00 00	 push	 274			; 00000112H
  00083	ff 75 08	 push	 DWORD PTR _capacity$1$[ebp]
  00086	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0008d	89 75 f0	 mov	 DWORD PTR _pkNewVB$3[ebp], esi
  00090	ff 50 04	 call	 DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  00093	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00096	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  00099	74 08		 je	 SHORT $LN13@ReserveSha

; 797  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  0009b	89 30		 mov	 DWORD PTR [eax], esi

; 798  :         } else {
; 799  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 800  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 801  :             _ASAN_VECTOR_RELEASE_GUARD;
; 802  :         }
; 803  : 
; 804  :         _Orphan_range(_Mylast, _Mylast);
; 805  :         _Ty& _Result = *_Mylast;
; 806  :         ++_Mylast;

  0009d	83 47 04 04	 add	 DWORD PTR [edi+4], 4

; 782  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  000a1	eb 0c		 jmp	 SHORT $LN2@ReserveSha
$LN13@ReserveSha:

; 783  :         }
; 784  : 
; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  000a3	8d 4d f0	 lea	 ecx, DWORD PTR _pkNewVB$3[ebp]
  000a6	51		 push	 ecx
  000a7	50		 push	 eax
  000a8	8b cf		 mov	 ecx, edi
  000aa	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCGraphicVertexBuffer@@@?$vector@PAVCGraphicVertexBuffer@@V?$allocator@PAVCGraphicVertexBuffer@@@std@@@std@@AAEPAPAVCGraphicVertexBuffer@@QAPAV2@ABQAV2@@Z ; std::vector<CGraphicVertexBuffer *,std::allocator<CGraphicVertexBuffer *> >::_Emplace_reallocate<CGraphicVertexBuffer * const &>
$LN2@ReserveSha:
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 99   : 	for (unsigned i = 0; i != count; ++i)

  000af	83 eb 01	 sub	 ebx, 1
  000b2	75 9d		 jne	 SHORT $LL4@ReserveSha
$LN3@ReserveSha:

; 103  : 			capacity,
; 104  : 			D3DFVF_XYZ|D3DFVF_NORMAL|D3DFVF_TEX1,
; 105  : 			D3DUSAGE_WRITEONLY,
; 106  : 			D3DPOOL_MANAGED);
; 107  : 		gs_vbs[index].push_back(pkNewVB);
; 108  : 	}
; 109  : }

  000b4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000be	59		 pop	 ecx
  000bf	5f		 pop	 edi
  000c0	5e		 pop	 esi
  000c1	5b		 pop	 ebx
  000c2	8b e5		 mov	 esp, ebp
  000c4	5d		 pop	 ebp
  000c5	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?__ReserveSharedVertexBuffers@@YAXII@Z$0:
  00000	6a 20		 push	 32			; 00000020H
  00002	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
  0000f	cc		 int	 3
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
__ehhandler$?__ReserveSharedVertexBuffers@@YAXII@Z:
  00014	90		 npad	 1
  00015	90		 npad	 1
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?__ReserveSharedVertexBuffers@@YAXII@Z
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?__ReserveSharedVertexBuffers@@YAXII@Z ENDP		; __ReserveSharedVertexBuffers
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
;	COMDAT ?__FreeDeformVertexBuffer@@YAXPAVCGraphicVertexBuffer@@@Z
_TEXT	SEGMENT
_pkDelVB$ = 8						; size = 4
?__FreeDeformVertexBuffer@@YAXPAVCGraphicVertexBuffer@@@Z PROC ; __FreeDeformVertexBuffer, COMDAT

; 73   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 74   : 	if (pkDelVB)

  00004	8b 75 08	 mov	 esi, DWORD PTR _pkDelVB$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 5f		 je	 SHORT $LN7@FreeDeform

; 75   : 	{
; 76   : 		if (pkDelVB == &gs_emptyVB)

  0000b	81 fe 00 00 00
	00		 cmp	 esi, OFFSET ?gs_emptyVB@@3VCGraphicVertexBuffer@@A
  00011	74 57		 je	 SHORT $LN7@FreeDeform

; 77   : 			return;
; 78   : 
; 79   : 		unsigned index = (pkDelVB->GetVertexCount() - 1) / 500;

  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ?GetVertexCount@CGraphicVertexBuffer@@QBEHXZ ; CGraphicVertexBuffer::GetVertexCount
  0001a	8d 48 ff	 lea	 ecx, DWORD PTR [eax-1]
  0001d	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  00022	f7 e9		 imul	 ecx
  00024	c1 fa 05	 sar	 edx, 5
  00027	8b c2		 mov	 eax, edx
  00029	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0002c	03 c2		 add	 eax, edx

; 80   : 		if (index < SHARED_VB_NUM)

  0002e	83 f8 09	 cmp	 eax, 9
  00031	73 28		 jae	 SHORT $LN4@FreeDeform

; 81   : 		{
; 82   : 			gs_vbs[index].push_back(pkDelVB);

  00033	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00036	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR ?gs_vbs@@3PAV?$vector@PAVCGraphicVertexBuffer@@V?$allocator@PAVCGraphicVertexBuffer@@@std@@@std@@A[eax*4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  0003d	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00040	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00043	74 09		 je	 SHORT $LN12@FreeDeform

; 797  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00045	89 30		 mov	 DWORD PTR [eax], esi

; 798  :         } else {
; 799  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 800  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 801  :             _ASAN_VECTOR_RELEASE_GUARD;
; 802  :         }
; 803  : 
; 804  :         _Orphan_range(_Mylast, _Mylast);
; 805  :         _Ty& _Result = *_Mylast;
; 806  :         ++_Mylast;

  00047	83 41 04 04	 add	 DWORD PTR [ecx+4], 4
  0004b	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 90   : }

  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
$LN12@FreeDeform:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0004e	8d 55 08	 lea	 edx, DWORD PTR _pkDelVB$[ebp]
  00051	52		 push	 edx
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCGraphicVertexBuffer@@@?$vector@PAVCGraphicVertexBuffer@@V?$allocator@PAVCGraphicVertexBuffer@@@std@@@std@@AAEPAPAVCGraphicVertexBuffer@@QAPAV2@ABQAV2@@Z ; std::vector<CGraphicVertexBuffer *,std::allocator<CGraphicVertexBuffer *> >::_Emplace_reallocate<CGraphicVertexBuffer * const &>
  00058	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 90   : }

  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
$LN4@FreeDeform:

; 83   : 		}
; 84   : 		else
; 85   : 		{
; 86   : 			pkDelVB->Destroy();

  0005b	8b ce		 mov	 ecx, esi
  0005d	e8 00 00 00 00	 call	 ?Destroy@CGraphicVertexBuffer@@QAEXXZ ; CGraphicVertexBuffer::Destroy

; 87   : 			delete pkDelVB;

  00062	8b 06		 mov	 eax, DWORD PTR [esi]
  00064	8b ce		 mov	 ecx, esi
  00066	6a 01		 push	 1
  00068	ff 10		 call	 DWORD PTR [eax]
$LN7@FreeDeform:
  0006a	5e		 pop	 esi

; 90   : }

  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
?__FreeDeformVertexBuffer@@YAXPAVCGraphicVertexBuffer@@@Z ENDP ; __FreeDeformVertexBuffer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\time.h
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\time.h
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
;	COMDAT ?__AllocDeformVertexBuffer@@YAPAVCGraphicVertexBuffer@@I@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
$T2 = 8							; size = 4
_deformableVertexCount$ = 8				; size = 4
?__AllocDeformVertexBuffer@@YAPAVCGraphicVertexBuffer@@I@Z PROC ; __AllocDeformVertexBuffer, COMDAT

; 35   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?__AllocDeformVertexBuffer@@YAPAVCGraphicVertexBuffer@@I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 36   : 	if (deformableVertexCount == 0)

  00025	8b 7d 08	 mov	 edi, DWORD PTR _deformableVertexCount$[ebp]
  00028	85 ff		 test	 edi, edi
  0002a	75 17		 jne	 SHORT $LN3@AllocDefor

; 37   : 		return &gs_emptyVB;

  0002c	b8 00 00 00 00	 mov	 eax, OFFSET ?gs_emptyVB@@3VCGraphicVertexBuffer@@A

; 70   : }

  00031	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00034	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0003b	59		 pop	 ecx
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
$LN3@AllocDefor:

; 38   : 
; 39   : 	unsigned capacity	= (((deformableVertexCount-1) / 500) + 1) * 500;

  00043	8d 4f ff	 lea	 ecx, DWORD PTR [edi-1]
  00046	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  0004b	f7 e1		 mul	 ecx
  0004d	c1 ea 05	 shr	 edx, 5
  00050	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00053	69 d8 f4 01 00
	00		 imul	 ebx, eax, 500

; 40   : 	unsigned index		= (deformableVertexCount-1) / 500;
; 41   : 	if (index < SHARED_VB_NUM)

  00059	83 fa 09	 cmp	 edx, 9
  0005c	73 32		 jae	 SHORT $LN5@AllocDefor

; 42   : 	{
; 43   : 		std::vector<CGraphicVertexBuffer*>& vbs = gs_vbs[index];

  0005e	8d 14 52	 lea	 edx, DWORD PTR [edx+edx*2]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1864 :         return _My_data._Myfirst == _My_data._Mylast;

  00061	8b 0c 95 04 00
	00 00		 mov	 ecx, DWORD PTR ?gs_vbs@@3PAV?$vector@PAVCGraphicVertexBuffer@@V?$allocator@PAVCGraphicVertexBuffer@@@std@@@std@@A[edx*4+4]
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 44   : 		if (!vbs.empty())

  00068	39 0c 95 00 00
	00 00		 cmp	 DWORD PTR ?gs_vbs@@3PAV?$vector@PAVCGraphicVertexBuffer@@V?$allocator@PAVCGraphicVertexBuffer@@@std@@@std@@A[edx*4], ecx
  0006f	74 1f		 je	 SHORT $LN5@AllocDefor

; 45   : 		{
; 46   : 			//TraceError("REUSE %d(%d)", capacity, deformableVertexCount);
; 47   : 
; 48   : 			CGraphicVertexBuffer* pkRetVB = vbs.back();

  00071	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1944 :         return _My_data._Mylast[-1];

  00074	83 c1 fc	 add	 ecx, -4			; fffffffcH

; 1713 :         --_Mylast;

  00077	89 0c 95 04 00
	00 00		 mov	 DWORD PTR ?gs_vbs@@3PAV?$vector@PAVCGraphicVertexBuffer@@V?$allocator@PAVCGraphicVertexBuffer@@@std@@@std@@A[edx*4+4], ecx
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 70   : }

  0007e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00081	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00088	59		 pop	 ecx
  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c3		 ret	 0
$LN5@AllocDefor:

; 55   : 	static time_t base = time(NULL);

  00090	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  00096	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __tls_index
  0009c	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  0009f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??__AllocDeformVertexBuffer@@YAPAVCGraphicVertexBuffer@@I@Z@4HA
  000a4	3b 81 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[ecx]
  000aa	7f 7b		 jg	 SHORT $LN23@AllocDefor
$LN2@AllocDefor:

; 56   : 	//TraceError("NEW %8d: %d(%d)", time(NULL) - base, capacity, deformableVertexCount);
; 57   : 
; 58   : 	CGraphicVertexBuffer* pkNewVB = new CGraphicVertexBuffer;

  000ac	6a 20		 push	 32			; 00000020H
  000ae	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000b3	83 c4 04	 add	 esp, 4
  000b6	89 45 08	 mov	 DWORD PTR $T2[ebp], eax
  000b9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000c0	85 c0		 test	 eax, eax
  000c2	74 0b		 je	 SHORT $LN8@AllocDefor
  000c4	8b c8		 mov	 ecx, eax
  000c6	e8 00 00 00 00	 call	 ??0CGraphicVertexBuffer@@QAE@XZ ; CGraphicVertexBuffer::CGraphicVertexBuffer
  000cb	8b f0		 mov	 esi, eax
  000cd	eb 02		 jmp	 SHORT $LN9@AllocDefor
$LN8@AllocDefor:
  000cf	33 f6		 xor	 esi, esi
$LN9@AllocDefor:

; 59   : 
; 60   : 	if (!pkNewVB->Create(

  000d1	8b 06		 mov	 eax, DWORD PTR [esi]
  000d3	8b ce		 mov	 ecx, esi
  000d5	6a 01		 push	 1
  000d7	6a 08		 push	 8
  000d9	68 12 01 00 00	 push	 274			; 00000112H
  000de	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000e1	53		 push	 ebx
  000e2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000e9	ff d0		 call	 eax
  000eb	84 c0		 test	 al, al
  000ed	75 24		 jne	 SHORT $LN6@AllocDefor
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\time.h

; 552  :             return _time64(_Time);

  000ef	6a 00		 push	 0
  000f1	e8 00 00 00 00	 call	 __time64
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 66   : 		TraceError("NEW_ERROR %8d: %d(%d)", time(NULL) - base, capacity, deformableVertexCount);

  000f6	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?base@?1??__AllocDeformVertexBuffer@@YAPAVCGraphicVertexBuffer@@I@Z@4_JA
  000fc	57		 push	 edi
  000fd	1b 15 04 00 00
	00		 sbb	 edx, DWORD PTR ?base@?1??__AllocDeformVertexBuffer@@YAPAVCGraphicVertexBuffer@@I@Z@4_JA+4
  00103	53		 push	 ebx
  00104	52		 push	 edx
  00105	50		 push	 eax
  00106	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@IJPBENCD@NEW_ERROR?5?$CF8d?3?5?$CFd?$CI?$CFd?$CJ@
  0010b	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00110	83 c4 18	 add	 esp, 24			; 00000018H
$LN6@AllocDefor:

; 67   : 	}
; 68   : 
; 69   : 	return pkNewVB;

  00113	8b c6		 mov	 eax, esi

; 70   : }

  00115	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00118	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0011f	59		 pop	 ecx
  00120	5f		 pop	 edi
  00121	5e		 pop	 esi
  00122	5b		 pop	 ebx
  00123	8b e5		 mov	 esp, ebp
  00125	5d		 pop	 ebp
  00126	c3		 ret	 0
$LN23@AllocDefor:

; 55   : 	static time_t base = time(NULL);

  00127	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??__AllocDeformVertexBuffer@@YAPAVCGraphicVertexBuffer@@I@Z@4HA
  0012c	e8 00 00 00 00	 call	 __Init_thread_header
  00131	83 c4 04	 add	 esp, 4
  00134	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??__AllocDeformVertexBuffer@@YAPAVCGraphicVertexBuffer@@I@Z@4HA, -1
  0013b	0f 85 6b ff ff
	ff		 jne	 $LN2@AllocDefor
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\time.h

; 552  :             return _time64(_Time);

  00141	6a 00		 push	 0
  00143	e8 00 00 00 00	 call	 __time64
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 55   : 	static time_t base = time(NULL);

  00148	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??__AllocDeformVertexBuffer@@YAPAVCGraphicVertexBuffer@@I@Z@4HA
  0014d	a3 00 00 00 00	 mov	 DWORD PTR ?base@?1??__AllocDeformVertexBuffer@@YAPAVCGraphicVertexBuffer@@I@Z@4_JA, eax
  00152	89 15 04 00 00
	00		 mov	 DWORD PTR ?base@?1??__AllocDeformVertexBuffer@@YAPAVCGraphicVertexBuffer@@I@Z@4_JA+4, edx
  00158	e8 00 00 00 00	 call	 __Init_thread_footer
  0015d	83 c4 08	 add	 esp, 8
  00160	e9 47 ff ff ff	 jmp	 $LN2@AllocDefor
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?__AllocDeformVertexBuffer@@YAPAVCGraphicVertexBuffer@@I@Z$0:
  00000	6a 20		 push	 32			; 00000020H
  00002	8b 45 08	 mov	 eax, DWORD PTR $T2[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
  0000f	cc		 int	 3
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
__ehhandler$?__AllocDeformVertexBuffer@@YAPAVCGraphicVertexBuffer@@I@Z:
  00014	90		 npad	 1
  00015	90		 npad	 1
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?__AllocDeformVertexBuffer@@YAPAVCGraphicVertexBuffer@@I@Z
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?__AllocDeformVertexBuffer@@YAPAVCGraphicVertexBuffer@@I@Z ENDP ; __AllocDeformVertexBuffer
; Function compile flags: /Ogtp
;	COMDAT ??__Fgs_emptyVB@@YAXXZ
text$yd	SEGMENT
??__Fgs_emptyVB@@YAXXZ PROC				; `dynamic atexit destructor for 'gs_emptyVB'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?gs_emptyVB@@3VCGraphicVertexBuffer@@A
  00005	e9 00 00 00 00	 jmp	 ??1CGraphicVertexBuffer@@UAE@XZ ; CGraphicVertexBuffer::~CGraphicVertexBuffer
??__Fgs_emptyVB@@YAXXZ ENDP				; `dynamic atexit destructor for 'gs_emptyVB''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
;	COMDAT ??__Egs_emptyVB@@YAXXZ
text$di	SEGMENT
??__Egs_emptyVB@@YAXXZ PROC				; `dynamic initializer for 'gs_emptyVB'', COMDAT

; 30   : static CGraphicVertexBuffer gs_emptyVB;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?gs_emptyVB@@3VCGraphicVertexBuffer@@A
  00005	e8 00 00 00 00	 call	 ??0CGraphicVertexBuffer@@QAE@XZ ; CGraphicVertexBuffer::CGraphicVertexBuffer
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fgs_emptyVB@@YAXXZ ; `dynamic atexit destructor for 'gs_emptyVB''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Egs_emptyVB@@YAXXZ ENDP				; `dynamic initializer for 'gs_emptyVB''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fgs_vbs@@YAXXZ
text$yd	SEGMENT
??__Fgs_vbs@@YAXXZ PROC					; `dynamic atexit destructor for 'gs_vbs'', COMDAT
  00000	68 00 00 00 00	 push	 OFFSET ??1?$vector@PAVCGraphicVertexBuffer@@V?$allocator@PAVCGraphicVertexBuffer@@@std@@@std@@QAE@XZ ; std::vector<CGraphicVertexBuffer *,std::allocator<CGraphicVertexBuffer *> >::~vector<CGraphicVertexBuffer *,std::allocator<CGraphicVertexBuffer *> >
  00005	6a 09		 push	 9
  00007	6a 0c		 push	 12			; 0000000cH
  00009	68 00 00 00 00	 push	 OFFSET ?gs_vbs@@3PAV?$vector@PAVCGraphicVertexBuffer@@V?$allocator@PAVCGraphicVertexBuffer@@@std@@@std@@A
  0000e	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00013	c3		 ret	 0
??__Fgs_vbs@@YAXXZ ENDP					; `dynamic atexit destructor for 'gs_vbs''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
;	COMDAT ??__Egs_vbs@@YAXXZ
text$di	SEGMENT
??__Egs_vbs@@YAXXZ PROC					; `dynamic initializer for 'gs_vbs'', COMDAT

; 28   : static std::vector<CGraphicVertexBuffer*> gs_vbs[SHARED_VB_NUM];

  00000	68 00 00 00 00	 push	 OFFSET ??1?$vector@PAVCGraphicVertexBuffer@@V?$allocator@PAVCGraphicVertexBuffer@@@std@@@std@@QAE@XZ ; std::vector<CGraphicVertexBuffer *,std::allocator<CGraphicVertexBuffer *> >::~vector<CGraphicVertexBuffer *,std::allocator<CGraphicVertexBuffer *> >
  00005	68 00 00 00 00	 push	 OFFSET ??0?$vector@PAVCGraphicVertexBuffer@@V?$allocator@PAVCGraphicVertexBuffer@@@std@@@std@@QAE@XZ ; std::vector<CGraphicVertexBuffer *,std::allocator<CGraphicVertexBuffer *> >::vector<CGraphicVertexBuffer *,std::allocator<CGraphicVertexBuffer *> >
  0000a	6a 09		 push	 9
  0000c	6a 0c		 push	 12			; 0000000cH
  0000e	68 00 00 00 00	 push	 OFFSET ?gs_vbs@@3PAV?$vector@PAVCGraphicVertexBuffer@@V?$allocator@PAVCGraphicVertexBuffer@@@std@@@std@@A
  00013	e8 00 00 00 00	 call	 ??_L@YGXPAXIIP6EX0@Z1@Z
  00018	68 00 00 00 00	 push	 OFFSET ??__Fgs_vbs@@YAXXZ ; `dynamic atexit destructor for 'gs_vbs''
  0001d	e8 00 00 00 00	 call	 _atexit
  00022	59		 pop	 ecx
  00023	c3		 ret	 0
??__Egs_vbs@@YAXXZ ENDP					; `dynamic initializer for 'gs_vbs''
text$di	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCGraphicVertexBuffer@@V?$allocator@PAVCGraphicVertexBuffer@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCGraphicVertexBuffer@@V?$allocator@PAVCGraphicVertexBuffer@@@std@@@std@@CAXXZ PROC ; std::vector<CGraphicVertexBuffer *,std::allocator<CGraphicVertexBuffer *> >::_Xlength, COMDAT

; 2138 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCGraphicVertexBuffer@@V?$allocator@PAVCGraphicVertexBuffer@@@std@@@std@@CAXXZ ENDP ; std::vector<CGraphicVertexBuffer *,std::allocator<CGraphicVertexBuffer *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??1?$vector@PAVCGraphicVertexBuffer@@V?$allocator@PAVCGraphicVertexBuffer@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAVCGraphicVertexBuffer@@V?$allocator@PAVCGraphicVertexBuffer@@@std@@@std@@QAE@XZ PROC ; std::vector<CGraphicVertexBuffer *,std::allocator<CGraphicVertexBuffer *> >::~vector<CGraphicVertexBuffer *,std::allocator<CGraphicVertexBuffer *> >, COMDAT
; _this$ = ecx

; 766  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 40		 je	 SHORT $LN4@vector

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000c	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00011	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN20@vector

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00019	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001c	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 22		 ja	 SHORT $LN17@vector

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00029	8b c2		 mov	 eax, edx
$LN20@vector:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0002b	51		 push	 ecx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00038	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2050 :             _Mylast  = nullptr;

  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2051 :             _Myend   = nullptr;

  00042	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  00049	5e		 pop	 esi

; 772  :     }

  0004a	c3		 ret	 0
$LN17@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN28@vector:
  00050	cc		 int	 3
??1?$vector@PAVCGraphicVertexBuffer@@V?$allocator@PAVCGraphicVertexBuffer@@@std@@@std@@QAE@XZ ENDP ; std::vector<CGraphicVertexBuffer *,std::allocator<CGraphicVertexBuffer *> >::~vector<CGraphicVertexBuffer *,std::allocator<CGraphicVertexBuffer *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??0?$vector@PAVCGraphicVertexBuffer@@V?$allocator@PAVCGraphicVertexBuffer@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@PAVCGraphicVertexBuffer@@V?$allocator@PAVCGraphicVertexBuffer@@@std@@@std@@QAE@XZ PROC ; std::vector<CGraphicVertexBuffer *,std::allocator<CGraphicVertexBuffer *> >::vector<CGraphicVertexBuffer *,std::allocator<CGraphicVertexBuffer *> >, COMDAT
; _this$ = ecx

; 398  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 611  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));
; 612  :     }

  00006	8b c1		 mov	 eax, ecx

; 398  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 611  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));
; 612  :     }

  00016	c3		 ret	 0
??0?$vector@PAVCGraphicVertexBuffer@@V?$allocator@PAVCGraphicVertexBuffer@@@std@@@std@@QAE@XZ ENDP ; std::vector<CGraphicVertexBuffer *,std::allocator<CGraphicVertexBuffer *> >::vector<CGraphicVertexBuffer *,std::allocator<CGraphicVertexBuffer *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCGrannyLODController@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCGrannyLODController@@UAEPAXI@Z PROC		; CGrannyLODController::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CGrannyLODController@@UAE@XZ ; CGrannyLODController::~CGrannyLODController
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 3c		 push	 60			; 0000003cH
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCGrannyLODController@@UAEPAXI@Z ENDP		; CGrannyLODController::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
;	COMDAT ?_Tidy@?$deque@PAVCGrannyModelInstance@@V?$allocator@PAVCGrannyModelInstance@@@std@@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$deque@PAVCGrannyModelInstance@@V?$allocator@PAVCGrannyModelInstance@@@std@@@std@@AAEXXZ PROC ; std::deque<CGrannyModelInstance *,std::allocator<CGrannyModelInstance *> >::_Tidy, COMDAT
; _this$ = ecx

; 1584 :     void _Tidy() noexcept { // free all storage

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 1045 :         return _Mysize() == 0;

  00003	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00006	85 c0		 test	 eax, eax

; 1585 :         _Orphan_all();
; 1586 : 
; 1587 :         _Alpty _Almap(_Getal());
; 1588 :         while (!empty()) {

  00008	74 15		 je	 SHORT $LN61@Tidy
  0000a	66 0f 1f 44 00
	00		 npad	 6
$LL2@Tidy:

; 1208 :         if (--_Mysize() == 0) {

  00010	83 c0 ff	 add	 eax, -1
  00013	89 47 10	 mov	 DWORD PTR [edi+16], eax
  00016	75 f8		 jne	 SHORT $LL2@Tidy

; 1209 :             _Myoff() = 0;

  00018	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN61@Tidy:

; 1589 :             pop_back();
; 1590 :         }
; 1591 : 
; 1592 :         if (_Map() != nullptr) {

  0001f	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0
  00023	74 53		 je	 SHORT $LN60@Tidy

; 1593 :             for (size_type _Block = _Mapsize(); _Block > 0;) { // free storage for a block and destroy pointer

  00025	56		 push	 esi
  00026	8b 77 08	 mov	 esi, DWORD PTR [edi+8]
  00029	85 f6		 test	 esi, esi
  0002b	74 1d		 je	 SHORT $LN5@Tidy
  0002d	0f 1f 00	 npad	 3
$LL4@Tidy:

; 1594 :                 if (_Map()[--_Block]) { // free block

  00030	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00033	4e		 dec	 esi
  00034	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]
  00037	85 c0		 test	 eax, eax
  00039	74 0b		 je	 SHORT $LN41@Tidy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  0003b	6a 10		 push	 16			; 00000010H
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00043	83 c4 08	 add	 esp, 8
$LN41@Tidy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 1593 :             for (size_type _Block = _Mapsize(); _Block > 0;) { // free storage for a block and destroy pointer

  00046	85 f6		 test	 esi, esi
  00048	75 e6		 jne	 SHORT $LL4@Tidy
$LN5@Tidy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0004a	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0004d	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00050	c1 e1 02	 shl	 ecx, 2
  00053	5e		 pop	 esi

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00054	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0005a	72 12		 jb	 SHORT $LN33@Tidy

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0005c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0005f	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00062	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00064	83 c0 fc	 add	 eax, -4			; fffffffcH
  00067	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0006a	77 1c		 ja	 SHORT $LN30@Tidy

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0006c	8b c2		 mov	 eax, edx
$LN33@Tidy:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0006e	51		 push	 ecx
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00075	83 c4 08	 add	 esp, 8
$LN60@Tidy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 1603 :         _Mapsize() = 0;

  00078	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 1604 :         _Map()     = nullptr;

  0007f	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  00086	5f		 pop	 edi

; 1605 :     }

  00087	c3		 ret	 0
$LN30@Tidy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00088	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN70@Tidy:
  0008d	cc		 int	 3
?_Tidy@?$deque@PAVCGrannyModelInstance@@V?$allocator@PAVCGrannyModelInstance@@@std@@@std@@AAEXXZ ENDP ; std::deque<CGrannyModelInstance *,std::allocator<CGrannyModelInstance *> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
;	COMDAT ?_Growmap@?$deque@PAVCGrannyModelInstance@@V?$allocator@PAVCGrannyModelInstance@@@std@@@std@@AAEXI@Z
_TEXT	SEGMENT
tv468 = -4						; size = 4
$T1 = 8							; size = 4
__Count$ = 8						; size = 4
?_Growmap@?$deque@PAVCGrannyModelInstance@@V?$allocator@PAVCGrannyModelInstance@@@std@@@std@@AAEXI@Z PROC ; std::deque<CGrannyModelInstance *,std::allocator<CGrannyModelInstance *> >::_Growmap, COMDAT
; _this$ = ecx

; 1545 :     void _Growmap(size_type _Count) { // grow map by at least _Count pointers, _Mapsize() a power of 2

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 1546 :         static_assert(_Minimum_map_size > 1, "The _Xlen() test should always be performed.");
; 1547 : 
; 1548 :         _Alpty _Almap(_Getal());
; 1549 :         size_type _Newsize = _Mapsize() > 0 ? _Mapsize() : 1;

  00005	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00008	b8 01 00 00 00	 mov	 eax, 1
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	8b f9		 mov	 edi, ecx
  00011	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  00014	85 d2		 test	 edx, edx
  00016	0f 45 c2	 cmovne	 eax, edx
  00019	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@Growmap:

; 1550 :         while (_Newsize - _Mapsize() < _Count || _Newsize < _Minimum_map_size) {

  00020	8b f0		 mov	 esi, eax
  00022	2b f2		 sub	 esi, edx
  00024	3b f3		 cmp	 esi, ebx
  00026	72 05		 jb	 SHORT $LN4@Growmap
  00028	83 f8 08	 cmp	 eax, 8
  0002b	73 13		 jae	 SHORT $LN3@Growmap
$LN4@Growmap:

; 1551 :             // scale _Newsize to 2^N >= _Mapsize() + _Count
; 1552 :             if (max_size() / _Block_size - _Newsize < _Newsize) {

  0002d	b9 ff ff ff 0f	 mov	 ecx, 268435455		; 0fffffffH
  00032	2b c8		 sub	 ecx, eax
  00034	3b c8		 cmp	 ecx, eax
  00036	0f 82 fe 00 00
	00		 jb	 $LN46@Growmap

; 1554 :             }
; 1555 : 
; 1556 :             _Newsize *= 2;

  0003c	03 c0		 add	 eax, eax

; 1557 :         }

  0003e	eb e0		 jmp	 SHORT $LL2@Growmap
$LN3@Growmap:

; 1558 :         _Count = _Newsize - _Mapsize();
; 1559 : 
; 1560 :         size_type _Myboff = _Myoff() / _Block_size;

  00040	8b 5f 0c	 mov	 ebx, DWORD PTR [edi+12]
  00043	c1 eb 02	 shr	 ebx, 2
  00046	89 5d 08	 mov	 DWORD PTR $T1[ebp], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 70   :         if (_Count > _Max_possible) {

  00049	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  0004e	0f 87 ed 00 00
	00		 ja	 $LN61@Growmap

; 72   :         }
; 73   :     }
; 74   : 
; 75   :     return _Count * _Ty_size;

  00054	c1 e0 02	 shl	 eax, 2

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00057	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0005c	72 0d		 jb	 SHORT $LN19@Growmap

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00064	83 c4 04	 add	 esp, 4
  00067	8b d8		 mov	 ebx, eax
  00069	eb 13		 jmp	 SHORT $LN18@Growmap
$LN19@Growmap:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  0006b	85 c0		 test	 eax, eax
  0006d	74 0d		 je	 SHORT $LN20@Growmap

; 87   :         return ::operator new(_Bytes);

  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00075	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  00078	8b d8		 mov	 ebx, eax
  0007a	eb 02		 jmp	 SHORT $LN18@Growmap
$LN20@Growmap:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  0007c	33 db		 xor	 ebx, ebx
$LN18@Growmap:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 1562 :         _Mapptr _Myptr    = _Newmap + _Myboff;

  0007e	8b 55 08	 mov	 edx, DWORD PTR $T1[ebp]

; 1563 : 
; 1564 :         _Myptr = _STD uninitialized_copy(_Map() + _Myboff, _Map() + _Mapsize(), _Myptr); // copy initial to end

  00081	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00084	c1 e2 02	 shl	 edx, 2
  00087	89 55 fc	 mov	 DWORD PTR tv468[ebp], edx
  0008a	8d 04 1a	 lea	 eax, DWORD PTR [edx+ebx]
  0008d	50		 push	 eax
  0008e	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00091	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00094	50		 push	 eax
  00095	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAPAVCGrannyModelInstance@@PAPAPAV1@@std@@YAPAPAPAVCGrannyModelInstance@@QAPAPAV1@0PAPAPAV1@@Z ; std::uninitialized_copy<CGrannyModelInstance * * *,CGrannyModelInstance * * *>
  0009e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000a1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1565 :         if (_Myboff <= _Count) { // increment greater than offset of initial block

  000a4	50		 push	 eax
  000a5	39 75 08	 cmp	 DWORD PTR $T1[ebp], esi
  000a8	77 22		 ja	 SHORT $LN6@Growmap

; 1566 :             _Myptr = _STD uninitialized_copy(_Map(), _Map() + _Myboff, _Myptr); // copy rest of old

  000aa	8b 45 fc	 mov	 eax, DWORD PTR tv468[ebp]
  000ad	03 c1		 add	 eax, ecx
  000af	50		 push	 eax
  000b0	51		 push	 ecx
  000b1	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAPAVCGrannyModelInstance@@PAPAPAV1@@std@@YAPAPAPAVCGrannyModelInstance@@QAPAPAV1@0PAPAPAV1@@Z ; std::uninitialized_copy<CGrannyModelInstance * * *,CGrannyModelInstance * * *>

; 1567 :             _Uninitialized_value_construct_n_unchecked1(_Myptr, _Count - _Myboff); // clear suffix of new

  000b6	8b ce		 mov	 ecx, esi
  000b8	2b 4d 08	 sub	 ecx, DWORD PTR $T1[ebp]
  000bb	51		 push	 ecx
  000bc	50		 push	 eax
  000bd	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n_unchecked1@PAPAPAVCGrannyModelInstance@@I@std@@YAPAPAPAVCGrannyModelInstance@@PAPAPAV1@I@Z ; std::_Uninitialized_value_construct_n_unchecked1<CGrannyModelInstance * * *,unsigned int>

; 1568 :             _Uninitialized_value_construct_n_unchecked1(_Newmap, _Myboff); // clear prefix of new
; 1569 :         } else { // increment not greater than offset of initial block

  000c2	8b 45 08	 mov	 eax, DWORD PTR $T1[ebp]
  000c5	83 c4 14	 add	 esp, 20			; 00000014H
  000c8	8b cb		 mov	 ecx, ebx
  000ca	eb 24		 jmp	 SHORT $LN7@Growmap
$LN6@Growmap:

; 1570 :             _STD uninitialized_copy(_Map(), _Map() + _Count, _Myptr); // copy more old

  000cc	8d 04 b1	 lea	 eax, DWORD PTR [ecx+esi*4]
  000cf	50		 push	 eax
  000d0	51		 push	 ecx
  000d1	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAPAVCGrannyModelInstance@@PAPAPAV1@@std@@YAPAPAPAVCGrannyModelInstance@@QAPAPAV1@0PAPAPAV1@@Z ; std::uninitialized_copy<CGrannyModelInstance * * *,CGrannyModelInstance * * *>

; 1571 :             _Myptr = _STD uninitialized_copy(_Map() + _Count, _Map() + _Myboff, _Newmap); // copy rest of old

  000d6	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000d9	8b 45 fc	 mov	 eax, DWORD PTR tv468[ebp]
  000dc	03 c1		 add	 eax, ecx
  000de	53		 push	 ebx
  000df	50		 push	 eax
  000e0	8d 04 b1	 lea	 eax, DWORD PTR [ecx+esi*4]
  000e3	50		 push	 eax
  000e4	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAPAVCGrannyModelInstance@@PAPAPAV1@@std@@YAPAPAPAVCGrannyModelInstance@@QAPAPAV1@0PAPAPAV1@@Z ; std::uninitialized_copy<CGrannyModelInstance * * *,CGrannyModelInstance * * *>

; 1572 :             _Uninitialized_value_construct_n_unchecked1(_Myptr, _Count); // clear rest to initial block

  000e9	8b c8		 mov	 ecx, eax
  000eb	83 c4 18	 add	 esp, 24			; 00000018H
  000ee	8b c6		 mov	 eax, esi
$LN7@Growmap:

; 1573 :         }
; 1574 : 
; 1575 :         if (_Map() != nullptr) {

  000f0	50		 push	 eax
  000f1	51		 push	 ecx
  000f2	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n_unchecked1@PAPAPAVCGrannyModelInstance@@I@std@@YAPAPAPAVCGrannyModelInstance@@PAPAPAV1@I@Z ; std::_Uninitialized_value_construct_n_unchecked1<CGrannyModelInstance * * *,unsigned int>
  000f7	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000fa	83 c4 08	 add	 esp, 8
  000fd	85 c0		 test	 eax, eax
  000ff	74 2a		 je	 SHORT $LN31@Growmap
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00101	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00104	c1 e1 02	 shl	 ecx, 2

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00107	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0010d	72 12		 jb	 SHORT $LN41@Growmap

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0010f	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00112	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00115	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00117	83 c0 fc	 add	 eax, -4			; fffffffcH
  0011a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0011d	77 27		 ja	 SHORT $LN38@Growmap

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0011f	8b c2		 mov	 eax, edx
$LN41@Growmap:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00121	51		 push	 ecx
  00122	50		 push	 eax
  00123	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00128	83 c4 08	 add	 esp, 8
$LN31@Growmap:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 1581 :         _Mapsize() += _Count;

  0012b	01 77 08	 add	 DWORD PTR [edi+8], esi
  0012e	89 5f 04	 mov	 DWORD PTR [edi+4], ebx

; 1582 :     }

  00131	5f		 pop	 edi
  00132	5e		 pop	 esi
  00133	5b		 pop	 ebx
  00134	8b e5		 mov	 esp, ebp
  00136	5d		 pop	 ebp
  00137	c2 04 00	 ret	 4
$LN46@Growmap:

; 1553 :                 _Xlen(); // result too long

  0013a	8b cf		 mov	 ecx, edi
  0013c	e8 00 00 00 00	 call	 ?_Xlen@?$deque@PAVCGrannyModelInstance@@V?$allocator@PAVCGrannyModelInstance@@@std@@@std@@ABEXXZ ; std::deque<CGrannyModelInstance *,std::allocator<CGrannyModelInstance *> >::_Xlen
$LN61@Growmap:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 71   :             _Throw_bad_array_new_length(); // multiply overflow

  00141	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN38@Growmap:

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00146	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN59@Growmap:
  0014b	cc		 int	 3
?_Growmap@?$deque@PAVCGrannyModelInstance@@V?$allocator@PAVCGrannyModelInstance@@@std@@@std@@AAEXI@Z ENDP ; std::deque<CGrannyModelInstance *,std::allocator<CGrannyModelInstance *> >::_Growmap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
;	COMDAT ?_Xlen@?$deque@PAVCGrannyModelInstance@@V?$allocator@PAVCGrannyModelInstance@@@std@@@std@@ABEXXZ
_TEXT	SEGMENT
?_Xlen@?$deque@PAVCGrannyModelInstance@@V?$allocator@PAVCGrannyModelInstance@@@std@@@std@@ABEXXZ PROC ; std::deque<CGrannyModelInstance *,std::allocator<CGrannyModelInstance *> >::_Xlen, COMDAT
; _this$ = ecx

; 1538 :         _Xlength_error("deque<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$deque@PAVCGrannyModelInstance@@V?$allocator@PAVCGrannyModelInstance@@@std@@@std@@ABEXXZ ENDP ; std::deque<CGrannyModelInstance *,std::allocator<CGrannyModelInstance *> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?_Xlength@?$vector@USAttachingModelData@CGrannyLODController@@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@USAttachingModelData@CGrannyLODController@@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@CAXXZ PROC ; std::vector<CGrannyLODController::SAttachingModelData,std::allocator<CGrannyLODController::SAttachingModelData> >::_Xlength, COMDAT

; 2138 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@USAttachingModelData@CGrannyLODController@@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@CAXXZ ENDP ; std::vector<CGrannyLODController::SAttachingModelData,std::allocator<CGrannyLODController::SAttachingModelData> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?erase@?$vector@USAttachingModelData@CGrannyLODController@@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USAttachingModelData@CGrannyLODController@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USAttachingModelData@CGrannyLODController@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
__Whereptr$1$ = -12					; size = 4
_this$1$ = -8						; size = 4
__Last$1$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$vector@USAttachingModelData@CGrannyLODController@@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USAttachingModelData@CGrannyLODController@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USAttachingModelData@CGrannyLODController@@@std@@@std@@@2@@Z PROC ; std::vector<CGrannyLODController::SAttachingModelData,std::allocator<CGrannyLODController::SAttachingModelData> >::erase, COMDAT
; _this$ = ecx

; 1717 :         is_nothrow_move_assignable_v<value_type>) /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  0000e	89 7d f8	 mov	 DWORD PTR _this$1$[ebp], edi
  00011	89 4d f4	 mov	 DWORD PTR __Whereptr$1$[ebp], ecx

; 1721 : 
; 1722 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1723 :         _STL_VERIFY(
; 1724 :             _Where._Getcont() == _STD addressof(_My_data) && _Whereptr >= _My_data._Myfirst && _Mylast > _Whereptr,
; 1725 :             "vector erase iterator outside range");
; 1726 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1727 : 
; 1728 :         _Orphan_range(_Whereptr, _Mylast);
; 1729 :         _STD _Move_unchecked(_Whereptr + 1, _Mylast, _Whereptr);

  00014	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00017	8d 59 1c	 lea	 ebx, DWORD PTR [ecx+28]
  0001a	89 45 fc	 mov	 DWORD PTR __Last$1$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 4898 :     for (; _First != _Last; ++_Dest, (void) ++_First) {

  0001d	3b d8		 cmp	 ebx, eax
  0001f	74 48		 je	 SHORT $LN5@erase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1720 :         pointer& _Mylast        = _My_data._Mylast;

  00021	8d 79 04	 lea	 edi, DWORD PTR [ecx+4]
  00024	8d 71 20	 lea	 esi, DWORD PTR [ecx+32]
$LL6@erase:
  00027	8b 03		 mov	 eax, DWORD PTR [ebx]
  00029	89 47 fc	 mov	 DWORD PTR [edi-4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2961 :         if (this == _STD addressof(_Right)) {

  0002c	3b fe		 cmp	 edi, esi
  0002e	74 28		 je	 SHORT $LN4@erase

; 2962 :             return *this;
; 2963 :         }
; 2964 : 
; 2965 :         auto& _Al                 = _Getal();
; 2966 :         auto& _Right_al           = _Right._Getal();
; 2967 :         constexpr auto _Pocma_val = _Choose_pocma_v<_Alty>;
; 2968 :         if constexpr (_Pocma_val == _Pocma_values::_Propagate_allocators) {
; 2969 :             if (_Al != _Right_al) {
; 2970 :                 // intentionally slams into noexcept on OOM, TRANSITION, VSO-466800
; 2971 :                 _Mypair._Myval2._Orphan_all();
; 2972 :                 _Mypair._Myval2._Reload_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Al), _GET_PROXY_ALLOCATOR(_Alty, _Right_al));
; 2973 :             }
; 2974 :         } else if constexpr (_Pocma_val == _Pocma_values::_No_propagate_allocators) {
; 2975 :             if (_Al != _Right_al) {
; 2976 :                 assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);
; 2977 :                 return *this;
; 2978 :             }
; 2979 :         }
; 2980 : 
; 2981 :         _Tidy_deallocate();

  00030	8b cf		 mov	 ecx, edi
  00032	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate

; 2999 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00037	0f 10 06	 movups	 xmm0, XMMWORD PTR [esi]
  0003a	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0
  0003d	f3 0f 7e 46 10	 movq	 xmm0, QWORD PTR [esi+16]
  00042	66 0f d6 47 10	 movq	 QWORD PTR [edi+16], xmm0

; 4821 :         _My_data._Mysize = 0;

  00047	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4822 :         _My_data._Myres  = _BUF_SIZE - 1;

  0004e	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4823 :         _My_data._Activate_SSO_buffer();
; 4824 : 
; 4825 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4826 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00055	c6 06 00	 mov	 BYTE PTR [esi], 0
$LN4@erase:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 4898 :     for (; _First != _Last; ++_Dest, (void) ++_First) {

  00058	83 c3 1c	 add	 ebx, 28			; 0000001cH
  0005b	83 c7 1c	 add	 edi, 28			; 0000001cH
  0005e	83 c6 1c	 add	 esi, 28			; 0000001cH
  00061	3b 5d fc	 cmp	 ebx, DWORD PTR __Last$1$[ebp]
  00064	75 c1		 jne	 SHORT $LL6@erase
  00066	8b 7d f8	 mov	 edi, DWORD PTR _this$1$[ebp]
$LN5@erase:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1730 :         _Alty_traits::destroy(_Getal(), _Unfancy(_Mylast - 1));

  00069	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  0006c	8b 4e fc	 mov	 ecx, DWORD PTR [esi-4]
  0006f	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  00072	72 28		 jb	 SHORT $LN47@erase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00074	8b 46 e8	 mov	 eax, DWORD PTR [esi-24]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00077	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00078	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0007e	72 12		 jb	 SHORT $LN57@erase

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00080	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00083	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00086	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00088	83 c0 fc	 add	 eax, -4			; fffffffcH
  0008b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0008e	77 33		 ja	 SHORT $LN54@erase

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00090	8b c2		 mov	 eax, edx
$LN57@erase:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00092	51		 push	 ecx
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN47@erase:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0009c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0009f	8b 4d f4	 mov	 ecx, DWORD PTR __Whereptr$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  000a2	c7 46 f8 00 00
	00 00		 mov	 DWORD PTR [esi-8], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  000a9	c7 46 fc 0f 00
	00 00		 mov	 DWORD PTR [esi-4], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000b0	c6 46 e8 00	 mov	 BYTE PTR [esi-24], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1732 :         --_Mylast;

  000b4	83 47 04 e4	 add	 DWORD PTR [edi+4], -28	; ffffffe4H

; 1733 :         return iterator(_Whereptr, _STD addressof(_My_data));

  000b8	5f		 pop	 edi
  000b9	5e		 pop	 esi

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  000ba	89 08		 mov	 DWORD PTR [eax], ecx

; 1733 :         return iterator(_Whereptr, _STD addressof(_My_data));

  000bc	5b		 pop	 ebx

; 1734 :     }

  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c2 08 00	 ret	 8
$LN54@erase:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN80@erase:
  000c8	cc		 int	 3
?erase@?$vector@USAttachingModelData@CGrannyLODController@@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USAttachingModelData@CGrannyLODController@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USAttachingModelData@CGrannyLODController@@@std@@@std@@@2@@Z ENDP ; std::vector<CGrannyLODController::SAttachingModelData,std::allocator<CGrannyLODController::SAttachingModelData> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??1?$vector@USAttachingModelData@CGrannyLODController@@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@USAttachingModelData@CGrannyLODController@@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@QAE@XZ PROC ; std::vector<CGrannyLODController::SAttachingModelData,std::allocator<CGrannyLODController::SAttachingModelData> >::~vector<CGrannyLODController::SAttachingModelData,std::allocator<CGrannyLODController::SAttachingModelData> >, COMDAT
; _this$ = ecx

; 766  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 6d		 je	 SHORT $LN4@vector
  00009	57		 push	 edi

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);

  0000a	56		 push	 esi
  0000b	ff 76 04	 push	 DWORD PTR [esi+4]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@YAXPAUSAttachingModelData@CGrannyLODController@@QAU12@AAV?$allocator@USAttachingModelData@CGrannyLODController@@@0@@Z ; std::_Destroy_range<std::allocator<CGrannyLODController::SAttachingModelData> >

; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00014	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00017	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0001c	8b 3e		 mov	 edi, DWORD PTR [esi]
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00021	2b cf		 sub	 ecx, edi
  00023	f7 e9		 imul	 ecx
  00025	03 d1		 add	 edx, ecx
  00027	c1 fa 04	 sar	 edx, 4
  0002a	8b c2		 mov	 eax, edx
  0002c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0002f	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00031	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  00038	2b c8		 sub	 ecx, eax
  0003a	c1 e1 02	 shl	 ecx, 2

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0003d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00043	72 12		 jb	 SHORT $LN20@vector

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00045	8b 57 fc	 mov	 edx, DWORD PTR [edi-4]
  00048	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0004b	2b fa		 sub	 edi, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004d	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  00050	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00053	77 23		 ja	 SHORT $LN17@vector

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00055	8b fa		 mov	 edi, edx
$LN20@vector:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00057	51		 push	 ecx
  00058	57		 push	 edi
  00059	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0005e	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

  00061	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 2050 :             _Mylast  = nullptr;

  00067	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2051 :             _Myend   = nullptr;

  0006e	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00075	5f		 pop	 edi
$LN4@vector:
  00076	5e		 pop	 esi

; 772  :     }

  00077	c3		 ret	 0
$LN17@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00078	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN28@vector:
  0007d	cc		 int	 3
??1?$vector@USAttachingModelData@CGrannyLODController@@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@QAE@XZ ENDP ; std::vector<CGrannyLODController::SAttachingModelData,std::allocator<CGrannyLODController::SAttachingModelData> >::~vector<CGrannyLODController::SAttachingModelData,std::allocator<CGrannyLODController::SAttachingModelData> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ?deallocate@?$allocator@USAttachingModelData@CGrannyLODController@@@std@@QAEXQAUSAttachingModelData@CGrannyLODController@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@USAttachingModelData@CGrannyLODController@@@std@@QAEXQAUSAttachingModelData@CGrannyLODController@@I@Z PROC ; std::allocator<CGrannyLODController::SAttachingModelData>::deallocate, COMDAT
; _this$ = ecx

; 966  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 967  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");
; 968  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  0000d	2b c8		 sub	 ecx, eax
  0000f	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00012	c1 e1 02	 shl	 ecx, 2

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00015	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001b	72 12		 jb	 SHORT $LN15@deallocate

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001d	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00020	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00023	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00025	83 c0 fc	 add	 eax, -4			; fffffffcH
  00028	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002b	77 10		 ja	 SHORT $LN12@deallocate

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002d	8b c2		 mov	 eax, edx
$LN15@deallocate:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0002f	51		 push	 ecx
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00036	83 c4 08	 add	 esp, 8

; 970  :     }

  00039	5d		 pop	 ebp
  0003a	c2 08 00	 ret	 8
$LN12@deallocate:

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0003d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN18@deallocate:
  00042	cc		 int	 3
?deallocate@?$allocator@USAttachingModelData@CGrannyLODController@@@std@@QAEXQAUSAttachingModelData@CGrannyLODController@@I@Z ENDP ; std::allocator<CGrannyLODController::SAttachingModelData>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??1SAttachingModelData@CGrannyLODController@@QAE@XZ
_TEXT	SEGMENT
??1SAttachingModelData@CGrannyLODController@@QAE@XZ PROC ; CGrannyLODController::SAttachingModelData::~SAttachingModelData, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  00009	72 28		 jb	 SHORT $LN15@SAttaching
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0000e	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00015	72 12		 jb	 SHORT $LN25@SAttaching

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00017	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001a	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001d	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00022	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00025	77 20		 ja	 SHORT $LN22@SAttaching

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00027	8b c2		 mov	 eax, edx
$LN25@SAttaching:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00029	51		 push	 ecx
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00030	83 c4 08	 add	 esp, 8
$LN15@SAttaching:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  00033	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  0003a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00041	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00045	5e		 pop	 esi
  00046	c3		 ret	 0
$LN22@SAttaching:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00047	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN34@SAttaching:
  0004c	cc		 int	 3
??1SAttachingModelData@CGrannyLODController@@QAE@XZ ENDP ; CGrannyLODController::SAttachingModelData::~SAttachingModelData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
;	COMDAT ?__ReserveSharedDeformableVertexBuffer@CGrannyLODController@@IAEXK@Z
_TEXT	SEGMENT
_deformableVertexCount$ = 8				; size = 4
?__ReserveSharedDeformableVertexBuffer@CGrannyLODController@@IAEXK@Z PROC ; CGrannyLODController::__ReserveSharedDeformableVertexBuffer, COMDAT
; _this$ = ecx

; 294  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 295  : 	if (m_pkSharedDeformableVertexBuffer &&

  00006	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00009	85 c9		 test	 ecx, ecx
  0000b	74 0a		 je	 SHORT $LN2@ReserveSha
  0000d	e8 00 00 00 00	 call	 ?GetVertexCount@CGraphicVertexBuffer@@QBEHXZ ; CGraphicVertexBuffer::GetVertexCount
  00012	3b 45 08	 cmp	 eax, DWORD PTR _deformableVertexCount$[ebp]
  00015	73 16		 jae	 SHORT $LN1@ReserveSha
$LN2@ReserveSha:

; 296  : 		m_pkSharedDeformableVertexBuffer->GetVertexCount() >= deformableVertexCount)
; 297  : 		return;
; 298  : 
; 299  : 	__FreeDeformVertexBuffer(m_pkSharedDeformableVertexBuffer);

  00017	ff 76 38	 push	 DWORD PTR [esi+56]
  0001a	e8 00 00 00 00	 call	 ?__FreeDeformVertexBuffer@@YAXPAVCGraphicVertexBuffer@@@Z ; __FreeDeformVertexBuffer

; 300  : 
; 301  : 	m_pkSharedDeformableVertexBuffer = __AllocDeformVertexBuffer(deformableVertexCount);

  0001f	ff 75 08	 push	 DWORD PTR _deformableVertexCount$[ebp]
  00022	e8 00 00 00 00	 call	 ?__AllocDeformVertexBuffer@@YAPAVCGraphicVertexBuffer@@I@Z ; __AllocDeformVertexBuffer
  00027	83 c4 08	 add	 esp, 8
  0002a	89 46 38	 mov	 DWORD PTR [esi+56], eax
$LN1@ReserveSha:
  0002d	5e		 pop	 esi

; 302  : }

  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
?__ReserveSharedDeformableVertexBuffer@CGrannyLODController@@IAEXK@Z ENDP ; CGrannyLODController::__ReserveSharedDeformableVertexBuffer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
;	COMDAT ?RefreshAttachedModelInstance@CGrannyLODController@@IAEXXZ
_TEXT	SEGMENT
tv233 = -4						; size = 4
?RefreshAttachedModelInstance@CGrannyLODController@@IAEXXZ PROC ; CGrannyLODController::RefreshAttachedModelInstance, COMDAT
; _this$ = ecx

; 566  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 567  : 	if (!m_pCurrentModelInstance)

  00007	83 7e 20 00	 cmp	 DWORD PTR [esi+32], 0
  0000b	0f 84 86 00 00
	00		 je	 $LN3@RefreshAtt
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00011	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00014	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00019	53		 push	 ebx
  0001a	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  0001d	2b cb		 sub	 ecx, ebx
  0001f	f7 e9		 imul	 ecx
  00021	57		 push	 edi
  00022	03 d1		 add	 edx, ecx
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 570  : 	for (DWORD i = 0; i < m_AttachedModelDataVector.size(); ++i)

  00024	33 ff		 xor	 edi, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00026	c1 fa 04	 sar	 edx, 4
  00029	8b c2		 mov	 eax, edx
  0002b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0002e	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 570  : 	for (DWORD i = 0; i < m_AttachedModelDataVector.size(); ++i)

  00030	74 63		 je	 SHORT $LN27@RefreshAtt
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1868 :         auto& _My_data = _Mypair._Myval2;

  00032	33 c0		 xor	 eax, eax
  00034	89 45 fc	 mov	 DWORD PTR tv233[ebp], eax
$LL4@RefreshAtt:
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 574  : 		CGrannyModelInstance * pSrcInstance = rModelData.pkLODController->GetModelInstance();

  00037	8b 0c 18	 mov	 ecx, DWORD PTR [eax+ebx]
  0003a	e8 00 00 00 00	 call	 ?GetModelInstance@CGrannyLODController@@QAEPAVCGrannyModelInstance@@XZ ; CGrannyLODController::GetModelInstance
  0003f	8b c8		 mov	 ecx, eax

; 575  : 		if (!pSrcInstance)

  00041	85 c9		 test	 ecx, ecx
  00043	75 10		 jne	 SHORT $LN6@RefreshAtt

; 576  : 		{
; 577  : 			Tracenf("CGrannyLODController::RefreshAttachedModelInstance : m_AttachedModelDataVector[%d]->pkLODController->GetModelIntance()==NULL", i);

  00045	57		 push	 edi
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_0HN@JOABBJCG@CGrannyLODController?3?3RefreshAt@
  0004b	e8 00 00 00 00	 call	 ?Tracenf@@YAXPBDZZ	; Tracenf
  00050	83 c4 08	 add	 esp, 8

; 578  : 			continue;

  00053	eb 19		 jmp	 SHORT $LN2@RefreshAtt
$LN6@RefreshAtt:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4107 :         return _Mypair._Myval2._Myptr();

  00055	8b 45 fc	 mov	 eax, DWORD PTR tv233[ebp]
  00058	83 c0 04	 add	 eax, 4
  0005b	03 c3		 add	 eax, ebx

; 2244 :         return _BUF_SIZE <= _Myres;

  0005d	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2236 :         if (_Large_string_engaged()) {

  00061	72 02		 jb	 SHORT $LN15@RefreshAtt

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  00063	8b 00		 mov	 eax, DWORD PTR [eax]
$LN15@RefreshAtt:
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 581  : 		pSrcInstance->SetParentModelInstance(m_pCurrentModelInstance, rModelData.strBoneName.c_str());

  00065	50		 push	 eax
  00066	ff 76 20	 push	 DWORD PTR [esi+32]
  00069	e8 00 00 00 00	 call	 ?SetParentModelInstance@CGrannyModelInstance@@QAEXPBV1@PBD@Z ; CGrannyModelInstance::SetParentModelInstance
$LN2@RefreshAtt:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0006e	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00071	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00076	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 570  : 	for (DWORD i = 0; i < m_AttachedModelDataVector.size(); ++i)

  00079	47		 inc	 edi
  0007a	83 45 fc 1c	 add	 DWORD PTR tv233[ebp], 28 ; 0000001cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0007e	2b cb		 sub	 ecx, ebx
  00080	f7 e9		 imul	 ecx
  00082	03 d1		 add	 edx, ecx
  00084	c1 fa 04	 sar	 edx, 4
  00087	8b c2		 mov	 eax, edx
  00089	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0008c	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 570  : 	for (DWORD i = 0; i < m_AttachedModelDataVector.size(); ++i)

  0008e	3b f8		 cmp	 edi, eax
  00090	8b 45 fc	 mov	 eax, DWORD PTR tv233[ebp]
  00093	72 a2		 jb	 SHORT $LL4@RefreshAtt
$LN27@RefreshAtt:
  00095	5f		 pop	 edi
  00096	5b		 pop	 ebx
$LN3@RefreshAtt:
  00097	5e		 pop	 esi

; 582  : 	}
; 583  : }

  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c3		 ret	 0
?RefreshAttachedModelInstance@CGrannyLODController@@IAEXXZ ENDP ; CGrannyLODController::RefreshAttachedModelInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
;	COMDAT ?SetCurrentModelInstance@CGrannyLODController@@IAEXPAVCGrannyModelInstance@@@Z
_TEXT	SEGMENT
_pgrnModelInstance$ = 8					; size = 4
?SetCurrentModelInstance@CGrannyLODController@@IAEXPAVCGrannyModelInstance@@@Z PROC ; CGrannyLODController::SetCurrentModelInstance, COMDAT
; _this$ = ecx

; 550  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 551  : 	// Copy Motion
; 552  : 	pgrnModelInstance->CopyMotion(m_pCurrentModelInstance, true);

  00004	8b 75 08	 mov	 esi, DWORD PTR _pgrnModelInstance$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	8b ce		 mov	 ecx, esi
  0000c	6a 01		 push	 1
  0000e	ff 77 20	 push	 DWORD PTR [edi+32]
  00011	e8 00 00 00 00	 call	 ?CopyMotion@CGrannyModelInstance@@QAEXPAV1@_N@Z ; CGrannyModelInstance::CopyMotion

; 553  : 	m_pCurrentModelInstance = pgrnModelInstance;
; 554  : 
; 555  : 	// Change children attaching link
; 556  : 	RefreshAttachedModelInstance();

  00016	8b cf		 mov	 ecx, edi
  00018	89 77 20	 mov	 DWORD PTR [edi+32], esi
  0001b	e8 00 00 00 00	 call	 ?RefreshAttachedModelInstance@CGrannyLODController@@IAEXXZ ; CGrannyLODController::RefreshAttachedModelInstance

; 557  : 
; 558  : 	// Change parent attaching link
; 559  : 	if (m_pAttachedParentModel)

  00020	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	85 c9		 test	 ecx, ecx
  00027	74 05		 je	 SHORT $LN2@SetCurrent

; 560  : 	{
; 561  : 		m_pAttachedParentModel->RefreshAttachedModelInstance();

  00029	e8 00 00 00 00	 call	 ?RefreshAttachedModelInstance@CGrannyLODController@@IAEXXZ ; CGrannyLODController::RefreshAttachedModelInstance
$LN2@SetCurrent:

; 562  : 	}
; 563  : }

  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
?SetCurrentModelInstance@CGrannyLODController@@IAEXPAVCGrannyModelInstance@@@Z ENDP ; CGrannyLODController::SetCurrentModelInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
;	COMDAT ?GetModelInstance@CGrannyLODController@@QAEPAVCGrannyModelInstance@@XZ
_TEXT	SEGMENT
?GetModelInstance@CGrannyLODController@@QAEPAVCGrannyModelInstance@@XZ PROC ; CGrannyLODController::GetModelInstance, COMDAT
; _this$ = ecx

; 684  : 	return m_pCurrentModelInstance;

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]

; 685  : }

  00003	c3		 ret	 0
?GetModelInstance@CGrannyLODController@@QAEPAVCGrannyModelInstance@@XZ ENDP ; CGrannyLODController::GetModelInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
;	COMDAT ?isModelInstance@CGrannyLODController@@QAEHXZ
_TEXT	SEGMENT
?isModelInstance@CGrannyLODController@@QAEHXZ PROC	; CGrannyLODController::isModelInstance, COMDAT
; _this$ = ecx

; 676  : 	if (!m_pCurrentModelInstance)

  00000	33 c0		 xor	 eax, eax
  00002	39 41 20	 cmp	 DWORD PTR [ecx+32], eax
  00005	0f 95 c0	 setne	 al

; 677  : 		return FALSE;
; 678  : 
; 679  : 	return TRUE;
; 680  : }

  00008	c3		 ret	 0
?isModelInstance@CGrannyLODController@@QAEHXZ ENDP	; CGrannyLODController::isModelInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
;	COMDAT ?SetMotionAtEnd@CGrannyLODController@@QAEXXZ
_TEXT	SEGMENT
?SetMotionAtEnd@CGrannyLODController@@QAEXXZ PROC	; CGrannyLODController::SetMotionAtEnd, COMDAT
; _this$ = ecx

; 670  : 	if (m_pCurrentModelInstance)

  00000	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00003	85 c9		 test	 ecx, ecx
  00005	0f 85 00 00 00
	00		 jne	 ?SetMotionAtEnd@CGrannyModelInstance@@QAEXXZ ; CGrannyModelInstance::SetMotionAtEnd

; 671  : 		m_pCurrentModelInstance->SetMotionAtEnd();
; 672  : }

  0000b	c3		 ret	 0
?SetMotionAtEnd@CGrannyLODController@@QAEXXZ ENDP	; CGrannyLODController::SetMotionAtEnd
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
;	COMDAT ?ChangeMotionPointer@CGrannyLODController@@QAEXPBVCGrannyMotion@@HM@Z
_TEXT	SEGMENT
_c_pMotion$ = 8						; size = 4
_iLoopCount$ = 12					; size = 4
_speedRatio$ = 16					; size = 4
?ChangeMotionPointer@CGrannyLODController@@QAEXPBVCGrannyMotion@@HM@Z PROC ; CGrannyLODController::ChangeMotionPointer, COMDAT
; _this$ = ecx

; 663  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 664  : 	assert(m_pCurrentModelInstance != NULL);
; 665  : 	m_pCurrentModelInstance->ChangeMotionPointer(c_pMotion, iLoopCount, speedRatio);

  00003	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _speedRatio$[ebp]
  00008	51		 push	 ecx
  00009	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  0000c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00011	ff 75 0c	 push	 DWORD PTR _iLoopCount$[ebp]
  00014	ff 75 08	 push	 DWORD PTR _c_pMotion$[ebp]
  00017	e8 00 00 00 00	 call	 ?ChangeMotionPointer@CGrannyModelInstance@@QAEXPBVCGrannyMotion@@HM@Z ; CGrannyModelInstance::ChangeMotionPointer

; 666  : }

  0001c	5d		 pop	 ebp
  0001d	c2 0c 00	 ret	 12			; 0000000cH
?ChangeMotionPointer@CGrannyLODController@@QAEXPBVCGrannyMotion@@HM@Z ENDP ; CGrannyLODController::ChangeMotionPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
;	COMDAT ?SetMotionPointer@CGrannyLODController@@QAEXPBVCGrannyMotion@@MHM@Z
_TEXT	SEGMENT
_c_pMotion$ = 8						; size = 4
_fBlendTime$ = 12					; size = 4
_iLoopCount$ = 16					; size = 4
_speedRatio$ = 20					; size = 4
?SetMotionPointer@CGrannyLODController@@QAEXPBVCGrannyMotion@@MHM@Z PROC ; CGrannyLODController::SetMotionPointer, COMDAT
; _this$ = ecx

; 657  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 658  : 	assert(m_pCurrentModelInstance != NULL);
; 659  : 	m_pCurrentModelInstance->SetMotionPointer(c_pMotion, fBlendTime, iLoopCount, speedRatio);

  00003	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _speedRatio$[ebp]
  00008	51		 push	 ecx
  00009	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0000e	ff 75 10	 push	 DWORD PTR _iLoopCount$[ebp]
  00011	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fBlendTime$[ebp]
  00016	51		 push	 ecx
  00017	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  0001a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001f	ff 75 08	 push	 DWORD PTR _c_pMotion$[ebp]
  00022	e8 00 00 00 00	 call	 ?SetMotionPointer@CGrannyModelInstance@@QAEXPBVCGrannyMotion@@MHM@Z ; CGrannyModelInstance::SetMotionPointer

; 660  : }

  00027	5d		 pop	 ebp
  00028	c2 10 00	 ret	 16			; 00000010H
?SetMotionPointer@CGrannyLODController@@QAEXPBVCGrannyMotion@@MHM@Z ENDP ; CGrannyLODController::SetMotionPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
;	COMDAT ?ResetLocalTime@CGrannyLODController@@QAEXXZ
_TEXT	SEGMENT
?ResetLocalTime@CGrannyLODController@@QAEXXZ PROC	; CGrannyLODController::ResetLocalTime, COMDAT
; _this$ = ecx

; 652  : 	assert(m_pCurrentModelInstance != NULL);
; 653  : 	m_pCurrentModelInstance->ResetLocalTime();

  00000	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00003	e9 00 00 00 00	 jmp	 ?ResetLocalTime@CGrannyModelInstance@@QAEHXZ ; CGrannyModelInstance::ResetLocalTime
?ResetLocalTime@CGrannyLODController@@QAEXXZ ENDP	; CGrannyLODController::ResetLocalTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
;	COMDAT ?SetLocalTime@CGrannyLODController@@QAEXM@Z
_TEXT	SEGMENT
_fLocalTime$ = 8					; size = 4
?SetLocalTime@CGrannyLODController@@QAEXM@Z PROC	; CGrannyLODController::SetLocalTime, COMDAT
; _this$ = ecx

; 645  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 646  : 	if (m_pCurrentModelInstance)

  00003	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00006	85 c9		 test	 ecx, ecx
  00008	74 10		 je	 SHORT $LN2@SetLocalTi

; 647  : 		m_pCurrentModelInstance->SetLocalTime(fLocalTime);

  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fLocalTime$[ebp]
  0000f	51		 push	 ecx
  00010	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00015	e8 00 00 00 00	 call	 ?SetLocalTime@CGrannyModelInstance@@QAEXM@Z ; CGrannyModelInstance::SetLocalTime
$LN2@SetLocalTi:

; 648  : }

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?SetLocalTime@CGrannyLODController@@QAEXM@Z ENDP	; CGrannyLODController::SetLocalTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
;	COMDAT ?Intersect@CGrannyLODController@@QAE_NPBUD3DXMATRIX@@PAM11@Z
_TEXT	SEGMENT
_c_pMatrix$ = 8						; size = 4
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_t$ = 20						; size = 4
?Intersect@CGrannyLODController@@QAE_NPBUD3DXMATRIX@@PAM11@Z PROC ; CGrannyLODController::Intersect, COMDAT
; _this$ = ecx

; 638  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 639  : 	if (!m_pCurrentModelInstance)

  00003	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00006	85 c9		 test	 ecx, ecx
  00008	75 06		 jne	 SHORT $LN2@Intersect

; 640  : 		return false;

  0000a	32 c0		 xor	 al, al

; 642  : }

  0000c	5d		 pop	 ebp
  0000d	c2 10 00	 ret	 16			; 00000010H
$LN2@Intersect:
  00010	5d		 pop	 ebp

; 641  : 	return m_pCurrentModelInstance->Intersect(c_pMatrix, u, v, t);

  00011	e9 00 00 00 00	 jmp	 ?Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z ; CGrannyModelInstance::Intersect
?Intersect@CGrannyLODController@@QAE_NPBUD3DXMATRIX@@PAM11@Z ENDP ; CGrannyLODController::Intersect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
;	COMDAT ?GetBoundBox@CGrannyLODController@@QAEXPAUD3DXVECTOR3@@0@Z
_TEXT	SEGMENT
_vtMin$ = 8						; size = 4
_vtMax$ = 12						; size = 4
?GetBoundBox@CGrannyLODController@@QAEXPAUD3DXVECTOR3@@0@Z PROC ; CGrannyLODController::GetBoundBox, COMDAT
; _this$ = ecx

; 632  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 633  : 	if (m_pCurrentModelInstance)

  00003	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00006	85 c9		 test	 ecx, ecx
  00008	74 06		 je	 SHORT $LN2@GetBoundBo

; 635  : }

  0000a	5d		 pop	 ebp

; 634  : 		m_pCurrentModelInstance->GetBoundBox(vtMin, vtMax);

  0000b	e9 00 00 00 00	 jmp	 ?GetBoundBox@CGrannyModelInstance@@QAEXPAUD3DXVECTOR3@@0@Z ; CGrannyModelInstance::GetBoundBox
$LN2@GetBoundBo:

; 635  : }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?GetBoundBox@CGrannyLODController@@QAEXPAUD3DXVECTOR3@@0@Z ENDP ; CGrannyLODController::GetBoundBox
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
;	COMDAT ?ReloadTexture@CGrannyLODController@@QAEXXZ
_TEXT	SEGMENT
?ReloadTexture@CGrannyLODController@@QAEXXZ PROC	; CGrannyLODController::ReloadTexture, COMDAT
; _this$ = ecx

; 627  : 	if (m_pCurrentModelInstance)

  00000	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00003	85 c9		 test	 ecx, ecx
  00005	0f 85 00 00 00
	00		 jne	 ?ReloadTexture@CGrannyModelInstance@@QAEXXZ ; CGrannyModelInstance::ReloadTexture

; 628  : 		m_pCurrentModelInstance->ReloadTexture();
; 629  : }

  0000b	c3		 ret	 0
?ReloadTexture@CGrannyLODController@@QAEXXZ ENDP	; CGrannyLODController::ReloadTexture
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
;	COMDAT ?RenderShadow@CGrannyLODController@@QAEXXZ
_TEXT	SEGMENT
?RenderShadow@CGrannyLODController@@QAEXXZ PROC		; CGrannyLODController::RenderShadow, COMDAT
; _this$ = ecx

; 621  : 	if (m_pCurrentModelInstance)

  00000	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00003	85 c9		 test	 ecx, ecx
  00005	0f 85 00 00 00
	00		 jne	 ?RenderWithOneTexture@CGrannyModelInstance@@QAEXXZ ; CGrannyModelInstance::RenderWithOneTexture

; 622  : 		m_pCurrentModelInstance->RenderWithOneTexture();
; 623  : }

  0000b	c3		 ret	 0
?RenderShadow@CGrannyLODController@@QAEXXZ ENDP		; CGrannyLODController::RenderShadow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
;	COMDAT ?RenderToShadowMap@CGrannyLODController@@QAEXXZ
_TEXT	SEGMENT
?RenderToShadowMap@CGrannyLODController@@QAEXXZ PROC	; CGrannyLODController::RenderToShadowMap, COMDAT
; _this$ = ecx

; 615  : 	if (m_pCurrentModelInstance)

  00000	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00003	85 c9		 test	 ecx, ecx
  00005	0f 85 00 00 00
	00		 jne	 ?RenderWithoutTexture@CGrannyModelInstance@@QAEXXZ ; CGrannyModelInstance::RenderWithoutTexture

; 616  : 		m_pCurrentModelInstance->RenderWithoutTexture();
; 617  : }

  0000b	c3		 ret	 0
?RenderToShadowMap@CGrannyLODController@@QAEXXZ ENDP	; CGrannyLODController::RenderToShadowMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
;	COMDAT ?DeformAll@CGrannyLODController@@QAEXPBUD3DXMATRIX@@@Z
_TEXT	SEGMENT
_c_pWorldMatrix$ = 8					; size = 4
?DeformAll@CGrannyLODController@@QAEXPBUD3DXMATRIX@@@Z PROC ; CGrannyLODController::DeformAll, COMDAT
; _this$ = ecx

; 592  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1285 :             _Myproxy = _Parent->_Myproxy;

  00008	8b 5f 24	 mov	 ebx, DWORD PTR [edi+36]
  0000b	8b 77 30	 mov	 esi, DWORD PTR [edi+48]
  0000e	66 90		 npad	 2
$LL41@DeformAll:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 939  :         return iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

  00010	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  00013	03 47 34	 add	 eax, DWORD PTR [edi+52]

; 358  :         return this->_Myoff == _Right._Myoff;

  00016	3b f0		 cmp	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 594  : 	for (i=m_que_pkModelInst.begin(); i!=m_que_pkModelInst.end(); ++i)

  00018	74 2e		 je	 SHORT $LN3@DeformAll
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1293 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

  0001a	85 db		 test	 ebx, ebx
  0001c	74 04		 je	 SHORT $LN66@DeformAll
  0001e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00020	eb 02		 jmp	 SHORT $LN67@DeformAll
$LN66@DeformAll:
  00022	33 c0		 xor	 eax, eax
$LN67@DeformAll:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00024	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00027	8b d6		 mov	 edx, esi
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 597  : 		pkModelInst->Deform(c_pWorldMatrix);

  00029	ff 75 08	 push	 DWORD PTR _c_pWorldMatrix$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0002c	49		 dec	 ecx
  0002d	c1 ea 02	 shr	 edx, 2
  00030	23 d1		 and	 edx, ecx
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 597  : 		pkModelInst->Deform(c_pWorldMatrix);

  00032	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 268  :         _Size_type _Off   = _Myoff % _Block_size;

  00035	8b c6		 mov	 eax, esi
  00037	83 e0 03	 and	 eax, 3
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 597  : 		pkModelInst->Deform(c_pWorldMatrix);

  0003a	8b 0c 91	 mov	 ecx, DWORD PTR [ecx+edx*4]
  0003d	8b 0c 81	 mov	 ecx, DWORD PTR [ecx+eax*4]
  00040	e8 00 00 00 00	 call	 ?Deform@CGrannyModelInstance@@QAEXPBUD3DXMATRIX@@@Z ; CGrannyModelInstance::Deform
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 283  :         ++_Myoff;

  00045	46		 inc	 esi
  00046	eb c8		 jmp	 SHORT $LL41@DeformAll
$LN3@DeformAll:
  00048	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 599  : }

  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx
  0004b	5d		 pop	 ebp
  0004c	c2 04 00	 ret	 4
?DeformAll@CGrannyLODController@@QAEXPBUD3DXMATRIX@@@Z ENDP ; CGrannyLODController::DeformAll
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
;	COMDAT ?DeformNoSkin@CGrannyLODController@@QAEXPBUD3DXMATRIX@@@Z
_TEXT	SEGMENT
_c_pWorldMatrix$ = 8					; size = 4
?DeformNoSkin@CGrannyLODController@@QAEXPBUD3DXMATRIX@@@Z PROC ; CGrannyLODController::DeformNoSkin, COMDAT
; _this$ = ecx

; 602  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 603  : 	if (m_pCurrentModelInstance)

  00003	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00006	85 c9		 test	 ecx, ecx
  00008	74 06		 je	 SHORT $LN2@DeformNoSk

; 605  : }

  0000a	5d		 pop	 ebp

; 604  : 		m_pCurrentModelInstance->DeformNoSkin(c_pWorldMatrix);

  0000b	e9 00 00 00 00	 jmp	 ?DeformNoSkin@CGrannyModelInstance@@QAEXPBUD3DXMATRIX@@@Z ; CGrannyModelInstance::DeformNoSkin
$LN2@DeformNoSk:

; 605  : }

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
?DeformNoSkin@CGrannyLODController@@QAEXPBUD3DXMATRIX@@@Z ENDP ; CGrannyLODController::DeformNoSkin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
;	COMDAT ?Deform@CGrannyLODController@@QAEXPBUD3DXMATRIX@@@Z
_TEXT	SEGMENT
_c_pWorldMatrix$ = 8					; size = 4
?Deform@CGrannyLODController@@QAEXPBUD3DXMATRIX@@@Z PROC ; CGrannyLODController::Deform, COMDAT
; _this$ = ecx

; 608  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 609  : 	if (m_pCurrentModelInstance)

  00003	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00006	85 c9		 test	 ecx, ecx
  00008	74 06		 je	 SHORT $LN2@Deform

; 611  : }

  0000a	5d		 pop	 ebp

; 610  : 		m_pCurrentModelInstance->Deform(c_pWorldMatrix);

  0000b	e9 00 00 00 00	 jmp	 ?Deform@CGrannyModelInstance@@QAEXPBUD3DXMATRIX@@@Z ; CGrannyModelInstance::Deform
$LN2@Deform:

; 611  : }

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
?Deform@CGrannyLODController@@QAEXPBUD3DXMATRIX@@@Z ENDP ; CGrannyLODController::Deform
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
;	COMDAT ?UpdateSkeleton@CGrannyLODController@@QAEXPBUD3DXMATRIX@@M@Z
_TEXT	SEGMENT
_c_pWorldMatrix$ = 8					; size = 4
_fElapsedTime$ = 12					; size = 4
?UpdateSkeleton@CGrannyLODController@@QAEXPBUD3DXMATRIX@@M@Z PROC ; CGrannyLODController::UpdateSkeleton, COMDAT
; _this$ = ecx

; 586  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 587  : 	if (m_pCurrentModelInstance)

  00003	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00006	85 c9		 test	 ecx, ecx
  00008	74 13		 je	 SHORT $LN2@UpdateSkel

; 588  : 		m_pCurrentModelInstance->UpdateSkeleton(c_pWorldMatrix, fElapsedTime);

  0000a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fElapsedTime$[ebp]
  0000f	51		 push	 ecx
  00010	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00015	ff 75 08	 push	 DWORD PTR _c_pWorldMatrix$[ebp]
  00018	e8 00 00 00 00	 call	 ?UpdateSkeleton@CGrannyModelInstance@@QAEXPBUD3DXMATRIX@@M@Z ; CGrannyModelInstance::UpdateSkeleton
$LN2@UpdateSkel:

; 589  : }

  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
?UpdateSkeleton@CGrannyLODController@@QAEXPBUD3DXMATRIX@@M@Z ENDP ; CGrannyLODController::UpdateSkeleton
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
;	COMDAT ?UpdateTime@CGrannyLODController@@QAEXM@Z
_TEXT	SEGMENT
_fElapsedTime$ = 8					; size = 4
?UpdateTime@CGrannyLODController@@QAEXM@Z PROC		; CGrannyLODController::UpdateTime, COMDAT
; _this$ = ecx

; 521  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 522  : 	assert(m_pCurrentModelInstance != NULL);
; 523  : 
; 524  : 	m_pCurrentModelInstance->Update(m_dwLODAniFPS);

  00006	ff 76 08	 push	 DWORD PTR [esi+8]
  00009	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  0000c	e8 00 00 00 00	 call	 ?Update@CGrannyModelInstance@@QAEXK@Z ; CGrannyModelInstance::Update

; 525  : 
; 526  : 	//DWORD t3=timeGetTime();
; 527  : 	m_pCurrentModelInstance->UpdateLocalTime(fElapsedTime);

  00011	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fElapsedTime$[ebp]
  00016	51		 push	 ecx
  00017	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  0001a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001f	e8 00 00 00 00	 call	 ?UpdateLocalTime@CGrannyModelInstance@@QAEXM@Z ; CGrannyModelInstance::UpdateLocalTime
  00024	5e		 pop	 esi

; 528  : 
; 529  : 	//DWORD t4=timeGetTime();
; 530  : 
; 531  : #ifdef __PERFORMANCE_CHECKER__
; 532  : 	{
; 533  : 		static FILE* fp=fopen("perf_lod_update.txt", "w");
; 534  : 
; 535  : 		if (t4-t1>3)
; 536  : 		{
; 537  : 			fprintf(fp, "LOD.Total %d (Time %f)\n", t4-t1, timeGetTime()/1000.0f);
; 538  : 			fprintf(fp, "LOD.SMI %d\n", t2-t1);
; 539  : 			fprintf(fp, "LOD.UP %d\n", t3-t2);
; 540  : 			fprintf(fp, "LOD.UL %d\n", t4-t3);
; 541  : 			fprintf(fp, "-------------------------------- \n");
; 542  : 			fflush(fp);
; 543  : 		}
; 544  : 		fflush(fp);
; 545  : 	}
; 546  : #endif
; 547  : }

  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
?UpdateTime@CGrannyLODController@@QAEXM@Z ENDP		; CGrannyLODController::UpdateTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
;	COMDAT ?UpdateLODLevel@CGrannyLODController@@QAEXMM@Z
_TEXT	SEGMENT
tv908 = -4						; size = 4
tv993 = 8						; size = 4
_fLODFactor$1 = 8					; size = 4
_fDistanceFromCenter$ = 8				; size = 4
tv982 = 12						; size = 4
_bLODLevel$2 = 12					; size = 1
_fDistanceFromCamera$ = 12				; size = 4
?UpdateLODLevel@CGrannyLODController@@QAEXMM@Z PROC	; CGrannyLODController::UpdateLODLevel, COMDAT
; _this$ = ecx

; 449  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx

; 450  : 	if (m_que_pkModelInst.size()<=1)

  00009	83 7f 34 01	 cmp	 DWORD PTR [edi+52], 1
  0000d	0f 86 d8 01 00
	00		 jbe	 $LN17@UpdateLODL

; 451  : 		return;
; 452  : 
; 453  : 	assert(m_pCurrentModelInstance != NULL);
; 454  : 
; 455  : 
; 456  : 	if (fDistanceFromCenter > LOD_APPLY_MIN)

  00013	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fDistanceFromCenter$[ebp]
  00018	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@43fa0000
  0001f	53		 push	 ebx
  00020	56		 push	 esi
  00021	0f 86 77 01 00
	00		 jbe	 $LN3@UpdateLODL

; 457  : 	{
; 458  : 		// 100fps 50fps 33fps 25fps 20fps
; 459  : 		// 10ms 20ms 30ms 40ms 50ms
; 460  : 		float fLODFactor = fMINMAX(0.0f, (m_fLODDistance-fDistanceFromCamera), m_fLODDistance);

  00027	f3 0f 10 47 04	 movss	 xmm0, DWORD PTR [edi+4]
  0002c	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0002f	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00035	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _fDistanceFromCamera$[ebp]
  0003a	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00040	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  00047	e8 00 00 00 00	 call	 ?fMINMAX@@YAMMMM@Z	; fMINMAX

; 461  : 
; 462  : 		if (m_fLODDistance>0.0f)

  0004c	f3 0f 10 57 04	 movss	 xmm2, DWORD PTR [edi+4]
  00051	0f 57 c0	 xorps	 xmm0, xmm0
  00054	d9 5d 08	 fstp	 DWORD PTR _fLODFactor$1[ebp]
  00057	f3 0f 10 5d 08	 movss	 xmm3, DWORD PTR _fLODFactor$1[ebp]
  0005c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005f	0f 2f d0	 comiss	 xmm2, xmm0
  00062	f3 0f 11 55 fc	 movss	 DWORD PTR tv908[ebp], xmm2
  00067	76 2a		 jbe	 SHORT $LN5@UpdateLODL

; 463  : 			m_dwLODAniFPS = (DWORD) ((CGrannyModelInstance::ANIFPS_MAX - CGrannyModelInstance::ANIFPS_MIN) * fLODFactor / m_fLODDistance + CGrannyModelInstance::ANIFPS_MIN);

  00069	0f 28 c3	 movaps	 xmm0, xmm3
  0006c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42b40000
  00074	f3 0f 5e c2	 divss	 xmm0, xmm2
  00078	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@41f00000
  00080	e8 00 00 00 00	 call	 __ftol3
  00085	f3 0f 10 55 fc	 movss	 xmm2, DWORD PTR tv908[ebp]
  0008a	8b c8		 mov	 ecx, eax
  0008c	f3 0f 10 5d 08	 movss	 xmm3, DWORD PTR _fLODFactor$1[ebp]
  00091	eb 05		 jmp	 SHORT $LN6@UpdateLODL
$LN5@UpdateLODL:

; 464  : 		else
; 465  : 			m_dwLODAniFPS = CGrannyModelInstance::ANIFPS_MIN;

  00093	b9 1e 00 00 00	 mov	 ecx, 30			; 0000001eH
$LN6@UpdateLODL:

; 466  : 
; 467  : 		assert(m_dwLODAniFPS > 0);
; 468  : 		m_dwLODAniFPS /= 10;
; 469  : 		m_dwLODAniFPS *= 10;
; 470  : 
; 471  : 		float fLODStep = m_fLODDistance / m_que_pkModelInst.size();

  00098	8b 5f 34	 mov	 ebx, DWORD PTR [edi+52]
  0009b	b8 cd cc cc cc	 mov	 eax, -858993459		; cccccccdH
  000a0	f7 e1		 mul	 ecx
  000a2	0f 28 ca	 movaps	 xmm1, xmm2
  000a5	66 0f 6e c3	 movd	 xmm0, ebx
  000a9	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  000ad	c1 ea 03	 shr	 edx, 3
  000b0	8d 04 92	 lea	 eax, DWORD PTR [edx+edx*4]
  000b3	03 c0		 add	 eax, eax
  000b5	89 47 08	 mov	 DWORD PTR [edi+8], eax
  000b8	8b c3		 mov	 eax, ebx
  000ba	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000bd	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  000c6	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  000ca	f3 0f 5e c8	 divss	 xmm1, xmm0

; 472  : 		BYTE bLODLevel = BYTE(fLODFactor / fLODStep);
; 473  : 
; 474  : 		if (m_fLODDistance <= 5000.0f)

  000ce	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@459c4000
  000d6	0f 2f c2	 comiss	 xmm0, xmm2
  000d9	f3 0f 5e d9	 divss	 xmm3, xmm1
  000dd	f3 0f 2c c3	 cvttss2si eax, xmm3
  000e1	72 4d		 jb	 SHORT $LN7@UpdateLODL

; 475  : 		{
; 476  : 			if (fDistanceFromCamera < 500.0f)

  000e3	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _fDistanceFromCamera$[ebp]
  000e8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43fa0000
  000f0	0f 2f c1	 comiss	 xmm0, xmm1
  000f3	76 04		 jbe	 SHORT $LN8@UpdateLODL

; 477  : 			{
; 478  : 				bLODLevel = 0;

  000f5	33 d2		 xor	 edx, edx

; 479  : 			}

  000f7	eb 27		 jmp	 SHORT $LN12@UpdateLODL
$LN8@UpdateLODL:

; 480  : 			else if (fDistanceFromCamera < 1500.0f)

  000f9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@44bb8000
  00101	0f 2f c1	 comiss	 xmm0, xmm1
  00104	76 07		 jbe	 SHORT $LN10@UpdateLODL

; 481  : 			{
; 482  : 				bLODLevel = 1;

  00106	ba 01 00 00 00	 mov	 edx, 1

; 483  : 			}

  0010b	eb 13		 jmp	 SHORT $LN12@UpdateLODL
$LN10@UpdateLODL:

; 484  : 			else if (fDistanceFromCamera < 2500.0f)

  0010d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@451c4000
  00115	33 d2		 xor	 edx, edx
  00117	0f 2f c1	 comiss	 xmm0, xmm1
  0011a	0f 96 c2	 setbe	 dl
  0011d	83 c2 02	 add	 edx, 2
$LN12@UpdateLODL:

; 485  : 			{
; 486  : 				bLODLevel = 2;
; 487  : 			}
; 488  : 			else
; 489  : 			{
; 490  : 				bLODLevel = 3;
; 491  : 			}
; 492  : 
; 493  : 			bLODLevel = (BYTE) (m_que_pkModelInst.size() - min(bLODLevel, m_que_pkModelInst.size()) - 1);

  00120	0f b6 c3	 movzx	 eax, bl
  00123	3b d3		 cmp	 edx, ebx
  00125	0f b6 ca	 movzx	 ecx, dl
  00128	0f 43 c8	 cmovae	 ecx, eax
  0012b	2a d9		 sub	 bl, cl
  0012d	8d 43 ff	 lea	 eax, DWORD PTR [ebx-1]
$LN7@UpdateLODL:

; 494  : 		}
; 495  : 
; 496  : 		if (ms_isMinLODModeEnable)

  00130	33 c9		 xor	 ecx, ecx
  00132	0f b6 c0	 movzx	 eax, al
  00135	38 0d 00 00 00
	00		 cmp	 BYTE PTR ?ms_isMinLODModeEnable@@3_NA, cl ; ms_isMinLODModeEnable
  0013b	0f 45 c1	 cmovne	 eax, ecx

; 497  : 			bLODLevel=0;
; 498  : 
; 499  : 		SetLODLevel(bLODLevel);

  0013e	8b cf		 mov	 ecx, edi
  00140	88 45 0c	 mov	 BYTE PTR _bLODLevel$2[ebp], al
  00143	ff 75 0c	 push	 DWORD PTR _bLODLevel$2[ebp]
  00146	e8 00 00 00 00	 call	 ?SetLODLevel@CGrannyLODController@@QAEXE@Z ; CGrannyLODController::SetLODLevel

; 501  : 		if (m_pCurrentModelInstance != m_que_pkModelInst[m_bLODLevel])

  0014b	0f b6 47 1c	 movzx	 eax, BYTE PTR [edi+28]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 43   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

  0014f	8b 77 30	 mov	 esi, DWORD PTR [edi+48]

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00152	8b 4f 2c	 mov	 ecx, DWORD PTR [edi+44]
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 501  : 		if (m_pCurrentModelInstance != m_que_pkModelInst[m_bLODLevel])

  00155	89 45 0c	 mov	 DWORD PTR tv982[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00158	49		 dec	 ecx
  00159	89 4d 08	 mov	 DWORD PTR tv993[ebp], ecx
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 501  : 		if (m_pCurrentModelInstance != m_que_pkModelInst[m_bLODLevel])

  0015c	8d 14 30	 lea	 edx, DWORD PTR [eax+esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0015f	8b c2		 mov	 eax, edx

; 47   :         _Size_type _Off   = _Myoff % _Block_size;

  00161	83 e2 03	 and	 edx, 3

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00164	c1 e8 02	 shr	 eax, 2
  00167	23 c1		 and	 eax, ecx
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 501  : 		if (m_pCurrentModelInstance != m_que_pkModelInst[m_bLODLevel])

  00169	8b 4f 28	 mov	 ecx, DWORD PTR [edi+40]
  0016c	8b 0c 81	 mov	 ecx, DWORD PTR [ecx+eax*4]
  0016f	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00172	3b 04 91	 cmp	 eax, DWORD PTR [ecx+edx*4]
  00175	74 72		 je	 SHORT $LN111@UpdateLODL

; 503  : 			SetCurrentModelInstance(m_que_pkModelInst[m_bLODLevel]);

  00177	03 75 0c	 add	 esi, DWORD PTR tv982[ebp]
  0017a	8b 47 28	 mov	 eax, DWORD PTR [edi+40]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0017d	8b ce		 mov	 ecx, esi
  0017f	c1 e9 02	 shr	 ecx, 2

; 47   :         _Size_type _Off   = _Myoff % _Block_size;

  00182	83 e6 03	 and	 esi, 3

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00185	23 4d 08	 and	 ecx, DWORD PTR tv993[ebp]
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 503  : 			SetCurrentModelInstance(m_que_pkModelInst[m_bLODLevel]);

  00188	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 514  : 				SetCurrentModelInstance(m_que_pkModelInst.back());

  0018b	8b cf		 mov	 ecx, edi
  0018d	ff 34 b0	 push	 DWORD PTR [eax+esi*4]
  00190	e8 00 00 00 00	 call	 ?SetCurrentModelInstance@CGrannyLODController@@IAEXPAVCGrannyModelInstance@@@Z ; CGrannyLODController::SetCurrentModelInstance
  00195	5e		 pop	 esi
  00196	5b		 pop	 ebx
  00197	5f		 pop	 edi

; 515  : 			}
; 516  : 		}
; 517  : 	}
; 518  : }

  00198	8b e5		 mov	 esp, ebp
  0019a	5d		 pop	 ebp
  0019b	c2 08 00	 ret	 8
$LN3@UpdateLODL:

; 504  : 		}
; 505  : 	}
; 506  : 	else
; 507  : 	{
; 508  : 		m_dwLODAniFPS=CGrannyModelInstance::ANIFPS_MAX;

  0019e	c7 47 08 78 00
	00 00		 mov	 DWORD PTR [edi+8], 120	; 00000078H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 955  :         return _Unchecked_iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

  001a5	8b 5f 34	 mov	 ebx, DWORD PTR [edi+52]
  001a8	03 5f 30	 add	 ebx, DWORD PTR [edi+48]

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  001ab	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 512  : 			if (m_pCurrentModelInstance != m_que_pkModelInst.back())

  001ae	8b 4f 28	 mov	 ecx, DWORD PTR [edi+40]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  001b1	48		 dec	 eax

; 1105 :         return *_Prev_iter(_Unchecked_end());

  001b2	8d 73 ff	 lea	 esi, DWORD PTR [ebx-1]

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  001b5	8b d6		 mov	 edx, esi

; 48   :         return _Mycont->_Map[_Block][_Off];

  001b7	83 e6 03	 and	 esi, 3

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  001ba	c1 ea 02	 shr	 edx, 2
  001bd	23 d0		 and	 edx, eax
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 512  : 			if (m_pCurrentModelInstance != m_que_pkModelInst.back())

  001bf	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  001c2	8b 0c 91	 mov	 ecx, DWORD PTR [ecx+edx*4]
  001c5	3b 04 b1	 cmp	 eax, DWORD PTR [ecx+esi*4]
  001c8	74 1f		 je	 SHORT $LN111@UpdateLODL
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  001ca	8b 4f 2c	 mov	 ecx, DWORD PTR [edi+44]

; 1105 :         return *_Prev_iter(_Unchecked_end());

  001cd	4b		 dec	 ebx

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  001ce	8b c3		 mov	 eax, ebx
  001d0	49		 dec	 ecx
  001d1	c1 e8 02	 shr	 eax, 2

; 48   :         return _Mycont->_Map[_Block][_Off];

  001d4	83 e3 03	 and	 ebx, 3

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  001d7	23 c8		 and	 ecx, eax
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 514  : 				SetCurrentModelInstance(m_que_pkModelInst.back());

  001d9	8b 47 28	 mov	 eax, DWORD PTR [edi+40]
  001dc	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  001df	8b cf		 mov	 ecx, edi
  001e1	ff 34 98	 push	 DWORD PTR [eax+ebx*4]
  001e4	e8 00 00 00 00	 call	 ?SetCurrentModelInstance@CGrannyLODController@@IAEXPAVCGrannyModelInstance@@@Z ; CGrannyLODController::SetCurrentModelInstance
$LN111@UpdateLODL:
  001e9	5e		 pop	 esi
  001ea	5b		 pop	 ebx
$LN17@UpdateLODL:
  001eb	5f		 pop	 edi

; 515  : 			}
; 516  : 		}
; 517  : 	}
; 518  : }

  001ec	8b e5		 mov	 esp, ebp
  001ee	5d		 pop	 ebp
  001ef	c2 08 00	 ret	 8
?UpdateLODLevel@CGrannyLODController@@QAEXMM@Z ENDP	; CGrannyLODController::UpdateLODLevel
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
;	COMDAT ?Update@CGrannyLODController@@QAEXMMM@Z
_TEXT	SEGMENT
_fElapsedTime$ = 8					; size = 4
_fDistanceFromCenter$ = 12				; size = 4
_fDistanceFromCamera$ = 16				; size = 4
?Update@CGrannyLODController@@QAEXMMM@Z PROC		; CGrannyLODController::Update, COMDAT
; _this$ = ecx

; 443  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 444  : 	UpdateLODLevel(fDistanceFromCenter, fDistanceFromCamera);

  00003	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fDistanceFromCamera$[ebp]
  00008	56		 push	 esi
  00009	83 ec 08	 sub	 esp, 8
  0000c	8b f1		 mov	 esi, ecx
  0000e	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00014	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fDistanceFromCenter$[ebp]
  00019	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001e	e8 00 00 00 00	 call	 ?UpdateLODLevel@CGrannyLODController@@QAEXMM@Z ; CGrannyLODController::UpdateLODLevel

; 445  : 	UpdateTime(fElapsedTime);

  00023	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fElapsedTime$[ebp]
  00028	51		 push	 ecx
  00029	8b ce		 mov	 ecx, esi
  0002b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00030	e8 00 00 00 00	 call	 ?UpdateTime@CGrannyLODController@@QAEXM@Z ; CGrannyLODController::UpdateTime
  00035	5e		 pop	 esi

; 446  : }

  00036	5d		 pop	 ebp
  00037	c2 0c 00	 ret	 12			; 0000000cH
?Update@CGrannyLODController@@QAEXMMM@Z ENDP		; CGrannyLODController::Update
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
;	COMDAT ?BlendRenderWithTwoTexture@CGrannyLODController@@QAEXXZ
_TEXT	SEGMENT
?BlendRenderWithTwoTexture@CGrannyLODController@@QAEXXZ PROC ; CGrannyLODController::BlendRenderWithTwoTexture, COMDAT
; _this$ = ecx

; 438  : 	assert(m_pCurrentModelInstance != NULL);
; 439  : 	m_pCurrentModelInstance->BlendRenderWithTwoTexture();

  00000	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00003	e9 00 00 00 00	 jmp	 ?BlendRenderWithTwoTexture@CGrannyModelInstance@@QAEXXZ ; CGrannyModelInstance::BlendRenderWithTwoTexture
?BlendRenderWithTwoTexture@CGrannyLODController@@QAEXXZ ENDP ; CGrannyLODController::BlendRenderWithTwoTexture
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
;	COMDAT ?BlendRenderWithOneTexture@CGrannyLODController@@QAEXXZ
_TEXT	SEGMENT
?BlendRenderWithOneTexture@CGrannyLODController@@QAEXXZ PROC ; CGrannyLODController::BlendRenderWithOneTexture, COMDAT
; _this$ = ecx

; 426  : 	assert(m_pCurrentModelInstance != NULL);
; 427  : 	m_pCurrentModelInstance->BlendRenderWithOneTexture();

  00000	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00003	e9 00 00 00 00	 jmp	 ?BlendRenderWithOneTexture@CGrannyModelInstance@@QAEXXZ ; CGrannyModelInstance::BlendRenderWithOneTexture
?BlendRenderWithOneTexture@CGrannyLODController@@QAEXXZ ENDP ; CGrannyLODController::BlendRenderWithOneTexture
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
;	COMDAT ?RenderWithTwoTexture@CGrannyLODController@@QAEXXZ
_TEXT	SEGMENT
?RenderWithTwoTexture@CGrannyLODController@@QAEXXZ PROC	; CGrannyLODController::RenderWithTwoTexture, COMDAT
; _this$ = ecx

; 432  : 	assert(m_pCurrentModelInstance != NULL);
; 433  : 	m_pCurrentModelInstance->RenderWithTwoTexture();

  00000	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00003	e9 00 00 00 00	 jmp	 ?RenderWithTwoTexture@CGrannyModelInstance@@QAEXXZ ; CGrannyModelInstance::RenderWithTwoTexture
?RenderWithTwoTexture@CGrannyLODController@@QAEXXZ ENDP	; CGrannyLODController::RenderWithTwoTexture
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
;	COMDAT ?RenderWithOneTexture@CGrannyLODController@@QAEXXZ
_TEXT	SEGMENT
?RenderWithOneTexture@CGrannyLODController@@QAEXXZ PROC	; CGrannyLODController::RenderWithOneTexture, COMDAT
; _this$ = ecx

; 403  : 	assert(m_pCurrentModelInstance != NULL);
; 404  : 
; 405  : //#define CHECK_LOD
; 406  : #ifdef CHECK_LOD
; 407  : 	if (m_que_pkModelInst.size() > 0 && m_pCurrentModelInstance == m_que_pkModelInst[0])
; 408  : 		m_pCurrentModelInstance->RenderWithoutTexture();
; 409  : 
; 410  : 	if (m_que_pkModelInst.size() > 1 && m_pCurrentModelInstance == m_que_pkModelInst[1])
; 411  : 		m_pCurrentModelInstance->RenderWithOneTexture();
; 412  : 
; 413  : 	if (m_que_pkModelInst.size() > 2 && m_pCurrentModelInstance == m_que_pkModelInst[2])
; 414  : 		m_pCurrentModelInstance->RenderWithOneTexture();
; 415  : 
; 416  : 	if (m_que_pkModelInst.size() > 3 && m_pCurrentModelInstance == m_que_pkModelInst[3])
; 417  : 		m_pCurrentModelInstance->RenderWithOneTexture();
; 418  : 
; 419  : #else
; 420  : 	m_pCurrentModelInstance->RenderWithOneTexture();

  00000	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00003	e9 00 00 00 00	 jmp	 ?RenderWithOneTexture@CGrannyModelInstance@@QAEXXZ ; CGrannyModelInstance::RenderWithOneTexture
?RenderWithOneTexture@CGrannyLODController@@QAEXXZ ENDP	; CGrannyLODController::RenderWithOneTexture
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
;	COMDAT ?SetSpecularInfo@CGrannyLODController@@QAEXPBDHM@Z
_TEXT	SEGMENT
_c_szMtrlName$ = 8					; size = 4
_bEnable$ = 12						; size = 4
_fPower$ = 16						; size = 4
?SetSpecularInfo@CGrannyLODController@@QAEXPBDHM@Z PROC	; CGrannyLODController::SetSpecularInfo, COMDAT
; _this$ = ecx

; 170  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1285 :             _Myproxy = _Parent->_Myproxy;

  00008	8b 5f 24	 mov	 ebx, DWORD PTR [edi+36]
  0000b	8b 77 30	 mov	 esi, DWORD PTR [edi+48]
  0000e	66 90		 npad	 2
$LL41@SetSpecula:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 939  :         return iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

  00010	8b 47 34	 mov	 eax, DWORD PTR [edi+52]
  00013	03 47 30	 add	 eax, DWORD PTR [edi+48]

; 358  :         return this->_Myoff == _Right._Myoff;

  00016	3b f0		 cmp	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 172  : 	for (i=m_que_pkModelInst.begin(); i!=m_que_pkModelInst.end(); ++i)

  00018	74 3c		 je	 SHORT $LN3@SetSpecula
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1293 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

  0001a	85 db		 test	 ebx, ebx
  0001c	74 04		 je	 SHORT $LN66@SetSpecula
  0001e	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00020	eb 02		 jmp	 SHORT $LN67@SetSpecula
$LN66@SetSpecula:
  00022	33 c9		 xor	 ecx, ecx
$LN67@SetSpecula:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00024	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00027	8b d6		 mov	 edx, esi
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 175  : 		pkModelInst->SetSpecularInfo(c_szMtrlName, bEnable, fPower);

  00029	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fPower$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0002e	48		 dec	 eax
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 175  : 		pkModelInst->SetSpecularInfo(c_szMtrlName, bEnable, fPower);

  0002f	51		 push	 ecx
  00030	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00033	c1 ea 02	 shr	 edx, 2
  00036	23 d0		 and	 edx, eax
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 175  : 		pkModelInst->SetSpecularInfo(c_szMtrlName, bEnable, fPower);

  00038	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003d	ff 75 0c	 push	 DWORD PTR _bEnable$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 268  :         _Size_type _Off   = _Myoff % _Block_size;

  00040	8b c6		 mov	 eax, esi
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 175  : 		pkModelInst->SetSpecularInfo(c_szMtrlName, bEnable, fPower);

  00042	ff 75 08	 push	 DWORD PTR _c_szMtrlName$[ebp]
  00045	8b 0c 91	 mov	 ecx, DWORD PTR [ecx+edx*4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 268  :         _Size_type _Off   = _Myoff % _Block_size;

  00048	83 e0 03	 and	 eax, 3
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 175  : 		pkModelInst->SetSpecularInfo(c_szMtrlName, bEnable, fPower);

  0004b	8b 0c 81	 mov	 ecx, DWORD PTR [ecx+eax*4]
  0004e	e8 00 00 00 00	 call	 ?SetSpecularInfo@CGrannyModelInstance@@QAEXPBDHM@Z ; CGrannyModelInstance::SetSpecularInfo
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 283  :         ++_Myoff;

  00053	46		 inc	 esi
  00054	eb ba		 jmp	 SHORT $LL41@SetSpecula
$LN3@SetSpecula:
  00056	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 177  : }

  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	5d		 pop	 ebp
  0005a	c2 0c 00	 ret	 12			; 0000000cH
?SetSpecularInfo@CGrannyLODController@@QAEXPBDHM@Z ENDP	; CGrannyLODController::SetSpecularInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
;	COMDAT ?SetMaterialData@CGrannyLODController@@QAEXPBDABUSMaterialData@@@Z
_TEXT	SEGMENT
_c_szImageName$ = 8					; size = 4
_c_rkMaterialData$ = 12					; size = 4
?SetMaterialData@CGrannyLODController@@QAEXPBDABUSMaterialData@@@Z PROC ; CGrannyLODController::SetMaterialData, COMDAT
; _this$ = ecx

; 160  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1285 :             _Myproxy = _Parent->_Myproxy;

  00008	8b 5f 24	 mov	 ebx, DWORD PTR [edi+36]
  0000b	8b 77 30	 mov	 esi, DWORD PTR [edi+48]
  0000e	66 90		 npad	 2
$LL41@SetMateria:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 939  :         return iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

  00010	8b 47 34	 mov	 eax, DWORD PTR [edi+52]
  00013	03 47 30	 add	 eax, DWORD PTR [edi+48]

; 358  :         return this->_Myoff == _Right._Myoff;

  00016	3b f0		 cmp	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 162  : 	for (i=m_que_pkModelInst.begin(); i!=m_que_pkModelInst.end(); ++i)

  00018	74 31		 je	 SHORT $LN3@SetMateria
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1293 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

  0001a	85 db		 test	 ebx, ebx
  0001c	74 04		 je	 SHORT $LN66@SetMateria
  0001e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00020	eb 02		 jmp	 SHORT $LN67@SetMateria
$LN66@SetMateria:
  00022	33 c0		 xor	 eax, eax
$LN67@SetMateria:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00024	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00027	8b d6		 mov	 edx, esi
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 165  : 		pkModelInst->SetMaterialData(c_szImageName, c_rkMaterialData);

  00029	ff 75 0c	 push	 DWORD PTR _c_rkMaterialData$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0002c	49		 dec	 ecx
  0002d	c1 ea 02	 shr	 edx, 2
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 165  : 		pkModelInst->SetMaterialData(c_szImageName, c_rkMaterialData);

  00030	ff 75 08	 push	 DWORD PTR _c_szImageName$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00033	23 d1		 and	 edx, ecx
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 165  : 		pkModelInst->SetMaterialData(c_szImageName, c_rkMaterialData);

  00035	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 268  :         _Size_type _Off   = _Myoff % _Block_size;

  00038	8b c6		 mov	 eax, esi
  0003a	83 e0 03	 and	 eax, 3
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 165  : 		pkModelInst->SetMaterialData(c_szImageName, c_rkMaterialData);

  0003d	8b 0c 91	 mov	 ecx, DWORD PTR [ecx+edx*4]
  00040	8b 0c 81	 mov	 ecx, DWORD PTR [ecx+eax*4]
  00043	e8 00 00 00 00	 call	 ?SetMaterialData@CGrannyModelInstance@@QAEXPBDABUSMaterialData@@@Z ; CGrannyModelInstance::SetMaterialData
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 283  :         ++_Myoff;

  00048	46		 inc	 esi
  00049	eb c5		 jmp	 SHORT $LL41@SetMateria
$LN3@SetMateria:
  0004b	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 167  : }

  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	5d		 pop	 ebp
  0004f	c2 08 00	 ret	 8
?SetMaterialData@CGrannyLODController@@QAEXPBDABUSMaterialData@@@Z ENDP ; CGrannyLODController::SetMaterialData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
;	COMDAT ?SetMaterialImagePointer@CGrannyLODController@@QAEXPBDPAVCGraphicImage@@@Z
_TEXT	SEGMENT
_c_szImageName$ = 8					; size = 4
_pImage$ = 12						; size = 4
?SetMaterialImagePointer@CGrannyLODController@@QAEXPBDPAVCGraphicImage@@@Z PROC ; CGrannyLODController::SetMaterialImagePointer, COMDAT
; _this$ = ecx

; 150  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1285 :             _Myproxy = _Parent->_Myproxy;

  00008	8b 5f 24	 mov	 ebx, DWORD PTR [edi+36]
  0000b	8b 77 30	 mov	 esi, DWORD PTR [edi+48]
  0000e	66 90		 npad	 2
$LL41@SetMateria:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 939  :         return iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

  00010	8b 47 34	 mov	 eax, DWORD PTR [edi+52]
  00013	03 47 30	 add	 eax, DWORD PTR [edi+48]

; 358  :         return this->_Myoff == _Right._Myoff;

  00016	3b f0		 cmp	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 152  : 	for (i=m_que_pkModelInst.begin(); i!=m_que_pkModelInst.end(); ++i)

  00018	74 31		 je	 SHORT $LN3@SetMateria
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1293 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

  0001a	85 db		 test	 ebx, ebx
  0001c	74 04		 je	 SHORT $LN66@SetMateria
  0001e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00020	eb 02		 jmp	 SHORT $LN67@SetMateria
$LN66@SetMateria:
  00022	33 c0		 xor	 eax, eax
$LN67@SetMateria:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00024	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00027	8b d6		 mov	 edx, esi
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 155  : 		pkModelInst->SetMaterialImagePointer(c_szImageName, pImage);

  00029	ff 75 0c	 push	 DWORD PTR _pImage$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0002c	49		 dec	 ecx
  0002d	c1 ea 02	 shr	 edx, 2
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 155  : 		pkModelInst->SetMaterialImagePointer(c_szImageName, pImage);

  00030	ff 75 08	 push	 DWORD PTR _c_szImageName$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00033	23 d1		 and	 edx, ecx
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 155  : 		pkModelInst->SetMaterialImagePointer(c_szImageName, pImage);

  00035	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 268  :         _Size_type _Off   = _Myoff % _Block_size;

  00038	8b c6		 mov	 eax, esi
  0003a	83 e0 03	 and	 eax, 3
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 155  : 		pkModelInst->SetMaterialImagePointer(c_szImageName, pImage);

  0003d	8b 0c 91	 mov	 ecx, DWORD PTR [ecx+edx*4]
  00040	8b 0c 81	 mov	 ecx, DWORD PTR [ecx+eax*4]
  00043	e8 00 00 00 00	 call	 ?SetMaterialImagePointer@CGrannyModelInstance@@QAEXPBDPAVCGraphicImage@@@Z ; CGrannyModelInstance::SetMaterialImagePointer
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 283  :         ++_Myoff;

  00048	46		 inc	 esi
  00049	eb c5		 jmp	 SHORT $LL41@SetMateria
$LN3@SetMateria:
  0004b	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 157  : }

  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	5d		 pop	 ebp
  0004f	c2 08 00	 ret	 8
?SetMaterialImagePointer@CGrannyLODController@@QAEXPBDPAVCGraphicImage@@@Z ENDP ; CGrannyLODController::SetMaterialImagePointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
;	COMDAT ?SetLODLevel@CGrannyLODController@@QAEXE@Z
_TEXT	SEGMENT
_bLodLevel$ = 8						; size = 1
?SetLODLevel@CGrannyLODController@@QAEXE@Z PROC		; CGrannyLODController::SetLODLevel, COMDAT
; _this$ = ecx

; 380  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 381  : 	assert(m_que_pkModelInst.size() > 0);
; 382  : 
; 383  : 	if (m_que_pkModelInst.size() > 0)

  00006	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  00009	85 c9		 test	 ecx, ecx
  0000b	74 14		 je	 SHORT $LN2@SetLODLeve

; 384  : 		m_bLODLevel	= (BYTE) MIN(m_que_pkModelInst.size() - 1, bLodLevel);

  0000d	0f b6 45 08	 movzx	 eax, BYTE PTR _bLodLevel$[ebp]
  00011	50		 push	 eax
  00012	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ?MIN@@YAHHH@Z		; MIN
  0001b	83 c4 08	 add	 esp, 8
  0001e	88 46 1c	 mov	 BYTE PTR [esi+28], al
$LN2@SetLODLeve:
  00021	5e		 pop	 esi

; 385  : }

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?SetLODLevel@CGrannyLODController@@QAEXE@Z ENDP		; CGrannyLODController::SetLODLevel
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
;	COMDAT ?SetLODLimits@CGrannyLODController@@QAEXMM@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_fFarLOD$ = 12						; size = 4
?SetLODLimits@CGrannyLODController@@QAEXMM@Z PROC	; CGrannyLODController::SetLODLimits, COMDAT
; _this$ = ecx

; 375  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 376  : 	m_fLODDistance = fFarLOD;

  00003	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fFarLOD$[ebp]
  00008	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0

; 377  : }

  0000d	5d		 pop	 ebp
  0000e	c2 08 00	 ret	 8
?SetLODLimits@CGrannyLODController@@QAEXMM@Z ENDP	; CGrannyLODController::SetLODLimits
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
;	COMDAT ?DetachModelInstance@CGrannyLODController@@QAEXPAV1@@Z
_TEXT	SEGMENT
_this$1$ = -12						; size = 4
_itor$1$ = -8						; size = 4
tv719 = -4						; size = 4
$T1 = -4						; size = 4
_pSrcLODController$ = 8					; size = 4
?DetachModelInstance@CGrannyLODController@@QAEXPAV1@@Z PROC ; CGrannyLODController::DetachModelInstance, COMDAT
; _this$ = ecx

; 344  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx

; 345  : 	CGrannyModelInstance * pSrcInstance = pSrcLODController->GetModelInstance();

  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _pSrcLODController$[ebp]
  0000d	89 7d f4	 mov	 DWORD PTR _this$1$[ebp], edi
  00010	e8 00 00 00 00	 call	 ?GetModelInstance@CGrannyLODController@@QAEPAVCGrannyModelInstance@@XZ ; CGrannyLODController::GetModelInstance
  00015	8b f0		 mov	 esi, eax

; 346  : 	if (!pSrcInstance)

  00017	85 f6		 test	 esi, esi
  00019	0f 84 fb 00 00
	00		 je	 $LN1@DetachMode

; 347  : 		return;
; 348  : 
; 349  : 	CGrannyModelInstance * pDestInstance = GetModelInstance();

  0001f	8b cf		 mov	 ecx, edi
  00021	e8 00 00 00 00	 call	 ?GetModelInstance@CGrannyLODController@@QAEPAVCGrannyModelInstance@@XZ ; CGrannyLODController::GetModelInstance

; 350  : 	if (pDestInstance)

  00026	85 c0		 test	 eax, eax
  00028	74 0b		 je	 SHORT $LN6@DetachMode

; 351  : 	{
; 352  : 		pSrcInstance->SetParentModelInstance(NULL, 0);

  0002a	6a 00		 push	 0
  0002c	6a 00		 push	 0
  0002e	8b ce		 mov	 ecx, esi
  00030	e8 00 00 00 00	 call	 ?SetParentModelInstance@CGrannyModelInstance@@QAEXPBV1@H@Z ; CGrannyModelInstance::SetParentModelInstance
$LN6@DetachMode:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00035	8b 77 0c	 mov	 esi, DWORD PTR [edi+12]
  00038	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0003b	89 75 f8	 mov	 DWORD PTR _itor$1$[ebp], esi
  0003e	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  00041	3b c6		 cmp	 eax, esi
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 357  : 	for (; m_AttachedModelDataVector.end() != itor;)

  00043	0f 84 c7 00 00
	00		 je	 $LN107@DetachMode
  00049	8b 4d 08	 mov	 ecx, DWORD PTR _pSrcLODController$[ebp]
  0004c	53		 push	 ebx
  0004d	0f 1f 00	 npad	 3
$LL2@DetachMode:

; 358  : 	{
; 359  : 		TAttachingModelData & rData = *itor;
; 360  : 		if (pSrcLODController == rData.pkLODController)

  00050	8d 5e 1c	 lea	 ebx, DWORD PTR [esi+28]
  00053	3b 0e		 cmp	 ecx, DWORD PTR [esi]
  00055	0f 85 a4 00 00
	00		 jne	 $LN7@DetachMode
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 4898 :     for (; _First != _Last; ++_Dest, (void) ++_First) {

  0005b	3b d8		 cmp	 ebx, eax
  0005d	74 4c		 je	 SHORT $LN30@DetachMode
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1720 :         pointer& _Mylast        = _My_data._Mylast;

  0005f	8d 7e 04	 lea	 edi, DWORD PTR [esi+4]
  00062	8b 75 fc	 mov	 esi, DWORD PTR $T1[ebp]
$LL31@DetachMode:
  00065	8b 03		 mov	 eax, DWORD PTR [ebx]
  00067	89 47 fc	 mov	 DWORD PTR [edi-4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2961 :         if (this == _STD addressof(_Right)) {

  0006a	8d 47 1c	 lea	 eax, DWORD PTR [edi+28]
  0006d	89 45 fc	 mov	 DWORD PTR tv719[ebp], eax
  00070	3b f8		 cmp	 edi, eax
  00072	74 2b		 je	 SHORT $LN29@DetachMode

; 2962 :             return *this;
; 2963 :         }
; 2964 : 
; 2965 :         auto& _Al                 = _Getal();
; 2966 :         auto& _Right_al           = _Right._Getal();
; 2967 :         constexpr auto _Pocma_val = _Choose_pocma_v<_Alty>;
; 2968 :         if constexpr (_Pocma_val == _Pocma_values::_Propagate_allocators) {
; 2969 :             if (_Al != _Right_al) {
; 2970 :                 // intentionally slams into noexcept on OOM, TRANSITION, VSO-466800
; 2971 :                 _Mypair._Myval2._Orphan_all();
; 2972 :                 _Mypair._Myval2._Reload_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Al), _GET_PROXY_ALLOCATOR(_Alty, _Right_al));
; 2973 :             }
; 2974 :         } else if constexpr (_Pocma_val == _Pocma_values::_No_propagate_allocators) {
; 2975 :             if (_Al != _Right_al) {
; 2976 :                 assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);
; 2977 :                 return *this;
; 2978 :             }
; 2979 :         }
; 2980 : 
; 2981 :         _Tidy_deallocate();

  00074	8b cf		 mov	 ecx, edi
  00076	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate

; 2999 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0007b	8b 45 fc	 mov	 eax, DWORD PTR tv719[ebp]
  0007e	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00081	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0
  00084	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  00089	66 0f d6 47 10	 movq	 QWORD PTR [edi+16], xmm0

; 4821 :         _My_data._Mysize = 0;

  0008e	c7 47 2c 00 00
	00 00		 mov	 DWORD PTR [edi+44], 0

; 4822 :         _My_data._Myres  = _BUF_SIZE - 1;

  00095	c7 47 30 0f 00
	00 00		 mov	 DWORD PTR [edi+48], 15	; 0000000fH

; 4823 :         _My_data._Activate_SSO_buffer();
; 4824 : 
; 4825 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4826 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0009c	c6 00 00	 mov	 BYTE PTR [eax], 0
$LN29@DetachMode:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 4898 :     for (; _First != _Last; ++_Dest, (void) ++_First) {

  0009f	83 c3 1c	 add	 ebx, 28			; 0000001cH
  000a2	8b f8		 mov	 edi, eax
  000a4	3b de		 cmp	 ebx, esi
  000a6	75 bd		 jne	 SHORT $LL31@DetachMode
  000a8	8b 75 f8	 mov	 esi, DWORD PTR _itor$1$[ebp]
$LN30@DetachMode:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1730 :         _Alty_traits::destroy(_Getal(), _Unfancy(_Mylast - 1));

  000ab	8b 5d f4	 mov	 ebx, DWORD PTR _this$1$[ebp]
  000ae	8b 7b 10	 mov	 edi, DWORD PTR [ebx+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  000b1	8b 4f fc	 mov	 ecx, DWORD PTR [edi-4]
  000b4	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  000b7	72 28		 jb	 SHORT $LN72@DetachMode
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000b9	8b 47 e8	 mov	 eax, DWORD PTR [edi-24]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  000bc	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000bd	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000c3	72 12		 jb	 SHORT $LN82@DetachMode

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000c5	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000c8	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000cb	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	83 c0 fc	 add	 eax, -4			; fffffffcH
  000d0	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000d3	77 4d		 ja	 SHORT $LN79@DetachMode

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000d5	8b c2		 mov	 eax, edx
$LN82@DetachMode:

; 265  :         ::operator delete(_Ptr, _Bytes);

  000d7	51		 push	 ecx
  000d8	50		 push	 eax
  000d9	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000de	83 c4 08	 add	 esp, 8
$LN72@DetachMode:
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 363  : 		}

  000e1	8b 4d 08	 mov	 ecx, DWORD PTR _pSrcLODController$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  000e4	c7 47 f8 00 00
	00 00		 mov	 DWORD PTR [edi-8], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  000eb	c7 47 fc 0f 00
	00 00		 mov	 DWORD PTR [edi-4], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000f2	c6 47 e8 00	 mov	 BYTE PTR [edi-24], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1732 :         --_Mylast;

  000f6	83 43 10 e4	 add	 DWORD PTR [ebx+16], -28	; ffffffe4H
  000fa	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 363  : 		}

  000fd	eb 05		 jmp	 SHORT $LN120@DetachMode
$LN7@DetachMode:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 79   :         ++_Ptr;

  000ff	8b f3		 mov	 esi, ebx
  00101	89 75 f8	 mov	 DWORD PTR _itor$1$[ebp], esi
$LN120@DetachMode:

; 163  :         return _Ptr == _Right._Ptr;

  00104	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  00107	3b c6		 cmp	 eax, esi
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 357  : 	for (; m_AttachedModelDataVector.end() != itor;)

  00109	0f 85 41 ff ff
	ff		 jne	 $LL2@DetachMode
  0010f	5b		 pop	 ebx
$LN107@DetachMode:

; 364  : 		else
; 365  : 		{
; 366  : 			++itor;
; 367  : 		}
; 368  : 	}
; 369  : 
; 370  : 	// Unlink Parent Data
; 371  : 	pSrcLODController->m_pAttachedParentModel = NULL;

  00110	8b 45 08	 mov	 eax, DWORD PTR _pSrcLODController$[ebp]
  00113	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0
$LN1@DetachMode:

; 372  : }

  0011a	5f		 pop	 edi
  0011b	5e		 pop	 esi
  0011c	8b e5		 mov	 esp, ebp
  0011e	5d		 pop	 ebp
  0011f	c2 04 00	 ret	 4
$LN79@DetachMode:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00122	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN119@DetachMode:
  00127	cc		 int	 3
?DetachModelInstance@CGrannyLODController@@QAEXPAV1@@Z ENDP ; CGrannyLODController::DetachModelInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
;	COMDAT ?AttachModelInstance@CGrannyLODController@@QAEXPAV1@PBD@Z
_TEXT	SEGMENT
$T2 = -60						; size = 4
_this$1$ = -56						; size = 4
_pSrcInstance$1$ = -56					; size = 4
_c_szBoneName$GSCopy$1$ = -52				; size = 4
$T3 = -48						; size = 4
_this$GSCopy$1$ = -48					; size = 4
_AttachingModelData$ = -44				; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pSrcLODController$ = 8					; size = 4
_c_szBoneName$ = 12					; size = 4
?AttachModelInstance@CGrannyLODController@@QAEXPAV1@PBD@Z PROC ; CGrannyLODController::AttachModelInstance, COMDAT
; _this$ = ecx

; 305  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?AttachModelInstance@CGrannyLODController@@QAEXPAV1@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 30	 sub	 esp, 48			; 00000030H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b f9		 mov	 edi, ecx
  0002c	89 7d d0	 mov	 DWORD PTR _this$GSCopy$1$[ebp], edi
  0002f	8b 75 08	 mov	 esi, DWORD PTR _pSrcLODController$[ebp]

; 306  : 	CGrannyModelInstance * pSrcInstance = pSrcLODController->GetModelInstance();

  00032	8b ce		 mov	 ecx, esi
  00034	8b 45 0c	 mov	 eax, DWORD PTR _c_szBoneName$[ebp]
  00037	89 45 cc	 mov	 DWORD PTR _c_szBoneName$GSCopy$1$[ebp], eax
  0003a	e8 00 00 00 00	 call	 ?GetModelInstance@CGrannyLODController@@QAEPAVCGrannyModelInstance@@XZ ; CGrannyLODController::GetModelInstance
  0003f	89 45 c8	 mov	 DWORD PTR _pSrcInstance$1$[ebp], eax

; 307  : 	if (!pSrcInstance)

  00042	85 c0		 test	 eax, eax
  00044	0f 84 7f 01 00
	00		 je	 $LN133@AttachMode

; 308  : 		return;
; 309  : 
; 310  : 	CGrannyModelInstance * pDestInstance = GetModelInstance();

  0004a	8b cf		 mov	 ecx, edi
  0004c	e8 00 00 00 00	 call	 ?GetModelInstance@CGrannyLODController@@QAEPAVCGrannyModelInstance@@XZ ; CGrannyLODController::GetModelInstance

; 311  : 	if (pDestInstance)

  00051	85 c0		 test	 eax, eax
  00053	74 0c		 je	 SHORT $LN6@AttachMode

; 312  : 	{
; 313  : 		pSrcInstance->SetParentModelInstance(pDestInstance, c_szBoneName);

  00055	ff 75 cc	 push	 DWORD PTR _c_szBoneName$GSCopy$1$[ebp]
  00058	8b 4d c8	 mov	 ecx, DWORD PTR _pSrcInstance$1$[ebp]
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?SetParentModelInstance@CGrannyModelInstance@@QAEXPBV1@PBD@Z ; CGrannyModelInstance::SetParentModelInstance
$LN6@AttachMode:

; 314  : 	}
; 315  : 
; 316  : 	if (!pSrcLODController->GetModelInstance())

  00061	8b ce		 mov	 ecx, esi
  00063	e8 00 00 00 00	 call	 ?GetModelInstance@CGrannyLODController@@QAEPAVCGrannyModelInstance@@XZ ; CGrannyLODController::GetModelInstance
  00068	85 c0		 test	 eax, eax
  0006a	0f 84 59 01 00
	00		 je	 $LN133@AttachMode

; 324  : 	for (; m_AttachedModelDataVector.end() != itor;)

  00070	8b 4d d0	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00073	89 7e 18	 mov	 DWORD PTR [esi+24], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1795 :         auto& _My_data = _Mypair._Myval2;

  00076	83 c7 0c	 add	 edi, 12			; 0000000cH
  00079	89 7d c8	 mov	 DWORD PTR _this$1$[ebp], edi

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0007c	8b 07		 mov	 eax, DWORD PTR [edi]
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 324  : 	for (; m_AttachedModelDataVector.end() != itor;)

  0007e	39 41 10	 cmp	 DWORD PTR [ecx+16], eax
  00081	74 1f		 je	 SHORT $LN3@AttachMode
$LL2@AttachMode:

; 325  : 	{
; 326  : 		TAttachingModelData & rData = *itor;
; 327  : 		if (pSrcLODController == rData.pkLODController)

  00083	3b 30		 cmp	 esi, DWORD PTR [eax]
  00085	75 13		 jne	 SHORT $LN8@AttachMode

; 328  : 		{
; 329  : 			itor = m_AttachedModelDataVector.erase(itor);

  00087	50		 push	 eax
  00088	8d 45 c4	 lea	 eax, DWORD PTR $T2[ebp]
  0008b	8b cf		 mov	 ecx, edi
  0008d	50		 push	 eax
  0008e	e8 00 00 00 00	 call	 ?erase@?$vector@USAttachingModelData@CGrannyLODController@@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USAttachingModelData@CGrannyLODController@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USAttachingModelData@CGrannyLODController@@@std@@@std@@@2@@Z ; std::vector<CGrannyLODController::SAttachingModelData,std::allocator<CGrannyLODController::SAttachingModelData> >::erase

; 330  : 		}

  00093	8b 4d d0	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00096	8b 00		 mov	 eax, DWORD PTR [eax]
  00098	eb 03		 jmp	 SHORT $LN31@AttachMode
$LN8@AttachMode:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 79   :         ++_Ptr;

  0009a	83 c0 1c	 add	 eax, 28			; 0000001cH
$LN31@AttachMode:
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 324  : 	for (; m_AttachedModelDataVector.end() != itor;)

  0009d	39 41 10	 cmp	 DWORD PTR [ecx+16], eax
  000a0	75 e1		 jne	 SHORT $LL2@AttachMode
$LN3@AttachMode:
  000a2	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4821 :         _My_data._Mysize = 0;

  000a5	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _AttachingModelData$[ebp+20], 0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000ac	0f 11 45 d8	 movups	 XMMWORD PTR _AttachingModelData$[ebp+4], xmm0

; 4822 :         _My_data._Myres  = _BUF_SIZE - 1;

  000b0	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _AttachingModelData$[ebp+24], 15 ; 0000000fH

; 4823 :         _My_data._Activate_SSO_buffer();
; 4824 : 
; 4825 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4826 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000b7	c6 45 d8 00	 mov	 BYTE PTR _AttachingModelData$[ebp+4], 0
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 338  : 	AttachingModelData.pkLODController = pSrcLODController;

  000bb	89 75 d4	 mov	 DWORD PTR _AttachingModelData$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  000be	8b 75 cc	 mov	 esi, DWORD PTR _c_szBoneName$GSCopy$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 337  : 	TAttachingModelData AttachingModelData;

  000c1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  000c8	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  000cb	0f 1f 44 00 00	 npad	 5
$LL153@AttachMode:
  000d0	8a 06		 mov	 al, BYTE PTR [esi]
  000d2	46		 inc	 esi
  000d3	84 c0		 test	 al, al
  000d5	75 f9		 jne	 SHORT $LL153@AttachMode
  000d7	2b f1		 sub	 esi, ecx
  000d9	83 fe 0f	 cmp	 esi, 15			; 0000000fH

; 3376 :         if (_Count <= _Mypair._Myval2._Myres) {

  000dc	77 17		 ja	 SHORT $LN55@AttachMode

; 119  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000de	56		 push	 esi
  000df	ff 75 cc	 push	 DWORD PTR _c_szBoneName$GSCopy$1$[ebp]
  000e2	8d 45 d8	 lea	 eax, DWORD PTR _AttachingModelData$[ebp+4]

; 3379 :             _Mypair._Myval2._Mysize = _Count;

  000e5	89 75 e8	 mov	 DWORD PTR _AttachingModelData$[ebp+20], esi

; 119  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000e8	50		 push	 eax
  000e9	e8 00 00 00 00	 call	 _memmove

; 3381 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  000ee	c6 44 35 d8 00	 mov	 BYTE PTR _AttachingModelData$[ebp+esi+4], 0

; 3382 :             return *this;

  000f3	eb 7e		 jmp	 SHORT $LN156@AttachMode
$LN55@AttachMode:

; 4734 :         if (_New_size > max_size()) {

  000f5	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  000fb	0f 87 e5 00 00
	00		 ja	 $LN159@AttachMode

; 4714 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00101	8b fe		 mov	 edi, esi
  00103	83 cf 0f	 or	 edi, 15			; 0000000fH
  00106	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 4715 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0010c	76 15		 jbe	 SHORT $LN72@AttachMode

; 4716 :             return _Max;

  0010e	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00113	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00118	50		 push	 eax
  00119	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0011e	83 c4 04	 add	 esp, 4
  00121	eb 30		 jmp	 SHORT $LN157@AttachMode
$LN72@AttachMode:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 47   :     return _Left < _Right ? _Right : _Left;

  00123	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00128	3b f8		 cmp	 edi, eax
  0012a	0f 42 f8	 cmovb	 edi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4741 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0012d	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00130	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00135	72 0b		 jb	 SHORT $LN80@AttachMode

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00137	50		 push	 eax
  00138	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0013d	83 c4 04	 add	 esp, 4
  00140	eb 11		 jmp	 SHORT $LN157@AttachMode
$LN80@AttachMode:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  00142	85 c0		 test	 eax, eax
  00144	74 0b		 je	 SHORT $LN81@AttachMode

; 87   :         return ::operator new(_Bytes);

  00146	50		 push	 eax
  00147	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0014c	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  0014f	eb 02		 jmp	 SHORT $LN157@AttachMode
$LN81@AttachMode:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  00151	33 c0		 xor	 eax, eax
$LN157@AttachMode:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00153	56		 push	 esi
  00154	ff 75 cc	 push	 DWORD PTR _c_szBoneName$GSCopy$1$[ebp]

; 4746 :         _Mypair._Myval2._Mysize = _New_size;

  00157	89 45 d0	 mov	 DWORD PTR $T3[ebp], eax

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0015a	50		 push	 eax

; 4746 :         _Mypair._Myval2._Mysize = _New_size;

  0015b	89 75 e8	 mov	 DWORD PTR _AttachingModelData$[ebp+20], esi

; 4747 :         _Mypair._Myval2._Myres  = _New_capacity;

  0015e	89 7d ec	 mov	 DWORD PTR _AttachingModelData$[ebp+24], edi

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00161	e8 00 00 00 00	 call	 _memcpy

; 3389 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00166	8b 45 d0	 mov	 eax, DWORD PTR $T3[ebp]
  00169	8b 7d c8	 mov	 edi, DWORD PTR _this$1$[ebp]

; 4753 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  0016c	89 45 d8	 mov	 DWORD PTR _AttachingModelData$[ebp+4], eax

; 3389 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  0016f	c6 04 30 00	 mov	 BYTE PTR [eax+esi], 0
$LN156@AttachMode:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

  00173	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00176	8d 4d d4	 lea	 ecx, DWORD PTR _AttachingModelData$[ebp]
  00179	83 c4 0c	 add	 esp, 12			; 0000000cH
  0017c	51		 push	 ecx
  0017d	50		 push	 eax
  0017e	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  00181	74 0f		 je	 SHORT $LN114@AttachMode

; 800  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00183	57		 push	 edi
  00184	e8 00 00 00 00	 call	 ??$construct@USAttachingModelData@CGrannyLODController@@ABU12@@?$_Default_allocator_traits@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@SAXAAV?$allocator@USAttachingModelData@CGrannyLODController@@@1@QAUSAttachingModelData@CGrannyLODController@@ABU34@@Z ; std::_Default_allocator_traits<std::allocator<CGrannyLODController::SAttachingModelData> >::construct<CGrannyLODController::SAttachingModelData,CGrannyLODController::SAttachingModelData const &>
  00189	83 c4 0c	 add	 esp, 12			; 0000000cH

; 801  :             _ASAN_VECTOR_RELEASE_GUARD;
; 802  :         }
; 803  : 
; 804  :         _Orphan_range(_Mylast, _Mylast);
; 805  :         _Ty& _Result = *_Mylast;
; 806  :         ++_Mylast;

  0018c	83 47 04 1c	 add	 DWORD PTR [edi+4], 28	; 0000001cH

; 782  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00190	eb 07		 jmp	 SHORT $LN113@AttachMode
$LN114@AttachMode:

; 783  :         }
; 784  : 
; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00192	8b cf		 mov	 ecx, edi
  00194	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABUSAttachingModelData@CGrannyLODController@@@?$vector@USAttachingModelData@CGrannyLODController@@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@AAEPAUSAttachingModelData@CGrannyLODController@@QAU23@ABU23@@Z ; std::vector<CGrannyLODController::SAttachingModelData,std::allocator<CGrannyLODController::SAttachingModelData> >::_Emplace_reallocate<CGrannyLODController::SAttachingModelData const &>
$LN113@AttachMode:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00199	8b 4d ec	 mov	 ecx, DWORD PTR _AttachingModelData$[ebp+24]
  0019c	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  0019f	72 28		 jb	 SHORT $LN133@AttachMode
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001a1	8b 55 d8	 mov	 edx, DWORD PTR _AttachingModelData$[ebp+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  001a4	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001a5	8b c2		 mov	 eax, edx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  001a7	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001ad	72 10		 jb	 SHORT $LN143@AttachMode

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001af	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  001b2	83 c1 23	 add	 ecx, 35			; 00000023H
  001b5	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001b7	83 c0 fc	 add	 eax, -4			; fffffffcH
  001ba	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001bd	77 2c		 ja	 SHORT $LN160@AttachMode
$LN143@AttachMode:

; 265  :         ::operator delete(_Ptr, _Bytes);

  001bf	51		 push	 ecx
  001c0	52		 push	 edx
  001c1	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001c6	83 c4 08	 add	 esp, 8
$LN133@AttachMode:
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 341  : }

  001c9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001cc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001d3	59		 pop	 ecx
  001d4	5f		 pop	 edi
  001d5	5e		 pop	 esi
  001d6	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001d9	33 cd		 xor	 ecx, ebp
  001db	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e0	8b e5		 mov	 esp, ebp
  001e2	5d		 pop	 ebp
  001e3	c2 08 00	 ret	 8
$LN159@AttachMode:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4735 :             _Xlen_string(); // result too long

  001e6	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN160@AttachMode:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001eb	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN155@AttachMode:
  001f0	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AttachModelInstance@CGrannyLODController@@QAEXPAV1@PBD@Z$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR _AttachingModelData$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1SAttachingModelData@CGrannyLODController@@QAE@XZ
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?AttachModelInstance@CGrannyLODController@@QAEXPAV1@PBD@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AttachModelInstance@CGrannyLODController@@QAEXPAV1@PBD@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AttachModelInstance@CGrannyLODController@@QAEXPAV1@PBD@Z ENDP ; CGrannyLODController::AttachModelInstance
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
;	COMDAT ?AddModel@CGrannyLODController@@QAEXPAVCGraphicThing@@HPAV1@@Z
_TEXT	SEGMENT
_pModelInstance$1$ = -40				; size = 4
__Block$1$ = -36					; size = 4
_iSrcModel$GSCopy$1$ = -36				; size = 4
_pModel$1$ = -36					; size = 4
_this$GSCopy$1$ = -32					; size = 4
_fSize$1 = -32						; size = 4
_vtMax$2 = -28						; size = 12
_vtMin$3 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_pThing$ = 8						; size = 4
_iSrcModel$ = 12					; size = 4
_pSkelLODController$ = 16				; size = 4
?AddModel@CGrannyLODController@@QAEXPAVCGraphicThing@@HPAV1@@Z PROC ; CGrannyLODController::AddModel, COMDAT
; _this$ = ecx

; 221  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _iSrcModel$[ebp]
  00013	56		 push	 esi
  00014	8b 75 10	 mov	 esi, DWORD PTR _pSkelLODController$[ebp]
  00017	57		 push	 edi
  00018	8b 7d 08	 mov	 edi, DWORD PTR _pThing$[ebp]
  0001b	89 4d e0	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  0001e	89 45 dc	 mov	 DWORD PTR _iSrcModel$GSCopy$1$[ebp], eax

; 222  : 	if (!pThing)

  00021	85 ff		 test	 edi, edi
  00023	0f 84 f0 01 00
	00		 je	 $LN53@AddModel

; 225  : 	if (pSkelLODController && pSkelLODController->m_que_pkModelInst.empty())

  00029	85 f6		 test	 esi, esi
  0002b	74 0a		 je	 SHORT $LN3@AddModel
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 1045 :         return _Mysize() == 0;

  0002d	83 7e 34 00	 cmp	 DWORD PTR [esi+52], 0
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 225  : 	if (pSkelLODController && pSkelLODController->m_que_pkModelInst.empty())

  00031	0f 84 e2 01 00
	00		 je	 $LN53@AddModel
$LN3@AddModel:

; 226  : 	{
; 227  : 		assert(!"EMPTY SKELETON(CANNON LINK)");
; 228  : 		return;
; 229  : 	}
; 230  : 
; 231  : 	assert(pThing->GetReferenceCount()>=1);
; 232  : 
; 233  : 	pThing->AddReference();

  00037	8b cf		 mov	 ecx, edi
  00039	e8 00 00 00 00	 call	 ?AddReference@CReferenceObject@@QAEXXZ ; CReferenceObject::AddReference

; 234  : 
; 235  : 	if (pThing->GetModelCount() <= iSrcModel)

  0003e	8b cf		 mov	 ecx, edi
  00040	e8 00 00 00 00	 call	 ?GetModelCount@CGraphicThing@@QBEHXZ ; CGraphicThing::GetModelCount
  00045	8b 4d dc	 mov	 ecx, DWORD PTR _iSrcModel$GSCopy$1$[ebp]
  00048	3b c1		 cmp	 eax, ecx
  0004a	0f 8e c2 01 00
	00		 jle	 $LN58@AddModel

; 236  : 	{
; 237  : 		pThing->Release();
; 238  : 		return;
; 239  : 	}
; 240  : 	CGrannyModel * pModel = pThing->GetModelPointer(iSrcModel);

  00050	51		 push	 ecx
  00051	8b cf		 mov	 ecx, edi
  00053	e8 00 00 00 00	 call	 ?GetModelPointer@CGraphicThing@@QAEPAVCGrannyModel@@H@Z ; CGraphicThing::GetModelPointer
  00058	89 45 dc	 mov	 DWORD PTR _pModel$1$[ebp], eax

; 241  : 	if (!pModel)

  0005b	85 c0		 test	 eax, eax
  0005d	0f 84 af 01 00
	00		 je	 $LN58@AddModel

; 244  : 		return;
; 245  : 	}
; 246  : 
; 247  : 	CGrannyModelInstance * pModelInstance = CGrannyModelInstance::New();

  00063	e8 00 00 00 00	 call	 ?New@CGrannyModelInstance@@SAPAV1@XZ ; CGrannyModelInstance::New

; 248  : 
; 249  : 	__ReserveSharedDeformableVertexBuffer(pModel->GetDeformVertexCount());

  00068	8b 4d dc	 mov	 ecx, DWORD PTR _pModel$1$[ebp]
  0006b	89 45 d8	 mov	 DWORD PTR _pModelInstance$1$[ebp], eax
  0006e	e8 00 00 00 00	 call	 ?GetDeformVertexCount@CGrannyModel@@QBEHXZ ; CGrannyModel::GetDeformVertexCount
  00073	8b 4d e0	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00076	50		 push	 eax
  00077	e8 00 00 00 00	 call	 ?__ReserveSharedDeformableVertexBuffer@CGrannyLODController@@IAEXK@Z ; CGrannyLODController::__ReserveSharedDeformableVertexBuffer

; 250  : 
; 251  : 	if (pSkelLODController)
; 252  : 	{
; 253  : 		pModelInstance->SetLinkedModelPointer(pModel, m_pkSharedDeformableVertexBuffer, &pSkelLODController->m_pCurrentModelInstance);
; 254  : 	}
; 255  : 	else
; 256  : 	{
; 257  : 		pModelInstance->SetLinkedModelPointer(pModel, m_pkSharedDeformableVertexBuffer, NULL);
; 258  : 	}
; 259  : 
; 260  : 	// END_OF_WORK
; 261  : 
; 262  : 	if (!m_pCurrentModelInstance)

  0007c	8d 4e 20	 lea	 ecx, DWORD PTR [esi+32]
  0007f	f7 de		 neg	 esi
  00081	1b f6		 sbb	 esi, esi
  00083	23 f1		 and	 esi, ecx
  00085	8b 4d d8	 mov	 ecx, DWORD PTR _pModelInstance$1$[ebp]
  00088	56		 push	 esi
  00089	8b 75 e0	 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
  0008c	ff 76 38	 push	 DWORD PTR [esi+56]
  0008f	ff 75 dc	 push	 DWORD PTR _pModel$1$[ebp]
  00092	e8 00 00 00 00	 call	 ?SetLinkedModelPointer@CGrannyModelInstance@@QAEXPAVCGrannyModel@@PAVCGraphicVertexBuffer@@PAPAV1@@Z ; CGrannyModelInstance::SetLinkedModelPointer
  00097	83 7e 20 00	 cmp	 DWORD PTR [esi+32], 0
  0009b	68 00 00 00 00	 push	 OFFSET ?ms_matIdentity@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matIdentity
  000a0	0f 85 d4 00 00
	00		 jne	 $LN8@AddModel

; 263  : 	{
; 264  : 		m_pCurrentModelInstance = pModelInstance;

  000a6	8b 45 d8	 mov	 eax, DWORD PTR _pModelInstance$1$[ebp]

; 265  : 		pModelInstance->DeformNoSkin(&ms_matIdentity);

  000a9	8b c8		 mov	 ecx, eax
  000ab	89 46 20	 mov	 DWORD PTR [esi+32], eax
  000ae	e8 00 00 00 00	 call	 ?DeformNoSkin@CGrannyModelInstance@@QAEXPBUD3DXMATRIX@@@Z ; CGrannyModelInstance::DeformNoSkin

; 266  : 
; 267  : 		D3DXVECTOR3 vtMin, vtMax;
; 268  : 		pModelInstance->GetBoundBox(&vtMin, &vtMax);

  000b3	8b 4d d8	 mov	 ecx, DWORD PTR _pModelInstance$1$[ebp]
  000b6	8d 45 e4	 lea	 eax, DWORD PTR _vtMax$2[ebp]
  000b9	50		 push	 eax
  000ba	8d 45 f0	 lea	 eax, DWORD PTR _vtMin$3[ebp]
  000bd	50		 push	 eax
  000be	e8 00 00 00 00	 call	 ?GetBoundBox@CGrannyModelInstance@@QAEXPAUD3DXVECTOR3@@0@Z ; CGrannyModelInstance::GetBoundBox

; 271  : 		fSize = fMAX(fSize, fabs(vtMin.x - vtMax.x));

  000c3	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _vtMin$3[ebp]
  000c8	83 ec 08	 sub	 esp, 8
  000cb	f3 0f 5c 45 e4	 subss	 xmm0, DWORD PTR _vtMax$2[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 680  :             return (float)fabs(_X);

  000d0	0f 54 05 00 00
	00 00		 andps	 xmm0, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 271  : 		fSize = fMAX(fSize, fabs(vtMin.x - vtMax.x));

  000d7	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000dd	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  000e4	e8 00 00 00 00	 call	 ?fMAX@@YAMMM@Z		; fMAX

; 272  : 		fSize = fMAX(fSize, fabs(vtMin.y - vtMax.y));

  000e9	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _vtMin$3[ebp+4]
  000ee	f3 0f 5c 45 e8	 subss	 xmm0, DWORD PTR _vtMax$2[ebp+4]
  000f3	d9 5d e0	 fstp	 DWORD PTR _fSize$1[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 680  :             return (float)fabs(_X);

  000f6	0f 54 05 00 00
	00 00		 andps	 xmm0, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 272  : 		fSize = fMAX(fSize, fabs(vtMin.y - vtMax.y));

  000fd	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00103	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _fSize$1[ebp]
  00108	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010d	e8 00 00 00 00	 call	 ?fMAX@@YAMMM@Z		; fMAX

; 273  : 		fSize = fMAX(fSize, fabs(vtMin.z - vtMax.z));

  00112	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _vtMin$3[ebp+8]
  00117	f3 0f 5c 45 ec	 subss	 xmm0, DWORD PTR _vtMax$2[ebp+8]
  0011c	d9 5d e0	 fstp	 DWORD PTR _fSize$1[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 680  :             return (float)fabs(_X);

  0011f	0f 54 05 00 00
	00 00		 andps	 xmm0, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 273  : 		fSize = fMAX(fSize, fabs(vtMin.z - vtMax.z));

  00126	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0012c	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _fSize$1[ebp]
  00131	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00136	e8 00 00 00 00	 call	 ?fMAX@@YAMMM@Z		; fMAX

; 274  : 
; 275  : 		if (fSize<LODHEIGHT_ACTOR)

  0013b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?LODHEIGHT_ACTOR@@3MA
  00143	83 c4 08	 add	 esp, 8
  00146	d9 5d e0	 fstp	 DWORD PTR _fSize$1[ebp]
  00149	83 ec 08	 sub	 esp, 8
  0014c	8b ce		 mov	 ecx, esi
  0014e	0f 2f 45 e0	 comiss	 xmm0, DWORD PTR _fSize$1[ebp]
  00152	76 0a		 jbe	 SHORT $LN10@AddModel

; 276  : 			SetLODLimits(0.0f, LODDISTANCE_ACTOR);

  00154	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?LODDISTANCE_ACTOR@@3MA
  0015c	eb 08		 jmp	 SHORT $LN70@AddModel
$LN10@AddModel:

; 277  : 		else
; 278  : 			//
; 279  : 			SetLODLimits(0.0f, LODDISTANCE_BUILDING);

  0015e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?LODDISTANCE_BUILDING@@3MA
$LN70@AddModel:

; 284  : 	}
; 285  : 
; 286  : 	pThing->Release();

  00166	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0016c	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  00173	e8 00 00 00 00	 call	 ?SetLODLimits@CGrannyLODController@@QAEXMM@Z ; CGrannyLODController::SetLODLimits
  00178	eb 08		 jmp	 SHORT $LN9@AddModel
$LN8@AddModel:

; 280  : 	}
; 281  : 	else
; 282  : 	{
; 283  :  		pModelInstance->DeformNoSkin(&ms_matIdentity);

  0017a	8b 4d d8	 mov	 ecx, DWORD PTR _pModelInstance$1$[ebp]
  0017d	e8 00 00 00 00	 call	 ?DeformNoSkin@CGrannyModelInstance@@QAEXPBUD3DXMATRIX@@@Z ; CGrannyModelInstance::DeformNoSkin
$LN9@AddModel:

; 284  : 	}
; 285  : 
; 286  : 	pThing->Release();

  00182	8b cf		 mov	 ecx, edi
  00184	e8 00 00 00 00	 call	 ?Release@CReferenceObject@@QAEXXZ ; CReferenceObject::Release
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 1167 :         if (_Myoff() % _Block_size == 0 && _Mapsize() <= (_Mysize() + _Block_size) / _Block_size) {

  00189	f6 46 30 03	 test	 BYTE PTR [esi+48], 3
  0018d	75 18		 jne	 SHORT $LN32@AddModel
  0018f	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00192	83 c0 04	 add	 eax, 4
  00195	c1 e8 02	 shr	 eax, 2
  00198	39 46 2c	 cmp	 DWORD PTR [esi+44], eax
  0019b	77 0a		 ja	 SHORT $LN32@AddModel

; 1168 :             _Growmap(1);

  0019d	6a 01		 push	 1
  0019f	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  001a2	e8 00 00 00 00	 call	 ?_Growmap@?$deque@PAVCGrannyModelInstance@@V?$allocator@PAVCGrannyModelInstance@@@std@@@std@@AAEXI@Z ; std::deque<CGrannyModelInstance *,std::allocator<CGrannyModelInstance *> >::_Growmap
$LN32@AddModel:

; 1169 :         }
; 1170 :         _Myoff() &= _Mapsize() * _Block_size - 1;

  001a7	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  001aa	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  001b1	8d 78 ff	 lea	 edi, DWORD PTR [eax-1]
  001b4	23 7e 30	 and	 edi, DWORD PTR [esi+48]
  001b7	89 7e 30	 mov	 DWORD PTR [esi+48], edi

; 1171 :         size_type _Newoff      = _Myoff() != 0 ? _Myoff() : _Mapsize() * _Block_size;
; 1172 :         const size_type _Block = _Getblock(--_Newoff);

  001ba	0f 44 f8	 cmove	 edi, eax

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  001bd	49		 dec	 ecx

; 1172 :         const size_type _Block = _Getblock(--_Newoff);

  001be	4f		 dec	 edi

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  001bf	8b c7		 mov	 eax, edi
  001c1	c1 e8 02	 shr	 eax, 2
  001c4	23 c8		 and	 ecx, eax

; 1173 :         if (_Map()[_Block] == nullptr) {

  001c6	8b 46 28	 mov	 eax, DWORD PTR [esi+40]

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  001c9	89 4d dc	 mov	 DWORD PTR __Block$1$[ebp], ecx

; 1173 :         if (_Map()[_Block] == nullptr) {

  001cc	83 3c 88 00	 cmp	 DWORD PTR [eax+ecx*4], 0
  001d0	75 15		 jne	 SHORT $LN60@AddModel
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  001d2	6a 10		 push	 16			; 00000010H
  001d4	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 1174 :             _Map()[_Block] = _Getal().allocate(_Block_size);

  001d9	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  001dc	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 1174 :             _Map()[_Block] = _Getal().allocate(_Block_size);

  001df	8b 55 dc	 mov	 edx, DWORD PTR __Block$1$[ebp]
  001e2	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax
  001e5	eb 02		 jmp	 SHORT $LN33@AddModel
$LN60@AddModel:

; 1173 :         if (_Map()[_Block] == nullptr) {

  001e7	8b d1		 mov	 edx, ecx
$LN33@AddModel:

; 1175 :         }
; 1176 : 
; 1177 :         _Alty_traits::construct(

  001e9	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  001ec	8b cf		 mov	 ecx, edi
  001ee	83 e1 03	 and	 ecx, 3
  001f1	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  001f4	8b 55 d8	 mov	 edx, DWORD PTR _pModelInstance$1$[ebp]
  001f7	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx

; 1178 :             _Getal(), _Unfancy(_Map()[_Block] + _Newoff % _Block_size), _STD forward<_Tys>(_Vals)...);
; 1179 : 
; 1180 :         _Myoff() = _Newoff;
; 1181 :         ++_Mysize();

  001fa	ff 46 34	 inc	 DWORD PTR [esi+52]
  001fd	89 7e 30	 mov	 DWORD PTR [esi+48], edi
  00200	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 289  : }

  00201	5e		 pop	 esi
  00202	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00205	33 cd		 xor	 ecx, ebp
  00207	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0020c	8b e5		 mov	 esp, ebp
  0020e	5d		 pop	 ebp
  0020f	c2 0c 00	 ret	 12			; 0000000cH
$LN58@AddModel:

; 242  : 	{
; 243  : 		pThing->Release();

  00212	8b cf		 mov	 ecx, edi
  00214	e8 00 00 00 00	 call	 ?Release@CReferenceObject@@QAEXXZ ; CReferenceObject::Release
$LN53@AddModel:

; 289  : }

  00219	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0021c	5f		 pop	 edi
  0021d	33 cd		 xor	 ecx, ebp
  0021f	5e		 pop	 esi
  00220	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00225	8b e5		 mov	 esp, ebp
  00227	5d		 pop	 ebp
  00228	c2 0c 00	 ret	 12			; 0000000cH
?AddModel@CGrannyLODController@@QAEXPAVCGraphicThing@@HPAV1@@Z ENDP ; CGrannyLODController::AddModel
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\ModelInstance.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\ModelInstance.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
;	COMDAT ?DestroyDeviceObjects@CGrannyLODController@@QAEXXZ
_TEXT	SEGMENT
?DestroyDeviceObjects@CGrannyLODController@@QAEXXZ PROC	; CGrannyLODController::DestroyDeviceObjects, COMDAT
; _this$ = ecx

; 395  : {

  00000	53		 push	 ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 939  :         return iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

  00001	8b 59 34	 mov	 ebx, DWORD PTR [ecx+52]
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 395  : {

  00004	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 939  :         return iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

  00005	8b 71 30	 mov	 esi, DWORD PTR [ecx+48]
  00008	03 de		 add	 ebx, esi
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 395  : {

  0000a	57		 push	 edi

; 396  : 	std::for_each(m_que_pkModelInst.begin(),

  0000b	8d 79 24	 lea	 edi, DWORD PTR [ecx+36]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1284 :         if (_Parent) { // have a parent, do adoption

  0000e	85 ff		 test	 edi, edi
  00010	74 0a		 je	 SHORT $LN42@DestroyDev

; 1285 :             _Myproxy = _Parent->_Myproxy;

  00012	8b 3f		 mov	 edi, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 517  :         return {this->_Myoff, this->_Getcont()};

  00014	85 ff		 test	 edi, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1293 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

  00016	74 04		 je	 SHORT $LN42@DestroyDev
  00018	8b 3f		 mov	 edi, DWORD PTR [edi]
  0001a	eb 02		 jmp	 SHORT $LN43@DestroyDev
$LN42@DestroyDev:
  0001c	33 ff		 xor	 edi, edi
$LN43@DestroyDev:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 43   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

  0001e	3b f3		 cmp	 esi, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00020	74 23		 je	 SHORT $LN33@DestroyDev
$LL63@DestroyDev:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00022	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00025	8b d6		 mov	 edx, esi
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\ModelInstance.h

; 36   : 			{pModelInstance->DestroyDeviceObjects();}

  00027	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0002a	48		 dec	 eax
  0002b	c1 ea 02	 shr	 edx, 2
  0002e	23 d0		 and	 edx, eax

; 47   :         _Size_type _Off   = _Myoff % _Block_size;

  00030	8b c6		 mov	 eax, esi
  00032	83 e0 03	 and	 eax, 3
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\ModelInstance.h

; 36   : 			{pModelInstance->DestroyDeviceObjects();}

  00035	8b 0c 91	 mov	 ecx, DWORD PTR [ecx+edx*4]
  00038	8b 0c 81	 mov	 ecx, DWORD PTR [ecx+eax*4]
  0003b	e8 00 00 00 00	 call	 ?DestroyDeviceObjects@CGrannyModelInstance@@QAEXXZ ; CGrannyModelInstance::DestroyDeviceObjects
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 56   :         ++_Myoff;

  00040	46		 inc	 esi

; 114  :         return _Myoff == _Right._Myoff;

  00041	3b f3		 cmp	 esi, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00043	75 dd		 jne	 SHORT $LL63@DestroyDev
$LN33@DestroyDev:
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 399  : }

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	c3		 ret	 0
?DestroyDeviceObjects@CGrannyLODController@@QAEXXZ ENDP	; CGrannyLODController::DestroyDeviceObjects
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\ModelInstance.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\ModelInstance.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
;	COMDAT ?CreateDeviceObjects@CGrannyLODController@@QAEXXZ
_TEXT	SEGMENT
?CreateDeviceObjects@CGrannyLODController@@QAEXXZ PROC	; CGrannyLODController::CreateDeviceObjects, COMDAT
; _this$ = ecx

; 388  : {

  00000	53		 push	 ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 939  :         return iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

  00001	8b 59 34	 mov	 ebx, DWORD PTR [ecx+52]
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 388  : {

  00004	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 939  :         return iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

  00005	8b 71 30	 mov	 esi, DWORD PTR [ecx+48]
  00008	03 de		 add	 ebx, esi
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 388  : {

  0000a	57		 push	 edi

; 389  : 	std::for_each(m_que_pkModelInst.begin(),

  0000b	8d 79 24	 lea	 edi, DWORD PTR [ecx+36]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1284 :         if (_Parent) { // have a parent, do adoption

  0000e	85 ff		 test	 edi, edi
  00010	74 0a		 je	 SHORT $LN42@CreateDevi

; 1285 :             _Myproxy = _Parent->_Myproxy;

  00012	8b 3f		 mov	 edi, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 517  :         return {this->_Myoff, this->_Getcont()};

  00014	85 ff		 test	 edi, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1293 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

  00016	74 04		 je	 SHORT $LN42@CreateDevi
  00018	8b 3f		 mov	 edi, DWORD PTR [edi]
  0001a	eb 02		 jmp	 SHORT $LN43@CreateDevi
$LN42@CreateDevi:
  0001c	33 ff		 xor	 edi, edi
$LN43@CreateDevi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 43   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

  0001e	3b f3		 cmp	 esi, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00020	74 23		 je	 SHORT $LN33@CreateDevi
$LL63@CreateDevi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00022	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00025	8b d6		 mov	 edx, esi
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\ModelInstance.h

; 30   : 			{pModelInstance->CreateDeviceObjects();}

  00027	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0002a	48		 dec	 eax
  0002b	c1 ea 02	 shr	 edx, 2
  0002e	23 d0		 and	 edx, eax

; 47   :         _Size_type _Off   = _Myoff % _Block_size;

  00030	8b c6		 mov	 eax, esi
  00032	83 e0 03	 and	 eax, 3
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\ModelInstance.h

; 30   : 			{pModelInstance->CreateDeviceObjects();}

  00035	8b 0c 91	 mov	 ecx, DWORD PTR [ecx+edx*4]
  00038	8b 0c 81	 mov	 ecx, DWORD PTR [ecx+eax*4]
  0003b	e8 00 00 00 00	 call	 ?CreateDeviceObjects@CGrannyModelInstance@@QAE_NXZ ; CGrannyModelInstance::CreateDeviceObjects
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 56   :         ++_Myoff;

  00040	46		 inc	 esi

; 114  :         return _Myoff == _Right._Myoff;

  00041	3b f3		 cmp	 esi, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00043	75 dd		 jne	 SHORT $LL63@CreateDevi
$LN33@CreateDevi:
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 392  : }

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	c3		 ret	 0
?CreateDeviceObjects@CGrannyLODController@@QAEXXZ ENDP	; CGrannyLODController::CreateDeviceObjects
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
;	COMDAT ?Clear@CGrannyLODController@@QAEXXZ
_TEXT	SEGMENT
_this$1$ = -12						; size = 4
_this$1$ = -8						; size = 4
?Clear@CGrannyLODController@@QAEXXZ PROC		; CGrannyLODController::Clear, COMDAT
; _this$ = ecx

; 198  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi
  0000b	89 75 f8	 mov	 DWORD PTR _this$1$[ebp], esi

; 199  : 	if (m_pAttachedParentModel)

  0000e	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00011	85 c9		 test	 ecx, ecx
  00013	74 06		 je	 SHORT $LN5@Clear

; 200  : 	{
; 201  : 		m_pAttachedParentModel->DetachModelInstance(this);

  00015	56		 push	 esi
  00016	e8 00 00 00 00	 call	 ?DetachModelInstance@CGrannyLODController@@QAEXPAV1@@Z ; CGrannyLODController::DetachModelInstance
$LN5@Clear:

; 202  : 	}
; 203  : 
; 204  : 	m_pCurrentModelInstance = NULL;

  0001b	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0

; 207  : 	std::for_each(m_que_pkModelInst.begin(), m_que_pkModelInst.end(), CGrannyModelInstance::Delete);

  00022	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  00025	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 939  :         return iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

  0002c	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  0002f	8b 7e 30	 mov	 edi, DWORD PTR [esi+48]
  00032	03 c7		 add	 eax, edi
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 207  : 	std::for_each(m_que_pkModelInst.begin(), m_que_pkModelInst.end(), CGrannyModelInstance::Delete);

  00034	89 4d f4	 mov	 DWORD PTR _this$1$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1284 :         if (_Parent) { // have a parent, do adoption

  00037	85 c9		 test	 ecx, ecx
  00039	74 0a		 je	 SHORT $LN46@Clear

; 1285 :             _Myproxy = _Parent->_Myproxy;

  0003b	8b 19		 mov	 ebx, DWORD PTR [ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 517  :         return {this->_Myoff, this->_Getcont()};

  0003d	85 db		 test	 ebx, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1293 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

  0003f	74 04		 je	 SHORT $LN46@Clear
  00041	8b 1b		 mov	 ebx, DWORD PTR [ebx]
  00043	eb 02		 jmp	 SHORT $LN47@Clear
$LN46@Clear:
  00045	33 db		 xor	 ebx, ebx
$LN47@Clear:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 43   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

  00047	3b f8		 cmp	 edi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00049	74 31		 je	 SHORT $LN37@Clear
  0004b	8b f0		 mov	 esi, eax
  0004d	0f 1f 00	 npad	 3
$LL67@Clear:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 563  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00050	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00053	8b cf		 mov	 ecx, edi
  00055	48		 dec	 eax
  00056	c1 e9 02	 shr	 ecx, 2
  00059	23 c8		 and	 ecx, eax

; 47   :         _Size_type _Off   = _Myoff % _Block_size;

  0005b	8b d7		 mov	 edx, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 246  :         _Func(*_UFirst);

  0005d	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 47   :         _Size_type _Off   = _Myoff % _Block_size;

  00060	83 e2 03	 and	 edx, 3
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 246  :         _Func(*_UFirst);

  00063	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  00066	ff 34 90	 push	 DWORD PTR [eax+edx*4]
  00069	e8 00 00 00 00	 call	 ?Delete@CGrannyModelInstance@@SAXPAV1@@Z ; CGrannyModelInstance::Delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 56   :         ++_Myoff;

  0006e	47		 inc	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 246  :         _Func(*_UFirst);

  0006f	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 114  :         return _Myoff == _Right._Myoff;

  00072	3b fe		 cmp	 edi, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\algorithm

; 245  :     for (; _UFirst != _ULast; ++_UFirst) {

  00074	75 da		 jne	 SHORT $LL67@Clear
  00076	8b 75 f8	 mov	 esi, DWORD PTR _this$1$[ebp]
  00079	8b 4d f4	 mov	 ecx, DWORD PTR _this$1$[ebp]
$LN37@Clear:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 1454 :         _Tidy();

  0007c	e8 00 00 00 00	 call	 ?_Tidy@?$deque@PAVCGrannyModelInstance@@V?$allocator@PAVCGrannyModelInstance@@@std@@@std@@AAEXXZ ; std::deque<CGrannyModelInstance *,std::allocator<CGrannyModelInstance *> >::_Tidy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00081	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 1796 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));

  00084	8d 7e 0c	 lea	 edi, DWORD PTR [esi+12]

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00087	39 46 10	 cmp	 DWORD PTR [esi+16], eax
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 211  : 	for (; m_AttachedModelDataVector.end() != itor; ++itor)

  0008a	74 15		 je	 SHORT $LN3@Clear
  0008c	0f 1f 40 00	 npad	 4
$LL89@Clear:

; 214  : 		rData.pkLODController->m_pAttachedParentModel = NULL;

  00090	8b 08		 mov	 ecx, DWORD PTR [eax]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 79   :         ++_Ptr;

  00092	83 c0 1c	 add	 eax, 28			; 0000001cH
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 214  : 		rData.pkLODController->m_pAttachedParentModel = NULL;

  00095	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 163  :         return _Ptr == _Right._Ptr;

  0009c	39 46 10	 cmp	 DWORD PTR [esi+16], eax
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 211  : 	for (; m_AttachedModelDataVector.end() != itor; ++itor)

  0009f	75 ef		 jne	 SHORT $LL89@Clear
$LN3@Clear:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  000a1	8b 07		 mov	 eax, DWORD PTR [edi]
  000a3	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000a6	3b c1		 cmp	 eax, ecx
  000a8	74 10		 je	 SHORT $LN100@Clear

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());

  000aa	57		 push	 edi
  000ab	51		 push	 ecx
  000ac	50		 push	 eax
  000ad	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@YAXPAUSAttachingModelData@CGrannyLODController@@QAU12@AAV?$allocator@USAttachingModelData@CGrannyLODController@@@0@@Z ; std::_Destroy_range<std::allocator<CGrannyLODController::SAttachingModelData> >

; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

  000b2	8b 07		 mov	 eax, DWORD PTR [edi]
  000b4	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b7	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN100@Clear:
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 218  : }

  000ba	5f		 pop	 edi
  000bb	5e		 pop	 esi
  000bc	5b		 pop	 ebx
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c3		 ret	 0
?Clear@CGrannyLODController@@QAEXXZ ENDP		; CGrannyLODController::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
;	COMDAT ??1CGrannyLODController@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CGrannyLODController@@UAE@XZ PROC			; CGrannyLODController::~CGrannyLODController, COMDAT
; _this$ = ecx

; 191  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CGrannyLODController@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f9		 mov	 edi, ecx

; 192  : 	__FreeDeformVertexBuffer(m_pkSharedDeformableVertexBuffer);

  00026	ff 77 38	 push	 DWORD PTR [edi+56]
  00029	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CGrannyLODController@@6B@
  0002f	e8 00 00 00 00	 call	 ?__FreeDeformVertexBuffer@@YAXPAVCGraphicVertexBuffer@@@Z ; __FreeDeformVertexBuffer
  00034	83 c4 04	 add	 esp, 4

; 193  : 
; 194  : 	Clear();

  00037	8b cf		 mov	 ecx, edi
  00039	e8 00 00 00 00	 call	 ?Clear@CGrannyLODController@@QAEXXZ ; CGrannyLODController::Clear
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 905  :         _Tidy();

  0003e	8d 4f 24	 lea	 ecx, DWORD PTR [edi+36]
  00041	e8 00 00 00 00	 call	 ?_Tidy@?$deque@PAVCGrannyModelInstance@@V?$allocator@PAVCGrannyModelInstance@@@std@@@std@@AAEXXZ ; std::deque<CGrannyModelInstance *,std::allocator<CGrannyModelInstance *> >::_Tidy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 754  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00046	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00049	6a 08		 push	 8
  0004b	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 755  :     _Val         = static_cast<_Other&&>(_New_val);

  0004c	c7 47 24 00 00
	00 00		 mov	 DWORD PTR [edi+36], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00053	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00058	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 195  : }

  0005b	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
  0005e	e8 00 00 00 00	 call	 ??1?$vector@USAttachingModelData@CGrannyLODController@@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@QAE@XZ ; std::vector<CGrannyLODController::SAttachingModelData,std::allocator<CGrannyLODController::SAttachingModelData> >::~vector<CGrannyLODController::SAttachingModelData,std::allocator<CGrannyLODController::SAttachingModelData> >
  00063	8b cf		 mov	 ecx, edi
  00065	e8 00 00 00 00	 call	 ??1CGraphicBase@@UAE@XZ	; CGraphicBase::~CGraphicBase
  0006a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00074	59		 pop	 ecx
  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
  0007b	cc		 int	 3
  0007c	cc		 int	 3
  0007d	cc		 int	 3
  0007e	cc		 int	 3
  0007f	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CGrannyLODController@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CGrannyLODController@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CGrannyLODController@@UAE@XZ ENDP			; CGrannyLODController::~CGrannyLODController
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
;	COMDAT ??0CGrannyLODController@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CGrannyLODController@@QAE@XZ PROC			; CGrannyLODController::CGrannyLODController, COMDAT
; _this$ = ecx

; 187  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CGrannyLODController@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  0002a	e8 00 00 00 00	 call	 ??0CGraphicBase@@QAE@XZ	; CGraphicBase::CGraphicBase
  0002f	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CGrannyLODController@@6B@

; 183  : 	m_fLODDistance(0.0f),

  00035	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 184  : 	m_dwLODAniFPS(CGrannyModelInstance::ANIFPS_MAX),

  0003c	c7 47 08 78 00
	00 00		 mov	 DWORD PTR [edi+8], 120	; 00000078H
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 398  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0004a	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
  00051	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  00058	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 182  : 	m_pAttachedParentModel(NULL),

  0005f	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0

; 187  : {

  00066	8d 77 24	 lea	 esi, DWORD PTR [edi+36]
  00069	c6 47 1c 00	 mov	 BYTE PTR [edi+28], 0
  0006d	c7 47 20 00 00
	00 00		 mov	 DWORD PTR [edi+32], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  00074	6a 08		 push	 8
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 187  : {

  00076	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1219 :     _Container_proxy* _Myproxy = nullptr;

  0007a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\deque

; 559  :     _Deque_val() noexcept : _Map(), _Mapsize(0), _Myoff(0), _Mysize(0) {}

  00080	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00087	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0008e	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00095	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 87   :         return ::operator new(_Bytes);

  0009c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000a1	83 c4 04	 add	 esp, 4

; 1189 :     mutable _Iterator_base12* _Myfirstiter = nullptr;

  000a4	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1206 :         _Myproxy            = _New_proxy;

  000ab	89 06		 mov	 DWORD PTR [esi], eax

; 1207 :         _New_proxy->_Mycont = this;

  000ad	89 30		 mov	 DWORD PTR [eax], esi
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp

; 188  : }

  000af	8b c7		 mov	 eax, edi
  000b1	c7 47 38 00 00
	00 00		 mov	 DWORD PTR [edi+56], 0
  000b8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000bb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c2	59		 pop	 ecx
  000c3	5f		 pop	 edi
  000c4	5e		 pop	 esi
  000c5	8b e5		 mov	 esp, ebp
  000c7	5d		 pop	 ebp
  000c8	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CGrannyLODController@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CGraphicBase@@UAE@XZ	; CGraphicBase::~CGraphicBase
__unwindfunclet$??0CGrannyLODController@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0000e	e9 00 00 00 00	 jmp	 ??1?$vector@USAttachingModelData@CGrannyLODController@@V?$allocator@USAttachingModelData@CGrannyLODController@@@std@@@std@@QAE@XZ ; std::vector<CGrannyLODController::SAttachingModelData,std::allocator<CGrannyLODController::SAttachingModelData> >::~vector<CGrannyLODController::SAttachingModelData,std::allocator<CGrannyLODController::SAttachingModelData> >
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
  00017	cc		 int	 3
__ehhandler$??0CGrannyLODController@@QAE@XZ:
  00018	90		 npad	 1
  00019	90		 npad	 1
  0001a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00021	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CGrannyLODController@@QAE@XZ
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CGrannyLODController@@QAE@XZ ENDP			; CGrannyLODController::CGrannyLODController
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\LODController.cpp
;	COMDAT ?SetMinLODMode@CGrannyLODController@@SAX_N@Z
_TEXT	SEGMENT
_isEnable$ = 8						; size = 1
?SetMinLODMode@CGrannyLODController@@SAX_N@Z PROC	; CGrannyLODController::SetMinLODMode, COMDAT

; 145  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 146  : 	ms_isMinLODModeEnable=isEnable;

  00003	8a 45 08	 mov	 al, BYTE PTR _isEnable$[ebp]
  00006	a2 00 00 00 00	 mov	 BYTE PTR ?ms_isMinLODModeEnable@@3_NA, al ; ms_isMinLODModeEnable

; 147  : }

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?SetMinLODMode@CGrannyLODController@@SAX_N@Z ENDP	; CGrannyLODController::SetMinLODMode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 137  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 138  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 139  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 140  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 87   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 141  :         _Throw_bad_array_new_length(); // add overflow
; 142  :     }
; 143  : 
; 144  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 87   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 145  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 146  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 147  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 148  : 
; 149  : #ifdef _DEBUG
; 150  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 151  : #endif // _DEBUG
; 152  :     return _Ptr;
; 153  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 145  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate, COMDAT
; _this$ = ecx

; 4829 :     _CONSTEXPR20 void _Tidy_deallocate() noexcept { // initialize buffer, deallocating any storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2244 :         return _BUF_SIZE <= _Myres;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4830 :         auto& _My_data = _Mypair._Myval2;
; 4831 :         _My_data._Orphan_all();
; 4832 :         if (_My_data._Large_string_engaged()) {

  00009	72 27		 jb	 SHORT $LN10@Tidy_deall
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0000d	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN20@Tidy_deall

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN17@Tidy_deall

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN20@Tidy_deall:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN10@Tidy_deall:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 4845 :     }

  00044	c3		 ret	 0
$LN17@Tidy_deall:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN27@Tidy_deall:
  0004a	cc		 int	 3
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2312 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 331  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 332  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
