; Listing generated by Microsoft (R) Optimizing Compiler Version 19.43.34808.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\eterGrnLib\Distribute\Mesh.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?GrannyPNT3322VertexType@@3PAUgranny_data_type_definition@@A ; GrannyPNT3322VertexType
PUBLIC	??_C@_08GCJNLIKG@Position@			; `string'
PUBLIC	??_C@_06EFAGIKOH@Normal@			; `string'
PUBLIC	??_C@_0BE@MAKBLMOM@TextureCoordinates0@		; `string'
PUBLIC	??_C@_0BE@NJLKINKN@TextureCoordinates1@		; `string'
;	COMDAT ??_C@_0BE@NJLKINKN@TextureCoordinates1@
CONST	SEGMENT
??_C@_0BE@NJLKINKN@TextureCoordinates1@ DB 'TextureCoordinates1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@MAKBLMOM@TextureCoordinates0@
CONST	SEGMENT
??_C@_0BE@MAKBLMOM@TextureCoordinates0@ DB 'TextureCoordinates0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06EFAGIKOH@Normal@
CONST	SEGMENT
??_C@_06EFAGIKOH@Normal@ DB 'Normal', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08GCJNLIKG@Position@
CONST	SEGMENT
??_C@_08GCJNLIKG@Position@ DB 'Position', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
?GrannyPNT3322VertexType@@3PAUgranny_data_type_definition@@A DD 0aH ; GrannyPNT3322VertexType
	DD	FLAT:??_C@_08GCJNLIKG@Position@
	DD	00H
	DD	03H
	ORG $+16
	DD	0aH
	DD	FLAT:??_C@_06EFAGIKOH@Normal@
	DD	00H
	DD	03H
	ORG $+16
	DD	0aH
	DD	FLAT:??_C@_0BE@MAKBLMOM@TextureCoordinates0@
	DD	00H
	DD	02H
	ORG $+16
	DD	0aH
	DD	FLAT:??_C@_0BE@NJLKINKN@TextureCoordinates1@
	DD	00H
	DD	02H
	ORG $+16
	DD	00H
	ORG $+28
_DATA	ENDS
CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??0CGrannyMesh@@QAE@XZ				; CGrannyMesh::CGrannyMesh
PUBLIC	??1CGrannyMesh@@UAE@XZ				; CGrannyMesh::~CGrannyMesh
PUBLIC	?IsEmpty@CGrannyMesh@@QBE_NXZ			; CGrannyMesh::IsEmpty
PUBLIC	?CreateFromGrannyMeshPointer@CGrannyMesh@@QAE_NPAUgranny_skeleton@@PAUgranny_mesh@@HHAAVCGrannyMaterialPalette@@@Z ; CGrannyMesh::CreateFromGrannyMeshPointer
PUBLIC	?LoadIndices@CGrannyMesh@@QAEXPAX@Z		; CGrannyMesh::LoadIndices
PUBLIC	?LoadPNTVertices@CGrannyMesh@@QAEXPAX@Z		; CGrannyMesh::LoadPNTVertices
PUBLIC	?NEW_LoadVertices@CGrannyMesh@@QAEXPAX@Z	; CGrannyMesh::NEW_LoadVertices
PUBLIC	?Destroy@CGrannyMesh@@QAEXXZ			; CGrannyMesh::Destroy
PUBLIC	?SetPNT2Mesh@CGrannyMesh@@QAEXXZ		; CGrannyMesh::SetPNT2Mesh
PUBLIC	?DeformPNTVertices@CGrannyMesh@@QBEXPAXPAUD3DXMATRIX@@PAUmesh_binding@granny@@@Z ; CGrannyMesh::DeformPNTVertices
PUBLIC	?CanDeformPNTVertices@CGrannyMesh@@QBE_NXZ	; CGrannyMesh::CanDeformPNTVertices
PUBLIC	?IsTwoSide@CGrannyMesh@@QBE_NXZ			; CGrannyMesh::IsTwoSide
PUBLIC	?GetVertexCount@CGrannyMesh@@QBEHXZ		; CGrannyMesh::GetVertexCount
PUBLIC	?GetDefaultBoneIndices@CGrannyMesh@@QBEPBHXZ	; CGrannyMesh::GetDefaultBoneIndices
PUBLIC	?GetVertexBasePosition@CGrannyMesh@@QBEHXZ	; CGrannyMesh::GetVertexBasePosition
PUBLIC	?GetIndexBasePosition@CGrannyMesh@@QBEHXZ	; CGrannyMesh::GetIndexBasePosition
PUBLIC	?GetGrannyMeshPointer@CGrannyMesh@@QBEPBUgranny_mesh@@XZ ; CGrannyMesh::GetGrannyMeshPointer
PUBLIC	?GetTriGroupNodeList@CGrannyMesh@@QBEPBUSTriGroupNode@1@W4EType@CGrannyMaterial@@@Z ; CGrannyMesh::GetTriGroupNodeList
PUBLIC	?RebuildTriGroupNodeList@CGrannyMesh@@QAEXXZ	; CGrannyMesh::RebuildTriGroupNodeList
PUBLIC	?Initialize@CGrannyMesh@@IAEXXZ			; CGrannyMesh::Initialize
PUBLIC	?LoadMaterials@CGrannyMesh@@IAE_NAAVCGrannyMaterialPalette@@@Z ; CGrannyMesh::LoadMaterials
PUBLIC	?LoadTriGroupNodeList@CGrannyMesh@@IAE_NAAVCGrannyMaterialPalette@@@Z ; CGrannyMesh::LoadTriGroupNodeList
PUBLIC	?_Xlength@?$vector@KV?$allocator@K@std@@@std@@CAXXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::_Xlength
PUBLIC	??_GCGrannyMesh@@UAEPAXI@Z			; CGrannyMesh::`scalar deleting destructor'
PUBLIC	??$_Emplace_reallocate@ABK@?$vector@KV?$allocator@K@std@@@std@@AAEPAKQAKABK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Emplace_reallocate<unsigned long const &>
PUBLIC	??$_Copy_memmove@PAKPAK@std@@YAPAKPAK00@Z	; std::_Copy_memmove<unsigned long *,unsigned long *>
PUBLIC	??$_Copy_memmove_tail@PAK@std@@YAPAKQBDQAKII@Z	; std::_Copy_memmove_tail<unsigned long *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_7CGrannyMesh@@6B@				; CGrannyMesh::`vftable'
PUBLIC	??_C@_02MALHOEON@2x@				; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CGrannyMesh@@6B@				; CGrannyMesh::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCGrannyMesh@@@8				; CGrannyMesh `RTTI Type Descriptor'
PUBLIC	??_R3CGrannyMesh@@8				; CGrannyMesh::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGrannyMesh@@8				; CGrannyMesh::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGrannyMesh@@8			; CGrannyMesh::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	__imp__GrannyGetMeshTriangleGroupCount@4:PROC
EXTRN	__imp__GrannyGetMeshTriangleGroups@4:PROC
EXTRN	__imp__GrannyGetMeshVertexType@4:PROC
EXTRN	__imp__GrannyGetMeshVertexCount@4:PROC
EXTRN	__imp__GrannyCopyMeshVertices@12:PROC
EXTRN	__imp__GrannyGetMeshVertices@4:PROC
EXTRN	__imp__GrannyMeshIsRigid@4:PROC
EXTRN	__imp__GrannyCopyMeshIndices@12:PROC
EXTRN	__imp__GrannyNewMeshBinding@12:PROC
EXTRN	__imp__GrannyFreeMeshBinding@4:PROC
EXTRN	__imp__GrannyGetMeshBindingToBoneIndices@4:PROC
EXTRN	__imp__GrannyNewMeshDeformer@16:PROC
EXTRN	__imp__GrannyFreeMeshDeformer@4:PROC
EXTRN	__imp__GrannyDeformVertices@24:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_strncmp:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?GetType@CGrannyMaterial@@QBE?AW4EType@1@XZ:PROC ; CGrannyMaterial::GetType
EXTRN	?RegisterMaterial@CGrannyMaterialPalette@@QAEKPAUgranny_material@@@Z:PROC ; CGrannyMaterialPalette::RegisterMaterial
EXTRN	?GetMaterialRef@CGrannyMaterialPalette@@QAEAAVCGrannyMaterial@@K@Z:PROC ; CGrannyMaterialPalette::GetMaterialRef
EXTRN	??_ECGrannyMesh@@UAEPAXI@Z:PROC			; CGrannyMesh::`vector deleting destructor'
EXTRN	__CxxThrowException@8:PROC
EXTRN	_memmove:PROC
EXTRN	__imp__GrannyPNT332VertexType:DWORD
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R1A@?0A@EA@CGrannyMesh@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGrannyMesh@@8 DD FLAT:??_R0?AVCGrannyMesh@@@8 ; CGrannyMesh::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGrannyMesh@@8
rdata$r	ENDS
;	COMDAT ??_R2CGrannyMesh@@8
rdata$r	SEGMENT
??_R2CGrannyMesh@@8 DD FLAT:??_R1A@?0A@EA@CGrannyMesh@@8 ; CGrannyMesh::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGrannyMesh@@8
rdata$r	SEGMENT
??_R3CGrannyMesh@@8 DD 00H				; CGrannyMesh::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGrannyMesh@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGrannyMesh@@@8
data$rs	SEGMENT
??_R0?AVCGrannyMesh@@@8 DD FLAT:??_7type_info@@6B@	; CGrannyMesh `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGrannyMesh@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CGrannyMesh@@6B@
rdata$r	SEGMENT
??_R4CGrannyMesh@@6B@ DD 00H				; CGrannyMesh::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCGrannyMesh@@@8
	DD	FLAT:??_R3CGrannyMesh@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02MALHOEON@2x@
CONST	SEGMENT
??_C@_02MALHOEON@2x@ DB '2x', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7CGrannyMesh@@6B@
CONST	SEGMENT
??_7CGrannyMesh@@6B@ DD FLAT:??_R4CGrannyMesh@@6B@	; CGrannyMesh::`vftable'
	DD	FLAT:??_ECGrannyMesh@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove_tail@PAK@std@@YAPAKQBDQAKII@Z
_TEXT	SEGMENT
__First_ch$ = 8						; size = 4
__Dest$ = 12						; size = 4
__Byte_count$ = 16					; size = 4
__Object_count$ = 20					; size = 4
??$_Copy_memmove_tail@PAK@std@@YAPAKQBDQAKII@Z PROC	; std::_Copy_memmove_tail<unsigned long *>, COMDAT

; 4763 :     const char* const _First_ch, const _OutCtgIt _Dest, const size_t _Byte_count, const size_t _Object_count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4764 :     _STL_INTERNAL_CHECK(_Byte_count == _Object_count * sizeof(*_Dest));
; 4765 :     const auto _Dest_ptr = _STD _To_address(_Dest);
; 4766 :     const auto _Dest_ch  = const_cast<char*>(reinterpret_cast<const volatile char*>(_Dest_ptr));
; 4767 :     _CSTD memmove(_Dest_ch, _First_ch, _Byte_count);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 10	 mov	 edi, DWORD PTR __Byte_count$[ebp]
  0000b	57		 push	 edi
  0000c	ff 75 08	 push	 DWORD PTR __First_ch$[ebp]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memmove
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4768 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4769 :         (void) _Object_count;
; 4770 :         // CodeQL [SM02986] This cast is correct: we're bypassing pointer arithmetic for performance.
; 4771 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Byte_count);

  00018	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi

; 4772 :     } else {
; 4773 :         return _Dest + static_cast<_Iter_diff_t<_OutCtgIt>>(_Object_count);
; 4774 :     }
; 4775 : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Copy_memmove_tail@PAK@std@@YAPAKQBDQAKII@Z ENDP	; std::_Copy_memmove_tail<unsigned long *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove@PAKPAK@std@@YAPAKPAK00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAKPAK@std@@YAPAKPAK00@Z PROC		; std::_Copy_memmove<unsigned long *,unsigned long *>, COMDAT

; 4778 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4779 :     _STL_INTERNAL_CHECK(_First <= _Last);
; 4780 :     const auto _First_ptr    = _STD _To_address(_First);
; 4781 :     const auto _Last_ptr     = _STD _To_address(_Last);
; 4782 :     const auto _Object_count = static_cast<size_t>(_Last_ptr - _First_ptr);

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	8b c1		 mov	 eax, ecx
  0000d	c1 f8 02	 sar	 eax, 2

; 4783 :     const auto _First_ch     = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 4784 :     const auto _Last_ch      = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last_ptr));
; 4785 :     const auto _Byte_count   = static_cast<size_t>(_Last_ch - _First_ch);
; 4786 :     return _STD _Copy_memmove_tail(_First_ch, _STD move(_Dest), _Byte_count, _Object_count);

  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00015	52		 push	 edx
  00016	e8 00 00 00 00	 call	 ??$_Copy_memmove_tail@PAK@std@@YAPAKQBDQAKII@Z ; std::_Copy_memmove_tail<unsigned long *>
  0001b	83 c4 10	 add	 esp, 16			; 00000010H

; 4787 : }

  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??$_Copy_memmove@PAKPAK@std@@YAPAKPAK00@Z ENDP		; std::_Copy_memmove<unsigned long *,unsigned long *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??$_Emplace_reallocate@ABK@?$vector@KV?$allocator@K@std@@@std@@AAEPAKQAKABK@Z
_TEXT	SEGMENT
__Newsize$1$ = -12					; size = 4
tv652 = -8						; size = 4
tv650 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABK@?$vector@KV?$allocator@K@std@@@std@@AAEPAKQAKABK@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Emplace_reallocate<unsigned long const &>, COMDAT
; _this$ = ecx

; 860  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 861  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 862  :         _Alty& _Al        = _Getal();
; 863  :         auto& _My_data    = _Mypair._Myval2;
; 864  :         pointer& _Myfirst = _My_data._Myfirst;
; 865  :         pointer& _Mylast  = _My_data._Mylast;
; 866  : 
; 867  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 868  : 
; 869  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	2b d9		 sub	 ebx, ecx

; 870  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c1		 sub	 eax, ecx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 871  : 
; 872  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 09 01 00
	00		 je	 $LN123@Emplace_re

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 874  :         }
; 875  : 
; 876  :         const size_type _Newsize = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b d1		 sub	 edx, ecx

; 874  :         }
; 875  : 
; 876  :         const size_type _Newsize = _Oldsize + 1;

  00030	89 7d f4	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 fa 02	 sar	 edx, 2

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b ca		 mov	 ecx, edx
  0003d	d1 e9		 shr	 ecx, 1
  0003f	2b c1		 sub	 eax, ecx
  00041	3b d0		 cmp	 edx, eax
  00043	76 14		 jbe	 SHORT $LN8@Emplace_re

; 1997 :             return _Max; // geometric growth would overflow

  00045	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  0004a	c7 45 f8 fc ff
	ff ff		 mov	 DWORD PTR tv652[ebp], -4 ; fffffffcH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00057	eb 3d		 jmp	 SHORT $LN121@Emplace_re
$LN8@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00059	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  0005c	8b cf		 mov	 ecx, edi
  0005e	3b c7		 cmp	 eax, edi
  00060	0f 43 c8	 cmovae	 ecx, eax
  00063	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00069	0f 87 c7 00 00
	00		 ja	 $LN124@Emplace_re

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  0006f	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  00076	89 45 f8	 mov	 DWORD PTR tv652[ebp], eax

; 227  :     if (_Bytes == 0) {

  00079	85 c0		 test	 eax, eax
  0007b	75 04		 jne	 SHORT $LN23@Emplace_re

; 228  :         return nullptr;

  0007d	33 ff		 xor	 edi, edi
  0007f	eb 1a		 jmp	 SHORT $LN22@Emplace_re
$LN23@Emplace_re:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00081	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00086	72 08		 jb	 SHORT $LN24@Emplace_re

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0008e	eb 06		 jmp	 SHORT $LN121@Emplace_re
$LN24@Emplace_re:

; 136  :         return ::operator new(_Bytes);

  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN121@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 885  :         _Alty_traits::construct(_Al, _STD _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00096	8b f8		 mov	 edi, eax
  00098	83 c4 04	 add	 esp, 4
$LN22@Emplace_re:
  0009b	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0009e	8d 0c 9f	 lea	 ecx, DWORD PTR [edi+ebx*4]

; 886  :         _Constructed_first = _Newvec + _Whereoff;
; 887  : 
; 888  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000a1	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  000a4	89 4d fc	 mov	 DWORD PTR tv650[ebp], ecx
  000a7	8b 00		 mov	 eax, DWORD PTR [eax]
  000a9	89 01		 mov	 DWORD PTR [ecx], eax
  000ab	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000ae	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000b0	3b d8		 cmp	 ebx, eax
  000b2	75 07		 jne	 SHORT $LN3@Emplace_re

; 894  :         } else { // provide basic guarantee

  000b4	8b 5d fc	 mov	 ebx, DWORD PTR tv650[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000b7	8b d7		 mov	 edx, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 894  :         } else { // provide basic guarantee

  000b9	eb 16		 jmp	 SHORT $LN52@Emplace_re
$LN3@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000bb	57		 push	 edi
  000bc	53		 push	 ebx
  000bd	51		 push	 ecx
  000be	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAKPAK@std@@YAPAKPAK00@Z ; std::_Copy_memmove<unsigned long *,unsigned long *>
  000c3	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000c6	8b cb		 mov	 ecx, ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000c8	8b 5d fc	 mov	 ebx, DWORD PTR tv650[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000cb	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000ce	8d 53 04	 lea	 edx, DWORD PTR [ebx+4]
$LN52@Emplace_re:

; 898  :         }
; 899  : 
; 900  :         _Guard._New_begin = nullptr;

  000d1	52		 push	 edx
  000d2	50		 push	 eax
  000d3	51		 push	 ecx
  000d4	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAKPAK@std@@YAPAKPAK00@Z ; std::_Copy_memmove<unsigned long *,unsigned long *>

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  000d9	8b 06		 mov	 eax, DWORD PTR [esi]

; 898  :         }
; 899  : 
; 900  :         _Guard._New_begin = nullptr;

  000db	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  000de	85 c0		 test	 eax, eax
  000e0	74 2c		 je	 SHORT $LN72@Emplace_re

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2056 :             _ASAN_VECTOR_REMOVE;
; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e2	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000e5	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e7	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000ea	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f0	72 12		 jb	 SHORT $LN83@Emplace_re

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f2	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f5	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f8	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fa	83 c0 fc	 add	 eax, -4			; fffffffcH
  000fd	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00100	77 2a		 ja	 SHORT $LN80@Emplace_re

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00102	8b c2		 mov	 eax, edx
$LN83@Emplace_re:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00104	51		 push	 ecx
  00105	50		 push	 eax
  00106	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0010b	83 c4 08	 add	 esp, 8
$LN72@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2061 :         _Mylast  = _Newvec + _Newsize;

  0010e	8b 45 f4	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  00111	89 3e		 mov	 DWORD PTR [esi], edi
  00113	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]

; 901  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 902  :         return _Newvec + _Whereoff;

  00116	8b c3		 mov	 eax, ebx

; 2061 :         _Mylast  = _Newvec + _Newsize;

  00118	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  0011b	8b 4d f8	 mov	 ecx, DWORD PTR tv652[ebp]
  0011e	03 cf		 add	 ecx, edi

; 903  :     }

  00120	5f		 pop	 edi

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  00121	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 903  :     }

  00124	5e		 pop	 esi
  00125	5b		 pop	 ebx
  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c2 08 00	 ret	 8
$LN80@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0012c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN123@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 873  :             _Xlength();

  00131	e8 00 00 00 00	 call	 ?_Xlength@?$vector@KV?$allocator@K@std@@@std@@CAXXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::_Xlength
$LN124@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  00136	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN120@Emplace_re:
  0013b	cc		 int	 3
??$_Emplace_reallocate@ABK@?$vector@KV?$allocator@K@std@@@std@@AAEPAKQAKABK@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Emplace_reallocate<unsigned long const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCGrannyMesh@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCGrannyMesh@@UAEPAXI@Z PROC				; CGrannyMesh::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CGrannyMesh@@UAE@XZ	; CGrannyMesh::~CGrannyMesh
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 38		 push	 56			; 00000038H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCGrannyMesh@@UAEPAXI@Z ENDP				; CGrannyMesh::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xlength@?$vector@KV?$allocator@K@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@KV?$allocator@K@std@@@std@@CAXXZ PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Xlength, COMDAT

; 2169 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@KV?$allocator@K@std@@@std@@CAXXZ ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\Mesh.cpp
;	COMDAT ?LoadTriGroupNodeList@CGrannyMesh@@IAE_NAAVCGrannyMaterialPalette@@@Z
_TEXT	SEGMENT
_mtrlCount$1$ = -16					; size = 4
_GroupNodeCount$1$ = -12				; size = 4
tv373 = -8						; size = 4
tv381 = -4						; size = 4
_rkMtrlPal$ = 8						; size = 4
?LoadTriGroupNodeList@CGrannyMesh@@IAE_NAAVCGrannyMaterialPalette@@@Z PROC ; CGrannyMesh::LoadTriGroupNodeList, COMDAT
; _this$ = ecx

; 176  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx

; 177  : 	assert(m_pgrnMesh != NULL);
; 178  : 	assert(m_triGroupNodes == NULL);
; 179  : 
; 180  : 	int mtrlCount		= m_pgrnMesh->MaterialBindingCount;

  00009	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  0000c	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0000f	89 45 f0	 mov	 DWORD PTR _mtrlCount$1$[ebp], eax

; 181  : 	if (mtrlCount <= 0)

  00012	85 c0		 test	 eax, eax
  00014	0f 8e bb 00 00
	00		 jle	 $LN20@LoadTriGro

; 182  : 		return true;
; 183  : 
; 184  : 	int GroupNodeCount	= GrannyGetMeshTriangleGroupCount(m_pgrnMesh);

  0001a	57		 push	 edi
  0001b	51		 push	 ecx
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GrannyGetMeshTriangleGroupCount@4
  00022	8b f8		 mov	 edi, eax
  00024	89 7d f4	 mov	 DWORD PTR _GroupNodeCount$1$[ebp], edi

; 185  : 	if (GroupNodeCount <= 0)

  00027	85 ff		 test	 edi, edi
  00029	0f 8e 9c 00 00
	00		 jle	 $LN21@LoadTriGro

; 186  : 		return true;
; 187  : 
; 188  : 	m_triGroupNodes		= new TTriGroupNode[GroupNodeCount];

  0002f	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00034	f7 e1		 mul	 ecx
  00036	b9 ff ff ff ff	 mov	 ecx, -1
  0003b	0f 42 c1	 cmovb	 eax, ecx
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00044	83 c4 04	 add	 esp, 4
  00047	89 43 20	 mov	 DWORD PTR [ebx+32], eax

; 189  : 
; 190  : 	const granny_tri_material_group * c_pgrnTriGroups = GrannyGetMeshTriangleGroups(m_pgrnMesh);

  0004a	ff 73 08	 push	 DWORD PTR [ebx+8]
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GrannyGetMeshTriangleGroups@4
  00053	33 d2		 xor	 edx, edx
  00055	89 55 f8	 mov	 DWORD PTR tv373[ebp], edx
  00058	56		 push	 esi
  00059	8d 48 08	 lea	 ecx, DWORD PTR [eax+8]
  0005c	89 4d fc	 mov	 DWORD PTR tv381[ebp], ecx
  0005f	90		 npad	 1
$LL4@LoadTriGro:

; 193  : 	{
; 194  : 		const granny_tri_material_group & c_rgrnTriGroup = c_pgrnTriGroups[g];
; 195  : 		TTriGroupNode * pTriGroupNode = m_triGroupNodes + g;
; 196  : 
; 197  : 		pTriGroupNode->idxPos = m_idxBasePos + c_rgrnTriGroup.TriFirst * 3;

  00060	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  00063	8b 73 20	 mov	 esi, DWORD PTR [ebx+32]
  00066	03 f2		 add	 esi, edx
  00068	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0006b	03 43 30	 add	 eax, DWORD PTR [ebx+48]
  0006e	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 198  : 		pTriGroupNode->triCount = c_rgrnTriGroup.TriCount;

  00071	8b 01		 mov	 eax, DWORD PTR [ecx]
  00073	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 199  : 
; 200  : 		int iMtrl = c_rgrnTriGroup.MaterialIndex;

  00076	8b 49 f8	 mov	 ecx, DWORD PTR [ecx-8]

; 201  : 		if (iMtrl < 0 || iMtrl >= mtrlCount)

  00079	85 c9		 test	 ecx, ecx
  0007b	78 0d		 js	 SHORT $LN9@LoadTriGro
  0007d	3b 4d f0	 cmp	 ecx, DWORD PTR _mtrlCount$1$[ebp]
  00080	7d 08		 jge	 SHORT $LN9@LoadTriGro

; 204  : 		}
; 205  : 		else
; 206  : 		{
; 207  : 			pTriGroupNode->mtrlIndex=m_mtrlIndexVector[iMtrl];

  00082	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  00085	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  00088	eb 02		 jmp	 SHORT $LN8@LoadTriGro
$LN9@LoadTriGro:

; 202  : 		{
; 203  : 			pTriGroupNode->mtrlIndex=0;//m_mtrlIndexVector[iMtrl];

  0008a	33 c0		 xor	 eax, eax
$LN8@LoadTriGro:

; 208  : 		}
; 209  : 
; 210  : 		const CGrannyMaterial& rkMtrl=rkMtrlPal.GetMaterialRef(pTriGroupNode->mtrlIndex);

  0008c	8b 4d 08	 mov	 ecx, DWORD PTR _rkMtrlPal$[ebp]
  0008f	50		 push	 eax
  00090	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00093	e8 00 00 00 00	 call	 ?GetMaterialRef@CGrannyMaterialPalette@@QAEAAVCGrannyMaterial@@K@Z ; CGrannyMaterialPalette::GetMaterialRef
  00098	8b f8		 mov	 edi, eax

; 211  : 		pTriGroupNode->pNextTriGroupNode		= m_triGroupNodeLists[rkMtrl.GetType()];

  0009a	8b cf		 mov	 ecx, edi
  0009c	e8 00 00 00 00	 call	 ?GetType@CGrannyMaterial@@QBE?AW4EType@1@XZ ; CGrannyMaterial::GetType
  000a1	8b 4c 83 24	 mov	 ecx, DWORD PTR [ebx+eax*4+36]
  000a5	89 0e		 mov	 DWORD PTR [esi], ecx

; 212  : 		m_triGroupNodeLists[rkMtrl.GetType()]	= pTriGroupNode;

  000a7	8b cf		 mov	 ecx, edi
  000a9	e8 00 00 00 00	 call	 ?GetType@CGrannyMaterial@@QBE?AW4EType@1@XZ ; CGrannyMaterial::GetType
  000ae	8b 4d fc	 mov	 ecx, DWORD PTR tv381[ebp]
  000b1	8b 55 f8	 mov	 edx, DWORD PTR tv373[ebp]
  000b4	83 c1 0c	 add	 ecx, 12			; 0000000cH
  000b7	83 c2 10	 add	 edx, 16			; 00000010H
  000ba	89 4d fc	 mov	 DWORD PTR tv381[ebp], ecx
  000bd	83 6d f4 01	 sub	 DWORD PTR _GroupNodeCount$1$[ebp], 1
  000c1	89 74 83 24	 mov	 DWORD PTR [ebx+eax*4+36], esi
  000c5	89 55 f8	 mov	 DWORD PTR tv373[ebp], edx
  000c8	75 96		 jne	 SHORT $LL4@LoadTriGro

; 191  : 
; 192  : 	for (int g = 0; g < GroupNodeCount; ++g)

  000ca	5e		 pop	 esi
$LN21@LoadTriGro:
  000cb	5f		 pop	 edi

; 213  : 
; 214  : 	}
; 215  : 
; 216  : 	return true;

  000cc	b0 01		 mov	 al, 1
  000ce	5b		 pop	 ebx

; 217  : }

  000cf	8b e5		 mov	 esp, ebp
  000d1	5d		 pop	 ebp
  000d2	c2 04 00	 ret	 4
$LN20@LoadTriGro:

; 213  : 
; 214  : 	}
; 215  : 
; 216  : 	return true;

  000d5	b0 01		 mov	 al, 1
  000d7	5b		 pop	 ebx

; 217  : }

  000d8	8b e5		 mov	 esp, ebp
  000da	5d		 pop	 ebp
  000db	c2 04 00	 ret	 4
?LoadTriGroupNodeList@CGrannyMesh@@IAE_NAAVCGrannyMaterialPalette@@@Z ENDP ; CGrannyMesh::LoadTriGroupNodeList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\Mesh.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\Mesh.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\Mesh.cpp
;	COMDAT ?LoadMaterials@CGrannyMesh@@IAE_NAAVCGrannyMaterialPalette@@@Z
_TEXT	SEGMENT
_mtrlCount$1$ = -16					; size = 4
_mtrlIndex$1 = -12					; size = 4
_this$1$ = -8						; size = 4
_bHaveBlendThing$1$ = -1				; size = 1
_rkMtrlPal$ = 8						; size = 4
?LoadMaterials@CGrannyMesh@@IAE_NAAVCGrannyMaterialPalette@@@Z PROC ; CGrannyMesh::LoadMaterials, COMDAT
; _this$ = ecx

; 251  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 252  : 	assert(m_pgrnMesh != NULL);
; 253  : 
; 254  : 	if (m_pgrnMesh->MaterialBindingCount <= 0)

  00006	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00009	89 4d f8	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000c	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0000f	89 45 f0	 mov	 DWORD PTR _mtrlCount$1$[ebp], eax
  00012	85 c0		 test	 eax, eax
  00014	7e 71		 jle	 SHORT $LN21@LoadMateri

; 264  : 		m_mtrlIndexVector.push_back(mtrlIndex);

  00016	53		 push	 ebx
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8b 7d 08	 mov	 edi, DWORD PTR _rkMtrlPal$[ebp]
  0001c	8d 71 14	 lea	 esi, DWORD PTR [ecx+20]
  0001f	c6 45 ff 00	 mov	 BYTE PTR _bHaveBlendThing$1$[ebp], 0
  00023	33 db		 xor	 ebx, ebx
$LL4@LoadMateri:

; 263  : 		DWORD mtrlIndex=rkMtrlPal.RegisterMaterial(pgrnMaterial);

  00025	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00028	8b cf		 mov	 ecx, edi
  0002a	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  0002d	ff 34 98	 push	 DWORD PTR [eax+ebx*4]
  00030	e8 00 00 00 00	 call	 ?RegisterMaterial@CGrannyMaterialPalette@@QAEKPAUgranny_material@@@Z ; CGrannyMaterialPalette::RegisterMaterial
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  00035	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\Mesh.cpp

; 263  : 		DWORD mtrlIndex=rkMtrlPal.RegisterMaterial(pgrnMaterial);

  00038	8b f8		 mov	 edi, eax
  0003a	89 7d f4	 mov	 DWORD PTR _mtrlIndex$1[ebp], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  0003d	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00040	74 08		 je	 SHORT $LN10@LoadMateri

; 845  :             _STD _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00042	89 39		 mov	 DWORD PTR [ecx], edi

; 846  :         } else {
; 847  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 848  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 849  :             _ASAN_VECTOR_RELEASE_GUARD;
; 850  :         }
; 851  : 
; 852  :         _Orphan_range(_Mylast, _Mylast);
; 853  :         _Ty& _Result = *_Mylast;
; 854  :         ++_Mylast;

  00044	83 46 04 04	 add	 DWORD PTR [esi+4], 4

; 830  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00048	eb 0c		 jmp	 SHORT $LN9@LoadMateri
$LN10@LoadMateri:

; 831  :         }
; 832  : 
; 833  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0004a	8d 45 f4	 lea	 eax, DWORD PTR _mtrlIndex$1[ebp]
  0004d	50		 push	 eax
  0004e	51		 push	 ecx
  0004f	8b ce		 mov	 ecx, esi
  00051	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABK@?$vector@KV?$allocator@K@std@@@std@@AAEPAKQAKABK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Emplace_reallocate<unsigned long const &>
$LN9@LoadMateri:
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\Mesh.cpp

; 265  : 		bHaveBlendThing |= rkMtrlPal.GetMaterialRef(mtrlIndex).GetType() == CGrannyMaterial::TYPE_BLEND_PNT;

  00056	57		 push	 edi
  00057	8b 7d 08	 mov	 edi, DWORD PTR _rkMtrlPal$[ebp]
  0005a	8b cf		 mov	 ecx, edi
  0005c	e8 00 00 00 00	 call	 ?GetMaterialRef@CGrannyMaterialPalette@@QAEAAVCGrannyMaterial@@K@Z ; CGrannyMaterialPalette::GetMaterialRef
  00061	8b c8		 mov	 ecx, eax
  00063	e8 00 00 00 00	 call	 ?GetType@CGrannyMaterial@@QBE?AW4EType@1@XZ ; CGrannyMaterial::GetType
  00068	8a 55 ff	 mov	 dl, BYTE PTR _bHaveBlendThing$1$[ebp]
  0006b	83 f8 01	 cmp	 eax, 1
  0006e	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00071	0f 94 c0	 sete	 al
  00074	43		 inc	 ebx
  00075	0a d0		 or	 dl, al
  00077	88 55 ff	 mov	 BYTE PTR _bHaveBlendThing$1$[ebp], dl
  0007a	3b 5d f0	 cmp	 ebx, DWORD PTR _mtrlCount$1$[ebp]
  0007d	7c a6		 jl	 SHORT $LL4@LoadMateri

; 266  : 	}
; 267  : 	m_bHaveBlendThing = bHaveBlendThing;

  0007f	5f		 pop	 edi
  00080	8b c1		 mov	 eax, ecx
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	88 50 36	 mov	 BYTE PTR [eax+54], dl
$LN21@LoadMateri:

; 268  : 
; 269  : 	return true;
; 270  : }

  00087	b0 01		 mov	 al, 1
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c2 04 00	 ret	 4
?LoadMaterials@CGrannyMesh@@IAE_NAAVCGrannyMaterialPalette@@@Z ENDP ; CGrannyMesh::LoadMaterials
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\Mesh.cpp
;	COMDAT ?Initialize@CGrannyMesh@@IAEXXZ
_TEXT	SEGMENT
?Initialize@CGrannyMesh@@IAEXXZ PROC			; CGrannyMesh::Initialize, COMDAT
; _this$ = ecx

; 302  : 	for (int r = 0; r < CGrannyMaterial::TYPE_MAX_NUM; ++r)
; 303  : 		m_triGroupNodeLists[r] = NULL;

  00000	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0
  00007	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0

; 304  : 
; 305  : 	m_pgrnMeshType = GrannyPNT332VertexType;

  0000e	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__GrannyPNT332VertexType
  00013	8b 00		 mov	 eax, DWORD PTR [eax]
  00015	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 306  : 	m_pgrnMesh = NULL;

  00018	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 307  : 	// WORK
; 308  : 	m_pgrnMeshBindingTemp = NULL;

  0001f	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 309  : 	// END_OF_WORK
; 310  : 	m_pgrnMeshDeformer = NULL;

  00026	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 311  : 
; 312  : 	m_triGroupNodes = NULL;

  0002d	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0

; 313  : 
; 314  : 	m_vtxBasePos = 0;

  00034	c7 41 2c 00 00
	00 00		 mov	 DWORD PTR [ecx+44], 0

; 315  : 	m_idxBasePos = 0;

  0003b	c7 41 30 00 00
	00 00		 mov	 DWORD PTR [ecx+48], 0

; 316  : 
; 317  : 	m_canDeformPNTVertex = false;

  00042	66 c7 41 34 00
	00		 mov	 WORD PTR [ecx+52], 0

; 318  : 	m_isTwoSide = false;
; 319  : 	m_bHaveBlendThing = false;

  00048	c6 41 36 00	 mov	 BYTE PTR [ecx+54], 0

; 320  : }

  0004c	c3		 ret	 0
?Initialize@CGrannyMesh@@IAEXXZ ENDP			; CGrannyMesh::Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\Mesh.cpp
;	COMDAT ?RebuildTriGroupNodeList@CGrannyMesh@@QAEXXZ
_TEXT	SEGMENT
?RebuildTriGroupNodeList@CGrannyMesh@@QAEXXZ PROC	; CGrannyMesh::RebuildTriGroupNodeList, COMDAT
; _this$ = ecx

; 221  : 	assert(!"CGrannyMesh::RebuildTriGroupNodeList() - Why should you rebuild it -?");
; 222  : 	/*
; 223  : 	int mtrlCount = m_pgrnMesh->MaterialBindingCount;
; 224  : 	int GroupNodeCount = GrannyGetMeshTriangleGroupCount(m_pgrnMesh);
; 225  : 
; 226  : 	if (GroupNodeCount <= 0)
; 227  : 		return;
; 228  : 
; 229  : 	const granny_tri_material_group * c_pgrnTriGroups = GrannyGetMeshTriangleGroups(m_pgrnMesh);
; 230  : 
; 231  : 	for (int g = 0; g < GroupNodeCount; ++g)
; 232  : 	{
; 233  : 		const granny_tri_material_group& c_rgrnTriGroup = c_pgrnTriGroups[g];
; 234  : 		TTriGroupNode * pTriGroupNode = m_triGroupNodes + g;
; 235  : 
; 236  : 		int iMtrl = c_rgrnTriGroup.MaterialIndex;
; 237  : 
; 238  : 		if (iMtrl >= 0 && iMtrl < mtrlCount)
; 239  : 		{
; 240  : 			CGrannyMaterial & rMtrl = m_mtrls[iMtrl];
; 241  : 
; 242  : 			pTriGroupNode->lpd3dTextures[0] = rMtrl.GetD3DTexture(0);
; 243  : 			pTriGroupNode->lpd3dTextures[1] = rMtrl.GetD3DTexture(1);
; 244  : 
; 245  : 		}
; 246  : 	}
; 247  : 	*/
; 248  : }

  00000	c2 00 00	 ret	 0
?RebuildTriGroupNodeList@CGrannyMesh@@QAEXXZ ENDP	; CGrannyMesh::RebuildTriGroupNodeList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\Mesh.cpp
;	COMDAT ?GetTriGroupNodeList@CGrannyMesh@@QBEPBUSTriGroupNode@1@W4EType@CGrannyMaterial@@@Z
_TEXT	SEGMENT
_eMtrlType$ = 8						; size = 4
?GetTriGroupNodeList@CGrannyMesh@@QBEPBUSTriGroupNode@1@W4EType@CGrannyMaterial@@@Z PROC ; CGrannyMesh::GetTriGroupNodeList, COMDAT
; _this$ = ecx

; 88   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   : 	return m_triGroupNodeLists[eMtrlType];

  00003	8b 45 08	 mov	 eax, DWORD PTR _eMtrlType$[ebp]
  00006	8b 44 81 24	 mov	 eax, DWORD PTR [ecx+eax*4+36]

; 90   : }

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?GetTriGroupNodeList@CGrannyMesh@@QBEPBUSTriGroupNode@1@W4EType@CGrannyMaterial@@@Z ENDP ; CGrannyMesh::GetTriGroupNodeList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\Mesh.cpp
;	COMDAT ?GetGrannyMeshPointer@CGrannyMesh@@QBEPBUgranny_mesh@@XZ
_TEXT	SEGMENT
?GetGrannyMeshPointer@CGrannyMesh@@QBEPBUgranny_mesh@@XZ PROC ; CGrannyMesh::GetGrannyMeshPointer, COMDAT
; _this$ = ecx

; 84   : 	return m_pgrnMesh;

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 85   : }

  00003	c3		 ret	 0
?GetGrannyMeshPointer@CGrannyMesh@@QBEPBUgranny_mesh@@XZ ENDP ; CGrannyMesh::GetGrannyMeshPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\Mesh.cpp
;	COMDAT ?GetIndexBasePosition@CGrannyMesh@@QBEHXZ
_TEXT	SEGMENT
?GetIndexBasePosition@CGrannyMesh@@QBEHXZ PROC		; CGrannyMesh::GetIndexBasePosition, COMDAT
; _this$ = ecx

; 105  : 	return m_idxBasePos;

  00000	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]

; 106  : }

  00003	c3		 ret	 0
?GetIndexBasePosition@CGrannyMesh@@QBEHXZ ENDP		; CGrannyMesh::GetIndexBasePosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\Mesh.cpp
;	COMDAT ?GetVertexBasePosition@CGrannyMesh@@QBEHXZ
_TEXT	SEGMENT
?GetVertexBasePosition@CGrannyMesh@@QBEHXZ PROC		; CGrannyMesh::GetVertexBasePosition, COMDAT
; _this$ = ecx

; 100  : 	return m_vtxBasePos;

  00000	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]

; 101  : }

  00003	c3		 ret	 0
?GetVertexBasePosition@CGrannyMesh@@QBEHXZ ENDP		; CGrannyMesh::GetVertexBasePosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\Mesh.cpp
;	COMDAT ?GetDefaultBoneIndices@CGrannyMesh@@QBEPBHXZ
_TEXT	SEGMENT
?GetDefaultBoneIndices@CGrannyMesh@@QBEPBHXZ PROC	; CGrannyMesh::GetDefaultBoneIndices, COMDAT
; _this$ = ecx

; 117  : 	return GrannyGetMeshBindingToBoneIndices(m_pgrnMeshBindingTemp);

  00000	ff 71 0c	 push	 DWORD PTR [ecx+12]
  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GrannyGetMeshBindingToBoneIndices@4

; 118  : }

  00009	c3		 ret	 0
?GetDefaultBoneIndices@CGrannyMesh@@QBEPBHXZ ENDP	; CGrannyMesh::GetDefaultBoneIndices
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\Mesh.cpp
;	COMDAT ?GetVertexCount@CGrannyMesh@@QBEHXZ
_TEXT	SEGMENT
?GetVertexCount@CGrannyMesh@@QBEHXZ PROC		; CGrannyMesh::GetVertexCount, COMDAT
; _this$ = ecx

; 94   : 	assert(m_pgrnMesh!=NULL);
; 95   : 	return GrannyGetMeshVertexCount(m_pgrnMesh);

  00000	ff 71 08	 push	 DWORD PTR [ecx+8]
  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GrannyGetMeshVertexCount@4

; 96   : }

  00009	c3		 ret	 0
?GetVertexCount@CGrannyMesh@@QBEHXZ ENDP		; CGrannyMesh::GetVertexCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\Mesh.cpp
;	COMDAT ?IsTwoSide@CGrannyMesh@@QBE_NXZ
_TEXT	SEGMENT
?IsTwoSide@CGrannyMesh@@QBE_NXZ PROC			; CGrannyMesh::IsTwoSide, COMDAT
; _this$ = ecx

; 274  : 	return m_isTwoSide;

  00000	8a 41 35	 mov	 al, BYTE PTR [ecx+53]

; 275  : }

  00003	c3		 ret	 0
?IsTwoSide@CGrannyMesh@@QBE_NXZ ENDP			; CGrannyMesh::IsTwoSide
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\Mesh.cpp
;	COMDAT ?CanDeformPNTVertices@CGrannyMesh@@QBE_NXZ
_TEXT	SEGMENT
?CanDeformPNTVertices@CGrannyMesh@@QBE_NXZ PROC		; CGrannyMesh::CanDeformPNTVertices, COMDAT
; _this$ = ecx

; 79   : 	return m_canDeformPNTVertex;

  00000	8a 41 34	 mov	 al, BYTE PTR [ecx+52]

; 80   : }

  00003	c3		 ret	 0
?CanDeformPNTVertices@CGrannyMesh@@QBE_NXZ ENDP		; CGrannyMesh::CanDeformPNTVertices
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\Mesh.cpp
;	COMDAT ?DeformPNTVertices@CGrannyMesh@@QBEXPAXPAUD3DXMATRIX@@PAUmesh_binding@granny@@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_dstBaseVertices$ = 8					; size = 4
_boneMatrices$ = 12					; size = 4
_pgrnMeshBinding$ = 16					; size = 4
?DeformPNTVertices@CGrannyMesh@@QBEXPAXPAUD3DXMATRIX@@PAUmesh_binding@granny@@@Z PROC ; CGrannyMesh::DeformPNTVertices, COMDAT
; _this$ = ecx

; 46   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx
  00009	89 7d fc	 mov	 DWORD PTR _this$1$[ebp], edi

; 47   : 	assert(dstBaseVertices != NULL);
; 48   : 	assert(boneMatrices != NULL);
; 49   : 	assert(m_pgrnMeshDeformer != NULL);
; 50   : 
; 51   : 	const granny_mesh * pgrnMesh = GetGrannyMeshPointer();

  0000c	e8 00 00 00 00	 call	 ?GetGrannyMeshPointer@CGrannyMesh@@QBEPBUgranny_mesh@@XZ ; CGrannyMesh::GetGrannyMeshPointer
  00011	8b f0		 mov	 esi, eax

; 52   : 
; 53   : 	TPNTVertex * srcVertices = (TPNTVertex *) GrannyGetMeshVertices(pgrnMesh);

  00013	56		 push	 esi
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GrannyGetMeshVertices@4

; 54   : 	TPNTVertex * dstVertices = ((TPNTVertex *) dstBaseVertices) + m_vtxBasePos;

  0001a	8b 7f 2c	 mov	 edi, DWORD PTR [edi+44]
  0001d	8b d8		 mov	 ebx, eax
  0001f	c1 e7 05	 shl	 edi, 5
  00022	03 7d 08	 add	 edi, DWORD PTR _dstBaseVertices$[ebp]

; 55   : 
; 56   : 	int vtxCount = GrannyGetMeshVertexCount(pgrnMesh);

  00025	56		 push	 esi
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GrannyGetMeshVertexCount@4

; 57   : 
; 58   : 	// WORK
; 59   : #if GrannyProductMinorVersion==4
; 60   : 	int * boneIndices = GrannyGetMeshBindingToBoneIndices(pgrnMeshBinding);
; 61   : #elif GrannyProductMinorVersion==11 || GrannyProductMinorVersion==9 || GrannyProductMinorVersion==8 || GrannyProductMinorVersion==7
; 62   : 	const granny_int32x * boneIndices = GrannyGetMeshBindingToBoneIndices(pgrnMeshBinding);

  0002c	ff 75 10	 push	 DWORD PTR _pgrnMeshBinding$[ebp]
  0002f	8b f0		 mov	 esi, eax
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GrannyGetMeshBindingToBoneIndices@4

; 63   : #else
; 64   : #error "unknown granny version"
; 65   : #endif
; 66   : 	// END_OF_WORK
; 67   : 
; 68   : 	GrannyDeformVertices(

  00037	57		 push	 edi
  00038	53		 push	 ebx
  00039	56		 push	 esi
  0003a	ff 75 0c	 push	 DWORD PTR _boneMatrices$[ebp]
  0003d	50		 push	 eax
  0003e	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00041	ff 70 10	 push	 DWORD PTR [eax+16]
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GrannyDeformVertices@24
  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx

; 69   : 		m_pgrnMeshDeformer,
; 70   : 		boneIndices,
; 71   : 		(float *)boneMatrices,
; 72   : 		vtxCount,
; 73   : 		srcVertices,
; 74   : 		dstVertices);
; 75   : }

  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c2 0c 00	 ret	 12			; 0000000cH
?DeformPNTVertices@CGrannyMesh@@QBEXPAXPAUD3DXMATRIX@@PAUmesh_binding@granny@@@Z ENDP ; CGrannyMesh::DeformPNTVertices
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\Mesh.cpp
;	COMDAT ?SetPNT2Mesh@CGrannyMesh@@QAEXXZ
_TEXT	SEGMENT
?SetPNT2Mesh@CGrannyMesh@@QAEXXZ PROC			; CGrannyMesh::SetPNT2Mesh, COMDAT
; _this$ = ecx

; 279  : 	m_pgrnMeshType = GrannyPNT3322VertexType;

  00000	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ?GrannyPNT3322VertexType@@3PAUgranny_data_type_definition@@A ; GrannyPNT3322VertexType

; 280  : }

  00007	c3		 ret	 0
?SetPNT2Mesh@CGrannyMesh@@QAEXXZ ENDP			; CGrannyMesh::SetPNT2Mesh
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\Mesh.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\Mesh.cpp
;	COMDAT ?Destroy@CGrannyMesh@@QAEXXZ
_TEXT	SEGMENT
?Destroy@CGrannyMesh@@QAEXXZ PROC			; CGrannyMesh::Destroy, COMDAT
; _this$ = ecx

; 283  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 284  : 	if (m_triGroupNodes)

  00003	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $LN2@Destroy

; 285  : 		delete [] m_triGroupNodes;

  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00010	83 c4 04	 add	 esp, 4
$LN2@Destroy:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00013	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00016	3b 46 18	 cmp	 eax, DWORD PTR [esi+24]
  00019	74 03		 je	 SHORT $LN6@Destroy

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0001b	89 46 18	 mov	 DWORD PTR [esi+24], eax
$LN6@Destroy:
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\Mesh.cpp

; 290  : 	if (m_pgrnMeshBindingTemp)

  0001e	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00021	85 c0		 test	 eax, eax
  00023	74 07		 je	 SHORT $LN3@Destroy

; 291  : 		GrannyFreeMeshBinding(m_pgrnMeshBindingTemp);

  00025	50		 push	 eax
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GrannyFreeMeshBinding@4
$LN3@Destroy:

; 292  : 	// END_OF_WORK
; 293  : 
; 294  :     if (m_pgrnMeshDeformer)

  0002c	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0002f	85 c0		 test	 eax, eax
  00031	74 07		 je	 SHORT $LN4@Destroy

; 295  : 		GrannyFreeMeshDeformer(m_pgrnMeshDeformer);

  00033	50		 push	 eax
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GrannyFreeMeshDeformer@4
$LN4@Destroy:

; 296  : 
; 297  : 	Initialize();

  0003a	8b ce		 mov	 ecx, esi
  0003c	5e		 pop	 esi
  0003d	e9 00 00 00 00	 jmp	 ?Initialize@CGrannyMesh@@IAEXXZ ; CGrannyMesh::Initialize
?Destroy@CGrannyMesh@@QAEXXZ ENDP			; CGrannyMesh::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\Mesh.cpp
;	COMDAT ?NEW_LoadVertices@CGrannyMesh@@QAEXPAX@Z
_TEXT	SEGMENT
_dstBaseVertices$ = 8					; size = 4
?NEW_LoadVertices@CGrannyMesh@@QAEXPAX@Z PROC		; CGrannyMesh::NEW_LoadVertices, COMDAT
; _this$ = ecx

; 35   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f1		 mov	 esi, ecx

; 36   : 	const granny_mesh * pgrnMesh = GetGrannyMeshPointer();

  00007	e8 00 00 00 00	 call	 ?GetGrannyMeshPointer@CGrannyMesh@@QBEPBUgranny_mesh@@XZ ; CGrannyMesh::GetGrannyMeshPointer
  0000c	8b f8		 mov	 edi, eax

; 37   : 
; 38   : 	if (!GrannyMeshIsRigid(pgrnMesh))

  0000e	57		 push	 edi
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GrannyMeshIsRigid@4
  00015	84 c0		 test	 al, al
  00017	74 14		 je	 SHORT $LN1@NEW_LoadVe

; 39   : 		return;
; 40   : 
; 41   : 	TPNTVertex * dstVertices = ((TPNTVertex *)dstBaseVertices) + m_vtxBasePos;

  00019	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  0001c	c1 e1 05	 shl	 ecx, 5
  0001f	03 4d 08	 add	 ecx, DWORD PTR _dstBaseVertices$[ebp]

; 42   : 	GrannyCopyMeshVertices(pgrnMesh, m_pgrnMeshType, dstVertices);

  00022	51		 push	 ecx
  00023	ff 76 04	 push	 DWORD PTR [esi+4]
  00026	57		 push	 edi
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GrannyCopyMeshVertices@12
$LN1@NEW_LoadVe:

; 43   : }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?NEW_LoadVertices@CGrannyMesh@@QAEXPAX@Z ENDP		; CGrannyMesh::NEW_LoadVertices
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\Mesh.cpp
;	COMDAT ?LoadPNTVertices@CGrannyMesh@@QAEXPAX@Z
_TEXT	SEGMENT
_dstBaseVertices$ = 8					; size = 4
?LoadPNTVertices@CGrannyMesh@@QAEXPAX@Z PROC		; CGrannyMesh::LoadPNTVertices, COMDAT
; _this$ = ecx

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f1		 mov	 esi, ecx

; 25   : 	const granny_mesh * pgrnMesh = GetGrannyMeshPointer();

  00007	e8 00 00 00 00	 call	 ?GetGrannyMeshPointer@CGrannyMesh@@QBEPBUgranny_mesh@@XZ ; CGrannyMesh::GetGrannyMeshPointer
  0000c	8b f8		 mov	 edi, eax

; 26   : 
; 27   : 	if (!GrannyMeshIsRigid(pgrnMesh))

  0000e	57		 push	 edi
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GrannyMeshIsRigid@4
  00015	84 c0		 test	 al, al
  00017	74 14		 je	 SHORT $LN1@LoadPNTVer

; 28   : 		return;
; 29   : 
; 30   : 	TPNTVertex * dstVertices = ((TPNTVertex *)dstBaseVertices) + m_vtxBasePos;

  00019	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  0001c	c1 e1 05	 shl	 ecx, 5
  0001f	03 4d 08	 add	 ecx, DWORD PTR _dstBaseVertices$[ebp]

; 31   : 	GrannyCopyMeshVertices(pgrnMesh, m_pgrnMeshType, dstVertices);

  00022	51		 push	 ecx
  00023	ff 76 04	 push	 DWORD PTR [esi+4]
  00026	57		 push	 edi
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GrannyCopyMeshVertices@12
$LN1@LoadPNTVer:

; 32   : }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?LoadPNTVertices@CGrannyMesh@@QAEXPAX@Z ENDP		; CGrannyMesh::LoadPNTVertices
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\Mesh.cpp
;	COMDAT ?LoadIndices@CGrannyMesh@@QAEXPAX@Z
_TEXT	SEGMENT
_dstBaseIndices$ = 8					; size = 4
?LoadIndices@CGrannyMesh@@QAEXPAX@Z PROC		; CGrannyMesh::LoadIndices, COMDAT
; _this$ = ecx

; 16   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 17   : 	const granny_mesh * pgrnMesh = GetGrannyMeshPointer();

  00006	e8 00 00 00 00	 call	 ?GetGrannyMeshPointer@CGrannyMesh@@QBEPBUgranny_mesh@@XZ ; CGrannyMesh::GetGrannyMeshPointer

; 18   : 
; 19   : 	TIndex * dstIndices = ((TIndex *)dstBaseIndices) + m_idxBasePos;

  0000b	8b 56 30	 mov	 edx, DWORD PTR [esi+48]
  0000e	8b 4d 08	 mov	 ecx, DWORD PTR _dstBaseIndices$[ebp]
  00011	8d 0c 51	 lea	 ecx, DWORD PTR [ecx+edx*2]

; 20   : 	GrannyCopyMeshIndices(pgrnMesh, sizeof(TIndex), dstIndices);

  00014	51		 push	 ecx
  00015	6a 02		 push	 2
  00017	50		 push	 eax
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GrannyCopyMeshIndices@12
  0001e	5e		 pop	 esi

; 21   : }

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?LoadIndices@CGrannyMesh@@QAEXPAX@Z ENDP		; CGrannyMesh::LoadIndices
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\Mesh.cpp
;	COMDAT ?CreateFromGrannyMeshPointer@CGrannyMesh@@QAE_NPAUgranny_skeleton@@PAUgranny_mesh@@HHAAVCGrannyMaterialPalette@@@Z
_TEXT	SEGMENT
_pgrnSkeleton$ = 8					; size = 4
_pgrnMesh$ = 12						; size = 4
_vtxBasePos$ = 16					; size = 4
_idxBasePos$ = 20					; size = 4
_rkMtrlPal$ = 24					; size = 4
?CreateFromGrannyMeshPointer@CGrannyMesh@@QAE_NPAUgranny_skeleton@@PAUgranny_mesh@@HHAAVCGrannyMaterialPalette@@@Z PROC ; CGrannyMesh::CreateFromGrannyMeshPointer, COMDAT
; _this$ = ecx

; 130  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 131  : 	assert(IsEmpty());
; 132  : 
; 133  : 	m_pgrnMesh = pgrnMesh;
; 134  : 	m_vtxBasePos = vtxBasePos;

  00003	8b 45 10	 mov	 eax, DWORD PTR _vtxBasePos$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	8b 4d 0c	 mov	 ecx, DWORD PTR _pgrnMesh$[ebp]
  0000c	89 46 2c	 mov	 DWORD PTR [esi+44], eax

; 135  : 	m_idxBasePos = idxBasePos;

  0000f	8b 45 14	 mov	 eax, DWORD PTR _idxBasePos$[ebp]
  00012	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00015	89 46 30	 mov	 DWORD PTR [esi+48], eax

; 136  : 
; 137  : 	if (m_pgrnMesh->BoneBindingCount < 0)

  00018	83 79 1c 00	 cmp	 DWORD PTR [ecx+28], 0
  0001c	7c 7f		 jl	 SHORT $LN6@CreateFrom

; 138  : 		return true;
; 139  : 
; 140  : 	// WORK
; 141  : 	m_pgrnMeshBindingTemp = GrannyNewMeshBinding(m_pgrnMesh, pgrnSkeleton, pgrnSkeleton);

  0001e	8b 45 08	 mov	 eax, DWORD PTR _pgrnSkeleton$[ebp]
  00021	50		 push	 eax
  00022	50		 push	 eax
  00023	51		 push	 ecx
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GrannyNewMeshBinding@12

; 142  : 	// END_OF_WORK
; 143  : 
; 144  : 	if (!GrannyMeshIsRigid(m_pgrnMesh))

  0002a	ff 76 08	 push	 DWORD PTR [esi+8]
  0002d	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GrannyMeshIsRigid@4
  00036	84 c0		 test	 al, al
  00038	75 1e		 jne	 SHORT $LN3@CreateFrom

; 145  : 	{
; 146  : 		m_canDeformPNTVertex = true;
; 147  : 
; 148  : 		granny_data_type_definition * pgrnInputType = GrannyGetMeshVertexType(m_pgrnMesh);

  0003a	ff 76 08	 push	 DWORD PTR [esi+8]
  0003d	c6 46 34 01	 mov	 BYTE PTR [esi+52], 1
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GrannyGetMeshVertexType@4

; 149  : 		granny_data_type_definition * pgrnOutputType = m_pgrnMeshType;
; 150  : 
; 151  : #if GrannyProductMinorVersion==4
; 152  : 		m_pgrnMeshDeformer = GrannyNewMeshDeformer(pgrnInputType, pgrnOutputType, GrannyDeformPositionNormal);
; 153  : #elif GrannyProductMinorVersion==11 || GrannyProductMinorVersion==9 || GrannyProductMinorVersion==8 || GrannyProductMinorVersion==7
; 154  : 		m_pgrnMeshDeformer = GrannyNewMeshDeformer(pgrnInputType, pgrnOutputType, GrannyDeformPositionNormal, GrannyDontAllowUncopiedTail);

  00047	6a 00		 push	 0
  00049	6a 02		 push	 2
  0004b	ff 76 04	 push	 DWORD PTR [esi+4]
  0004e	50		 push	 eax
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GrannyNewMeshDeformer@16
  00055	89 46 10	 mov	 DWORD PTR [esi+16], eax
$LN3@CreateFrom:

; 155  : 		// m_pgrnMeshDeformer = GrannyNewMeshDeformer(pgrnInputType, pgrnOutputType, GrannyDeformPositionNormal, GrannyAllowUncopiedTail);
; 156  : #else
; 157  : #error "unknown granny version"
; 158  : #endif
; 159  : 		assert(m_pgrnMeshDeformer != NULL && "Cannot create mesh deformer");
; 160  : 	}
; 161  : 
; 162  : 	// Two Side Mesh
; 163  : 	if (!strncmp(m_pgrnMesh->Name, "2x", 2))

  00058	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0005b	6a 02		 push	 2
  0005d	68 00 00 00 00	 push	 OFFSET ??_C@_02MALHOEON@2x@
  00062	ff 30		 push	 DWORD PTR [eax]
  00064	e8 00 00 00 00	 call	 _strncmp
  00069	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006c	85 c0		 test	 eax, eax
  0006e	75 04		 jne	 SHORT $LN4@CreateFrom

; 164  : 		m_isTwoSide = true;

  00070	c6 46 35 01	 mov	 BYTE PTR [esi+53], 1
$LN4@CreateFrom:

; 165  : 
; 166  : 	if (!LoadMaterials(rkMtrlPal))

  00074	ff 75 18	 push	 DWORD PTR _rkMtrlPal$[ebp]
  00077	8b ce		 mov	 ecx, esi
  00079	e8 00 00 00 00	 call	 ?LoadMaterials@CGrannyMesh@@IAE_NAAVCGrannyMaterialPalette@@@Z ; CGrannyMesh::LoadMaterials
  0007e	84 c0		 test	 al, al
  00080	74 14		 je	 SHORT $LN8@CreateFrom

; 167  : 		return false;
; 168  : 
; 169  : 	if (!LoadTriGroupNodeList(rkMtrlPal))

  00082	ff 75 18	 push	 DWORD PTR _rkMtrlPal$[ebp]
  00085	8b ce		 mov	 ecx, esi
  00087	e8 00 00 00 00	 call	 ?LoadTriGroupNodeList@CGrannyMesh@@IAE_NAAVCGrannyMaterialPalette@@@Z ; CGrannyMesh::LoadTriGroupNodeList
  0008c	84 c0		 test	 al, al
  0008e	5e		 pop	 esi
  0008f	0f 95 c0	 setne	 al

; 173  : }

  00092	5d		 pop	 ebp
  00093	c2 14 00	 ret	 20			; 00000014H
$LN8@CreateFrom:

; 170  : 		return false;

  00096	32 c0		 xor	 al, al
  00098	5e		 pop	 esi

; 173  : }

  00099	5d		 pop	 ebp
  0009a	c2 14 00	 ret	 20			; 00000014H
$LN6@CreateFrom:

; 171  : 
; 172  : 	return true;

  0009d	b0 01		 mov	 al, 1
  0009f	5e		 pop	 esi

; 173  : }

  000a0	5d		 pop	 ebp
  000a1	c2 14 00	 ret	 20			; 00000014H
?CreateFromGrannyMeshPointer@CGrannyMesh@@QAE_NPAUgranny_skeleton@@PAUgranny_mesh@@HHAAVCGrannyMaterialPalette@@@Z ENDP ; CGrannyMesh::CreateFromGrannyMeshPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\Mesh.cpp
;	COMDAT ?IsEmpty@CGrannyMesh@@QBE_NXZ
_TEXT	SEGMENT
?IsEmpty@CGrannyMesh@@QBE_NXZ PROC			; CGrannyMesh::IsEmpty, COMDAT
; _this$ = ecx

; 123  : 	if (m_pgrnMesh)

  00000	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  00004	0f 94 c0	 sete	 al

; 124  : 		return false;
; 125  : 
; 126  : 	return true;
; 127  : }

  00007	c3		 ret	 0
?IsEmpty@CGrannyMesh@@QBE_NXZ ENDP			; CGrannyMesh::IsEmpty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\Mesh.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\Mesh.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\Mesh.cpp
;	COMDAT ??1CGrannyMesh@@UAE@XZ
_TEXT	SEGMENT
??1CGrannyMesh@@UAE@XZ PROC				; CGrannyMesh::~CGrannyMesh, COMDAT
; _this$ = ecx

; 328  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CGrannyMesh@@6B@

; 329  : 	Destroy();

  00009	e8 00 00 00 00	 call	 ?Destroy@CGrannyMesh@@QAEXXZ ; CGrannyMesh::Destroy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  0000e	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00011	85 c0		 test	 eax, eax
  00013	74 41		 je	 SHORT $LN8@CGrannyMes

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00015	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00018	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0001a	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0001d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00023	72 12		 jb	 SHORT $LN27@CGrannyMes

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00025	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00028	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0002b	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0002d	83 c0 fc	 add	 eax, -4			; fffffffcH
  00030	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00033	77 23		 ja	 SHORT $LN24@CGrannyMes

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00035	8b c2		 mov	 eax, edx
$LN27@CGrannyMes:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00037	51		 push	 ecx
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  0003e	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00045	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00048	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 2082 :             _Myend   = nullptr;

  0004f	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
$LN8@CGrannyMes:
  00056	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\Mesh.cpp

; 330  : }

  00057	c3		 ret	 0
$LN24@CGrannyMes:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN36@CGrannyMes:
  0005d	cc		 int	 3
??1CGrannyMesh@@UAE@XZ ENDP				; CGrannyMesh::~CGrannyMesh
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\Mesh.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\Mesh.cpp
;	COMDAT ??0CGrannyMesh@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CGrannyMesh@@QAE@XZ PROC				; CGrannyMesh::CGrannyMesh, COMDAT
; _this$ = ecx

; 323  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CGrannyMesh@@6B@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00010	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00017	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  0001e	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
; File C:\Marty 5.5\Src-Client\Client\eterGrnLib\Mesh.cpp

; 324  : 	Initialize();

  00025	e8 00 00 00 00	 call	 ?Initialize@CGrannyMesh@@IAEXXZ ; CGrannyMesh::Initialize

; 325  : }

  0002a	8b c6		 mov	 eax, esi
  0002c	5e		 pop	 esi
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??0CGrannyMesh@@QAE@XZ ENDP				; CGrannyMesh::CGrannyMesh
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 182  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 183  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 184  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 185  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 136  :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 186  :         _Throw_bad_array_new_length(); // add overflow
; 187  :     }
; 188  : 
; 189  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 136  :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 191  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 192  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 193  : 
; 194  : #ifdef _DEBUG
; 195  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 196  : #endif // defined(_DEBUG)
; 197  :     return _Ptr;
; 198  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 107  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 108  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN18@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN18@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 144  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 145  :     }

  00003	8b c1		 mov	 eax, ecx

; 66   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 67   :     {
; 68   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 144  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 145  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN13@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN8@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 96   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 97   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 92   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 73   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 75   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
