; Listing generated by Microsoft (R) Optimizing Compiler Version 19.43.34808.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\SphereLib\Distribute\sphere.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?IsInStaticRange@Vector3d@@QBE_NXZ		; Vector3d::IsInStaticRange
PUBLIC	?Set@Sphere@@QAEXABVVector3d@@M@Z		; Sphere::Set
PUBLIC	?Compute@Sphere@@QAEXABVSphereInterface@@@Z	; Sphere::Compute
PUBLIC	?RayIntersection@Sphere@@QAE_NABVVector3d@@0MPAV2@@Z ; Sphere::RayIntersection
PUBLIC	?RayIntersection@Sphere@@QAE_NABVVector3d@@0PAV2@@Z ; Sphere::RayIntersection
PUBLIC	?RayIntersectionInFront@Sphere@@QAE_NABVVector3d@@0PAV2@@Z ; Sphere::RayIntersectionInFront
PUBLIC	?Report@Sphere@@QAEXXZ				; Sphere::Report
PUBLIC	__real@00000000
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@4a47fe70
PUBLIC	__real@4cbebc20
PUBLIC	__real@bf800000
PUBLIC	__real@ca47fe70
PUBLIC	__real@ccbebc20
EXTRN	_sqrt:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@ccbebc20
CONST	SEGMENT
__real@ccbebc20 DD 0ccbebc20r			; -1e+08
CONST	ENDS
;	COMDAT __real@ca47fe70
CONST	SEGMENT
__real@ca47fe70 DD 0ca47fe70r			; -3.2767e+06
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@4cbebc20
CONST	SEGMENT
__real@4cbebc20 DD 04cbebc20r			; 1e+08
CONST	ENDS
;	COMDAT __real@4a47fe70
CONST	SEGMENT
__real@4a47fe70 DD 04a47fe70r			; 3.2767e+06
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp
;	COMDAT ?Report@Sphere@@QAEXXZ
_TEXT	SEGMENT
?Report@Sphere@@QAEXXZ PROC				; Sphere::Report, COMDAT
; _this$ = ecx

; 128  : }

  00000	c2 00 00	 ret	 0
?Report@Sphere@@QAEXXZ ENDP				; Sphere::Report
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp
;	COMDAT ?RayIntersectionInFront@Sphere@@QAE_NABVVector3d@@0PAV2@@Z
_TEXT	SEGMENT
_sect$ = -12						; size = 12
_rayOrigin$ = 8						; size = 4
_V$ = 12						; size = 4
_intersect$ = 16					; size = 4
?RayIntersectionInFront@Sphere@@QAE_NABVVector3d@@0PAV2@@Z PROC ; Sphere::RayIntersectionInFront, COMDAT
; _this$ = ecx

; 106  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 107  :   Vector3d sect;
; 108  :   bool hit = RayIntersection(rayOrigin,V,&sect);

  00006	8d 45 f4	 lea	 eax, DWORD PTR _sect$[ebp]
  00009	56		 push	 esi
  0000a	8b 75 0c	 mov	 esi, DWORD PTR _V$[ebp]
  0000d	57		 push	 edi
  0000e	8b 7d 08	 mov	 edi, DWORD PTR _rayOrigin$[ebp]
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	e8 00 00 00 00	 call	 ?RayIntersection@Sphere@@QAE_NABVVector3d@@0PAV2@@Z ; Sphere::RayIntersection

; 109  : 
; 110  :   if ( hit )

  00019	84 c0		 test	 al, al
  0001b	74 64		 je	 SHORT $LN3@RayInterse
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h

; 65   : 	{ Vector3d Diff(x-A.x, y-A.y, z-A.z);

  0001d	f3 0f 10 5d f4	 movss	 xmm3, DWORD PTR _sect$[ebp]
  00022	f3 0f 10 65 f8	 movss	 xmm4, DWORD PTR _sect$[ebp+4]
  00027	0f 28 cb	 movaps	 xmm1, xmm3
  0002a	f3 0f 5c 0f	 subss	 xmm1, DWORD PTR [edi]
  0002e	f3 0f 10 6d fc	 movss	 xmm5, DWORD PTR _sect$[ebp+8]
  00033	0f 28 d4	 movaps	 xmm2, xmm4
  00036	f3 0f 5c 57 04	 subss	 xmm2, DWORD PTR [edi+4]
  0003b	0f 28 c5	 movaps	 xmm0, xmm5
  0003e	f3 0f 5c 47 08	 subss	 xmm0, DWORD PTR [edi+8]

; 201  : 		return (x * a.x + y * a.y + z * a.z );

  00043	f3 0f 59 0e	 mulss	 xmm1, DWORD PTR [esi]
  00047	f3 0f 59 56 04	 mulss	 xmm2, DWORD PTR [esi+4]
  0004c	f3 0f 59 46 08	 mulss	 xmm0, DWORD PTR [esi+8]
  00051	f3 0f 58 d1	 addss	 xmm2, xmm1
  00055	f3 0f 58 d0	 addss	 xmm2, xmm0
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp

; 117  :     if ( dot >= 0  ) // then it's in front!

  00059	0f 2f 15 00 00
	00 00		 comiss	 xmm2, DWORD PTR __real@00000000
  00060	72 1f		 jb	 SHORT $LN3@RayInterse

; 118  :     {
; 119  :       if ( intersect ) *intersect = sect;

  00062	8b 45 10	 mov	 eax, DWORD PTR _intersect$[ebp]
  00065	85 c0		 test	 eax, eax
  00067	74 0e		 je	 SHORT $LN4@RayInterse
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h

; 57   : 	{ x=A.x; y=A.y; z=A.z;

  00069	f3 0f 11 18	 movss	 DWORD PTR [eax], xmm3
  0006d	f3 0f 11 60 04	 movss	 DWORD PTR [eax+4], xmm4
  00072	f3 0f 11 68 08	 movss	 DWORD PTR [eax+8], xmm5
$LN4@RayInterse:
  00077	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp

; 120  :       return true;

  00078	b0 01		 mov	 al, 1

; 124  : }

  0007a	5e		 pop	 esi
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c2 0c 00	 ret	 12			; 0000000cH
$LN3@RayInterse:
  00081	5f		 pop	 edi

; 121  :     }
; 122  :   }
; 123  :   return false;

  00082	32 c0		 xor	 al, al

; 124  : }

  00084	5e		 pop	 esi
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c2 0c 00	 ret	 12			; 0000000cH
?RayIntersectionInFront@Sphere@@QAE_NABVVector3d@@0PAV2@@Z ENDP ; Sphere::RayIntersectionInFront
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp
;	COMDAT ?RayIntersection@Sphere@@QAE_NABVVector3d@@0PAV2@@Z
_TEXT	SEGMENT
_s$1$ = -8						; size = 4
_c$1$ = -4						; size = 4
_rayOrigin$ = 8						; size = 4
_a$1$ = 8						; size = 4
_dir$ = 12						; size = 4
_b$1$ = 12						; size = 4
_intersect$ = 16					; size = 4
_d$3 = 16						; size = 4
?RayIntersection@Sphere@@QAE_NABVVector3d@@0PAV2@@Z PROC ; Sphere::RayIntersection, COMDAT
; _this$ = ecx

; 48   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h

; 65   : 	{ Vector3d Diff(x-A.x, y-A.y, z-A.z);

  00006	f3 0f 10 51 04	 movss	 xmm2, DWORD PTR [ecx+4]
  0000b	f3 0f 10 71 08	 movss	 xmm6, DWORD PTR [ecx+8]
  00010	f3 0f 10 79 0c	 movss	 xmm7, DWORD PTR [ecx+12]

; 30   : 		x = a.x;

  00015	8b 45 0c	 mov	 eax, DWORD PTR _dir$[ebp]
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp

; 48   : {

  00018	57		 push	 edi
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h

; 65   : 	{ Vector3d Diff(x-A.x, y-A.y, z-A.z);

  00019	8b 7d 08	 mov	 edi, DWORD PTR _rayOrigin$[ebp]

; 30   : 		x = a.x;

  0001c	f3 0f 10 18	 movss	 xmm3, DWORD PTR [eax]

; 31   : 		y = a.y;

  00020	f3 0f 10 60 04	 movss	 xmm4, DWORD PTR [eax+4]

; 65   : 	{ Vector3d Diff(x-A.x, y-A.y, z-A.z);

  00025	f3 0f 5c 17	 subss	 xmm2, DWORD PTR [edi]
  00029	f3 0f 5c 77 04	 subss	 xmm6, DWORD PTR [edi+4]
  0002e	f3 0f 5c 7f 08	 subss	 xmm7, DWORD PTR [edi+8]

; 32   : 		z = a.z;

  00033	f3 0f 10 68 08	 movss	 xmm5, DWORD PTR [eax+8]
  00038	f3 0f 11 5d 08	 movss	 DWORD PTR _a$1$[ebp], xmm3
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp

; 55   :   float dist2 = EO.x*EO.x + EO.y*EO.y + EO.z * EO.z;

  0003d	0f 28 ca	 movaps	 xmm1, xmm2
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h

; 31   : 		y = a.y;

  00040	f3 0f 11 65 0c	 movss	 DWORD PTR _b$1$[ebp], xmm4
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp

; 55   :   float dist2 = EO.x*EO.x + EO.y*EO.y + EO.z * EO.z;

  00045	0f 28 c6	 movaps	 xmm0, xmm6
  00048	f3 0f 59 ca	 mulss	 xmm1, xmm2
  0004c	f3 0f 59 c6	 mulss	 xmm0, xmm6
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h

; 32   : 		z = a.z;

  00050	f3 0f 11 6d fc	 movss	 DWORD PTR _c$1$[ebp], xmm5
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp

; 55   :   float dist2 = EO.x*EO.x + EO.y*EO.y + EO.z * EO.z;

  00055	f3 0f 58 c8	 addss	 xmm1, xmm0
  00059	0f 28 c7	 movaps	 xmm0, xmm7
  0005c	f3 0f 59 c7	 mulss	 xmm0, xmm7
  00060	f3 0f 58 c8	 addss	 xmm1, xmm0

; 56   :   // Bug Fix For Gem, if origin is *inside* the sphere, invert the
; 57   :   // direction vector so that we get a valid intersection location.
; 58   :   if ( dist2 < mRadius2 ) V*=-1;

  00064	f3 0f 10 41 14	 movss	 xmm0, DWORD PTR [ecx+20]
  00069	0f 2f c1	 comiss	 xmm0, xmm1
  0006c	76 23		 jbe	 SHORT $LN2@RayInterse
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h

; 84   : 	{x*=s; y*=s; z*=s;}

  0006e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00076	f3 0f 59 d8	 mulss	 xmm3, xmm0
  0007a	f3 0f 59 e0	 mulss	 xmm4, xmm0
  0007e	f3 0f 59 e8	 mulss	 xmm5, xmm0
  00082	f3 0f 11 5d 08	 movss	 DWORD PTR _a$1$[ebp], xmm3
  00087	f3 0f 11 65 0c	 movss	 DWORD PTR _b$1$[ebp], xmm4
  0008c	f3 0f 11 6d fc	 movss	 DWORD PTR _c$1$[ebp], xmm5
$LN2@RayInterse:

; 201  : 		return (x * a.x + y * a.y + z * a.z );

  00091	0f 28 cb	 movaps	 xmm1, xmm3
  00094	f3 0f 59 e6	 mulss	 xmm4, xmm6
  00098	f3 0f 59 ca	 mulss	 xmm1, xmm2
  0009c	f3 0f 59 ef	 mulss	 xmm5, xmm7
  000a0	f3 0f 58 cc	 addss	 xmm1, xmm4

; 146  : 		float l2 = x*x+y*y+z*z;

  000a4	f3 0f 59 d2	 mulss	 xmm2, xmm2
  000a8	f3 0f 59 f6	 mulss	 xmm6, xmm6
  000ac	f3 0f 59 ff	 mulss	 xmm7, xmm7

; 201  : 		return (x * a.x + y * a.y + z * a.z );

  000b0	f3 0f 58 cd	 addss	 xmm1, xmm5

; 146  : 		float l2 = x*x+y*y+z*z;

  000b4	f3 0f 58 d6	 addss	 xmm2, xmm6
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp

; 62   : 	float disc = mRadius2 - (EO.Length2() - v*v);

  000b8	0f 28 c1	 movaps	 xmm0, xmm1
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h

; 201  : 		return (x * a.x + y * a.y + z * a.z );

  000bb	f3 0f 11 4d f8	 movss	 DWORD PTR _s$1$[ebp], xmm1
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp

; 62   : 	float disc = mRadius2 - (EO.Length2() - v*v);

  000c0	f3 0f 59 c1	 mulss	 xmm0, xmm1
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h

; 146  : 		float l2 = x*x+y*y+z*z;

  000c4	f3 0f 58 d7	 addss	 xmm2, xmm7
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp

; 62   : 	float disc = mRadius2 - (EO.Length2() - v*v);

  000c8	f3 0f 5c d0	 subss	 xmm2, xmm0
  000cc	f3 0f 10 41 14	 movss	 xmm0, DWORD PTR [ecx+20]
  000d1	f3 0f 5c c2	 subss	 xmm0, xmm2

; 63   : 
; 64   : 	if (disc > 0.0f)

  000d5	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  000dc	76 69		 jbe	 SHORT $LN3@RayInterse

; 65   : 	{
; 66   : 
; 67   : 		if ( intersect )

  000de	56		 push	 esi
  000df	8b 75 10	 mov	 esi, DWORD PTR _intersect$[ebp]
  000e2	85 f6		 test	 esi, esi
  000e4	74 57		 je	 SHORT $LN4@RayInterse
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 808  :             return (float)sqrt(_X);

  000e6	0f 5a c0	 cvtps2pd xmm0, xmm0
  000e9	83 ec 08	 sub	 esp, 8
  000ec	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000f1	e8 00 00 00 00	 call	 _sqrt
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp

; 74   :       *intersect = rayOrigin + V*(v-d);

  000f6	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _s$1$[ebp]
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 808  :             return (float)sqrt(_X);

  000fb	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h

; 69   : 	{ Vector3d Scaled(x*s, y*s, z*s);

  000fe	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _a$1$[ebp]
  00103	f3 0f 10 55 0c	 movss	 xmm2, DWORD PTR _b$1$[ebp]
  00108	f3 0f 10 5d fc	 movss	 xmm3, DWORD PTR _c$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp

; 70   : 		  float d = sqrtf(disc);

  0010d	d9 5d 10	 fstp	 DWORD PTR _d$3[ebp]

; 74   :       *intersect = rayOrigin + V*(v-d);

  00110	f3 0f 5c 45 10	 subss	 xmm0, DWORD PTR _d$3[ebp]
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h

; 69   : 	{ Vector3d Scaled(x*s, y*s, z*s);

  00115	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00119	f3 0f 59 d0	 mulss	 xmm2, xmm0

; 61   : 	{ Vector3d Sum(x+A.x, y+A.y, z+A.z);

  0011d	f3 0f 58 0f	 addss	 xmm1, DWORD PTR [edi]

; 69   : 	{ Vector3d Scaled(x*s, y*s, z*s);

  00121	f3 0f 59 d8	 mulss	 xmm3, xmm0

; 61   : 	{ Vector3d Sum(x+A.x, y+A.y, z+A.z);

  00125	f3 0f 58 57 04	 addss	 xmm2, DWORD PTR [edi+4]
  0012a	f3 0f 58 5f 08	 addss	 xmm3, DWORD PTR [edi+8]

; 57   : 	{ x=A.x; y=A.y; z=A.z;

  0012f	f3 0f 11 0e	 movss	 DWORD PTR [esi], xmm1
  00133	f3 0f 11 56 04	 movss	 DWORD PTR [esi+4], xmm2
  00138	f3 0f 11 5e 08	 movss	 DWORD PTR [esi+8], xmm3
$LN4@RayInterse:
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp

; 78   : 		return true;

  0013d	5e		 pop	 esi
  0013e	b0 01		 mov	 al, 1
  00140	5f		 pop	 edi

; 81   : }

  00141	8b e5		 mov	 esp, ebp
  00143	5d		 pop	 ebp
  00144	c2 0c 00	 ret	 12			; 0000000cH
$LN3@RayInterse:

; 79   : 	}
; 80   : 	return false;

  00147	32 c0		 xor	 al, al
  00149	5f		 pop	 edi

; 81   : }

  0014a	8b e5		 mov	 esp, ebp
  0014c	5d		 pop	 ebp
  0014d	c2 0c 00	 ret	 12			; 0000000cH
?RayIntersection@Sphere@@QAE_NABVVector3d@@0PAV2@@Z ENDP ; Sphere::RayIntersection
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp
;	COMDAT ?RayIntersection@Sphere@@QAE_NABVVector3d@@0MPAV2@@Z
_TEXT	SEGMENT
_sect$ = -12						; size = 12
_rayOrigin$ = 8						; size = 4
_V$ = 12						; size = 4
_distance$ = 16						; size = 4
_intersect$ = 20					; size = 4
?RayIntersection@Sphere@@QAE_NABVVector3d@@0MPAV2@@Z PROC ; Sphere::RayIntersection, COMDAT
; _this$ = ecx

; 88   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 89   :   Vector3d sect;
; 90   :   bool hit = RayIntersectionInFront(rayOrigin,V,&sect);

  00006	8d 45 f4	 lea	 eax, DWORD PTR _sect$[ebp]
  00009	56		 push	 esi
  0000a	8b 75 08	 mov	 esi, DWORD PTR _rayOrigin$[ebp]
  0000d	50		 push	 eax
  0000e	ff 75 0c	 push	 DWORD PTR _V$[ebp]
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ?RayIntersectionInFront@Sphere@@QAE_NABVVector3d@@0PAV2@@Z ; Sphere::RayIntersectionInFront

; 91   : 
; 92   :   if ( hit )

  00017	84 c0		 test	 al, al
  00019	74 66		 je	 SHORT $LN2@RayInterse
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h

; 170  : 		float dx = a.x - x;

  0001b	f3 0f 10 5d f4	 movss	 xmm3, DWORD PTR _sect$[ebp]

; 171  : 		float dy = a.y - y;

  00020	f3 0f 10 65 f8	 movss	 xmm4, DWORD PTR _sect$[ebp+4]
  00025	0f 28 cb	 movaps	 xmm1, xmm3
  00028	f3 0f 5c 0e	 subss	 xmm1, DWORD PTR [esi]

; 172  : 		float dz = a.z - z;

  0002c	f3 0f 10 6d fc	 movss	 xmm5, DWORD PTR _sect$[ebp+8]
  00031	0f 28 d4	 movaps	 xmm2, xmm4
  00034	f3 0f 5c 56 04	 subss	 xmm2, DWORD PTR [esi+4]
  00039	0f 28 c5	 movaps	 xmm0, xmm5
  0003c	f3 0f 5c 46 08	 subss	 xmm0, DWORD PTR [esi+8]

; 173  : 		return dx*dx + dy*dy + dz*dz;

  00041	f3 0f 59 c9	 mulss	 xmm1, xmm1
  00045	f3 0f 59 d2	 mulss	 xmm2, xmm2
  00049	f3 0f 59 c0	 mulss	 xmm0, xmm0
  0004d	f3 0f 58 d1	 addss	 xmm2, xmm1
  00051	f3 0f 58 d0	 addss	 xmm2, xmm0
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp

; 95   :     if ( d > (distance*distance) ) return false;

  00055	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _distance$[ebp]
  0005a	f3 0f 59 c0	 mulss	 xmm0, xmm0
  0005e	0f 2f d0	 comiss	 xmm2, xmm0
  00061	77 1e		 ja	 SHORT $LN2@RayInterse

; 96   :     if ( intersect ) *intersect = sect;

  00063	8b 45 14	 mov	 eax, DWORD PTR _intersect$[ebp]
  00066	85 c0		 test	 eax, eax
  00068	74 0e		 je	 SHORT $LN4@RayInterse
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h

; 57   : 	{ x=A.x; y=A.y; z=A.z;

  0006a	f3 0f 11 18	 movss	 DWORD PTR [eax], xmm3
  0006e	f3 0f 11 60 04	 movss	 DWORD PTR [eax+4], xmm4
  00073	f3 0f 11 68 08	 movss	 DWORD PTR [eax+8], xmm5
$LN4@RayInterse:
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp

; 97   :     return true;

  00078	b0 01		 mov	 al, 1
  0007a	5e		 pop	 esi

; 100  : }

  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c2 10 00	 ret	 16			; 00000010H
$LN2@RayInterse:

; 98   :   }
; 99   :   return false;

  00081	32 c0		 xor	 al, al
  00083	5e		 pop	 esi

; 100  : }

  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 10 00	 ret	 16			; 00000010H
?RayIntersection@Sphere@@QAE_NABVVector3d@@0MPAV2@@Z ENDP ; Sphere::RayIntersection
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp
;	COMDAT ?Compute@Sphere@@QAEXABVSphereInterface@@@Z
_TEXT	SEGMENT
_dy$4$ = -96						; size = 4
_count$1$ = -92						; size = 4
_zmax$$sroa$992$1$ = -88				; size = 4
_zmax$$sroa$990$1$ = -84				; size = 4
_zmin$$sroa$986$1$ = -80				; size = 4
_zmin$$sroa$984$1$ = -76				; size = 4
_dia1$$sroa$998$1$ = -72				; size = 4
_ymax$$sroa$982$1$ = -68				; size = 4
_ymax$$sroa$980$1$ = -64				; size = 4
_ymin$$sroa$942$1$ = -60				; size = 4
_ymin$$sroa$978$1$ = -56				; size = 4
_zmin$$sroa$988$1$ = -52				; size = 4
_dz$4$ = -48						; size = 4
_yspan$1$ = -48						; size = 4
_zmax$$sroa$994$1$ = -44				; size = 4
_dia1$$sroa$996$1$ = -40				; size = 4
_ymax$$sroa$948$1$ = -36				; size = 4
_dx$4$ = -32						; size = 4
_old_to_p$1 = -28					; size = 4
_this$GSCopy$1$ = -28					; size = 4
_maxspan$1$ = -28					; size = 4
_dia1$$sroa$1000$1$ = -24				; size = 4
_ymin$$sroa$936$1$ = -20				; size = 4
_zspan$1$ = -20						; size = 4
_caller_p$2 = -16					; size = 12
_caller_p$3 = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_source$ = 8						; size = 4
?Compute@Sphere@@QAEXABVSphereInterface@@@Z PROC	; Sphere::Compute, COMDAT
; _this$ = ecx

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h

; 107  : 		x = a;

  00010	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@ccbebc20
  00018	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@4cbebc20

; 108  : 		y = b;

  00020	0f 28 e0	 movaps	 xmm4, xmm0
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp

; 146  : {

  00023	53		 push	 ebx
  00024	8b 5d 08	 mov	 ebx, DWORD PTR _source$[ebp]
  00027	56		 push	 esi
  00028	8b f1		 mov	 esi, ecx
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h

; 107  : 		x = a;

  0002a	f3 0f 11 4d d8	 movss	 DWORD PTR _dia1$$sroa$996$1$[ebp], xmm1
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp

; 146  : {

  0002f	57		 push	 edi

; 158  :   int count = source.GetVertexCount();

  00030	8b 03		 mov	 eax, DWORD PTR [ebx]
  00032	8b cb		 mov	 ecx, ebx
  00034	89 75 e4	 mov	 DWORD PTR _this$GSCopy$1$[ebp], esi
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h

; 108  : 		y = b;

  00037	f3 0f 11 4d b8	 movss	 DWORD PTR _dia1$$sroa$998$1$[ebp], xmm1

; 109  : 		z = c;

  0003c	f3 0f 11 4d e8	 movss	 DWORD PTR _dia1$$sroa$1000$1$[ebp], xmm1

; 107  : 		x = a;

  00041	f3 0f 11 45 e0	 movss	 DWORD PTR _dx$4$[ebp], xmm0

; 108  : 		y = b;

  00046	f3 0f 11 65 a0	 movss	 DWORD PTR _dy$4$[ebp], xmm4

; 109  : 		z = c;

  0004b	f3 0f 11 65 d0	 movss	 DWORD PTR _dz$4$[ebp], xmm4

; 107  : 		x = a;

  00050	f3 0f 11 4d c8	 movss	 DWORD PTR _ymin$$sroa$978$1$[ebp], xmm1

; 108  : 		y = b;

  00055	f3 0f 11 4d ec	 movss	 DWORD PTR _ymin$$sroa$936$1$[ebp], xmm1

; 109  : 		z = c;

  0005a	f3 0f 11 4d c4	 movss	 DWORD PTR _ymin$$sroa$942$1$[ebp], xmm1

; 107  : 		x = a;

  0005f	f3 0f 11 45 c0	 movss	 DWORD PTR _ymax$$sroa$980$1$[ebp], xmm0

; 108  : 		y = b;

  00064	f3 0f 11 45 dc	 movss	 DWORD PTR _ymax$$sroa$948$1$[ebp], xmm0

; 109  : 		z = c;

  00069	f3 0f 11 45 bc	 movss	 DWORD PTR _ymax$$sroa$982$1$[ebp], xmm0

; 107  : 		x = a;

  0006e	f3 0f 11 4d b4	 movss	 DWORD PTR _zmin$$sroa$984$1$[ebp], xmm1

; 108  : 		y = b;

  00073	f3 0f 11 4d b0	 movss	 DWORD PTR _zmin$$sroa$986$1$[ebp], xmm1

; 109  : 		z = c;

  00078	f3 0f 11 4d cc	 movss	 DWORD PTR _zmin$$sroa$988$1$[ebp], xmm1

; 107  : 		x = a;

  0007d	f3 0f 11 45 ac	 movss	 DWORD PTR _zmax$$sroa$990$1$[ebp], xmm0

; 108  : 		y = b;

  00082	f3 0f 11 45 a8	 movss	 DWORD PTR _zmax$$sroa$992$1$[ebp], xmm0

; 109  : 		z = c;

  00087	f3 0f 11 45 d4	 movss	 DWORD PTR _zmax$$sroa$994$1$[ebp], xmm0
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp

; 158  :   int count = source.GetVertexCount();

  0008c	ff 50 04	 call	 DWORD PTR [eax+4]
  0008f	33 ff		 xor	 edi, edi
  00091	89 45 a4	 mov	 DWORD PTR _count$1$[ebp], eax

; 160  :   for (int i=0; i<count; i++)

  00094	85 c0		 test	 eax, eax
  00096	0f 8e c7 00 00
	00		 jle	 $LN114@Compute
  0009c	8b f0		 mov	 esi, eax
  0009e	66 90		 npad	 2
$LL4@Compute:

; 161  : 	{
; 162  :     Vector3d caller_p;
; 163  :     source.GetVertex(i,caller_p);

  000a0	8b 13		 mov	 edx, DWORD PTR [ebx]
  000a2	8d 45 f0	 lea	 eax, DWORD PTR _caller_p$2[ebp]
  000a5	50		 push	 eax
  000a6	57		 push	 edi
  000a7	8b cb		 mov	 ecx, ebx
  000a9	ff 52 08	 call	 DWORD PTR [edx+8]

; 165  :   	if (caller_p.GetX()<xmin.GetX()) 	xmin = caller_p; /* New xminimum point */

  000ac	f3 0f 10 55 f0	 movss	 xmm2, DWORD PTR _caller_p$2[ebp]
  000b1	f3 0f 10 5d d8	 movss	 xmm3, DWORD PTR _dia1$$sroa$996$1$[ebp]
  000b6	0f 2f da	 comiss	 xmm3, xmm2
  000b9	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _caller_p$2[ebp+8]
  000be	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR _caller_p$2[ebp+4]
  000c3	76 14		 jbe	 SHORT $LN115@Compute
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h

; 57   : 	{ x=A.x; y=A.y; z=A.z;

  000c5	0f 28 da	 movaps	 xmm3, xmm2
  000c8	f3 0f 11 4d b8	 movss	 DWORD PTR _dia1$$sroa$998$1$[ebp], xmm1
  000cd	f3 0f 11 5d d8	 movss	 DWORD PTR _dia1$$sroa$996$1$[ebp], xmm3
  000d2	f3 0f 11 45 e8	 movss	 DWORD PTR _dia1$$sroa$1000$1$[ebp], xmm0
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp

; 165  :   	if (caller_p.GetX()<xmin.GetX()) 	xmin = caller_p; /* New xminimum point */

  000d7	eb 05		 jmp	 SHORT $LN8@Compute
$LN115@Compute:
  000d9	f3 0f 10 5d d8	 movss	 xmm3, DWORD PTR _dia1$$sroa$996$1$[ebp]
$LN8@Compute:

; 166  :   	if (caller_p.GetX()>xmax.GetX())	xmax = caller_p;

  000de	0f 2f 55 e0	 comiss	 xmm2, DWORD PTR _dx$4$[ebp]
  000e2	76 15		 jbe	 SHORT $LN9@Compute
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h

; 57   : 	{ x=A.x; y=A.y; z=A.z;

  000e4	0f 28 e1	 movaps	 xmm4, xmm1
  000e7	f3 0f 11 55 e0	 movss	 DWORD PTR _dx$4$[ebp], xmm2
  000ec	f3 0f 11 65 a0	 movss	 DWORD PTR _dy$4$[ebp], xmm4
  000f1	0f 28 e0	 movaps	 xmm4, xmm0
  000f4	f3 0f 11 65 d0	 movss	 DWORD PTR _dz$4$[ebp], xmm4
$LN9@Compute:
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp

; 167  :   	if (caller_p.GetY()<ymin.GetY())	ymin = caller_p;

  000f9	f3 0f 10 65 ec	 movss	 xmm4, DWORD PTR _ymin$$sroa$936$1$[ebp]
  000fe	0f 2f e1	 comiss	 xmm4, xmm1
  00101	76 0f		 jbe	 SHORT $LN10@Compute
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h

; 57   : 	{ x=A.x; y=A.y; z=A.z;

  00103	f3 0f 11 55 c8	 movss	 DWORD PTR _ymin$$sroa$978$1$[ebp], xmm2
  00108	f3 0f 11 4d ec	 movss	 DWORD PTR _ymin$$sroa$936$1$[ebp], xmm1
  0010d	f3 0f 11 45 c4	 movss	 DWORD PTR _ymin$$sroa$942$1$[ebp], xmm0
$LN10@Compute:
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp

; 168  :   	if (caller_p.GetY()>ymax.GetY())	ymax = caller_p;

  00112	0f 2f 4d dc	 comiss	 xmm1, DWORD PTR _ymax$$sroa$948$1$[ebp]
  00116	76 0f		 jbe	 SHORT $LN11@Compute
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h

; 57   : 	{ x=A.x; y=A.y; z=A.z;

  00118	f3 0f 11 55 c0	 movss	 DWORD PTR _ymax$$sroa$980$1$[ebp], xmm2
  0011d	f3 0f 11 4d dc	 movss	 DWORD PTR _ymax$$sroa$948$1$[ebp], xmm1
  00122	f3 0f 11 45 bc	 movss	 DWORD PTR _ymax$$sroa$982$1$[ebp], xmm0
$LN11@Compute:
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp

; 169  :   	if (caller_p.GetZ()<zmin.GetZ())	zmin = caller_p;

  00127	f3 0f 10 65 cc	 movss	 xmm4, DWORD PTR _zmin$$sroa$988$1$[ebp]
  0012c	0f 2f e0	 comiss	 xmm4, xmm0
  0012f	76 0f		 jbe	 SHORT $LN12@Compute
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h

; 57   : 	{ x=A.x; y=A.y; z=A.z;

  00131	f3 0f 11 55 b4	 movss	 DWORD PTR _zmin$$sroa$984$1$[ebp], xmm2
  00136	f3 0f 11 4d b0	 movss	 DWORD PTR _zmin$$sroa$986$1$[ebp], xmm1
  0013b	f3 0f 11 45 cc	 movss	 DWORD PTR _zmin$$sroa$988$1$[ebp], xmm0
$LN12@Compute:
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp

; 170  :   	if (caller_p.GetZ()>zmax.GetZ()) zmax = caller_p;

  00140	0f 2f 45 d4	 comiss	 xmm0, DWORD PTR _zmax$$sroa$994$1$[ebp]
  00144	76 0f		 jbe	 SHORT $LN2@Compute
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h

; 57   : 	{ x=A.x; y=A.y; z=A.z;

  00146	f3 0f 11 55 ac	 movss	 DWORD PTR _zmax$$sroa$990$1$[ebp], xmm2
  0014b	f3 0f 11 4d a8	 movss	 DWORD PTR _zmax$$sroa$992$1$[ebp], xmm1
  00150	f3 0f 11 45 d4	 movss	 DWORD PTR _zmax$$sroa$994$1$[ebp], xmm0
$LN2@Compute:
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp

; 160  :   for (int i=0; i<count; i++)

  00155	47		 inc	 edi
  00156	3b fe		 cmp	 edi, esi
  00158	0f 8c 42 ff ff
	ff		 jl	 $LL4@Compute
  0015e	8b 75 e4	 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
  00161	eb 08		 jmp	 SHORT $LN3@Compute
$LN114@Compute:
  00163	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@4cbebc20
$LN3@Compute:

; 171  : 	}
; 172  : 
; 173  :   /* Set xspan = distance between the 2 points xmin & xmax (squared) */
; 174  :   float dx = xmax.GetX() - xmin.GetX();

  0016b	f3 0f 10 4d e0	 movss	 xmm1, DWORD PTR _dx$4$[ebp]

; 175  :   float dy = xmax.GetY() - xmin.GetY();
; 176  :   float dz = xmax.GetZ() - xmin.GetZ();

  00170	f3 0f 10 65 d0	 movss	 xmm4, DWORD PTR _dz$4$[ebp]
  00175	f3 0f 5c cb	 subss	 xmm1, xmm3
  00179	f3 0f 10 5d a0	 movss	 xmm3, DWORD PTR _dy$4$[ebp]
  0017e	0f 28 c4	 movaps	 xmm0, xmm4
  00181	f3 0f 5c 45 e8	 subss	 xmm0, DWORD PTR _dia1$$sroa$1000$1$[ebp]

; 177  :   float xspan = dx*dx + dy*dy + dz*dz;
; 178  : 
; 179  :   /* Same for y & z spans */
; 180  :   dx = ymax.GetX() - ymin.GetX();
; 181  :   dy = ymax.GetY() - ymin.GetY();

  00186	f3 0f 10 7d ec	 movss	 xmm7, DWORD PTR _ymin$$sroa$936$1$[ebp]
  0018b	0f 28 eb	 movaps	 xmm5, xmm3
  0018e	f3 0f 5c 6d b8	 subss	 xmm5, DWORD PTR _dia1$$sroa$998$1$[ebp]
  00193	f3 0f 10 55 dc	 movss	 xmm2, DWORD PTR _ymax$$sroa$948$1$[ebp]
  00198	f3 0f 59 c9	 mulss	 xmm1, xmm1
  0019c	f3 0f 5c d7	 subss	 xmm2, xmm7
  001a0	f3 0f 59 c0	 mulss	 xmm0, xmm0
  001a4	f3 0f 59 ed	 mulss	 xmm5, xmm5

; 182  :   dz = ymax.GetZ() - ymin.GetZ();
; 183  :   float yspan = dx*dx + dy*dy + dz*dz;

  001a8	f3 0f 59 d2	 mulss	 xmm2, xmm2
  001ac	f3 0f 58 e9	 addss	 xmm5, xmm1
  001b0	f3 0f 10 4d c0	 movss	 xmm1, DWORD PTR _ymax$$sroa$980$1$[ebp]
  001b5	f3 0f 5c 4d c8	 subss	 xmm1, DWORD PTR _ymin$$sroa$978$1$[ebp]
  001ba	f3 0f 58 e8	 addss	 xmm5, xmm0
  001be	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _ymax$$sroa$982$1$[ebp]
  001c3	f3 0f 5c 45 c4	 subss	 xmm0, DWORD PTR _ymin$$sroa$942$1$[ebp]
  001c8	f3 0f 59 c9	 mulss	 xmm1, xmm1
  001cc	f3 0f 11 6d e4	 movss	 DWORD PTR _maxspan$1$[ebp], xmm5

; 184  : 
; 185  :   dx = zmax.GetX() - zmin.GetX();
; 186  :   dy = zmax.GetY() - zmin.GetY();
; 187  :   dz = zmax.GetZ() - zmin.GetZ();

  001d1	f3 0f 10 6d cc	 movss	 xmm5, DWORD PTR _zmin$$sroa$988$1$[ebp]
  001d6	f3 0f 58 d1	 addss	 xmm2, xmm1
  001da	f3 0f 10 4d ac	 movss	 xmm1, DWORD PTR _zmax$$sroa$990$1$[ebp]
  001df	f3 0f 5c 4d b4	 subss	 xmm1, DWORD PTR _zmin$$sroa$984$1$[ebp]
  001e4	f3 0f 59 c0	 mulss	 xmm0, xmm0
  001e8	f3 0f 58 d0	 addss	 xmm2, xmm0

; 188  :   float zspan = dx*dx + dy*dy + dz*dz;

  001ec	f3 0f 59 c9	 mulss	 xmm1, xmm1
  001f0	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _zmax$$sroa$992$1$[ebp]
  001f5	f3 0f 5c 45 b0	 subss	 xmm0, DWORD PTR _zmin$$sroa$986$1$[ebp]
  001fa	f3 0f 11 55 d0	 movss	 DWORD PTR _yspan$1$[ebp], xmm2
  001ff	f3 0f 11 45 ec	 movss	 DWORD PTR _zspan$1$[ebp], xmm0
  00204	f3 0f 10 55 ec	 movss	 xmm2, DWORD PTR _zspan$1$[ebp]
  00209	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _zmax$$sroa$994$1$[ebp]
  0020e	f3 0f 59 d2	 mulss	 xmm2, xmm2
  00212	f3 0f 5c c5	 subss	 xmm0, xmm5
  00216	f3 0f 58 d1	 addss	 xmm2, xmm1
  0021a	f3 0f 59 c0	 mulss	 xmm0, xmm0
  0021e	0f 28 ca	 movaps	 xmm1, xmm2
  00221	f3 0f 11 55 ec	 movss	 DWORD PTR _zspan$1$[ebp], xmm2

; 195  :   if (yspan>maxspan)

  00226	f3 0f 10 55 e0	 movss	 xmm2, DWORD PTR _dx$4$[ebp]
  0022b	f3 0f 58 c8	 addss	 xmm1, xmm0
  0022f	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _maxspan$1$[ebp]
  00234	f3 0f 11 4d ec	 movss	 DWORD PTR _zspan$1$[ebp], xmm1
  00239	f3 0f 10 4d d0	 movss	 xmm1, DWORD PTR _yspan$1$[ebp]
  0023e	0f 2f c8	 comiss	 xmm1, xmm0
  00241	76 23		 jbe	 SHORT $LN116@Compute
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h

; 57   : 	{ x=A.x; y=A.y; z=A.z;

  00243	f3 0f 10 55 c4	 movss	 xmm2, DWORD PTR _ymin$$sroa$942$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp

; 197  : 	  maxspan = yspan;

  00248	0f 28 c1	 movaps	 xmm0, xmm1
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h

; 57   : 	{ x=A.x; y=A.y; z=A.z;

  0024b	f3 0f 10 4d c8	 movss	 xmm1, DWORD PTR _ymin$$sroa$978$1$[ebp]
  00250	f3 0f 10 5d dc	 movss	 xmm3, DWORD PTR _ymax$$sroa$948$1$[ebp]
  00255	f3 0f 10 65 bc	 movss	 xmm4, DWORD PTR _ymax$$sroa$982$1$[ebp]
  0025a	f3 0f 11 55 e8	 movss	 DWORD PTR _dia1$$sroa$1000$1$[ebp], xmm2
  0025f	f3 0f 10 55 c0	 movss	 xmm2, DWORD PTR _ymax$$sroa$980$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp

; 195  :   if (yspan>maxspan)

  00264	eb 0a		 jmp	 SHORT $LN14@Compute
$LN116@Compute:
  00266	f3 0f 10 4d d8	 movss	 xmm1, DWORD PTR _dia1$$sroa$996$1$[ebp]
  0026b	f3 0f 10 7d b8	 movss	 xmm7, DWORD PTR _dia1$$sroa$998$1$[ebp]
$LN14@Compute:

; 198  :   	dia1 = ymin;
; 199  :   	dia2 = ymax;
; 200  : 	}
; 201  : 
; 202  :   if (zspan>maxspan)

  00270	f3 0f 10 75 ec	 movss	 xmm6, DWORD PTR _zspan$1$[ebp]
  00275	0f 2f f0	 comiss	 xmm6, xmm0
  00278	f3 0f 10 75 d4	 movss	 xmm6, DWORD PTR _zmax$$sroa$994$1$[ebp]
  0027d	76 1c		 jbe	 SHORT $LN15@Compute
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h

; 57   : 	{ x=A.x; y=A.y; z=A.z;

  0027f	f3 0f 10 4d b4	 movss	 xmm1, DWORD PTR _zmin$$sroa$984$1$[ebp]
  00284	0f 28 e6	 movaps	 xmm4, xmm6
  00287	f3 0f 10 7d b0	 movss	 xmm7, DWORD PTR _zmin$$sroa$986$1$[ebp]
  0028c	f3 0f 10 55 ac	 movss	 xmm2, DWORD PTR _zmax$$sroa$990$1$[ebp]
  00291	f3 0f 10 5d a8	 movss	 xmm3, DWORD PTR _zmax$$sroa$992$1$[ebp]
  00296	f3 0f 11 6d e8	 movss	 DWORD PTR _dia1$$sroa$1000$1$[ebp], xmm5
$LN15@Compute:
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp

; 211  :   mCenter.SetX( (dia1.GetX()+dia2.GetX())*0.5f );

  0029b	f3 0f 10 2d 00
	00 00 00	 movss	 xmm5, DWORD PTR __real@3f000000
  002a3	0f 28 c2	 movaps	 xmm0, xmm2
  002a6	f3 0f 58 c1	 addss	 xmm0, xmm1

; 219  :   mRadius = float(sqrt(mRadius2));

  002aa	83 ec 08	 sub	 esp, 8
  002ad	f3 0f 59 c5	 mulss	 xmm0, xmm5
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h

; 101  : 	void SetX(float t)   { x   = t; };

  002b1	f3 0f 11 46 04	 movss	 DWORD PTR [esi+4], xmm0
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp

; 212  :   mCenter.SetY( (dia1.GetY()+dia2.GetY())*0.5f );

  002b6	0f 28 c3	 movaps	 xmm0, xmm3
  002b9	f3 0f 58 c7	 addss	 xmm0, xmm7
  002bd	f3 0f 59 c5	 mulss	 xmm0, xmm5
  002c1	f3 0f 11 46 08	 movss	 DWORD PTR [esi+8], xmm0

; 213  :   mCenter.SetZ( (dia1.GetZ()+dia2.GetZ())*0.5f );

  002c6	0f 28 c4	 movaps	 xmm0, xmm4
  002c9	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _dia1$$sroa$1000$1$[ebp]
  002ce	f3 0f 59 c5	 mulss	 xmm0, xmm5
  002d2	f3 0f 11 46 0c	 movss	 DWORD PTR [esi+12], xmm0
  002d7	0f 28 c2	 movaps	 xmm0, xmm2
  002da	f3 0f 58 c1	 addss	 xmm0, xmm1
  002de	f3 0f 59 c5	 mulss	 xmm0, xmm5

; 214  :   /* calculate initial radius**2 and radius */
; 215  :   dx = dia2.GetX()-mCenter.GetX(); /* x component of radius vector */

  002e2	f3 0f 5c d0	 subss	 xmm2, xmm0
  002e6	0f 28 c3	 movaps	 xmm0, xmm3
  002e9	f3 0f 58 c7	 addss	 xmm0, xmm7
  002ed	f3 0f 59 c5	 mulss	 xmm0, xmm5

; 216  :   dy = dia2.GetY()-mCenter.GetY(); /* y component of radius vector */

  002f1	f3 0f 5c d8	 subss	 xmm3, xmm0
  002f5	0f 28 c4	 movaps	 xmm0, xmm4
  002f8	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _dia1$$sroa$1000$1$[ebp]

; 217  :   dz = dia2.GetZ()-mCenter.GetZ(); /* z component of radius vector */
; 218  :   mRadius2 = dx*dx + dy*dy + dz*dz;

  002fd	0f 28 cb	 movaps	 xmm1, xmm3
  00300	f3 0f 59 c5	 mulss	 xmm0, xmm5
  00304	f3 0f 59 cb	 mulss	 xmm1, xmm3
  00308	f3 0f 5c e0	 subss	 xmm4, xmm0
  0030c	f3 0f 59 db	 mulss	 xmm3, xmm3
  00310	0f 28 c2	 movaps	 xmm0, xmm2
  00313	f3 0f 59 c2	 mulss	 xmm0, xmm2
  00317	f3 0f 59 d2	 mulss	 xmm2, xmm2
  0031b	f3 0f 58 c8	 addss	 xmm1, xmm0
  0031f	0f 28 c4	 movaps	 xmm0, xmm4
  00322	f3 0f 59 c4	 mulss	 xmm0, xmm4
  00326	f3 0f 58 da	 addss	 xmm3, xmm2
  0032a	f3 0f 59 e4	 mulss	 xmm4, xmm4
  0032e	f3 0f 58 c8	 addss	 xmm1, xmm0
  00332	f3 0f 58 dc	 addss	 xmm3, xmm4
  00336	f3 0f 11 4e 14	 movss	 DWORD PTR [esi+20], xmm1

; 219  :   mRadius = float(sqrt(mRadius2));

  0033b	0f 5a c3	 cvtps2pd xmm0, xmm3
  0033e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00343	e8 00 00 00 00	 call	 _sqrt
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h

; 97   : 	float GetX(void) const { return x; };

  00348	33 ff		 xor	 edi, edi
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp

; 219  :   mRadius = float(sqrt(mRadius2));

  0034a	83 c4 08	 add	 esp, 8
  0034d	d9 5e 10	 fstp	 DWORD PTR [esi+16]

; 223  :   for (int j=0; j<count; j++)

  00350	39 7d a4	 cmp	 DWORD PTR _count$1$[ebp], edi
  00353	0f 8e 00 01 00
	00		 jle	 $LN6@Compute
  00359	0f 1f 80 00 00
	00 00		 npad	 7
$LL7@Compute:

; 224  : 	{
; 225  :     Vector3d caller_p;
; 226  :     source.GetVertex(j,caller_p);

  00360	8b 03		 mov	 eax, DWORD PTR [ebx]
  00362	8d 4d f0	 lea	 ecx, DWORD PTR _caller_p$3[ebp]
  00365	51		 push	 ecx
  00366	57		 push	 edi
  00367	8b cb		 mov	 ecx, ebx
  00369	ff 50 08	 call	 DWORD PTR [eax+8]

; 227  :   	dx = caller_p.GetX()-mCenter.GetX();

  0036c	f3 0f 10 4d f0	 movss	 xmm1, DWORD PTR _caller_p$3[ebp]

; 228  : 	  dy = caller_p.GetY()-mCenter.GetY();

  00371	f3 0f 10 55 f4	 movss	 xmm2, DWORD PTR _caller_p$3[ebp+4]
  00376	f3 0f 5c 56 08	 subss	 xmm2, DWORD PTR [esi+8]
  0037b	f3 0f 5c 4e 04	 subss	 xmm1, DWORD PTR [esi+4]

; 229  :   	dz = caller_p.GetZ()-mCenter.GetZ();

  00380	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _caller_p$3[ebp+8]
  00385	f3 0f 5c 46 0c	 subss	 xmm0, DWORD PTR [esi+12]

; 230  : 	  float old_to_p_sq = dx*dx + dy*dy + dz*dz;

  0038a	f3 0f 59 d2	 mulss	 xmm2, xmm2
  0038e	f3 0f 59 c9	 mulss	 xmm1, xmm1
  00392	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00396	f3 0f 58 d1	 addss	 xmm2, xmm1
  0039a	f3 0f 58 d0	 addss	 xmm2, xmm0

; 231  :   	if (old_to_p_sq > mRadius2) 	/* do r**2 test first */

  0039e	0f 2f 56 14	 comiss	 xmm2, DWORD PTR [esi+20]
  003a2	0f 86 a7 00 00
	00		 jbe	 $LN5@Compute

; 233  : 	  	float old_to_p = float(sqrt(old_to_p_sq));

  003a8	0f 5a c2	 cvtps2pd xmm0, xmm2
  003ab	83 ec 08	 sub	 esp, 8
  003ae	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  003b3	e8 00 00 00 00	 call	 _sqrt

; 238  : 	  	/* calc center of new sphere */
; 239  :       float recip = 1.0f /old_to_p;

  003b8	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  003c0	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h

; 97   : 	float GetX(void) const { return x; };

  003c3	f3 0f 10 66 04	 movss	 xmm4, DWORD PTR [esi+4]
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp

; 233  : 	  	float old_to_p = float(sqrt(old_to_p_sq));

  003c8	d9 5d e4	 fstp	 DWORD PTR _old_to_p$1[ebp]

; 234  : 		  /* calc radius of new sphere */
; 235  :   		mRadius = (mRadius + old_to_p) * 0.5f;

  003cb	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _old_to_p$1[ebp]
  003d0	0f 28 e9	 movaps	 xmm5, xmm1

; 236  : 	  	mRadius2 = mRadius*mRadius; 	/* for next r**2 compare */
; 237  :   		float old_to_new = old_to_p - mRadius;

  003d3	0f 28 d9	 movaps	 xmm3, xmm1
  003d6	f3 0f 58 6e 10	 addss	 xmm5, DWORD PTR [esi+16]

; 238  : 	  	/* calc center of new sphere */
; 239  :       float recip = 1.0f /old_to_p;

  003db	f3 0f 5e d1	 divss	 xmm2, xmm1
  003df	f3 0f 59 2d 00
	00 00 00	 mulss	 xmm5, DWORD PTR __real@3f000000
  003e7	0f 28 c5	 movaps	 xmm0, xmm5

; 240  : 
; 241  :   		float cx = (mRadius*mCenter.GetX() + old_to_new*caller_p.GetX()) * recip;

  003ea	f3 0f 59 e5	 mulss	 xmm4, xmm5
  003ee	f3 0f 59 c5	 mulss	 xmm0, xmm5
  003f2	f3 0f 5c dd	 subss	 xmm3, xmm5

; 242  : 	  	float cy = (mRadius*mCenter.GetY() + old_to_new*caller_p.GetY()) * recip;

  003f6	0f 28 cd	 movaps	 xmm1, xmm5
  003f9	f3 0f 11 6e 10	 movss	 DWORD PTR [esi+16], xmm5
  003fe	f3 0f 59 4e 08	 mulss	 xmm1, DWORD PTR [esi+8]

; 243  : 		  float cz = (mRadius*mCenter.GetZ() + old_to_new*caller_p.GetZ()) * recip;

  00403	f3 0f 59 6e 0c	 mulss	 xmm5, DWORD PTR [esi+12]
  00408	f3 0f 11 46 14	 movss	 DWORD PTR [esi+20], xmm0
  0040d	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _caller_p$3[ebp]
  00412	f3 0f 59 c3	 mulss	 xmm0, xmm3
  00416	f3 0f 58 e0	 addss	 xmm4, xmm0
  0041a	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _caller_p$3[ebp+4]
  0041f	f3 0f 59 c3	 mulss	 xmm0, xmm3
  00423	f3 0f 58 c8	 addss	 xmm1, xmm0
  00427	f3 0f 59 e2	 mulss	 xmm4, xmm2
  0042b	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _caller_p$3[ebp+8]
  00430	f3 0f 59 c3	 mulss	 xmm0, xmm3
  00434	f3 0f 59 ca	 mulss	 xmm1, xmm2
  00438	f3 0f 58 e8	 addss	 xmm5, xmm0
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h

; 107  : 		x = a;

  0043c	f3 0f 11 66 04	 movss	 DWORD PTR [esi+4], xmm4

; 108  : 		y = b;

  00441	f3 0f 11 4e 08	 movss	 DWORD PTR [esi+8], xmm1
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp

; 243  : 		  float cz = (mRadius*mCenter.GetZ() + old_to_new*caller_p.GetZ()) * recip;

  00446	f3 0f 59 ea	 mulss	 xmm5, xmm2
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h

; 109  : 		z = c;

  0044a	f3 0f 11 6e 0c	 movss	 DWORD PTR [esi+12], xmm5
$LN5@Compute:
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp

; 223  :   for (int j=0; j<count; j++)

  0044f	47		 inc	 edi
  00450	3b 7d a4	 cmp	 edi, DWORD PTR _count$1$[ebp]
  00453	0f 8c 07 ff ff
	ff		 jl	 $LL7@Compute
$LN6@Compute:

; 244  : 
; 245  :       mCenter.Set(cx,cy,cz);
; 246  : 		}
; 247  : 	}
; 248  : }

  00459	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0045c	5f		 pop	 edi
  0045d	5e		 pop	 esi
  0045e	33 cd		 xor	 ecx, ebp
  00460	5b		 pop	 ebx
  00461	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00466	8b e5		 mov	 esp, ebp
  00468	5d		 pop	 ebp
  00469	c2 04 00	 ret	 4
?Compute@Sphere@@QAEXABVSphereInterface@@@Z ENDP	; Sphere::Compute
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp
;	COMDAT ?Set@Sphere@@QAEXABVVector3d@@M@Z
_TEXT	SEGMENT
_center$ = 8						; size = 4
_radius$ = 12						; size = 4
?Set@Sphere@@QAEXABVVector3d@@M@Z PROC			; Sphere::Set, COMDAT
; _this$ = ecx

; 31   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h

; 57   : 	{ x=A.x; y=A.y; z=A.z;

  00003	8b 55 08	 mov	 edx, DWORD PTR _center$[ebp]
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp

; 36   : 	mRadius = radius;

  00006	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _radius$[ebp]
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h

; 57   : 	{ x=A.x; y=A.y; z=A.z;

  0000b	8b 02		 mov	 eax, DWORD PTR [edx]
  0000d	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00010	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00013	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00016	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp

; 36   : 	mRadius = radius;

  00019	f3 0f 11 41 10	 movss	 DWORD PTR [ecx+16], xmm0

; 37   : 	mRadius2 = radius*radius;

  0001e	f3 0f 59 c0	 mulss	 xmm0, xmm0
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h

; 57   : 	{ x=A.x; y=A.y; z=A.z;

  00022	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp

; 37   : 	mRadius2 = radius*radius;

  00025	f3 0f 11 41 14	 movss	 DWORD PTR [ecx+20], xmm0

; 38   : }

  0002a	5d		 pop	 ebp
  0002b	c2 08 00	 ret	 8
?Set@Sphere@@QAEXABVVector3d@@M@Z ENDP			; Sphere::Set
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.cpp
;	COMDAT ?IsInStaticRange@Vector3d@@QBE_NXZ
_TEXT	SEGMENT
?IsInStaticRange@Vector3d@@QBE_NXZ PROC			; Vector3d::IsInStaticRange, COMDAT
; _this$ = ecx

; 21   : 	const float LIMIT = 3276700.0f;
; 22   : 	if (x<LIMIT && x>-LIMIT)

  00000	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@4a47fe70
  00008	0f 2f 11	 comiss	 xmm2, DWORD PTR [ecx]
  0000b	76 33		 jbe	 SHORT $LN4@IsInStatic
  0000d	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00011	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@ca47fe70
  00019	0f 2f c1	 comiss	 xmm0, xmm1
  0001c	76 22		 jbe	 SHORT $LN4@IsInStatic

; 23   : 		if (y<LIMIT && y>-LIMIT)

  0001e	0f 2f 51 04	 comiss	 xmm2, DWORD PTR [ecx+4]
  00022	76 1c		 jbe	 SHORT $LN4@IsInStatic
  00024	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  00029	0f 2f c1	 comiss	 xmm0, xmm1
  0002c	76 12		 jbe	 SHORT $LN4@IsInStatic

; 24   : 			if (z<LIMIT && z>-LIMIT)

  0002e	0f 2f 51 08	 comiss	 xmm2, DWORD PTR [ecx+8]
  00032	76 0c		 jbe	 SHORT $LN4@IsInStatic
  00034	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00039	0f 2f c1	 comiss	 xmm0, xmm1
  0003c	0f 97 c0	 seta	 al

; 28   : }

  0003f	c3		 ret	 0
$LN4@IsInStatic:

; 25   : 				return true;
; 26   : 
; 27   : 	return false;

  00040	32 c0		 xor	 al, al

; 28   : }

  00042	c3		 ret	 0
?IsInStaticRange@Vector3d@@QBE_NXZ ENDP			; Vector3d::IsInStaticRange
_TEXT	ENDS
END
