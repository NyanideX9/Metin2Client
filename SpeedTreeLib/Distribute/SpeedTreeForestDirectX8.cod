; Listing generated by Microsoft (R) Optimizing Compiler Version 19.43.34808.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\Distribute\SpeedTreeForestDirectX8.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	__Avx2WmemEnabledWeakValue
;	COMDAT __Avx2WmemEnabledWeakValue
_BSS	SEGMENT
__Avx2WmemEnabledWeakValue DD 01H DUP (?)
_BSS	ENDS
CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
	ORG $+7
?g_achSimpleVertexProgram@@3QBDB DB 'vs.1.1', 0aH, 'mov', 09H, 09H, 'oT0.'
	DB	'xy,', 09H, 09H, 'v7', 0aH, 'mov', 09H, 09H, 'oT1.xy,', 09H, 09H
	DB	'v8', 0aH, 'mov', 09H, 09H, 'a0.x,', 09H, 'v9.x', 0aH, 'm4x4', 09H
	DB	09H, 'r1,', 09H, 09H, 09H, 'v0,', 09H, 09H, 09H, 'c[54+a0.x]', 0aH
	DB	'sub', 09H, 09H, 'r2,', 09H, 09H, 09H, 'r1,', 09H, 09H, 09H, 'v'
	DB	'0', 0aH, 'mov', 09H, 09H, 'r3.x,', 09H, 09H, 'v9.y', 0aH, 'ma'
	DB	'd', 09H, 09H, 'r1,', 09H, 09H, 09H, 'r2,', 09H, 09H, 09H, 'r3'
	DB	'.x,', 09H, 09H, 'v0', 0aH, 'add', 09H, 09H, 'r2,', 09H, 09H, 09H
	DB	'c[52],', 09H, 09H, 'r1', 0aH, 'm4x4', 09H, 09H, 'oPos,', 09H, 09H
	DB	'r2,', 09H, 09H, 09H, 'c[0]', 0aH, 'dp4', 09H, 09H, 'r1,', 09H
	DB	09H, 09H, 'r2,', 09H, 09H, 09H, 'c[2]', 0aH, 'sub', 09H, 09H, 'r'
	DB	'2.x,', 09H, 09H, 'c[85].y,', 09H, 'r1.z', 0aH, 'mul', 09H, 09H
	DB	'oFog,', 09H, 09H, 'r2.x,', 09H, 09H, 'c[85].z', 0aH, 'mov', 09H
	DB	09H, 'oD0,', 09H, 09H, 'v5', 0aH, 00H	; g_achSimpleVertexProgram
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0D3DXMATRIX@@QAE@XZ				; D3DXMATRIX::D3DXMATRIX
PUBLIC	??1?$CSingleton@VCSpeedTreeForestDirectX8@@@@UAE@XZ ; CSingleton<CSpeedTreeForestDirectX8>::~CSingleton<CSpeedTreeForestDirectX8>
PUBLIC	??_G?$CSingleton@VCSpeedTreeForestDirectX8@@@@UAEPAXI@Z ; CSingleton<CSpeedTreeForestDirectX8>::`scalar deleting destructor'
PUBLIC	??0CSpeedTreeForestDirectX8@@QAE@XZ		; CSpeedTreeForestDirectX8::CSpeedTreeForestDirectX8
PUBLIC	??1CSpeedTreeForestDirectX8@@UAE@XZ		; CSpeedTreeForestDirectX8::~CSpeedTreeForestDirectX8
PUBLIC	?UploadWindMatrix@CSpeedTreeForestDirectX8@@UBEXIPBM@Z ; CSpeedTreeForestDirectX8::UploadWindMatrix
PUBLIC	?UpdateCompundMatrix@CSpeedTreeForestDirectX8@@QAEXABUD3DXVECTOR3@@ABUD3DXMATRIX@@1@Z ; CSpeedTreeForestDirectX8::UpdateCompundMatrix
PUBLIC	?Render@CSpeedTreeForestDirectX8@@UAEXK@Z	; CSpeedTreeForestDirectX8::Render
PUBLIC	?SetRenderingDevice@CSpeedTreeForestDirectX8@@QAE_NPAUIDirect3DDevice8@@@Z ; CSpeedTreeForestDirectX8::SetRenderingDevice
PUBLIC	?InitVertexShaders@CSpeedTreeForestDirectX8@@AAE_NXZ ; CSpeedTreeForestDirectX8::InitVertexShaders
PUBLIC	??_GCSpeedTreeForestDirectX8@@UAEPAXI@Z		; CSpeedTreeForestDirectX8::`scalar deleting destructor'
PUBLIC	??_ECSpeedTreeForestDirectX8@@WGM@AEPAXI@Z	; [thunk]:CSpeedTreeForestDirectX8::`vector deleting destructor'
PUBLIC	??_ECSpeedTreeForestDirectX8@@WHA@AEPAXI@Z	; [thunk]:CSpeedTreeForestDirectX8::`vector deleting destructor'
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	?ms_singleton@?$CSingleton@VCSpeedTreeForestDirectX8@@@@0PAVCSpeedTreeForestDirectX8@@A ; CSingleton<CSpeedTreeForestDirectX8>::ms_singleton
PUBLIC	??_7?$CSingleton@VCSpeedTreeForestDirectX8@@@@6B@ ; CSingleton<CSpeedTreeForestDirectX8>::`vftable'
PUBLIC	??_7CSpeedTreeForestDirectX8@@6BCSpeedTreeForest@@@ ; CSpeedTreeForestDirectX8::`vftable'
PUBLIC	??_7CSpeedTreeForestDirectX8@@6BCGraphicBase@@@	; CSpeedTreeForestDirectX8::`vftable'
PUBLIC	??_7CSpeedTreeForestDirectX8@@6B?$CSingleton@VCSpeedTreeForestDirectX8@@@@@ ; CSpeedTreeForestDirectX8::`vftable'
PUBLIC	?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
PUBLIC	?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
PUBLIC	?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
PUBLIC	??_R4CSpeedTreeForestDirectX8@@6BCSpeedTreeForest@@@ ; CSpeedTreeForestDirectX8::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCSpeedTreeForestDirectX8@@@8		; CSpeedTreeForestDirectX8 `RTTI Type Descriptor'
PUBLIC	??_R3CSpeedTreeForestDirectX8@@8		; CSpeedTreeForestDirectX8::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSpeedTreeForestDirectX8@@8		; CSpeedTreeForestDirectX8::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CSpeedTreeForestDirectX8@@8	; CSpeedTreeForestDirectX8::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CSpeedTreeForest@@8		; CSpeedTreeForest::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCSpeedTreeForest@@@8			; CSpeedTreeForest `RTTI Type Descriptor'
PUBLIC	??_R3CSpeedTreeForest@@8			; CSpeedTreeForest::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSpeedTreeForest@@8			; CSpeedTreeForest::`RTTI Base Class Array'
PUBLIC	??_R1GM@?0A@EA@CGraphicBase@@8			; CGraphicBase::`RTTI Base Class Descriptor at (108,-1,0,64)'
PUBLIC	??_R0?AVCGraphicBase@@@8			; CGraphicBase `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicBase@@8				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicBase@@8				; CGraphicBase::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicBase@@8			; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1HA@?0A@EA@?$CSingleton@VCSpeedTreeForestDirectX8@@@@8 ; CSingleton<CSpeedTreeForestDirectX8>::`RTTI Base Class Descriptor at (112,-1,0,64)'
PUBLIC	??_R0?AV?$CSingleton@VCSpeedTreeForestDirectX8@@@@@8 ; CSingleton<CSpeedTreeForestDirectX8> `RTTI Type Descriptor'
PUBLIC	??_R3?$CSingleton@VCSpeedTreeForestDirectX8@@@@8 ; CSingleton<CSpeedTreeForestDirectX8>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CSingleton@VCSpeedTreeForestDirectX8@@@@8 ; CSingleton<CSpeedTreeForestDirectX8>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CSingleton@VCSpeedTreeForestDirectX8@@@@8 ; CSingleton<CSpeedTreeForestDirectX8>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CSpeedTreeForestDirectX8@@6BCGraphicBase@@@ ; CSpeedTreeForestDirectX8::`RTTI Complete Object Locator'
PUBLIC	??_R4CSpeedTreeForestDirectX8@@6B?$CSingleton@VCSpeedTreeForestDirectX8@@@@@ ; CSpeedTreeForestDirectX8::`RTTI Complete Object Locator'
PUBLIC	??_R4?$CSingleton@VCSpeedTreeForestDirectX8@@@@6B@ ; CSingleton<CSpeedTreeForestDirectX8>::`RTTI Complete Object Locator'
PUBLIC	__xmm@00000000000000003f80000000000000
PUBLIC	__xmm@3f0000003f0000003f8000003f800000
PUBLIC	__xmm@3f8000003f34fdf4be99999abf34fdf4
PUBLIC	__xmm@3f8000003f8000003f8000003f000000
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	?SetLightState@CSpeedTreeRT@@SAXI_N@Z:PROC	; CSpeedTreeRT::SetLightState
EXTRN	?SetLightAttributes@CSpeedTreeRT@@SAXIPBM@Z:PROC ; CSpeedTreeRT::SetLightAttributes
EXTRN	?SetCamera@CSpeedTreeRT@@SAXPBM0@Z:PROC		; CSpeedTreeRT::SetCamera
EXTRN	?SetNumWindMatrices@CSpeedTreeRT@@SAXI@Z:PROC	; CSpeedTreeRT::SetNumWindMatrices
EXTRN	_D3DXMatrixTranspose@8:PROC
EXTRN	_D3DXMatrixMultiply@12:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	??0CGraphicBase@@QAE@XZ:PROC			; CGraphicBase::CGraphicBase
EXTRN	??1CGraphicBase@@UAE@XZ:PROC			; CGraphicBase::~CGraphicBase
EXTRN	?isShow@CGraphicObjectInstance@@QAE_NXZ:PROC	; CGraphicObjectInstance::isShow
EXTRN	?SetVertexShaders@CSpeedTreeWrapper@@SAXKK@Z:PROC ; CSpeedTreeWrapper::SetVertexShaders
EXTRN	?SetupBranchForTreeType@CSpeedTreeWrapper@@QBEXXZ:PROC ; CSpeedTreeWrapper::SetupBranchForTreeType
EXTRN	?SetupFrondForTreeType@CSpeedTreeWrapper@@QBEXXZ:PROC ; CSpeedTreeWrapper::SetupFrondForTreeType
EXTRN	?SetupLeafForTreeType@CSpeedTreeWrapper@@QBEXXZ:PROC ; CSpeedTreeWrapper::SetupLeafForTreeType
EXTRN	?RenderBranches@CSpeedTreeWrapper@@QBEXXZ:PROC	; CSpeedTreeWrapper::RenderBranches
EXTRN	?RenderFronds@CSpeedTreeWrapper@@QBEXXZ:PROC	; CSpeedTreeWrapper::RenderFronds
EXTRN	?RenderLeaves@CSpeedTreeWrapper@@QBEXXZ:PROC	; CSpeedTreeWrapper::RenderLeaves
EXTRN	?RenderBillboards@CSpeedTreeWrapper@@QBEXXZ:PROC ; CSpeedTreeWrapper::RenderBillboards
EXTRN	?GetInstances@CSpeedTreeWrapper@@QAEPAPAV1@AAI@Z:PROC ; CSpeedTreeWrapper::GetInstances
EXTRN	?Advance@CSpeedTreeWrapper@@QAEXXZ:PROC		; CSpeedTreeWrapper::Advance
EXTRN	??0CSpeedTreeForest@@QAE@XZ:PROC		; CSpeedTreeForest::CSpeedTreeForest
EXTRN	??1CSpeedTreeForest@@UAE@XZ:PROC		; CSpeedTreeForest::~CSpeedTreeForest
EXTRN	?UpdateSystem@CSpeedTreeForest@@QAEXM@Z:PROC	; CSpeedTreeForest::UpdateSystem
EXTRN	??_E?$CSingleton@VCSpeedTreeForestDirectX8@@@@UAEPAXI@Z:PROC ; CSingleton<CSpeedTreeForestDirectX8>::`vector deleting destructor'
EXTRN	??_ECSpeedTreeForestDirectX8@@UAEPAXI@Z:PROC	; CSpeedTreeForestDirectX8::`vector deleting destructor'
EXTRN	?GetCurrentSecond@CTimer@@QAEMXZ:PROC		; CTimer::GetCurrentSecond
EXTRN	?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; CStateManager::SaveRenderState
EXTRN	?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z:PROC ; CStateManager::RestoreRenderState
EXTRN	?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; CStateManager::SetRenderState
EXTRN	?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z:PROC ; CStateManager::SetTextureStageState
EXTRN	?SetVertexShader@CStateManager@@QAEXK@Z:PROC	; CStateManager::SetVertexShader
EXTRN	?SetVertexShaderConstant@CStateManager@@QAEXKPBXK@Z:PROC ; CStateManager::SetVertexShaderConstant
EXTRN	?GetRenderState@CStateManager@@QAEKW4_D3DRENDERSTATETYPE@@@Z:PROC ; CStateManager::GetRenderState
EXTRN	?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ:PROC ; CCameraManager::GetCurrentCamera
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A:ZWORD	; CGraphicBase::ms_matView
EXTRN	?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A:ZWORD	; CGraphicBase::ms_matProj
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCSpeedTreeForestDirectX8@@@@0PAVCSpeedTreeForestDirectX8@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCSpeedTreeForestDirectX8@@@@0PAVCSpeedTreeForestDirectX8@@A DD 01H DUP (?) ; CSingleton<CSpeedTreeForestDirectX8>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A DD 01H DUP (?) ; CSingleton<CTimer>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A DD 01H DUP (?) ; CSingleton<CStateManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A DD 01H DUP (?) ; CSingleton<CCameraManager>::ms_singleton
_BSS	ENDS
;	COMDAT __xmm@3f8000003f8000003f8000003f000000
CONST	SEGMENT
__xmm@3f8000003f8000003f8000003f000000 DB 00H, 00H, 00H, '?', 00H, 00H, 080H
	DB	'?', 00H, 00H, 080H, '?', 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT __xmm@3f8000003f34fdf4be99999abf34fdf4
CONST	SEGMENT
__xmm@3f8000003f34fdf4be99999abf34fdf4 DB 0f4H, 0fdH, '4', 0bfH, 09aH, 099H
	DB	099H, 0beH, 0f4H, 0fdH, '4?', 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT __xmm@3f0000003f0000003f8000003f800000
CONST	SEGMENT
__xmm@3f0000003f0000003f8000003f800000 DB 00H, 00H, 080H, '?', 00H, 00H, 080H
	DB	'?', 00H, 00H, 00H, '?', 00H, 00H, 00H, '?'
CONST	ENDS
;	COMDAT __xmm@00000000000000003f80000000000000
CONST	SEGMENT
__xmm@00000000000000003f80000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 080H
	DB	'?', 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT ??_R4?$CSingleton@VCSpeedTreeForestDirectX8@@@@6B@
rdata$r	SEGMENT
??_R4?$CSingleton@VCSpeedTreeForestDirectX8@@@@6B@ DD 00H ; CSingleton<CSpeedTreeForestDirectX8>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CSingleton@VCSpeedTreeForestDirectX8@@@@@8
	DD	FLAT:??_R3?$CSingleton@VCSpeedTreeForestDirectX8@@@@8
rdata$r	ENDS
;	COMDAT ??_R4CSpeedTreeForestDirectX8@@6B?$CSingleton@VCSpeedTreeForestDirectX8@@@@@
rdata$r	SEGMENT
??_R4CSpeedTreeForestDirectX8@@6B?$CSingleton@VCSpeedTreeForestDirectX8@@@@@ DD 00H ; CSpeedTreeForestDirectX8::`RTTI Complete Object Locator'
	DD	070H
	DD	00H
	DD	FLAT:??_R0?AVCSpeedTreeForestDirectX8@@@8
	DD	FLAT:??_R3CSpeedTreeForestDirectX8@@8
rdata$r	ENDS
;	COMDAT ??_R4CSpeedTreeForestDirectX8@@6BCGraphicBase@@@
rdata$r	SEGMENT
??_R4CSpeedTreeForestDirectX8@@6BCGraphicBase@@@ DD 00H	; CSpeedTreeForestDirectX8::`RTTI Complete Object Locator'
	DD	06cH
	DD	00H
	DD	FLAT:??_R0?AVCSpeedTreeForestDirectX8@@@8
	DD	FLAT:??_R3CSpeedTreeForestDirectX8@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CSingleton@VCSpeedTreeForestDirectX8@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CSingleton@VCSpeedTreeForestDirectX8@@@@8 DD FLAT:??_R0?AV?$CSingleton@VCSpeedTreeForestDirectX8@@@@@8 ; CSingleton<CSpeedTreeForestDirectX8>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CSingleton@VCSpeedTreeForestDirectX8@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CSingleton@VCSpeedTreeForestDirectX8@@@@8
rdata$r	SEGMENT
??_R2?$CSingleton@VCSpeedTreeForestDirectX8@@@@8 DD FLAT:??_R1A@?0A@EA@?$CSingleton@VCSpeedTreeForestDirectX8@@@@8 ; CSingleton<CSpeedTreeForestDirectX8>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CSingleton@VCSpeedTreeForestDirectX8@@@@8
rdata$r	SEGMENT
??_R3?$CSingleton@VCSpeedTreeForestDirectX8@@@@8 DD 00H	; CSingleton<CSpeedTreeForestDirectX8>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CSingleton@VCSpeedTreeForestDirectX8@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CSingleton@VCSpeedTreeForestDirectX8@@@@@8
data$rs	SEGMENT
??_R0?AV?$CSingleton@VCSpeedTreeForestDirectX8@@@@@8 DD FLAT:??_7type_info@@6B@ ; CSingleton<CSpeedTreeForestDirectX8> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CSingleton@VCSpeedTreeForestDirectX8@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R1HA@?0A@EA@?$CSingleton@VCSpeedTreeForestDirectX8@@@@8
rdata$r	SEGMENT
??_R1HA@?0A@EA@?$CSingleton@VCSpeedTreeForestDirectX8@@@@8 DD FLAT:??_R0?AV?$CSingleton@VCSpeedTreeForestDirectX8@@@@@8 ; CSingleton<CSpeedTreeForestDirectX8>::`RTTI Base Class Descriptor at (112,-1,0,64)'
	DD	00H
	DD	070H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CSingleton@VCSpeedTreeForestDirectX8@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicBase@@8 DD FLAT:??_R0?AVCGraphicBase@@@8 ; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicBase@@8
rdata$r	SEGMENT
??_R2CGraphicBase@@8 DD FLAT:??_R1A@?0A@EA@CGraphicBase@@8 ; CGraphicBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGraphicBase@@8
rdata$r	SEGMENT
??_R3CGraphicBase@@8 DD 00H				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicBase@@@8
data$rs	SEGMENT
??_R0?AVCGraphicBase@@@8 DD FLAT:??_7type_info@@6B@	; CGraphicBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicBase@@', 00H
data$rs	ENDS
;	COMDAT ??_R1GM@?0A@EA@CGraphicBase@@8
rdata$r	SEGMENT
??_R1GM@?0A@EA@CGraphicBase@@8 DD FLAT:??_R0?AVCGraphicBase@@@8 ; CGraphicBase::`RTTI Base Class Descriptor at (108,-1,0,64)'
	DD	00H
	DD	06cH
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R2CSpeedTreeForest@@8
rdata$r	SEGMENT
??_R2CSpeedTreeForest@@8 DD FLAT:??_R1A@?0A@EA@CSpeedTreeForest@@8 ; CSpeedTreeForest::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CSpeedTreeForest@@8
rdata$r	SEGMENT
??_R3CSpeedTreeForest@@8 DD 00H				; CSpeedTreeForest::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CSpeedTreeForest@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSpeedTreeForest@@@8
data$rs	SEGMENT
??_R0?AVCSpeedTreeForest@@@8 DD FLAT:??_7type_info@@6B@	; CSpeedTreeForest `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSpeedTreeForest@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CSpeedTreeForest@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CSpeedTreeForest@@8 DD FLAT:??_R0?AVCSpeedTreeForest@@@8 ; CSpeedTreeForest::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSpeedTreeForest@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CSpeedTreeForestDirectX8@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CSpeedTreeForestDirectX8@@8 DD FLAT:??_R0?AVCSpeedTreeForestDirectX8@@@8 ; CSpeedTreeForestDirectX8::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSpeedTreeForestDirectX8@@8
rdata$r	ENDS
;	COMDAT ??_R2CSpeedTreeForestDirectX8@@8
rdata$r	SEGMENT
??_R2CSpeedTreeForestDirectX8@@8 DD FLAT:??_R1A@?0A@EA@CSpeedTreeForestDirectX8@@8 ; CSpeedTreeForestDirectX8::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CSpeedTreeForest@@8
	DD	FLAT:??_R1GM@?0A@EA@CGraphicBase@@8
	DD	FLAT:??_R1HA@?0A@EA@?$CSingleton@VCSpeedTreeForestDirectX8@@@@8
rdata$r	ENDS
;	COMDAT ??_R3CSpeedTreeForestDirectX8@@8
rdata$r	SEGMENT
??_R3CSpeedTreeForestDirectX8@@8 DD 00H			; CSpeedTreeForestDirectX8::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2CSpeedTreeForestDirectX8@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSpeedTreeForestDirectX8@@@8
data$rs	SEGMENT
??_R0?AVCSpeedTreeForestDirectX8@@@8 DD FLAT:??_7type_info@@6B@ ; CSpeedTreeForestDirectX8 `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSpeedTreeForestDirectX8@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CSpeedTreeForestDirectX8@@6BCSpeedTreeForest@@@
rdata$r	SEGMENT
??_R4CSpeedTreeForestDirectX8@@6BCSpeedTreeForest@@@ DD 00H ; CSpeedTreeForestDirectX8::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCSpeedTreeForestDirectX8@@@8
	DD	FLAT:??_R3CSpeedTreeForestDirectX8@@8
rdata$r	ENDS
_DATA	SEGMENT
?D3DFVF_SPEEDTREE_BRANCH_VERTEX@@3KA DD 0242H		; D3DFVF_SPEEDTREE_BRANCH_VERTEX
?D3DFVF_SPEEDTREE_LEAF_VERTEX@@3KA DD 0142H		; D3DFVF_SPEEDTREE_LEAF_VERTEX
_DATA	ENDS
;	COMDAT ??_7CSpeedTreeForestDirectX8@@6B?$CSingleton@VCSpeedTreeForestDirectX8@@@@@
CONST	SEGMENT
??_7CSpeedTreeForestDirectX8@@6B?$CSingleton@VCSpeedTreeForestDirectX8@@@@@ DD FLAT:??_R4CSpeedTreeForestDirectX8@@6B?$CSingleton@VCSpeedTreeForestDirectX8@@@@@ ; CSpeedTreeForestDirectX8::`vftable'
	DD	FLAT:??_ECSpeedTreeForestDirectX8@@WHA@AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CSpeedTreeForestDirectX8@@6BCGraphicBase@@@
CONST	SEGMENT
??_7CSpeedTreeForestDirectX8@@6BCGraphicBase@@@ DD FLAT:??_R4CSpeedTreeForestDirectX8@@6BCGraphicBase@@@ ; CSpeedTreeForestDirectX8::`vftable'
	DD	FLAT:??_ECSpeedTreeForestDirectX8@@WGM@AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CSpeedTreeForestDirectX8@@6BCSpeedTreeForest@@@
CONST	SEGMENT
??_7CSpeedTreeForestDirectX8@@6BCSpeedTreeForest@@@ DD FLAT:??_R4CSpeedTreeForestDirectX8@@6BCSpeedTreeForest@@@ ; CSpeedTreeForestDirectX8::`vftable'
	DD	FLAT:??_ECSpeedTreeForestDirectX8@@UAEPAXI@Z
	DD	FLAT:?UploadWindMatrix@CSpeedTreeForestDirectX8@@UBEXIPBM@Z
	DD	FLAT:?Render@CSpeedTreeForestDirectX8@@UAEXK@Z
CONST	ENDS
;	COMDAT ??_7?$CSingleton@VCSpeedTreeForestDirectX8@@@@6B@
CONST	SEGMENT
??_7?$CSingleton@VCSpeedTreeForestDirectX8@@@@6B@ DD FLAT:??_R4?$CSingleton@VCSpeedTreeForestDirectX8@@@@6B@ ; CSingleton<CSpeedTreeForestDirectX8>::`vftable'
	DD	FLAT:??_E?$CSingleton@VCSpeedTreeForestDirectX8@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CSpeedTreeForestDirectX8@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CSpeedTreeForestDirectX8@@QAE@XZ$0
__ehfuncinfo$??0CSpeedTreeForestDirectX8@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CSpeedTreeForestDirectX8@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_ECSpeedTreeForestDirectX8@@WHA@AEPAXI@Z
_TEXT	SEGMENT
??_ECSpeedTreeForestDirectX8@@WHA@AEPAXI@Z PROC		; [thunk]:CSpeedTreeForestDirectX8::`vector deleting destructor', COMDAT
  00000	83 e9 70	 sub	 ecx, 112		; 00000070H
  00003	e9 00 00 00 00	 jmp	 ??_ECSpeedTreeForestDirectX8@@UAEPAXI@Z
??_ECSpeedTreeForestDirectX8@@WHA@AEPAXI@Z ENDP		; [thunk]:CSpeedTreeForestDirectX8::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_ECSpeedTreeForestDirectX8@@WGM@AEPAXI@Z
_TEXT	SEGMENT
??_ECSpeedTreeForestDirectX8@@WGM@AEPAXI@Z PROC		; [thunk]:CSpeedTreeForestDirectX8::`vector deleting destructor', COMDAT
  00000	83 e9 6c	 sub	 ecx, 108		; 0000006cH
  00003	e9 00 00 00 00	 jmp	 ??_ECSpeedTreeForestDirectX8@@UAEPAXI@Z
??_ECSpeedTreeForestDirectX8@@WGM@AEPAXI@Z ENDP		; [thunk]:CSpeedTreeForestDirectX8::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\VertexShaders.h
;	COMDAT ?LoadLeafShader@@YAKPAUIDirect3DDevice8@@@Z
_TEXT	SEGMENT
_pDx$ = 8						; size = 4
?LoadLeafShader@@YAKPAUIDirect3DDevice8@@@Z PROC	; LoadLeafShader, COMDAT

; 277  : 	DWORD dwShader = D3DFVF_SPEEDTREE_LEAF_VERTEX;
; 278  : 
; 279  : 	#if defined WRAPPER_USE_GPU_LEAF_PLACEMENT || defined WRAPPER_USE_GPU_WIND
; 280  : 
; 281  : 		// leaf shader declaration
; 282  : 		DWORD pLeafShaderDecl[ ] =
; 283  : 		{
; 284  : 				D3DVSD_STREAM(0),
; 285  : 				D3DVSD_REG(D3DVSDE_POSITION,        D3DVSDT_FLOAT3),
; 286  : 			#ifdef WRAPPER_USE_DYNAMIC_LIGHTING
; 287  : 				D3DVSD_REG(D3DVSDE_NORMAL,			D3DVSDT_FLOAT3),
; 288  : 			#else
; 289  : 				D3DVSD_REG(D3DVSDE_DIFFUSE,			D3DVSDT_D3DCOLOR),
; 290  : 			#endif
; 291  : 				D3DVSD_REG(D3DVSDE_TEXCOORD0,		D3DVSDT_FLOAT2),
; 292  : 				D3DVSD_REG(D3DVSDE_TEXCOORD2,		D3DVSDT_FLOAT4),
; 293  : 				D3DVSD_END( )
; 294  : 		};
; 295  : 
; 296  : 		// assemble shader
; 297  : 		LPD3DXBUFFER pCode, pError;
; 298  : 
; 299  : 		if (D3DXAssembleShader(g_achLeafVertexProgram, sizeof(g_achLeafVertexProgram) - 1, 0, NULL, &pCode, &pError) == D3D_OK)
; 300  : 		{
; 301  : 			if (pDx->CreateVertexShader(pLeafShaderDecl, (DWORD*) pCode->GetBufferPointer( ), &dwShader, 0) != D3D_OK)
; 302  : 			{
; 303  : 				Tracef("Failed to create leaf vertex shader.");
; 304  : 				/*
; 305  : 				char szError[1024];
; 306  : 				sprintf(szError, "Failed to create leaf vertex shader.");
; 307  : 				MessageBox(NULL, szError, "Vertex Shader Error", MB_ICONSTOP);
; 308  : 				*/
; 309  : 			}
; 310  : 		}
; 311  : 		else
; 312  : 		{
; 313  : 			Tracef("Failed to assemble leaf vertex shader. The error reported is [ %s ].\n", pError->GetBufferPointer( ));
; 314  : 			/*
; 315  : 			char szError[1024];
; 316  : 			sprintf(szError, "Failed to assemble leaf vertex shader. The error reported is [ %s ].\n", pError->GetBufferPointer( ));
; 317  : 			MessageBox(NULL, szError, "Vertex Shader Error", MB_ICONSTOP);
; 318  : 			*/
; 319  : 		}
; 320  : 
; 321  : 		if (pCode)
; 322  :     		pCode->Release( );
; 323  : 
; 324  : 	#else
; 325  : 
; 326  : 		dwShader = D3DFVF_SPEEDTREE_LEAF_VERTEX;
; 327  : 
; 328  : 	#endif
; 329  : 
; 330  : 	return dwShader;

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?D3DFVF_SPEEDTREE_LEAF_VERTEX@@3KA

; 331  : }

  00005	c3		 ret	 0
?LoadLeafShader@@YAKPAUIDirect3DDevice8@@@Z ENDP	; LoadLeafShader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\VertexShaders.h
;	COMDAT ?LoadBranchShader@@YAKPAUIDirect3DDevice8@@@Z
_TEXT	SEGMENT
_pDx$ = 8						; size = 4
?LoadBranchShader@@YAKPAUIDirect3DDevice8@@@Z PROC	; LoadBranchShader, COMDAT

; 131  : 	#ifndef WRAPPER_USE_GPU_WIND
; 132  : 		return D3DFVF_SPEEDTREE_BRANCH_VERTEX;

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?D3DFVF_SPEEDTREE_BRANCH_VERTEX@@3KA

; 133  : 	#endif
; 134  : 
; 135  : 	// branch shader declaration
; 136  :     DWORD pBranchShaderDecl[] =
; 137  :     {
; 138  : 			D3DVSD_STREAM(0),
; 139  : 			D3DVSD_REG(D3DVSDE_POSITION,        D3DVSDT_FLOAT3),
; 140  : 		#ifdef WRAPPER_USE_DYNAMIC_LIGHTING
; 141  : 			D3DVSD_REG(D3DVSDE_NORMAL,			D3DVSDT_FLOAT3),
; 142  : 		#else
; 143  : 			D3DVSD_REG(D3DVSDE_DIFFUSE,			D3DVSDT_D3DCOLOR),
; 144  : 		#endif
; 145  : 			D3DVSD_REG(D3DVSDE_TEXCOORD0,		D3DVSDT_FLOAT2),
; 146  : 		#ifdef WRAPPER_RENDER_SELF_SHADOWS
; 147  : 			D3DVSD_REG(D3DVSDE_TEXCOORD1,		D3DVSDT_FLOAT2),
; 148  : 		#endif
; 149  : 		#ifdef WRAPPER_USE_GPU_WIND
; 150  : 			D3DVSD_REG(D3DVSDE_TEXCOORD2,		D3DVSDT_FLOAT2),
; 151  : 		#endif
; 152  : 			D3DVSD_END( )
; 153  :     };
; 154  : 
; 155  :     // assemble shader
; 156  : 	DWORD dwShader;
; 157  : 	LPD3DXBUFFER pCode, pError;
; 158  : 
; 159  :     if (D3DXAssembleShader(g_achSimpleVertexProgram, sizeof(g_achSimpleVertexProgram) - 1, 0, NULL, &pCode, &pError) == D3D_OK)
; 160  : 	{
; 161  : 		if (pDx->CreateVertexShader(pBranchShaderDecl, (DWORD*) pCode->GetBufferPointer( ), &dwShader, 0) != D3D_OK)
; 162  : 		{
; 163  : 			char szError[1024];
; 164  : 			sprintf(szError, "Failed to create branch vertex shader.");
; 165  : 			MessageBox(NULL, szError, "Vertex Shader Error", MB_ICONSTOP);
; 166  : 		}
; 167  : 	}
; 168  : 	else
; 169  :     {
; 170  :         char szError[1024];
; 171  : 	    sprintf(szError, "Failed to assemble branch vertex shader.\nThe error reported is [ %s ].\n", pError->GetBufferPointer( ));
; 172  : 	    MessageBox(NULL, szError, "Vertex Shader Error", MB_ICONSTOP);
; 173  :     }
; 174  : 
; 175  : 	if (pCode)
; 176  :     	pCode->Release();
; 177  : 
; 178  : 	return dwShader;
; 179  : }

  00005	c3		 ret	 0
?LoadBranchShader@@YAKPAUIDirect3DDevice8@@@Z ENDP	; LoadBranchShader
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCSpeedTreeForestDirectX8@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCSpeedTreeForestDirectX8@@UAEPAXI@Z PROC		; CSpeedTreeForestDirectX8::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CSpeedTreeForestDirectX8@@UAE@XZ ; CSpeedTreeForestDirectX8::~CSpeedTreeForestDirectX8
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN5@scalar
  00011	68 80 00 00 00	 push	 128			; 00000080H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCSpeedTreeForestDirectX8@@UAEPAXI@Z ENDP		; CSpeedTreeForestDirectX8::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeForestDirectX8.cpp
;	COMDAT ?InitVertexShaders@CSpeedTreeForestDirectX8@@AAE_NXZ
_TEXT	SEGMENT
?InitVertexShaders@CSpeedTreeForestDirectX8@@AAE_NXZ PROC ; CSpeedTreeForestDirectX8::InitVertexShaders, COMDAT
; _this$ = ecx

; 65   : 	// load the vertex shaders
; 66   : 	if (!m_dwBranchVertexShader)

  00000	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  00003	56		 push	 esi
  00004	85 d2		 test	 edx, edx
  00006	75 10		 jne	 SHORT $LN6@InitVertex

; 67   : 		m_dwBranchVertexShader = LoadBranchShader(m_pDx);

  00008	ff 71 74	 push	 DWORD PTR [ecx+116]
  0000b	e8 00 00 00 00	 call	 ?LoadBranchShader@@YAKPAUIDirect3DDevice8@@@Z ; LoadBranchShader
  00010	8b d0		 mov	 edx, eax
  00012	83 c4 04	 add	 esp, 4
  00015	89 51 78	 mov	 DWORD PTR [ecx+120], edx
$LN6@InitVertex:

; 68   : 
; 69   : 	if (!m_dwLeafVertexShader)

  00018	8b 41 7c	 mov	 eax, DWORD PTR [ecx+124]
  0001b	85 c0		 test	 eax, eax
  0001d	75 0e		 jne	 SHORT $LN3@InitVertex

; 70   : 		m_dwLeafVertexShader = LoadLeafShader(m_pDx);

  0001f	ff 71 74	 push	 DWORD PTR [ecx+116]
  00022	e8 00 00 00 00	 call	 ?LoadLeafShader@@YAKPAUIDirect3DDevice8@@@Z ; LoadLeafShader
  00027	83 c4 04	 add	 esp, 4
  0002a	89 41 7c	 mov	 DWORD PTR [ecx+124], eax
$LN3@InitVertex:

; 71   : 
; 72   : 	if (m_dwBranchVertexShader && m_dwLeafVertexShader)

  0002d	5e		 pop	 esi
  0002e	85 d2		 test	 edx, edx
  00030	74 11		 je	 SHORT $LN4@InitVertex
  00032	85 c0		 test	 eax, eax
  00034	74 0d		 je	 SHORT $LN4@InitVertex

; 73   : 	{
; 74   : 		CSpeedTreeWrapper::SetVertexShaders(m_dwBranchVertexShader, m_dwLeafVertexShader);

  00036	50		 push	 eax
  00037	52		 push	 edx
  00038	e8 00 00 00 00	 call	 ?SetVertexShaders@CSpeedTreeWrapper@@SAXKK@Z ; CSpeedTreeWrapper::SetVertexShaders
  0003d	83 c4 08	 add	 esp, 8

; 75   : 		return true;

  00040	b0 01		 mov	 al, 1

; 79   : }

  00042	c3		 ret	 0
$LN4@InitVertex:

; 76   : 	}
; 77   : 
; 78   : 	return false;

  00043	32 c0		 xor	 al, al

; 79   : }

  00045	c3		 ret	 0
?InitVertexShaders@CSpeedTreeForestDirectX8@@AAE_NXZ ENDP ; CSpeedTreeForestDirectX8::InitVertexShaders
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeForestDirectX8.cpp
;	COMDAT ?SetRenderingDevice@CSpeedTreeForestDirectX8@@QAE_NPAUIDirect3DDevice8@@@Z
_TEXT	SEGMENT
_afLight1$ = -68					; size = 64
__$ArrayPad$ = -4					; size = 4
_lpDevice$ = 8						; size = 4
?SetRenderingDevice@CSpeedTreeForestDirectX8@@QAE_NPAUIDirect3DDevice8@@@Z PROC ; CSpeedTreeForestDirectX8::SetRenderingDevice, COMDAT
; _this$ = ecx

; 82   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 83   : 	m_pDx = lpDevice;

  00010	8b 45 08	 mov	 eax, DWORD PTR _lpDevice$[ebp]
  00013	89 41 74	 mov	 DWORD PTR [ecx+116], eax

; 84   : 
; 85   : 	if (!InitVertexShaders())

  00016	e8 00 00 00 00	 call	 ?InitVertexShaders@CSpeedTreeForestDirectX8@@AAE_NXZ ; CSpeedTreeForestDirectX8::InitVertexShaders
  0001b	84 c0		 test	 al, al
  0001d	75 10		 jne	 SHORT $LN2@SetRenderi

; 107  : 	return true;
; 108  : }

  0001f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00022	33 cd		 xor	 ecx, ebp
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
$LN2@SetRenderi:

; 86   : 		return false;
; 87   : 
; 88   : 	const float c_afLightPosition[4] = { -0.707f, -0.300f, 0.707f, 0.0f };
; 89   : 	const float	c_afLightAmbient[4] = { 0.5f, 0.5f, 0.5f, 1.0f };
; 90   : 	const float	c_afLightDiffuse[4] = { 1.0f, 1.0f, 1.0f, 1.0f };
; 91   : 	const float	c_afLightSpecular[4] = { 1.0f, 1.0f, 1.0f, 1.0f };
; 92   : 
; 93   : 	float afLight1[] =
; 94   : 	{
; 95   : 		c_afLightPosition[0], c_afLightPosition[1], c_afLightPosition[2],	// pos

  0002f	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@3f8000003f34fdf4be99999abf34fdf4
  00036	0f 11 45 bc	 movups	 XMMWORD PTR _afLight1$[ebp], xmm0

; 96   : 		c_afLightDiffuse[0], c_afLightDiffuse[1], c_afLightDiffuse[2],		// diffuse
; 97   : 		c_afLightAmbient[0], c_afLightAmbient[1], c_afLightAmbient[2],		// ambient
; 98   : 		c_afLightSpecular[0], c_afLightSpecular[1], c_afLightSpecular[2],	// specular
; 99   : 		c_afLightPosition[3],												// directional flag
; 100  : 		1.0f, 0.0f, 0.0f													// attenuation (constant, linear, quadratic)
; 101  : 	};
; 102  : 
; 103  : 	CSpeedTreeRT::SetNumWindMatrices(c_nNumWindMatrices);

  0003a	6a 04		 push	 4
  0003c	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@3f0000003f0000003f8000003f800000
  00043	0f 11 45 cc	 movups	 XMMWORD PTR _afLight1$[ebp+16], xmm0
  00047	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f000000
  0004e	0f 11 45 dc	 movups	 XMMWORD PTR _afLight1$[ebp+32], xmm0
  00052	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00000000000000003f80000000000000
  00059	0f 11 45 ec	 movups	 XMMWORD PTR _afLight1$[ebp+48], xmm0
  0005d	e8 00 00 00 00	 call	 ?SetNumWindMatrices@CSpeedTreeRT@@SAXI@Z ; CSpeedTreeRT::SetNumWindMatrices

; 104  : 
; 105  : 	CSpeedTreeRT::SetLightAttributes(0, afLight1);

  00062	8d 45 bc	 lea	 eax, DWORD PTR _afLight1$[ebp]
  00065	50		 push	 eax
  00066	6a 00		 push	 0
  00068	e8 00 00 00 00	 call	 ?SetLightAttributes@CSpeedTreeRT@@SAXIPBM@Z ; CSpeedTreeRT::SetLightAttributes

; 106  : 	CSpeedTreeRT::SetLightState(0, true);

  0006d	6a 01		 push	 1
  0006f	6a 00		 push	 0
  00071	e8 00 00 00 00	 call	 ?SetLightState@CSpeedTreeRT@@SAXI_N@Z ; CSpeedTreeRT::SetLightState

; 107  : 	return true;
; 108  : }

  00076	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00079	83 c4 14	 add	 esp, 20			; 00000014H
  0007c	33 cd		 xor	 ecx, ebp
  0007e	b0 01		 mov	 al, 1
  00080	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c2 04 00	 ret	 4
?SetRenderingDevice@CSpeedTreeForestDirectX8@@QAE_NPAUIDirect3DDevice8@@@Z ENDP ; CSpeedTreeForestDirectX8::SetRenderingDevice
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeForestDirectX8.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeForestDirectX8.cpp
; File C:\Marty 5.5\Src-Client\Client\eterlib\Camera.h
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeForestDirectX8.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeForestDirectX8.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeForestDirectX8.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeForestDirectX8.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeForestDirectX8.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeForestDirectX8.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeForestDirectX8.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeForestDirectX8.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeForestDirectX8.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeForestDirectX8.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeForestDirectX8.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeForestDirectX8.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeForestDirectX8.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeForestDirectX8.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeForestDirectX8.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeForestDirectX8.cpp
;	COMDAT ?Render@CSpeedTreeForestDirectX8@@UAEXK@Z
_TEXT	SEGMENT
tv2417 = -28						; size = 4
_dwFogVertexMode$1$ = -24				; size = 4
_dwColorVertexState$1$ = -20				; size = 4
_dwLightState$1$ = -16					; size = 4
tv2431 = -12						; size = 4
_this$1$ = -8						; size = 4
_uiCount$ = -4						; size = 4
_ulRenderBitVector$ = 8					; size = 4
?Render@CSpeedTreeForestDirectX8@@UAEXK@Z PROC		; CSpeedTreeForestDirectX8::Render, COMDAT
; _this$ = ecx

; 141  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx

; 142  : 	UpdateSystem(CTimer::Instance().GetCurrentSecond());

  00009	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  0000f	89 5d f8	 mov	 DWORD PTR _this$1$[ebp], ebx
  00012	e8 00 00 00 00	 call	 ?GetCurrentSecond@CTimer@@QAEMXZ ; CTimer::GetCurrentSecond
  00017	51		 push	 ecx
  00018	8b cb		 mov	 ecx, ebx
  0001a	d9 1c 24	 fstp	 DWORD PTR [esp]
  0001d	e8 00 00 00 00	 call	 ?UpdateSystem@CSpeedTreeForest@@QAEXM@Z ; CSpeedTreeForest::UpdateSystem
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1208 :         return _Get_scary()->_Mysize == 0;

  00022	83 7b 08 00	 cmp	 DWORD PTR [ebx+8], 0
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeForestDirectX8.cpp

; 144  : 	if (m_pMainTreeMap.empty())

  00026	0f 84 44 06 00
	00		 je	 $LN1@Render

; 145  : 		return;
; 146  : 
; 147  : 	if (!(ulRenderBitVector & Forest_RenderToShadow) && !(ulRenderBitVector & Forest_RenderToMiniMap))

  0002c	8b 45 08	 mov	 eax, DWORD PTR _ulRenderBitVector$[ebp]
  0002f	83 e0 60	 and	 eax, 96			; 00000060H
  00032	89 45 f4	 mov	 DWORD PTR tv2431[ebp], eax
  00035	75 20		 jne	 SHORT $LN30@Render

; 148  : 		UpdateCompundMatrix(CCameraManager::Instance().GetCurrentCamera()->GetEye(), ms_matView, ms_matProj);

  00037	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
  0003d	e8 00 00 00 00	 call	 ?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ ; CCameraManager::GetCurrentCamera
  00042	68 00 00 00 00	 push	 OFFSET ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matProj
; File C:\Marty 5.5\Src-Client\Client\eterlib\Camera.h

; 163  : 		const D3DXVECTOR3 & GetEye() const		{ return m_v3Eye; }

  00047	83 c0 30	 add	 eax, 48			; 00000030H
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeForestDirectX8.cpp

; 148  : 		UpdateCompundMatrix(CCameraManager::Instance().GetCurrentCamera()->GetEye(), ms_matView, ms_matProj);

  0004a	8b cb		 mov	 ecx, ebx
  0004c	68 00 00 00 00	 push	 OFFSET ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matView
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ?UpdateCompundMatrix@CSpeedTreeForestDirectX8@@QAEXABUD3DXVECTOR3@@ABUD3DXMATRIX@@1@Z ; CSpeedTreeForestDirectX8::UpdateCompundMatrix
$LN30@Render:

; 149  : 
; 150  : 	DWORD dwLightState = STATEMANAGER.GetRenderState(D3DRS_LIGHTING);

  00057	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0005d	56		 push	 esi
  0005e	57		 push	 edi
  0005f	68 89 00 00 00	 push	 137			; 00000089H
  00064	e8 00 00 00 00	 call	 ?GetRenderState@CStateManager@@QAEKW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::GetRenderState

; 151  : 	DWORD dwColorVertexState = STATEMANAGER.GetRenderState(D3DRS_COLORVERTEX);

  00069	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0006f	68 8d 00 00 00	 push	 141			; 0000008dH
  00074	89 45 f0	 mov	 DWORD PTR _dwLightState$1$[ebp], eax
  00077	e8 00 00 00 00	 call	 ?GetRenderState@CStateManager@@QAEKW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::GetRenderState

; 152  : 	DWORD dwFogVertexMode = STATEMANAGER.GetRenderState(D3DRS_FOGVERTEXMODE);

  0007c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00082	68 8c 00 00 00	 push	 140			; 0000008cH
  00087	89 45 ec	 mov	 DWORD PTR _dwColorVertexState$1$[ebp], eax
  0008a	e8 00 00 00 00	 call	 ?GetRenderState@CStateManager@@QAEKW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::GetRenderState

; 153  : 
; 154  : #ifdef WRAPPER_USE_DYNAMIC_LIGHTING
; 155  : 	STATEMANAGER.SetRenderState(D3DRS_LIGHTING, TRUE);
; 156  : #else
; 157  : 	STATEMANAGER.SetRenderState(D3DRS_LIGHTING, FALSE);

  0008f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00095	6a 00		 push	 0
  00097	68 89 00 00 00	 push	 137			; 00000089H
  0009c	89 45 e8	 mov	 DWORD PTR _dwFogVertexMode$1$[ebp], eax
  0009f	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 158  : 	STATEMANAGER.SetRenderState(D3DRS_COLORVERTEX, TRUE);

  000a4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000aa	6a 01		 push	 1
  000ac	68 8d 00 00 00	 push	 141			; 0000008dH
  000b1	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1132 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  000b6	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  000b9	8b 30		 mov	 esi, DWORD PTR [eax]
  000bb	3b f0		 cmp	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeForestDirectX8.cpp

; 166  : 	while (itor != m_pMainTreeMap.end())

  000bd	74 6a		 je	 SHORT $LN3@Render
  000bf	90		 npad	 1
$LL2@Render:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 50   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  000c0	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 287  :         _Tree_iterator _Tmp = *this;

  000c3	8b c6		 mov	 eax, esi

; 50   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  000c5	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000c9	74 1d		 je	 SHORT $LN368@Render

; 51   :             _Nodeptr _Pnode;
; 52   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  000cb	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000ce	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000d2	75 10		 jne	 SHORT $LN536@Render
$LL366@Render:
  000d4	3b 71 08	 cmp	 esi, DWORD PTR [ecx+8]
  000d7	75 0b		 jne	 SHORT $LN536@Render

; 53   :                 _Ptr = _Pnode; // ==> parent while right subtree

  000d9	8b f1		 mov	 esi, ecx
  000db	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000de	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000e2	74 f0		 je	 SHORT $LL366@Render
$LN536@Render:

; 54   :             }
; 55   : 
; 56   :             _Ptr = _Pnode; // ==> parent (head if end())

  000e4	8b f1		 mov	 esi, ecx

; 57   :         } else {

  000e6	eb 16		 jmp	 SHORT $LN374@Render
$LN368@Render:

; 58   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree

  000e8	8b f1		 mov	 esi, ecx

; 466  :         while (!_Pnode->_Left->_Isnil) {

  000ea	8b 16		 mov	 edx, DWORD PTR [esi]
  000ec	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  000f0	75 0c		 jne	 SHORT $LN374@Render
$LL373@Render:
  000f2	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 467  :             _Pnode = _Pnode->_Left;

  000f4	8b f2		 mov	 esi, edx
  000f6	8b d1		 mov	 edx, ecx
  000f8	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000fc	74 f4		 je	 SHORT $LL373@Render
$LN374@Render:
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeForestDirectX8.cpp

; 169  : 		CSpeedTreeWrapper ** ppInstances = pMainTree->GetInstances(uiCount);

  000fe	8d 4d fc	 lea	 ecx, DWORD PTR _uiCount$[ebp]
  00101	51		 push	 ecx
  00102	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00105	e8 00 00 00 00	 call	 ?GetInstances@CSpeedTreeWrapper@@QAEPAPAV1@AAI@Z ; CSpeedTreeWrapper::GetInstances

; 170  : 
; 171  : 		for (UINT i = 0; i < uiCount; ++i)

  0010a	33 ff		 xor	 edi, edi
  0010c	8b d8		 mov	 ebx, eax
  0010e	39 7d fc	 cmp	 DWORD PTR _uiCount$[ebp], edi
  00111	76 0e		 jbe	 SHORT $LN5@Render
$LL6@Render:

; 172  : 		{
; 173  : 			ppInstances[i]->Advance();

  00113	8b 0c bb	 mov	 ecx, DWORD PTR [ebx+edi*4]
  00116	e8 00 00 00 00	 call	 ?Advance@CSpeedTreeWrapper@@QAEXXZ ; CSpeedTreeWrapper::Advance
  0011b	47		 inc	 edi
  0011c	3b 7d fc	 cmp	 edi, DWORD PTR _uiCount$[ebp]
  0011f	72 f2		 jb	 SHORT $LL6@Render
$LN5@Render:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 232  :         return this->_Ptr == _Right._Ptr;

  00121	8b 5d f8	 mov	 ebx, DWORD PTR _this$1$[ebp]
  00124	3b 73 04	 cmp	 esi, DWORD PTR [ebx+4]
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeForestDirectX8.cpp

; 166  : 	while (itor != m_pMainTreeMap.end())

  00127	75 97		 jne	 SHORT $LL2@Render
$LN3@Render:

; 174  : 		}
; 175  : 	}
; 176  : 
; 177  : 	STATEMANAGER.SetVertexShaderConstant(c_nVertexShader_Light,	m_afLighting, 3);

  00129	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0012f	8d 43 0c	 lea	 eax, DWORD PTR [ebx+12]
  00132	6a 03		 push	 3
  00134	50		 push	 eax
  00135	6a 47		 push	 71			; 00000047H
  00137	e8 00 00 00 00	 call	 ?SetVertexShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SetVertexShaderConstant

; 178  : 	STATEMANAGER.SetVertexShaderConstant(c_nVertexShader_Fog, m_afFog, 1);

  0013c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00142	8d 43 3c	 lea	 eax, DWORD PTR [ebx+60]
  00145	6a 01		 push	 1
  00147	50		 push	 eax
  00148	6a 55		 push	 85			; 00000055H
  0014a	e8 00 00 00 00	 call	 ?SetVertexShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SetVertexShaderConstant

; 179  : 
; 180  : 	if (ulRenderBitVector & Forest_RenderToShadow)

  0014f	8b 45 08	 mov	 eax, DWORD PTR _ulRenderBitVector$[ebp]
  00152	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00158	83 e0 20	 and	 eax, 32			; 00000020H
  0015b	89 45 e4	 mov	 DWORD PTR tv2417[ebp], eax
  0015e	6a 02		 push	 2
  00160	74 25		 je	 SHORT $LN31@Render

; 181  : 	{
; 182  : 		//STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP,	D3DTOP_DISABLE);
; 183  : 		STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAARG1,	D3DTA_TEXTURE);

  00162	6a 05		 push	 5
  00164	6a 00		 push	 0
  00166	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 184  : 		STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAARG2,	D3DTA_DIFFUSE);

  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00171	6a 00		 push	 0
  00173	6a 06		 push	 6
  00175	6a 00		 push	 0
  00177	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 185  : 		STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAOP,	D3DTOP_MODULATE);

  0017c	6a 04		 push	 4
  0017e	6a 04		 push	 4
  00180	6a 00		 push	 0

; 186  : 	}

  00182	e9 ec 00 00 00	 jmp	 $LN587@Render
$LN31@Render:

; 187  : 	else
; 188  : 	{
; 189  : 		STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG1,	D3DTA_TEXTURE);

  00187	6a 02		 push	 2
  00189	6a 00		 push	 0
  0018b	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 190  : 		STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG2,	D3DTA_DIFFUSE);

  00190	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00196	6a 00		 push	 0
  00198	6a 03		 push	 3
  0019a	6a 00		 push	 0
  0019c	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 191  : 		STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP,	D3DTOP_MODULATE);

  001a1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001a7	6a 04		 push	 4
  001a9	6a 01		 push	 1
  001ab	6a 00		 push	 0
  001ad	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 192  : 		STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAARG1,	D3DTA_TEXTURE);

  001b2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001b8	6a 02		 push	 2
  001ba	6a 05		 push	 5
  001bc	6a 00		 push	 0
  001be	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 193  : 		STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAARG2,	D3DTA_DIFFUSE);

  001c3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001c9	6a 00		 push	 0
  001cb	6a 06		 push	 6
  001cd	6a 00		 push	 0
  001cf	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 194  : 		STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAOP,	D3DTOP_MODULATE);

  001d4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001da	6a 04		 push	 4
  001dc	6a 04		 push	 4
  001de	6a 00		 push	 0
  001e0	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 195  : 		STATEMANAGER.SetTextureStageState(0, D3DTSS_MINFILTER,	D3DTEXF_LINEAR);

  001e5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001eb	6a 02		 push	 2
  001ed	6a 11		 push	 17			; 00000011H
  001ef	6a 00		 push	 0
  001f1	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 196  : 		STATEMANAGER.SetTextureStageState(0, D3DTSS_MAGFILTER,	D3DTEXF_LINEAR);

  001f6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001fc	6a 02		 push	 2
  001fe	6a 10		 push	 16			; 00000010H
  00200	6a 00		 push	 0
  00202	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 197  : 		STATEMANAGER.SetTextureStageState(0, D3DTSS_MIPFILTER,	D3DTEXF_LINEAR);

  00207	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0020d	6a 02		 push	 2
  0020f	6a 12		 push	 18			; 00000012H
  00211	6a 00		 push	 0
  00213	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 198  : 
; 199  : 		STATEMANAGER.SetTextureStageState(1, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  00218	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0021e	6a 02		 push	 2
  00220	6a 02		 push	 2
  00222	6a 01		 push	 1
  00224	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 200  : 		STATEMANAGER.SetTextureStageState(1, D3DTSS_COLORARG2, D3DTA_CURRENT);

  00229	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0022f	6a 01		 push	 1
  00231	6a 03		 push	 3
  00233	6a 01		 push	 1
  00235	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 201  : 		STATEMANAGER.SetTextureStageState(1, D3DTSS_COLOROP, D3DTOP_MODULATE);

  0023a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00240	6a 04		 push	 4
  00242	6a 01		 push	 1
  00244	6a 01		 push	 1
  00246	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 202  : 		STATEMANAGER.SetTextureStageState(1, D3DTSS_ALPHAOP, D3DTOP_DISABLE);

  0024b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00251	6a 01		 push	 1
  00253	6a 04		 push	 4
  00255	6a 01		 push	 1
  00257	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 203  : 		STATEMANAGER.SetTextureStageState(1, D3DTSS_ADDRESSU, D3DTADDRESS_WRAP);

  0025c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00262	6a 01		 push	 1
  00264	6a 0d		 push	 13			; 0000000dH
  00266	6a 01		 push	 1
  00268	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 204  : 		STATEMANAGER.SetTextureStageState(1, D3DTSS_ADDRESSV, D3DTADDRESS_WRAP);

  0026d	6a 01		 push	 1
  0026f	6a 0e		 push	 14			; 0000000eH
  00271	6a 01		 push	 1
$LN587@Render:

; 205  : 	}
; 206  : 
; 207  : 	STATEMANAGER.SaveRenderState(D3DRS_ALPHATESTENABLE, TRUE);

  00273	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00279	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState
  0027e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00284	6a 01		 push	 1
  00286	6a 0f		 push	 15			; 0000000fH
  00288	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 208  : 	STATEMANAGER.SaveRenderState(D3DRS_ALPHAFUNC, D3DCMP_GREATER);

  0028d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00293	6a 05		 push	 5
  00295	6a 19		 push	 25			; 00000019H
  00297	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 209  : 	STATEMANAGER.SaveRenderState(D3DRS_CULLMODE, D3DCULL_CW);

  0029c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002a2	6a 02		 push	 2
  002a4	6a 16		 push	 22			; 00000016H
  002a6	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 210  : 
; 211  : 	// set up fog if it is enabled
; 212  : 	if (STATEMANAGER.GetRenderState(D3DRS_FOGENABLE))

  002ab	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002b1	6a 1c		 push	 28			; 0000001cH
  002b3	e8 00 00 00 00	 call	 ?GetRenderState@CStateManager@@QAEKW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::GetRenderState

; 213  : 	{
; 214  : 		#ifdef WRAPPER_USE_GPU_WIND
; 215  : 			STATEMANAGER.SetRenderState(D3DRS_FOGVERTEXMODE, D3DFOG_NONE); // GPU needs to work on all cards
; 216  : 		#endif
; 217  : 	}
; 218  : 
; 219  : 	// choose fixed function pipeline or custom shader for fronds and branches
; 220  : 	STATEMANAGER.SetVertexShader(m_dwBranchVertexShader);

  002b8	ff 73 78	 push	 DWORD PTR [ebx+120]
  002bb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002c1	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader

; 221  : 
; 222  : 	// render branches
; 223  : 	if (ulRenderBitVector & Forest_RenderBranches)

  002c6	f6 45 08 01	 test	 BYTE PTR _ulRenderBitVector$[ebp], 1
  002ca	0f 84 96 00 00
	00		 je	 $LN8@Render
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1132 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  002d0	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  002d3	8b 30		 mov	 esi, DWORD PTR [eax]
  002d5	3b f0		 cmp	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeForestDirectX8.cpp

; 227  : 		while (itor != m_pMainTreeMap.end())

  002d7	0f 84 89 00 00
	00		 je	 $LN8@Render
  002dd	0f 1f 00	 npad	 3
$LL7@Render:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 50   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  002e0	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 287  :         _Tree_iterator _Tmp = *this;

  002e3	8b c6		 mov	 eax, esi

; 50   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  002e5	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  002e9	74 1d		 je	 SHORT $LN314@Render

; 51   :             _Nodeptr _Pnode;
; 52   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  002eb	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  002ee	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  002f2	75 10		 jne	 SHORT $LN537@Render
$LL312@Render:
  002f4	3b 71 08	 cmp	 esi, DWORD PTR [ecx+8]
  002f7	75 0b		 jne	 SHORT $LN537@Render

; 53   :                 _Ptr = _Pnode; // ==> parent while right subtree

  002f9	8b f1		 mov	 esi, ecx
  002fb	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  002fe	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00302	74 f0		 je	 SHORT $LL312@Render
$LN537@Render:

; 54   :             }
; 55   : 
; 56   :             _Ptr = _Pnode; // ==> parent (head if end())

  00304	8b f1		 mov	 esi, ecx

; 57   :         } else {

  00306	eb 16		 jmp	 SHORT $LN320@Render
$LN314@Render:

; 58   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree

  00308	8b f1		 mov	 esi, ecx

; 466  :         while (!_Pnode->_Left->_Isnil) {

  0030a	8b 16		 mov	 edx, DWORD PTR [esi]
  0030c	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00310	75 0c		 jne	 SHORT $LN320@Render
$LL319@Render:
  00312	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 467  :             _Pnode = _Pnode->_Left;

  00314	8b f2		 mov	 esi, edx
  00316	8b d1		 mov	 edx, ecx
  00318	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0031c	74 f4		 je	 SHORT $LL319@Render
$LN320@Render:
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeForestDirectX8.cpp

; 229  : 			CSpeedTreeWrapper * pMainTree = (itor++)->second;

  0031e	8b 78 14	 mov	 edi, DWORD PTR [eax+20]

; 230  : 			CSpeedTreeWrapper ** ppInstances = pMainTree->GetInstances(uiCount);

  00321	8d 45 fc	 lea	 eax, DWORD PTR _uiCount$[ebp]
  00324	50		 push	 eax
  00325	8b cf		 mov	 ecx, edi
  00327	e8 00 00 00 00	 call	 ?GetInstances@CSpeedTreeWrapper@@QAEPAPAV1@AAI@Z ; CSpeedTreeWrapper::GetInstances

; 231  : 
; 232  : 			pMainTree->SetupBranchForTreeType();

  0032c	8b cf		 mov	 ecx, edi
  0032e	8b d8		 mov	 ebx, eax
  00330	e8 00 00 00 00	 call	 ?SetupBranchForTreeType@CSpeedTreeWrapper@@QBEXXZ ; CSpeedTreeWrapper::SetupBranchForTreeType

; 233  : 
; 234  : 			for (UINT i = 0; i < uiCount; ++i)

  00335	33 ff		 xor	 edi, edi
  00337	39 7d fc	 cmp	 DWORD PTR _uiCount$[ebp], edi
  0033a	76 1e		 jbe	 SHORT $LN10@Render
  0033c	0f 1f 40 00	 npad	 4
$LL11@Render:

; 235  : 				if (ppInstances[i]->isShow())

  00340	8b 0c bb	 mov	 ecx, DWORD PTR [ebx+edi*4]
  00343	e8 00 00 00 00	 call	 ?isShow@CGraphicObjectInstance@@QAE_NXZ ; CGraphicObjectInstance::isShow
  00348	84 c0		 test	 al, al
  0034a	74 08		 je	 SHORT $LN9@Render

; 236  : 					ppInstances[i]->RenderBranches();

  0034c	8b 0c bb	 mov	 ecx, DWORD PTR [ebx+edi*4]
  0034f	e8 00 00 00 00	 call	 ?RenderBranches@CSpeedTreeWrapper@@QBEXXZ ; CSpeedTreeWrapper::RenderBranches
$LN9@Render:

; 233  : 
; 234  : 			for (UINT i = 0; i < uiCount; ++i)

  00354	47		 inc	 edi
  00355	3b 7d fc	 cmp	 edi, DWORD PTR _uiCount$[ebp]
  00358	72 e6		 jb	 SHORT $LL11@Render
$LN10@Render:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 232  :         return this->_Ptr == _Right._Ptr;

  0035a	8b 5d f8	 mov	 ebx, DWORD PTR _this$1$[ebp]
  0035d	3b 73 04	 cmp	 esi, DWORD PTR [ebx+4]
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeForestDirectX8.cpp

; 227  : 		while (itor != m_pMainTreeMap.end())

  00360	0f 85 7a ff ff
	ff		 jne	 $LL7@Render
$LN8@Render:

; 237  : 		}
; 238  : 	}
; 239  : 
; 240  : 	// set render states
; 241  : 	STATEMANAGER.SetRenderState(D3DRS_CULLMODE, D3DCULL_NONE);

  00366	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0036c	6a 01		 push	 1
  0036e	6a 16		 push	 22			; 00000016H
  00370	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 242  : 
; 243  : 	// render fronds
; 244  : 	if (ulRenderBitVector & Forest_RenderFronds)

  00375	8b 4d 08	 mov	 ecx, DWORD PTR _ulRenderBitVector$[ebp]
  00378	f6 c1 04	 test	 cl, 4
  0037b	0f 84 98 00 00
	00		 je	 $LN13@Render
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1132 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00381	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00384	8b 30		 mov	 esi, DWORD PTR [eax]
  00386	3b f0		 cmp	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeForestDirectX8.cpp

; 248  : 		while (itor != m_pMainTreeMap.end())

  00388	0f 84 8b 00 00
	00		 je	 $LN13@Render
  0038e	66 90		 npad	 2
$LL12@Render:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 50   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  00390	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 287  :         _Tree_iterator _Tmp = *this;

  00393	8b c6		 mov	 eax, esi

; 50   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  00395	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00399	74 1d		 je	 SHORT $LN264@Render

; 51   :             _Nodeptr _Pnode;
; 52   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  0039b	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0039e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  003a2	75 10		 jne	 SHORT $LN538@Render
$LL262@Render:
  003a4	3b 71 08	 cmp	 esi, DWORD PTR [ecx+8]
  003a7	75 0b		 jne	 SHORT $LN538@Render

; 53   :                 _Ptr = _Pnode; // ==> parent while right subtree

  003a9	8b f1		 mov	 esi, ecx
  003ab	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  003ae	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  003b2	74 f0		 je	 SHORT $LL262@Render
$LN538@Render:

; 54   :             }
; 55   : 
; 56   :             _Ptr = _Pnode; // ==> parent (head if end())

  003b4	8b f1		 mov	 esi, ecx

; 57   :         } else {

  003b6	eb 16		 jmp	 SHORT $LN270@Render
$LN264@Render:

; 58   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree

  003b8	8b f1		 mov	 esi, ecx

; 466  :         while (!_Pnode->_Left->_Isnil) {

  003ba	8b 16		 mov	 edx, DWORD PTR [esi]
  003bc	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  003c0	75 0c		 jne	 SHORT $LN270@Render
$LL269@Render:
  003c2	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 467  :             _Pnode = _Pnode->_Left;

  003c4	8b f2		 mov	 esi, edx
  003c6	8b d1		 mov	 edx, ecx
  003c8	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  003cc	74 f4		 je	 SHORT $LL269@Render
$LN270@Render:
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeForestDirectX8.cpp

; 250  : 			CSpeedTreeWrapper * pMainTree = (itor++)->second;

  003ce	8b 78 14	 mov	 edi, DWORD PTR [eax+20]

; 251  : 			CSpeedTreeWrapper ** ppInstances = pMainTree->GetInstances(uiCount);

  003d1	8d 45 fc	 lea	 eax, DWORD PTR _uiCount$[ebp]
  003d4	50		 push	 eax
  003d5	8b cf		 mov	 ecx, edi
  003d7	e8 00 00 00 00	 call	 ?GetInstances@CSpeedTreeWrapper@@QAEPAPAV1@AAI@Z ; CSpeedTreeWrapper::GetInstances

; 252  : 
; 253  : 			pMainTree->SetupFrondForTreeType();

  003dc	8b cf		 mov	 ecx, edi
  003de	8b d8		 mov	 ebx, eax
  003e0	e8 00 00 00 00	 call	 ?SetupFrondForTreeType@CSpeedTreeWrapper@@QBEXXZ ; CSpeedTreeWrapper::SetupFrondForTreeType

; 254  : 
; 255  : 			for (UINT i = 0; i < uiCount; ++i)

  003e5	33 ff		 xor	 edi, edi
  003e7	39 7d fc	 cmp	 DWORD PTR _uiCount$[ebp], edi
  003ea	76 1e		 jbe	 SHORT $LN15@Render
  003ec	0f 1f 40 00	 npad	 4
$LL16@Render:

; 256  : 				if (ppInstances[i]->isShow())

  003f0	8b 0c bb	 mov	 ecx, DWORD PTR [ebx+edi*4]
  003f3	e8 00 00 00 00	 call	 ?isShow@CGraphicObjectInstance@@QAE_NXZ ; CGraphicObjectInstance::isShow
  003f8	84 c0		 test	 al, al
  003fa	74 08		 je	 SHORT $LN14@Render

; 257  : 					ppInstances[i]->RenderFronds();

  003fc	8b 0c bb	 mov	 ecx, DWORD PTR [ebx+edi*4]
  003ff	e8 00 00 00 00	 call	 ?RenderFronds@CSpeedTreeWrapper@@QBEXXZ ; CSpeedTreeWrapper::RenderFronds
$LN14@Render:

; 254  : 
; 255  : 			for (UINT i = 0; i < uiCount; ++i)

  00404	47		 inc	 edi
  00405	3b 7d fc	 cmp	 edi, DWORD PTR _uiCount$[ebp]
  00408	72 e6		 jb	 SHORT $LL16@Render
$LN15@Render:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 232  :         return this->_Ptr == _Right._Ptr;

  0040a	8b 5d f8	 mov	 ebx, DWORD PTR _this$1$[ebp]
  0040d	3b 73 04	 cmp	 esi, DWORD PTR [ebx+4]
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeForestDirectX8.cpp

; 248  : 		while (itor != m_pMainTreeMap.end())

  00410	0f 85 7a ff ff
	ff		 jne	 $LL12@Render
  00416	8b 4d 08	 mov	 ecx, DWORD PTR _ulRenderBitVector$[ebp]
$LN13@Render:

; 258  : 		}
; 259  : 	}
; 260  : 
; 261  : 	// render leaves
; 262  : 	if (ulRenderBitVector & Forest_RenderLeaves)

  00419	f6 c1 02	 test	 cl, 2
  0041c	0f 84 f9 00 00
	00		 je	 $LN43@Render

; 263  : 	{
; 264  : 		STATEMANAGER.SetVertexShader(m_dwLeafVertexShader);

  00422	ff 73 7c	 push	 DWORD PTR [ebx+124]
  00425	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0042b	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader

; 265  : 
; 266  : 		if (STATEMANAGER.GetRenderState(D3DRS_FOGENABLE))

  00430	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00436	6a 1c		 push	 28			; 0000001cH
  00438	e8 00 00 00 00	 call	 ?GetRenderState@CStateManager@@QAEKW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::GetRenderState
  0043d	83 7d f4 00	 cmp	 DWORD PTR tv2431[ebp], 0

; 267  : 		{
; 268  : 			#if defined WRAPPER_USE_GPU_WIND || defined WRAPPER_USE_GPU_LEAF_PLACEMENT
; 269  : 				STATEMANAGER.SetRenderState(D3DRS_FOGVERTEXMODE, D3DFOG_NONE);
; 270  : 			#endif
; 271  : 		}
; 272  : 
; 273  : 		if (ulRenderBitVector & Forest_RenderToShadow || ulRenderBitVector & Forest_RenderToMiniMap)

  00441	74 1e		 je	 SHORT $LN40@Render

; 274  : 		{
; 275  : 			STATEMANAGER.SetRenderState(D3DRS_ALPHAFUNC, D3DCMP_NOTEQUAL);

  00443	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00449	6a 06		 push	 6
  0044b	6a 19		 push	 25			; 00000019H
  0044d	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 276  : 			STATEMANAGER.SaveRenderState(D3DRS_ALPHAREF, 0x00000000);

  00452	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00458	6a 00		 push	 0
  0045a	6a 18		 push	 24			; 00000018H
  0045c	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState
$LN40@Render:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1132 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00461	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00464	8b 30		 mov	 esi, DWORD PTR [eax]
  00466	3b f0		 cmp	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeForestDirectX8.cpp

; 281  : 		while (itor != m_pMainTreeMap.end())

  00468	0f 84 88 00 00
	00		 je	 $LN23@Render
  0046e	66 90		 npad	 2
$LL17@Render:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 50   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  00470	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 287  :         _Tree_iterator _Tmp = *this;

  00473	8b c6		 mov	 eax, esi

; 50   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  00475	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00479	74 1d		 je	 SHORT $LN203@Render

; 51   :             _Nodeptr _Pnode;
; 52   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  0047b	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0047e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00482	75 10		 jne	 SHORT $LN539@Render
$LL201@Render:
  00484	3b 71 08	 cmp	 esi, DWORD PTR [ecx+8]
  00487	75 0b		 jne	 SHORT $LN539@Render

; 53   :                 _Ptr = _Pnode; // ==> parent while right subtree

  00489	8b f1		 mov	 esi, ecx
  0048b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0048e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00492	74 f0		 je	 SHORT $LL201@Render
$LN539@Render:

; 54   :             }
; 55   : 
; 56   :             _Ptr = _Pnode; // ==> parent (head if end())

  00494	8b f1		 mov	 esi, ecx

; 57   :         } else {

  00496	eb 16		 jmp	 SHORT $LN209@Render
$LN203@Render:

; 58   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree

  00498	8b f1		 mov	 esi, ecx

; 466  :         while (!_Pnode->_Left->_Isnil) {

  0049a	8b 16		 mov	 edx, DWORD PTR [esi]
  0049c	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  004a0	75 0c		 jne	 SHORT $LN209@Render
$LL208@Render:
  004a2	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 467  :             _Pnode = _Pnode->_Left;

  004a4	8b f2		 mov	 esi, edx
  004a6	8b d1		 mov	 edx, ecx
  004a8	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  004ac	74 f4		 je	 SHORT $LL208@Render
$LN209@Render:
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeForestDirectX8.cpp

; 283  : 			CSpeedTreeWrapper * pMainTree = (itor++)->second;

  004ae	8b 78 14	 mov	 edi, DWORD PTR [eax+20]

; 284  : 			CSpeedTreeWrapper ** ppInstances = pMainTree->GetInstances(uiCount);

  004b1	8d 45 fc	 lea	 eax, DWORD PTR _uiCount$[ebp]
  004b4	50		 push	 eax
  004b5	8b cf		 mov	 ecx, edi
  004b7	e8 00 00 00 00	 call	 ?GetInstances@CSpeedTreeWrapper@@QAEPAPAV1@AAI@Z ; CSpeedTreeWrapper::GetInstances

; 285  : 
; 286  : 			pMainTree->SetupLeafForTreeType();

  004bc	8b cf		 mov	 ecx, edi
  004be	8b d8		 mov	 ebx, eax
  004c0	e8 00 00 00 00	 call	 ?SetupLeafForTreeType@CSpeedTreeWrapper@@QBEXXZ ; CSpeedTreeWrapper::SetupLeafForTreeType

; 287  : 
; 288  : 			for (UINT i = 0; i < uiCount; ++i)

  004c5	33 ff		 xor	 edi, edi
  004c7	39 7d fc	 cmp	 DWORD PTR _uiCount$[ebp], edi
  004ca	76 1e		 jbe	 SHORT $LN20@Render
  004cc	0f 1f 40 00	 npad	 4
$LL21@Render:

; 289  : 				if (ppInstances[i]->isShow())

  004d0	8b 0c bb	 mov	 ecx, DWORD PTR [ebx+edi*4]
  004d3	e8 00 00 00 00	 call	 ?isShow@CGraphicObjectInstance@@QAE_NXZ ; CGraphicObjectInstance::isShow
  004d8	84 c0		 test	 al, al
  004da	74 08		 je	 SHORT $LN19@Render

; 290  : 					ppInstances[i]->RenderLeaves();

  004dc	8b 0c bb	 mov	 ecx, DWORD PTR [ebx+edi*4]
  004df	e8 00 00 00 00	 call	 ?RenderLeaves@CSpeedTreeWrapper@@QBEXXZ ; CSpeedTreeWrapper::RenderLeaves
$LN19@Render:

; 287  : 
; 288  : 			for (UINT i = 0; i < uiCount; ++i)

  004e4	47		 inc	 edi
  004e5	3b 7d fc	 cmp	 edi, DWORD PTR _uiCount$[ebp]
  004e8	72 e6		 jb	 SHORT $LL21@Render
$LN20@Render:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 232  :         return this->_Ptr == _Right._Ptr;

  004ea	8b 5d f8	 mov	 ebx, DWORD PTR _this$1$[ebp]
  004ed	3b 73 04	 cmp	 esi, DWORD PTR [ebx+4]
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeForestDirectX8.cpp

; 281  : 		while (itor != m_pMainTreeMap.end())

  004f0	0f 85 7a ff ff
	ff		 jne	 $LL17@Render
$LN23@Render:
  004f6	83 7d f4 00	 cmp	 DWORD PTR tv2431[ebp], 0

; 291  : 		}
; 292  : 
; 293  : 		while (itor != m_pMainTreeMap.end())
; 294  : 			(itor++)->second->EndLeafForTreeType();
; 295  : 
; 296  : 		if (ulRenderBitVector & Forest_RenderToShadow || ulRenderBitVector & Forest_RenderToMiniMap)

  004fa	74 1c		 je	 SHORT $LN541@Render

; 297  : 		{
; 298  : 			STATEMANAGER.SetRenderState(D3DRS_ALPHAFUNC, D3DCMP_GREATER);

  004fc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00502	6a 05		 push	 5
  00504	6a 19		 push	 25			; 00000019H
  00506	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 299  : 			STATEMANAGER.RestoreRenderState(D3DRS_ALPHAREF);

  0050b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00511	6a 18		 push	 24			; 00000018H
  00513	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState
$LN541@Render:

; 300  : 		}
; 301  : 	}
; 302  : 
; 303  : 	// render billboards
; 304  : 	#ifndef WRAPPER_NO_BILLBOARD_MODE
; 305  : 		if (ulRenderBitVector & Forest_RenderBillboards)

  00518	8b 4d 08	 mov	 ecx, DWORD PTR _ulRenderBitVector$[ebp]
$LN43@Render:
  0051b	f6 c1 08	 test	 cl, 8
  0051e	0f 84 c2 00 00
	00		 je	 $LN25@Render

; 306  : 		{
; 307  : 			STATEMANAGER.SetRenderState(D3DRS_LIGHTING, FALSE);

  00524	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0052a	6a 00		 push	 0
  0052c	68 89 00 00 00	 push	 137			; 00000089H
  00531	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 308  : 			STATEMANAGER.SetRenderState(D3DRS_COLORVERTEX, FALSE);

  00536	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0053c	6a 00		 push	 0
  0053e	68 8d 00 00 00	 push	 141			; 0000008dH
  00543	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1132 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00548	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0054b	8b 30		 mov	 esi, DWORD PTR [eax]
  0054d	3b f0		 cmp	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeForestDirectX8.cpp

; 312  : 			while (itor != m_pMainTreeMap.end())

  0054f	0f 84 91 00 00
	00		 je	 $LN25@Render
$LL24@Render:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 50   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  00555	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 287  :         _Tree_iterator _Tmp = *this;

  00558	8b c6		 mov	 eax, esi

; 50   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  0055a	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0055e	74 24		 je	 SHORT $LN147@Render

; 51   :             _Nodeptr _Pnode;
; 52   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  00560	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00563	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00567	75 17		 jne	 SHORT $LN540@Render
  00569	0f 1f 80 00 00
	00 00		 npad	 7
$LL145@Render:
  00570	3b 71 08	 cmp	 esi, DWORD PTR [ecx+8]
  00573	75 0b		 jne	 SHORT $LN540@Render

; 53   :                 _Ptr = _Pnode; // ==> parent while right subtree

  00575	8b f1		 mov	 esi, ecx
  00577	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0057a	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0057e	74 f0		 je	 SHORT $LL145@Render
$LN540@Render:

; 54   :             }
; 55   : 
; 56   :             _Ptr = _Pnode; // ==> parent (head if end())

  00580	8b f1		 mov	 esi, ecx

; 57   :         } else {

  00582	eb 18		 jmp	 SHORT $LN153@Render
$LN147@Render:

; 58   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree

  00584	8b f1		 mov	 esi, ecx

; 466  :         while (!_Pnode->_Left->_Isnil) {

  00586	8b 16		 mov	 edx, DWORD PTR [esi]
  00588	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  0058c	75 0e		 jne	 SHORT $LN153@Render
  0058e	66 90		 npad	 2
$LL152@Render:
  00590	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 467  :             _Pnode = _Pnode->_Left;

  00592	8b f2		 mov	 esi, edx
  00594	8b d1		 mov	 edx, ecx
  00596	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0059a	74 f4		 je	 SHORT $LL152@Render
$LN153@Render:
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeForestDirectX8.cpp

; 314  : 				CSpeedTreeWrapper * pMainTree = (itor++)->second;

  0059c	8b 78 14	 mov	 edi, DWORD PTR [eax+20]

; 315  : 				CSpeedTreeWrapper ** ppInstances = pMainTree->GetInstances(uiCount);

  0059f	8d 45 fc	 lea	 eax, DWORD PTR _uiCount$[ebp]
  005a2	50		 push	 eax
  005a3	8b cf		 mov	 ecx, edi
  005a5	e8 00 00 00 00	 call	 ?GetInstances@CSpeedTreeWrapper@@QAEPAPAV1@AAI@Z ; CSpeedTreeWrapper::GetInstances

; 316  : 
; 317  : 				pMainTree->SetupBranchForTreeType();

  005aa	8b cf		 mov	 ecx, edi
  005ac	8b d8		 mov	 ebx, eax
  005ae	e8 00 00 00 00	 call	 ?SetupBranchForTreeType@CSpeedTreeWrapper@@QBEXXZ ; CSpeedTreeWrapper::SetupBranchForTreeType

; 318  : 
; 319  : 				for (UINT i = 0; i < uiCount; ++i)

  005b3	33 ff		 xor	 edi, edi
  005b5	39 7d fc	 cmp	 DWORD PTR _uiCount$[ebp], edi
  005b8	76 20		 jbe	 SHORT $LN27@Render
  005ba	66 0f 1f 44 00
	00		 npad	 6
$LL28@Render:

; 320  : 					if (ppInstances[i]->isShow())

  005c0	8b 0c bb	 mov	 ecx, DWORD PTR [ebx+edi*4]
  005c3	e8 00 00 00 00	 call	 ?isShow@CGraphicObjectInstance@@QAE_NXZ ; CGraphicObjectInstance::isShow
  005c8	84 c0		 test	 al, al
  005ca	74 08		 je	 SHORT $LN26@Render

; 321  : 						ppInstances[i]->RenderBillboards();

  005cc	8b 0c bb	 mov	 ecx, DWORD PTR [ebx+edi*4]
  005cf	e8 00 00 00 00	 call	 ?RenderBillboards@CSpeedTreeWrapper@@QBEXXZ ; CSpeedTreeWrapper::RenderBillboards
$LN26@Render:

; 318  : 
; 319  : 				for (UINT i = 0; i < uiCount; ++i)

  005d4	47		 inc	 edi
  005d5	3b 7d fc	 cmp	 edi, DWORD PTR _uiCount$[ebp]
  005d8	72 e6		 jb	 SHORT $LL28@Render
$LN27@Render:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 232  :         return this->_Ptr == _Right._Ptr;

  005da	8b 45 f8	 mov	 eax, DWORD PTR _this$1$[ebp]
  005dd	3b 70 04	 cmp	 esi, DWORD PTR [eax+4]
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeForestDirectX8.cpp

; 312  : 			while (itor != m_pMainTreeMap.end())

  005e0	0f 85 6f ff ff
	ff		 jne	 $LL24@Render
$LN25@Render:

; 322  : 			}
; 323  : 		}
; 324  : 	#endif
; 325  : 
; 326  : 	STATEMANAGER.SetRenderState(D3DRS_LIGHTING, dwLightState);

  005e6	ff 75 f0	 push	 DWORD PTR _dwLightState$1$[ebp]
  005e9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  005ef	68 89 00 00 00	 push	 137			; 00000089H
  005f4	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 327  : 	STATEMANAGER.SetRenderState(D3DRS_COLORVERTEX, dwColorVertexState);

  005f9	ff 75 ec	 push	 DWORD PTR _dwColorVertexState$1$[ebp]
  005fc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00602	68 8d 00 00 00	 push	 141			; 0000008dH
  00607	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 328  : 	STATEMANAGER.SetRenderState(D3DRS_FOGVERTEXMODE, dwFogVertexMode);

  0060c	ff 75 e8	 push	 DWORD PTR _dwFogVertexMode$1$[ebp]
  0060f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00615	68 8c 00 00 00	 push	 140			; 0000008cH
  0061a	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 329  : 
; 330  : 	if (!(ulRenderBitVector & Forest_RenderToShadow))

  0061f	83 7d e4 00	 cmp	 DWORD PTR tv2417[ebp], 0
  00623	5f		 pop	 edi
  00624	5e		 pop	 esi
  00625	75 22		 jne	 SHORT $LN47@Render

; 331  : 	{
; 332  : 		STATEMANAGER.SetTextureStageState(1, D3DTSS_COLOROP, D3DTOP_DISABLE);

  00627	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0062d	6a 01		 push	 1
  0062f	6a 01		 push	 1
  00631	6a 01		 push	 1
  00633	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 333  : 		STATEMANAGER.SetTextureStageState(1, D3DTSS_ALPHAOP, D3DTOP_DISABLE);

  00638	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0063e	6a 01		 push	 1
  00640	6a 04		 push	 4
  00642	6a 01		 push	 1
  00644	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState
$LN47@Render:

; 334  : 	}
; 335  : 
; 336  : 	STATEMANAGER.RestoreRenderState(D3DRS_ALPHATESTENABLE);

  00649	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0064f	6a 0f		 push	 15			; 0000000fH
  00651	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 337  : 	STATEMANAGER.RestoreRenderState(D3DRS_ALPHAFUNC);

  00656	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0065c	6a 19		 push	 25			; 00000019H
  0065e	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 338  : 	STATEMANAGER.RestoreRenderState(D3DRS_CULLMODE);

  00663	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00669	6a 16		 push	 22			; 00000016H
  0066b	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState
$LN1@Render:
  00670	5b		 pop	 ebx

; 339  : }

  00671	8b e5		 mov	 esp, ebp
  00673	5d		 pop	 ebp
  00674	c2 04 00	 ret	 4
?Render@CSpeedTreeForestDirectX8@@UAEXK@Z ENDP		; CSpeedTreeForestDirectX8::Render
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeForestDirectX8.cpp
;	COMDAT ?UpdateCompundMatrix@CSpeedTreeForestDirectX8@@QAEXABUD3DXVECTOR3@@ABUD3DXMATRIX@@1@Z
_TEXT	SEGMENT
_matBlendShader$ = -80					; size = 64
_afDirection$ = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_c_rEyeVec$ = 8						; size = 4
_c_rmatView$ = 12					; size = 4
_c_rmatProj$ = 16					; size = 4
?UpdateCompundMatrix@CSpeedTreeForestDirectX8@@QAEXABUD3DXVECTOR3@@ABUD3DXMATRIX@@1@Z PROC ; CSpeedTreeForestDirectX8::UpdateCompundMatrix, COMDAT
; _this$ = ecx

; 119  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 10	 mov	 eax, DWORD PTR _c_rmatProj$[ebp]
  00013	8b 4d 0c	 mov	 ecx, DWORD PTR _c_rmatView$[ebp]
  00016	56		 push	 esi
  00017	8b 75 08	 mov	 esi, DWORD PTR _c_rEyeVec$[ebp]

; 120  :     // setup composite matrix for shader
; 121  : 	D3DXMATRIX matBlend;
; 122  : 	D3DXMatrixIdentity(&matBlend);
; 123  : 
; 124  : 	D3DXMATRIX matBlendShader;
; 125  : 	D3DXMatrixMultiply(&matBlendShader, &c_rmatView, &c_rmatProj);

  0001a	50		 push	 eax
  0001b	51		 push	 ecx
  0001c	8d 45 b0	 lea	 eax, DWORD PTR _matBlendShader$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 _D3DXMatrixMultiply@12

; 126  : 
; 127  : 	float afDirection[3];
; 128  : 	afDirection[0] = matBlendShader.m[0][2];

  00025	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _matBlendShader$[ebp+8]

; 129  : 	afDirection[1] = matBlendShader.m[1][2];
; 130  : 	afDirection[2] = matBlendShader.m[2][2];
; 131  : 	CSpeedTreeRT::SetCamera(c_rEyeVec, afDirection);

  0002a	8d 45 f0	 lea	 eax, DWORD PTR _afDirection$[ebp]
  0002d	f3 0f 11 45 f0	 movss	 DWORD PTR _afDirection$[ebp], xmm0
  00032	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _matBlendShader$[ebp+24]
  00037	f3 0f 11 45 f4	 movss	 DWORD PTR _afDirection$[ebp+4], xmm0
  0003c	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _matBlendShader$[ebp+40]
  00041	50		 push	 eax
  00042	56		 push	 esi
  00043	f3 0f 11 45 f8	 movss	 DWORD PTR _afDirection$[ebp+8], xmm0
  00048	e8 00 00 00 00	 call	 ?SetCamera@CSpeedTreeRT@@SAXPBM0@Z ; CSpeedTreeRT::SetCamera
  0004d	83 c4 08	 add	 esp, 8

; 132  : 
; 133  : 	D3DXMatrixTranspose(&matBlendShader, &matBlendShader);

  00050	8d 45 b0	 lea	 eax, DWORD PTR _matBlendShader$[ebp]
  00053	50		 push	 eax
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 _D3DXMatrixTranspose@8

; 134  : 	STATEMANAGER.SetVertexShaderConstant(c_nVertexShader_CompoundMatrix, &matBlendShader, 4);

  0005a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00060	8d 45 b0	 lea	 eax, DWORD PTR _matBlendShader$[ebp]
  00063	6a 04		 push	 4
  00065	50		 push	 eax
  00066	6a 00		 push	 0
  00068	e8 00 00 00 00	 call	 ?SetVertexShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SetVertexShaderConstant

; 135  : }

  0006d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00070	33 cd		 xor	 ecx, ebp
  00072	5e		 pop	 esi
  00073	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 0c 00	 ret	 12			; 0000000cH
?UpdateCompundMatrix@CSpeedTreeForestDirectX8@@QAEXABUD3DXVECTOR3@@ABUD3DXMATRIX@@1@Z ENDP ; CSpeedTreeForestDirectX8::UpdateCompundMatrix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeForestDirectX8.cpp
;	COMDAT ?UploadWindMatrix@CSpeedTreeForestDirectX8@@UBEXIPBM@Z
_TEXT	SEGMENT
_uiLocation$ = 8					; size = 4
_pMatrix$ = 12						; size = 4
?UploadWindMatrix@CSpeedTreeForestDirectX8@@UBEXIPBM@Z PROC ; CSpeedTreeForestDirectX8::UploadWindMatrix, COMDAT
; _this$ = ecx

; 114  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 115  : 	STATEMANAGER.SetVertexShaderConstant(uiLocation, pMatrix, 4);

  00003	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00009	6a 04		 push	 4
  0000b	ff 75 0c	 push	 DWORD PTR _pMatrix$[ebp]
  0000e	ff 75 08	 push	 DWORD PTR _uiLocation$[ebp]
  00011	e8 00 00 00 00	 call	 ?SetVertexShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SetVertexShaderConstant

; 116  : }

  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
?UploadWindMatrix@CSpeedTreeForestDirectX8@@UBEXIPBM@Z ENDP ; CSpeedTreeForestDirectX8::UploadWindMatrix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeForestDirectX8.cpp
; File C:\Marty 5.5\Src-Client\Client\eterbase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeForestDirectX8.cpp
;	COMDAT ??1CSpeedTreeForestDirectX8@@UAE@XZ
_TEXT	SEGMENT
??1CSpeedTreeForestDirectX8@@UAE@XZ PROC		; CSpeedTreeForestDirectX8::~CSpeedTreeForestDirectX8, COMDAT
; _this$ = ecx

; 57   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 4e 6c	 lea	 ecx, DWORD PTR [esi+108]
  00006	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CSpeedTreeForestDirectX8@@6BCGraphicBase@@@
  0000c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CSpeedTreeForestDirectX8@@6BCSpeedTreeForest@@@
; File C:\Marty 5.5\Src-Client\Client\eterbase\Singleton.h

; 19   : 	{

  00012	c7 46 70 00 00
	00 00		 mov	 DWORD PTR [esi+112], OFFSET ??_7?$CSingleton@VCSpeedTreeForestDirectX8@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00019	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCSpeedTreeForestDirectX8@@@@0PAVCSpeedTreeForestDirectX8@@A, 0 ; CSingleton<CSpeedTreeForestDirectX8>::ms_singleton
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeForestDirectX8.cpp

; 58   : }

  00023	e8 00 00 00 00	 call	 ??1CGraphicBase@@UAE@XZ	; CGraphicBase::~CGraphicBase
  00028	8b ce		 mov	 ecx, esi
  0002a	5e		 pop	 esi
  0002b	e9 00 00 00 00	 jmp	 ??1CSpeedTreeForest@@UAE@XZ ; CSpeedTreeForest::~CSpeedTreeForest
??1CSpeedTreeForestDirectX8@@UAE@XZ ENDP		; CSpeedTreeForestDirectX8::~CSpeedTreeForestDirectX8
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeForestDirectX8.cpp
; File C:\Marty 5.5\Src-Client\Client\eterbase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeForestDirectX8.cpp
;	COMDAT ??0CSpeedTreeForestDirectX8@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CSpeedTreeForestDirectX8@@QAE@XZ PROC		; CSpeedTreeForestDirectX8::CSpeedTreeForestDirectX8, COMDAT
; _this$ = ecx

; 49   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CSpeedTreeForestDirectX8@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  0002a	e8 00 00 00 00	 call	 ??0CSpeedTreeForest@@QAE@XZ ; CSpeedTreeForest::CSpeedTreeForest
  0002f	8d 4f 6c	 lea	 ecx, DWORD PTR [edi+108]
  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00039	e8 00 00 00 00	 call	 ??0CGraphicBase@@QAE@XZ	; CGraphicBase::CGraphicBase
; File C:\Marty 5.5\Src-Client\Client\eterbase\Singleton.h

; 12   : 	{

  0003e	c7 47 70 00 00
	00 00		 mov	 DWORD PTR [edi+112], OFFSET ??_7?$CSingleton@VCSpeedTreeForestDirectX8@@@@6B@

; 13   : 		assert(!ms_singleton);
; 14   : 		int offset = (int) (T*) 1 - (int) (CSingleton <T>*) (T*) 1;
; 15   : 		ms_singleton = (T*) ((int) this + offset);

  00045	8b c7		 mov	 eax, edi
  00047	a3 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCSpeedTreeForestDirectX8@@@@0PAVCSpeedTreeForestDirectX8@@A, eax ; CSingleton<CSpeedTreeForestDirectX8>::ms_singleton
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeForestDirectX8.cpp

; 49   : {

  0004c	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CSpeedTreeForestDirectX8@@6BCSpeedTreeForest@@@
  00052	c7 47 6c 00 00
	00 00		 mov	 DWORD PTR [edi+108], OFFSET ??_7CSpeedTreeForestDirectX8@@6BCGraphicBase@@@
  00059	c7 47 70 00 00
	00 00		 mov	 DWORD PTR [edi+112], OFFSET ??_7CSpeedTreeForestDirectX8@@6B?$CSingleton@VCSpeedTreeForestDirectX8@@@@@

; 48   : CSpeedTreeForestDirectX8::CSpeedTreeForestDirectX8()  : m_dwBranchVertexShader(0), m_dwLeafVertexShader(0)

  00060	c7 47 78 00 00
	00 00		 mov	 DWORD PTR [edi+120], 0
  00067	c7 47 7c 00 00
	00 00		 mov	 DWORD PTR [edi+124], 0

; 50   : }

  0006e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00071	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00078	59		 pop	 ecx
  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CSpeedTreeForestDirectX8@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CSpeedTreeForest@@UAE@XZ ; CSpeedTreeForest::~CSpeedTreeForest
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0CSpeedTreeForestDirectX8@@QAE@XZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CSpeedTreeForestDirectX8@@QAE@XZ
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CSpeedTreeForestDirectX8@@QAE@XZ ENDP		; CSpeedTreeForestDirectX8::CSpeedTreeForestDirectX8
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterbase\Singleton.h
;	COMDAT ??_G?$CSingleton@VCSpeedTreeForestDirectX8@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CSingleton@VCSpeedTreeForestDirectX8@@@@UAEPAXI@Z PROC ; CSingleton<CSpeedTreeForestDirectX8>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1

; 19   : 	{

  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CSingleton@VCSpeedTreeForestDirectX8@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00010	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCSpeedTreeForestDirectX8@@@@0PAVCSpeedTreeForestDirectX8@@A, 0 ; CSingleton<CSpeedTreeForestDirectX8>::ms_singleton
  0001a	74 0b		 je	 SHORT $LN8@scalar
  0001c	6a 04		 push	 4
  0001e	56		 push	 esi
  0001f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00024	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_G?$CSingleton@VCSpeedTreeForestDirectX8@@@@UAEPAXI@Z ENDP ; CSingleton<CSpeedTreeForestDirectX8>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterbase\Singleton.h
;	COMDAT ??1?$CSingleton@VCSpeedTreeForestDirectX8@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CSingleton@VCSpeedTreeForestDirectX8@@@@UAE@XZ PROC ; CSingleton<CSpeedTreeForestDirectX8>::~CSingleton<CSpeedTreeForestDirectX8>, COMDAT
; _this$ = ecx

; 19   : 	{

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CSingleton@VCSpeedTreeForestDirectX8@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00006	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCSpeedTreeForestDirectX8@@@@0PAVCSpeedTreeForestDirectX8@@A, 0 ; CSingleton<CSpeedTreeForestDirectX8>::ms_singleton

; 22   : 	}

  00010	c3		 ret	 0
??1?$CSingleton@VCSpeedTreeForestDirectX8@@@@UAE@XZ ENDP ; CSingleton<CSpeedTreeForestDirectX8>::~CSingleton<CSpeedTreeForestDirectX8>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.h
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT
??0D3DXMATRIX@@QAE@XZ PROC				; D3DXMATRIX::D3DXMATRIX, COMDAT
; _this$ = ecx

; 177  :     D3DXMATRIX() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXMATRIX@@QAE@XZ ENDP				; D3DXMATRIX::D3DXMATRIX
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
